
BTL_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cfc4  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007d0  0800d178  0800d178  0000e178  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d948  0800d948  0000f2e8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800d948  0800d948  0000e948  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d950  0800d950  0000f2e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d950  0800d950  0000e950  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800d954  0800d954  0000e954  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002e8  20000000  0800d958  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000f2e8  2**0
                  CONTENTS
 10 .bss          00000d18  200002e8  200002e8  0000f2e8  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20001000  20001000  0000f2e8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000f2e8  2**0
                  CONTENTS, READONLY
 13 .debug_info   000146ff  00000000  00000000  0000f318  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000336e  00000000  00000000  00023a17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001128  00000000  00000000  00026d88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d23  00000000  00000000  00027eb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026ce4  00000000  00000000  00028bd3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000170db  00000000  00000000  0004f8b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000daaab  00000000  00000000  00066992  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0014143d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000059c8  00000000  00000000  00141480  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000055  00000000  00000000  00146e48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200002e8 	.word	0x200002e8
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800d15c 	.word	0x0800d15c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200002ec 	.word	0x200002ec
 80001ec:	0800d15c 	.word	0x0800d15c

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2f>:
 8000bc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bcc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bd0:	bf24      	itt	cs
 8000bd2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bd6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bda:	d90d      	bls.n	8000bf8 <__aeabi_d2f+0x30>
 8000bdc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000be0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000be4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000be8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bf0:	bf08      	it	eq
 8000bf2:	f020 0001 	biceq.w	r0, r0, #1
 8000bf6:	4770      	bx	lr
 8000bf8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bfc:	d121      	bne.n	8000c42 <__aeabi_d2f+0x7a>
 8000bfe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c02:	bfbc      	itt	lt
 8000c04:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c08:	4770      	bxlt	lr
 8000c0a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c12:	f1c2 0218 	rsb	r2, r2, #24
 8000c16:	f1c2 0c20 	rsb	ip, r2, #32
 8000c1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c22:	bf18      	it	ne
 8000c24:	f040 0001 	orrne.w	r0, r0, #1
 8000c28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c34:	ea40 000c 	orr.w	r0, r0, ip
 8000c38:	fa23 f302 	lsr.w	r3, r3, r2
 8000c3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c40:	e7cc      	b.n	8000bdc <__aeabi_d2f+0x14>
 8000c42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c46:	d107      	bne.n	8000c58 <__aeabi_d2f+0x90>
 8000c48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c4c:	bf1e      	ittt	ne
 8000c4e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c52:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c56:	4770      	bxne	lr
 8000c58:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c5c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c60:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop

08000c68 <__aeabi_uldivmod>:
 8000c68:	b953      	cbnz	r3, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6a:	b94a      	cbnz	r2, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6c:	2900      	cmp	r1, #0
 8000c6e:	bf08      	it	eq
 8000c70:	2800      	cmpeq	r0, #0
 8000c72:	bf1c      	itt	ne
 8000c74:	f04f 31ff 	movne.w	r1, #4294967295
 8000c78:	f04f 30ff 	movne.w	r0, #4294967295
 8000c7c:	f000 b988 	b.w	8000f90 <__aeabi_idiv0>
 8000c80:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c84:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c88:	f000 f806 	bl	8000c98 <__udivmoddi4>
 8000c8c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c94:	b004      	add	sp, #16
 8000c96:	4770      	bx	lr

08000c98 <__udivmoddi4>:
 8000c98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c9c:	9d08      	ldr	r5, [sp, #32]
 8000c9e:	468e      	mov	lr, r1
 8000ca0:	4604      	mov	r4, r0
 8000ca2:	4688      	mov	r8, r1
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d14a      	bne.n	8000d3e <__udivmoddi4+0xa6>
 8000ca8:	428a      	cmp	r2, r1
 8000caa:	4617      	mov	r7, r2
 8000cac:	d962      	bls.n	8000d74 <__udivmoddi4+0xdc>
 8000cae:	fab2 f682 	clz	r6, r2
 8000cb2:	b14e      	cbz	r6, 8000cc8 <__udivmoddi4+0x30>
 8000cb4:	f1c6 0320 	rsb	r3, r6, #32
 8000cb8:	fa01 f806 	lsl.w	r8, r1, r6
 8000cbc:	fa20 f303 	lsr.w	r3, r0, r3
 8000cc0:	40b7      	lsls	r7, r6
 8000cc2:	ea43 0808 	orr.w	r8, r3, r8
 8000cc6:	40b4      	lsls	r4, r6
 8000cc8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ccc:	fa1f fc87 	uxth.w	ip, r7
 8000cd0:	fbb8 f1fe 	udiv	r1, r8, lr
 8000cd4:	0c23      	lsrs	r3, r4, #16
 8000cd6:	fb0e 8811 	mls	r8, lr, r1, r8
 8000cda:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cde:	fb01 f20c 	mul.w	r2, r1, ip
 8000ce2:	429a      	cmp	r2, r3
 8000ce4:	d909      	bls.n	8000cfa <__udivmoddi4+0x62>
 8000ce6:	18fb      	adds	r3, r7, r3
 8000ce8:	f101 30ff 	add.w	r0, r1, #4294967295
 8000cec:	f080 80ea 	bcs.w	8000ec4 <__udivmoddi4+0x22c>
 8000cf0:	429a      	cmp	r2, r3
 8000cf2:	f240 80e7 	bls.w	8000ec4 <__udivmoddi4+0x22c>
 8000cf6:	3902      	subs	r1, #2
 8000cf8:	443b      	add	r3, r7
 8000cfa:	1a9a      	subs	r2, r3, r2
 8000cfc:	b2a3      	uxth	r3, r4
 8000cfe:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d02:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d06:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d0a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d0e:	459c      	cmp	ip, r3
 8000d10:	d909      	bls.n	8000d26 <__udivmoddi4+0x8e>
 8000d12:	18fb      	adds	r3, r7, r3
 8000d14:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d18:	f080 80d6 	bcs.w	8000ec8 <__udivmoddi4+0x230>
 8000d1c:	459c      	cmp	ip, r3
 8000d1e:	f240 80d3 	bls.w	8000ec8 <__udivmoddi4+0x230>
 8000d22:	443b      	add	r3, r7
 8000d24:	3802      	subs	r0, #2
 8000d26:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d2a:	eba3 030c 	sub.w	r3, r3, ip
 8000d2e:	2100      	movs	r1, #0
 8000d30:	b11d      	cbz	r5, 8000d3a <__udivmoddi4+0xa2>
 8000d32:	40f3      	lsrs	r3, r6
 8000d34:	2200      	movs	r2, #0
 8000d36:	e9c5 3200 	strd	r3, r2, [r5]
 8000d3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d3e:	428b      	cmp	r3, r1
 8000d40:	d905      	bls.n	8000d4e <__udivmoddi4+0xb6>
 8000d42:	b10d      	cbz	r5, 8000d48 <__udivmoddi4+0xb0>
 8000d44:	e9c5 0100 	strd	r0, r1, [r5]
 8000d48:	2100      	movs	r1, #0
 8000d4a:	4608      	mov	r0, r1
 8000d4c:	e7f5      	b.n	8000d3a <__udivmoddi4+0xa2>
 8000d4e:	fab3 f183 	clz	r1, r3
 8000d52:	2900      	cmp	r1, #0
 8000d54:	d146      	bne.n	8000de4 <__udivmoddi4+0x14c>
 8000d56:	4573      	cmp	r3, lr
 8000d58:	d302      	bcc.n	8000d60 <__udivmoddi4+0xc8>
 8000d5a:	4282      	cmp	r2, r0
 8000d5c:	f200 8105 	bhi.w	8000f6a <__udivmoddi4+0x2d2>
 8000d60:	1a84      	subs	r4, r0, r2
 8000d62:	eb6e 0203 	sbc.w	r2, lr, r3
 8000d66:	2001      	movs	r0, #1
 8000d68:	4690      	mov	r8, r2
 8000d6a:	2d00      	cmp	r5, #0
 8000d6c:	d0e5      	beq.n	8000d3a <__udivmoddi4+0xa2>
 8000d6e:	e9c5 4800 	strd	r4, r8, [r5]
 8000d72:	e7e2      	b.n	8000d3a <__udivmoddi4+0xa2>
 8000d74:	2a00      	cmp	r2, #0
 8000d76:	f000 8090 	beq.w	8000e9a <__udivmoddi4+0x202>
 8000d7a:	fab2 f682 	clz	r6, r2
 8000d7e:	2e00      	cmp	r6, #0
 8000d80:	f040 80a4 	bne.w	8000ecc <__udivmoddi4+0x234>
 8000d84:	1a8a      	subs	r2, r1, r2
 8000d86:	0c03      	lsrs	r3, r0, #16
 8000d88:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d8c:	b280      	uxth	r0, r0
 8000d8e:	b2bc      	uxth	r4, r7
 8000d90:	2101      	movs	r1, #1
 8000d92:	fbb2 fcfe 	udiv	ip, r2, lr
 8000d96:	fb0e 221c 	mls	r2, lr, ip, r2
 8000d9a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d9e:	fb04 f20c 	mul.w	r2, r4, ip
 8000da2:	429a      	cmp	r2, r3
 8000da4:	d907      	bls.n	8000db6 <__udivmoddi4+0x11e>
 8000da6:	18fb      	adds	r3, r7, r3
 8000da8:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000dac:	d202      	bcs.n	8000db4 <__udivmoddi4+0x11c>
 8000dae:	429a      	cmp	r2, r3
 8000db0:	f200 80e0 	bhi.w	8000f74 <__udivmoddi4+0x2dc>
 8000db4:	46c4      	mov	ip, r8
 8000db6:	1a9b      	subs	r3, r3, r2
 8000db8:	fbb3 f2fe 	udiv	r2, r3, lr
 8000dbc:	fb0e 3312 	mls	r3, lr, r2, r3
 8000dc0:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000dc4:	fb02 f404 	mul.w	r4, r2, r4
 8000dc8:	429c      	cmp	r4, r3
 8000dca:	d907      	bls.n	8000ddc <__udivmoddi4+0x144>
 8000dcc:	18fb      	adds	r3, r7, r3
 8000dce:	f102 30ff 	add.w	r0, r2, #4294967295
 8000dd2:	d202      	bcs.n	8000dda <__udivmoddi4+0x142>
 8000dd4:	429c      	cmp	r4, r3
 8000dd6:	f200 80ca 	bhi.w	8000f6e <__udivmoddi4+0x2d6>
 8000dda:	4602      	mov	r2, r0
 8000ddc:	1b1b      	subs	r3, r3, r4
 8000dde:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000de2:	e7a5      	b.n	8000d30 <__udivmoddi4+0x98>
 8000de4:	f1c1 0620 	rsb	r6, r1, #32
 8000de8:	408b      	lsls	r3, r1
 8000dea:	fa22 f706 	lsr.w	r7, r2, r6
 8000dee:	431f      	orrs	r7, r3
 8000df0:	fa0e f401 	lsl.w	r4, lr, r1
 8000df4:	fa20 f306 	lsr.w	r3, r0, r6
 8000df8:	fa2e fe06 	lsr.w	lr, lr, r6
 8000dfc:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000e00:	4323      	orrs	r3, r4
 8000e02:	fa00 f801 	lsl.w	r8, r0, r1
 8000e06:	fa1f fc87 	uxth.w	ip, r7
 8000e0a:	fbbe f0f9 	udiv	r0, lr, r9
 8000e0e:	0c1c      	lsrs	r4, r3, #16
 8000e10:	fb09 ee10 	mls	lr, r9, r0, lr
 8000e14:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000e18:	fb00 fe0c 	mul.w	lr, r0, ip
 8000e1c:	45a6      	cmp	lr, r4
 8000e1e:	fa02 f201 	lsl.w	r2, r2, r1
 8000e22:	d909      	bls.n	8000e38 <__udivmoddi4+0x1a0>
 8000e24:	193c      	adds	r4, r7, r4
 8000e26:	f100 3aff 	add.w	sl, r0, #4294967295
 8000e2a:	f080 809c 	bcs.w	8000f66 <__udivmoddi4+0x2ce>
 8000e2e:	45a6      	cmp	lr, r4
 8000e30:	f240 8099 	bls.w	8000f66 <__udivmoddi4+0x2ce>
 8000e34:	3802      	subs	r0, #2
 8000e36:	443c      	add	r4, r7
 8000e38:	eba4 040e 	sub.w	r4, r4, lr
 8000e3c:	fa1f fe83 	uxth.w	lr, r3
 8000e40:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e44:	fb09 4413 	mls	r4, r9, r3, r4
 8000e48:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000e4c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e50:	45a4      	cmp	ip, r4
 8000e52:	d908      	bls.n	8000e66 <__udivmoddi4+0x1ce>
 8000e54:	193c      	adds	r4, r7, r4
 8000e56:	f103 3eff 	add.w	lr, r3, #4294967295
 8000e5a:	f080 8082 	bcs.w	8000f62 <__udivmoddi4+0x2ca>
 8000e5e:	45a4      	cmp	ip, r4
 8000e60:	d97f      	bls.n	8000f62 <__udivmoddi4+0x2ca>
 8000e62:	3b02      	subs	r3, #2
 8000e64:	443c      	add	r4, r7
 8000e66:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000e6a:	eba4 040c 	sub.w	r4, r4, ip
 8000e6e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000e72:	4564      	cmp	r4, ip
 8000e74:	4673      	mov	r3, lr
 8000e76:	46e1      	mov	r9, ip
 8000e78:	d362      	bcc.n	8000f40 <__udivmoddi4+0x2a8>
 8000e7a:	d05f      	beq.n	8000f3c <__udivmoddi4+0x2a4>
 8000e7c:	b15d      	cbz	r5, 8000e96 <__udivmoddi4+0x1fe>
 8000e7e:	ebb8 0203 	subs.w	r2, r8, r3
 8000e82:	eb64 0409 	sbc.w	r4, r4, r9
 8000e86:	fa04 f606 	lsl.w	r6, r4, r6
 8000e8a:	fa22 f301 	lsr.w	r3, r2, r1
 8000e8e:	431e      	orrs	r6, r3
 8000e90:	40cc      	lsrs	r4, r1
 8000e92:	e9c5 6400 	strd	r6, r4, [r5]
 8000e96:	2100      	movs	r1, #0
 8000e98:	e74f      	b.n	8000d3a <__udivmoddi4+0xa2>
 8000e9a:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e9e:	0c01      	lsrs	r1, r0, #16
 8000ea0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000ea4:	b280      	uxth	r0, r0
 8000ea6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000eaa:	463b      	mov	r3, r7
 8000eac:	4638      	mov	r0, r7
 8000eae:	463c      	mov	r4, r7
 8000eb0:	46b8      	mov	r8, r7
 8000eb2:	46be      	mov	lr, r7
 8000eb4:	2620      	movs	r6, #32
 8000eb6:	fbb1 f1f7 	udiv	r1, r1, r7
 8000eba:	eba2 0208 	sub.w	r2, r2, r8
 8000ebe:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000ec2:	e766      	b.n	8000d92 <__udivmoddi4+0xfa>
 8000ec4:	4601      	mov	r1, r0
 8000ec6:	e718      	b.n	8000cfa <__udivmoddi4+0x62>
 8000ec8:	4610      	mov	r0, r2
 8000eca:	e72c      	b.n	8000d26 <__udivmoddi4+0x8e>
 8000ecc:	f1c6 0220 	rsb	r2, r6, #32
 8000ed0:	fa2e f302 	lsr.w	r3, lr, r2
 8000ed4:	40b7      	lsls	r7, r6
 8000ed6:	40b1      	lsls	r1, r6
 8000ed8:	fa20 f202 	lsr.w	r2, r0, r2
 8000edc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ee0:	430a      	orrs	r2, r1
 8000ee2:	fbb3 f8fe 	udiv	r8, r3, lr
 8000ee6:	b2bc      	uxth	r4, r7
 8000ee8:	fb0e 3318 	mls	r3, lr, r8, r3
 8000eec:	0c11      	lsrs	r1, r2, #16
 8000eee:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef2:	fb08 f904 	mul.w	r9, r8, r4
 8000ef6:	40b0      	lsls	r0, r6
 8000ef8:	4589      	cmp	r9, r1
 8000efa:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000efe:	b280      	uxth	r0, r0
 8000f00:	d93e      	bls.n	8000f80 <__udivmoddi4+0x2e8>
 8000f02:	1879      	adds	r1, r7, r1
 8000f04:	f108 3cff 	add.w	ip, r8, #4294967295
 8000f08:	d201      	bcs.n	8000f0e <__udivmoddi4+0x276>
 8000f0a:	4589      	cmp	r9, r1
 8000f0c:	d81f      	bhi.n	8000f4e <__udivmoddi4+0x2b6>
 8000f0e:	eba1 0109 	sub.w	r1, r1, r9
 8000f12:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f16:	fb09 f804 	mul.w	r8, r9, r4
 8000f1a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f1e:	b292      	uxth	r2, r2
 8000f20:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f24:	4542      	cmp	r2, r8
 8000f26:	d229      	bcs.n	8000f7c <__udivmoddi4+0x2e4>
 8000f28:	18ba      	adds	r2, r7, r2
 8000f2a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000f2e:	d2c4      	bcs.n	8000eba <__udivmoddi4+0x222>
 8000f30:	4542      	cmp	r2, r8
 8000f32:	d2c2      	bcs.n	8000eba <__udivmoddi4+0x222>
 8000f34:	f1a9 0102 	sub.w	r1, r9, #2
 8000f38:	443a      	add	r2, r7
 8000f3a:	e7be      	b.n	8000eba <__udivmoddi4+0x222>
 8000f3c:	45f0      	cmp	r8, lr
 8000f3e:	d29d      	bcs.n	8000e7c <__udivmoddi4+0x1e4>
 8000f40:	ebbe 0302 	subs.w	r3, lr, r2
 8000f44:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000f48:	3801      	subs	r0, #1
 8000f4a:	46e1      	mov	r9, ip
 8000f4c:	e796      	b.n	8000e7c <__udivmoddi4+0x1e4>
 8000f4e:	eba7 0909 	sub.w	r9, r7, r9
 8000f52:	4449      	add	r1, r9
 8000f54:	f1a8 0c02 	sub.w	ip, r8, #2
 8000f58:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f5c:	fb09 f804 	mul.w	r8, r9, r4
 8000f60:	e7db      	b.n	8000f1a <__udivmoddi4+0x282>
 8000f62:	4673      	mov	r3, lr
 8000f64:	e77f      	b.n	8000e66 <__udivmoddi4+0x1ce>
 8000f66:	4650      	mov	r0, sl
 8000f68:	e766      	b.n	8000e38 <__udivmoddi4+0x1a0>
 8000f6a:	4608      	mov	r0, r1
 8000f6c:	e6fd      	b.n	8000d6a <__udivmoddi4+0xd2>
 8000f6e:	443b      	add	r3, r7
 8000f70:	3a02      	subs	r2, #2
 8000f72:	e733      	b.n	8000ddc <__udivmoddi4+0x144>
 8000f74:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f78:	443b      	add	r3, r7
 8000f7a:	e71c      	b.n	8000db6 <__udivmoddi4+0x11e>
 8000f7c:	4649      	mov	r1, r9
 8000f7e:	e79c      	b.n	8000eba <__udivmoddi4+0x222>
 8000f80:	eba1 0109 	sub.w	r1, r1, r9
 8000f84:	46c4      	mov	ip, r8
 8000f86:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f8a:	fb09 f804 	mul.w	r8, r9, r4
 8000f8e:	e7c4      	b.n	8000f1a <__udivmoddi4+0x282>

08000f90 <__aeabi_idiv0>:
 8000f90:	4770      	bx	lr
 8000f92:	bf00      	nop

08000f94 <KalmanFilter_Init>:

#include "kalman.h"
#include "math.h"
#include "main.h"

void KalmanFilter_Init(KalmanFilter_t* kalman, double Q_angle, double Q_bias, double R_measure) {
 8000f94:	b480      	push	{r7}
 8000f96:	b089      	sub	sp, #36	@ 0x24
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	61f8      	str	r0, [r7, #28]
 8000f9c:	ed87 0b04 	vstr	d0, [r7, #16]
 8000fa0:	ed87 1b02 	vstr	d1, [r7, #8]
 8000fa4:	ed87 2b00 	vstr	d2, [r7]
	kalman->Q_angle = Q_angle;
 8000fa8:	69f9      	ldr	r1, [r7, #28]
 8000faa:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000fae:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
	kalman->Q_bias = Q_bias;
 8000fb2:	69f9      	ldr	r1, [r7, #28]
 8000fb4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000fb8:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40
	kalman->R_measure = R_measure;
 8000fbc:	69f9      	ldr	r1, [r7, #28]
 8000fbe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000fc2:	e9c1 2312 	strd	r2, r3, [r1, #72]	@ 0x48

	// Khởi tạo các giá trị mặc định
	kalman->angle = 0.0;
 8000fc6:	69f9      	ldr	r1, [r7, #28]
 8000fc8:	f04f 0200 	mov.w	r2, #0
 8000fcc:	f04f 0300 	mov.w	r3, #0
 8000fd0:	e9c1 2300 	strd	r2, r3, [r1]
	kalman->bias = 0.0;
 8000fd4:	69f9      	ldr	r1, [r7, #28]
 8000fd6:	f04f 0200 	mov.w	r2, #0
 8000fda:	f04f 0300 	mov.w	r3, #0
 8000fde:	e9c1 2302 	strd	r2, r3, [r1, #8]
	kalman->rate = 0.0;
 8000fe2:	69f9      	ldr	r1, [r7, #28]
 8000fe4:	f04f 0200 	mov.w	r2, #0
 8000fe8:	f04f 0300 	mov.w	r3, #0
 8000fec:	e9c1 2304 	strd	r2, r3, [r1, #16]

	// Khởi tạo ma trận hiệp phương sai
	kalman->P[0][0] = 0.0;
 8000ff0:	69f9      	ldr	r1, [r7, #28]
 8000ff2:	f04f 0200 	mov.w	r2, #0
 8000ff6:	f04f 0300 	mov.w	r3, #0
 8000ffa:	e9c1 2306 	strd	r2, r3, [r1, #24]
	kalman->P[0][1] = 0.0;
 8000ffe:	69f9      	ldr	r1, [r7, #28]
 8001000:	f04f 0200 	mov.w	r2, #0
 8001004:	f04f 0300 	mov.w	r3, #0
 8001008:	e9c1 2308 	strd	r2, r3, [r1, #32]
	kalman->P[1][0] = 0.0;
 800100c:	69f9      	ldr	r1, [r7, #28]
 800100e:	f04f 0200 	mov.w	r2, #0
 8001012:	f04f 0300 	mov.w	r3, #0
 8001016:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
	kalman->P[1][1] = 0.0;
 800101a:	69f9      	ldr	r1, [r7, #28]
 800101c:	f04f 0200 	mov.w	r2, #0
 8001020:	f04f 0300 	mov.w	r3, #0
 8001024:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
}
 8001028:	bf00      	nop
 800102a:	3724      	adds	r7, #36	@ 0x24
 800102c:	46bd      	mov	sp, r7
 800102e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001032:	4770      	bx	lr

08001034 <KalmanFilter_Update>:

double KalmanFilter_Update(KalmanFilter_t* kalman, double newAngle, double newRate, double dt) {
 8001034:	b5b0      	push	{r4, r5, r7, lr}
 8001036:	b094      	sub	sp, #80	@ 0x50
 8001038:	af00      	add	r7, sp, #0
 800103a:	61f8      	str	r0, [r7, #28]
 800103c:	ed87 0b04 	vstr	d0, [r7, #16]
 8001040:	ed87 1b02 	vstr	d1, [r7, #8]
 8001044:	ed87 2b00 	vstr	d2, [r7]
	// Bước 1: Dự đoán
	// Cập nhật góc dựa trên tốc độ góc
	kalman->angle += dt * (newRate - kalman->bias);
 8001048:	69fb      	ldr	r3, [r7, #28]
 800104a:	e9d3 4500 	ldrd	r4, r5, [r3]
 800104e:	69fb      	ldr	r3, [r7, #28]
 8001050:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001054:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001058:	f7ff f926 	bl	80002a8 <__aeabi_dsub>
 800105c:	4602      	mov	r2, r0
 800105e:	460b      	mov	r3, r1
 8001060:	4610      	mov	r0, r2
 8001062:	4619      	mov	r1, r3
 8001064:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001068:	f7ff fad6 	bl	8000618 <__aeabi_dmul>
 800106c:	4602      	mov	r2, r0
 800106e:	460b      	mov	r3, r1
 8001070:	4620      	mov	r0, r4
 8001072:	4629      	mov	r1, r5
 8001074:	f7ff f91a 	bl	80002ac <__adddf3>
 8001078:	4602      	mov	r2, r0
 800107a:	460b      	mov	r3, r1
 800107c:	69f9      	ldr	r1, [r7, #28]
 800107e:	e9c1 2300 	strd	r2, r3, [r1]

	// Cập nhật ma trận hiệp phương sai
	kalman->P[0][0] += dt * (dt * kalman->P[1][1] - kalman->P[0][1] - kalman->P[1][0] + kalman->Q_angle);
 8001082:	69fb      	ldr	r3, [r7, #28]
 8001084:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8001088:	69fb      	ldr	r3, [r7, #28]
 800108a:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 800108e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001092:	f7ff fac1 	bl	8000618 <__aeabi_dmul>
 8001096:	4602      	mov	r2, r0
 8001098:	460b      	mov	r3, r1
 800109a:	4610      	mov	r0, r2
 800109c:	4619      	mov	r1, r3
 800109e:	69fb      	ldr	r3, [r7, #28]
 80010a0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80010a4:	f7ff f900 	bl	80002a8 <__aeabi_dsub>
 80010a8:	4602      	mov	r2, r0
 80010aa:	460b      	mov	r3, r1
 80010ac:	4610      	mov	r0, r2
 80010ae:	4619      	mov	r1, r3
 80010b0:	69fb      	ldr	r3, [r7, #28]
 80010b2:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 80010b6:	f7ff f8f7 	bl	80002a8 <__aeabi_dsub>
 80010ba:	4602      	mov	r2, r0
 80010bc:	460b      	mov	r3, r1
 80010be:	4610      	mov	r0, r2
 80010c0:	4619      	mov	r1, r3
 80010c2:	69fb      	ldr	r3, [r7, #28]
 80010c4:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 80010c8:	f7ff f8f0 	bl	80002ac <__adddf3>
 80010cc:	4602      	mov	r2, r0
 80010ce:	460b      	mov	r3, r1
 80010d0:	4610      	mov	r0, r2
 80010d2:	4619      	mov	r1, r3
 80010d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80010d8:	f7ff fa9e 	bl	8000618 <__aeabi_dmul>
 80010dc:	4602      	mov	r2, r0
 80010de:	460b      	mov	r3, r1
 80010e0:	4620      	mov	r0, r4
 80010e2:	4629      	mov	r1, r5
 80010e4:	f7ff f8e2 	bl	80002ac <__adddf3>
 80010e8:	4602      	mov	r2, r0
 80010ea:	460b      	mov	r3, r1
 80010ec:	69f9      	ldr	r1, [r7, #28]
 80010ee:	e9c1 2306 	strd	r2, r3, [r1, #24]
	kalman->P[0][1] -= dt * kalman->P[1][1];
 80010f2:	69fb      	ldr	r3, [r7, #28]
 80010f4:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 80010f8:	69fb      	ldr	r3, [r7, #28]
 80010fa:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 80010fe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001102:	f7ff fa89 	bl	8000618 <__aeabi_dmul>
 8001106:	4602      	mov	r2, r0
 8001108:	460b      	mov	r3, r1
 800110a:	4620      	mov	r0, r4
 800110c:	4629      	mov	r1, r5
 800110e:	f7ff f8cb 	bl	80002a8 <__aeabi_dsub>
 8001112:	4602      	mov	r2, r0
 8001114:	460b      	mov	r3, r1
 8001116:	69f9      	ldr	r1, [r7, #28]
 8001118:	e9c1 2308 	strd	r2, r3, [r1, #32]
	kalman->P[1][0] -= dt * kalman->P[1][1];
 800111c:	69fb      	ldr	r3, [r7, #28]
 800111e:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	@ 0x28
 8001122:	69fb      	ldr	r3, [r7, #28]
 8001124:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 8001128:	e9d7 2300 	ldrd	r2, r3, [r7]
 800112c:	f7ff fa74 	bl	8000618 <__aeabi_dmul>
 8001130:	4602      	mov	r2, r0
 8001132:	460b      	mov	r3, r1
 8001134:	4620      	mov	r0, r4
 8001136:	4629      	mov	r1, r5
 8001138:	f7ff f8b6 	bl	80002a8 <__aeabi_dsub>
 800113c:	4602      	mov	r2, r0
 800113e:	460b      	mov	r3, r1
 8001140:	69f9      	ldr	r1, [r7, #28]
 8001142:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
	kalman->P[1][1] += kalman->Q_bias * dt;
 8001146:	69fb      	ldr	r3, [r7, #28]
 8001148:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	@ 0x30
 800114c:	69fb      	ldr	r3, [r7, #28]
 800114e:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 8001152:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001156:	f7ff fa5f 	bl	8000618 <__aeabi_dmul>
 800115a:	4602      	mov	r2, r0
 800115c:	460b      	mov	r3, r1
 800115e:	4620      	mov	r0, r4
 8001160:	4629      	mov	r1, r5
 8001162:	f7ff f8a3 	bl	80002ac <__adddf3>
 8001166:	4602      	mov	r2, r0
 8001168:	460b      	mov	r3, r1
 800116a:	69f9      	ldr	r1, [r7, #28]
 800116c:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30

	// Bước 2: Cập nhật
	// Tính độ lệch giữa góc đo được và góc dự đoán
	double S = kalman->P[0][0] + kalman->R_measure;
 8001170:	69fb      	ldr	r3, [r7, #28]
 8001172:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8001176:	69fb      	ldr	r3, [r7, #28]
 8001178:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	@ 0x48
 800117c:	f7ff f896 	bl	80002ac <__adddf3>
 8001180:	4602      	mov	r2, r0
 8001182:	460b      	mov	r3, r1
 8001184:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48

	// Tính Kalman gain
	double K[2];
	K[0] = kalman->P[0][0] / S;
 8001188:	69fb      	ldr	r3, [r7, #28]
 800118a:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 800118e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001192:	f7ff fb6b 	bl	800086c <__aeabi_ddiv>
 8001196:	4602      	mov	r2, r0
 8001198:	460b      	mov	r3, r1
 800119a:	e9c7 2308 	strd	r2, r3, [r7, #32]
	K[1] = kalman->P[1][0] / S;
 800119e:	69fb      	ldr	r3, [r7, #28]
 80011a0:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 80011a4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80011a8:	f7ff fb60 	bl	800086c <__aeabi_ddiv>
 80011ac:	4602      	mov	r2, r0
 80011ae:	460b      	mov	r3, r1
 80011b0:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28

	// Cập nhật góc và độ lệch
	double y = newAngle - kalman->angle;
 80011b4:	69fb      	ldr	r3, [r7, #28]
 80011b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011ba:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80011be:	f7ff f873 	bl	80002a8 <__aeabi_dsub>
 80011c2:	4602      	mov	r2, r0
 80011c4:	460b      	mov	r3, r1
 80011c6:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
	kalman->angle += K[0] * y;
 80011ca:	69fb      	ldr	r3, [r7, #28]
 80011cc:	e9d3 4500 	ldrd	r4, r5, [r3]
 80011d0:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80011d4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80011d8:	f7ff fa1e 	bl	8000618 <__aeabi_dmul>
 80011dc:	4602      	mov	r2, r0
 80011de:	460b      	mov	r3, r1
 80011e0:	4620      	mov	r0, r4
 80011e2:	4629      	mov	r1, r5
 80011e4:	f7ff f862 	bl	80002ac <__adddf3>
 80011e8:	4602      	mov	r2, r0
 80011ea:	460b      	mov	r3, r1
 80011ec:	69f9      	ldr	r1, [r7, #28]
 80011ee:	e9c1 2300 	strd	r2, r3, [r1]
	kalman->bias += K[1] * y;
 80011f2:	69fb      	ldr	r3, [r7, #28]
 80011f4:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 80011f8:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80011fc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8001200:	f7ff fa0a 	bl	8000618 <__aeabi_dmul>
 8001204:	4602      	mov	r2, r0
 8001206:	460b      	mov	r3, r1
 8001208:	4620      	mov	r0, r4
 800120a:	4629      	mov	r1, r5
 800120c:	f7ff f84e 	bl	80002ac <__adddf3>
 8001210:	4602      	mov	r2, r0
 8001212:	460b      	mov	r3, r1
 8001214:	69f9      	ldr	r1, [r7, #28]
 8001216:	e9c1 2302 	strd	r2, r3, [r1, #8]

	// Cập nhật ma trận hiệp phương sai
	double P00_temp = kalman->P[0][0];
 800121a:	69fb      	ldr	r3, [r7, #28]
 800121c:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001220:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
	double P01_temp = kalman->P[0][1];
 8001224:	69fb      	ldr	r3, [r7, #28]
 8001226:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800122a:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

	kalman->P[0][0] -= K[0] * P00_temp;
 800122e:	69fb      	ldr	r3, [r7, #28]
 8001230:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8001234:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001238:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800123c:	f7ff f9ec 	bl	8000618 <__aeabi_dmul>
 8001240:	4602      	mov	r2, r0
 8001242:	460b      	mov	r3, r1
 8001244:	4620      	mov	r0, r4
 8001246:	4629      	mov	r1, r5
 8001248:	f7ff f82e 	bl	80002a8 <__aeabi_dsub>
 800124c:	4602      	mov	r2, r0
 800124e:	460b      	mov	r3, r1
 8001250:	69f9      	ldr	r1, [r7, #28]
 8001252:	e9c1 2306 	strd	r2, r3, [r1, #24]
	kalman->P[0][1] -= K[0] * P01_temp;
 8001256:	69fb      	ldr	r3, [r7, #28]
 8001258:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 800125c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001260:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001264:	f7ff f9d8 	bl	8000618 <__aeabi_dmul>
 8001268:	4602      	mov	r2, r0
 800126a:	460b      	mov	r3, r1
 800126c:	4620      	mov	r0, r4
 800126e:	4629      	mov	r1, r5
 8001270:	f7ff f81a 	bl	80002a8 <__aeabi_dsub>
 8001274:	4602      	mov	r2, r0
 8001276:	460b      	mov	r3, r1
 8001278:	69f9      	ldr	r1, [r7, #28]
 800127a:	e9c1 2308 	strd	r2, r3, [r1, #32]
	kalman->P[1][0] -= K[1] * P00_temp;
 800127e:	69fb      	ldr	r3, [r7, #28]
 8001280:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	@ 0x28
 8001284:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001288:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800128c:	f7ff f9c4 	bl	8000618 <__aeabi_dmul>
 8001290:	4602      	mov	r2, r0
 8001292:	460b      	mov	r3, r1
 8001294:	4620      	mov	r0, r4
 8001296:	4629      	mov	r1, r5
 8001298:	f7ff f806 	bl	80002a8 <__aeabi_dsub>
 800129c:	4602      	mov	r2, r0
 800129e:	460b      	mov	r3, r1
 80012a0:	69f9      	ldr	r1, [r7, #28]
 80012a2:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
	kalman->P[1][1] -= K[1] * P01_temp;
 80012a6:	69fb      	ldr	r3, [r7, #28]
 80012a8:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	@ 0x30
 80012ac:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80012b0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80012b4:	f7ff f9b0 	bl	8000618 <__aeabi_dmul>
 80012b8:	4602      	mov	r2, r0
 80012ba:	460b      	mov	r3, r1
 80012bc:	4620      	mov	r0, r4
 80012be:	4629      	mov	r1, r5
 80012c0:	f7fe fff2 	bl	80002a8 <__aeabi_dsub>
 80012c4:	4602      	mov	r2, r0
 80012c6:	460b      	mov	r3, r1
 80012c8:	69f9      	ldr	r1, [r7, #28]
 80012ca:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30

	// Lưu tốc độ góc đã được lọc
	kalman->rate = newRate - kalman->bias;
 80012ce:	69fb      	ldr	r3, [r7, #28]
 80012d0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80012d4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80012d8:	f7fe ffe6 	bl	80002a8 <__aeabi_dsub>
 80012dc:	4602      	mov	r2, r0
 80012de:	460b      	mov	r3, r1
 80012e0:	69f9      	ldr	r1, [r7, #28]
 80012e2:	e9c1 2304 	strd	r2, r3, [r1, #16]

	return kalman->angle;
 80012e6:	69fb      	ldr	r3, [r7, #28]
 80012e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012ec:	ec43 2b17 	vmov	d7, r2, r3
}
 80012f0:	eeb0 0a47 	vmov.f32	s0, s14
 80012f4:	eef0 0a67 	vmov.f32	s1, s15
 80012f8:	3750      	adds	r7, #80	@ 0x50
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bdb0      	pop	{r4, r5, r7, pc}
	...

08001300 <MPU6050_Init>:
/**
  * @brief  Khởi tạo MPU6050 gyroscope
  * @retval None
  */
void MPU6050_Init(void)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b086      	sub	sp, #24
 8001304:	af04      	add	r7, sp, #16
    uint8_t data;
    
    // Wake up MPU6050
    data = 0x00;
 8001306:	2300      	movs	r3, #0
 8001308:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, MPU6050_PWR_MGMT_1, 1, &data, 1, HAL_MAX_DELAY);
 800130a:	f04f 33ff 	mov.w	r3, #4294967295
 800130e:	9302      	str	r3, [sp, #8]
 8001310:	2301      	movs	r3, #1
 8001312:	9301      	str	r3, [sp, #4]
 8001314:	1dfb      	adds	r3, r7, #7
 8001316:	9300      	str	r3, [sp, #0]
 8001318:	2301      	movs	r3, #1
 800131a:	226b      	movs	r2, #107	@ 0x6b
 800131c:	21d0      	movs	r1, #208	@ 0xd0
 800131e:	4823      	ldr	r0, [pc, #140]	@ (80013ac <MPU6050_Init+0xac>)
 8001320:	f001 fe3a 	bl	8002f98 <HAL_I2C_Mem_Write>
    
    // Set sample rate to 1kHz  
    data = 0x07;
 8001324:	2307      	movs	r3, #7
 8001326:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, MPU6050_SMPLRT_DIV, 1, &data, 1, HAL_MAX_DELAY);
 8001328:	f04f 33ff 	mov.w	r3, #4294967295
 800132c:	9302      	str	r3, [sp, #8]
 800132e:	2301      	movs	r3, #1
 8001330:	9301      	str	r3, [sp, #4]
 8001332:	1dfb      	adds	r3, r7, #7
 8001334:	9300      	str	r3, [sp, #0]
 8001336:	2301      	movs	r3, #1
 8001338:	2219      	movs	r2, #25
 800133a:	21d0      	movs	r1, #208	@ 0xd0
 800133c:	481b      	ldr	r0, [pc, #108]	@ (80013ac <MPU6050_Init+0xac>)
 800133e:	f001 fe2b 	bl	8002f98 <HAL_I2C_Mem_Write>
    
    // Set DLPF to 44Hz
    data = 0x03;
 8001342:	2303      	movs	r3, #3
 8001344:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, MPU6050_CONFIG, 1, &data, 1, HAL_MAX_DELAY);
 8001346:	f04f 33ff 	mov.w	r3, #4294967295
 800134a:	9302      	str	r3, [sp, #8]
 800134c:	2301      	movs	r3, #1
 800134e:	9301      	str	r3, [sp, #4]
 8001350:	1dfb      	adds	r3, r7, #7
 8001352:	9300      	str	r3, [sp, #0]
 8001354:	2301      	movs	r3, #1
 8001356:	221a      	movs	r2, #26
 8001358:	21d0      	movs	r1, #208	@ 0xd0
 800135a:	4814      	ldr	r0, [pc, #80]	@ (80013ac <MPU6050_Init+0xac>)
 800135c:	f001 fe1c 	bl	8002f98 <HAL_I2C_Mem_Write>
    
    // Set gyro range to ±2000°/s
    data = 0x18;
 8001360:	2318      	movs	r3, #24
 8001362:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, MPU6050_GYRO_CONFIG, 1, &data, 1, HAL_MAX_DELAY);
 8001364:	f04f 33ff 	mov.w	r3, #4294967295
 8001368:	9302      	str	r3, [sp, #8]
 800136a:	2301      	movs	r3, #1
 800136c:	9301      	str	r3, [sp, #4]
 800136e:	1dfb      	adds	r3, r7, #7
 8001370:	9300      	str	r3, [sp, #0]
 8001372:	2301      	movs	r3, #1
 8001374:	221b      	movs	r2, #27
 8001376:	21d0      	movs	r1, #208	@ 0xd0
 8001378:	480c      	ldr	r0, [pc, #48]	@ (80013ac <MPU6050_Init+0xac>)
 800137a:	f001 fe0d 	bl	8002f98 <HAL_I2C_Mem_Write>
    
    // Set accelerometer range to ±8g  
    data = 0x10;
 800137e:	2310      	movs	r3, #16
 8001380:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, MPU6050_ACCEL_CONFIG, 1, &data, 1, HAL_MAX_DELAY);
 8001382:	f04f 33ff 	mov.w	r3, #4294967295
 8001386:	9302      	str	r3, [sp, #8]
 8001388:	2301      	movs	r3, #1
 800138a:	9301      	str	r3, [sp, #4]
 800138c:	1dfb      	adds	r3, r7, #7
 800138e:	9300      	str	r3, [sp, #0]
 8001390:	2301      	movs	r3, #1
 8001392:	221c      	movs	r2, #28
 8001394:	21d0      	movs	r1, #208	@ 0xd0
 8001396:	4805      	ldr	r0, [pc, #20]	@ (80013ac <MPU6050_Init+0xac>)
 8001398:	f001 fdfe 	bl	8002f98 <HAL_I2C_Mem_Write>
    
    HAL_Delay(100);
 800139c:	2064      	movs	r0, #100	@ 0x64
 800139e:	f001 f9bd 	bl	800271c <HAL_Delay>
}
 80013a2:	bf00      	nop
 80013a4:	3708      	adds	r7, #8
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	20000304 	.word	0x20000304

080013b0 <Gyro_Calibrate>:
/**
  * @brief  Calibrate gyroscope để tìm offset
  * @retval None
  */
void Gyro_Calibrate(void)
{
 80013b0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80013b4:	b0a4      	sub	sp, #144	@ 0x90
 80013b6:	af04      	add	r7, sp, #16
    char buffer[100];
    float sum_x = 0, sum_y = 0, sum_z = 0;
 80013b8:	f04f 0300 	mov.w	r3, #0
 80013bc:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80013be:	f04f 0300 	mov.w	r3, #0
 80013c2:	67bb      	str	r3, [r7, #120]	@ 0x78
 80013c4:	f04f 0300 	mov.w	r3, #0
 80013c8:	677b      	str	r3, [r7, #116]	@ 0x74
    
    sprintf(buffer, "🔧 Calibrating gyroscope... Keep still!\r\n");
 80013ca:	1d3b      	adds	r3, r7, #4
 80013cc:	4963      	ldr	r1, [pc, #396]	@ (800155c <Gyro_Calibrate+0x1ac>)
 80013ce:	4618      	mov	r0, r3
 80013d0:	f009 fa22 	bl	800a818 <siprintf>
    HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 80013d4:	1d3b      	adds	r3, r7, #4
 80013d6:	4618      	mov	r0, r3
 80013d8:	f7fe ff5a 	bl	8000290 <strlen>
 80013dc:	4603      	mov	r3, r0
 80013de:	b29a      	uxth	r2, r3
 80013e0:	1d39      	adds	r1, r7, #4
 80013e2:	f04f 33ff 	mov.w	r3, #4294967295
 80013e6:	485e      	ldr	r0, [pc, #376]	@ (8001560 <Gyro_Calibrate+0x1b0>)
 80013e8:	f004 fc54 	bl	8005c94 <HAL_UART_Transmit>
    
    for(int i = 0; i < CALIBRATION_SAMPLES; i++)
 80013ec:	2300      	movs	r3, #0
 80013ee:	673b      	str	r3, [r7, #112]	@ 0x70
 80013f0:	e066      	b.n	80014c0 <Gyro_Calibrate+0x110>
    {
        if(HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, MPU6050_GYRO_XOUT_H, 1, gyro_data, 6, HAL_MAX_DELAY) == HAL_OK)
 80013f2:	f04f 33ff 	mov.w	r3, #4294967295
 80013f6:	9302      	str	r3, [sp, #8]
 80013f8:	2306      	movs	r3, #6
 80013fa:	9301      	str	r3, [sp, #4]
 80013fc:	4b59      	ldr	r3, [pc, #356]	@ (8001564 <Gyro_Calibrate+0x1b4>)
 80013fe:	9300      	str	r3, [sp, #0]
 8001400:	2301      	movs	r3, #1
 8001402:	2243      	movs	r2, #67	@ 0x43
 8001404:	21d0      	movs	r1, #208	@ 0xd0
 8001406:	4858      	ldr	r0, [pc, #352]	@ (8001568 <Gyro_Calibrate+0x1b8>)
 8001408:	f001 fec0 	bl	800318c <HAL_I2C_Mem_Read>
 800140c:	4603      	mov	r3, r0
 800140e:	2b00      	cmp	r3, #0
 8001410:	d150      	bne.n	80014b4 <Gyro_Calibrate+0x104>
        {
            int16_t raw_x = (int16_t)(gyro_data[0] << 8 | gyro_data[1]);
 8001412:	4b54      	ldr	r3, [pc, #336]	@ (8001564 <Gyro_Calibrate+0x1b4>)
 8001414:	781b      	ldrb	r3, [r3, #0]
 8001416:	b21b      	sxth	r3, r3
 8001418:	021b      	lsls	r3, r3, #8
 800141a:	b21a      	sxth	r2, r3
 800141c:	4b51      	ldr	r3, [pc, #324]	@ (8001564 <Gyro_Calibrate+0x1b4>)
 800141e:	785b      	ldrb	r3, [r3, #1]
 8001420:	b21b      	sxth	r3, r3
 8001422:	4313      	orrs	r3, r2
 8001424:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
            int16_t raw_y = (int16_t)(gyro_data[2] << 8 | gyro_data[3]);
 8001428:	4b4e      	ldr	r3, [pc, #312]	@ (8001564 <Gyro_Calibrate+0x1b4>)
 800142a:	789b      	ldrb	r3, [r3, #2]
 800142c:	b21b      	sxth	r3, r3
 800142e:	021b      	lsls	r3, r3, #8
 8001430:	b21a      	sxth	r2, r3
 8001432:	4b4c      	ldr	r3, [pc, #304]	@ (8001564 <Gyro_Calibrate+0x1b4>)
 8001434:	78db      	ldrb	r3, [r3, #3]
 8001436:	b21b      	sxth	r3, r3
 8001438:	4313      	orrs	r3, r2
 800143a:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
            int16_t raw_z = (int16_t)(gyro_data[4] << 8 | gyro_data[5]);
 800143e:	4b49      	ldr	r3, [pc, #292]	@ (8001564 <Gyro_Calibrate+0x1b4>)
 8001440:	791b      	ldrb	r3, [r3, #4]
 8001442:	b21b      	sxth	r3, r3
 8001444:	021b      	lsls	r3, r3, #8
 8001446:	b21a      	sxth	r2, r3
 8001448:	4b46      	ldr	r3, [pc, #280]	@ (8001564 <Gyro_Calibrate+0x1b4>)
 800144a:	795b      	ldrb	r3, [r3, #5]
 800144c:	b21b      	sxth	r3, r3
 800144e:	4313      	orrs	r3, r2
 8001450:	f8a7 306a 	strh.w	r3, [r7, #106]	@ 0x6a
            
            // ±2000°/s range, scale factor is 16.4 LSB/°/s
            sum_x += (float)raw_x / 16.4f;
 8001454:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	@ 0x6e
 8001458:	ee07 3a90 	vmov	s15, r3
 800145c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001460:	eddf 6a42 	vldr	s13, [pc, #264]	@ 800156c <Gyro_Calibrate+0x1bc>
 8001464:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001468:	ed97 7a1f 	vldr	s14, [r7, #124]	@ 0x7c
 800146c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001470:	edc7 7a1f 	vstr	s15, [r7, #124]	@ 0x7c
            sum_y += (float)raw_y / 16.4f;
 8001474:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	@ 0x6c
 8001478:	ee07 3a90 	vmov	s15, r3
 800147c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001480:	eddf 6a3a 	vldr	s13, [pc, #232]	@ 800156c <Gyro_Calibrate+0x1bc>
 8001484:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001488:	ed97 7a1e 	vldr	s14, [r7, #120]	@ 0x78
 800148c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001490:	edc7 7a1e 	vstr	s15, [r7, #120]	@ 0x78
            sum_z += (float)raw_z / 16.4f;
 8001494:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	@ 0x6a
 8001498:	ee07 3a90 	vmov	s15, r3
 800149c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80014a0:	eddf 6a32 	vldr	s13, [pc, #200]	@ 800156c <Gyro_Calibrate+0x1bc>
 80014a4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014a8:	ed97 7a1d 	vldr	s14, [r7, #116]	@ 0x74
 80014ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014b0:	edc7 7a1d 	vstr	s15, [r7, #116]	@ 0x74
        }
        HAL_Delay(5);
 80014b4:	2005      	movs	r0, #5
 80014b6:	f001 f931 	bl	800271c <HAL_Delay>
    for(int i = 0; i < CALIBRATION_SAMPLES; i++)
 80014ba:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80014bc:	3301      	adds	r3, #1
 80014be:	673b      	str	r3, [r7, #112]	@ 0x70
 80014c0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80014c2:	2bc7      	cmp	r3, #199	@ 0xc7
 80014c4:	dd95      	ble.n	80013f2 <Gyro_Calibrate+0x42>
    }
    
    gyro_offset_x = sum_x / CALIBRATION_SAMPLES;
 80014c6:	ed97 7a1f 	vldr	s14, [r7, #124]	@ 0x7c
 80014ca:	eddf 6a29 	vldr	s13, [pc, #164]	@ 8001570 <Gyro_Calibrate+0x1c0>
 80014ce:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014d2:	4b28      	ldr	r3, [pc, #160]	@ (8001574 <Gyro_Calibrate+0x1c4>)
 80014d4:	edc3 7a00 	vstr	s15, [r3]
    gyro_offset_y = sum_y / CALIBRATION_SAMPLES;
 80014d8:	ed97 7a1e 	vldr	s14, [r7, #120]	@ 0x78
 80014dc:	eddf 6a24 	vldr	s13, [pc, #144]	@ 8001570 <Gyro_Calibrate+0x1c0>
 80014e0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014e4:	4b24      	ldr	r3, [pc, #144]	@ (8001578 <Gyro_Calibrate+0x1c8>)
 80014e6:	edc3 7a00 	vstr	s15, [r3]
    gyro_offset_z = sum_z / CALIBRATION_SAMPLES;
 80014ea:	ed97 7a1d 	vldr	s14, [r7, #116]	@ 0x74
 80014ee:	eddf 6a20 	vldr	s13, [pc, #128]	@ 8001570 <Gyro_Calibrate+0x1c0>
 80014f2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014f6:	4b21      	ldr	r3, [pc, #132]	@ (800157c <Gyro_Calibrate+0x1cc>)
 80014f8:	edc3 7a00 	vstr	s15, [r3]
    
    sprintf(buffer, "✅ Gyro calibrated! Offsets: X=%.1f Y=%.1f Z=%.1f\r\n", 
 80014fc:	4b1d      	ldr	r3, [pc, #116]	@ (8001574 <Gyro_Calibrate+0x1c4>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	4618      	mov	r0, r3
 8001502:	f7ff f831 	bl	8000568 <__aeabi_f2d>
 8001506:	4680      	mov	r8, r0
 8001508:	4689      	mov	r9, r1
 800150a:	4b1b      	ldr	r3, [pc, #108]	@ (8001578 <Gyro_Calibrate+0x1c8>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	4618      	mov	r0, r3
 8001510:	f7ff f82a 	bl	8000568 <__aeabi_f2d>
 8001514:	4604      	mov	r4, r0
 8001516:	460d      	mov	r5, r1
 8001518:	4b18      	ldr	r3, [pc, #96]	@ (800157c <Gyro_Calibrate+0x1cc>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	4618      	mov	r0, r3
 800151e:	f7ff f823 	bl	8000568 <__aeabi_f2d>
 8001522:	4602      	mov	r2, r0
 8001524:	460b      	mov	r3, r1
 8001526:	1d38      	adds	r0, r7, #4
 8001528:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800152c:	e9cd 4500 	strd	r4, r5, [sp]
 8001530:	4642      	mov	r2, r8
 8001532:	464b      	mov	r3, r9
 8001534:	4912      	ldr	r1, [pc, #72]	@ (8001580 <Gyro_Calibrate+0x1d0>)
 8001536:	f009 f96f 	bl	800a818 <siprintf>
            gyro_offset_x, gyro_offset_y, gyro_offset_z);
    HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 800153a:	1d3b      	adds	r3, r7, #4
 800153c:	4618      	mov	r0, r3
 800153e:	f7fe fea7 	bl	8000290 <strlen>
 8001542:	4603      	mov	r3, r0
 8001544:	b29a      	uxth	r2, r3
 8001546:	1d39      	adds	r1, r7, #4
 8001548:	f04f 33ff 	mov.w	r3, #4294967295
 800154c:	4804      	ldr	r0, [pc, #16]	@ (8001560 <Gyro_Calibrate+0x1b0>)
 800154e:	f004 fba1 	bl	8005c94 <HAL_UART_Transmit>
}
 8001552:	bf00      	nop
 8001554:	3780      	adds	r7, #128	@ 0x80
 8001556:	46bd      	mov	sp, r7
 8001558:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800155c:	0800d178 	.word	0x0800d178
 8001560:	20000358 	.word	0x20000358
 8001564:	20000490 	.word	0x20000490
 8001568:	20000304 	.word	0x20000304
 800156c:	41833333 	.word	0x41833333
 8001570:	43480000 	.word	0x43480000
 8001574:	200004b0 	.word	0x200004b0
 8001578:	200004b4 	.word	0x200004b4
 800157c:	200004b8 	.word	0x200004b8
 8001580:	0800d1a4 	.word	0x0800d1a4

08001584 <Send_Mouse_HID>:
  * @param  dy: Delta Y (-127 to 127) 
  * @param  buttons: Button state (bit 0: left, bit 1: right)
  * @retval None
  */
void Send_Mouse_HID(int8_t dx, int8_t dy, uint8_t buttons)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b09c      	sub	sp, #112	@ 0x70
 8001588:	af02      	add	r7, sp, #8
 800158a:	4603      	mov	r3, r0
 800158c:	71fb      	strb	r3, [r7, #7]
 800158e:	460b      	mov	r3, r1
 8001590:	71bb      	strb	r3, [r7, #6]
 8001592:	4613      	mov	r3, r2
 8001594:	717b      	strb	r3, [r7, #5]
    static uint32_t busy_count = 0;
    
    // Kiểm tra USB đã sẵn sàng chưa
    if(!usb_ready) {
 8001596:	4b54      	ldr	r3, [pc, #336]	@ (80016e8 <Send_Mouse_HID+0x164>)
 8001598:	781b      	ldrb	r3, [r3, #0]
 800159a:	2b00      	cmp	r3, #0
 800159c:	f000 809d 	beq.w	80016da <Send_Mouse_HID+0x156>
        return; // Không spam debug message
    }
    
    // Rate limiting: gửi mỗi 8ms (125Hz) - tần số ổn định cho USB HS
    uint32_t current_time = HAL_GetTick();
 80015a0:	f001 f8b0 	bl	8002704 <HAL_GetTick>
 80015a4:	6678      	str	r0, [r7, #100]	@ 0x64
    if(current_time - last_hid_time < 8) {
 80015a6:	4b51      	ldr	r3, [pc, #324]	@ (80016ec <Send_Mouse_HID+0x168>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80015ac:	1ad3      	subs	r3, r2, r3
 80015ae:	2b07      	cmp	r3, #7
 80015b0:	f240 8095 	bls.w	80016de <Send_Mouse_HID+0x15a>
        return; // Quá sớm, skip report này
    }
    last_hid_time = current_time;
 80015b4:	4a4d      	ldr	r2, [pc, #308]	@ (80016ec <Send_Mouse_HID+0x168>)
 80015b6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80015b8:	6013      	str	r3, [r2, #0]
    mouseHID mousehid = {0};
 80015ba:	2300      	movs	r3, #0
 80015bc:	65fb      	str	r3, [r7, #92]	@ 0x5c
    
    // Tạo HID report theo standard mouse format
    mousehid.buttons = buttons;
 80015be:	797b      	ldrb	r3, [r7, #5]
 80015c0:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
    mousehid.dx = dx;
 80015c4:	79fb      	ldrb	r3, [r7, #7]
 80015c6:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
    mousehid.dy = dy;
 80015ca:	79bb      	ldrb	r3, [r7, #6]
 80015cc:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
    mousehid.wheel = 0;
 80015d0:	2300      	movs	r3, #0
 80015d2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
    
    USBD_StatusTypeDef result = USBD_HID_SendReport(&hUsbDeviceHS, (uint8_t*)&mousehid, sizeof(mousehid));
 80015d6:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80015da:	2204      	movs	r2, #4
 80015dc:	4619      	mov	r1, r3
 80015de:	4844      	ldr	r0, [pc, #272]	@ (80016f0 <Send_Mouse_HID+0x16c>)
 80015e0:	f006 fc18 	bl	8007e14 <USBD_HID_SendReport>
 80015e4:	4603      	mov	r3, r0
 80015e6:	f887 3063 	strb.w	r3, [r7, #99]	@ 0x63
    
    if(result == USBD_OK) {
 80015ea:	f897 3063 	ldrb.w	r3, [r7, #99]	@ 0x63
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d12f      	bne.n	8001652 <Send_Mouse_HID+0xce>
        mouse_packets_sent++;
 80015f2:	4b40      	ldr	r3, [pc, #256]	@ (80016f4 <Send_Mouse_HID+0x170>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	3301      	adds	r3, #1
 80015f8:	4a3e      	ldr	r2, [pc, #248]	@ (80016f4 <Send_Mouse_HID+0x170>)
 80015fa:	6013      	str	r3, [r2, #0]
        busy_count = 0; // Reset busy counter khi thành công
 80015fc:	4b3e      	ldr	r3, [pc, #248]	@ (80016f8 <Send_Mouse_HID+0x174>)
 80015fe:	2200      	movs	r2, #0
 8001600:	601a      	str	r2, [r3, #0]
        
        // Debug thành công (hiện ít thôi để không spam)
        if(mouse_packets_sent % 200 == 1) {
 8001602:	4b3c      	ldr	r3, [pc, #240]	@ (80016f4 <Send_Mouse_HID+0x170>)
 8001604:	681a      	ldr	r2, [r3, #0]
 8001606:	4b3d      	ldr	r3, [pc, #244]	@ (80016fc <Send_Mouse_HID+0x178>)
 8001608:	fba3 1302 	umull	r1, r3, r3, r2
 800160c:	099b      	lsrs	r3, r3, #6
 800160e:	21c8      	movs	r1, #200	@ 0xc8
 8001610:	fb01 f303 	mul.w	r3, r1, r3
 8001614:	1ad3      	subs	r3, r2, r3
 8001616:	2b01      	cmp	r3, #1
 8001618:	d162      	bne.n	80016e0 <Send_Mouse_HID+0x15c>
            char debug_msg[80];
            sprintf(debug_msg, "✅ USB OK: #%lu (dx=%d, dy=%d)\r\n", 
 800161a:	4b36      	ldr	r3, [pc, #216]	@ (80016f4 <Send_Mouse_HID+0x170>)
 800161c:	681a      	ldr	r2, [r3, #0]
 800161e:	f997 1007 	ldrsb.w	r1, [r7, #7]
 8001622:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001626:	f107 000c 	add.w	r0, r7, #12
 800162a:	9300      	str	r3, [sp, #0]
 800162c:	460b      	mov	r3, r1
 800162e:	4934      	ldr	r1, [pc, #208]	@ (8001700 <Send_Mouse_HID+0x17c>)
 8001630:	f009 f8f2 	bl	800a818 <siprintf>
                    mouse_packets_sent, dx, dy);
            HAL_UART_Transmit(&huart1, (uint8_t*)debug_msg, strlen(debug_msg), HAL_MAX_DELAY);
 8001634:	f107 030c 	add.w	r3, r7, #12
 8001638:	4618      	mov	r0, r3
 800163a:	f7fe fe29 	bl	8000290 <strlen>
 800163e:	4603      	mov	r3, r0
 8001640:	b29a      	uxth	r2, r3
 8001642:	f107 010c 	add.w	r1, r7, #12
 8001646:	f04f 33ff 	mov.w	r3, #4294967295
 800164a:	482e      	ldr	r0, [pc, #184]	@ (8001704 <Send_Mouse_HID+0x180>)
 800164c:	f004 fb22 	bl	8005c94 <HAL_UART_Transmit>
 8001650:	e046      	b.n	80016e0 <Send_Mouse_HID+0x15c>
        }
    }
    else if(result == 3) { // USBD_BUSY
 8001652:	f897 3063 	ldrb.w	r3, [r7, #99]	@ 0x63
 8001656:	2b03      	cmp	r3, #3
 8001658:	d11c      	bne.n	8001694 <Send_Mouse_HID+0x110>
        busy_count++;
 800165a:	4b27      	ldr	r3, [pc, #156]	@ (80016f8 <Send_Mouse_HID+0x174>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	3301      	adds	r3, #1
 8001660:	4a25      	ldr	r2, [pc, #148]	@ (80016f8 <Send_Mouse_HID+0x174>)
 8001662:	6013      	str	r3, [r2, #0]
        // Tự động điều chỉnh tần số gửi khi busy
        if(busy_count >= 20) {
 8001664:	4b24      	ldr	r3, [pc, #144]	@ (80016f8 <Send_Mouse_HID+0x174>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	2b13      	cmp	r3, #19
 800166a:	d939      	bls.n	80016e0 <Send_Mouse_HID+0x15c>
            last_hid_time += 10; // Tăng delay để giảm tần số
 800166c:	4b1f      	ldr	r3, [pc, #124]	@ (80016ec <Send_Mouse_HID+0x168>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	330a      	adds	r3, #10
 8001672:	4a1e      	ldr	r2, [pc, #120]	@ (80016ec <Send_Mouse_HID+0x168>)
 8001674:	6013      	str	r3, [r2, #0]
            if(busy_count >= 50) {
 8001676:	4b20      	ldr	r3, [pc, #128]	@ (80016f8 <Send_Mouse_HID+0x174>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	2b31      	cmp	r3, #49	@ 0x31
 800167c:	d930      	bls.n	80016e0 <Send_Mouse_HID+0x15c>
                HAL_UART_Transmit(&huart1, (uint8_t*)"⚠️  USB busy (auto-adjusting rate)\r\n", 37, HAL_MAX_DELAY);
 800167e:	f04f 33ff 	mov.w	r3, #4294967295
 8001682:	2225      	movs	r2, #37	@ 0x25
 8001684:	4920      	ldr	r1, [pc, #128]	@ (8001708 <Send_Mouse_HID+0x184>)
 8001686:	481f      	ldr	r0, [pc, #124]	@ (8001704 <Send_Mouse_HID+0x180>)
 8001688:	f004 fb04 	bl	8005c94 <HAL_UART_Transmit>
                busy_count = 0; // Reset để không spam
 800168c:	4b1a      	ldr	r3, [pc, #104]	@ (80016f8 <Send_Mouse_HID+0x174>)
 800168e:	2200      	movs	r2, #0
 8001690:	601a      	str	r2, [r3, #0]
 8001692:	e025      	b.n	80016e0 <Send_Mouse_HID+0x15c>
            }
        }
    }
    else {
        // Lỗi khác
        if(debug_counter % 100 == 0) { // Hiện ít thôi
 8001694:	4b1d      	ldr	r3, [pc, #116]	@ (800170c <Send_Mouse_HID+0x188>)
 8001696:	681a      	ldr	r2, [r3, #0]
 8001698:	4b18      	ldr	r3, [pc, #96]	@ (80016fc <Send_Mouse_HID+0x178>)
 800169a:	fba3 1302 	umull	r1, r3, r3, r2
 800169e:	095b      	lsrs	r3, r3, #5
 80016a0:	2164      	movs	r1, #100	@ 0x64
 80016a2:	fb01 f303 	mul.w	r3, r1, r3
 80016a6:	1ad3      	subs	r3, r2, r3
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d119      	bne.n	80016e0 <Send_Mouse_HID+0x15c>
            char debug_msg[60];
            sprintf(debug_msg, "❌ USB Error: %d\r\n", result);
 80016ac:	f897 2063 	ldrb.w	r2, [r7, #99]	@ 0x63
 80016b0:	f107 030c 	add.w	r3, r7, #12
 80016b4:	4916      	ldr	r1, [pc, #88]	@ (8001710 <Send_Mouse_HID+0x18c>)
 80016b6:	4618      	mov	r0, r3
 80016b8:	f009 f8ae 	bl	800a818 <siprintf>
            HAL_UART_Transmit(&huart1, (uint8_t*)debug_msg, strlen(debug_msg), HAL_MAX_DELAY);
 80016bc:	f107 030c 	add.w	r3, r7, #12
 80016c0:	4618      	mov	r0, r3
 80016c2:	f7fe fde5 	bl	8000290 <strlen>
 80016c6:	4603      	mov	r3, r0
 80016c8:	b29a      	uxth	r2, r3
 80016ca:	f107 010c 	add.w	r1, r7, #12
 80016ce:	f04f 33ff 	mov.w	r3, #4294967295
 80016d2:	480c      	ldr	r0, [pc, #48]	@ (8001704 <Send_Mouse_HID+0x180>)
 80016d4:	f004 fade 	bl	8005c94 <HAL_UART_Transmit>
 80016d8:	e002      	b.n	80016e0 <Send_Mouse_HID+0x15c>
        return; // Không spam debug message
 80016da:	bf00      	nop
 80016dc:	e000      	b.n	80016e0 <Send_Mouse_HID+0x15c>
        return; // Quá sớm, skip report này
 80016de:	bf00      	nop
        }
    }
}
 80016e0:	3768      	adds	r7, #104	@ 0x68
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	200004c4 	.word	0x200004c4
 80016ec:	200004c8 	.word	0x200004c8
 80016f0:	200004e0 	.word	0x200004e0
 80016f4:	200004c0 	.word	0x200004c0
 80016f8:	200004cc 	.word	0x200004cc
 80016fc:	51eb851f 	.word	0x51eb851f
 8001700:	0800d1dc 	.word	0x0800d1dc
 8001704:	20000358 	.word	0x20000358
 8001708:	0800d200 	.word	0x0800d200
 800170c:	200004bc 	.word	0x200004bc
 8001710:	0800d22c 	.word	0x0800d22c
 8001714:	00000000 	.word	0x00000000

08001718 <Process_Gyro_Mouse>:
/**
  * @brief  Xử lý gyroscope data và điều khiển chuột
  * @retval None
  */
void Process_Gyro_Mouse(void)
{
 8001718:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800171c:	b0b6      	sub	sp, #216	@ 0xd8
 800171e:	af06      	add	r7, sp, #24
    if(!mouse_enabled) return;
 8001720:	4b8f      	ldr	r3, [pc, #572]	@ (8001960 <Process_Gyro_Mouse+0x248>)
 8001722:	781b      	ldrb	r3, [r3, #0]
 8001724:	2b00      	cmp	r3, #0
 8001726:	f000 82a9 	beq.w	8001c7c <Process_Gyro_Mouse+0x564>
    
    // Đọc dữ liệu gyroscope từ MPU6050
    if(HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, MPU6050_GYRO_XOUT_H, 1, gyro_data, 6, HAL_MAX_DELAY) == HAL_OK)
 800172a:	f04f 33ff 	mov.w	r3, #4294967295
 800172e:	9302      	str	r3, [sp, #8]
 8001730:	2306      	movs	r3, #6
 8001732:	9301      	str	r3, [sp, #4]
 8001734:	4b8b      	ldr	r3, [pc, #556]	@ (8001964 <Process_Gyro_Mouse+0x24c>)
 8001736:	9300      	str	r3, [sp, #0]
 8001738:	2301      	movs	r3, #1
 800173a:	2243      	movs	r2, #67	@ 0x43
 800173c:	21d0      	movs	r1, #208	@ 0xd0
 800173e:	488a      	ldr	r0, [pc, #552]	@ (8001968 <Process_Gyro_Mouse+0x250>)
 8001740:	f001 fd24 	bl	800318c <HAL_I2C_Mem_Read>
 8001744:	4603      	mov	r3, r0
 8001746:	2b00      	cmp	r3, #0
 8001748:	f040 8299 	bne.w	8001c7e <Process_Gyro_Mouse+0x566>
    {
        raw_accel_x = (int16_t)(gyro_data[0] << 8 | gyro_data[1]);
 800174c:	4b85      	ldr	r3, [pc, #532]	@ (8001964 <Process_Gyro_Mouse+0x24c>)
 800174e:	781b      	ldrb	r3, [r3, #0]
 8001750:	b21b      	sxth	r3, r3
 8001752:	021b      	lsls	r3, r3, #8
 8001754:	b21a      	sxth	r2, r3
 8001756:	4b83      	ldr	r3, [pc, #524]	@ (8001964 <Process_Gyro_Mouse+0x24c>)
 8001758:	785b      	ldrb	r3, [r3, #1]
 800175a:	b21b      	sxth	r3, r3
 800175c:	4313      	orrs	r3, r2
 800175e:	b21a      	sxth	r2, r3
 8001760:	4b82      	ldr	r3, [pc, #520]	@ (800196c <Process_Gyro_Mouse+0x254>)
 8001762:	801a      	strh	r2, [r3, #0]
        raw_accel_y = (int16_t)(gyro_data[2] << 8 | gyro_data[3]);
 8001764:	4b7f      	ldr	r3, [pc, #508]	@ (8001964 <Process_Gyro_Mouse+0x24c>)
 8001766:	789b      	ldrb	r3, [r3, #2]
 8001768:	b21b      	sxth	r3, r3
 800176a:	021b      	lsls	r3, r3, #8
 800176c:	b21a      	sxth	r2, r3
 800176e:	4b7d      	ldr	r3, [pc, #500]	@ (8001964 <Process_Gyro_Mouse+0x24c>)
 8001770:	78db      	ldrb	r3, [r3, #3]
 8001772:	b21b      	sxth	r3, r3
 8001774:	4313      	orrs	r3, r2
 8001776:	b21a      	sxth	r2, r3
 8001778:	4b7d      	ldr	r3, [pc, #500]	@ (8001970 <Process_Gyro_Mouse+0x258>)
 800177a:	801a      	strh	r2, [r3, #0]
        raw_accel_z = (int16_t)(gyro_data[4] << 8 | gyro_data[5]);
 800177c:	4b79      	ldr	r3, [pc, #484]	@ (8001964 <Process_Gyro_Mouse+0x24c>)
 800177e:	791b      	ldrb	r3, [r3, #4]
 8001780:	b21b      	sxth	r3, r3
 8001782:	021b      	lsls	r3, r3, #8
 8001784:	b21a      	sxth	r2, r3
 8001786:	4b77      	ldr	r3, [pc, #476]	@ (8001964 <Process_Gyro_Mouse+0x24c>)
 8001788:	795b      	ldrb	r3, [r3, #5]
 800178a:	b21b      	sxth	r3, r3
 800178c:	4313      	orrs	r3, r2
 800178e:	b21a      	sxth	r2, r3
 8001790:	4b78      	ldr	r3, [pc, #480]	@ (8001974 <Process_Gyro_Mouse+0x25c>)
 8001792:	801a      	strh	r2, [r3, #0]
        
        // Chuyển đổi sang °/s và trừ offset
        float accel_x_raw = ((float)raw_accel_x / 16.4f) - gyro_offset_x;
 8001794:	4b75      	ldr	r3, [pc, #468]	@ (800196c <Process_Gyro_Mouse+0x254>)
 8001796:	f9b3 3000 	ldrsh.w	r3, [r3]
 800179a:	ee07 3a90 	vmov	s15, r3
 800179e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017a2:	eddf 6a75 	vldr	s13, [pc, #468]	@ 8001978 <Process_Gyro_Mouse+0x260>
 80017a6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80017aa:	4b74      	ldr	r3, [pc, #464]	@ (800197c <Process_Gyro_Mouse+0x264>)
 80017ac:	edd3 7a00 	vldr	s15, [r3]
 80017b0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017b4:	edc7 7a2d 	vstr	s15, [r7, #180]	@ 0xb4
        float accel_y_raw = ((float)raw_accel_y / 16.4f) - gyro_offset_y;
 80017b8:	4b6d      	ldr	r3, [pc, #436]	@ (8001970 <Process_Gyro_Mouse+0x258>)
 80017ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017be:	ee07 3a90 	vmov	s15, r3
 80017c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017c6:	eddf 6a6c 	vldr	s13, [pc, #432]	@ 8001978 <Process_Gyro_Mouse+0x260>
 80017ca:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80017ce:	4b6c      	ldr	r3, [pc, #432]	@ (8001980 <Process_Gyro_Mouse+0x268>)
 80017d0:	edd3 7a00 	vldr	s15, [r3]
 80017d4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017d8:	edc7 7a2c 	vstr	s15, [r7, #176]	@ 0xb0
        float accel_z_raw = ((float)raw_accel_z / 16.4f) - gyro_offset_z;
 80017dc:	4b65      	ldr	r3, [pc, #404]	@ (8001974 <Process_Gyro_Mouse+0x25c>)
 80017de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017e2:	ee07 3a90 	vmov	s15, r3
 80017e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017ea:	eddf 6a63 	vldr	s13, [pc, #396]	@ 8001978 <Process_Gyro_Mouse+0x260>
 80017ee:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80017f2:	4b64      	ldr	r3, [pc, #400]	@ (8001984 <Process_Gyro_Mouse+0x26c>)
 80017f4:	edd3 7a00 	vldr	s15, [r3]
 80017f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017fc:	edc7 7a2b 	vstr	s15, [r7, #172]	@ 0xac
        
        raw_gyro_x = (int16_t)(gyro_data[8] << 8 | gyro_data[9]);
 8001800:	4b58      	ldr	r3, [pc, #352]	@ (8001964 <Process_Gyro_Mouse+0x24c>)
 8001802:	7a1b      	ldrb	r3, [r3, #8]
 8001804:	b21b      	sxth	r3, r3
 8001806:	021b      	lsls	r3, r3, #8
 8001808:	b21a      	sxth	r2, r3
 800180a:	4b56      	ldr	r3, [pc, #344]	@ (8001964 <Process_Gyro_Mouse+0x24c>)
 800180c:	7a5b      	ldrb	r3, [r3, #9]
 800180e:	b21b      	sxth	r3, r3
 8001810:	4313      	orrs	r3, r2
 8001812:	b21a      	sxth	r2, r3
 8001814:	4b5c      	ldr	r3, [pc, #368]	@ (8001988 <Process_Gyro_Mouse+0x270>)
 8001816:	801a      	strh	r2, [r3, #0]
        raw_gyro_y = (int16_t)(gyro_data[10] << 8 | gyro_data[11]);
 8001818:	4b52      	ldr	r3, [pc, #328]	@ (8001964 <Process_Gyro_Mouse+0x24c>)
 800181a:	7a9b      	ldrb	r3, [r3, #10]
 800181c:	b21b      	sxth	r3, r3
 800181e:	021b      	lsls	r3, r3, #8
 8001820:	b21a      	sxth	r2, r3
 8001822:	4b50      	ldr	r3, [pc, #320]	@ (8001964 <Process_Gyro_Mouse+0x24c>)
 8001824:	7adb      	ldrb	r3, [r3, #11]
 8001826:	b21b      	sxth	r3, r3
 8001828:	4313      	orrs	r3, r2
 800182a:	b21a      	sxth	r2, r3
 800182c:	4b57      	ldr	r3, [pc, #348]	@ (800198c <Process_Gyro_Mouse+0x274>)
 800182e:	801a      	strh	r2, [r3, #0]
        raw_gyro_z = (int16_t)(gyro_data[12] << 8 | gyro_data[13]);
 8001830:	4b4c      	ldr	r3, [pc, #304]	@ (8001964 <Process_Gyro_Mouse+0x24c>)
 8001832:	7b1b      	ldrb	r3, [r3, #12]
 8001834:	b21b      	sxth	r3, r3
 8001836:	021b      	lsls	r3, r3, #8
 8001838:	b21a      	sxth	r2, r3
 800183a:	4b4a      	ldr	r3, [pc, #296]	@ (8001964 <Process_Gyro_Mouse+0x24c>)
 800183c:	7b5b      	ldrb	r3, [r3, #13]
 800183e:	b21b      	sxth	r3, r3
 8001840:	4313      	orrs	r3, r2
 8001842:	b21a      	sxth	r2, r3
 8001844:	4b52      	ldr	r3, [pc, #328]	@ (8001990 <Process_Gyro_Mouse+0x278>)
 8001846:	801a      	strh	r2, [r3, #0]

        float gyro_x_raw = ((float)raw_gyro_x / LSB_GYRO);
 8001848:	4b4f      	ldr	r3, [pc, #316]	@ (8001988 <Process_Gyro_Mouse+0x270>)
 800184a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800184e:	ee07 3a90 	vmov	s15, r3
 8001852:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001856:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8001994 <Process_Gyro_Mouse+0x27c>
 800185a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800185e:	edc7 7a2f 	vstr	s15, [r7, #188]	@ 0xbc
        float gyro_y_raw = ((float)raw_gyro_y / LSB_GYRO);
 8001862:	4b4a      	ldr	r3, [pc, #296]	@ (800198c <Process_Gyro_Mouse+0x274>)
 8001864:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001868:	ee07 3a90 	vmov	s15, r3
 800186c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001870:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8001994 <Process_Gyro_Mouse+0x27c>
 8001874:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001878:	edc7 7a2a 	vstr	s15, [r7, #168]	@ 0xa8
        float gyro_z_raw = ((float)raw_gyro_z / LSB_GYRO);
 800187c:	4b44      	ldr	r3, [pc, #272]	@ (8001990 <Process_Gyro_Mouse+0x278>)
 800187e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001882:	ee07 3a90 	vmov	s15, r3
 8001886:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800188a:	eddf 6a42 	vldr	s13, [pc, #264]	@ 8001994 <Process_Gyro_Mouse+0x27c>
 800188e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001892:	edc7 7a29 	vstr	s15, [r7, #164]	@ 0xa4


        // Tính thời gian dt giữa hai lần đo
        double dt = (double)(HAL_GetTick() - timer) / 1000.0;
 8001896:	f000 ff35 	bl	8002704 <HAL_GetTick>
 800189a:	4602      	mov	r2, r0
 800189c:	4b3e      	ldr	r3, [pc, #248]	@ (8001998 <Process_Gyro_Mouse+0x280>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	1ad3      	subs	r3, r2, r3
 80018a2:	4618      	mov	r0, r3
 80018a4:	f7fe fe3e 	bl	8000524 <__aeabi_ui2d>
 80018a8:	f04f 0200 	mov.w	r2, #0
 80018ac:	4b3b      	ldr	r3, [pc, #236]	@ (800199c <Process_Gyro_Mouse+0x284>)
 80018ae:	f7fe ffdd 	bl	800086c <__aeabi_ddiv>
 80018b2:	4602      	mov	r2, r0
 80018b4:	460b      	mov	r3, r1
 80018b6:	e9c7 2326 	strd	r2, r3, [r7, #152]	@ 0x98
        timer = HAL_GetTick();
 80018ba:	f000 ff23 	bl	8002704 <HAL_GetTick>
 80018be:	4603      	mov	r3, r0
 80018c0:	4a35      	ldr	r2, [pc, #212]	@ (8001998 <Process_Gyro_Mouse+0x280>)
 80018c2:	6013      	str	r3, [r2, #0]

        // Tính góc roll từ gia tốc (gần đúng)
        double roll_sqrt = sqrt(raw_accel_x * raw_accel_x + raw_accel_z * raw_accel_z);
 80018c4:	4b29      	ldr	r3, [pc, #164]	@ (800196c <Process_Gyro_Mouse+0x254>)
 80018c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018ca:	461a      	mov	r2, r3
 80018cc:	4b27      	ldr	r3, [pc, #156]	@ (800196c <Process_Gyro_Mouse+0x254>)
 80018ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018d2:	fb03 f202 	mul.w	r2, r3, r2
 80018d6:	4b27      	ldr	r3, [pc, #156]	@ (8001974 <Process_Gyro_Mouse+0x25c>)
 80018d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018dc:	4619      	mov	r1, r3
 80018de:	4b25      	ldr	r3, [pc, #148]	@ (8001974 <Process_Gyro_Mouse+0x25c>)
 80018e0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018e4:	fb01 f303 	mul.w	r3, r1, r3
 80018e8:	4413      	add	r3, r2
 80018ea:	4618      	mov	r0, r3
 80018ec:	f7fe fe2a 	bl	8000544 <__aeabi_i2d>
 80018f0:	4602      	mov	r2, r0
 80018f2:	460b      	mov	r3, r1
 80018f4:	ec43 2b10 	vmov	d0, r2, r3
 80018f8:	f00b f8c4 	bl	800ca84 <sqrt>
 80018fc:	ed87 0b24 	vstr	d0, [r7, #144]	@ 0x90
        double roll = (roll_sqrt != 0.0) ? atan(raw_accel_y / roll_sqrt) * RAD_TO_DEG : 0.0;
 8001900:	f04f 0200 	mov.w	r2, #0
 8001904:	f04f 0300 	mov.w	r3, #0
 8001908:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	@ 0x90
 800190c:	f7ff f8ec 	bl	8000ae8 <__aeabi_dcmpeq>
 8001910:	4603      	mov	r3, r0
 8001912:	2b00      	cmp	r3, #0
 8001914:	d144      	bne.n	80019a0 <Process_Gyro_Mouse+0x288>
 8001916:	4b16      	ldr	r3, [pc, #88]	@ (8001970 <Process_Gyro_Mouse+0x258>)
 8001918:	f9b3 3000 	ldrsh.w	r3, [r3]
 800191c:	4618      	mov	r0, r3
 800191e:	f7fe fe11 	bl	8000544 <__aeabi_i2d>
 8001922:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 8001926:	f7fe ffa1 	bl	800086c <__aeabi_ddiv>
 800192a:	4602      	mov	r2, r0
 800192c:	460b      	mov	r3, r1
 800192e:	ec43 2b17 	vmov	d7, r2, r3
 8001932:	eeb0 0a47 	vmov.f32	s0, s14
 8001936:	eef0 0a67 	vmov.f32	s1, s15
 800193a:	f00b f8d1 	bl	800cae0 <atan>
 800193e:	ec51 0b10 	vmov	r0, r1, d0
 8001942:	a305      	add	r3, pc, #20	@ (adr r3, 8001958 <Process_Gyro_Mouse+0x240>)
 8001944:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001948:	f7fe fe66 	bl	8000618 <__aeabi_dmul>
 800194c:	4602      	mov	r2, r0
 800194e:	460b      	mov	r3, r1
 8001950:	e02a      	b.n	80019a8 <Process_Gyro_Mouse+0x290>
 8001952:	bf00      	nop
 8001954:	f3af 8000 	nop.w
 8001958:	1a63c1f8 	.word	0x1a63c1f8
 800195c:	404ca5dc 	.word	0x404ca5dc
 8001960:	20000000 	.word	0x20000000
 8001964:	20000490 	.word	0x20000490
 8001968:	20000304 	.word	0x20000304
 800196c:	20000496 	.word	0x20000496
 8001970:	20000498 	.word	0x20000498
 8001974:	2000049a 	.word	0x2000049a
 8001978:	41833333 	.word	0x41833333
 800197c:	200004b0 	.word	0x200004b0
 8001980:	200004b4 	.word	0x200004b4
 8001984:	200004b8 	.word	0x200004b8
 8001988:	2000049c 	.word	0x2000049c
 800198c:	2000049e 	.word	0x2000049e
 8001990:	200004a0 	.word	0x200004a0
 8001994:	43030000 	.word	0x43030000
 8001998:	200004ac 	.word	0x200004ac
 800199c:	408f4000 	.word	0x408f4000
 80019a0:	f04f 0200 	mov.w	r2, #0
 80019a4:	f04f 0300 	mov.w	r3, #0
 80019a8:	e9c7 2322 	strd	r2, r3, [r7, #136]	@ 0x88

        // Tính góc pitch từ gia tốc bằng atan2
        double pitch = atan2(-raw_accel_x, raw_accel_z) * RAD_TO_DEG;
 80019ac:	4bb8      	ldr	r3, [pc, #736]	@ (8001c90 <Process_Gyro_Mouse+0x578>)
 80019ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019b2:	425b      	negs	r3, r3
 80019b4:	4618      	mov	r0, r3
 80019b6:	f7fe fdc5 	bl	8000544 <__aeabi_i2d>
 80019ba:	4604      	mov	r4, r0
 80019bc:	460d      	mov	r5, r1
 80019be:	4bb5      	ldr	r3, [pc, #724]	@ (8001c94 <Process_Gyro_Mouse+0x57c>)
 80019c0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019c4:	4618      	mov	r0, r3
 80019c6:	f7fe fdbd 	bl	8000544 <__aeabi_i2d>
 80019ca:	4602      	mov	r2, r0
 80019cc:	460b      	mov	r3, r1
 80019ce:	ec43 2b11 	vmov	d1, r2, r3
 80019d2:	ec45 4b10 	vmov	d0, r4, r5
 80019d6:	f00b f853 	bl	800ca80 <atan2>
 80019da:	ec51 0b10 	vmov	r0, r1, d0
 80019de:	a3aa      	add	r3, pc, #680	@ (adr r3, 8001c88 <Process_Gyro_Mouse+0x570>)
 80019e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019e4:	f7fe fe18 	bl	8000618 <__aeabi_dmul>
 80019e8:	4602      	mov	r2, r0
 80019ea:	460b      	mov	r3, r1
 80019ec:	e9c7 2320 	strd	r2, r3, [r7, #128]	@ 0x80

        // Bảo vệ bộ lọc Kalman khỏi nhảy đột ngột khi pitch vượt ±90°
        if ((pitch < -90 && angleY > 90) || (pitch > 90 && angleY < -90)) {
 80019f0:	f04f 0200 	mov.w	r2, #0
 80019f4:	4ba8      	ldr	r3, [pc, #672]	@ (8001c98 <Process_Gyro_Mouse+0x580>)
 80019f6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80019fa:	f7ff f87f 	bl	8000afc <__aeabi_dcmplt>
 80019fe:	4603      	mov	r3, r0
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d009      	beq.n	8001a18 <Process_Gyro_Mouse+0x300>
 8001a04:	4ba5      	ldr	r3, [pc, #660]	@ (8001c9c <Process_Gyro_Mouse+0x584>)
 8001a06:	edd3 7a00 	vldr	s15, [r3]
 8001a0a:	ed9f 7aa5 	vldr	s14, [pc, #660]	@ 8001ca0 <Process_Gyro_Mouse+0x588>
 8001a0e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a16:	dc13      	bgt.n	8001a40 <Process_Gyro_Mouse+0x328>
 8001a18:	f04f 0200 	mov.w	r2, #0
 8001a1c:	4ba1      	ldr	r3, [pc, #644]	@ (8001ca4 <Process_Gyro_Mouse+0x58c>)
 8001a1e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8001a22:	f7ff f889 	bl	8000b38 <__aeabi_dcmpgt>
 8001a26:	4603      	mov	r3, r0
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d016      	beq.n	8001a5a <Process_Gyro_Mouse+0x342>
 8001a2c:	4b9b      	ldr	r3, [pc, #620]	@ (8001c9c <Process_Gyro_Mouse+0x584>)
 8001a2e:	edd3 7a00 	vldr	s15, [r3]
 8001a32:	ed9f 7a9d 	vldr	s14, [pc, #628]	@ 8001ca8 <Process_Gyro_Mouse+0x590>
 8001a36:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a3e:	d50c      	bpl.n	8001a5a <Process_Gyro_Mouse+0x342>
        	kalman_gyro_y.angle = pitch;
 8001a40:	499a      	ldr	r1, [pc, #616]	@ (8001cac <Process_Gyro_Mouse+0x594>)
 8001a42:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 8001a46:	e9c1 2300 	strd	r2, r3, [r1]
            angleY = pitch;
 8001a4a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8001a4e:	f7ff f8bb 	bl	8000bc8 <__aeabi_d2f>
 8001a52:	4603      	mov	r3, r0
 8001a54:	4a91      	ldr	r2, [pc, #580]	@ (8001c9c <Process_Gyro_Mouse+0x584>)
 8001a56:	6013      	str	r3, [r2, #0]
 8001a58:	e017      	b.n	8001a8a <Process_Gyro_Mouse+0x372>
        } else {
            angleY = KalmanFilter_Update(&kalman_gyro_y, pitch,gyro_y_raw, dt);
 8001a5a:	f8d7 00a8 	ldr.w	r0, [r7, #168]	@ 0xa8
 8001a5e:	f7fe fd83 	bl	8000568 <__aeabi_f2d>
 8001a62:	4602      	mov	r2, r0
 8001a64:	460b      	mov	r3, r1
 8001a66:	ed97 2b26 	vldr	d2, [r7, #152]	@ 0x98
 8001a6a:	ec43 2b11 	vmov	d1, r2, r3
 8001a6e:	ed97 0b20 	vldr	d0, [r7, #128]	@ 0x80
 8001a72:	488e      	ldr	r0, [pc, #568]	@ (8001cac <Process_Gyro_Mouse+0x594>)
 8001a74:	f7ff fade 	bl	8001034 <KalmanFilter_Update>
 8001a78:	ec53 2b10 	vmov	r2, r3, d0
 8001a7c:	4610      	mov	r0, r2
 8001a7e:	4619      	mov	r1, r3
 8001a80:	f7ff f8a2 	bl	8000bc8 <__aeabi_d2f>
 8001a84:	4603      	mov	r3, r0
 8001a86:	4a85      	ldr	r2, [pc, #532]	@ (8001c9c <Process_Gyro_Mouse+0x584>)
 8001a88:	6013      	str	r3, [r2, #0]
        }

        // Nếu pitch vượt ±90°, đảo chiều trục X
        if (fabs(angleY) > 90)
 8001a8a:	4b84      	ldr	r3, [pc, #528]	@ (8001c9c <Process_Gyro_Mouse+0x584>)
 8001a8c:	edd3 7a00 	vldr	s15, [r3]
 8001a90:	eef0 7ae7 	vabs.f32	s15, s15
 8001a94:	ed9f 7a82 	vldr	s14, [pc, #520]	@ 8001ca0 <Process_Gyro_Mouse+0x588>
 8001a98:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001aa0:	dd05      	ble.n	8001aae <Process_Gyro_Mouse+0x396>
        	 gyro_x_raw = - gyro_x_raw;
 8001aa2:	edd7 7a2f 	vldr	s15, [r7, #188]	@ 0xbc
 8001aa6:	eef1 7a67 	vneg.f32	s15, s15
 8001aaa:	edc7 7a2f 	vstr	s15, [r7, #188]	@ 0xbc

        // Cập nhật roll bằng Kalman filter
        angleX = KalmanFilter_Update(&kalman_gyro_x, roll,gyro_x_raw, dt);
 8001aae:	f8d7 00bc 	ldr.w	r0, [r7, #188]	@ 0xbc
 8001ab2:	f7fe fd59 	bl	8000568 <__aeabi_f2d>
 8001ab6:	4602      	mov	r2, r0
 8001ab8:	460b      	mov	r3, r1
 8001aba:	ed97 2b26 	vldr	d2, [r7, #152]	@ 0x98
 8001abe:	ec43 2b11 	vmov	d1, r2, r3
 8001ac2:	ed97 0b22 	vldr	d0, [r7, #136]	@ 0x88
 8001ac6:	487a      	ldr	r0, [pc, #488]	@ (8001cb0 <Process_Gyro_Mouse+0x598>)
 8001ac8:	f7ff fab4 	bl	8001034 <KalmanFilter_Update>
 8001acc:	ec53 2b10 	vmov	r2, r3, d0
 8001ad0:	4610      	mov	r0, r2
 8001ad2:	4619      	mov	r1, r3
 8001ad4:	f7ff f878 	bl	8000bc8 <__aeabi_d2f>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	4a76      	ldr	r2, [pc, #472]	@ (8001cb4 <Process_Gyro_Mouse+0x59c>)
 8001adc:	6013      	str	r3, [r2, #0]


        // Calculate mouse movement
        int8_t mouse_dx = 0, mouse_dy = 0;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	f887 30bb 	strb.w	r3, [r7, #187]	@ 0xbb
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	f887 30ba 	strb.w	r3, [r7, #186]	@ 0xba
        
        // Apply deadzone và calculate movement
        if(abs((int)angleX) > GYRO_DEADZONE)
 8001aea:	4b72      	ldr	r3, [pc, #456]	@ (8001cb4 <Process_Gyro_Mouse+0x59c>)
 8001aec:	edd3 7a00 	vldr	s15, [r3]
 8001af0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001af4:	ee17 3a90 	vmov	r3, s15
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	bfb8      	it	lt
 8001afc:	425b      	neglt	r3, r3
 8001afe:	2b03      	cmp	r3, #3
 8001b00:	dd0f      	ble.n	8001b22 <Process_Gyro_Mouse+0x40a>
        {
            mouse_dx = (int8_t)(-angleX / MOUSE_SENSITIVITY_X); // Invert X for natural movement
 8001b02:	4b6c      	ldr	r3, [pc, #432]	@ (8001cb4 <Process_Gyro_Mouse+0x59c>)
 8001b04:	edd3 7a00 	vldr	s15, [r3]
 8001b08:	eeb1 7a67 	vneg.f32	s14, s15
 8001b0c:	eef1 6a04 	vmov.f32	s13, #20	@ 0x40a00000  5.0
 8001b10:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b14:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b18:	edc7 7a01 	vstr	s15, [r7, #4]
 8001b1c:	793b      	ldrb	r3, [r7, #4]
 8001b1e:	f887 30bb 	strb.w	r3, [r7, #187]	@ 0xbb
        }
        
        if(abs((int)angleY) > GYRO_DEADZONE)
 8001b22:	4b5e      	ldr	r3, [pc, #376]	@ (8001c9c <Process_Gyro_Mouse+0x584>)
 8001b24:	edd3 7a00 	vldr	s15, [r3]
 8001b28:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b2c:	ee17 3a90 	vmov	r3, s15
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	bfb8      	it	lt
 8001b34:	425b      	neglt	r3, r3
 8001b36:	2b03      	cmp	r3, #3
 8001b38:	dd0d      	ble.n	8001b56 <Process_Gyro_Mouse+0x43e>
        {
            mouse_dy = (int8_t)(angleY / MOUSE_SENSITIVITY_Y);
 8001b3a:	4b58      	ldr	r3, [pc, #352]	@ (8001c9c <Process_Gyro_Mouse+0x584>)
 8001b3c:	ed93 7a00 	vldr	s14, [r3]
 8001b40:	eef1 6a04 	vmov.f32	s13, #20	@ 0x40a00000  5.0
 8001b44:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b48:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b4c:	edc7 7a01 	vstr	s15, [r7, #4]
 8001b50:	793b      	ldrb	r3, [r7, #4]
 8001b52:	f887 30ba 	strb.w	r3, [r7, #186]	@ 0xba
        }
        
        // Limit movement
        if(mouse_dx > MAX_MOUSE_MOVE) mouse_dx = MAX_MOUSE_MOVE;
 8001b56:	f997 30bb 	ldrsb.w	r3, [r7, #187]	@ 0xbb
 8001b5a:	2b4b      	cmp	r3, #75	@ 0x4b
 8001b5c:	dd02      	ble.n	8001b64 <Process_Gyro_Mouse+0x44c>
 8001b5e:	234b      	movs	r3, #75	@ 0x4b
 8001b60:	f887 30bb 	strb.w	r3, [r7, #187]	@ 0xbb
        if(mouse_dx < -MAX_MOUSE_MOVE) mouse_dx = -MAX_MOUSE_MOVE;
 8001b64:	f997 30bb 	ldrsb.w	r3, [r7, #187]	@ 0xbb
 8001b68:	f113 0f4b 	cmn.w	r3, #75	@ 0x4b
 8001b6c:	da02      	bge.n	8001b74 <Process_Gyro_Mouse+0x45c>
 8001b6e:	23b5      	movs	r3, #181	@ 0xb5
 8001b70:	f887 30bb 	strb.w	r3, [r7, #187]	@ 0xbb
        if(mouse_dy > MAX_MOUSE_MOVE) mouse_dy = MAX_MOUSE_MOVE;
 8001b74:	f997 30ba 	ldrsb.w	r3, [r7, #186]	@ 0xba
 8001b78:	2b4b      	cmp	r3, #75	@ 0x4b
 8001b7a:	dd02      	ble.n	8001b82 <Process_Gyro_Mouse+0x46a>
 8001b7c:	234b      	movs	r3, #75	@ 0x4b
 8001b7e:	f887 30ba 	strb.w	r3, [r7, #186]	@ 0xba
        if(mouse_dy < -MAX_MOUSE_MOVE) mouse_dy = -MAX_MOUSE_MOVE;
 8001b82:	f997 30ba 	ldrsb.w	r3, [r7, #186]	@ 0xba
 8001b86:	f113 0f4b 	cmn.w	r3, #75	@ 0x4b
 8001b8a:	da02      	bge.n	8001b92 <Process_Gyro_Mouse+0x47a>
 8001b8c:	23b5      	movs	r3, #181	@ 0xb5
 8001b8e:	f887 30ba 	strb.w	r3, [r7, #186]	@ 0xba
        
        // Đọc trạng thái buttons (nếu có GPIO setup)
        uint8_t buttons = 0;
 8001b92:	2300      	movs	r3, #0
 8001b94:	f887 30b9 	strb.w	r3, [r7, #185]	@ 0xb9
        if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2) == GPIO_PIN_SET) buttons |= 0x01; // Left click (PA2)
 8001b98:	2104      	movs	r1, #4
 8001b9a:	4847      	ldr	r0, [pc, #284]	@ (8001cb8 <Process_Gyro_Mouse+0x5a0>)
 8001b9c:	f001 f8a0 	bl	8002ce0 <HAL_GPIO_ReadPin>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	2b01      	cmp	r3, #1
 8001ba4:	d105      	bne.n	8001bb2 <Process_Gyro_Mouse+0x49a>
 8001ba6:	f897 30b9 	ldrb.w	r3, [r7, #185]	@ 0xb9
 8001baa:	f043 0301 	orr.w	r3, r3, #1
 8001bae:	f887 30b9 	strb.w	r3, [r7, #185]	@ 0xb9
        if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3) == GPIO_PIN_SET) buttons |= 0x02; // Right click (PA3)
 8001bb2:	2108      	movs	r1, #8
 8001bb4:	4840      	ldr	r0, [pc, #256]	@ (8001cb8 <Process_Gyro_Mouse+0x5a0>)
 8001bb6:	f001 f893 	bl	8002ce0 <HAL_GPIO_ReadPin>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	2b01      	cmp	r3, #1
 8001bbe:	d105      	bne.n	8001bcc <Process_Gyro_Mouse+0x4b4>
 8001bc0:	f897 30b9 	ldrb.w	r3, [r7, #185]	@ 0xb9
 8001bc4:	f043 0302 	orr.w	r3, r3, #2
 8001bc8:	f887 30b9 	strb.w	r3, [r7, #185]	@ 0xb9
        
        // Gửi mouse movement qua USB HID nếu có movement hoặc button press
        if(mouse_dx != 0 || mouse_dy != 0 || buttons != 0)
 8001bcc:	f997 30bb 	ldrsb.w	r3, [r7, #187]	@ 0xbb
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d107      	bne.n	8001be4 <Process_Gyro_Mouse+0x4cc>
 8001bd4:	f997 30ba 	ldrsb.w	r3, [r7, #186]	@ 0xba
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d103      	bne.n	8001be4 <Process_Gyro_Mouse+0x4cc>
 8001bdc:	f897 30b9 	ldrb.w	r3, [r7, #185]	@ 0xb9
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d04c      	beq.n	8001c7e <Process_Gyro_Mouse+0x566>
        {
            Send_Mouse_HID(mouse_dx, mouse_dy, buttons);
 8001be4:	f897 20b9 	ldrb.w	r2, [r7, #185]	@ 0xb9
 8001be8:	f997 10ba 	ldrsb.w	r1, [r7, #186]	@ 0xba
 8001bec:	f997 30bb 	ldrsb.w	r3, [r7, #187]	@ 0xbb
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	f7ff fcc7 	bl	8001584 <Send_Mouse_HID>
            
            // Debug output cho movement (hiện mọi movement để debug)
            if(abs(mouse_dx) >= 1 || abs(mouse_dy) >= 1 || buttons != 0) {
 8001bf6:	f997 30bb 	ldrsb.w	r3, [r7, #187]	@ 0xbb
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	bfb8      	it	lt
 8001bfe:	425b      	neglt	r3, r3
 8001c00:	b2db      	uxtb	r3, r3
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d10b      	bne.n	8001c1e <Process_Gyro_Mouse+0x506>
 8001c06:	f997 30ba 	ldrsb.w	r3, [r7, #186]	@ 0xba
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	bfb8      	it	lt
 8001c0e:	425b      	neglt	r3, r3
 8001c10:	b2db      	uxtb	r3, r3
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d103      	bne.n	8001c1e <Process_Gyro_Mouse+0x506>
 8001c16:	f897 30b9 	ldrb.w	r3, [r7, #185]	@ 0xb9
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d02f      	beq.n	8001c7e <Process_Gyro_Mouse+0x566>
                char debug_buffer[120];
                sprintf(debug_buffer, "🖱️  Move: dx=%d dy=%d | Gyro: gx=%.1f gy=%.1f | Btn=%d\r\n", 
 8001c1e:	f997 60bb 	ldrsb.w	r6, [r7, #187]	@ 0xbb
 8001c22:	f997 80ba 	ldrsb.w	r8, [r7, #186]	@ 0xba
 8001c26:	4b23      	ldr	r3, [pc, #140]	@ (8001cb4 <Process_Gyro_Mouse+0x59c>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	f7fe fc9c 	bl	8000568 <__aeabi_f2d>
 8001c30:	4604      	mov	r4, r0
 8001c32:	460d      	mov	r5, r1
 8001c34:	4b19      	ldr	r3, [pc, #100]	@ (8001c9c <Process_Gyro_Mouse+0x584>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f7fe fc95 	bl	8000568 <__aeabi_f2d>
 8001c3e:	4602      	mov	r2, r0
 8001c40:	460b      	mov	r3, r1
 8001c42:	f897 10b9 	ldrb.w	r1, [r7, #185]	@ 0xb9
 8001c46:	f107 0008 	add.w	r0, r7, #8
 8001c4a:	9104      	str	r1, [sp, #16]
 8001c4c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001c50:	e9cd 4500 	strd	r4, r5, [sp]
 8001c54:	4643      	mov	r3, r8
 8001c56:	4632      	mov	r2, r6
 8001c58:	4918      	ldr	r1, [pc, #96]	@ (8001cbc <Process_Gyro_Mouse+0x5a4>)
 8001c5a:	f008 fddd 	bl	800a818 <siprintf>
                        mouse_dx, mouse_dy, angleX, angleY, buttons);
                HAL_UART_Transmit(&huart1, (uint8_t*)debug_buffer, strlen(debug_buffer), HAL_MAX_DELAY);
 8001c5e:	f107 0308 	add.w	r3, r7, #8
 8001c62:	4618      	mov	r0, r3
 8001c64:	f7fe fb14 	bl	8000290 <strlen>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	b29a      	uxth	r2, r3
 8001c6c:	f107 0108 	add.w	r1, r7, #8
 8001c70:	f04f 33ff 	mov.w	r3, #4294967295
 8001c74:	4812      	ldr	r0, [pc, #72]	@ (8001cc0 <Process_Gyro_Mouse+0x5a8>)
 8001c76:	f004 f80d 	bl	8005c94 <HAL_UART_Transmit>
 8001c7a:	e000      	b.n	8001c7e <Process_Gyro_Mouse+0x566>
    if(!mouse_enabled) return;
 8001c7c:	bf00      	nop
            }
        }
    }
}
 8001c7e:	37c0      	adds	r7, #192	@ 0xc0
 8001c80:	46bd      	mov	sp, r7
 8001c82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001c86:	bf00      	nop
 8001c88:	1a63c1f8 	.word	0x1a63c1f8
 8001c8c:	404ca5dc 	.word	0x404ca5dc
 8001c90:	20000496 	.word	0x20000496
 8001c94:	2000049a 	.word	0x2000049a
 8001c98:	c0568000 	.word	0xc0568000
 8001c9c:	200004a8 	.word	0x200004a8
 8001ca0:	42b40000 	.word	0x42b40000
 8001ca4:	40568000 	.word	0x40568000
 8001ca8:	c2b40000 	.word	0xc2b40000
 8001cac:	200003f0 	.word	0x200003f0
 8001cb0:	200003a0 	.word	0x200003a0
 8001cb4:	200004a4 	.word	0x200004a4
 8001cb8:	40020000 	.word	0x40020000
 8001cbc:	0800d240 	.word	0x0800d240
 8001cc0:	20000358 	.word	0x20000358

08001cc4 <Debug_Print_Status>:
/**
  * @brief  In debug status mỗi 5 giây
  * @retval None
  */
void Debug_Print_Status(void)
{
 8001cc4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001cc8:	b0b1      	sub	sp, #196	@ 0xc4
 8001cca:	af08      	add	r7, sp, #32
    char status_buffer[150];
    debug_counter++;
 8001ccc:	4b24      	ldr	r3, [pc, #144]	@ (8001d60 <Debug_Print_Status+0x9c>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	3301      	adds	r3, #1
 8001cd2:	4a23      	ldr	r2, [pc, #140]	@ (8001d60 <Debug_Print_Status+0x9c>)
 8001cd4:	6013      	str	r3, [r2, #0]
    
    sprintf(status_buffer, "📊 Status #%lu: Mouse %s | Packets: %lu | Offsets: X=%.1f Y=%.1f Z=%.1f\r\n", 
 8001cd6:	4b22      	ldr	r3, [pc, #136]	@ (8001d60 <Debug_Print_Status+0x9c>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	603b      	str	r3, [r7, #0]
            debug_counter, 
            mouse_enabled ? "ON" : "OFF",
 8001cdc:	4b21      	ldr	r3, [pc, #132]	@ (8001d64 <Debug_Print_Status+0xa0>)
 8001cde:	781b      	ldrb	r3, [r3, #0]
    sprintf(status_buffer, "📊 Status #%lu: Mouse %s | Packets: %lu | Offsets: X=%.1f Y=%.1f Z=%.1f\r\n", 
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d002      	beq.n	8001cea <Debug_Print_Status+0x26>
 8001ce4:	4b20      	ldr	r3, [pc, #128]	@ (8001d68 <Debug_Print_Status+0xa4>)
 8001ce6:	607b      	str	r3, [r7, #4]
 8001ce8:	e001      	b.n	8001cee <Debug_Print_Status+0x2a>
 8001cea:	4b20      	ldr	r3, [pc, #128]	@ (8001d6c <Debug_Print_Status+0xa8>)
 8001cec:	607b      	str	r3, [r7, #4]
 8001cee:	4b20      	ldr	r3, [pc, #128]	@ (8001d70 <Debug_Print_Status+0xac>)
 8001cf0:	681e      	ldr	r6, [r3, #0]
 8001cf2:	4b20      	ldr	r3, [pc, #128]	@ (8001d74 <Debug_Print_Status+0xb0>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	f7fe fc36 	bl	8000568 <__aeabi_f2d>
 8001cfc:	4604      	mov	r4, r0
 8001cfe:	460d      	mov	r5, r1
 8001d00:	4b1d      	ldr	r3, [pc, #116]	@ (8001d78 <Debug_Print_Status+0xb4>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	4618      	mov	r0, r3
 8001d06:	f7fe fc2f 	bl	8000568 <__aeabi_f2d>
 8001d0a:	4680      	mov	r8, r0
 8001d0c:	4689      	mov	r9, r1
 8001d0e:	4b1b      	ldr	r3, [pc, #108]	@ (8001d7c <Debug_Print_Status+0xb8>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	4618      	mov	r0, r3
 8001d14:	f7fe fc28 	bl	8000568 <__aeabi_f2d>
 8001d18:	4602      	mov	r2, r0
 8001d1a:	460b      	mov	r3, r1
 8001d1c:	f107 0008 	add.w	r0, r7, #8
 8001d20:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8001d24:	e9cd 8904 	strd	r8, r9, [sp, #16]
 8001d28:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8001d2c:	9600      	str	r6, [sp, #0]
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	683a      	ldr	r2, [r7, #0]
 8001d32:	4913      	ldr	r1, [pc, #76]	@ (8001d80 <Debug_Print_Status+0xbc>)
 8001d34:	f008 fd70 	bl	800a818 <siprintf>
            mouse_packets_sent,
            gyro_offset_x, gyro_offset_y, gyro_offset_z);
    HAL_UART_Transmit(&huart1, (uint8_t*)status_buffer, strlen(status_buffer), HAL_MAX_DELAY);
 8001d38:	f107 0308 	add.w	r3, r7, #8
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	f7fe faa7 	bl	8000290 <strlen>
 8001d42:	4603      	mov	r3, r0
 8001d44:	b29a      	uxth	r2, r3
 8001d46:	f107 0108 	add.w	r1, r7, #8
 8001d4a:	f04f 33ff 	mov.w	r3, #4294967295
 8001d4e:	480d      	ldr	r0, [pc, #52]	@ (8001d84 <Debug_Print_Status+0xc0>)
 8001d50:	f003 ffa0 	bl	8005c94 <HAL_UART_Transmit>
}
 8001d54:	bf00      	nop
 8001d56:	37a4      	adds	r7, #164	@ 0xa4
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001d5e:	bf00      	nop
 8001d60:	200004bc 	.word	0x200004bc
 8001d64:	20000000 	.word	0x20000000
 8001d68:	0800d280 	.word	0x0800d280
 8001d6c:	0800d284 	.word	0x0800d284
 8001d70:	200004c0 	.word	0x200004c0
 8001d74:	200004b0 	.word	0x200004b0
 8001d78:	200004b4 	.word	0x200004b4
 8001d7c:	200004b8 	.word	0x200004b8
 8001d80:	0800d288 	.word	0x0800d288
 8001d84:	20000358 	.word	0x20000358

08001d88 <Test_Mouse_Movement>:
/**
  * @brief  Test mouse movement để verify USB HID
  * @retval None
  */
void Test_Mouse_Movement(void)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	af00      	add	r7, sp, #0
    HAL_UART_Transmit(&huart1, (uint8_t*)"🧪 Testing USB HID mouse...\r\n", 30, HAL_MAX_DELAY);
 8001d8c:	f04f 33ff 	mov.w	r3, #4294967295
 8001d90:	221e      	movs	r2, #30
 8001d92:	4919      	ldr	r1, [pc, #100]	@ (8001df8 <Test_Mouse_Movement+0x70>)
 8001d94:	4819      	ldr	r0, [pc, #100]	@ (8001dfc <Test_Mouse_Movement+0x74>)
 8001d96:	f003 ff7d 	bl	8005c94 <HAL_UART_Transmit>
    
    // Test với timing tốt hơn cho USB HID
    HAL_Delay(100); // Wait trước khi test
 8001d9a:	2064      	movs	r0, #100	@ 0x64
 8001d9c:	f000 fcbe 	bl	800271c <HAL_Delay>
    Send_Mouse_HID(5, 0, 0);   // Right (nhỏ hơn)
 8001da0:	2200      	movs	r2, #0
 8001da2:	2100      	movs	r1, #0
 8001da4:	2005      	movs	r0, #5
 8001da6:	f7ff fbed 	bl	8001584 <Send_Mouse_HID>
    HAL_Delay(50);
 8001daa:	2032      	movs	r0, #50	@ 0x32
 8001dac:	f000 fcb6 	bl	800271c <HAL_Delay>
    Send_Mouse_HID(0, 5, 0);   // Down
 8001db0:	2200      	movs	r2, #0
 8001db2:	2105      	movs	r1, #5
 8001db4:	2000      	movs	r0, #0
 8001db6:	f7ff fbe5 	bl	8001584 <Send_Mouse_HID>
    HAL_Delay(50);
 8001dba:	2032      	movs	r0, #50	@ 0x32
 8001dbc:	f000 fcae 	bl	800271c <HAL_Delay>
    Send_Mouse_HID(-5, 0, 0);  // Left
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	2100      	movs	r1, #0
 8001dc4:	f06f 0004 	mvn.w	r0, #4
 8001dc8:	f7ff fbdc 	bl	8001584 <Send_Mouse_HID>
    HAL_Delay(50);
 8001dcc:	2032      	movs	r0, #50	@ 0x32
 8001dce:	f000 fca5 	bl	800271c <HAL_Delay>
    Send_Mouse_HID(0, -5, 0);  // Up
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	f06f 0104 	mvn.w	r1, #4
 8001dd8:	2000      	movs	r0, #0
 8001dda:	f7ff fbd3 	bl	8001584 <Send_Mouse_HID>
    HAL_Delay(50);
 8001dde:	2032      	movs	r0, #50	@ 0x32
 8001de0:	f000 fc9c 	bl	800271c <HAL_Delay>
    
    HAL_UART_Transmit(&huart1, (uint8_t*)"✅ Mouse test completed!\r\n", 27, HAL_MAX_DELAY);
 8001de4:	f04f 33ff 	mov.w	r3, #4294967295
 8001de8:	221b      	movs	r2, #27
 8001dea:	4905      	ldr	r1, [pc, #20]	@ (8001e00 <Test_Mouse_Movement+0x78>)
 8001dec:	4803      	ldr	r0, [pc, #12]	@ (8001dfc <Test_Mouse_Movement+0x74>)
 8001dee:	f003 ff51 	bl	8005c94 <HAL_UART_Transmit>
}
 8001df2:	bf00      	nop
 8001df4:	bd80      	pop	{r7, pc}
 8001df6:	bf00      	nop
 8001df8:	0800d2d4 	.word	0x0800d2d4
 8001dfc:	20000358 	.word	0x20000358
 8001e00:	0800d2f4 	.word	0x0800d2f4
 8001e04:	00000000 	.word	0x00000000

08001e08 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b092      	sub	sp, #72	@ 0x48
 8001e0c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001e0e:	f000 fc13 	bl	8002638 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001e12:	f000 f8f9 	bl	8002008 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001e16:	f000 f9cb 	bl	80021b0 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001e1a:	f000 f95f 	bl	80020dc <MX_I2C1_Init>
  MX_USB_DEVICE_Init();
 8001e1e:	f007 fb9b 	bl	8009558 <MX_USB_DEVICE_Init>
  MX_USART1_UART_Init();
 8001e22:	f000 f99b 	bl	800215c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  
  // Khởi động thông báo
  HAL_UART_Transmit(&huart1, (uint8_t*)"🚀 STM32 Gyroscope Mouse Started\r\n", 35, HAL_MAX_DELAY);
 8001e26:	f04f 33ff 	mov.w	r3, #4294967295
 8001e2a:	2223      	movs	r2, #35	@ 0x23
 8001e2c:	4962      	ldr	r1, [pc, #392]	@ (8001fb8 <main+0x1b0>)
 8001e2e:	4863      	ldr	r0, [pc, #396]	@ (8001fbc <main+0x1b4>)
 8001e30:	f003 ff30 	bl	8005c94 <HAL_UART_Transmit>
  HAL_Delay(1000);
 8001e34:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001e38:	f000 fc70 	bl	800271c <HAL_Delay>
  
  // Khởi tạo MPU6050
  HAL_UART_Transmit(&huart1, (uint8_t*)"🔧 Initializing MPU6050...\r\n", 29, HAL_MAX_DELAY);
 8001e3c:	f04f 33ff 	mov.w	r3, #4294967295
 8001e40:	221d      	movs	r2, #29
 8001e42:	495f      	ldr	r1, [pc, #380]	@ (8001fc0 <main+0x1b8>)
 8001e44:	485d      	ldr	r0, [pc, #372]	@ (8001fbc <main+0x1b4>)
 8001e46:	f003 ff25 	bl	8005c94 <HAL_UART_Transmit>
  MPU6050_Init();
 8001e4a:	f7ff fa59 	bl	8001300 <MPU6050_Init>
  HAL_UART_Transmit(&huart1, (uint8_t*)"✅ MPU6050 initialized!\r\n", 26, HAL_MAX_DELAY);
 8001e4e:	f04f 33ff 	mov.w	r3, #4294967295
 8001e52:	221a      	movs	r2, #26
 8001e54:	495b      	ldr	r1, [pc, #364]	@ (8001fc4 <main+0x1bc>)
 8001e56:	4859      	ldr	r0, [pc, #356]	@ (8001fbc <main+0x1b4>)
 8001e58:	f003 ff1c 	bl	8005c94 <HAL_UART_Transmit>
  HAL_Delay(1000);
 8001e5c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001e60:	f000 fc5c 	bl	800271c <HAL_Delay>
  
  // Khởi tạo Kalman filters
  HAL_UART_Transmit(&huart1, (uint8_t*)"🔧 Initializing Kalman filters...\r\n", 36, HAL_MAX_DELAY);
 8001e64:	f04f 33ff 	mov.w	r3, #4294967295
 8001e68:	2224      	movs	r2, #36	@ 0x24
 8001e6a:	4957      	ldr	r1, [pc, #348]	@ (8001fc8 <main+0x1c0>)
 8001e6c:	4853      	ldr	r0, [pc, #332]	@ (8001fbc <main+0x1b4>)
 8001e6e:	f003 ff11 	bl	8005c94 <HAL_UART_Transmit>
  KalmanFilter_Init(&kalman_gyro_x, 0.001, 0.003, 0.03);
 8001e72:	ed9f 2b4b 	vldr	d2, [pc, #300]	@ 8001fa0 <main+0x198>
 8001e76:	ed9f 1b4c 	vldr	d1, [pc, #304]	@ 8001fa8 <main+0x1a0>
 8001e7a:	ed9f 0b4d 	vldr	d0, [pc, #308]	@ 8001fb0 <main+0x1a8>
 8001e7e:	4853      	ldr	r0, [pc, #332]	@ (8001fcc <main+0x1c4>)
 8001e80:	f7ff f888 	bl	8000f94 <KalmanFilter_Init>
  KalmanFilter_Init(&kalman_gyro_y, 0.001, 0.003, 0.03);
 8001e84:	ed9f 2b46 	vldr	d2, [pc, #280]	@ 8001fa0 <main+0x198>
 8001e88:	ed9f 1b47 	vldr	d1, [pc, #284]	@ 8001fa8 <main+0x1a0>
 8001e8c:	ed9f 0b48 	vldr	d0, [pc, #288]	@ 8001fb0 <main+0x1a8>
 8001e90:	484f      	ldr	r0, [pc, #316]	@ (8001fd0 <main+0x1c8>)
 8001e92:	f7ff f87f 	bl	8000f94 <KalmanFilter_Init>
  KalmanFilter_Init(&kalman_gyro_z, 0.001, 0.003, 0.03);
 8001e96:	ed9f 2b42 	vldr	d2, [pc, #264]	@ 8001fa0 <main+0x198>
 8001e9a:	ed9f 1b43 	vldr	d1, [pc, #268]	@ 8001fa8 <main+0x1a0>
 8001e9e:	ed9f 0b44 	vldr	d0, [pc, #272]	@ 8001fb0 <main+0x1a8>
 8001ea2:	484c      	ldr	r0, [pc, #304]	@ (8001fd4 <main+0x1cc>)
 8001ea4:	f7ff f876 	bl	8000f94 <KalmanFilter_Init>
  HAL_UART_Transmit(&huart1, (uint8_t*)"✅ Kalman filters ready!\r\n", 27, HAL_MAX_DELAY);
 8001ea8:	f04f 33ff 	mov.w	r3, #4294967295
 8001eac:	221b      	movs	r2, #27
 8001eae:	494a      	ldr	r1, [pc, #296]	@ (8001fd8 <main+0x1d0>)
 8001eb0:	4842      	ldr	r0, [pc, #264]	@ (8001fbc <main+0x1b4>)
 8001eb2:	f003 feef 	bl	8005c94 <HAL_UART_Transmit>
  
  // Gyroscope calibration
  Gyro_Calibrate();
 8001eb6:	f7ff fa7b 	bl	80013b0 <Gyro_Calibrate>
  
  // Final setup
  HAL_Delay(1000);
 8001eba:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001ebe:	f000 fc2d 	bl	800271c <HAL_Delay>
  HAL_UART_Transmit(&huart1, (uint8_t*)"🖱️  Gyroscope Mouse READY! Tilt to move cursor.\r\n", 51, HAL_MAX_DELAY);
 8001ec2:	f04f 33ff 	mov.w	r3, #4294967295
 8001ec6:	2233      	movs	r2, #51	@ 0x33
 8001ec8:	4944      	ldr	r1, [pc, #272]	@ (8001fdc <main+0x1d4>)
 8001eca:	483c      	ldr	r0, [pc, #240]	@ (8001fbc <main+0x1b4>)
 8001ecc:	f003 fee2 	bl	8005c94 <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart1, (uint8_t*)"📌 PA2=Left Click, PA3=Right Click\r\n", 37, HAL_MAX_DELAY);
 8001ed0:	f04f 33ff 	mov.w	r3, #4294967295
 8001ed4:	2225      	movs	r2, #37	@ 0x25
 8001ed6:	4942      	ldr	r1, [pc, #264]	@ (8001fe0 <main+0x1d8>)
 8001ed8:	4838      	ldr	r0, [pc, #224]	@ (8001fbc <main+0x1b4>)
 8001eda:	f003 fedb 	bl	8005c94 <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart1, (uint8_t*)"═══════════════════════════════════\r\n", 37, HAL_MAX_DELAY);
 8001ede:	f04f 33ff 	mov.w	r3, #4294967295
 8001ee2:	2225      	movs	r2, #37	@ 0x25
 8001ee4:	493f      	ldr	r1, [pc, #252]	@ (8001fe4 <main+0x1dc>)
 8001ee6:	4835      	ldr	r0, [pc, #212]	@ (8001fbc <main+0x1b4>)
 8001ee8:	f003 fed4 	bl	8005c94 <HAL_UART_Transmit>
  
  // Wait for USB HS enumeration (important cho USB HS)
  HAL_UART_Transmit(&huart1, (uint8_t*)"⏳ Waiting for USB HS enumeration...\r\n", 39, HAL_MAX_DELAY);
 8001eec:	f04f 33ff 	mov.w	r3, #4294967295
 8001ef0:	2227      	movs	r2, #39	@ 0x27
 8001ef2:	493d      	ldr	r1, [pc, #244]	@ (8001fe8 <main+0x1e0>)
 8001ef4:	4831      	ldr	r0, [pc, #196]	@ (8001fbc <main+0x1b4>)
 8001ef6:	f003 fecd 	bl	8005c94 <HAL_UART_Transmit>
  HAL_Delay(3000);  // USB HS cần thời gian dài hơn để enumerate
 8001efa:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8001efe:	f000 fc0d 	bl	800271c <HAL_Delay>
  
  // Enable USB mouse function
  usb_ready = 1;
 8001f02:	4b3a      	ldr	r3, [pc, #232]	@ (8001fec <main+0x1e4>)
 8001f04:	2201      	movs	r2, #1
 8001f06:	701a      	strb	r2, [r3, #0]
  HAL_UART_Transmit(&huart1, (uint8_t*)"🔌 USB HID Mouse enabled!\r\n", 28, HAL_MAX_DELAY);
 8001f08:	f04f 33ff 	mov.w	r3, #4294967295
 8001f0c:	221c      	movs	r2, #28
 8001f0e:	4938      	ldr	r1, [pc, #224]	@ (8001ff0 <main+0x1e8>)
 8001f10:	482a      	ldr	r0, [pc, #168]	@ (8001fbc <main+0x1b4>)
 8001f12:	f003 febf 	bl	8005c94 <HAL_UART_Transmit>
  
  // Test USB HID mouse movement
  Test_Mouse_Movement();
 8001f16:	f7ff ff37 	bl	8001d88 <Test_Mouse_Movement>
  
  // Hiện thông tin debug đầu tiên
  Debug_Print_Status();
 8001f1a:	f7ff fed3 	bl	8001cc4 <Debug_Print_Status>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

    // Đọc trạng thái PA2 và PA3 và in ra UART
    GPIO_PinState pa2_state = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2);
 8001f1e:	2104      	movs	r1, #4
 8001f20:	4834      	ldr	r0, [pc, #208]	@ (8001ff4 <main+0x1ec>)
 8001f22:	f000 fedd 	bl	8002ce0 <HAL_GPIO_ReadPin>
 8001f26:	4603      	mov	r3, r0
 8001f28:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    GPIO_PinState pa3_state = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3);
 8001f2c:	2108      	movs	r1, #8
 8001f2e:	4831      	ldr	r0, [pc, #196]	@ (8001ff4 <main+0x1ec>)
 8001f30:	f000 fed6 	bl	8002ce0 <HAL_GPIO_ReadPin>
 8001f34:	4603      	mov	r3, r0
 8001f36:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46

    char pa_status_msg[64];
    sprintf(pa_status_msg, "PA2: %s | PA3: %s\r\n", 
 8001f3a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8001f3e:	2b01      	cmp	r3, #1
 8001f40:	d101      	bne.n	8001f46 <main+0x13e>
 8001f42:	4a2d      	ldr	r2, [pc, #180]	@ (8001ff8 <main+0x1f0>)
 8001f44:	e000      	b.n	8001f48 <main+0x140>
 8001f46:	4a2d      	ldr	r2, [pc, #180]	@ (8001ffc <main+0x1f4>)
 8001f48:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8001f4c:	2b01      	cmp	r3, #1
 8001f4e:	d101      	bne.n	8001f54 <main+0x14c>
 8001f50:	4b29      	ldr	r3, [pc, #164]	@ (8001ff8 <main+0x1f0>)
 8001f52:	e000      	b.n	8001f56 <main+0x14e>
 8001f54:	4b29      	ldr	r3, [pc, #164]	@ (8001ffc <main+0x1f4>)
 8001f56:	1d38      	adds	r0, r7, #4
 8001f58:	4929      	ldr	r1, [pc, #164]	@ (8002000 <main+0x1f8>)
 8001f5a:	f008 fc5d 	bl	800a818 <siprintf>
            (pa2_state == GPIO_PIN_SET) ? "HIGH" : "LOW",
            (pa3_state == GPIO_PIN_SET) ? "HIGH" : "LOW");
    HAL_UART_Transmit(&huart1, (uint8_t*)pa_status_msg, strlen(pa_status_msg), HAL_MAX_DELAY);
 8001f5e:	1d3b      	adds	r3, r7, #4
 8001f60:	4618      	mov	r0, r3
 8001f62:	f7fe f995 	bl	8000290 <strlen>
 8001f66:	4603      	mov	r3, r0
 8001f68:	b29a      	uxth	r2, r3
 8001f6a:	1d39      	adds	r1, r7, #4
 8001f6c:	f04f 33ff 	mov.w	r3, #4294967295
 8001f70:	4812      	ldr	r0, [pc, #72]	@ (8001fbc <main+0x1b4>)
 8001f72:	f003 fe8f 	bl	8005c94 <HAL_UART_Transmit>

    Process_Gyro_Mouse();
 8001f76:	f7ff fbcf 	bl	8001718 <Process_Gyro_Mouse>

    //Debug status mỗi 5 giây
   static uint32_t last_debug_time = 0;
   if(HAL_GetTick() - last_debug_time > 5000) {
 8001f7a:	f000 fbc3 	bl	8002704 <HAL_GetTick>
 8001f7e:	4602      	mov	r2, r0
 8001f80:	4b20      	ldr	r3, [pc, #128]	@ (8002004 <main+0x1fc>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	1ad3      	subs	r3, r2, r3
 8001f86:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d9c7      	bls.n	8001f1e <main+0x116>
       last_debug_time = HAL_GetTick();
 8001f8e:	f000 fbb9 	bl	8002704 <HAL_GetTick>
 8001f92:	4603      	mov	r3, r0
 8001f94:	4a1b      	ldr	r2, [pc, #108]	@ (8002004 <main+0x1fc>)
 8001f96:	6013      	str	r3, [r2, #0]
       Debug_Print_Status();
 8001f98:	f7ff fe94 	bl	8001cc4 <Debug_Print_Status>
  {
 8001f9c:	e7bf      	b.n	8001f1e <main+0x116>
 8001f9e:	bf00      	nop
 8001fa0:	eb851eb8 	.word	0xeb851eb8
 8001fa4:	3f9eb851 	.word	0x3f9eb851
 8001fa8:	bc6a7efa 	.word	0xbc6a7efa
 8001fac:	3f689374 	.word	0x3f689374
 8001fb0:	d2f1a9fc 	.word	0xd2f1a9fc
 8001fb4:	3f50624d 	.word	0x3f50624d
 8001fb8:	0800d310 	.word	0x0800d310
 8001fbc:	20000358 	.word	0x20000358
 8001fc0:	0800d338 	.word	0x0800d338
 8001fc4:	0800d358 	.word	0x0800d358
 8001fc8:	0800d374 	.word	0x0800d374
 8001fcc:	200003a0 	.word	0x200003a0
 8001fd0:	200003f0 	.word	0x200003f0
 8001fd4:	20000440 	.word	0x20000440
 8001fd8:	0800d39c 	.word	0x0800d39c
 8001fdc:	0800d3b8 	.word	0x0800d3b8
 8001fe0:	0800d3f0 	.word	0x0800d3f0
 8001fe4:	0800d418 	.word	0x0800d418
 8001fe8:	0800d484 	.word	0x0800d484
 8001fec:	200004c4 	.word	0x200004c4
 8001ff0:	0800d4ac 	.word	0x0800d4ac
 8001ff4:	40020000 	.word	0x40020000
 8001ff8:	0800d4cc 	.word	0x0800d4cc
 8001ffc:	0800d4d4 	.word	0x0800d4d4
 8002000:	0800d4d8 	.word	0x0800d4d8
 8002004:	200004d0 	.word	0x200004d0

08002008 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b094      	sub	sp, #80	@ 0x50
 800200c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800200e:	f107 0320 	add.w	r3, r7, #32
 8002012:	2230      	movs	r2, #48	@ 0x30
 8002014:	2100      	movs	r1, #0
 8002016:	4618      	mov	r0, r3
 8002018:	f008 fc63 	bl	800a8e2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800201c:	f107 030c 	add.w	r3, r7, #12
 8002020:	2200      	movs	r2, #0
 8002022:	601a      	str	r2, [r3, #0]
 8002024:	605a      	str	r2, [r3, #4]
 8002026:	609a      	str	r2, [r3, #8]
 8002028:	60da      	str	r2, [r3, #12]
 800202a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800202c:	2300      	movs	r3, #0
 800202e:	60bb      	str	r3, [r7, #8]
 8002030:	4b28      	ldr	r3, [pc, #160]	@ (80020d4 <SystemClock_Config+0xcc>)
 8002032:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002034:	4a27      	ldr	r2, [pc, #156]	@ (80020d4 <SystemClock_Config+0xcc>)
 8002036:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800203a:	6413      	str	r3, [r2, #64]	@ 0x40
 800203c:	4b25      	ldr	r3, [pc, #148]	@ (80020d4 <SystemClock_Config+0xcc>)
 800203e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002040:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002044:	60bb      	str	r3, [r7, #8]
 8002046:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002048:	2300      	movs	r3, #0
 800204a:	607b      	str	r3, [r7, #4]
 800204c:	4b22      	ldr	r3, [pc, #136]	@ (80020d8 <SystemClock_Config+0xd0>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4a21      	ldr	r2, [pc, #132]	@ (80020d8 <SystemClock_Config+0xd0>)
 8002052:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002056:	6013      	str	r3, [r2, #0]
 8002058:	4b1f      	ldr	r3, [pc, #124]	@ (80020d8 <SystemClock_Config+0xd0>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002060:	607b      	str	r3, [r7, #4]
 8002062:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002064:	2301      	movs	r3, #1
 8002066:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002068:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800206c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800206e:	2302      	movs	r3, #2
 8002070:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002072:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002076:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002078:	2304      	movs	r3, #4
 800207a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800207c:	23a8      	movs	r3, #168	@ 0xa8
 800207e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002080:	2302      	movs	r3, #2
 8002082:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002084:	2307      	movs	r3, #7
 8002086:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002088:	f107 0320 	add.w	r3, r7, #32
 800208c:	4618      	mov	r0, r3
 800208e:	f003 f919 	bl	80052c4 <HAL_RCC_OscConfig>
 8002092:	4603      	mov	r3, r0
 8002094:	2b00      	cmp	r3, #0
 8002096:	d001      	beq.n	800209c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002098:	f000 f8d4 	bl	8002244 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800209c:	230f      	movs	r3, #15
 800209e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80020a0:	2302      	movs	r3, #2
 80020a2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80020a4:	2300      	movs	r3, #0
 80020a6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80020a8:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80020ac:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80020ae:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80020b2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80020b4:	f107 030c 	add.w	r3, r7, #12
 80020b8:	2105      	movs	r1, #5
 80020ba:	4618      	mov	r0, r3
 80020bc:	f003 fb7a 	bl	80057b4 <HAL_RCC_ClockConfig>
 80020c0:	4603      	mov	r3, r0
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d001      	beq.n	80020ca <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80020c6:	f000 f8bd 	bl	8002244 <Error_Handler>
  }
}
 80020ca:	bf00      	nop
 80020cc:	3750      	adds	r7, #80	@ 0x50
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bd80      	pop	{r7, pc}
 80020d2:	bf00      	nop
 80020d4:	40023800 	.word	0x40023800
 80020d8:	40007000 	.word	0x40007000

080020dc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80020e0:	4b1b      	ldr	r3, [pc, #108]	@ (8002150 <MX_I2C1_Init+0x74>)
 80020e2:	4a1c      	ldr	r2, [pc, #112]	@ (8002154 <MX_I2C1_Init+0x78>)
 80020e4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80020e6:	4b1a      	ldr	r3, [pc, #104]	@ (8002150 <MX_I2C1_Init+0x74>)
 80020e8:	4a1b      	ldr	r2, [pc, #108]	@ (8002158 <MX_I2C1_Init+0x7c>)
 80020ea:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80020ec:	4b18      	ldr	r3, [pc, #96]	@ (8002150 <MX_I2C1_Init+0x74>)
 80020ee:	2200      	movs	r2, #0
 80020f0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80020f2:	4b17      	ldr	r3, [pc, #92]	@ (8002150 <MX_I2C1_Init+0x74>)
 80020f4:	2200      	movs	r2, #0
 80020f6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80020f8:	4b15      	ldr	r3, [pc, #84]	@ (8002150 <MX_I2C1_Init+0x74>)
 80020fa:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80020fe:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002100:	4b13      	ldr	r3, [pc, #76]	@ (8002150 <MX_I2C1_Init+0x74>)
 8002102:	2200      	movs	r2, #0
 8002104:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002106:	4b12      	ldr	r3, [pc, #72]	@ (8002150 <MX_I2C1_Init+0x74>)
 8002108:	2200      	movs	r2, #0
 800210a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800210c:	4b10      	ldr	r3, [pc, #64]	@ (8002150 <MX_I2C1_Init+0x74>)
 800210e:	2200      	movs	r2, #0
 8002110:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002112:	4b0f      	ldr	r3, [pc, #60]	@ (8002150 <MX_I2C1_Init+0x74>)
 8002114:	2200      	movs	r2, #0
 8002116:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002118:	480d      	ldr	r0, [pc, #52]	@ (8002150 <MX_I2C1_Init+0x74>)
 800211a:	f000 fdf9 	bl	8002d10 <HAL_I2C_Init>
 800211e:	4603      	mov	r3, r0
 8002120:	2b00      	cmp	r3, #0
 8002122:	d001      	beq.n	8002128 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002124:	f000 f88e 	bl	8002244 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002128:	2100      	movs	r1, #0
 800212a:	4809      	ldr	r0, [pc, #36]	@ (8002150 <MX_I2C1_Init+0x74>)
 800212c:	f001 fe14 	bl	8003d58 <HAL_I2CEx_ConfigAnalogFilter>
 8002130:	4603      	mov	r3, r0
 8002132:	2b00      	cmp	r3, #0
 8002134:	d001      	beq.n	800213a <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8002136:	f000 f885 	bl	8002244 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800213a:	2100      	movs	r1, #0
 800213c:	4804      	ldr	r0, [pc, #16]	@ (8002150 <MX_I2C1_Init+0x74>)
 800213e:	f001 fe47 	bl	8003dd0 <HAL_I2CEx_ConfigDigitalFilter>
 8002142:	4603      	mov	r3, r0
 8002144:	2b00      	cmp	r3, #0
 8002146:	d001      	beq.n	800214c <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8002148:	f000 f87c 	bl	8002244 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800214c:	bf00      	nop
 800214e:	bd80      	pop	{r7, pc}
 8002150:	20000304 	.word	0x20000304
 8002154:	40005400 	.word	0x40005400
 8002158:	000186a0 	.word	0x000186a0

0800215c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002160:	4b11      	ldr	r3, [pc, #68]	@ (80021a8 <MX_USART1_UART_Init+0x4c>)
 8002162:	4a12      	ldr	r2, [pc, #72]	@ (80021ac <MX_USART1_UART_Init+0x50>)
 8002164:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002166:	4b10      	ldr	r3, [pc, #64]	@ (80021a8 <MX_USART1_UART_Init+0x4c>)
 8002168:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800216c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800216e:	4b0e      	ldr	r3, [pc, #56]	@ (80021a8 <MX_USART1_UART_Init+0x4c>)
 8002170:	2200      	movs	r2, #0
 8002172:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002174:	4b0c      	ldr	r3, [pc, #48]	@ (80021a8 <MX_USART1_UART_Init+0x4c>)
 8002176:	2200      	movs	r2, #0
 8002178:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800217a:	4b0b      	ldr	r3, [pc, #44]	@ (80021a8 <MX_USART1_UART_Init+0x4c>)
 800217c:	2200      	movs	r2, #0
 800217e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002180:	4b09      	ldr	r3, [pc, #36]	@ (80021a8 <MX_USART1_UART_Init+0x4c>)
 8002182:	220c      	movs	r2, #12
 8002184:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002186:	4b08      	ldr	r3, [pc, #32]	@ (80021a8 <MX_USART1_UART_Init+0x4c>)
 8002188:	2200      	movs	r2, #0
 800218a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800218c:	4b06      	ldr	r3, [pc, #24]	@ (80021a8 <MX_USART1_UART_Init+0x4c>)
 800218e:	2200      	movs	r2, #0
 8002190:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002192:	4805      	ldr	r0, [pc, #20]	@ (80021a8 <MX_USART1_UART_Init+0x4c>)
 8002194:	f003 fd2e 	bl	8005bf4 <HAL_UART_Init>
 8002198:	4603      	mov	r3, r0
 800219a:	2b00      	cmp	r3, #0
 800219c:	d001      	beq.n	80021a2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800219e:	f000 f851 	bl	8002244 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80021a2:	bf00      	nop
 80021a4:	bd80      	pop	{r7, pc}
 80021a6:	bf00      	nop
 80021a8:	20000358 	.word	0x20000358
 80021ac:	40011000 	.word	0x40011000

080021b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b088      	sub	sp, #32
 80021b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021b6:	f107 030c 	add.w	r3, r7, #12
 80021ba:	2200      	movs	r2, #0
 80021bc:	601a      	str	r2, [r3, #0]
 80021be:	605a      	str	r2, [r3, #4]
 80021c0:	609a      	str	r2, [r3, #8]
 80021c2:	60da      	str	r2, [r3, #12]
 80021c4:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80021c6:	2300      	movs	r3, #0
 80021c8:	60bb      	str	r3, [r7, #8]
 80021ca:	4b1c      	ldr	r3, [pc, #112]	@ (800223c <MX_GPIO_Init+0x8c>)
 80021cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021ce:	4a1b      	ldr	r2, [pc, #108]	@ (800223c <MX_GPIO_Init+0x8c>)
 80021d0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80021d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80021d6:	4b19      	ldr	r3, [pc, #100]	@ (800223c <MX_GPIO_Init+0x8c>)
 80021d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80021de:	60bb      	str	r3, [r7, #8]
 80021e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80021e2:	2300      	movs	r3, #0
 80021e4:	607b      	str	r3, [r7, #4]
 80021e6:	4b15      	ldr	r3, [pc, #84]	@ (800223c <MX_GPIO_Init+0x8c>)
 80021e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021ea:	4a14      	ldr	r2, [pc, #80]	@ (800223c <MX_GPIO_Init+0x8c>)
 80021ec:	f043 0301 	orr.w	r3, r3, #1
 80021f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80021f2:	4b12      	ldr	r3, [pc, #72]	@ (800223c <MX_GPIO_Init+0x8c>)
 80021f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021f6:	f003 0301 	and.w	r3, r3, #1
 80021fa:	607b      	str	r3, [r7, #4]
 80021fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80021fe:	2300      	movs	r3, #0
 8002200:	603b      	str	r3, [r7, #0]
 8002202:	4b0e      	ldr	r3, [pc, #56]	@ (800223c <MX_GPIO_Init+0x8c>)
 8002204:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002206:	4a0d      	ldr	r2, [pc, #52]	@ (800223c <MX_GPIO_Init+0x8c>)
 8002208:	f043 0302 	orr.w	r3, r3, #2
 800220c:	6313      	str	r3, [r2, #48]	@ 0x30
 800220e:	4b0b      	ldr	r3, [pc, #44]	@ (800223c <MX_GPIO_Init+0x8c>)
 8002210:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002212:	f003 0302 	and.w	r3, r3, #2
 8002216:	603b      	str	r3, [r7, #0]
 8002218:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : PA0 PA1 PA2 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 800221a:	230f      	movs	r3, #15
 800221c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800221e:	2300      	movs	r3, #0
 8002220:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002222:	2302      	movs	r3, #2
 8002224:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002226:	f107 030c 	add.w	r3, r7, #12
 800222a:	4619      	mov	r1, r3
 800222c:	4804      	ldr	r0, [pc, #16]	@ (8002240 <MX_GPIO_Init+0x90>)
 800222e:	f000 fbab 	bl	8002988 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8002232:	bf00      	nop
 8002234:	3720      	adds	r7, #32
 8002236:	46bd      	mov	sp, r7
 8002238:	bd80      	pop	{r7, pc}
 800223a:	bf00      	nop
 800223c:	40023800 	.word	0x40023800
 8002240:	40020000 	.word	0x40020000

08002244 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002244:	b480      	push	{r7}
 8002246:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002248:	b672      	cpsid	i
}
 800224a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800224c:	bf00      	nop
 800224e:	e7fd      	b.n	800224c <Error_Handler+0x8>

08002250 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002250:	b480      	push	{r7}
 8002252:	b083      	sub	sp, #12
 8002254:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002256:	2300      	movs	r3, #0
 8002258:	607b      	str	r3, [r7, #4]
 800225a:	4b10      	ldr	r3, [pc, #64]	@ (800229c <HAL_MspInit+0x4c>)
 800225c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800225e:	4a0f      	ldr	r2, [pc, #60]	@ (800229c <HAL_MspInit+0x4c>)
 8002260:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002264:	6453      	str	r3, [r2, #68]	@ 0x44
 8002266:	4b0d      	ldr	r3, [pc, #52]	@ (800229c <HAL_MspInit+0x4c>)
 8002268:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800226a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800226e:	607b      	str	r3, [r7, #4]
 8002270:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002272:	2300      	movs	r3, #0
 8002274:	603b      	str	r3, [r7, #0]
 8002276:	4b09      	ldr	r3, [pc, #36]	@ (800229c <HAL_MspInit+0x4c>)
 8002278:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800227a:	4a08      	ldr	r2, [pc, #32]	@ (800229c <HAL_MspInit+0x4c>)
 800227c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002280:	6413      	str	r3, [r2, #64]	@ 0x40
 8002282:	4b06      	ldr	r3, [pc, #24]	@ (800229c <HAL_MspInit+0x4c>)
 8002284:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002286:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800228a:	603b      	str	r3, [r7, #0]
 800228c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800228e:	bf00      	nop
 8002290:	370c      	adds	r7, #12
 8002292:	46bd      	mov	sp, r7
 8002294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002298:	4770      	bx	lr
 800229a:	bf00      	nop
 800229c:	40023800 	.word	0x40023800

080022a0 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b08a      	sub	sp, #40	@ 0x28
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022a8:	f107 0314 	add.w	r3, r7, #20
 80022ac:	2200      	movs	r2, #0
 80022ae:	601a      	str	r2, [r3, #0]
 80022b0:	605a      	str	r2, [r3, #4]
 80022b2:	609a      	str	r2, [r3, #8]
 80022b4:	60da      	str	r2, [r3, #12]
 80022b6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4a19      	ldr	r2, [pc, #100]	@ (8002324 <HAL_I2C_MspInit+0x84>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d12b      	bne.n	800231a <HAL_I2C_MspInit+0x7a>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022c2:	2300      	movs	r3, #0
 80022c4:	613b      	str	r3, [r7, #16]
 80022c6:	4b18      	ldr	r3, [pc, #96]	@ (8002328 <HAL_I2C_MspInit+0x88>)
 80022c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022ca:	4a17      	ldr	r2, [pc, #92]	@ (8002328 <HAL_I2C_MspInit+0x88>)
 80022cc:	f043 0302 	orr.w	r3, r3, #2
 80022d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80022d2:	4b15      	ldr	r3, [pc, #84]	@ (8002328 <HAL_I2C_MspInit+0x88>)
 80022d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022d6:	f003 0302 	and.w	r3, r3, #2
 80022da:	613b      	str	r3, [r7, #16]
 80022dc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80022de:	23c0      	movs	r3, #192	@ 0xc0
 80022e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80022e2:	2312      	movs	r3, #18
 80022e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022e6:	2300      	movs	r3, #0
 80022e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022ea:	2303      	movs	r3, #3
 80022ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80022ee:	2304      	movs	r3, #4
 80022f0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022f2:	f107 0314 	add.w	r3, r7, #20
 80022f6:	4619      	mov	r1, r3
 80022f8:	480c      	ldr	r0, [pc, #48]	@ (800232c <HAL_I2C_MspInit+0x8c>)
 80022fa:	f000 fb45 	bl	8002988 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80022fe:	2300      	movs	r3, #0
 8002300:	60fb      	str	r3, [r7, #12]
 8002302:	4b09      	ldr	r3, [pc, #36]	@ (8002328 <HAL_I2C_MspInit+0x88>)
 8002304:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002306:	4a08      	ldr	r2, [pc, #32]	@ (8002328 <HAL_I2C_MspInit+0x88>)
 8002308:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800230c:	6413      	str	r3, [r2, #64]	@ 0x40
 800230e:	4b06      	ldr	r3, [pc, #24]	@ (8002328 <HAL_I2C_MspInit+0x88>)
 8002310:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002312:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002316:	60fb      	str	r3, [r7, #12]
 8002318:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 800231a:	bf00      	nop
 800231c:	3728      	adds	r7, #40	@ 0x28
 800231e:	46bd      	mov	sp, r7
 8002320:	bd80      	pop	{r7, pc}
 8002322:	bf00      	nop
 8002324:	40005400 	.word	0x40005400
 8002328:	40023800 	.word	0x40023800
 800232c:	40020400 	.word	0x40020400

08002330 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b08a      	sub	sp, #40	@ 0x28
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002338:	f107 0314 	add.w	r3, r7, #20
 800233c:	2200      	movs	r2, #0
 800233e:	601a      	str	r2, [r3, #0]
 8002340:	605a      	str	r2, [r3, #4]
 8002342:	609a      	str	r2, [r3, #8]
 8002344:	60da      	str	r2, [r3, #12]
 8002346:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4a19      	ldr	r2, [pc, #100]	@ (80023b4 <HAL_UART_MspInit+0x84>)
 800234e:	4293      	cmp	r3, r2
 8002350:	d12c      	bne.n	80023ac <HAL_UART_MspInit+0x7c>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002352:	2300      	movs	r3, #0
 8002354:	613b      	str	r3, [r7, #16]
 8002356:	4b18      	ldr	r3, [pc, #96]	@ (80023b8 <HAL_UART_MspInit+0x88>)
 8002358:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800235a:	4a17      	ldr	r2, [pc, #92]	@ (80023b8 <HAL_UART_MspInit+0x88>)
 800235c:	f043 0310 	orr.w	r3, r3, #16
 8002360:	6453      	str	r3, [r2, #68]	@ 0x44
 8002362:	4b15      	ldr	r3, [pc, #84]	@ (80023b8 <HAL_UART_MspInit+0x88>)
 8002364:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002366:	f003 0310 	and.w	r3, r3, #16
 800236a:	613b      	str	r3, [r7, #16]
 800236c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800236e:	2300      	movs	r3, #0
 8002370:	60fb      	str	r3, [r7, #12]
 8002372:	4b11      	ldr	r3, [pc, #68]	@ (80023b8 <HAL_UART_MspInit+0x88>)
 8002374:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002376:	4a10      	ldr	r2, [pc, #64]	@ (80023b8 <HAL_UART_MspInit+0x88>)
 8002378:	f043 0301 	orr.w	r3, r3, #1
 800237c:	6313      	str	r3, [r2, #48]	@ 0x30
 800237e:	4b0e      	ldr	r3, [pc, #56]	@ (80023b8 <HAL_UART_MspInit+0x88>)
 8002380:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002382:	f003 0301 	and.w	r3, r3, #1
 8002386:	60fb      	str	r3, [r7, #12]
 8002388:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800238a:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800238e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002390:	2302      	movs	r3, #2
 8002392:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002394:	2300      	movs	r3, #0
 8002396:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002398:	2303      	movs	r3, #3
 800239a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800239c:	2307      	movs	r3, #7
 800239e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023a0:	f107 0314 	add.w	r3, r7, #20
 80023a4:	4619      	mov	r1, r3
 80023a6:	4805      	ldr	r0, [pc, #20]	@ (80023bc <HAL_UART_MspInit+0x8c>)
 80023a8:	f000 faee 	bl	8002988 <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 80023ac:	bf00      	nop
 80023ae:	3728      	adds	r7, #40	@ 0x28
 80023b0:	46bd      	mov	sp, r7
 80023b2:	bd80      	pop	{r7, pc}
 80023b4:	40011000 	.word	0x40011000
 80023b8:	40023800 	.word	0x40023800
 80023bc:	40020000 	.word	0x40020000

080023c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80023c0:	b480      	push	{r7}
 80023c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80023c4:	bf00      	nop
 80023c6:	e7fd      	b.n	80023c4 <NMI_Handler+0x4>

080023c8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80023c8:	b480      	push	{r7}
 80023ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80023cc:	bf00      	nop
 80023ce:	e7fd      	b.n	80023cc <HardFault_Handler+0x4>

080023d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80023d0:	b480      	push	{r7}
 80023d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80023d4:	bf00      	nop
 80023d6:	e7fd      	b.n	80023d4 <MemManage_Handler+0x4>

080023d8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80023d8:	b480      	push	{r7}
 80023da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80023dc:	bf00      	nop
 80023de:	e7fd      	b.n	80023dc <BusFault_Handler+0x4>

080023e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80023e0:	b480      	push	{r7}
 80023e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80023e4:	bf00      	nop
 80023e6:	e7fd      	b.n	80023e4 <UsageFault_Handler+0x4>

080023e8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80023e8:	b480      	push	{r7}
 80023ea:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80023ec:	bf00      	nop
 80023ee:	46bd      	mov	sp, r7
 80023f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f4:	4770      	bx	lr

080023f6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80023f6:	b480      	push	{r7}
 80023f8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80023fa:	bf00      	nop
 80023fc:	46bd      	mov	sp, r7
 80023fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002402:	4770      	bx	lr

08002404 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002404:	b480      	push	{r7}
 8002406:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002408:	bf00      	nop
 800240a:	46bd      	mov	sp, r7
 800240c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002410:	4770      	bx	lr

08002412 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002412:	b580      	push	{r7, lr}
 8002414:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002416:	f000 f961 	bl	80026dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800241a:	bf00      	nop
 800241c:	bd80      	pop	{r7, pc}
	...

08002420 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 8002424:	4802      	ldr	r0, [pc, #8]	@ (8002430 <OTG_HS_IRQHandler+0x10>)
 8002426:	f001 fe56 	bl	80040d6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 800242a:	bf00      	nop
 800242c:	bd80      	pop	{r7, pc}
 800242e:	bf00      	nop
 8002430:	200009bc 	.word	0x200009bc

08002434 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002434:	b480      	push	{r7}
 8002436:	af00      	add	r7, sp, #0
  return 1;
 8002438:	2301      	movs	r3, #1
}
 800243a:	4618      	mov	r0, r3
 800243c:	46bd      	mov	sp, r7
 800243e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002442:	4770      	bx	lr

08002444 <_kill>:

int _kill(int pid, int sig)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b082      	sub	sp, #8
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
 800244c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800244e:	f008 fa9b 	bl	800a988 <__errno>
 8002452:	4603      	mov	r3, r0
 8002454:	2216      	movs	r2, #22
 8002456:	601a      	str	r2, [r3, #0]
  return -1;
 8002458:	f04f 33ff 	mov.w	r3, #4294967295
}
 800245c:	4618      	mov	r0, r3
 800245e:	3708      	adds	r7, #8
 8002460:	46bd      	mov	sp, r7
 8002462:	bd80      	pop	{r7, pc}

08002464 <_exit>:

void _exit (int status)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b082      	sub	sp, #8
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800246c:	f04f 31ff 	mov.w	r1, #4294967295
 8002470:	6878      	ldr	r0, [r7, #4]
 8002472:	f7ff ffe7 	bl	8002444 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002476:	bf00      	nop
 8002478:	e7fd      	b.n	8002476 <_exit+0x12>

0800247a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800247a:	b580      	push	{r7, lr}
 800247c:	b086      	sub	sp, #24
 800247e:	af00      	add	r7, sp, #0
 8002480:	60f8      	str	r0, [r7, #12]
 8002482:	60b9      	str	r1, [r7, #8]
 8002484:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002486:	2300      	movs	r3, #0
 8002488:	617b      	str	r3, [r7, #20]
 800248a:	e00a      	b.n	80024a2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800248c:	f3af 8000 	nop.w
 8002490:	4601      	mov	r1, r0
 8002492:	68bb      	ldr	r3, [r7, #8]
 8002494:	1c5a      	adds	r2, r3, #1
 8002496:	60ba      	str	r2, [r7, #8]
 8002498:	b2ca      	uxtb	r2, r1
 800249a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800249c:	697b      	ldr	r3, [r7, #20]
 800249e:	3301      	adds	r3, #1
 80024a0:	617b      	str	r3, [r7, #20]
 80024a2:	697a      	ldr	r2, [r7, #20]
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	429a      	cmp	r2, r3
 80024a8:	dbf0      	blt.n	800248c <_read+0x12>
  }

  return len;
 80024aa:	687b      	ldr	r3, [r7, #4]
}
 80024ac:	4618      	mov	r0, r3
 80024ae:	3718      	adds	r7, #24
 80024b0:	46bd      	mov	sp, r7
 80024b2:	bd80      	pop	{r7, pc}

080024b4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b086      	sub	sp, #24
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	60f8      	str	r0, [r7, #12]
 80024bc:	60b9      	str	r1, [r7, #8]
 80024be:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024c0:	2300      	movs	r3, #0
 80024c2:	617b      	str	r3, [r7, #20]
 80024c4:	e009      	b.n	80024da <_write+0x26>
  {
    __io_putchar(*ptr++);
 80024c6:	68bb      	ldr	r3, [r7, #8]
 80024c8:	1c5a      	adds	r2, r3, #1
 80024ca:	60ba      	str	r2, [r7, #8]
 80024cc:	781b      	ldrb	r3, [r3, #0]
 80024ce:	4618      	mov	r0, r3
 80024d0:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024d4:	697b      	ldr	r3, [r7, #20]
 80024d6:	3301      	adds	r3, #1
 80024d8:	617b      	str	r3, [r7, #20]
 80024da:	697a      	ldr	r2, [r7, #20]
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	429a      	cmp	r2, r3
 80024e0:	dbf1      	blt.n	80024c6 <_write+0x12>
  }
  return len;
 80024e2:	687b      	ldr	r3, [r7, #4]
}
 80024e4:	4618      	mov	r0, r3
 80024e6:	3718      	adds	r7, #24
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bd80      	pop	{r7, pc}

080024ec <_close>:

int _close(int file)
{
 80024ec:	b480      	push	{r7}
 80024ee:	b083      	sub	sp, #12
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80024f4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80024f8:	4618      	mov	r0, r3
 80024fa:	370c      	adds	r7, #12
 80024fc:	46bd      	mov	sp, r7
 80024fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002502:	4770      	bx	lr

08002504 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002504:	b480      	push	{r7}
 8002506:	b083      	sub	sp, #12
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
 800250c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002514:	605a      	str	r2, [r3, #4]
  return 0;
 8002516:	2300      	movs	r3, #0
}
 8002518:	4618      	mov	r0, r3
 800251a:	370c      	adds	r7, #12
 800251c:	46bd      	mov	sp, r7
 800251e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002522:	4770      	bx	lr

08002524 <_isatty>:

int _isatty(int file)
{
 8002524:	b480      	push	{r7}
 8002526:	b083      	sub	sp, #12
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800252c:	2301      	movs	r3, #1
}
 800252e:	4618      	mov	r0, r3
 8002530:	370c      	adds	r7, #12
 8002532:	46bd      	mov	sp, r7
 8002534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002538:	4770      	bx	lr

0800253a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800253a:	b480      	push	{r7}
 800253c:	b085      	sub	sp, #20
 800253e:	af00      	add	r7, sp, #0
 8002540:	60f8      	str	r0, [r7, #12]
 8002542:	60b9      	str	r1, [r7, #8]
 8002544:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002546:	2300      	movs	r3, #0
}
 8002548:	4618      	mov	r0, r3
 800254a:	3714      	adds	r7, #20
 800254c:	46bd      	mov	sp, r7
 800254e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002552:	4770      	bx	lr

08002554 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b086      	sub	sp, #24
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800255c:	4a14      	ldr	r2, [pc, #80]	@ (80025b0 <_sbrk+0x5c>)
 800255e:	4b15      	ldr	r3, [pc, #84]	@ (80025b4 <_sbrk+0x60>)
 8002560:	1ad3      	subs	r3, r2, r3
 8002562:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002564:	697b      	ldr	r3, [r7, #20]
 8002566:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002568:	4b13      	ldr	r3, [pc, #76]	@ (80025b8 <_sbrk+0x64>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d102      	bne.n	8002576 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002570:	4b11      	ldr	r3, [pc, #68]	@ (80025b8 <_sbrk+0x64>)
 8002572:	4a12      	ldr	r2, [pc, #72]	@ (80025bc <_sbrk+0x68>)
 8002574:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002576:	4b10      	ldr	r3, [pc, #64]	@ (80025b8 <_sbrk+0x64>)
 8002578:	681a      	ldr	r2, [r3, #0]
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	4413      	add	r3, r2
 800257e:	693a      	ldr	r2, [r7, #16]
 8002580:	429a      	cmp	r2, r3
 8002582:	d207      	bcs.n	8002594 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002584:	f008 fa00 	bl	800a988 <__errno>
 8002588:	4603      	mov	r3, r0
 800258a:	220c      	movs	r2, #12
 800258c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800258e:	f04f 33ff 	mov.w	r3, #4294967295
 8002592:	e009      	b.n	80025a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002594:	4b08      	ldr	r3, [pc, #32]	@ (80025b8 <_sbrk+0x64>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800259a:	4b07      	ldr	r3, [pc, #28]	@ (80025b8 <_sbrk+0x64>)
 800259c:	681a      	ldr	r2, [r3, #0]
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	4413      	add	r3, r2
 80025a2:	4a05      	ldr	r2, [pc, #20]	@ (80025b8 <_sbrk+0x64>)
 80025a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80025a6:	68fb      	ldr	r3, [r7, #12]
}
 80025a8:	4618      	mov	r0, r3
 80025aa:	3718      	adds	r7, #24
 80025ac:	46bd      	mov	sp, r7
 80025ae:	bd80      	pop	{r7, pc}
 80025b0:	20030000 	.word	0x20030000
 80025b4:	00000400 	.word	0x00000400
 80025b8:	200004d4 	.word	0x200004d4
 80025bc:	20001000 	.word	0x20001000

080025c0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80025c0:	b480      	push	{r7}
 80025c2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80025c4:	4b06      	ldr	r3, [pc, #24]	@ (80025e0 <SystemInit+0x20>)
 80025c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025ca:	4a05      	ldr	r2, [pc, #20]	@ (80025e0 <SystemInit+0x20>)
 80025cc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80025d0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80025d4:	bf00      	nop
 80025d6:	46bd      	mov	sp, r7
 80025d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025dc:	4770      	bx	lr
 80025de:	bf00      	nop
 80025e0:	e000ed00 	.word	0xe000ed00

080025e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80025e4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800261c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80025e8:	f7ff ffea 	bl	80025c0 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80025ec:	480c      	ldr	r0, [pc, #48]	@ (8002620 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80025ee:	490d      	ldr	r1, [pc, #52]	@ (8002624 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80025f0:	4a0d      	ldr	r2, [pc, #52]	@ (8002628 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80025f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80025f4:	e002      	b.n	80025fc <LoopCopyDataInit>

080025f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80025f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80025f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80025fa:	3304      	adds	r3, #4

080025fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80025fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80025fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002600:	d3f9      	bcc.n	80025f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002602:	4a0a      	ldr	r2, [pc, #40]	@ (800262c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002604:	4c0a      	ldr	r4, [pc, #40]	@ (8002630 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002606:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002608:	e001      	b.n	800260e <LoopFillZerobss>

0800260a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800260a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800260c:	3204      	adds	r2, #4

0800260e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800260e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002610:	d3fb      	bcc.n	800260a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8002612:	f008 f9bf 	bl	800a994 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002616:	f7ff fbf7 	bl	8001e08 <main>
  bx  lr    
 800261a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 800261c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8002620:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002624:	200002e8 	.word	0x200002e8
  ldr r2, =_sidata
 8002628:	0800d958 	.word	0x0800d958
  ldr r2, =_sbss
 800262c:	200002e8 	.word	0x200002e8
  ldr r4, =_ebss
 8002630:	20001000 	.word	0x20001000

08002634 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002634:	e7fe      	b.n	8002634 <ADC_IRQHandler>
	...

08002638 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800263c:	4b0e      	ldr	r3, [pc, #56]	@ (8002678 <HAL_Init+0x40>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4a0d      	ldr	r2, [pc, #52]	@ (8002678 <HAL_Init+0x40>)
 8002642:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002646:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002648:	4b0b      	ldr	r3, [pc, #44]	@ (8002678 <HAL_Init+0x40>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4a0a      	ldr	r2, [pc, #40]	@ (8002678 <HAL_Init+0x40>)
 800264e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002652:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002654:	4b08      	ldr	r3, [pc, #32]	@ (8002678 <HAL_Init+0x40>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4a07      	ldr	r2, [pc, #28]	@ (8002678 <HAL_Init+0x40>)
 800265a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800265e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002660:	2003      	movs	r0, #3
 8002662:	f000 f94f 	bl	8002904 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002666:	200f      	movs	r0, #15
 8002668:	f000 f808 	bl	800267c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800266c:	f7ff fdf0 	bl	8002250 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002670:	2300      	movs	r3, #0
}
 8002672:	4618      	mov	r0, r3
 8002674:	bd80      	pop	{r7, pc}
 8002676:	bf00      	nop
 8002678:	40023c00 	.word	0x40023c00

0800267c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b082      	sub	sp, #8
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002684:	4b12      	ldr	r3, [pc, #72]	@ (80026d0 <HAL_InitTick+0x54>)
 8002686:	681a      	ldr	r2, [r3, #0]
 8002688:	4b12      	ldr	r3, [pc, #72]	@ (80026d4 <HAL_InitTick+0x58>)
 800268a:	781b      	ldrb	r3, [r3, #0]
 800268c:	4619      	mov	r1, r3
 800268e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002692:	fbb3 f3f1 	udiv	r3, r3, r1
 8002696:	fbb2 f3f3 	udiv	r3, r2, r3
 800269a:	4618      	mov	r0, r3
 800269c:	f000 f967 	bl	800296e <HAL_SYSTICK_Config>
 80026a0:	4603      	mov	r3, r0
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d001      	beq.n	80026aa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80026a6:	2301      	movs	r3, #1
 80026a8:	e00e      	b.n	80026c8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	2b0f      	cmp	r3, #15
 80026ae:	d80a      	bhi.n	80026c6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80026b0:	2200      	movs	r2, #0
 80026b2:	6879      	ldr	r1, [r7, #4]
 80026b4:	f04f 30ff 	mov.w	r0, #4294967295
 80026b8:	f000 f92f 	bl	800291a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80026bc:	4a06      	ldr	r2, [pc, #24]	@ (80026d8 <HAL_InitTick+0x5c>)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80026c2:	2300      	movs	r3, #0
 80026c4:	e000      	b.n	80026c8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80026c6:	2301      	movs	r3, #1
}
 80026c8:	4618      	mov	r0, r3
 80026ca:	3708      	adds	r7, #8
 80026cc:	46bd      	mov	sp, r7
 80026ce:	bd80      	pop	{r7, pc}
 80026d0:	20000004 	.word	0x20000004
 80026d4:	2000000c 	.word	0x2000000c
 80026d8:	20000008 	.word	0x20000008

080026dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80026dc:	b480      	push	{r7}
 80026de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80026e0:	4b06      	ldr	r3, [pc, #24]	@ (80026fc <HAL_IncTick+0x20>)
 80026e2:	781b      	ldrb	r3, [r3, #0]
 80026e4:	461a      	mov	r2, r3
 80026e6:	4b06      	ldr	r3, [pc, #24]	@ (8002700 <HAL_IncTick+0x24>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4413      	add	r3, r2
 80026ec:	4a04      	ldr	r2, [pc, #16]	@ (8002700 <HAL_IncTick+0x24>)
 80026ee:	6013      	str	r3, [r2, #0]
}
 80026f0:	bf00      	nop
 80026f2:	46bd      	mov	sp, r7
 80026f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f8:	4770      	bx	lr
 80026fa:	bf00      	nop
 80026fc:	2000000c 	.word	0x2000000c
 8002700:	200004d8 	.word	0x200004d8

08002704 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002704:	b480      	push	{r7}
 8002706:	af00      	add	r7, sp, #0
  return uwTick;
 8002708:	4b03      	ldr	r3, [pc, #12]	@ (8002718 <HAL_GetTick+0x14>)
 800270a:	681b      	ldr	r3, [r3, #0]
}
 800270c:	4618      	mov	r0, r3
 800270e:	46bd      	mov	sp, r7
 8002710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002714:	4770      	bx	lr
 8002716:	bf00      	nop
 8002718:	200004d8 	.word	0x200004d8

0800271c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b084      	sub	sp, #16
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002724:	f7ff ffee 	bl	8002704 <HAL_GetTick>
 8002728:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002734:	d005      	beq.n	8002742 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002736:	4b0a      	ldr	r3, [pc, #40]	@ (8002760 <HAL_Delay+0x44>)
 8002738:	781b      	ldrb	r3, [r3, #0]
 800273a:	461a      	mov	r2, r3
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	4413      	add	r3, r2
 8002740:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002742:	bf00      	nop
 8002744:	f7ff ffde 	bl	8002704 <HAL_GetTick>
 8002748:	4602      	mov	r2, r0
 800274a:	68bb      	ldr	r3, [r7, #8]
 800274c:	1ad3      	subs	r3, r2, r3
 800274e:	68fa      	ldr	r2, [r7, #12]
 8002750:	429a      	cmp	r2, r3
 8002752:	d8f7      	bhi.n	8002744 <HAL_Delay+0x28>
  {
  }
}
 8002754:	bf00      	nop
 8002756:	bf00      	nop
 8002758:	3710      	adds	r7, #16
 800275a:	46bd      	mov	sp, r7
 800275c:	bd80      	pop	{r7, pc}
 800275e:	bf00      	nop
 8002760:	2000000c 	.word	0x2000000c

08002764 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002764:	b480      	push	{r7}
 8002766:	b085      	sub	sp, #20
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	f003 0307 	and.w	r3, r3, #7
 8002772:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002774:	4b0c      	ldr	r3, [pc, #48]	@ (80027a8 <__NVIC_SetPriorityGrouping+0x44>)
 8002776:	68db      	ldr	r3, [r3, #12]
 8002778:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800277a:	68ba      	ldr	r2, [r7, #8]
 800277c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002780:	4013      	ands	r3, r2
 8002782:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002788:	68bb      	ldr	r3, [r7, #8]
 800278a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800278c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002790:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002794:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002796:	4a04      	ldr	r2, [pc, #16]	@ (80027a8 <__NVIC_SetPriorityGrouping+0x44>)
 8002798:	68bb      	ldr	r3, [r7, #8]
 800279a:	60d3      	str	r3, [r2, #12]
}
 800279c:	bf00      	nop
 800279e:	3714      	adds	r7, #20
 80027a0:	46bd      	mov	sp, r7
 80027a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a6:	4770      	bx	lr
 80027a8:	e000ed00 	.word	0xe000ed00

080027ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80027ac:	b480      	push	{r7}
 80027ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80027b0:	4b04      	ldr	r3, [pc, #16]	@ (80027c4 <__NVIC_GetPriorityGrouping+0x18>)
 80027b2:	68db      	ldr	r3, [r3, #12]
 80027b4:	0a1b      	lsrs	r3, r3, #8
 80027b6:	f003 0307 	and.w	r3, r3, #7
}
 80027ba:	4618      	mov	r0, r3
 80027bc:	46bd      	mov	sp, r7
 80027be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c2:	4770      	bx	lr
 80027c4:	e000ed00 	.word	0xe000ed00

080027c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027c8:	b480      	push	{r7}
 80027ca:	b083      	sub	sp, #12
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	4603      	mov	r3, r0
 80027d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	db0b      	blt.n	80027f2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80027da:	79fb      	ldrb	r3, [r7, #7]
 80027dc:	f003 021f 	and.w	r2, r3, #31
 80027e0:	4907      	ldr	r1, [pc, #28]	@ (8002800 <__NVIC_EnableIRQ+0x38>)
 80027e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027e6:	095b      	lsrs	r3, r3, #5
 80027e8:	2001      	movs	r0, #1
 80027ea:	fa00 f202 	lsl.w	r2, r0, r2
 80027ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80027f2:	bf00      	nop
 80027f4:	370c      	adds	r7, #12
 80027f6:	46bd      	mov	sp, r7
 80027f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fc:	4770      	bx	lr
 80027fe:	bf00      	nop
 8002800:	e000e100 	.word	0xe000e100

08002804 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002804:	b480      	push	{r7}
 8002806:	b083      	sub	sp, #12
 8002808:	af00      	add	r7, sp, #0
 800280a:	4603      	mov	r3, r0
 800280c:	6039      	str	r1, [r7, #0]
 800280e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002810:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002814:	2b00      	cmp	r3, #0
 8002816:	db0a      	blt.n	800282e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	b2da      	uxtb	r2, r3
 800281c:	490c      	ldr	r1, [pc, #48]	@ (8002850 <__NVIC_SetPriority+0x4c>)
 800281e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002822:	0112      	lsls	r2, r2, #4
 8002824:	b2d2      	uxtb	r2, r2
 8002826:	440b      	add	r3, r1
 8002828:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800282c:	e00a      	b.n	8002844 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	b2da      	uxtb	r2, r3
 8002832:	4908      	ldr	r1, [pc, #32]	@ (8002854 <__NVIC_SetPriority+0x50>)
 8002834:	79fb      	ldrb	r3, [r7, #7]
 8002836:	f003 030f 	and.w	r3, r3, #15
 800283a:	3b04      	subs	r3, #4
 800283c:	0112      	lsls	r2, r2, #4
 800283e:	b2d2      	uxtb	r2, r2
 8002840:	440b      	add	r3, r1
 8002842:	761a      	strb	r2, [r3, #24]
}
 8002844:	bf00      	nop
 8002846:	370c      	adds	r7, #12
 8002848:	46bd      	mov	sp, r7
 800284a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284e:	4770      	bx	lr
 8002850:	e000e100 	.word	0xe000e100
 8002854:	e000ed00 	.word	0xe000ed00

08002858 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002858:	b480      	push	{r7}
 800285a:	b089      	sub	sp, #36	@ 0x24
 800285c:	af00      	add	r7, sp, #0
 800285e:	60f8      	str	r0, [r7, #12]
 8002860:	60b9      	str	r1, [r7, #8]
 8002862:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	f003 0307 	and.w	r3, r3, #7
 800286a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800286c:	69fb      	ldr	r3, [r7, #28]
 800286e:	f1c3 0307 	rsb	r3, r3, #7
 8002872:	2b04      	cmp	r3, #4
 8002874:	bf28      	it	cs
 8002876:	2304      	movcs	r3, #4
 8002878:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800287a:	69fb      	ldr	r3, [r7, #28]
 800287c:	3304      	adds	r3, #4
 800287e:	2b06      	cmp	r3, #6
 8002880:	d902      	bls.n	8002888 <NVIC_EncodePriority+0x30>
 8002882:	69fb      	ldr	r3, [r7, #28]
 8002884:	3b03      	subs	r3, #3
 8002886:	e000      	b.n	800288a <NVIC_EncodePriority+0x32>
 8002888:	2300      	movs	r3, #0
 800288a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800288c:	f04f 32ff 	mov.w	r2, #4294967295
 8002890:	69bb      	ldr	r3, [r7, #24]
 8002892:	fa02 f303 	lsl.w	r3, r2, r3
 8002896:	43da      	mvns	r2, r3
 8002898:	68bb      	ldr	r3, [r7, #8]
 800289a:	401a      	ands	r2, r3
 800289c:	697b      	ldr	r3, [r7, #20]
 800289e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80028a0:	f04f 31ff 	mov.w	r1, #4294967295
 80028a4:	697b      	ldr	r3, [r7, #20]
 80028a6:	fa01 f303 	lsl.w	r3, r1, r3
 80028aa:	43d9      	mvns	r1, r3
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028b0:	4313      	orrs	r3, r2
         );
}
 80028b2:	4618      	mov	r0, r3
 80028b4:	3724      	adds	r7, #36	@ 0x24
 80028b6:	46bd      	mov	sp, r7
 80028b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028bc:	4770      	bx	lr
	...

080028c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b082      	sub	sp, #8
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	3b01      	subs	r3, #1
 80028cc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80028d0:	d301      	bcc.n	80028d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80028d2:	2301      	movs	r3, #1
 80028d4:	e00f      	b.n	80028f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80028d6:	4a0a      	ldr	r2, [pc, #40]	@ (8002900 <SysTick_Config+0x40>)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	3b01      	subs	r3, #1
 80028dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80028de:	210f      	movs	r1, #15
 80028e0:	f04f 30ff 	mov.w	r0, #4294967295
 80028e4:	f7ff ff8e 	bl	8002804 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80028e8:	4b05      	ldr	r3, [pc, #20]	@ (8002900 <SysTick_Config+0x40>)
 80028ea:	2200      	movs	r2, #0
 80028ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80028ee:	4b04      	ldr	r3, [pc, #16]	@ (8002900 <SysTick_Config+0x40>)
 80028f0:	2207      	movs	r2, #7
 80028f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80028f4:	2300      	movs	r3, #0
}
 80028f6:	4618      	mov	r0, r3
 80028f8:	3708      	adds	r7, #8
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bd80      	pop	{r7, pc}
 80028fe:	bf00      	nop
 8002900:	e000e010 	.word	0xe000e010

08002904 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b082      	sub	sp, #8
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800290c:	6878      	ldr	r0, [r7, #4]
 800290e:	f7ff ff29 	bl	8002764 <__NVIC_SetPriorityGrouping>
}
 8002912:	bf00      	nop
 8002914:	3708      	adds	r7, #8
 8002916:	46bd      	mov	sp, r7
 8002918:	bd80      	pop	{r7, pc}

0800291a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800291a:	b580      	push	{r7, lr}
 800291c:	b086      	sub	sp, #24
 800291e:	af00      	add	r7, sp, #0
 8002920:	4603      	mov	r3, r0
 8002922:	60b9      	str	r1, [r7, #8]
 8002924:	607a      	str	r2, [r7, #4]
 8002926:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002928:	2300      	movs	r3, #0
 800292a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800292c:	f7ff ff3e 	bl	80027ac <__NVIC_GetPriorityGrouping>
 8002930:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002932:	687a      	ldr	r2, [r7, #4]
 8002934:	68b9      	ldr	r1, [r7, #8]
 8002936:	6978      	ldr	r0, [r7, #20]
 8002938:	f7ff ff8e 	bl	8002858 <NVIC_EncodePriority>
 800293c:	4602      	mov	r2, r0
 800293e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002942:	4611      	mov	r1, r2
 8002944:	4618      	mov	r0, r3
 8002946:	f7ff ff5d 	bl	8002804 <__NVIC_SetPriority>
}
 800294a:	bf00      	nop
 800294c:	3718      	adds	r7, #24
 800294e:	46bd      	mov	sp, r7
 8002950:	bd80      	pop	{r7, pc}

08002952 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002952:	b580      	push	{r7, lr}
 8002954:	b082      	sub	sp, #8
 8002956:	af00      	add	r7, sp, #0
 8002958:	4603      	mov	r3, r0
 800295a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800295c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002960:	4618      	mov	r0, r3
 8002962:	f7ff ff31 	bl	80027c8 <__NVIC_EnableIRQ>
}
 8002966:	bf00      	nop
 8002968:	3708      	adds	r7, #8
 800296a:	46bd      	mov	sp, r7
 800296c:	bd80      	pop	{r7, pc}

0800296e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800296e:	b580      	push	{r7, lr}
 8002970:	b082      	sub	sp, #8
 8002972:	af00      	add	r7, sp, #0
 8002974:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002976:	6878      	ldr	r0, [r7, #4]
 8002978:	f7ff ffa2 	bl	80028c0 <SysTick_Config>
 800297c:	4603      	mov	r3, r0
}
 800297e:	4618      	mov	r0, r3
 8002980:	3708      	adds	r7, #8
 8002982:	46bd      	mov	sp, r7
 8002984:	bd80      	pop	{r7, pc}
	...

08002988 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002988:	b480      	push	{r7}
 800298a:	b089      	sub	sp, #36	@ 0x24
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
 8002990:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002992:	2300      	movs	r3, #0
 8002994:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002996:	2300      	movs	r3, #0
 8002998:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800299a:	2300      	movs	r3, #0
 800299c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800299e:	2300      	movs	r3, #0
 80029a0:	61fb      	str	r3, [r7, #28]
 80029a2:	e177      	b.n	8002c94 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80029a4:	2201      	movs	r2, #1
 80029a6:	69fb      	ldr	r3, [r7, #28]
 80029a8:	fa02 f303 	lsl.w	r3, r2, r3
 80029ac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	697a      	ldr	r2, [r7, #20]
 80029b4:	4013      	ands	r3, r2
 80029b6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80029b8:	693a      	ldr	r2, [r7, #16]
 80029ba:	697b      	ldr	r3, [r7, #20]
 80029bc:	429a      	cmp	r2, r3
 80029be:	f040 8166 	bne.w	8002c8e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	f003 0303 	and.w	r3, r3, #3
 80029ca:	2b01      	cmp	r3, #1
 80029cc:	d005      	beq.n	80029da <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80029d6:	2b02      	cmp	r3, #2
 80029d8:	d130      	bne.n	8002a3c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	689b      	ldr	r3, [r3, #8]
 80029de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80029e0:	69fb      	ldr	r3, [r7, #28]
 80029e2:	005b      	lsls	r3, r3, #1
 80029e4:	2203      	movs	r2, #3
 80029e6:	fa02 f303 	lsl.w	r3, r2, r3
 80029ea:	43db      	mvns	r3, r3
 80029ec:	69ba      	ldr	r2, [r7, #24]
 80029ee:	4013      	ands	r3, r2
 80029f0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	68da      	ldr	r2, [r3, #12]
 80029f6:	69fb      	ldr	r3, [r7, #28]
 80029f8:	005b      	lsls	r3, r3, #1
 80029fa:	fa02 f303 	lsl.w	r3, r2, r3
 80029fe:	69ba      	ldr	r2, [r7, #24]
 8002a00:	4313      	orrs	r3, r2
 8002a02:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	69ba      	ldr	r2, [r7, #24]
 8002a08:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	685b      	ldr	r3, [r3, #4]
 8002a0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002a10:	2201      	movs	r2, #1
 8002a12:	69fb      	ldr	r3, [r7, #28]
 8002a14:	fa02 f303 	lsl.w	r3, r2, r3
 8002a18:	43db      	mvns	r3, r3
 8002a1a:	69ba      	ldr	r2, [r7, #24]
 8002a1c:	4013      	ands	r3, r2
 8002a1e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	091b      	lsrs	r3, r3, #4
 8002a26:	f003 0201 	and.w	r2, r3, #1
 8002a2a:	69fb      	ldr	r3, [r7, #28]
 8002a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a30:	69ba      	ldr	r2, [r7, #24]
 8002a32:	4313      	orrs	r3, r2
 8002a34:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	69ba      	ldr	r2, [r7, #24]
 8002a3a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	f003 0303 	and.w	r3, r3, #3
 8002a44:	2b03      	cmp	r3, #3
 8002a46:	d017      	beq.n	8002a78 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	68db      	ldr	r3, [r3, #12]
 8002a4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002a4e:	69fb      	ldr	r3, [r7, #28]
 8002a50:	005b      	lsls	r3, r3, #1
 8002a52:	2203      	movs	r2, #3
 8002a54:	fa02 f303 	lsl.w	r3, r2, r3
 8002a58:	43db      	mvns	r3, r3
 8002a5a:	69ba      	ldr	r2, [r7, #24]
 8002a5c:	4013      	ands	r3, r2
 8002a5e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	689a      	ldr	r2, [r3, #8]
 8002a64:	69fb      	ldr	r3, [r7, #28]
 8002a66:	005b      	lsls	r3, r3, #1
 8002a68:	fa02 f303 	lsl.w	r3, r2, r3
 8002a6c:	69ba      	ldr	r2, [r7, #24]
 8002a6e:	4313      	orrs	r3, r2
 8002a70:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	69ba      	ldr	r2, [r7, #24]
 8002a76:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	f003 0303 	and.w	r3, r3, #3
 8002a80:	2b02      	cmp	r3, #2
 8002a82:	d123      	bne.n	8002acc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002a84:	69fb      	ldr	r3, [r7, #28]
 8002a86:	08da      	lsrs	r2, r3, #3
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	3208      	adds	r2, #8
 8002a8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a90:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002a92:	69fb      	ldr	r3, [r7, #28]
 8002a94:	f003 0307 	and.w	r3, r3, #7
 8002a98:	009b      	lsls	r3, r3, #2
 8002a9a:	220f      	movs	r2, #15
 8002a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa0:	43db      	mvns	r3, r3
 8002aa2:	69ba      	ldr	r2, [r7, #24]
 8002aa4:	4013      	ands	r3, r2
 8002aa6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	691a      	ldr	r2, [r3, #16]
 8002aac:	69fb      	ldr	r3, [r7, #28]
 8002aae:	f003 0307 	and.w	r3, r3, #7
 8002ab2:	009b      	lsls	r3, r3, #2
 8002ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab8:	69ba      	ldr	r2, [r7, #24]
 8002aba:	4313      	orrs	r3, r2
 8002abc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002abe:	69fb      	ldr	r3, [r7, #28]
 8002ac0:	08da      	lsrs	r2, r3, #3
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	3208      	adds	r2, #8
 8002ac6:	69b9      	ldr	r1, [r7, #24]
 8002ac8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002ad2:	69fb      	ldr	r3, [r7, #28]
 8002ad4:	005b      	lsls	r3, r3, #1
 8002ad6:	2203      	movs	r2, #3
 8002ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8002adc:	43db      	mvns	r3, r3
 8002ade:	69ba      	ldr	r2, [r7, #24]
 8002ae0:	4013      	ands	r3, r2
 8002ae2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	685b      	ldr	r3, [r3, #4]
 8002ae8:	f003 0203 	and.w	r2, r3, #3
 8002aec:	69fb      	ldr	r3, [r7, #28]
 8002aee:	005b      	lsls	r3, r3, #1
 8002af0:	fa02 f303 	lsl.w	r3, r2, r3
 8002af4:	69ba      	ldr	r2, [r7, #24]
 8002af6:	4313      	orrs	r3, r2
 8002af8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	69ba      	ldr	r2, [r7, #24]
 8002afe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	f000 80c0 	beq.w	8002c8e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b0e:	2300      	movs	r3, #0
 8002b10:	60fb      	str	r3, [r7, #12]
 8002b12:	4b66      	ldr	r3, [pc, #408]	@ (8002cac <HAL_GPIO_Init+0x324>)
 8002b14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b16:	4a65      	ldr	r2, [pc, #404]	@ (8002cac <HAL_GPIO_Init+0x324>)
 8002b18:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002b1c:	6453      	str	r3, [r2, #68]	@ 0x44
 8002b1e:	4b63      	ldr	r3, [pc, #396]	@ (8002cac <HAL_GPIO_Init+0x324>)
 8002b20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b22:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002b26:	60fb      	str	r3, [r7, #12]
 8002b28:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002b2a:	4a61      	ldr	r2, [pc, #388]	@ (8002cb0 <HAL_GPIO_Init+0x328>)
 8002b2c:	69fb      	ldr	r3, [r7, #28]
 8002b2e:	089b      	lsrs	r3, r3, #2
 8002b30:	3302      	adds	r3, #2
 8002b32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b36:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002b38:	69fb      	ldr	r3, [r7, #28]
 8002b3a:	f003 0303 	and.w	r3, r3, #3
 8002b3e:	009b      	lsls	r3, r3, #2
 8002b40:	220f      	movs	r2, #15
 8002b42:	fa02 f303 	lsl.w	r3, r2, r3
 8002b46:	43db      	mvns	r3, r3
 8002b48:	69ba      	ldr	r2, [r7, #24]
 8002b4a:	4013      	ands	r3, r2
 8002b4c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	4a58      	ldr	r2, [pc, #352]	@ (8002cb4 <HAL_GPIO_Init+0x32c>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d037      	beq.n	8002bc6 <HAL_GPIO_Init+0x23e>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	4a57      	ldr	r2, [pc, #348]	@ (8002cb8 <HAL_GPIO_Init+0x330>)
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d031      	beq.n	8002bc2 <HAL_GPIO_Init+0x23a>
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	4a56      	ldr	r2, [pc, #344]	@ (8002cbc <HAL_GPIO_Init+0x334>)
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d02b      	beq.n	8002bbe <HAL_GPIO_Init+0x236>
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	4a55      	ldr	r2, [pc, #340]	@ (8002cc0 <HAL_GPIO_Init+0x338>)
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d025      	beq.n	8002bba <HAL_GPIO_Init+0x232>
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	4a54      	ldr	r2, [pc, #336]	@ (8002cc4 <HAL_GPIO_Init+0x33c>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d01f      	beq.n	8002bb6 <HAL_GPIO_Init+0x22e>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	4a53      	ldr	r2, [pc, #332]	@ (8002cc8 <HAL_GPIO_Init+0x340>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d019      	beq.n	8002bb2 <HAL_GPIO_Init+0x22a>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	4a52      	ldr	r2, [pc, #328]	@ (8002ccc <HAL_GPIO_Init+0x344>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d013      	beq.n	8002bae <HAL_GPIO_Init+0x226>
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	4a51      	ldr	r2, [pc, #324]	@ (8002cd0 <HAL_GPIO_Init+0x348>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d00d      	beq.n	8002baa <HAL_GPIO_Init+0x222>
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	4a50      	ldr	r2, [pc, #320]	@ (8002cd4 <HAL_GPIO_Init+0x34c>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d007      	beq.n	8002ba6 <HAL_GPIO_Init+0x21e>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	4a4f      	ldr	r2, [pc, #316]	@ (8002cd8 <HAL_GPIO_Init+0x350>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d101      	bne.n	8002ba2 <HAL_GPIO_Init+0x21a>
 8002b9e:	2309      	movs	r3, #9
 8002ba0:	e012      	b.n	8002bc8 <HAL_GPIO_Init+0x240>
 8002ba2:	230a      	movs	r3, #10
 8002ba4:	e010      	b.n	8002bc8 <HAL_GPIO_Init+0x240>
 8002ba6:	2308      	movs	r3, #8
 8002ba8:	e00e      	b.n	8002bc8 <HAL_GPIO_Init+0x240>
 8002baa:	2307      	movs	r3, #7
 8002bac:	e00c      	b.n	8002bc8 <HAL_GPIO_Init+0x240>
 8002bae:	2306      	movs	r3, #6
 8002bb0:	e00a      	b.n	8002bc8 <HAL_GPIO_Init+0x240>
 8002bb2:	2305      	movs	r3, #5
 8002bb4:	e008      	b.n	8002bc8 <HAL_GPIO_Init+0x240>
 8002bb6:	2304      	movs	r3, #4
 8002bb8:	e006      	b.n	8002bc8 <HAL_GPIO_Init+0x240>
 8002bba:	2303      	movs	r3, #3
 8002bbc:	e004      	b.n	8002bc8 <HAL_GPIO_Init+0x240>
 8002bbe:	2302      	movs	r3, #2
 8002bc0:	e002      	b.n	8002bc8 <HAL_GPIO_Init+0x240>
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	e000      	b.n	8002bc8 <HAL_GPIO_Init+0x240>
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	69fa      	ldr	r2, [r7, #28]
 8002bca:	f002 0203 	and.w	r2, r2, #3
 8002bce:	0092      	lsls	r2, r2, #2
 8002bd0:	4093      	lsls	r3, r2
 8002bd2:	69ba      	ldr	r2, [r7, #24]
 8002bd4:	4313      	orrs	r3, r2
 8002bd6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002bd8:	4935      	ldr	r1, [pc, #212]	@ (8002cb0 <HAL_GPIO_Init+0x328>)
 8002bda:	69fb      	ldr	r3, [r7, #28]
 8002bdc:	089b      	lsrs	r3, r3, #2
 8002bde:	3302      	adds	r3, #2
 8002be0:	69ba      	ldr	r2, [r7, #24]
 8002be2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002be6:	4b3d      	ldr	r3, [pc, #244]	@ (8002cdc <HAL_GPIO_Init+0x354>)
 8002be8:	689b      	ldr	r3, [r3, #8]
 8002bea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bec:	693b      	ldr	r3, [r7, #16]
 8002bee:	43db      	mvns	r3, r3
 8002bf0:	69ba      	ldr	r2, [r7, #24]
 8002bf2:	4013      	ands	r3, r2
 8002bf4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d003      	beq.n	8002c0a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002c02:	69ba      	ldr	r2, [r7, #24]
 8002c04:	693b      	ldr	r3, [r7, #16]
 8002c06:	4313      	orrs	r3, r2
 8002c08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002c0a:	4a34      	ldr	r2, [pc, #208]	@ (8002cdc <HAL_GPIO_Init+0x354>)
 8002c0c:	69bb      	ldr	r3, [r7, #24]
 8002c0e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002c10:	4b32      	ldr	r3, [pc, #200]	@ (8002cdc <HAL_GPIO_Init+0x354>)
 8002c12:	68db      	ldr	r3, [r3, #12]
 8002c14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c16:	693b      	ldr	r3, [r7, #16]
 8002c18:	43db      	mvns	r3, r3
 8002c1a:	69ba      	ldr	r2, [r7, #24]
 8002c1c:	4013      	ands	r3, r2
 8002c1e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d003      	beq.n	8002c34 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002c2c:	69ba      	ldr	r2, [r7, #24]
 8002c2e:	693b      	ldr	r3, [r7, #16]
 8002c30:	4313      	orrs	r3, r2
 8002c32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002c34:	4a29      	ldr	r2, [pc, #164]	@ (8002cdc <HAL_GPIO_Init+0x354>)
 8002c36:	69bb      	ldr	r3, [r7, #24]
 8002c38:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002c3a:	4b28      	ldr	r3, [pc, #160]	@ (8002cdc <HAL_GPIO_Init+0x354>)
 8002c3c:	685b      	ldr	r3, [r3, #4]
 8002c3e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c40:	693b      	ldr	r3, [r7, #16]
 8002c42:	43db      	mvns	r3, r3
 8002c44:	69ba      	ldr	r2, [r7, #24]
 8002c46:	4013      	ands	r3, r2
 8002c48:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	685b      	ldr	r3, [r3, #4]
 8002c4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d003      	beq.n	8002c5e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002c56:	69ba      	ldr	r2, [r7, #24]
 8002c58:	693b      	ldr	r3, [r7, #16]
 8002c5a:	4313      	orrs	r3, r2
 8002c5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002c5e:	4a1f      	ldr	r2, [pc, #124]	@ (8002cdc <HAL_GPIO_Init+0x354>)
 8002c60:	69bb      	ldr	r3, [r7, #24]
 8002c62:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002c64:	4b1d      	ldr	r3, [pc, #116]	@ (8002cdc <HAL_GPIO_Init+0x354>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c6a:	693b      	ldr	r3, [r7, #16]
 8002c6c:	43db      	mvns	r3, r3
 8002c6e:	69ba      	ldr	r2, [r7, #24]
 8002c70:	4013      	ands	r3, r2
 8002c72:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d003      	beq.n	8002c88 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002c80:	69ba      	ldr	r2, [r7, #24]
 8002c82:	693b      	ldr	r3, [r7, #16]
 8002c84:	4313      	orrs	r3, r2
 8002c86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002c88:	4a14      	ldr	r2, [pc, #80]	@ (8002cdc <HAL_GPIO_Init+0x354>)
 8002c8a:	69bb      	ldr	r3, [r7, #24]
 8002c8c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c8e:	69fb      	ldr	r3, [r7, #28]
 8002c90:	3301      	adds	r3, #1
 8002c92:	61fb      	str	r3, [r7, #28]
 8002c94:	69fb      	ldr	r3, [r7, #28]
 8002c96:	2b0f      	cmp	r3, #15
 8002c98:	f67f ae84 	bls.w	80029a4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002c9c:	bf00      	nop
 8002c9e:	bf00      	nop
 8002ca0:	3724      	adds	r7, #36	@ 0x24
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca8:	4770      	bx	lr
 8002caa:	bf00      	nop
 8002cac:	40023800 	.word	0x40023800
 8002cb0:	40013800 	.word	0x40013800
 8002cb4:	40020000 	.word	0x40020000
 8002cb8:	40020400 	.word	0x40020400
 8002cbc:	40020800 	.word	0x40020800
 8002cc0:	40020c00 	.word	0x40020c00
 8002cc4:	40021000 	.word	0x40021000
 8002cc8:	40021400 	.word	0x40021400
 8002ccc:	40021800 	.word	0x40021800
 8002cd0:	40021c00 	.word	0x40021c00
 8002cd4:	40022000 	.word	0x40022000
 8002cd8:	40022400 	.word	0x40022400
 8002cdc:	40013c00 	.word	0x40013c00

08002ce0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	b085      	sub	sp, #20
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
 8002ce8:	460b      	mov	r3, r1
 8002cea:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	691a      	ldr	r2, [r3, #16]
 8002cf0:	887b      	ldrh	r3, [r7, #2]
 8002cf2:	4013      	ands	r3, r2
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d002      	beq.n	8002cfe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002cf8:	2301      	movs	r3, #1
 8002cfa:	73fb      	strb	r3, [r7, #15]
 8002cfc:	e001      	b.n	8002d02 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002cfe:	2300      	movs	r3, #0
 8002d00:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002d02:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d04:	4618      	mov	r0, r3
 8002d06:	3714      	adds	r7, #20
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0e:	4770      	bx	lr

08002d10 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b084      	sub	sp, #16
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d101      	bne.n	8002d22 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	e12b      	b.n	8002f7a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002d28:	b2db      	uxtb	r3, r3
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d106      	bne.n	8002d3c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2200      	movs	r2, #0
 8002d32:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002d36:	6878      	ldr	r0, [r7, #4]
 8002d38:	f7ff fab2 	bl	80022a0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2224      	movs	r2, #36	@ 0x24
 8002d40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	681a      	ldr	r2, [r3, #0]
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f022 0201 	bic.w	r2, r2, #1
 8002d52:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	681a      	ldr	r2, [r3, #0]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002d62:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	681a      	ldr	r2, [r3, #0]
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002d72:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002d74:	f002 ff16 	bl	8005ba4 <HAL_RCC_GetPCLK1Freq>
 8002d78:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	4a81      	ldr	r2, [pc, #516]	@ (8002f84 <HAL_I2C_Init+0x274>)
 8002d80:	4293      	cmp	r3, r2
 8002d82:	d807      	bhi.n	8002d94 <HAL_I2C_Init+0x84>
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	4a80      	ldr	r2, [pc, #512]	@ (8002f88 <HAL_I2C_Init+0x278>)
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	bf94      	ite	ls
 8002d8c:	2301      	movls	r3, #1
 8002d8e:	2300      	movhi	r3, #0
 8002d90:	b2db      	uxtb	r3, r3
 8002d92:	e006      	b.n	8002da2 <HAL_I2C_Init+0x92>
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	4a7d      	ldr	r2, [pc, #500]	@ (8002f8c <HAL_I2C_Init+0x27c>)
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	bf94      	ite	ls
 8002d9c:	2301      	movls	r3, #1
 8002d9e:	2300      	movhi	r3, #0
 8002da0:	b2db      	uxtb	r3, r3
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d001      	beq.n	8002daa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002da6:	2301      	movs	r3, #1
 8002da8:	e0e7      	b.n	8002f7a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	4a78      	ldr	r2, [pc, #480]	@ (8002f90 <HAL_I2C_Init+0x280>)
 8002dae:	fba2 2303 	umull	r2, r3, r2, r3
 8002db2:	0c9b      	lsrs	r3, r3, #18
 8002db4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	68ba      	ldr	r2, [r7, #8]
 8002dc6:	430a      	orrs	r2, r1
 8002dc8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	6a1b      	ldr	r3, [r3, #32]
 8002dd0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	4a6a      	ldr	r2, [pc, #424]	@ (8002f84 <HAL_I2C_Init+0x274>)
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d802      	bhi.n	8002de4 <HAL_I2C_Init+0xd4>
 8002dde:	68bb      	ldr	r3, [r7, #8]
 8002de0:	3301      	adds	r3, #1
 8002de2:	e009      	b.n	8002df8 <HAL_I2C_Init+0xe8>
 8002de4:	68bb      	ldr	r3, [r7, #8]
 8002de6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002dea:	fb02 f303 	mul.w	r3, r2, r3
 8002dee:	4a69      	ldr	r2, [pc, #420]	@ (8002f94 <HAL_I2C_Init+0x284>)
 8002df0:	fba2 2303 	umull	r2, r3, r2, r3
 8002df4:	099b      	lsrs	r3, r3, #6
 8002df6:	3301      	adds	r3, #1
 8002df8:	687a      	ldr	r2, [r7, #4]
 8002dfa:	6812      	ldr	r2, [r2, #0]
 8002dfc:	430b      	orrs	r3, r1
 8002dfe:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	69db      	ldr	r3, [r3, #28]
 8002e06:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002e0a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	685b      	ldr	r3, [r3, #4]
 8002e12:	495c      	ldr	r1, [pc, #368]	@ (8002f84 <HAL_I2C_Init+0x274>)
 8002e14:	428b      	cmp	r3, r1
 8002e16:	d819      	bhi.n	8002e4c <HAL_I2C_Init+0x13c>
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	1e59      	subs	r1, r3, #1
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	005b      	lsls	r3, r3, #1
 8002e22:	fbb1 f3f3 	udiv	r3, r1, r3
 8002e26:	1c59      	adds	r1, r3, #1
 8002e28:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002e2c:	400b      	ands	r3, r1
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d00a      	beq.n	8002e48 <HAL_I2C_Init+0x138>
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	1e59      	subs	r1, r3, #1
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	685b      	ldr	r3, [r3, #4]
 8002e3a:	005b      	lsls	r3, r3, #1
 8002e3c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002e40:	3301      	adds	r3, #1
 8002e42:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e46:	e051      	b.n	8002eec <HAL_I2C_Init+0x1dc>
 8002e48:	2304      	movs	r3, #4
 8002e4a:	e04f      	b.n	8002eec <HAL_I2C_Init+0x1dc>
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	689b      	ldr	r3, [r3, #8]
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d111      	bne.n	8002e78 <HAL_I2C_Init+0x168>
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	1e58      	subs	r0, r3, #1
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6859      	ldr	r1, [r3, #4]
 8002e5c:	460b      	mov	r3, r1
 8002e5e:	005b      	lsls	r3, r3, #1
 8002e60:	440b      	add	r3, r1
 8002e62:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e66:	3301      	adds	r3, #1
 8002e68:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	bf0c      	ite	eq
 8002e70:	2301      	moveq	r3, #1
 8002e72:	2300      	movne	r3, #0
 8002e74:	b2db      	uxtb	r3, r3
 8002e76:	e012      	b.n	8002e9e <HAL_I2C_Init+0x18e>
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	1e58      	subs	r0, r3, #1
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6859      	ldr	r1, [r3, #4]
 8002e80:	460b      	mov	r3, r1
 8002e82:	009b      	lsls	r3, r3, #2
 8002e84:	440b      	add	r3, r1
 8002e86:	0099      	lsls	r1, r3, #2
 8002e88:	440b      	add	r3, r1
 8002e8a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e8e:	3301      	adds	r3, #1
 8002e90:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	bf0c      	ite	eq
 8002e98:	2301      	moveq	r3, #1
 8002e9a:	2300      	movne	r3, #0
 8002e9c:	b2db      	uxtb	r3, r3
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d001      	beq.n	8002ea6 <HAL_I2C_Init+0x196>
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	e022      	b.n	8002eec <HAL_I2C_Init+0x1dc>
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	689b      	ldr	r3, [r3, #8]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d10e      	bne.n	8002ecc <HAL_I2C_Init+0x1bc>
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	1e58      	subs	r0, r3, #1
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6859      	ldr	r1, [r3, #4]
 8002eb6:	460b      	mov	r3, r1
 8002eb8:	005b      	lsls	r3, r3, #1
 8002eba:	440b      	add	r3, r1
 8002ebc:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ec0:	3301      	adds	r3, #1
 8002ec2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ec6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002eca:	e00f      	b.n	8002eec <HAL_I2C_Init+0x1dc>
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	1e58      	subs	r0, r3, #1
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6859      	ldr	r1, [r3, #4]
 8002ed4:	460b      	mov	r3, r1
 8002ed6:	009b      	lsls	r3, r3, #2
 8002ed8:	440b      	add	r3, r1
 8002eda:	0099      	lsls	r1, r3, #2
 8002edc:	440b      	add	r3, r1
 8002ede:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ee2:	3301      	adds	r3, #1
 8002ee4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ee8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002eec:	6879      	ldr	r1, [r7, #4]
 8002eee:	6809      	ldr	r1, [r1, #0]
 8002ef0:	4313      	orrs	r3, r2
 8002ef2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	69da      	ldr	r2, [r3, #28]
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6a1b      	ldr	r3, [r3, #32]
 8002f06:	431a      	orrs	r2, r3
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	430a      	orrs	r2, r1
 8002f0e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	689b      	ldr	r3, [r3, #8]
 8002f16:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002f1a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002f1e:	687a      	ldr	r2, [r7, #4]
 8002f20:	6911      	ldr	r1, [r2, #16]
 8002f22:	687a      	ldr	r2, [r7, #4]
 8002f24:	68d2      	ldr	r2, [r2, #12]
 8002f26:	4311      	orrs	r1, r2
 8002f28:	687a      	ldr	r2, [r7, #4]
 8002f2a:	6812      	ldr	r2, [r2, #0]
 8002f2c:	430b      	orrs	r3, r1
 8002f2e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	68db      	ldr	r3, [r3, #12]
 8002f36:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	695a      	ldr	r2, [r3, #20]
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	699b      	ldr	r3, [r3, #24]
 8002f42:	431a      	orrs	r2, r3
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	430a      	orrs	r2, r1
 8002f4a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	681a      	ldr	r2, [r3, #0]
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f042 0201 	orr.w	r2, r2, #1
 8002f5a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2200      	movs	r2, #0
 8002f60:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2220      	movs	r2, #32
 8002f66:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2200      	movs	r2, #0
 8002f74:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002f78:	2300      	movs	r3, #0
}
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	3710      	adds	r7, #16
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bd80      	pop	{r7, pc}
 8002f82:	bf00      	nop
 8002f84:	000186a0 	.word	0x000186a0
 8002f88:	001e847f 	.word	0x001e847f
 8002f8c:	003d08ff 	.word	0x003d08ff
 8002f90:	431bde83 	.word	0x431bde83
 8002f94:	10624dd3 	.word	0x10624dd3

08002f98 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b088      	sub	sp, #32
 8002f9c:	af02      	add	r7, sp, #8
 8002f9e:	60f8      	str	r0, [r7, #12]
 8002fa0:	4608      	mov	r0, r1
 8002fa2:	4611      	mov	r1, r2
 8002fa4:	461a      	mov	r2, r3
 8002fa6:	4603      	mov	r3, r0
 8002fa8:	817b      	strh	r3, [r7, #10]
 8002faa:	460b      	mov	r3, r1
 8002fac:	813b      	strh	r3, [r7, #8]
 8002fae:	4613      	mov	r3, r2
 8002fb0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002fb2:	f7ff fba7 	bl	8002704 <HAL_GetTick>
 8002fb6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002fbe:	b2db      	uxtb	r3, r3
 8002fc0:	2b20      	cmp	r3, #32
 8002fc2:	f040 80d9 	bne.w	8003178 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002fc6:	697b      	ldr	r3, [r7, #20]
 8002fc8:	9300      	str	r3, [sp, #0]
 8002fca:	2319      	movs	r3, #25
 8002fcc:	2201      	movs	r2, #1
 8002fce:	496d      	ldr	r1, [pc, #436]	@ (8003184 <HAL_I2C_Mem_Write+0x1ec>)
 8002fd0:	68f8      	ldr	r0, [r7, #12]
 8002fd2:	f000 fc8b 	bl	80038ec <I2C_WaitOnFlagUntilTimeout>
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d001      	beq.n	8002fe0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002fdc:	2302      	movs	r3, #2
 8002fde:	e0cc      	b.n	800317a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002fe6:	2b01      	cmp	r3, #1
 8002fe8:	d101      	bne.n	8002fee <HAL_I2C_Mem_Write+0x56>
 8002fea:	2302      	movs	r3, #2
 8002fec:	e0c5      	b.n	800317a <HAL_I2C_Mem_Write+0x1e2>
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	2201      	movs	r2, #1
 8002ff2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f003 0301 	and.w	r3, r3, #1
 8003000:	2b01      	cmp	r3, #1
 8003002:	d007      	beq.n	8003014 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	681a      	ldr	r2, [r3, #0]
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f042 0201 	orr.w	r2, r2, #1
 8003012:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	681a      	ldr	r2, [r3, #0]
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003022:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	2221      	movs	r2, #33	@ 0x21
 8003028:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	2240      	movs	r2, #64	@ 0x40
 8003030:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	2200      	movs	r2, #0
 8003038:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	6a3a      	ldr	r2, [r7, #32]
 800303e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003044:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800304a:	b29a      	uxth	r2, r3
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	4a4d      	ldr	r2, [pc, #308]	@ (8003188 <HAL_I2C_Mem_Write+0x1f0>)
 8003054:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003056:	88f8      	ldrh	r0, [r7, #6]
 8003058:	893a      	ldrh	r2, [r7, #8]
 800305a:	8979      	ldrh	r1, [r7, #10]
 800305c:	697b      	ldr	r3, [r7, #20]
 800305e:	9301      	str	r3, [sp, #4]
 8003060:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003062:	9300      	str	r3, [sp, #0]
 8003064:	4603      	mov	r3, r0
 8003066:	68f8      	ldr	r0, [r7, #12]
 8003068:	f000 fac2 	bl	80035f0 <I2C_RequestMemoryWrite>
 800306c:	4603      	mov	r3, r0
 800306e:	2b00      	cmp	r3, #0
 8003070:	d052      	beq.n	8003118 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003072:	2301      	movs	r3, #1
 8003074:	e081      	b.n	800317a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003076:	697a      	ldr	r2, [r7, #20]
 8003078:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800307a:	68f8      	ldr	r0, [r7, #12]
 800307c:	f000 fd50 	bl	8003b20 <I2C_WaitOnTXEFlagUntilTimeout>
 8003080:	4603      	mov	r3, r0
 8003082:	2b00      	cmp	r3, #0
 8003084:	d00d      	beq.n	80030a2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800308a:	2b04      	cmp	r3, #4
 800308c:	d107      	bne.n	800309e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	681a      	ldr	r2, [r3, #0]
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800309c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800309e:	2301      	movs	r3, #1
 80030a0:	e06b      	b.n	800317a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030a6:	781a      	ldrb	r2, [r3, #0]
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030b2:	1c5a      	adds	r2, r3, #1
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030bc:	3b01      	subs	r3, #1
 80030be:	b29a      	uxth	r2, r3
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030c8:	b29b      	uxth	r3, r3
 80030ca:	3b01      	subs	r3, #1
 80030cc:	b29a      	uxth	r2, r3
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	695b      	ldr	r3, [r3, #20]
 80030d8:	f003 0304 	and.w	r3, r3, #4
 80030dc:	2b04      	cmp	r3, #4
 80030de:	d11b      	bne.n	8003118 <HAL_I2C_Mem_Write+0x180>
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d017      	beq.n	8003118 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030ec:	781a      	ldrb	r2, [r3, #0]
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030f8:	1c5a      	adds	r2, r3, #1
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003102:	3b01      	subs	r3, #1
 8003104:	b29a      	uxth	r2, r3
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800310e:	b29b      	uxth	r3, r3
 8003110:	3b01      	subs	r3, #1
 8003112:	b29a      	uxth	r2, r3
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800311c:	2b00      	cmp	r3, #0
 800311e:	d1aa      	bne.n	8003076 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003120:	697a      	ldr	r2, [r7, #20]
 8003122:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003124:	68f8      	ldr	r0, [r7, #12]
 8003126:	f000 fd43 	bl	8003bb0 <I2C_WaitOnBTFFlagUntilTimeout>
 800312a:	4603      	mov	r3, r0
 800312c:	2b00      	cmp	r3, #0
 800312e:	d00d      	beq.n	800314c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003134:	2b04      	cmp	r3, #4
 8003136:	d107      	bne.n	8003148 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	681a      	ldr	r2, [r3, #0]
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003146:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003148:	2301      	movs	r3, #1
 800314a:	e016      	b.n	800317a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	681a      	ldr	r2, [r3, #0]
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800315a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	2220      	movs	r2, #32
 8003160:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	2200      	movs	r2, #0
 8003168:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	2200      	movs	r2, #0
 8003170:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003174:	2300      	movs	r3, #0
 8003176:	e000      	b.n	800317a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003178:	2302      	movs	r3, #2
  }
}
 800317a:	4618      	mov	r0, r3
 800317c:	3718      	adds	r7, #24
 800317e:	46bd      	mov	sp, r7
 8003180:	bd80      	pop	{r7, pc}
 8003182:	bf00      	nop
 8003184:	00100002 	.word	0x00100002
 8003188:	ffff0000 	.word	0xffff0000

0800318c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b08c      	sub	sp, #48	@ 0x30
 8003190:	af02      	add	r7, sp, #8
 8003192:	60f8      	str	r0, [r7, #12]
 8003194:	4608      	mov	r0, r1
 8003196:	4611      	mov	r1, r2
 8003198:	461a      	mov	r2, r3
 800319a:	4603      	mov	r3, r0
 800319c:	817b      	strh	r3, [r7, #10]
 800319e:	460b      	mov	r3, r1
 80031a0:	813b      	strh	r3, [r7, #8]
 80031a2:	4613      	mov	r3, r2
 80031a4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80031a6:	f7ff faad 	bl	8002704 <HAL_GetTick>
 80031aa:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80031b2:	b2db      	uxtb	r3, r3
 80031b4:	2b20      	cmp	r3, #32
 80031b6:	f040 8214 	bne.w	80035e2 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80031ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031bc:	9300      	str	r3, [sp, #0]
 80031be:	2319      	movs	r3, #25
 80031c0:	2201      	movs	r2, #1
 80031c2:	497b      	ldr	r1, [pc, #492]	@ (80033b0 <HAL_I2C_Mem_Read+0x224>)
 80031c4:	68f8      	ldr	r0, [r7, #12]
 80031c6:	f000 fb91 	bl	80038ec <I2C_WaitOnFlagUntilTimeout>
 80031ca:	4603      	mov	r3, r0
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d001      	beq.n	80031d4 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80031d0:	2302      	movs	r3, #2
 80031d2:	e207      	b.n	80035e4 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80031da:	2b01      	cmp	r3, #1
 80031dc:	d101      	bne.n	80031e2 <HAL_I2C_Mem_Read+0x56>
 80031de:	2302      	movs	r3, #2
 80031e0:	e200      	b.n	80035e4 <HAL_I2C_Mem_Read+0x458>
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	2201      	movs	r2, #1
 80031e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f003 0301 	and.w	r3, r3, #1
 80031f4:	2b01      	cmp	r3, #1
 80031f6:	d007      	beq.n	8003208 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	681a      	ldr	r2, [r3, #0]
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f042 0201 	orr.w	r2, r2, #1
 8003206:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	681a      	ldr	r2, [r3, #0]
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003216:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	2222      	movs	r2, #34	@ 0x22
 800321c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	2240      	movs	r2, #64	@ 0x40
 8003224:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	2200      	movs	r2, #0
 800322c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003232:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8003238:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800323e:	b29a      	uxth	r2, r3
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	4a5b      	ldr	r2, [pc, #364]	@ (80033b4 <HAL_I2C_Mem_Read+0x228>)
 8003248:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800324a:	88f8      	ldrh	r0, [r7, #6]
 800324c:	893a      	ldrh	r2, [r7, #8]
 800324e:	8979      	ldrh	r1, [r7, #10]
 8003250:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003252:	9301      	str	r3, [sp, #4]
 8003254:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003256:	9300      	str	r3, [sp, #0]
 8003258:	4603      	mov	r3, r0
 800325a:	68f8      	ldr	r0, [r7, #12]
 800325c:	f000 fa5e 	bl	800371c <I2C_RequestMemoryRead>
 8003260:	4603      	mov	r3, r0
 8003262:	2b00      	cmp	r3, #0
 8003264:	d001      	beq.n	800326a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003266:	2301      	movs	r3, #1
 8003268:	e1bc      	b.n	80035e4 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800326e:	2b00      	cmp	r3, #0
 8003270:	d113      	bne.n	800329a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003272:	2300      	movs	r3, #0
 8003274:	623b      	str	r3, [r7, #32]
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	695b      	ldr	r3, [r3, #20]
 800327c:	623b      	str	r3, [r7, #32]
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	699b      	ldr	r3, [r3, #24]
 8003284:	623b      	str	r3, [r7, #32]
 8003286:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	681a      	ldr	r2, [r3, #0]
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003296:	601a      	str	r2, [r3, #0]
 8003298:	e190      	b.n	80035bc <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800329e:	2b01      	cmp	r3, #1
 80032a0:	d11b      	bne.n	80032da <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	681a      	ldr	r2, [r3, #0]
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80032b0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80032b2:	2300      	movs	r3, #0
 80032b4:	61fb      	str	r3, [r7, #28]
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	695b      	ldr	r3, [r3, #20]
 80032bc:	61fb      	str	r3, [r7, #28]
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	699b      	ldr	r3, [r3, #24]
 80032c4:	61fb      	str	r3, [r7, #28]
 80032c6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	681a      	ldr	r2, [r3, #0]
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80032d6:	601a      	str	r2, [r3, #0]
 80032d8:	e170      	b.n	80035bc <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032de:	2b02      	cmp	r3, #2
 80032e0:	d11b      	bne.n	800331a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	681a      	ldr	r2, [r3, #0]
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80032f0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	681a      	ldr	r2, [r3, #0]
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003300:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003302:	2300      	movs	r3, #0
 8003304:	61bb      	str	r3, [r7, #24]
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	695b      	ldr	r3, [r3, #20]
 800330c:	61bb      	str	r3, [r7, #24]
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	699b      	ldr	r3, [r3, #24]
 8003314:	61bb      	str	r3, [r7, #24]
 8003316:	69bb      	ldr	r3, [r7, #24]
 8003318:	e150      	b.n	80035bc <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800331a:	2300      	movs	r3, #0
 800331c:	617b      	str	r3, [r7, #20]
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	695b      	ldr	r3, [r3, #20]
 8003324:	617b      	str	r3, [r7, #20]
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	699b      	ldr	r3, [r3, #24]
 800332c:	617b      	str	r3, [r7, #20]
 800332e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003330:	e144      	b.n	80035bc <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003336:	2b03      	cmp	r3, #3
 8003338:	f200 80f1 	bhi.w	800351e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003340:	2b01      	cmp	r3, #1
 8003342:	d123      	bne.n	800338c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003344:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003346:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003348:	68f8      	ldr	r0, [r7, #12]
 800334a:	f000 fc79 	bl	8003c40 <I2C_WaitOnRXNEFlagUntilTimeout>
 800334e:	4603      	mov	r3, r0
 8003350:	2b00      	cmp	r3, #0
 8003352:	d001      	beq.n	8003358 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003354:	2301      	movs	r3, #1
 8003356:	e145      	b.n	80035e4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	691a      	ldr	r2, [r3, #16]
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003362:	b2d2      	uxtb	r2, r2
 8003364:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800336a:	1c5a      	adds	r2, r3, #1
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003374:	3b01      	subs	r3, #1
 8003376:	b29a      	uxth	r2, r3
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003380:	b29b      	uxth	r3, r3
 8003382:	3b01      	subs	r3, #1
 8003384:	b29a      	uxth	r2, r3
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800338a:	e117      	b.n	80035bc <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003390:	2b02      	cmp	r3, #2
 8003392:	d14e      	bne.n	8003432 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003394:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003396:	9300      	str	r3, [sp, #0]
 8003398:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800339a:	2200      	movs	r2, #0
 800339c:	4906      	ldr	r1, [pc, #24]	@ (80033b8 <HAL_I2C_Mem_Read+0x22c>)
 800339e:	68f8      	ldr	r0, [r7, #12]
 80033a0:	f000 faa4 	bl	80038ec <I2C_WaitOnFlagUntilTimeout>
 80033a4:	4603      	mov	r3, r0
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d008      	beq.n	80033bc <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80033aa:	2301      	movs	r3, #1
 80033ac:	e11a      	b.n	80035e4 <HAL_I2C_Mem_Read+0x458>
 80033ae:	bf00      	nop
 80033b0:	00100002 	.word	0x00100002
 80033b4:	ffff0000 	.word	0xffff0000
 80033b8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	681a      	ldr	r2, [r3, #0]
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80033ca:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	691a      	ldr	r2, [r3, #16]
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033d6:	b2d2      	uxtb	r2, r2
 80033d8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033de:	1c5a      	adds	r2, r3, #1
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033e8:	3b01      	subs	r3, #1
 80033ea:	b29a      	uxth	r2, r3
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033f4:	b29b      	uxth	r3, r3
 80033f6:	3b01      	subs	r3, #1
 80033f8:	b29a      	uxth	r2, r3
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	691a      	ldr	r2, [r3, #16]
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003408:	b2d2      	uxtb	r2, r2
 800340a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003410:	1c5a      	adds	r2, r3, #1
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800341a:	3b01      	subs	r3, #1
 800341c:	b29a      	uxth	r2, r3
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003426:	b29b      	uxth	r3, r3
 8003428:	3b01      	subs	r3, #1
 800342a:	b29a      	uxth	r2, r3
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003430:	e0c4      	b.n	80035bc <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003432:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003434:	9300      	str	r3, [sp, #0]
 8003436:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003438:	2200      	movs	r2, #0
 800343a:	496c      	ldr	r1, [pc, #432]	@ (80035ec <HAL_I2C_Mem_Read+0x460>)
 800343c:	68f8      	ldr	r0, [r7, #12]
 800343e:	f000 fa55 	bl	80038ec <I2C_WaitOnFlagUntilTimeout>
 8003442:	4603      	mov	r3, r0
 8003444:	2b00      	cmp	r3, #0
 8003446:	d001      	beq.n	800344c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003448:	2301      	movs	r3, #1
 800344a:	e0cb      	b.n	80035e4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	681a      	ldr	r2, [r3, #0]
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800345a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	691a      	ldr	r2, [r3, #16]
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003466:	b2d2      	uxtb	r2, r2
 8003468:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800346e:	1c5a      	adds	r2, r3, #1
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003478:	3b01      	subs	r3, #1
 800347a:	b29a      	uxth	r2, r3
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003484:	b29b      	uxth	r3, r3
 8003486:	3b01      	subs	r3, #1
 8003488:	b29a      	uxth	r2, r3
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800348e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003490:	9300      	str	r3, [sp, #0]
 8003492:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003494:	2200      	movs	r2, #0
 8003496:	4955      	ldr	r1, [pc, #340]	@ (80035ec <HAL_I2C_Mem_Read+0x460>)
 8003498:	68f8      	ldr	r0, [r7, #12]
 800349a:	f000 fa27 	bl	80038ec <I2C_WaitOnFlagUntilTimeout>
 800349e:	4603      	mov	r3, r0
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d001      	beq.n	80034a8 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80034a4:	2301      	movs	r3, #1
 80034a6:	e09d      	b.n	80035e4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	681a      	ldr	r2, [r3, #0]
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80034b6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	691a      	ldr	r2, [r3, #16]
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034c2:	b2d2      	uxtb	r2, r2
 80034c4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034ca:	1c5a      	adds	r2, r3, #1
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034d4:	3b01      	subs	r3, #1
 80034d6:	b29a      	uxth	r2, r3
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034e0:	b29b      	uxth	r3, r3
 80034e2:	3b01      	subs	r3, #1
 80034e4:	b29a      	uxth	r2, r3
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	691a      	ldr	r2, [r3, #16]
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034f4:	b2d2      	uxtb	r2, r2
 80034f6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034fc:	1c5a      	adds	r2, r3, #1
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003506:	3b01      	subs	r3, #1
 8003508:	b29a      	uxth	r2, r3
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003512:	b29b      	uxth	r3, r3
 8003514:	3b01      	subs	r3, #1
 8003516:	b29a      	uxth	r2, r3
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800351c:	e04e      	b.n	80035bc <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800351e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003520:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003522:	68f8      	ldr	r0, [r7, #12]
 8003524:	f000 fb8c 	bl	8003c40 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003528:	4603      	mov	r3, r0
 800352a:	2b00      	cmp	r3, #0
 800352c:	d001      	beq.n	8003532 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800352e:	2301      	movs	r3, #1
 8003530:	e058      	b.n	80035e4 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	691a      	ldr	r2, [r3, #16]
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800353c:	b2d2      	uxtb	r2, r2
 800353e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003544:	1c5a      	adds	r2, r3, #1
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800354e:	3b01      	subs	r3, #1
 8003550:	b29a      	uxth	r2, r3
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800355a:	b29b      	uxth	r3, r3
 800355c:	3b01      	subs	r3, #1
 800355e:	b29a      	uxth	r2, r3
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	695b      	ldr	r3, [r3, #20]
 800356a:	f003 0304 	and.w	r3, r3, #4
 800356e:	2b04      	cmp	r3, #4
 8003570:	d124      	bne.n	80035bc <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003576:	2b03      	cmp	r3, #3
 8003578:	d107      	bne.n	800358a <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	681a      	ldr	r2, [r3, #0]
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003588:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	691a      	ldr	r2, [r3, #16]
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003594:	b2d2      	uxtb	r2, r2
 8003596:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800359c:	1c5a      	adds	r2, r3, #1
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035a6:	3b01      	subs	r3, #1
 80035a8:	b29a      	uxth	r2, r3
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035b2:	b29b      	uxth	r3, r3
 80035b4:	3b01      	subs	r3, #1
 80035b6:	b29a      	uxth	r2, r3
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	f47f aeb6 	bne.w	8003332 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	2220      	movs	r2, #32
 80035ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	2200      	movs	r2, #0
 80035d2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	2200      	movs	r2, #0
 80035da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80035de:	2300      	movs	r3, #0
 80035e0:	e000      	b.n	80035e4 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 80035e2:	2302      	movs	r3, #2
  }
}
 80035e4:	4618      	mov	r0, r3
 80035e6:	3728      	adds	r7, #40	@ 0x28
 80035e8:	46bd      	mov	sp, r7
 80035ea:	bd80      	pop	{r7, pc}
 80035ec:	00010004 	.word	0x00010004

080035f0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b088      	sub	sp, #32
 80035f4:	af02      	add	r7, sp, #8
 80035f6:	60f8      	str	r0, [r7, #12]
 80035f8:	4608      	mov	r0, r1
 80035fa:	4611      	mov	r1, r2
 80035fc:	461a      	mov	r2, r3
 80035fe:	4603      	mov	r3, r0
 8003600:	817b      	strh	r3, [r7, #10]
 8003602:	460b      	mov	r3, r1
 8003604:	813b      	strh	r3, [r7, #8]
 8003606:	4613      	mov	r3, r2
 8003608:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	681a      	ldr	r2, [r3, #0]
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003618:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800361a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800361c:	9300      	str	r3, [sp, #0]
 800361e:	6a3b      	ldr	r3, [r7, #32]
 8003620:	2200      	movs	r2, #0
 8003622:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003626:	68f8      	ldr	r0, [r7, #12]
 8003628:	f000 f960 	bl	80038ec <I2C_WaitOnFlagUntilTimeout>
 800362c:	4603      	mov	r3, r0
 800362e:	2b00      	cmp	r3, #0
 8003630:	d00d      	beq.n	800364e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800363c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003640:	d103      	bne.n	800364a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003648:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800364a:	2303      	movs	r3, #3
 800364c:	e05f      	b.n	800370e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800364e:	897b      	ldrh	r3, [r7, #10]
 8003650:	b2db      	uxtb	r3, r3
 8003652:	461a      	mov	r2, r3
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800365c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800365e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003660:	6a3a      	ldr	r2, [r7, #32]
 8003662:	492d      	ldr	r1, [pc, #180]	@ (8003718 <I2C_RequestMemoryWrite+0x128>)
 8003664:	68f8      	ldr	r0, [r7, #12]
 8003666:	f000 f9bb 	bl	80039e0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800366a:	4603      	mov	r3, r0
 800366c:	2b00      	cmp	r3, #0
 800366e:	d001      	beq.n	8003674 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003670:	2301      	movs	r3, #1
 8003672:	e04c      	b.n	800370e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003674:	2300      	movs	r3, #0
 8003676:	617b      	str	r3, [r7, #20]
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	695b      	ldr	r3, [r3, #20]
 800367e:	617b      	str	r3, [r7, #20]
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	699b      	ldr	r3, [r3, #24]
 8003686:	617b      	str	r3, [r7, #20]
 8003688:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800368a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800368c:	6a39      	ldr	r1, [r7, #32]
 800368e:	68f8      	ldr	r0, [r7, #12]
 8003690:	f000 fa46 	bl	8003b20 <I2C_WaitOnTXEFlagUntilTimeout>
 8003694:	4603      	mov	r3, r0
 8003696:	2b00      	cmp	r3, #0
 8003698:	d00d      	beq.n	80036b6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800369e:	2b04      	cmp	r3, #4
 80036a0:	d107      	bne.n	80036b2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	681a      	ldr	r2, [r3, #0]
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80036b0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80036b2:	2301      	movs	r3, #1
 80036b4:	e02b      	b.n	800370e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80036b6:	88fb      	ldrh	r3, [r7, #6]
 80036b8:	2b01      	cmp	r3, #1
 80036ba:	d105      	bne.n	80036c8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80036bc:	893b      	ldrh	r3, [r7, #8]
 80036be:	b2da      	uxtb	r2, r3
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	611a      	str	r2, [r3, #16]
 80036c6:	e021      	b.n	800370c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80036c8:	893b      	ldrh	r3, [r7, #8]
 80036ca:	0a1b      	lsrs	r3, r3, #8
 80036cc:	b29b      	uxth	r3, r3
 80036ce:	b2da      	uxtb	r2, r3
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80036d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80036d8:	6a39      	ldr	r1, [r7, #32]
 80036da:	68f8      	ldr	r0, [r7, #12]
 80036dc:	f000 fa20 	bl	8003b20 <I2C_WaitOnTXEFlagUntilTimeout>
 80036e0:	4603      	mov	r3, r0
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d00d      	beq.n	8003702 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036ea:	2b04      	cmp	r3, #4
 80036ec:	d107      	bne.n	80036fe <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	681a      	ldr	r2, [r3, #0]
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80036fc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80036fe:	2301      	movs	r3, #1
 8003700:	e005      	b.n	800370e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003702:	893b      	ldrh	r3, [r7, #8]
 8003704:	b2da      	uxtb	r2, r3
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800370c:	2300      	movs	r3, #0
}
 800370e:	4618      	mov	r0, r3
 8003710:	3718      	adds	r7, #24
 8003712:	46bd      	mov	sp, r7
 8003714:	bd80      	pop	{r7, pc}
 8003716:	bf00      	nop
 8003718:	00010002 	.word	0x00010002

0800371c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b088      	sub	sp, #32
 8003720:	af02      	add	r7, sp, #8
 8003722:	60f8      	str	r0, [r7, #12]
 8003724:	4608      	mov	r0, r1
 8003726:	4611      	mov	r1, r2
 8003728:	461a      	mov	r2, r3
 800372a:	4603      	mov	r3, r0
 800372c:	817b      	strh	r3, [r7, #10]
 800372e:	460b      	mov	r3, r1
 8003730:	813b      	strh	r3, [r7, #8]
 8003732:	4613      	mov	r3, r2
 8003734:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	681a      	ldr	r2, [r3, #0]
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003744:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	681a      	ldr	r2, [r3, #0]
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003754:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003756:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003758:	9300      	str	r3, [sp, #0]
 800375a:	6a3b      	ldr	r3, [r7, #32]
 800375c:	2200      	movs	r2, #0
 800375e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003762:	68f8      	ldr	r0, [r7, #12]
 8003764:	f000 f8c2 	bl	80038ec <I2C_WaitOnFlagUntilTimeout>
 8003768:	4603      	mov	r3, r0
 800376a:	2b00      	cmp	r3, #0
 800376c:	d00d      	beq.n	800378a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003778:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800377c:	d103      	bne.n	8003786 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003784:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003786:	2303      	movs	r3, #3
 8003788:	e0aa      	b.n	80038e0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800378a:	897b      	ldrh	r3, [r7, #10]
 800378c:	b2db      	uxtb	r3, r3
 800378e:	461a      	mov	r2, r3
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003798:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800379a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800379c:	6a3a      	ldr	r2, [r7, #32]
 800379e:	4952      	ldr	r1, [pc, #328]	@ (80038e8 <I2C_RequestMemoryRead+0x1cc>)
 80037a0:	68f8      	ldr	r0, [r7, #12]
 80037a2:	f000 f91d 	bl	80039e0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80037a6:	4603      	mov	r3, r0
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d001      	beq.n	80037b0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80037ac:	2301      	movs	r3, #1
 80037ae:	e097      	b.n	80038e0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037b0:	2300      	movs	r3, #0
 80037b2:	617b      	str	r3, [r7, #20]
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	695b      	ldr	r3, [r3, #20]
 80037ba:	617b      	str	r3, [r7, #20]
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	699b      	ldr	r3, [r3, #24]
 80037c2:	617b      	str	r3, [r7, #20]
 80037c4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80037c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80037c8:	6a39      	ldr	r1, [r7, #32]
 80037ca:	68f8      	ldr	r0, [r7, #12]
 80037cc:	f000 f9a8 	bl	8003b20 <I2C_WaitOnTXEFlagUntilTimeout>
 80037d0:	4603      	mov	r3, r0
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d00d      	beq.n	80037f2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037da:	2b04      	cmp	r3, #4
 80037dc:	d107      	bne.n	80037ee <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	681a      	ldr	r2, [r3, #0]
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80037ec:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80037ee:	2301      	movs	r3, #1
 80037f0:	e076      	b.n	80038e0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80037f2:	88fb      	ldrh	r3, [r7, #6]
 80037f4:	2b01      	cmp	r3, #1
 80037f6:	d105      	bne.n	8003804 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80037f8:	893b      	ldrh	r3, [r7, #8]
 80037fa:	b2da      	uxtb	r2, r3
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	611a      	str	r2, [r3, #16]
 8003802:	e021      	b.n	8003848 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003804:	893b      	ldrh	r3, [r7, #8]
 8003806:	0a1b      	lsrs	r3, r3, #8
 8003808:	b29b      	uxth	r3, r3
 800380a:	b2da      	uxtb	r2, r3
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003812:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003814:	6a39      	ldr	r1, [r7, #32]
 8003816:	68f8      	ldr	r0, [r7, #12]
 8003818:	f000 f982 	bl	8003b20 <I2C_WaitOnTXEFlagUntilTimeout>
 800381c:	4603      	mov	r3, r0
 800381e:	2b00      	cmp	r3, #0
 8003820:	d00d      	beq.n	800383e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003826:	2b04      	cmp	r3, #4
 8003828:	d107      	bne.n	800383a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	681a      	ldr	r2, [r3, #0]
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003838:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800383a:	2301      	movs	r3, #1
 800383c:	e050      	b.n	80038e0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800383e:	893b      	ldrh	r3, [r7, #8]
 8003840:	b2da      	uxtb	r2, r3
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003848:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800384a:	6a39      	ldr	r1, [r7, #32]
 800384c:	68f8      	ldr	r0, [r7, #12]
 800384e:	f000 f967 	bl	8003b20 <I2C_WaitOnTXEFlagUntilTimeout>
 8003852:	4603      	mov	r3, r0
 8003854:	2b00      	cmp	r3, #0
 8003856:	d00d      	beq.n	8003874 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800385c:	2b04      	cmp	r3, #4
 800385e:	d107      	bne.n	8003870 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	681a      	ldr	r2, [r3, #0]
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800386e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003870:	2301      	movs	r3, #1
 8003872:	e035      	b.n	80038e0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	681a      	ldr	r2, [r3, #0]
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003882:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003884:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003886:	9300      	str	r3, [sp, #0]
 8003888:	6a3b      	ldr	r3, [r7, #32]
 800388a:	2200      	movs	r2, #0
 800388c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003890:	68f8      	ldr	r0, [r7, #12]
 8003892:	f000 f82b 	bl	80038ec <I2C_WaitOnFlagUntilTimeout>
 8003896:	4603      	mov	r3, r0
 8003898:	2b00      	cmp	r3, #0
 800389a:	d00d      	beq.n	80038b8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038a6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80038aa:	d103      	bne.n	80038b4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80038b2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80038b4:	2303      	movs	r3, #3
 80038b6:	e013      	b.n	80038e0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80038b8:	897b      	ldrh	r3, [r7, #10]
 80038ba:	b2db      	uxtb	r3, r3
 80038bc:	f043 0301 	orr.w	r3, r3, #1
 80038c0:	b2da      	uxtb	r2, r3
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80038c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038ca:	6a3a      	ldr	r2, [r7, #32]
 80038cc:	4906      	ldr	r1, [pc, #24]	@ (80038e8 <I2C_RequestMemoryRead+0x1cc>)
 80038ce:	68f8      	ldr	r0, [r7, #12]
 80038d0:	f000 f886 	bl	80039e0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80038d4:	4603      	mov	r3, r0
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d001      	beq.n	80038de <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80038da:	2301      	movs	r3, #1
 80038dc:	e000      	b.n	80038e0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80038de:	2300      	movs	r3, #0
}
 80038e0:	4618      	mov	r0, r3
 80038e2:	3718      	adds	r7, #24
 80038e4:	46bd      	mov	sp, r7
 80038e6:	bd80      	pop	{r7, pc}
 80038e8:	00010002 	.word	0x00010002

080038ec <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b084      	sub	sp, #16
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	60f8      	str	r0, [r7, #12]
 80038f4:	60b9      	str	r1, [r7, #8]
 80038f6:	603b      	str	r3, [r7, #0]
 80038f8:	4613      	mov	r3, r2
 80038fa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80038fc:	e048      	b.n	8003990 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003904:	d044      	beq.n	8003990 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003906:	f7fe fefd 	bl	8002704 <HAL_GetTick>
 800390a:	4602      	mov	r2, r0
 800390c:	69bb      	ldr	r3, [r7, #24]
 800390e:	1ad3      	subs	r3, r2, r3
 8003910:	683a      	ldr	r2, [r7, #0]
 8003912:	429a      	cmp	r2, r3
 8003914:	d302      	bcc.n	800391c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d139      	bne.n	8003990 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800391c:	68bb      	ldr	r3, [r7, #8]
 800391e:	0c1b      	lsrs	r3, r3, #16
 8003920:	b2db      	uxtb	r3, r3
 8003922:	2b01      	cmp	r3, #1
 8003924:	d10d      	bne.n	8003942 <I2C_WaitOnFlagUntilTimeout+0x56>
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	695b      	ldr	r3, [r3, #20]
 800392c:	43da      	mvns	r2, r3
 800392e:	68bb      	ldr	r3, [r7, #8]
 8003930:	4013      	ands	r3, r2
 8003932:	b29b      	uxth	r3, r3
 8003934:	2b00      	cmp	r3, #0
 8003936:	bf0c      	ite	eq
 8003938:	2301      	moveq	r3, #1
 800393a:	2300      	movne	r3, #0
 800393c:	b2db      	uxtb	r3, r3
 800393e:	461a      	mov	r2, r3
 8003940:	e00c      	b.n	800395c <I2C_WaitOnFlagUntilTimeout+0x70>
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	699b      	ldr	r3, [r3, #24]
 8003948:	43da      	mvns	r2, r3
 800394a:	68bb      	ldr	r3, [r7, #8]
 800394c:	4013      	ands	r3, r2
 800394e:	b29b      	uxth	r3, r3
 8003950:	2b00      	cmp	r3, #0
 8003952:	bf0c      	ite	eq
 8003954:	2301      	moveq	r3, #1
 8003956:	2300      	movne	r3, #0
 8003958:	b2db      	uxtb	r3, r3
 800395a:	461a      	mov	r2, r3
 800395c:	79fb      	ldrb	r3, [r7, #7]
 800395e:	429a      	cmp	r2, r3
 8003960:	d116      	bne.n	8003990 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	2200      	movs	r2, #0
 8003966:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	2220      	movs	r2, #32
 800396c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	2200      	movs	r2, #0
 8003974:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800397c:	f043 0220 	orr.w	r2, r3, #32
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	2200      	movs	r2, #0
 8003988:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800398c:	2301      	movs	r3, #1
 800398e:	e023      	b.n	80039d8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003990:	68bb      	ldr	r3, [r7, #8]
 8003992:	0c1b      	lsrs	r3, r3, #16
 8003994:	b2db      	uxtb	r3, r3
 8003996:	2b01      	cmp	r3, #1
 8003998:	d10d      	bne.n	80039b6 <I2C_WaitOnFlagUntilTimeout+0xca>
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	695b      	ldr	r3, [r3, #20]
 80039a0:	43da      	mvns	r2, r3
 80039a2:	68bb      	ldr	r3, [r7, #8]
 80039a4:	4013      	ands	r3, r2
 80039a6:	b29b      	uxth	r3, r3
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	bf0c      	ite	eq
 80039ac:	2301      	moveq	r3, #1
 80039ae:	2300      	movne	r3, #0
 80039b0:	b2db      	uxtb	r3, r3
 80039b2:	461a      	mov	r2, r3
 80039b4:	e00c      	b.n	80039d0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	699b      	ldr	r3, [r3, #24]
 80039bc:	43da      	mvns	r2, r3
 80039be:	68bb      	ldr	r3, [r7, #8]
 80039c0:	4013      	ands	r3, r2
 80039c2:	b29b      	uxth	r3, r3
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	bf0c      	ite	eq
 80039c8:	2301      	moveq	r3, #1
 80039ca:	2300      	movne	r3, #0
 80039cc:	b2db      	uxtb	r3, r3
 80039ce:	461a      	mov	r2, r3
 80039d0:	79fb      	ldrb	r3, [r7, #7]
 80039d2:	429a      	cmp	r2, r3
 80039d4:	d093      	beq.n	80038fe <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80039d6:	2300      	movs	r3, #0
}
 80039d8:	4618      	mov	r0, r3
 80039da:	3710      	adds	r7, #16
 80039dc:	46bd      	mov	sp, r7
 80039de:	bd80      	pop	{r7, pc}

080039e0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b084      	sub	sp, #16
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	60f8      	str	r0, [r7, #12]
 80039e8:	60b9      	str	r1, [r7, #8]
 80039ea:	607a      	str	r2, [r7, #4]
 80039ec:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80039ee:	e071      	b.n	8003ad4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	695b      	ldr	r3, [r3, #20]
 80039f6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80039fa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80039fe:	d123      	bne.n	8003a48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	681a      	ldr	r2, [r3, #0]
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003a0e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003a18:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	2220      	movs	r2, #32
 8003a24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a34:	f043 0204 	orr.w	r2, r3, #4
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	2200      	movs	r2, #0
 8003a40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003a44:	2301      	movs	r3, #1
 8003a46:	e067      	b.n	8003b18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a4e:	d041      	beq.n	8003ad4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a50:	f7fe fe58 	bl	8002704 <HAL_GetTick>
 8003a54:	4602      	mov	r2, r0
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	1ad3      	subs	r3, r2, r3
 8003a5a:	687a      	ldr	r2, [r7, #4]
 8003a5c:	429a      	cmp	r2, r3
 8003a5e:	d302      	bcc.n	8003a66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d136      	bne.n	8003ad4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003a66:	68bb      	ldr	r3, [r7, #8]
 8003a68:	0c1b      	lsrs	r3, r3, #16
 8003a6a:	b2db      	uxtb	r3, r3
 8003a6c:	2b01      	cmp	r3, #1
 8003a6e:	d10c      	bne.n	8003a8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	695b      	ldr	r3, [r3, #20]
 8003a76:	43da      	mvns	r2, r3
 8003a78:	68bb      	ldr	r3, [r7, #8]
 8003a7a:	4013      	ands	r3, r2
 8003a7c:	b29b      	uxth	r3, r3
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	bf14      	ite	ne
 8003a82:	2301      	movne	r3, #1
 8003a84:	2300      	moveq	r3, #0
 8003a86:	b2db      	uxtb	r3, r3
 8003a88:	e00b      	b.n	8003aa2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	699b      	ldr	r3, [r3, #24]
 8003a90:	43da      	mvns	r2, r3
 8003a92:	68bb      	ldr	r3, [r7, #8]
 8003a94:	4013      	ands	r3, r2
 8003a96:	b29b      	uxth	r3, r3
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	bf14      	ite	ne
 8003a9c:	2301      	movne	r3, #1
 8003a9e:	2300      	moveq	r3, #0
 8003aa0:	b2db      	uxtb	r3, r3
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d016      	beq.n	8003ad4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	2220      	movs	r2, #32
 8003ab0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ac0:	f043 0220 	orr.w	r2, r3, #32
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	2200      	movs	r2, #0
 8003acc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003ad0:	2301      	movs	r3, #1
 8003ad2:	e021      	b.n	8003b18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003ad4:	68bb      	ldr	r3, [r7, #8]
 8003ad6:	0c1b      	lsrs	r3, r3, #16
 8003ad8:	b2db      	uxtb	r3, r3
 8003ada:	2b01      	cmp	r3, #1
 8003adc:	d10c      	bne.n	8003af8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	695b      	ldr	r3, [r3, #20]
 8003ae4:	43da      	mvns	r2, r3
 8003ae6:	68bb      	ldr	r3, [r7, #8]
 8003ae8:	4013      	ands	r3, r2
 8003aea:	b29b      	uxth	r3, r3
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	bf14      	ite	ne
 8003af0:	2301      	movne	r3, #1
 8003af2:	2300      	moveq	r3, #0
 8003af4:	b2db      	uxtb	r3, r3
 8003af6:	e00b      	b.n	8003b10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	699b      	ldr	r3, [r3, #24]
 8003afe:	43da      	mvns	r2, r3
 8003b00:	68bb      	ldr	r3, [r7, #8]
 8003b02:	4013      	ands	r3, r2
 8003b04:	b29b      	uxth	r3, r3
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	bf14      	ite	ne
 8003b0a:	2301      	movne	r3, #1
 8003b0c:	2300      	moveq	r3, #0
 8003b0e:	b2db      	uxtb	r3, r3
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	f47f af6d 	bne.w	80039f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003b16:	2300      	movs	r3, #0
}
 8003b18:	4618      	mov	r0, r3
 8003b1a:	3710      	adds	r7, #16
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	bd80      	pop	{r7, pc}

08003b20 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b084      	sub	sp, #16
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	60f8      	str	r0, [r7, #12]
 8003b28:	60b9      	str	r1, [r7, #8]
 8003b2a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003b2c:	e034      	b.n	8003b98 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003b2e:	68f8      	ldr	r0, [r7, #12]
 8003b30:	f000 f8e3 	bl	8003cfa <I2C_IsAcknowledgeFailed>
 8003b34:	4603      	mov	r3, r0
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d001      	beq.n	8003b3e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	e034      	b.n	8003ba8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b3e:	68bb      	ldr	r3, [r7, #8]
 8003b40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b44:	d028      	beq.n	8003b98 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b46:	f7fe fddd 	bl	8002704 <HAL_GetTick>
 8003b4a:	4602      	mov	r2, r0
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	1ad3      	subs	r3, r2, r3
 8003b50:	68ba      	ldr	r2, [r7, #8]
 8003b52:	429a      	cmp	r2, r3
 8003b54:	d302      	bcc.n	8003b5c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003b56:	68bb      	ldr	r3, [r7, #8]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d11d      	bne.n	8003b98 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	695b      	ldr	r3, [r3, #20]
 8003b62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b66:	2b80      	cmp	r3, #128	@ 0x80
 8003b68:	d016      	beq.n	8003b98 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	2220      	movs	r2, #32
 8003b74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b84:	f043 0220 	orr.w	r2, r3, #32
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	2200      	movs	r2, #0
 8003b90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003b94:	2301      	movs	r3, #1
 8003b96:	e007      	b.n	8003ba8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	695b      	ldr	r3, [r3, #20]
 8003b9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ba2:	2b80      	cmp	r3, #128	@ 0x80
 8003ba4:	d1c3      	bne.n	8003b2e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003ba6:	2300      	movs	r3, #0
}
 8003ba8:	4618      	mov	r0, r3
 8003baa:	3710      	adds	r7, #16
 8003bac:	46bd      	mov	sp, r7
 8003bae:	bd80      	pop	{r7, pc}

08003bb0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b084      	sub	sp, #16
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	60f8      	str	r0, [r7, #12]
 8003bb8:	60b9      	str	r1, [r7, #8]
 8003bba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003bbc:	e034      	b.n	8003c28 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003bbe:	68f8      	ldr	r0, [r7, #12]
 8003bc0:	f000 f89b 	bl	8003cfa <I2C_IsAcknowledgeFailed>
 8003bc4:	4603      	mov	r3, r0
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d001      	beq.n	8003bce <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003bca:	2301      	movs	r3, #1
 8003bcc:	e034      	b.n	8003c38 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003bce:	68bb      	ldr	r3, [r7, #8]
 8003bd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bd4:	d028      	beq.n	8003c28 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bd6:	f7fe fd95 	bl	8002704 <HAL_GetTick>
 8003bda:	4602      	mov	r2, r0
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	1ad3      	subs	r3, r2, r3
 8003be0:	68ba      	ldr	r2, [r7, #8]
 8003be2:	429a      	cmp	r2, r3
 8003be4:	d302      	bcc.n	8003bec <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003be6:	68bb      	ldr	r3, [r7, #8]
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d11d      	bne.n	8003c28 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	695b      	ldr	r3, [r3, #20]
 8003bf2:	f003 0304 	and.w	r3, r3, #4
 8003bf6:	2b04      	cmp	r3, #4
 8003bf8:	d016      	beq.n	8003c28 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	2220      	movs	r2, #32
 8003c04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c14:	f043 0220 	orr.w	r2, r3, #32
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	2200      	movs	r2, #0
 8003c20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003c24:	2301      	movs	r3, #1
 8003c26:	e007      	b.n	8003c38 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	695b      	ldr	r3, [r3, #20]
 8003c2e:	f003 0304 	and.w	r3, r3, #4
 8003c32:	2b04      	cmp	r3, #4
 8003c34:	d1c3      	bne.n	8003bbe <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003c36:	2300      	movs	r3, #0
}
 8003c38:	4618      	mov	r0, r3
 8003c3a:	3710      	adds	r7, #16
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	bd80      	pop	{r7, pc}

08003c40 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b084      	sub	sp, #16
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	60f8      	str	r0, [r7, #12]
 8003c48:	60b9      	str	r1, [r7, #8]
 8003c4a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003c4c:	e049      	b.n	8003ce2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	695b      	ldr	r3, [r3, #20]
 8003c54:	f003 0310 	and.w	r3, r3, #16
 8003c58:	2b10      	cmp	r3, #16
 8003c5a:	d119      	bne.n	8003c90 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f06f 0210 	mvn.w	r2, #16
 8003c64:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	2200      	movs	r2, #0
 8003c6a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	2220      	movs	r2, #32
 8003c70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	2200      	movs	r2, #0
 8003c78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	2200      	movs	r2, #0
 8003c88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003c8c:	2301      	movs	r3, #1
 8003c8e:	e030      	b.n	8003cf2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c90:	f7fe fd38 	bl	8002704 <HAL_GetTick>
 8003c94:	4602      	mov	r2, r0
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	1ad3      	subs	r3, r2, r3
 8003c9a:	68ba      	ldr	r2, [r7, #8]
 8003c9c:	429a      	cmp	r2, r3
 8003c9e:	d302      	bcc.n	8003ca6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003ca0:	68bb      	ldr	r3, [r7, #8]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d11d      	bne.n	8003ce2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	695b      	ldr	r3, [r3, #20]
 8003cac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003cb0:	2b40      	cmp	r3, #64	@ 0x40
 8003cb2:	d016      	beq.n	8003ce2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	2220      	movs	r2, #32
 8003cbe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cce:	f043 0220 	orr.w	r2, r3, #32
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	2200      	movs	r2, #0
 8003cda:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003cde:	2301      	movs	r3, #1
 8003ce0:	e007      	b.n	8003cf2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	695b      	ldr	r3, [r3, #20]
 8003ce8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003cec:	2b40      	cmp	r3, #64	@ 0x40
 8003cee:	d1ae      	bne.n	8003c4e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003cf0:	2300      	movs	r3, #0
}
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	3710      	adds	r7, #16
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	bd80      	pop	{r7, pc}

08003cfa <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003cfa:	b480      	push	{r7}
 8003cfc:	b083      	sub	sp, #12
 8003cfe:	af00      	add	r7, sp, #0
 8003d00:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	695b      	ldr	r3, [r3, #20]
 8003d08:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d0c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003d10:	d11b      	bne.n	8003d4a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003d1a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2200      	movs	r2, #0
 8003d20:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2220      	movs	r2, #32
 8003d26:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d36:	f043 0204 	orr.w	r2, r3, #4
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	2200      	movs	r2, #0
 8003d42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003d46:	2301      	movs	r3, #1
 8003d48:	e000      	b.n	8003d4c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003d4a:	2300      	movs	r3, #0
}
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	370c      	adds	r7, #12
 8003d50:	46bd      	mov	sp, r7
 8003d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d56:	4770      	bx	lr

08003d58 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003d58:	b480      	push	{r7}
 8003d5a:	b083      	sub	sp, #12
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
 8003d60:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003d68:	b2db      	uxtb	r3, r3
 8003d6a:	2b20      	cmp	r3, #32
 8003d6c:	d129      	bne.n	8003dc2 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	2224      	movs	r2, #36	@ 0x24
 8003d72:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	681a      	ldr	r2, [r3, #0]
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f022 0201 	bic.w	r2, r2, #1
 8003d84:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f022 0210 	bic.w	r2, r2, #16
 8003d94:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	683a      	ldr	r2, [r7, #0]
 8003da2:	430a      	orrs	r2, r1
 8003da4:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	681a      	ldr	r2, [r3, #0]
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f042 0201 	orr.w	r2, r2, #1
 8003db4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	2220      	movs	r2, #32
 8003dba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	e000      	b.n	8003dc4 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8003dc2:	2302      	movs	r3, #2
  }
}
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	370c      	adds	r7, #12
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dce:	4770      	bx	lr

08003dd0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003dd0:	b480      	push	{r7}
 8003dd2:	b085      	sub	sp, #20
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
 8003dd8:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8003dda:	2300      	movs	r3, #0
 8003ddc:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003de4:	b2db      	uxtb	r3, r3
 8003de6:	2b20      	cmp	r3, #32
 8003de8:	d12a      	bne.n	8003e40 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2224      	movs	r2, #36	@ 0x24
 8003dee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	681a      	ldr	r2, [r3, #0]
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f022 0201 	bic.w	r2, r2, #1
 8003e00:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e08:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8003e0a:	89fb      	ldrh	r3, [r7, #14]
 8003e0c:	f023 030f 	bic.w	r3, r3, #15
 8003e10:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	b29a      	uxth	r2, r3
 8003e16:	89fb      	ldrh	r3, [r7, #14]
 8003e18:	4313      	orrs	r3, r2
 8003e1a:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	89fa      	ldrh	r2, [r7, #14]
 8003e22:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	681a      	ldr	r2, [r3, #0]
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f042 0201 	orr.w	r2, r2, #1
 8003e32:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2220      	movs	r2, #32
 8003e38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	e000      	b.n	8003e42 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8003e40:	2302      	movs	r3, #2
  }
}
 8003e42:	4618      	mov	r0, r3
 8003e44:	3714      	adds	r7, #20
 8003e46:	46bd      	mov	sp, r7
 8003e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4c:	4770      	bx	lr

08003e4e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003e4e:	b580      	push	{r7, lr}
 8003e50:	b086      	sub	sp, #24
 8003e52:	af02      	add	r7, sp, #8
 8003e54:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d101      	bne.n	8003e60 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003e5c:	2301      	movs	r3, #1
 8003e5e:	e101      	b.n	8004064 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8003e6c:	b2db      	uxtb	r3, r3
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d106      	bne.n	8003e80 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2200      	movs	r2, #0
 8003e76:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003e7a:	6878      	ldr	r0, [r7, #4]
 8003e7c:	f005 fca2 	bl	80097c4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2203      	movs	r2, #3
 8003e84:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8003e88:	68bb      	ldr	r3, [r7, #8]
 8003e8a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003e8e:	d102      	bne.n	8003e96 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2200      	movs	r2, #0
 8003e94:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	f002 fbcd 	bl	800663a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6818      	ldr	r0, [r3, #0]
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	7c1a      	ldrb	r2, [r3, #16]
 8003ea8:	f88d 2000 	strb.w	r2, [sp]
 8003eac:	3304      	adds	r3, #4
 8003eae:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003eb0:	f002 faac 	bl	800640c <USB_CoreInit>
 8003eb4:	4603      	mov	r3, r0
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d005      	beq.n	8003ec6 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2202      	movs	r2, #2
 8003ebe:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003ec2:	2301      	movs	r3, #1
 8003ec4:	e0ce      	b.n	8004064 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	2100      	movs	r1, #0
 8003ecc:	4618      	mov	r0, r3
 8003ece:	f002 fbc5 	bl	800665c <USB_SetCurrentMode>
 8003ed2:	4603      	mov	r3, r0
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d005      	beq.n	8003ee4 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2202      	movs	r2, #2
 8003edc:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003ee0:	2301      	movs	r3, #1
 8003ee2:	e0bf      	b.n	8004064 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003ee4:	2300      	movs	r3, #0
 8003ee6:	73fb      	strb	r3, [r7, #15]
 8003ee8:	e04a      	b.n	8003f80 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003eea:	7bfa      	ldrb	r2, [r7, #15]
 8003eec:	6879      	ldr	r1, [r7, #4]
 8003eee:	4613      	mov	r3, r2
 8003ef0:	00db      	lsls	r3, r3, #3
 8003ef2:	4413      	add	r3, r2
 8003ef4:	009b      	lsls	r3, r3, #2
 8003ef6:	440b      	add	r3, r1
 8003ef8:	3315      	adds	r3, #21
 8003efa:	2201      	movs	r2, #1
 8003efc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003efe:	7bfa      	ldrb	r2, [r7, #15]
 8003f00:	6879      	ldr	r1, [r7, #4]
 8003f02:	4613      	mov	r3, r2
 8003f04:	00db      	lsls	r3, r3, #3
 8003f06:	4413      	add	r3, r2
 8003f08:	009b      	lsls	r3, r3, #2
 8003f0a:	440b      	add	r3, r1
 8003f0c:	3314      	adds	r3, #20
 8003f0e:	7bfa      	ldrb	r2, [r7, #15]
 8003f10:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003f12:	7bfa      	ldrb	r2, [r7, #15]
 8003f14:	7bfb      	ldrb	r3, [r7, #15]
 8003f16:	b298      	uxth	r0, r3
 8003f18:	6879      	ldr	r1, [r7, #4]
 8003f1a:	4613      	mov	r3, r2
 8003f1c:	00db      	lsls	r3, r3, #3
 8003f1e:	4413      	add	r3, r2
 8003f20:	009b      	lsls	r3, r3, #2
 8003f22:	440b      	add	r3, r1
 8003f24:	332e      	adds	r3, #46	@ 0x2e
 8003f26:	4602      	mov	r2, r0
 8003f28:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003f2a:	7bfa      	ldrb	r2, [r7, #15]
 8003f2c:	6879      	ldr	r1, [r7, #4]
 8003f2e:	4613      	mov	r3, r2
 8003f30:	00db      	lsls	r3, r3, #3
 8003f32:	4413      	add	r3, r2
 8003f34:	009b      	lsls	r3, r3, #2
 8003f36:	440b      	add	r3, r1
 8003f38:	3318      	adds	r3, #24
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003f3e:	7bfa      	ldrb	r2, [r7, #15]
 8003f40:	6879      	ldr	r1, [r7, #4]
 8003f42:	4613      	mov	r3, r2
 8003f44:	00db      	lsls	r3, r3, #3
 8003f46:	4413      	add	r3, r2
 8003f48:	009b      	lsls	r3, r3, #2
 8003f4a:	440b      	add	r3, r1
 8003f4c:	331c      	adds	r3, #28
 8003f4e:	2200      	movs	r2, #0
 8003f50:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003f52:	7bfa      	ldrb	r2, [r7, #15]
 8003f54:	6879      	ldr	r1, [r7, #4]
 8003f56:	4613      	mov	r3, r2
 8003f58:	00db      	lsls	r3, r3, #3
 8003f5a:	4413      	add	r3, r2
 8003f5c:	009b      	lsls	r3, r3, #2
 8003f5e:	440b      	add	r3, r1
 8003f60:	3320      	adds	r3, #32
 8003f62:	2200      	movs	r2, #0
 8003f64:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003f66:	7bfa      	ldrb	r2, [r7, #15]
 8003f68:	6879      	ldr	r1, [r7, #4]
 8003f6a:	4613      	mov	r3, r2
 8003f6c:	00db      	lsls	r3, r3, #3
 8003f6e:	4413      	add	r3, r2
 8003f70:	009b      	lsls	r3, r3, #2
 8003f72:	440b      	add	r3, r1
 8003f74:	3324      	adds	r3, #36	@ 0x24
 8003f76:	2200      	movs	r2, #0
 8003f78:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003f7a:	7bfb      	ldrb	r3, [r7, #15]
 8003f7c:	3301      	adds	r3, #1
 8003f7e:	73fb      	strb	r3, [r7, #15]
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	791b      	ldrb	r3, [r3, #4]
 8003f84:	7bfa      	ldrb	r2, [r7, #15]
 8003f86:	429a      	cmp	r2, r3
 8003f88:	d3af      	bcc.n	8003eea <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	73fb      	strb	r3, [r7, #15]
 8003f8e:	e044      	b.n	800401a <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003f90:	7bfa      	ldrb	r2, [r7, #15]
 8003f92:	6879      	ldr	r1, [r7, #4]
 8003f94:	4613      	mov	r3, r2
 8003f96:	00db      	lsls	r3, r3, #3
 8003f98:	4413      	add	r3, r2
 8003f9a:	009b      	lsls	r3, r3, #2
 8003f9c:	440b      	add	r3, r1
 8003f9e:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003fa6:	7bfa      	ldrb	r2, [r7, #15]
 8003fa8:	6879      	ldr	r1, [r7, #4]
 8003faa:	4613      	mov	r3, r2
 8003fac:	00db      	lsls	r3, r3, #3
 8003fae:	4413      	add	r3, r2
 8003fb0:	009b      	lsls	r3, r3, #2
 8003fb2:	440b      	add	r3, r1
 8003fb4:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8003fb8:	7bfa      	ldrb	r2, [r7, #15]
 8003fba:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003fbc:	7bfa      	ldrb	r2, [r7, #15]
 8003fbe:	6879      	ldr	r1, [r7, #4]
 8003fc0:	4613      	mov	r3, r2
 8003fc2:	00db      	lsls	r3, r3, #3
 8003fc4:	4413      	add	r3, r2
 8003fc6:	009b      	lsls	r3, r3, #2
 8003fc8:	440b      	add	r3, r1
 8003fca:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003fce:	2200      	movs	r2, #0
 8003fd0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003fd2:	7bfa      	ldrb	r2, [r7, #15]
 8003fd4:	6879      	ldr	r1, [r7, #4]
 8003fd6:	4613      	mov	r3, r2
 8003fd8:	00db      	lsls	r3, r3, #3
 8003fda:	4413      	add	r3, r2
 8003fdc:	009b      	lsls	r3, r3, #2
 8003fde:	440b      	add	r3, r1
 8003fe0:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003fe8:	7bfa      	ldrb	r2, [r7, #15]
 8003fea:	6879      	ldr	r1, [r7, #4]
 8003fec:	4613      	mov	r3, r2
 8003fee:	00db      	lsls	r3, r3, #3
 8003ff0:	4413      	add	r3, r2
 8003ff2:	009b      	lsls	r3, r3, #2
 8003ff4:	440b      	add	r3, r1
 8003ff6:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003ffe:	7bfa      	ldrb	r2, [r7, #15]
 8004000:	6879      	ldr	r1, [r7, #4]
 8004002:	4613      	mov	r3, r2
 8004004:	00db      	lsls	r3, r3, #3
 8004006:	4413      	add	r3, r2
 8004008:	009b      	lsls	r3, r3, #2
 800400a:	440b      	add	r3, r1
 800400c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8004010:	2200      	movs	r2, #0
 8004012:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004014:	7bfb      	ldrb	r3, [r7, #15]
 8004016:	3301      	adds	r3, #1
 8004018:	73fb      	strb	r3, [r7, #15]
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	791b      	ldrb	r3, [r3, #4]
 800401e:	7bfa      	ldrb	r2, [r7, #15]
 8004020:	429a      	cmp	r2, r3
 8004022:	d3b5      	bcc.n	8003f90 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6818      	ldr	r0, [r3, #0]
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	7c1a      	ldrb	r2, [r3, #16]
 800402c:	f88d 2000 	strb.w	r2, [sp]
 8004030:	3304      	adds	r3, #4
 8004032:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004034:	f002 fb5e 	bl	80066f4 <USB_DevInit>
 8004038:	4603      	mov	r3, r0
 800403a:	2b00      	cmp	r3, #0
 800403c:	d005      	beq.n	800404a <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2202      	movs	r2, #2
 8004042:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004046:	2301      	movs	r3, #1
 8004048:	e00c      	b.n	8004064 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	2200      	movs	r2, #0
 800404e:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2201      	movs	r2, #1
 8004054:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	4618      	mov	r0, r3
 800405e:	f003 fba8 	bl	80077b2 <USB_DevDisconnect>

  return HAL_OK;
 8004062:	2300      	movs	r3, #0
}
 8004064:	4618      	mov	r0, r3
 8004066:	3710      	adds	r7, #16
 8004068:	46bd      	mov	sp, r7
 800406a:	bd80      	pop	{r7, pc}

0800406c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800406c:	b580      	push	{r7, lr}
 800406e:	b084      	sub	sp, #16
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004080:	2b01      	cmp	r3, #1
 8004082:	d101      	bne.n	8004088 <HAL_PCD_Start+0x1c>
 8004084:	2302      	movs	r3, #2
 8004086:	e022      	b.n	80040ce <HAL_PCD_Start+0x62>
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2201      	movs	r2, #1
 800408c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	68db      	ldr	r3, [r3, #12]
 8004094:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004098:	2b00      	cmp	r3, #0
 800409a:	d009      	beq.n	80040b0 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80040a0:	2b01      	cmp	r3, #1
 80040a2:	d105      	bne.n	80040b0 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040a8:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	4618      	mov	r0, r3
 80040b6:	f002 faaf 	bl	8006618 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	4618      	mov	r0, r3
 80040c0:	f003 fb56 	bl	8007770 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2200      	movs	r2, #0
 80040c8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80040cc:	2300      	movs	r3, #0
}
 80040ce:	4618      	mov	r0, r3
 80040d0:	3710      	adds	r7, #16
 80040d2:	46bd      	mov	sp, r7
 80040d4:	bd80      	pop	{r7, pc}

080040d6 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80040d6:	b590      	push	{r4, r7, lr}
 80040d8:	b08d      	sub	sp, #52	@ 0x34
 80040da:	af00      	add	r7, sp, #0
 80040dc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80040e4:	6a3b      	ldr	r3, [r7, #32]
 80040e6:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4618      	mov	r0, r3
 80040ee:	f003 fc14 	bl	800791a <USB_GetMode>
 80040f2:	4603      	mov	r3, r0
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	f040 848c 	bne.w	8004a12 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	4618      	mov	r0, r3
 8004100:	f003 fb78 	bl	80077f4 <USB_ReadInterrupts>
 8004104:	4603      	mov	r3, r0
 8004106:	2b00      	cmp	r3, #0
 8004108:	f000 8482 	beq.w	8004a10 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800410c:	69fb      	ldr	r3, [r7, #28]
 800410e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004112:	689b      	ldr	r3, [r3, #8]
 8004114:	0a1b      	lsrs	r3, r3, #8
 8004116:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	4618      	mov	r0, r3
 8004126:	f003 fb65 	bl	80077f4 <USB_ReadInterrupts>
 800412a:	4603      	mov	r3, r0
 800412c:	f003 0302 	and.w	r3, r3, #2
 8004130:	2b02      	cmp	r3, #2
 8004132:	d107      	bne.n	8004144 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	695a      	ldr	r2, [r3, #20]
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f002 0202 	and.w	r2, r2, #2
 8004142:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	4618      	mov	r0, r3
 800414a:	f003 fb53 	bl	80077f4 <USB_ReadInterrupts>
 800414e:	4603      	mov	r3, r0
 8004150:	f003 0310 	and.w	r3, r3, #16
 8004154:	2b10      	cmp	r3, #16
 8004156:	d161      	bne.n	800421c <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	699a      	ldr	r2, [r3, #24]
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f022 0210 	bic.w	r2, r2, #16
 8004166:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8004168:	6a3b      	ldr	r3, [r7, #32]
 800416a:	6a1b      	ldr	r3, [r3, #32]
 800416c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800416e:	69bb      	ldr	r3, [r7, #24]
 8004170:	f003 020f 	and.w	r2, r3, #15
 8004174:	4613      	mov	r3, r2
 8004176:	00db      	lsls	r3, r3, #3
 8004178:	4413      	add	r3, r2
 800417a:	009b      	lsls	r3, r3, #2
 800417c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004180:	687a      	ldr	r2, [r7, #4]
 8004182:	4413      	add	r3, r2
 8004184:	3304      	adds	r3, #4
 8004186:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8004188:	69bb      	ldr	r3, [r7, #24]
 800418a:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 800418e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004192:	d124      	bne.n	80041de <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8004194:	69ba      	ldr	r2, [r7, #24]
 8004196:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 800419a:	4013      	ands	r3, r2
 800419c:	2b00      	cmp	r3, #0
 800419e:	d035      	beq.n	800420c <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80041a0:	697b      	ldr	r3, [r7, #20]
 80041a2:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80041a4:	69bb      	ldr	r3, [r7, #24]
 80041a6:	091b      	lsrs	r3, r3, #4
 80041a8:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80041aa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80041ae:	b29b      	uxth	r3, r3
 80041b0:	461a      	mov	r2, r3
 80041b2:	6a38      	ldr	r0, [r7, #32]
 80041b4:	f003 f98a 	bl	80074cc <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80041b8:	697b      	ldr	r3, [r7, #20]
 80041ba:	68da      	ldr	r2, [r3, #12]
 80041bc:	69bb      	ldr	r3, [r7, #24]
 80041be:	091b      	lsrs	r3, r3, #4
 80041c0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80041c4:	441a      	add	r2, r3
 80041c6:	697b      	ldr	r3, [r7, #20]
 80041c8:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80041ca:	697b      	ldr	r3, [r7, #20]
 80041cc:	695a      	ldr	r2, [r3, #20]
 80041ce:	69bb      	ldr	r3, [r7, #24]
 80041d0:	091b      	lsrs	r3, r3, #4
 80041d2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80041d6:	441a      	add	r2, r3
 80041d8:	697b      	ldr	r3, [r7, #20]
 80041da:	615a      	str	r2, [r3, #20]
 80041dc:	e016      	b.n	800420c <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80041de:	69bb      	ldr	r3, [r7, #24]
 80041e0:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 80041e4:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80041e8:	d110      	bne.n	800420c <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80041f0:	2208      	movs	r2, #8
 80041f2:	4619      	mov	r1, r3
 80041f4:	6a38      	ldr	r0, [r7, #32]
 80041f6:	f003 f969 	bl	80074cc <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80041fa:	697b      	ldr	r3, [r7, #20]
 80041fc:	695a      	ldr	r2, [r3, #20]
 80041fe:	69bb      	ldr	r3, [r7, #24]
 8004200:	091b      	lsrs	r3, r3, #4
 8004202:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004206:	441a      	add	r2, r3
 8004208:	697b      	ldr	r3, [r7, #20]
 800420a:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	699a      	ldr	r2, [r3, #24]
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f042 0210 	orr.w	r2, r2, #16
 800421a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	4618      	mov	r0, r3
 8004222:	f003 fae7 	bl	80077f4 <USB_ReadInterrupts>
 8004226:	4603      	mov	r3, r0
 8004228:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800422c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004230:	f040 80a7 	bne.w	8004382 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8004234:	2300      	movs	r3, #0
 8004236:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	4618      	mov	r0, r3
 800423e:	f003 faec 	bl	800781a <USB_ReadDevAllOutEpInterrupt>
 8004242:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8004244:	e099      	b.n	800437a <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8004246:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004248:	f003 0301 	and.w	r3, r3, #1
 800424c:	2b00      	cmp	r3, #0
 800424e:	f000 808e 	beq.w	800436e <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004258:	b2d2      	uxtb	r2, r2
 800425a:	4611      	mov	r1, r2
 800425c:	4618      	mov	r0, r3
 800425e:	f003 fb10 	bl	8007882 <USB_ReadDevOutEPInterrupt>
 8004262:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8004264:	693b      	ldr	r3, [r7, #16]
 8004266:	f003 0301 	and.w	r3, r3, #1
 800426a:	2b00      	cmp	r3, #0
 800426c:	d00c      	beq.n	8004288 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800426e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004270:	015a      	lsls	r2, r3, #5
 8004272:	69fb      	ldr	r3, [r7, #28]
 8004274:	4413      	add	r3, r2
 8004276:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800427a:	461a      	mov	r2, r3
 800427c:	2301      	movs	r3, #1
 800427e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8004280:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004282:	6878      	ldr	r0, [r7, #4]
 8004284:	f000 fe8c 	bl	8004fa0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8004288:	693b      	ldr	r3, [r7, #16]
 800428a:	f003 0308 	and.w	r3, r3, #8
 800428e:	2b00      	cmp	r3, #0
 8004290:	d00c      	beq.n	80042ac <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8004292:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004294:	015a      	lsls	r2, r3, #5
 8004296:	69fb      	ldr	r3, [r7, #28]
 8004298:	4413      	add	r3, r2
 800429a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800429e:	461a      	mov	r2, r3
 80042a0:	2308      	movs	r3, #8
 80042a2:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80042a4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80042a6:	6878      	ldr	r0, [r7, #4]
 80042a8:	f000 ff62 	bl	8005170 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80042ac:	693b      	ldr	r3, [r7, #16]
 80042ae:	f003 0310 	and.w	r3, r3, #16
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d008      	beq.n	80042c8 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80042b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042b8:	015a      	lsls	r2, r3, #5
 80042ba:	69fb      	ldr	r3, [r7, #28]
 80042bc:	4413      	add	r3, r2
 80042be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80042c2:	461a      	mov	r2, r3
 80042c4:	2310      	movs	r3, #16
 80042c6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80042c8:	693b      	ldr	r3, [r7, #16]
 80042ca:	f003 0302 	and.w	r3, r3, #2
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d030      	beq.n	8004334 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80042d2:	6a3b      	ldr	r3, [r7, #32]
 80042d4:	695b      	ldr	r3, [r3, #20]
 80042d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80042da:	2b80      	cmp	r3, #128	@ 0x80
 80042dc:	d109      	bne.n	80042f2 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80042de:	69fb      	ldr	r3, [r7, #28]
 80042e0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80042e4:	685b      	ldr	r3, [r3, #4]
 80042e6:	69fa      	ldr	r2, [r7, #28]
 80042e8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80042ec:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80042f0:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80042f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80042f4:	4613      	mov	r3, r2
 80042f6:	00db      	lsls	r3, r3, #3
 80042f8:	4413      	add	r3, r2
 80042fa:	009b      	lsls	r3, r3, #2
 80042fc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004300:	687a      	ldr	r2, [r7, #4]
 8004302:	4413      	add	r3, r2
 8004304:	3304      	adds	r3, #4
 8004306:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004308:	697b      	ldr	r3, [r7, #20]
 800430a:	78db      	ldrb	r3, [r3, #3]
 800430c:	2b01      	cmp	r3, #1
 800430e:	d108      	bne.n	8004322 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8004310:	697b      	ldr	r3, [r7, #20]
 8004312:	2200      	movs	r2, #0
 8004314:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8004316:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004318:	b2db      	uxtb	r3, r3
 800431a:	4619      	mov	r1, r3
 800431c:	6878      	ldr	r0, [r7, #4]
 800431e:	f005 fb61 	bl	80099e4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8004322:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004324:	015a      	lsls	r2, r3, #5
 8004326:	69fb      	ldr	r3, [r7, #28]
 8004328:	4413      	add	r3, r2
 800432a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800432e:	461a      	mov	r2, r3
 8004330:	2302      	movs	r3, #2
 8004332:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004334:	693b      	ldr	r3, [r7, #16]
 8004336:	f003 0320 	and.w	r3, r3, #32
 800433a:	2b00      	cmp	r3, #0
 800433c:	d008      	beq.n	8004350 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800433e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004340:	015a      	lsls	r2, r3, #5
 8004342:	69fb      	ldr	r3, [r7, #28]
 8004344:	4413      	add	r3, r2
 8004346:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800434a:	461a      	mov	r2, r3
 800434c:	2320      	movs	r3, #32
 800434e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8004350:	693b      	ldr	r3, [r7, #16]
 8004352:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004356:	2b00      	cmp	r3, #0
 8004358:	d009      	beq.n	800436e <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800435a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800435c:	015a      	lsls	r2, r3, #5
 800435e:	69fb      	ldr	r3, [r7, #28]
 8004360:	4413      	add	r3, r2
 8004362:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004366:	461a      	mov	r2, r3
 8004368:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800436c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800436e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004370:	3301      	adds	r3, #1
 8004372:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8004374:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004376:	085b      	lsrs	r3, r3, #1
 8004378:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800437a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800437c:	2b00      	cmp	r3, #0
 800437e:	f47f af62 	bne.w	8004246 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	4618      	mov	r0, r3
 8004388:	f003 fa34 	bl	80077f4 <USB_ReadInterrupts>
 800438c:	4603      	mov	r3, r0
 800438e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004392:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004396:	f040 80db 	bne.w	8004550 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	4618      	mov	r0, r3
 80043a0:	f003 fa55 	bl	800784e <USB_ReadDevAllInEpInterrupt>
 80043a4:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 80043a6:	2300      	movs	r3, #0
 80043a8:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 80043aa:	e0cd      	b.n	8004548 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80043ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043ae:	f003 0301 	and.w	r3, r3, #1
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	f000 80c2 	beq.w	800453c <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80043be:	b2d2      	uxtb	r2, r2
 80043c0:	4611      	mov	r1, r2
 80043c2:	4618      	mov	r0, r3
 80043c4:	f003 fa7b 	bl	80078be <USB_ReadDevInEPInterrupt>
 80043c8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80043ca:	693b      	ldr	r3, [r7, #16]
 80043cc:	f003 0301 	and.w	r3, r3, #1
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d057      	beq.n	8004484 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80043d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043d6:	f003 030f 	and.w	r3, r3, #15
 80043da:	2201      	movs	r2, #1
 80043dc:	fa02 f303 	lsl.w	r3, r2, r3
 80043e0:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80043e2:	69fb      	ldr	r3, [r7, #28]
 80043e4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80043e8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	43db      	mvns	r3, r3
 80043ee:	69f9      	ldr	r1, [r7, #28]
 80043f0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80043f4:	4013      	ands	r3, r2
 80043f6:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80043f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043fa:	015a      	lsls	r2, r3, #5
 80043fc:	69fb      	ldr	r3, [r7, #28]
 80043fe:	4413      	add	r3, r2
 8004400:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004404:	461a      	mov	r2, r3
 8004406:	2301      	movs	r3, #1
 8004408:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	799b      	ldrb	r3, [r3, #6]
 800440e:	2b01      	cmp	r3, #1
 8004410:	d132      	bne.n	8004478 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8004412:	6879      	ldr	r1, [r7, #4]
 8004414:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004416:	4613      	mov	r3, r2
 8004418:	00db      	lsls	r3, r3, #3
 800441a:	4413      	add	r3, r2
 800441c:	009b      	lsls	r3, r3, #2
 800441e:	440b      	add	r3, r1
 8004420:	3320      	adds	r3, #32
 8004422:	6819      	ldr	r1, [r3, #0]
 8004424:	6878      	ldr	r0, [r7, #4]
 8004426:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004428:	4613      	mov	r3, r2
 800442a:	00db      	lsls	r3, r3, #3
 800442c:	4413      	add	r3, r2
 800442e:	009b      	lsls	r3, r3, #2
 8004430:	4403      	add	r3, r0
 8004432:	331c      	adds	r3, #28
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	4419      	add	r1, r3
 8004438:	6878      	ldr	r0, [r7, #4]
 800443a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800443c:	4613      	mov	r3, r2
 800443e:	00db      	lsls	r3, r3, #3
 8004440:	4413      	add	r3, r2
 8004442:	009b      	lsls	r3, r3, #2
 8004444:	4403      	add	r3, r0
 8004446:	3320      	adds	r3, #32
 8004448:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800444a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800444c:	2b00      	cmp	r3, #0
 800444e:	d113      	bne.n	8004478 <HAL_PCD_IRQHandler+0x3a2>
 8004450:	6879      	ldr	r1, [r7, #4]
 8004452:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004454:	4613      	mov	r3, r2
 8004456:	00db      	lsls	r3, r3, #3
 8004458:	4413      	add	r3, r2
 800445a:	009b      	lsls	r3, r3, #2
 800445c:	440b      	add	r3, r1
 800445e:	3324      	adds	r3, #36	@ 0x24
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	2b00      	cmp	r3, #0
 8004464:	d108      	bne.n	8004478 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6818      	ldr	r0, [r3, #0]
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004470:	461a      	mov	r2, r3
 8004472:	2101      	movs	r1, #1
 8004474:	f003 fa82 	bl	800797c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8004478:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800447a:	b2db      	uxtb	r3, r3
 800447c:	4619      	mov	r1, r3
 800447e:	6878      	ldr	r0, [r7, #4]
 8004480:	f005 fa2b 	bl	80098da <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8004484:	693b      	ldr	r3, [r7, #16]
 8004486:	f003 0308 	and.w	r3, r3, #8
 800448a:	2b00      	cmp	r3, #0
 800448c:	d008      	beq.n	80044a0 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800448e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004490:	015a      	lsls	r2, r3, #5
 8004492:	69fb      	ldr	r3, [r7, #28]
 8004494:	4413      	add	r3, r2
 8004496:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800449a:	461a      	mov	r2, r3
 800449c:	2308      	movs	r3, #8
 800449e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80044a0:	693b      	ldr	r3, [r7, #16]
 80044a2:	f003 0310 	and.w	r3, r3, #16
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d008      	beq.n	80044bc <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80044aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044ac:	015a      	lsls	r2, r3, #5
 80044ae:	69fb      	ldr	r3, [r7, #28]
 80044b0:	4413      	add	r3, r2
 80044b2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80044b6:	461a      	mov	r2, r3
 80044b8:	2310      	movs	r3, #16
 80044ba:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80044bc:	693b      	ldr	r3, [r7, #16]
 80044be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d008      	beq.n	80044d8 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80044c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044c8:	015a      	lsls	r2, r3, #5
 80044ca:	69fb      	ldr	r3, [r7, #28]
 80044cc:	4413      	add	r3, r2
 80044ce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80044d2:	461a      	mov	r2, r3
 80044d4:	2340      	movs	r3, #64	@ 0x40
 80044d6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80044d8:	693b      	ldr	r3, [r7, #16]
 80044da:	f003 0302 	and.w	r3, r3, #2
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d023      	beq.n	800452a <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80044e2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80044e4:	6a38      	ldr	r0, [r7, #32]
 80044e6:	f002 fa69 	bl	80069bc <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80044ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80044ec:	4613      	mov	r3, r2
 80044ee:	00db      	lsls	r3, r3, #3
 80044f0:	4413      	add	r3, r2
 80044f2:	009b      	lsls	r3, r3, #2
 80044f4:	3310      	adds	r3, #16
 80044f6:	687a      	ldr	r2, [r7, #4]
 80044f8:	4413      	add	r3, r2
 80044fa:	3304      	adds	r3, #4
 80044fc:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80044fe:	697b      	ldr	r3, [r7, #20]
 8004500:	78db      	ldrb	r3, [r3, #3]
 8004502:	2b01      	cmp	r3, #1
 8004504:	d108      	bne.n	8004518 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8004506:	697b      	ldr	r3, [r7, #20]
 8004508:	2200      	movs	r2, #0
 800450a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800450c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800450e:	b2db      	uxtb	r3, r3
 8004510:	4619      	mov	r1, r3
 8004512:	6878      	ldr	r0, [r7, #4]
 8004514:	f005 fa78 	bl	8009a08 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8004518:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800451a:	015a      	lsls	r2, r3, #5
 800451c:	69fb      	ldr	r3, [r7, #28]
 800451e:	4413      	add	r3, r2
 8004520:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004524:	461a      	mov	r2, r3
 8004526:	2302      	movs	r3, #2
 8004528:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800452a:	693b      	ldr	r3, [r7, #16]
 800452c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004530:	2b00      	cmp	r3, #0
 8004532:	d003      	beq.n	800453c <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8004534:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004536:	6878      	ldr	r0, [r7, #4]
 8004538:	f000 fca5 	bl	8004e86 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800453c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800453e:	3301      	adds	r3, #1
 8004540:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8004542:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004544:	085b      	lsrs	r3, r3, #1
 8004546:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8004548:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800454a:	2b00      	cmp	r3, #0
 800454c:	f47f af2e 	bne.w	80043ac <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	4618      	mov	r0, r3
 8004556:	f003 f94d 	bl	80077f4 <USB_ReadInterrupts>
 800455a:	4603      	mov	r3, r0
 800455c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004560:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004564:	d122      	bne.n	80045ac <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004566:	69fb      	ldr	r3, [r7, #28]
 8004568:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800456c:	685b      	ldr	r3, [r3, #4]
 800456e:	69fa      	ldr	r2, [r7, #28]
 8004570:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004574:	f023 0301 	bic.w	r3, r3, #1
 8004578:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8004580:	2b01      	cmp	r3, #1
 8004582:	d108      	bne.n	8004596 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2200      	movs	r2, #0
 8004588:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800458c:	2100      	movs	r1, #0
 800458e:	6878      	ldr	r0, [r7, #4]
 8004590:	f000 fe8c 	bl	80052ac <HAL_PCDEx_LPM_Callback>
 8004594:	e002      	b.n	800459c <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8004596:	6878      	ldr	r0, [r7, #4]
 8004598:	f005 fa16 	bl	80099c8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	695a      	ldr	r2, [r3, #20]
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 80045aa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	4618      	mov	r0, r3
 80045b2:	f003 f91f 	bl	80077f4 <USB_ReadInterrupts>
 80045b6:	4603      	mov	r3, r0
 80045b8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80045bc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80045c0:	d112      	bne.n	80045e8 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80045c2:	69fb      	ldr	r3, [r7, #28]
 80045c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80045c8:	689b      	ldr	r3, [r3, #8]
 80045ca:	f003 0301 	and.w	r3, r3, #1
 80045ce:	2b01      	cmp	r3, #1
 80045d0:	d102      	bne.n	80045d8 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80045d2:	6878      	ldr	r0, [r7, #4]
 80045d4:	f005 f9d2 	bl	800997c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	695a      	ldr	r2, [r3, #20]
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 80045e6:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	4618      	mov	r0, r3
 80045ee:	f003 f901 	bl	80077f4 <USB_ReadInterrupts>
 80045f2:	4603      	mov	r3, r0
 80045f4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80045f8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80045fc:	f040 80b7 	bne.w	800476e <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004600:	69fb      	ldr	r3, [r7, #28]
 8004602:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004606:	685b      	ldr	r3, [r3, #4]
 8004608:	69fa      	ldr	r2, [r7, #28]
 800460a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800460e:	f023 0301 	bic.w	r3, r3, #1
 8004612:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	2110      	movs	r1, #16
 800461a:	4618      	mov	r0, r3
 800461c:	f002 f9ce 	bl	80069bc <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004620:	2300      	movs	r3, #0
 8004622:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004624:	e046      	b.n	80046b4 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8004626:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004628:	015a      	lsls	r2, r3, #5
 800462a:	69fb      	ldr	r3, [r7, #28]
 800462c:	4413      	add	r3, r2
 800462e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004632:	461a      	mov	r2, r3
 8004634:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004638:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800463a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800463c:	015a      	lsls	r2, r3, #5
 800463e:	69fb      	ldr	r3, [r7, #28]
 8004640:	4413      	add	r3, r2
 8004642:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800464a:	0151      	lsls	r1, r2, #5
 800464c:	69fa      	ldr	r2, [r7, #28]
 800464e:	440a      	add	r2, r1
 8004650:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004654:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004658:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800465a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800465c:	015a      	lsls	r2, r3, #5
 800465e:	69fb      	ldr	r3, [r7, #28]
 8004660:	4413      	add	r3, r2
 8004662:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004666:	461a      	mov	r2, r3
 8004668:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800466c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800466e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004670:	015a      	lsls	r2, r3, #5
 8004672:	69fb      	ldr	r3, [r7, #28]
 8004674:	4413      	add	r3, r2
 8004676:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800467e:	0151      	lsls	r1, r2, #5
 8004680:	69fa      	ldr	r2, [r7, #28]
 8004682:	440a      	add	r2, r1
 8004684:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004688:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800468c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800468e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004690:	015a      	lsls	r2, r3, #5
 8004692:	69fb      	ldr	r3, [r7, #28]
 8004694:	4413      	add	r3, r2
 8004696:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800469e:	0151      	lsls	r1, r2, #5
 80046a0:	69fa      	ldr	r2, [r7, #28]
 80046a2:	440a      	add	r2, r1
 80046a4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80046a8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80046ac:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80046ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046b0:	3301      	adds	r3, #1
 80046b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	791b      	ldrb	r3, [r3, #4]
 80046b8:	461a      	mov	r2, r3
 80046ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046bc:	4293      	cmp	r3, r2
 80046be:	d3b2      	bcc.n	8004626 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80046c0:	69fb      	ldr	r3, [r7, #28]
 80046c2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80046c6:	69db      	ldr	r3, [r3, #28]
 80046c8:	69fa      	ldr	r2, [r7, #28]
 80046ca:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80046ce:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 80046d2:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	7bdb      	ldrb	r3, [r3, #15]
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d016      	beq.n	800470a <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80046dc:	69fb      	ldr	r3, [r7, #28]
 80046de:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80046e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80046e6:	69fa      	ldr	r2, [r7, #28]
 80046e8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80046ec:	f043 030b 	orr.w	r3, r3, #11
 80046f0:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80046f4:	69fb      	ldr	r3, [r7, #28]
 80046f6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80046fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046fc:	69fa      	ldr	r2, [r7, #28]
 80046fe:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004702:	f043 030b 	orr.w	r3, r3, #11
 8004706:	6453      	str	r3, [r2, #68]	@ 0x44
 8004708:	e015      	b.n	8004736 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800470a:	69fb      	ldr	r3, [r7, #28]
 800470c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004710:	695b      	ldr	r3, [r3, #20]
 8004712:	69fa      	ldr	r2, [r7, #28]
 8004714:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004718:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800471c:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8004720:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8004722:	69fb      	ldr	r3, [r7, #28]
 8004724:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004728:	691b      	ldr	r3, [r3, #16]
 800472a:	69fa      	ldr	r2, [r7, #28]
 800472c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004730:	f043 030b 	orr.w	r3, r3, #11
 8004734:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8004736:	69fb      	ldr	r3, [r7, #28]
 8004738:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	69fa      	ldr	r2, [r7, #28]
 8004740:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004744:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8004748:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6818      	ldr	r0, [r3, #0]
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004758:	461a      	mov	r2, r3
 800475a:	f003 f90f 	bl	800797c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	695a      	ldr	r2, [r3, #20]
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 800476c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	4618      	mov	r0, r3
 8004774:	f003 f83e 	bl	80077f4 <USB_ReadInterrupts>
 8004778:	4603      	mov	r3, r0
 800477a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800477e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004782:	d123      	bne.n	80047cc <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	4618      	mov	r0, r3
 800478a:	f003 f8d4 	bl	8007936 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	4618      	mov	r0, r3
 8004794:	f002 f98b 	bl	8006aae <USB_GetDevSpeed>
 8004798:	4603      	mov	r3, r0
 800479a:	461a      	mov	r2, r3
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681c      	ldr	r4, [r3, #0]
 80047a4:	f001 f9f2 	bl	8005b8c <HAL_RCC_GetHCLKFreq>
 80047a8:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80047ae:	461a      	mov	r2, r3
 80047b0:	4620      	mov	r0, r4
 80047b2:	f001 fe8f 	bl	80064d4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80047b6:	6878      	ldr	r0, [r7, #4]
 80047b8:	f005 f8b7 	bl	800992a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	695a      	ldr	r2, [r3, #20]
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 80047ca:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	4618      	mov	r0, r3
 80047d2:	f003 f80f 	bl	80077f4 <USB_ReadInterrupts>
 80047d6:	4603      	mov	r3, r0
 80047d8:	f003 0308 	and.w	r3, r3, #8
 80047dc:	2b08      	cmp	r3, #8
 80047de:	d10a      	bne.n	80047f6 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80047e0:	6878      	ldr	r0, [r7, #4]
 80047e2:	f005 f894 	bl	800990e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	695a      	ldr	r2, [r3, #20]
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f002 0208 	and.w	r2, r2, #8
 80047f4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	4618      	mov	r0, r3
 80047fc:	f002 fffa 	bl	80077f4 <USB_ReadInterrupts>
 8004800:	4603      	mov	r3, r0
 8004802:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004806:	2b80      	cmp	r3, #128	@ 0x80
 8004808:	d123      	bne.n	8004852 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800480a:	6a3b      	ldr	r3, [r7, #32]
 800480c:	699b      	ldr	r3, [r3, #24]
 800480e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004812:	6a3b      	ldr	r3, [r7, #32]
 8004814:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004816:	2301      	movs	r3, #1
 8004818:	627b      	str	r3, [r7, #36]	@ 0x24
 800481a:	e014      	b.n	8004846 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800481c:	6879      	ldr	r1, [r7, #4]
 800481e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004820:	4613      	mov	r3, r2
 8004822:	00db      	lsls	r3, r3, #3
 8004824:	4413      	add	r3, r2
 8004826:	009b      	lsls	r3, r3, #2
 8004828:	440b      	add	r3, r1
 800482a:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800482e:	781b      	ldrb	r3, [r3, #0]
 8004830:	2b01      	cmp	r3, #1
 8004832:	d105      	bne.n	8004840 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8004834:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004836:	b2db      	uxtb	r3, r3
 8004838:	4619      	mov	r1, r3
 800483a:	6878      	ldr	r0, [r7, #4]
 800483c:	f000 faf2 	bl	8004e24 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004840:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004842:	3301      	adds	r3, #1
 8004844:	627b      	str	r3, [r7, #36]	@ 0x24
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	791b      	ldrb	r3, [r3, #4]
 800484a:	461a      	mov	r2, r3
 800484c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800484e:	4293      	cmp	r3, r2
 8004850:	d3e4      	bcc.n	800481c <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	4618      	mov	r0, r3
 8004858:	f002 ffcc 	bl	80077f4 <USB_ReadInterrupts>
 800485c:	4603      	mov	r3, r0
 800485e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004862:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004866:	d13c      	bne.n	80048e2 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004868:	2301      	movs	r3, #1
 800486a:	627b      	str	r3, [r7, #36]	@ 0x24
 800486c:	e02b      	b.n	80048c6 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800486e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004870:	015a      	lsls	r2, r3, #5
 8004872:	69fb      	ldr	r3, [r7, #28]
 8004874:	4413      	add	r3, r2
 8004876:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800487e:	6879      	ldr	r1, [r7, #4]
 8004880:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004882:	4613      	mov	r3, r2
 8004884:	00db      	lsls	r3, r3, #3
 8004886:	4413      	add	r3, r2
 8004888:	009b      	lsls	r3, r3, #2
 800488a:	440b      	add	r3, r1
 800488c:	3318      	adds	r3, #24
 800488e:	781b      	ldrb	r3, [r3, #0]
 8004890:	2b01      	cmp	r3, #1
 8004892:	d115      	bne.n	80048c0 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8004894:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004896:	2b00      	cmp	r3, #0
 8004898:	da12      	bge.n	80048c0 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800489a:	6879      	ldr	r1, [r7, #4]
 800489c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800489e:	4613      	mov	r3, r2
 80048a0:	00db      	lsls	r3, r3, #3
 80048a2:	4413      	add	r3, r2
 80048a4:	009b      	lsls	r3, r3, #2
 80048a6:	440b      	add	r3, r1
 80048a8:	3317      	adds	r3, #23
 80048aa:	2201      	movs	r2, #1
 80048ac:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80048ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048b0:	b2db      	uxtb	r3, r3
 80048b2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80048b6:	b2db      	uxtb	r3, r3
 80048b8:	4619      	mov	r1, r3
 80048ba:	6878      	ldr	r0, [r7, #4]
 80048bc:	f000 fab2 	bl	8004e24 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80048c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048c2:	3301      	adds	r3, #1
 80048c4:	627b      	str	r3, [r7, #36]	@ 0x24
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	791b      	ldrb	r3, [r3, #4]
 80048ca:	461a      	mov	r2, r3
 80048cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d3cd      	bcc.n	800486e <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	695a      	ldr	r2, [r3, #20]
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 80048e0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	4618      	mov	r0, r3
 80048e8:	f002 ff84 	bl	80077f4 <USB_ReadInterrupts>
 80048ec:	4603      	mov	r3, r0
 80048ee:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80048f2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80048f6:	d156      	bne.n	80049a6 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80048f8:	2301      	movs	r3, #1
 80048fa:	627b      	str	r3, [r7, #36]	@ 0x24
 80048fc:	e045      	b.n	800498a <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80048fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004900:	015a      	lsls	r2, r3, #5
 8004902:	69fb      	ldr	r3, [r7, #28]
 8004904:	4413      	add	r3, r2
 8004906:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800490e:	6879      	ldr	r1, [r7, #4]
 8004910:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004912:	4613      	mov	r3, r2
 8004914:	00db      	lsls	r3, r3, #3
 8004916:	4413      	add	r3, r2
 8004918:	009b      	lsls	r3, r3, #2
 800491a:	440b      	add	r3, r1
 800491c:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8004920:	781b      	ldrb	r3, [r3, #0]
 8004922:	2b01      	cmp	r3, #1
 8004924:	d12e      	bne.n	8004984 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004926:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004928:	2b00      	cmp	r3, #0
 800492a:	da2b      	bge.n	8004984 <HAL_PCD_IRQHandler+0x8ae>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 800492c:	69bb      	ldr	r3, [r7, #24]
 800492e:	0c1a      	lsrs	r2, r3, #16
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8004936:	4053      	eors	r3, r2
 8004938:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800493c:	2b00      	cmp	r3, #0
 800493e:	d121      	bne.n	8004984 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8004940:	6879      	ldr	r1, [r7, #4]
 8004942:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004944:	4613      	mov	r3, r2
 8004946:	00db      	lsls	r3, r3, #3
 8004948:	4413      	add	r3, r2
 800494a:	009b      	lsls	r3, r3, #2
 800494c:	440b      	add	r3, r1
 800494e:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8004952:	2201      	movs	r2, #1
 8004954:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8004956:	6a3b      	ldr	r3, [r7, #32]
 8004958:	699b      	ldr	r3, [r3, #24]
 800495a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800495e:	6a3b      	ldr	r3, [r7, #32]
 8004960:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8004962:	6a3b      	ldr	r3, [r7, #32]
 8004964:	695b      	ldr	r3, [r3, #20]
 8004966:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800496a:	2b00      	cmp	r3, #0
 800496c:	d10a      	bne.n	8004984 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800496e:	69fb      	ldr	r3, [r7, #28]
 8004970:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004974:	685b      	ldr	r3, [r3, #4]
 8004976:	69fa      	ldr	r2, [r7, #28]
 8004978:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800497c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004980:	6053      	str	r3, [r2, #4]
            break;
 8004982:	e008      	b.n	8004996 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004984:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004986:	3301      	adds	r3, #1
 8004988:	627b      	str	r3, [r7, #36]	@ 0x24
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	791b      	ldrb	r3, [r3, #4]
 800498e:	461a      	mov	r2, r3
 8004990:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004992:	4293      	cmp	r3, r2
 8004994:	d3b3      	bcc.n	80048fe <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	695a      	ldr	r2, [r3, #20]
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 80049a4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	4618      	mov	r0, r3
 80049ac:	f002 ff22 	bl	80077f4 <USB_ReadInterrupts>
 80049b0:	4603      	mov	r3, r0
 80049b2:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80049b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80049ba:	d10a      	bne.n	80049d2 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80049bc:	6878      	ldr	r0, [r7, #4]
 80049be:	f005 f835 	bl	8009a2c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	695a      	ldr	r2, [r3, #20]
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80049d0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	4618      	mov	r0, r3
 80049d8:	f002 ff0c 	bl	80077f4 <USB_ReadInterrupts>
 80049dc:	4603      	mov	r3, r0
 80049de:	f003 0304 	and.w	r3, r3, #4
 80049e2:	2b04      	cmp	r3, #4
 80049e4:	d115      	bne.n	8004a12 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	685b      	ldr	r3, [r3, #4]
 80049ec:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80049ee:	69bb      	ldr	r3, [r7, #24]
 80049f0:	f003 0304 	and.w	r3, r3, #4
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d002      	beq.n	80049fe <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80049f8:	6878      	ldr	r0, [r7, #4]
 80049fa:	f005 f825 	bl	8009a48 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	6859      	ldr	r1, [r3, #4]
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	69ba      	ldr	r2, [r7, #24]
 8004a0a:	430a      	orrs	r2, r1
 8004a0c:	605a      	str	r2, [r3, #4]
 8004a0e:	e000      	b.n	8004a12 <HAL_PCD_IRQHandler+0x93c>
      return;
 8004a10:	bf00      	nop
    }
  }
}
 8004a12:	3734      	adds	r7, #52	@ 0x34
 8004a14:	46bd      	mov	sp, r7
 8004a16:	bd90      	pop	{r4, r7, pc}

08004a18 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b082      	sub	sp, #8
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
 8004a20:	460b      	mov	r3, r1
 8004a22:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004a2a:	2b01      	cmp	r3, #1
 8004a2c:	d101      	bne.n	8004a32 <HAL_PCD_SetAddress+0x1a>
 8004a2e:	2302      	movs	r3, #2
 8004a30:	e012      	b.n	8004a58 <HAL_PCD_SetAddress+0x40>
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	2201      	movs	r2, #1
 8004a36:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	78fa      	ldrb	r2, [r7, #3]
 8004a3e:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	78fa      	ldrb	r2, [r7, #3]
 8004a46:	4611      	mov	r1, r2
 8004a48:	4618      	mov	r0, r3
 8004a4a:	f002 fe6b 	bl	8007724 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	2200      	movs	r2, #0
 8004a52:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004a56:	2300      	movs	r3, #0
}
 8004a58:	4618      	mov	r0, r3
 8004a5a:	3708      	adds	r7, #8
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	bd80      	pop	{r7, pc}

08004a60 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b084      	sub	sp, #16
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
 8004a68:	4608      	mov	r0, r1
 8004a6a:	4611      	mov	r1, r2
 8004a6c:	461a      	mov	r2, r3
 8004a6e:	4603      	mov	r3, r0
 8004a70:	70fb      	strb	r3, [r7, #3]
 8004a72:	460b      	mov	r3, r1
 8004a74:	803b      	strh	r3, [r7, #0]
 8004a76:	4613      	mov	r3, r2
 8004a78:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8004a7a:	2300      	movs	r3, #0
 8004a7c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004a7e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	da0f      	bge.n	8004aa6 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004a86:	78fb      	ldrb	r3, [r7, #3]
 8004a88:	f003 020f 	and.w	r2, r3, #15
 8004a8c:	4613      	mov	r3, r2
 8004a8e:	00db      	lsls	r3, r3, #3
 8004a90:	4413      	add	r3, r2
 8004a92:	009b      	lsls	r3, r3, #2
 8004a94:	3310      	adds	r3, #16
 8004a96:	687a      	ldr	r2, [r7, #4]
 8004a98:	4413      	add	r3, r2
 8004a9a:	3304      	adds	r3, #4
 8004a9c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	2201      	movs	r2, #1
 8004aa2:	705a      	strb	r2, [r3, #1]
 8004aa4:	e00f      	b.n	8004ac6 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004aa6:	78fb      	ldrb	r3, [r7, #3]
 8004aa8:	f003 020f 	and.w	r2, r3, #15
 8004aac:	4613      	mov	r3, r2
 8004aae:	00db      	lsls	r3, r3, #3
 8004ab0:	4413      	add	r3, r2
 8004ab2:	009b      	lsls	r3, r3, #2
 8004ab4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004ab8:	687a      	ldr	r2, [r7, #4]
 8004aba:	4413      	add	r3, r2
 8004abc:	3304      	adds	r3, #4
 8004abe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004ac6:	78fb      	ldrb	r3, [r7, #3]
 8004ac8:	f003 030f 	and.w	r3, r3, #15
 8004acc:	b2da      	uxtb	r2, r3
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8004ad2:	883b      	ldrh	r3, [r7, #0]
 8004ad4:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	78ba      	ldrb	r2, [r7, #2]
 8004ae0:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	785b      	ldrb	r3, [r3, #1]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d004      	beq.n	8004af4 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	781b      	ldrb	r3, [r3, #0]
 8004aee:	461a      	mov	r2, r3
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004af4:	78bb      	ldrb	r3, [r7, #2]
 8004af6:	2b02      	cmp	r3, #2
 8004af8:	d102      	bne.n	8004b00 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	2200      	movs	r2, #0
 8004afe:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004b06:	2b01      	cmp	r3, #1
 8004b08:	d101      	bne.n	8004b0e <HAL_PCD_EP_Open+0xae>
 8004b0a:	2302      	movs	r3, #2
 8004b0c:	e00e      	b.n	8004b2c <HAL_PCD_EP_Open+0xcc>
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	2201      	movs	r2, #1
 8004b12:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	68f9      	ldr	r1, [r7, #12]
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	f001 ffeb 	bl	8006af8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2200      	movs	r2, #0
 8004b26:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8004b2a:	7afb      	ldrb	r3, [r7, #11]
}
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	3710      	adds	r7, #16
 8004b30:	46bd      	mov	sp, r7
 8004b32:	bd80      	pop	{r7, pc}

08004b34 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004b34:	b580      	push	{r7, lr}
 8004b36:	b084      	sub	sp, #16
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
 8004b3c:	460b      	mov	r3, r1
 8004b3e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004b40:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	da0f      	bge.n	8004b68 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004b48:	78fb      	ldrb	r3, [r7, #3]
 8004b4a:	f003 020f 	and.w	r2, r3, #15
 8004b4e:	4613      	mov	r3, r2
 8004b50:	00db      	lsls	r3, r3, #3
 8004b52:	4413      	add	r3, r2
 8004b54:	009b      	lsls	r3, r3, #2
 8004b56:	3310      	adds	r3, #16
 8004b58:	687a      	ldr	r2, [r7, #4]
 8004b5a:	4413      	add	r3, r2
 8004b5c:	3304      	adds	r3, #4
 8004b5e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	2201      	movs	r2, #1
 8004b64:	705a      	strb	r2, [r3, #1]
 8004b66:	e00f      	b.n	8004b88 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004b68:	78fb      	ldrb	r3, [r7, #3]
 8004b6a:	f003 020f 	and.w	r2, r3, #15
 8004b6e:	4613      	mov	r3, r2
 8004b70:	00db      	lsls	r3, r3, #3
 8004b72:	4413      	add	r3, r2
 8004b74:	009b      	lsls	r3, r3, #2
 8004b76:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004b7a:	687a      	ldr	r2, [r7, #4]
 8004b7c:	4413      	add	r3, r2
 8004b7e:	3304      	adds	r3, #4
 8004b80:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	2200      	movs	r2, #0
 8004b86:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8004b88:	78fb      	ldrb	r3, [r7, #3]
 8004b8a:	f003 030f 	and.w	r3, r3, #15
 8004b8e:	b2da      	uxtb	r2, r3
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004b9a:	2b01      	cmp	r3, #1
 8004b9c:	d101      	bne.n	8004ba2 <HAL_PCD_EP_Close+0x6e>
 8004b9e:	2302      	movs	r3, #2
 8004ba0:	e00e      	b.n	8004bc0 <HAL_PCD_EP_Close+0x8c>
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	2201      	movs	r2, #1
 8004ba6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	68f9      	ldr	r1, [r7, #12]
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	f002 f829 	bl	8006c08 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	2200      	movs	r2, #0
 8004bba:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8004bbe:	2300      	movs	r3, #0
}
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	3710      	adds	r7, #16
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	bd80      	pop	{r7, pc}

08004bc8 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b086      	sub	sp, #24
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	60f8      	str	r0, [r7, #12]
 8004bd0:	607a      	str	r2, [r7, #4]
 8004bd2:	603b      	str	r3, [r7, #0]
 8004bd4:	460b      	mov	r3, r1
 8004bd6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004bd8:	7afb      	ldrb	r3, [r7, #11]
 8004bda:	f003 020f 	and.w	r2, r3, #15
 8004bde:	4613      	mov	r3, r2
 8004be0:	00db      	lsls	r3, r3, #3
 8004be2:	4413      	add	r3, r2
 8004be4:	009b      	lsls	r3, r3, #2
 8004be6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004bea:	68fa      	ldr	r2, [r7, #12]
 8004bec:	4413      	add	r3, r2
 8004bee:	3304      	adds	r3, #4
 8004bf0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004bf2:	697b      	ldr	r3, [r7, #20]
 8004bf4:	687a      	ldr	r2, [r7, #4]
 8004bf6:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004bf8:	697b      	ldr	r3, [r7, #20]
 8004bfa:	683a      	ldr	r2, [r7, #0]
 8004bfc:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8004bfe:	697b      	ldr	r3, [r7, #20]
 8004c00:	2200      	movs	r2, #0
 8004c02:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8004c04:	697b      	ldr	r3, [r7, #20]
 8004c06:	2200      	movs	r2, #0
 8004c08:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004c0a:	7afb      	ldrb	r3, [r7, #11]
 8004c0c:	f003 030f 	and.w	r3, r3, #15
 8004c10:	b2da      	uxtb	r2, r3
 8004c12:	697b      	ldr	r3, [r7, #20]
 8004c14:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	799b      	ldrb	r3, [r3, #6]
 8004c1a:	2b01      	cmp	r3, #1
 8004c1c:	d102      	bne.n	8004c24 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004c1e:	687a      	ldr	r2, [r7, #4]
 8004c20:	697b      	ldr	r3, [r7, #20]
 8004c22:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	6818      	ldr	r0, [r3, #0]
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	799b      	ldrb	r3, [r3, #6]
 8004c2c:	461a      	mov	r2, r3
 8004c2e:	6979      	ldr	r1, [r7, #20]
 8004c30:	f002 f8c6 	bl	8006dc0 <USB_EPStartXfer>

  return HAL_OK;
 8004c34:	2300      	movs	r3, #0
}
 8004c36:	4618      	mov	r0, r3
 8004c38:	3718      	adds	r7, #24
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	bd80      	pop	{r7, pc}

08004c3e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004c3e:	b580      	push	{r7, lr}
 8004c40:	b086      	sub	sp, #24
 8004c42:	af00      	add	r7, sp, #0
 8004c44:	60f8      	str	r0, [r7, #12]
 8004c46:	607a      	str	r2, [r7, #4]
 8004c48:	603b      	str	r3, [r7, #0]
 8004c4a:	460b      	mov	r3, r1
 8004c4c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004c4e:	7afb      	ldrb	r3, [r7, #11]
 8004c50:	f003 020f 	and.w	r2, r3, #15
 8004c54:	4613      	mov	r3, r2
 8004c56:	00db      	lsls	r3, r3, #3
 8004c58:	4413      	add	r3, r2
 8004c5a:	009b      	lsls	r3, r3, #2
 8004c5c:	3310      	adds	r3, #16
 8004c5e:	68fa      	ldr	r2, [r7, #12]
 8004c60:	4413      	add	r3, r2
 8004c62:	3304      	adds	r3, #4
 8004c64:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004c66:	697b      	ldr	r3, [r7, #20]
 8004c68:	687a      	ldr	r2, [r7, #4]
 8004c6a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004c6c:	697b      	ldr	r3, [r7, #20]
 8004c6e:	683a      	ldr	r2, [r7, #0]
 8004c70:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8004c72:	697b      	ldr	r3, [r7, #20]
 8004c74:	2200      	movs	r2, #0
 8004c76:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8004c78:	697b      	ldr	r3, [r7, #20]
 8004c7a:	2201      	movs	r2, #1
 8004c7c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004c7e:	7afb      	ldrb	r3, [r7, #11]
 8004c80:	f003 030f 	and.w	r3, r3, #15
 8004c84:	b2da      	uxtb	r2, r3
 8004c86:	697b      	ldr	r3, [r7, #20]
 8004c88:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	799b      	ldrb	r3, [r3, #6]
 8004c8e:	2b01      	cmp	r3, #1
 8004c90:	d102      	bne.n	8004c98 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004c92:	687a      	ldr	r2, [r7, #4]
 8004c94:	697b      	ldr	r3, [r7, #20]
 8004c96:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	6818      	ldr	r0, [r3, #0]
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	799b      	ldrb	r3, [r3, #6]
 8004ca0:	461a      	mov	r2, r3
 8004ca2:	6979      	ldr	r1, [r7, #20]
 8004ca4:	f002 f88c 	bl	8006dc0 <USB_EPStartXfer>

  return HAL_OK;
 8004ca8:	2300      	movs	r3, #0
}
 8004caa:	4618      	mov	r0, r3
 8004cac:	3718      	adds	r7, #24
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	bd80      	pop	{r7, pc}

08004cb2 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004cb2:	b580      	push	{r7, lr}
 8004cb4:	b084      	sub	sp, #16
 8004cb6:	af00      	add	r7, sp, #0
 8004cb8:	6078      	str	r0, [r7, #4]
 8004cba:	460b      	mov	r3, r1
 8004cbc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004cbe:	78fb      	ldrb	r3, [r7, #3]
 8004cc0:	f003 030f 	and.w	r3, r3, #15
 8004cc4:	687a      	ldr	r2, [r7, #4]
 8004cc6:	7912      	ldrb	r2, [r2, #4]
 8004cc8:	4293      	cmp	r3, r2
 8004cca:	d901      	bls.n	8004cd0 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004ccc:	2301      	movs	r3, #1
 8004cce:	e04f      	b.n	8004d70 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004cd0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	da0f      	bge.n	8004cf8 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004cd8:	78fb      	ldrb	r3, [r7, #3]
 8004cda:	f003 020f 	and.w	r2, r3, #15
 8004cde:	4613      	mov	r3, r2
 8004ce0:	00db      	lsls	r3, r3, #3
 8004ce2:	4413      	add	r3, r2
 8004ce4:	009b      	lsls	r3, r3, #2
 8004ce6:	3310      	adds	r3, #16
 8004ce8:	687a      	ldr	r2, [r7, #4]
 8004cea:	4413      	add	r3, r2
 8004cec:	3304      	adds	r3, #4
 8004cee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	2201      	movs	r2, #1
 8004cf4:	705a      	strb	r2, [r3, #1]
 8004cf6:	e00d      	b.n	8004d14 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004cf8:	78fa      	ldrb	r2, [r7, #3]
 8004cfa:	4613      	mov	r3, r2
 8004cfc:	00db      	lsls	r3, r3, #3
 8004cfe:	4413      	add	r3, r2
 8004d00:	009b      	lsls	r3, r3, #2
 8004d02:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004d06:	687a      	ldr	r2, [r7, #4]
 8004d08:	4413      	add	r3, r2
 8004d0a:	3304      	adds	r3, #4
 8004d0c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	2200      	movs	r2, #0
 8004d12:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	2201      	movs	r2, #1
 8004d18:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004d1a:	78fb      	ldrb	r3, [r7, #3]
 8004d1c:	f003 030f 	and.w	r3, r3, #15
 8004d20:	b2da      	uxtb	r2, r3
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004d2c:	2b01      	cmp	r3, #1
 8004d2e:	d101      	bne.n	8004d34 <HAL_PCD_EP_SetStall+0x82>
 8004d30:	2302      	movs	r3, #2
 8004d32:	e01d      	b.n	8004d70 <HAL_PCD_EP_SetStall+0xbe>
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2201      	movs	r2, #1
 8004d38:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	68f9      	ldr	r1, [r7, #12]
 8004d42:	4618      	mov	r0, r3
 8004d44:	f002 fc1a 	bl	800757c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004d48:	78fb      	ldrb	r3, [r7, #3]
 8004d4a:	f003 030f 	and.w	r3, r3, #15
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d109      	bne.n	8004d66 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6818      	ldr	r0, [r3, #0]
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	7999      	ldrb	r1, [r3, #6]
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004d60:	461a      	mov	r2, r3
 8004d62:	f002 fe0b 	bl	800797c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	2200      	movs	r2, #0
 8004d6a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004d6e:	2300      	movs	r3, #0
}
 8004d70:	4618      	mov	r0, r3
 8004d72:	3710      	adds	r7, #16
 8004d74:	46bd      	mov	sp, r7
 8004d76:	bd80      	pop	{r7, pc}

08004d78 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	b084      	sub	sp, #16
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
 8004d80:	460b      	mov	r3, r1
 8004d82:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004d84:	78fb      	ldrb	r3, [r7, #3]
 8004d86:	f003 030f 	and.w	r3, r3, #15
 8004d8a:	687a      	ldr	r2, [r7, #4]
 8004d8c:	7912      	ldrb	r2, [r2, #4]
 8004d8e:	4293      	cmp	r3, r2
 8004d90:	d901      	bls.n	8004d96 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004d92:	2301      	movs	r3, #1
 8004d94:	e042      	b.n	8004e1c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004d96:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	da0f      	bge.n	8004dbe <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004d9e:	78fb      	ldrb	r3, [r7, #3]
 8004da0:	f003 020f 	and.w	r2, r3, #15
 8004da4:	4613      	mov	r3, r2
 8004da6:	00db      	lsls	r3, r3, #3
 8004da8:	4413      	add	r3, r2
 8004daa:	009b      	lsls	r3, r3, #2
 8004dac:	3310      	adds	r3, #16
 8004dae:	687a      	ldr	r2, [r7, #4]
 8004db0:	4413      	add	r3, r2
 8004db2:	3304      	adds	r3, #4
 8004db4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	2201      	movs	r2, #1
 8004dba:	705a      	strb	r2, [r3, #1]
 8004dbc:	e00f      	b.n	8004dde <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004dbe:	78fb      	ldrb	r3, [r7, #3]
 8004dc0:	f003 020f 	and.w	r2, r3, #15
 8004dc4:	4613      	mov	r3, r2
 8004dc6:	00db      	lsls	r3, r3, #3
 8004dc8:	4413      	add	r3, r2
 8004dca:	009b      	lsls	r3, r3, #2
 8004dcc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004dd0:	687a      	ldr	r2, [r7, #4]
 8004dd2:	4413      	add	r3, r2
 8004dd4:	3304      	adds	r3, #4
 8004dd6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	2200      	movs	r2, #0
 8004ddc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	2200      	movs	r2, #0
 8004de2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004de4:	78fb      	ldrb	r3, [r7, #3]
 8004de6:	f003 030f 	and.w	r3, r3, #15
 8004dea:	b2da      	uxtb	r2, r3
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004df6:	2b01      	cmp	r3, #1
 8004df8:	d101      	bne.n	8004dfe <HAL_PCD_EP_ClrStall+0x86>
 8004dfa:	2302      	movs	r3, #2
 8004dfc:	e00e      	b.n	8004e1c <HAL_PCD_EP_ClrStall+0xa4>
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	2201      	movs	r2, #1
 8004e02:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	68f9      	ldr	r1, [r7, #12]
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	f002 fc23 	bl	8007658 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	2200      	movs	r2, #0
 8004e16:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004e1a:	2300      	movs	r3, #0
}
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	3710      	adds	r7, #16
 8004e20:	46bd      	mov	sp, r7
 8004e22:	bd80      	pop	{r7, pc}

08004e24 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004e24:	b580      	push	{r7, lr}
 8004e26:	b084      	sub	sp, #16
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6078      	str	r0, [r7, #4]
 8004e2c:	460b      	mov	r3, r1
 8004e2e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8004e30:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	da0c      	bge.n	8004e52 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004e38:	78fb      	ldrb	r3, [r7, #3]
 8004e3a:	f003 020f 	and.w	r2, r3, #15
 8004e3e:	4613      	mov	r3, r2
 8004e40:	00db      	lsls	r3, r3, #3
 8004e42:	4413      	add	r3, r2
 8004e44:	009b      	lsls	r3, r3, #2
 8004e46:	3310      	adds	r3, #16
 8004e48:	687a      	ldr	r2, [r7, #4]
 8004e4a:	4413      	add	r3, r2
 8004e4c:	3304      	adds	r3, #4
 8004e4e:	60fb      	str	r3, [r7, #12]
 8004e50:	e00c      	b.n	8004e6c <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004e52:	78fb      	ldrb	r3, [r7, #3]
 8004e54:	f003 020f 	and.w	r2, r3, #15
 8004e58:	4613      	mov	r3, r2
 8004e5a:	00db      	lsls	r3, r3, #3
 8004e5c:	4413      	add	r3, r2
 8004e5e:	009b      	lsls	r3, r3, #2
 8004e60:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004e64:	687a      	ldr	r2, [r7, #4]
 8004e66:	4413      	add	r3, r2
 8004e68:	3304      	adds	r3, #4
 8004e6a:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	68f9      	ldr	r1, [r7, #12]
 8004e72:	4618      	mov	r0, r3
 8004e74:	f002 fa42 	bl	80072fc <USB_EPStopXfer>
 8004e78:	4603      	mov	r3, r0
 8004e7a:	72fb      	strb	r3, [r7, #11]

  return ret;
 8004e7c:	7afb      	ldrb	r3, [r7, #11]
}
 8004e7e:	4618      	mov	r0, r3
 8004e80:	3710      	adds	r7, #16
 8004e82:	46bd      	mov	sp, r7
 8004e84:	bd80      	pop	{r7, pc}

08004e86 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004e86:	b580      	push	{r7, lr}
 8004e88:	b08a      	sub	sp, #40	@ 0x28
 8004e8a:	af02      	add	r7, sp, #8
 8004e8c:	6078      	str	r0, [r7, #4]
 8004e8e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e96:	697b      	ldr	r3, [r7, #20]
 8004e98:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004e9a:	683a      	ldr	r2, [r7, #0]
 8004e9c:	4613      	mov	r3, r2
 8004e9e:	00db      	lsls	r3, r3, #3
 8004ea0:	4413      	add	r3, r2
 8004ea2:	009b      	lsls	r3, r3, #2
 8004ea4:	3310      	adds	r3, #16
 8004ea6:	687a      	ldr	r2, [r7, #4]
 8004ea8:	4413      	add	r3, r2
 8004eaa:	3304      	adds	r3, #4
 8004eac:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	695a      	ldr	r2, [r3, #20]
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	691b      	ldr	r3, [r3, #16]
 8004eb6:	429a      	cmp	r2, r3
 8004eb8:	d901      	bls.n	8004ebe <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004eba:	2301      	movs	r3, #1
 8004ebc:	e06b      	b.n	8004f96 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	691a      	ldr	r2, [r3, #16]
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	695b      	ldr	r3, [r3, #20]
 8004ec6:	1ad3      	subs	r3, r2, r3
 8004ec8:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	689b      	ldr	r3, [r3, #8]
 8004ece:	69fa      	ldr	r2, [r7, #28]
 8004ed0:	429a      	cmp	r2, r3
 8004ed2:	d902      	bls.n	8004eda <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	689b      	ldr	r3, [r3, #8]
 8004ed8:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004eda:	69fb      	ldr	r3, [r7, #28]
 8004edc:	3303      	adds	r3, #3
 8004ede:	089b      	lsrs	r3, r3, #2
 8004ee0:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004ee2:	e02a      	b.n	8004f3a <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	691a      	ldr	r2, [r3, #16]
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	695b      	ldr	r3, [r3, #20]
 8004eec:	1ad3      	subs	r3, r2, r3
 8004eee:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	689b      	ldr	r3, [r3, #8]
 8004ef4:	69fa      	ldr	r2, [r7, #28]
 8004ef6:	429a      	cmp	r2, r3
 8004ef8:	d902      	bls.n	8004f00 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	689b      	ldr	r3, [r3, #8]
 8004efe:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004f00:	69fb      	ldr	r3, [r7, #28]
 8004f02:	3303      	adds	r3, #3
 8004f04:	089b      	lsrs	r3, r3, #2
 8004f06:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	68d9      	ldr	r1, [r3, #12]
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	b2da      	uxtb	r2, r3
 8004f10:	69fb      	ldr	r3, [r7, #28]
 8004f12:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004f18:	9300      	str	r3, [sp, #0]
 8004f1a:	4603      	mov	r3, r0
 8004f1c:	6978      	ldr	r0, [r7, #20]
 8004f1e:	f002 fa97 	bl	8007450 <USB_WritePacket>

    ep->xfer_buff  += len;
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	68da      	ldr	r2, [r3, #12]
 8004f26:	69fb      	ldr	r3, [r7, #28]
 8004f28:	441a      	add	r2, r3
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	695a      	ldr	r2, [r3, #20]
 8004f32:	69fb      	ldr	r3, [r7, #28]
 8004f34:	441a      	add	r2, r3
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004f3a:	683b      	ldr	r3, [r7, #0]
 8004f3c:	015a      	lsls	r2, r3, #5
 8004f3e:	693b      	ldr	r3, [r7, #16]
 8004f40:	4413      	add	r3, r2
 8004f42:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004f46:	699b      	ldr	r3, [r3, #24]
 8004f48:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004f4a:	69ba      	ldr	r2, [r7, #24]
 8004f4c:	429a      	cmp	r2, r3
 8004f4e:	d809      	bhi.n	8004f64 <PCD_WriteEmptyTxFifo+0xde>
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	695a      	ldr	r2, [r3, #20]
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004f58:	429a      	cmp	r2, r3
 8004f5a:	d203      	bcs.n	8004f64 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	691b      	ldr	r3, [r3, #16]
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d1bf      	bne.n	8004ee4 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	691a      	ldr	r2, [r3, #16]
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	695b      	ldr	r3, [r3, #20]
 8004f6c:	429a      	cmp	r2, r3
 8004f6e:	d811      	bhi.n	8004f94 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	f003 030f 	and.w	r3, r3, #15
 8004f76:	2201      	movs	r2, #1
 8004f78:	fa02 f303 	lsl.w	r3, r2, r3
 8004f7c:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004f7e:	693b      	ldr	r3, [r7, #16]
 8004f80:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004f84:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004f86:	68bb      	ldr	r3, [r7, #8]
 8004f88:	43db      	mvns	r3, r3
 8004f8a:	6939      	ldr	r1, [r7, #16]
 8004f8c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004f90:	4013      	ands	r3, r2
 8004f92:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8004f94:	2300      	movs	r3, #0
}
 8004f96:	4618      	mov	r0, r3
 8004f98:	3720      	adds	r7, #32
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	bd80      	pop	{r7, pc}
	...

08004fa0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	b088      	sub	sp, #32
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
 8004fa8:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fb0:	69fb      	ldr	r3, [r7, #28]
 8004fb2:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004fb4:	69fb      	ldr	r3, [r7, #28]
 8004fb6:	333c      	adds	r3, #60	@ 0x3c
 8004fb8:	3304      	adds	r3, #4
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	015a      	lsls	r2, r3, #5
 8004fc2:	69bb      	ldr	r3, [r7, #24]
 8004fc4:	4413      	add	r3, r2
 8004fc6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004fca:	689b      	ldr	r3, [r3, #8]
 8004fcc:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	799b      	ldrb	r3, [r3, #6]
 8004fd2:	2b01      	cmp	r3, #1
 8004fd4:	d17b      	bne.n	80050ce <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004fd6:	693b      	ldr	r3, [r7, #16]
 8004fd8:	f003 0308 	and.w	r3, r3, #8
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d015      	beq.n	800500c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004fe0:	697b      	ldr	r3, [r7, #20]
 8004fe2:	4a61      	ldr	r2, [pc, #388]	@ (8005168 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004fe4:	4293      	cmp	r3, r2
 8004fe6:	f240 80b9 	bls.w	800515c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004fea:	693b      	ldr	r3, [r7, #16]
 8004fec:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	f000 80b3 	beq.w	800515c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	015a      	lsls	r2, r3, #5
 8004ffa:	69bb      	ldr	r3, [r7, #24]
 8004ffc:	4413      	add	r3, r2
 8004ffe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005002:	461a      	mov	r2, r3
 8005004:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005008:	6093      	str	r3, [r2, #8]
 800500a:	e0a7      	b.n	800515c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800500c:	693b      	ldr	r3, [r7, #16]
 800500e:	f003 0320 	and.w	r3, r3, #32
 8005012:	2b00      	cmp	r3, #0
 8005014:	d009      	beq.n	800502a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	015a      	lsls	r2, r3, #5
 800501a:	69bb      	ldr	r3, [r7, #24]
 800501c:	4413      	add	r3, r2
 800501e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005022:	461a      	mov	r2, r3
 8005024:	2320      	movs	r3, #32
 8005026:	6093      	str	r3, [r2, #8]
 8005028:	e098      	b.n	800515c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800502a:	693b      	ldr	r3, [r7, #16]
 800502c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005030:	2b00      	cmp	r3, #0
 8005032:	f040 8093 	bne.w	800515c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005036:	697b      	ldr	r3, [r7, #20]
 8005038:	4a4b      	ldr	r2, [pc, #300]	@ (8005168 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800503a:	4293      	cmp	r3, r2
 800503c:	d90f      	bls.n	800505e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800503e:	693b      	ldr	r3, [r7, #16]
 8005040:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005044:	2b00      	cmp	r3, #0
 8005046:	d00a      	beq.n	800505e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	015a      	lsls	r2, r3, #5
 800504c:	69bb      	ldr	r3, [r7, #24]
 800504e:	4413      	add	r3, r2
 8005050:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005054:	461a      	mov	r2, r3
 8005056:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800505a:	6093      	str	r3, [r2, #8]
 800505c:	e07e      	b.n	800515c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800505e:	683a      	ldr	r2, [r7, #0]
 8005060:	4613      	mov	r3, r2
 8005062:	00db      	lsls	r3, r3, #3
 8005064:	4413      	add	r3, r2
 8005066:	009b      	lsls	r3, r3, #2
 8005068:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800506c:	687a      	ldr	r2, [r7, #4]
 800506e:	4413      	add	r3, r2
 8005070:	3304      	adds	r3, #4
 8005072:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	6a1a      	ldr	r2, [r3, #32]
 8005078:	683b      	ldr	r3, [r7, #0]
 800507a:	0159      	lsls	r1, r3, #5
 800507c:	69bb      	ldr	r3, [r7, #24]
 800507e:	440b      	add	r3, r1
 8005080:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005084:	691b      	ldr	r3, [r3, #16]
 8005086:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800508a:	1ad2      	subs	r2, r2, r3
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	2b00      	cmp	r3, #0
 8005094:	d114      	bne.n	80050c0 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	691b      	ldr	r3, [r3, #16]
 800509a:	2b00      	cmp	r3, #0
 800509c:	d109      	bne.n	80050b2 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	6818      	ldr	r0, [r3, #0]
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80050a8:	461a      	mov	r2, r3
 80050aa:	2101      	movs	r1, #1
 80050ac:	f002 fc66 	bl	800797c <USB_EP0_OutStart>
 80050b0:	e006      	b.n	80050c0 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	68da      	ldr	r2, [r3, #12]
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	695b      	ldr	r3, [r3, #20]
 80050ba:	441a      	add	r2, r3
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	b2db      	uxtb	r3, r3
 80050c4:	4619      	mov	r1, r3
 80050c6:	6878      	ldr	r0, [r7, #4]
 80050c8:	f004 fbec 	bl	80098a4 <HAL_PCD_DataOutStageCallback>
 80050cc:	e046      	b.n	800515c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80050ce:	697b      	ldr	r3, [r7, #20]
 80050d0:	4a26      	ldr	r2, [pc, #152]	@ (800516c <PCD_EP_OutXfrComplete_int+0x1cc>)
 80050d2:	4293      	cmp	r3, r2
 80050d4:	d124      	bne.n	8005120 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80050d6:	693b      	ldr	r3, [r7, #16]
 80050d8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d00a      	beq.n	80050f6 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	015a      	lsls	r2, r3, #5
 80050e4:	69bb      	ldr	r3, [r7, #24]
 80050e6:	4413      	add	r3, r2
 80050e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80050ec:	461a      	mov	r2, r3
 80050ee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80050f2:	6093      	str	r3, [r2, #8]
 80050f4:	e032      	b.n	800515c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80050f6:	693b      	ldr	r3, [r7, #16]
 80050f8:	f003 0320 	and.w	r3, r3, #32
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d008      	beq.n	8005112 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	015a      	lsls	r2, r3, #5
 8005104:	69bb      	ldr	r3, [r7, #24]
 8005106:	4413      	add	r3, r2
 8005108:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800510c:	461a      	mov	r2, r3
 800510e:	2320      	movs	r3, #32
 8005110:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005112:	683b      	ldr	r3, [r7, #0]
 8005114:	b2db      	uxtb	r3, r3
 8005116:	4619      	mov	r1, r3
 8005118:	6878      	ldr	r0, [r7, #4]
 800511a:	f004 fbc3 	bl	80098a4 <HAL_PCD_DataOutStageCallback>
 800511e:	e01d      	b.n	800515c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8005120:	683b      	ldr	r3, [r7, #0]
 8005122:	2b00      	cmp	r3, #0
 8005124:	d114      	bne.n	8005150 <PCD_EP_OutXfrComplete_int+0x1b0>
 8005126:	6879      	ldr	r1, [r7, #4]
 8005128:	683a      	ldr	r2, [r7, #0]
 800512a:	4613      	mov	r3, r2
 800512c:	00db      	lsls	r3, r3, #3
 800512e:	4413      	add	r3, r2
 8005130:	009b      	lsls	r3, r3, #2
 8005132:	440b      	add	r3, r1
 8005134:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	2b00      	cmp	r3, #0
 800513c:	d108      	bne.n	8005150 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6818      	ldr	r0, [r3, #0]
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005148:	461a      	mov	r2, r3
 800514a:	2100      	movs	r1, #0
 800514c:	f002 fc16 	bl	800797c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	b2db      	uxtb	r3, r3
 8005154:	4619      	mov	r1, r3
 8005156:	6878      	ldr	r0, [r7, #4]
 8005158:	f004 fba4 	bl	80098a4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800515c:	2300      	movs	r3, #0
}
 800515e:	4618      	mov	r0, r3
 8005160:	3720      	adds	r7, #32
 8005162:	46bd      	mov	sp, r7
 8005164:	bd80      	pop	{r7, pc}
 8005166:	bf00      	nop
 8005168:	4f54300a 	.word	0x4f54300a
 800516c:	4f54310a 	.word	0x4f54310a

08005170 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005170:	b580      	push	{r7, lr}
 8005172:	b086      	sub	sp, #24
 8005174:	af00      	add	r7, sp, #0
 8005176:	6078      	str	r0, [r7, #4]
 8005178:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005180:	697b      	ldr	r3, [r7, #20]
 8005182:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8005184:	697b      	ldr	r3, [r7, #20]
 8005186:	333c      	adds	r3, #60	@ 0x3c
 8005188:	3304      	adds	r3, #4
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800518e:	683b      	ldr	r3, [r7, #0]
 8005190:	015a      	lsls	r2, r3, #5
 8005192:	693b      	ldr	r3, [r7, #16]
 8005194:	4413      	add	r3, r2
 8005196:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800519a:	689b      	ldr	r3, [r3, #8]
 800519c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	4a15      	ldr	r2, [pc, #84]	@ (80051f8 <PCD_EP_OutSetupPacket_int+0x88>)
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d90e      	bls.n	80051c4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80051a6:	68bb      	ldr	r3, [r7, #8]
 80051a8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d009      	beq.n	80051c4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80051b0:	683b      	ldr	r3, [r7, #0]
 80051b2:	015a      	lsls	r2, r3, #5
 80051b4:	693b      	ldr	r3, [r7, #16]
 80051b6:	4413      	add	r3, r2
 80051b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80051bc:	461a      	mov	r2, r3
 80051be:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80051c2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80051c4:	6878      	ldr	r0, [r7, #4]
 80051c6:	f004 fb5b 	bl	8009880 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	4a0a      	ldr	r2, [pc, #40]	@ (80051f8 <PCD_EP_OutSetupPacket_int+0x88>)
 80051ce:	4293      	cmp	r3, r2
 80051d0:	d90c      	bls.n	80051ec <PCD_EP_OutSetupPacket_int+0x7c>
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	799b      	ldrb	r3, [r3, #6]
 80051d6:	2b01      	cmp	r3, #1
 80051d8:	d108      	bne.n	80051ec <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	6818      	ldr	r0, [r3, #0]
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80051e4:	461a      	mov	r2, r3
 80051e6:	2101      	movs	r1, #1
 80051e8:	f002 fbc8 	bl	800797c <USB_EP0_OutStart>
  }

  return HAL_OK;
 80051ec:	2300      	movs	r3, #0
}
 80051ee:	4618      	mov	r0, r3
 80051f0:	3718      	adds	r7, #24
 80051f2:	46bd      	mov	sp, r7
 80051f4:	bd80      	pop	{r7, pc}
 80051f6:	bf00      	nop
 80051f8:	4f54300a 	.word	0x4f54300a

080051fc <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80051fc:	b480      	push	{r7}
 80051fe:	b085      	sub	sp, #20
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]
 8005204:	460b      	mov	r3, r1
 8005206:	70fb      	strb	r3, [r7, #3]
 8005208:	4613      	mov	r3, r2
 800520a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005212:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8005214:	78fb      	ldrb	r3, [r7, #3]
 8005216:	2b00      	cmp	r3, #0
 8005218:	d107      	bne.n	800522a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800521a:	883b      	ldrh	r3, [r7, #0]
 800521c:	0419      	lsls	r1, r3, #16
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	68ba      	ldr	r2, [r7, #8]
 8005224:	430a      	orrs	r2, r1
 8005226:	629a      	str	r2, [r3, #40]	@ 0x28
 8005228:	e028      	b.n	800527c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005230:	0c1b      	lsrs	r3, r3, #16
 8005232:	68ba      	ldr	r2, [r7, #8]
 8005234:	4413      	add	r3, r2
 8005236:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005238:	2300      	movs	r3, #0
 800523a:	73fb      	strb	r3, [r7, #15]
 800523c:	e00d      	b.n	800525a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681a      	ldr	r2, [r3, #0]
 8005242:	7bfb      	ldrb	r3, [r7, #15]
 8005244:	3340      	adds	r3, #64	@ 0x40
 8005246:	009b      	lsls	r3, r3, #2
 8005248:	4413      	add	r3, r2
 800524a:	685b      	ldr	r3, [r3, #4]
 800524c:	0c1b      	lsrs	r3, r3, #16
 800524e:	68ba      	ldr	r2, [r7, #8]
 8005250:	4413      	add	r3, r2
 8005252:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005254:	7bfb      	ldrb	r3, [r7, #15]
 8005256:	3301      	adds	r3, #1
 8005258:	73fb      	strb	r3, [r7, #15]
 800525a:	7bfa      	ldrb	r2, [r7, #15]
 800525c:	78fb      	ldrb	r3, [r7, #3]
 800525e:	3b01      	subs	r3, #1
 8005260:	429a      	cmp	r2, r3
 8005262:	d3ec      	bcc.n	800523e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8005264:	883b      	ldrh	r3, [r7, #0]
 8005266:	0418      	lsls	r0, r3, #16
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	6819      	ldr	r1, [r3, #0]
 800526c:	78fb      	ldrb	r3, [r7, #3]
 800526e:	3b01      	subs	r3, #1
 8005270:	68ba      	ldr	r2, [r7, #8]
 8005272:	4302      	orrs	r2, r0
 8005274:	3340      	adds	r3, #64	@ 0x40
 8005276:	009b      	lsls	r3, r3, #2
 8005278:	440b      	add	r3, r1
 800527a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800527c:	2300      	movs	r3, #0
}
 800527e:	4618      	mov	r0, r3
 8005280:	3714      	adds	r7, #20
 8005282:	46bd      	mov	sp, r7
 8005284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005288:	4770      	bx	lr

0800528a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800528a:	b480      	push	{r7}
 800528c:	b083      	sub	sp, #12
 800528e:	af00      	add	r7, sp, #0
 8005290:	6078      	str	r0, [r7, #4]
 8005292:	460b      	mov	r3, r1
 8005294:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	887a      	ldrh	r2, [r7, #2]
 800529c:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800529e:	2300      	movs	r3, #0
}
 80052a0:	4618      	mov	r0, r3
 80052a2:	370c      	adds	r7, #12
 80052a4:	46bd      	mov	sp, r7
 80052a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052aa:	4770      	bx	lr

080052ac <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80052ac:	b480      	push	{r7}
 80052ae:	b083      	sub	sp, #12
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
 80052b4:	460b      	mov	r3, r1
 80052b6:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80052b8:	bf00      	nop
 80052ba:	370c      	adds	r7, #12
 80052bc:	46bd      	mov	sp, r7
 80052be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c2:	4770      	bx	lr

080052c4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80052c4:	b580      	push	{r7, lr}
 80052c6:	b086      	sub	sp, #24
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d101      	bne.n	80052d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80052d2:	2301      	movs	r3, #1
 80052d4:	e267      	b.n	80057a6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f003 0301 	and.w	r3, r3, #1
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d075      	beq.n	80053ce <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80052e2:	4b88      	ldr	r3, [pc, #544]	@ (8005504 <HAL_RCC_OscConfig+0x240>)
 80052e4:	689b      	ldr	r3, [r3, #8]
 80052e6:	f003 030c 	and.w	r3, r3, #12
 80052ea:	2b04      	cmp	r3, #4
 80052ec:	d00c      	beq.n	8005308 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80052ee:	4b85      	ldr	r3, [pc, #532]	@ (8005504 <HAL_RCC_OscConfig+0x240>)
 80052f0:	689b      	ldr	r3, [r3, #8]
 80052f2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80052f6:	2b08      	cmp	r3, #8
 80052f8:	d112      	bne.n	8005320 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80052fa:	4b82      	ldr	r3, [pc, #520]	@ (8005504 <HAL_RCC_OscConfig+0x240>)
 80052fc:	685b      	ldr	r3, [r3, #4]
 80052fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005302:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005306:	d10b      	bne.n	8005320 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005308:	4b7e      	ldr	r3, [pc, #504]	@ (8005504 <HAL_RCC_OscConfig+0x240>)
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005310:	2b00      	cmp	r3, #0
 8005312:	d05b      	beq.n	80053cc <HAL_RCC_OscConfig+0x108>
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	685b      	ldr	r3, [r3, #4]
 8005318:	2b00      	cmp	r3, #0
 800531a:	d157      	bne.n	80053cc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800531c:	2301      	movs	r3, #1
 800531e:	e242      	b.n	80057a6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	685b      	ldr	r3, [r3, #4]
 8005324:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005328:	d106      	bne.n	8005338 <HAL_RCC_OscConfig+0x74>
 800532a:	4b76      	ldr	r3, [pc, #472]	@ (8005504 <HAL_RCC_OscConfig+0x240>)
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	4a75      	ldr	r2, [pc, #468]	@ (8005504 <HAL_RCC_OscConfig+0x240>)
 8005330:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005334:	6013      	str	r3, [r2, #0]
 8005336:	e01d      	b.n	8005374 <HAL_RCC_OscConfig+0xb0>
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	685b      	ldr	r3, [r3, #4]
 800533c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005340:	d10c      	bne.n	800535c <HAL_RCC_OscConfig+0x98>
 8005342:	4b70      	ldr	r3, [pc, #448]	@ (8005504 <HAL_RCC_OscConfig+0x240>)
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	4a6f      	ldr	r2, [pc, #444]	@ (8005504 <HAL_RCC_OscConfig+0x240>)
 8005348:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800534c:	6013      	str	r3, [r2, #0]
 800534e:	4b6d      	ldr	r3, [pc, #436]	@ (8005504 <HAL_RCC_OscConfig+0x240>)
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	4a6c      	ldr	r2, [pc, #432]	@ (8005504 <HAL_RCC_OscConfig+0x240>)
 8005354:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005358:	6013      	str	r3, [r2, #0]
 800535a:	e00b      	b.n	8005374 <HAL_RCC_OscConfig+0xb0>
 800535c:	4b69      	ldr	r3, [pc, #420]	@ (8005504 <HAL_RCC_OscConfig+0x240>)
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	4a68      	ldr	r2, [pc, #416]	@ (8005504 <HAL_RCC_OscConfig+0x240>)
 8005362:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005366:	6013      	str	r3, [r2, #0]
 8005368:	4b66      	ldr	r3, [pc, #408]	@ (8005504 <HAL_RCC_OscConfig+0x240>)
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	4a65      	ldr	r2, [pc, #404]	@ (8005504 <HAL_RCC_OscConfig+0x240>)
 800536e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005372:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	685b      	ldr	r3, [r3, #4]
 8005378:	2b00      	cmp	r3, #0
 800537a:	d013      	beq.n	80053a4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800537c:	f7fd f9c2 	bl	8002704 <HAL_GetTick>
 8005380:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005382:	e008      	b.n	8005396 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005384:	f7fd f9be 	bl	8002704 <HAL_GetTick>
 8005388:	4602      	mov	r2, r0
 800538a:	693b      	ldr	r3, [r7, #16]
 800538c:	1ad3      	subs	r3, r2, r3
 800538e:	2b64      	cmp	r3, #100	@ 0x64
 8005390:	d901      	bls.n	8005396 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005392:	2303      	movs	r3, #3
 8005394:	e207      	b.n	80057a6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005396:	4b5b      	ldr	r3, [pc, #364]	@ (8005504 <HAL_RCC_OscConfig+0x240>)
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d0f0      	beq.n	8005384 <HAL_RCC_OscConfig+0xc0>
 80053a2:	e014      	b.n	80053ce <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053a4:	f7fd f9ae 	bl	8002704 <HAL_GetTick>
 80053a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80053aa:	e008      	b.n	80053be <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80053ac:	f7fd f9aa 	bl	8002704 <HAL_GetTick>
 80053b0:	4602      	mov	r2, r0
 80053b2:	693b      	ldr	r3, [r7, #16]
 80053b4:	1ad3      	subs	r3, r2, r3
 80053b6:	2b64      	cmp	r3, #100	@ 0x64
 80053b8:	d901      	bls.n	80053be <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80053ba:	2303      	movs	r3, #3
 80053bc:	e1f3      	b.n	80057a6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80053be:	4b51      	ldr	r3, [pc, #324]	@ (8005504 <HAL_RCC_OscConfig+0x240>)
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d1f0      	bne.n	80053ac <HAL_RCC_OscConfig+0xe8>
 80053ca:	e000      	b.n	80053ce <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80053cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f003 0302 	and.w	r3, r3, #2
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d063      	beq.n	80054a2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80053da:	4b4a      	ldr	r3, [pc, #296]	@ (8005504 <HAL_RCC_OscConfig+0x240>)
 80053dc:	689b      	ldr	r3, [r3, #8]
 80053de:	f003 030c 	and.w	r3, r3, #12
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d00b      	beq.n	80053fe <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80053e6:	4b47      	ldr	r3, [pc, #284]	@ (8005504 <HAL_RCC_OscConfig+0x240>)
 80053e8:	689b      	ldr	r3, [r3, #8]
 80053ea:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80053ee:	2b08      	cmp	r3, #8
 80053f0:	d11c      	bne.n	800542c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80053f2:	4b44      	ldr	r3, [pc, #272]	@ (8005504 <HAL_RCC_OscConfig+0x240>)
 80053f4:	685b      	ldr	r3, [r3, #4]
 80053f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d116      	bne.n	800542c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80053fe:	4b41      	ldr	r3, [pc, #260]	@ (8005504 <HAL_RCC_OscConfig+0x240>)
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f003 0302 	and.w	r3, r3, #2
 8005406:	2b00      	cmp	r3, #0
 8005408:	d005      	beq.n	8005416 <HAL_RCC_OscConfig+0x152>
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	68db      	ldr	r3, [r3, #12]
 800540e:	2b01      	cmp	r3, #1
 8005410:	d001      	beq.n	8005416 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005412:	2301      	movs	r3, #1
 8005414:	e1c7      	b.n	80057a6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005416:	4b3b      	ldr	r3, [pc, #236]	@ (8005504 <HAL_RCC_OscConfig+0x240>)
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	691b      	ldr	r3, [r3, #16]
 8005422:	00db      	lsls	r3, r3, #3
 8005424:	4937      	ldr	r1, [pc, #220]	@ (8005504 <HAL_RCC_OscConfig+0x240>)
 8005426:	4313      	orrs	r3, r2
 8005428:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800542a:	e03a      	b.n	80054a2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	68db      	ldr	r3, [r3, #12]
 8005430:	2b00      	cmp	r3, #0
 8005432:	d020      	beq.n	8005476 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005434:	4b34      	ldr	r3, [pc, #208]	@ (8005508 <HAL_RCC_OscConfig+0x244>)
 8005436:	2201      	movs	r2, #1
 8005438:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800543a:	f7fd f963 	bl	8002704 <HAL_GetTick>
 800543e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005440:	e008      	b.n	8005454 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005442:	f7fd f95f 	bl	8002704 <HAL_GetTick>
 8005446:	4602      	mov	r2, r0
 8005448:	693b      	ldr	r3, [r7, #16]
 800544a:	1ad3      	subs	r3, r2, r3
 800544c:	2b02      	cmp	r3, #2
 800544e:	d901      	bls.n	8005454 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005450:	2303      	movs	r3, #3
 8005452:	e1a8      	b.n	80057a6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005454:	4b2b      	ldr	r3, [pc, #172]	@ (8005504 <HAL_RCC_OscConfig+0x240>)
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f003 0302 	and.w	r3, r3, #2
 800545c:	2b00      	cmp	r3, #0
 800545e:	d0f0      	beq.n	8005442 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005460:	4b28      	ldr	r3, [pc, #160]	@ (8005504 <HAL_RCC_OscConfig+0x240>)
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	691b      	ldr	r3, [r3, #16]
 800546c:	00db      	lsls	r3, r3, #3
 800546e:	4925      	ldr	r1, [pc, #148]	@ (8005504 <HAL_RCC_OscConfig+0x240>)
 8005470:	4313      	orrs	r3, r2
 8005472:	600b      	str	r3, [r1, #0]
 8005474:	e015      	b.n	80054a2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005476:	4b24      	ldr	r3, [pc, #144]	@ (8005508 <HAL_RCC_OscConfig+0x244>)
 8005478:	2200      	movs	r2, #0
 800547a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800547c:	f7fd f942 	bl	8002704 <HAL_GetTick>
 8005480:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005482:	e008      	b.n	8005496 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005484:	f7fd f93e 	bl	8002704 <HAL_GetTick>
 8005488:	4602      	mov	r2, r0
 800548a:	693b      	ldr	r3, [r7, #16]
 800548c:	1ad3      	subs	r3, r2, r3
 800548e:	2b02      	cmp	r3, #2
 8005490:	d901      	bls.n	8005496 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005492:	2303      	movs	r3, #3
 8005494:	e187      	b.n	80057a6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005496:	4b1b      	ldr	r3, [pc, #108]	@ (8005504 <HAL_RCC_OscConfig+0x240>)
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f003 0302 	and.w	r3, r3, #2
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d1f0      	bne.n	8005484 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f003 0308 	and.w	r3, r3, #8
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d036      	beq.n	800551c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	695b      	ldr	r3, [r3, #20]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d016      	beq.n	80054e4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80054b6:	4b15      	ldr	r3, [pc, #84]	@ (800550c <HAL_RCC_OscConfig+0x248>)
 80054b8:	2201      	movs	r2, #1
 80054ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054bc:	f7fd f922 	bl	8002704 <HAL_GetTick>
 80054c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80054c2:	e008      	b.n	80054d6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80054c4:	f7fd f91e 	bl	8002704 <HAL_GetTick>
 80054c8:	4602      	mov	r2, r0
 80054ca:	693b      	ldr	r3, [r7, #16]
 80054cc:	1ad3      	subs	r3, r2, r3
 80054ce:	2b02      	cmp	r3, #2
 80054d0:	d901      	bls.n	80054d6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80054d2:	2303      	movs	r3, #3
 80054d4:	e167      	b.n	80057a6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80054d6:	4b0b      	ldr	r3, [pc, #44]	@ (8005504 <HAL_RCC_OscConfig+0x240>)
 80054d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80054da:	f003 0302 	and.w	r3, r3, #2
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d0f0      	beq.n	80054c4 <HAL_RCC_OscConfig+0x200>
 80054e2:	e01b      	b.n	800551c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80054e4:	4b09      	ldr	r3, [pc, #36]	@ (800550c <HAL_RCC_OscConfig+0x248>)
 80054e6:	2200      	movs	r2, #0
 80054e8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80054ea:	f7fd f90b 	bl	8002704 <HAL_GetTick>
 80054ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80054f0:	e00e      	b.n	8005510 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80054f2:	f7fd f907 	bl	8002704 <HAL_GetTick>
 80054f6:	4602      	mov	r2, r0
 80054f8:	693b      	ldr	r3, [r7, #16]
 80054fa:	1ad3      	subs	r3, r2, r3
 80054fc:	2b02      	cmp	r3, #2
 80054fe:	d907      	bls.n	8005510 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005500:	2303      	movs	r3, #3
 8005502:	e150      	b.n	80057a6 <HAL_RCC_OscConfig+0x4e2>
 8005504:	40023800 	.word	0x40023800
 8005508:	42470000 	.word	0x42470000
 800550c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005510:	4b88      	ldr	r3, [pc, #544]	@ (8005734 <HAL_RCC_OscConfig+0x470>)
 8005512:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005514:	f003 0302 	and.w	r3, r3, #2
 8005518:	2b00      	cmp	r3, #0
 800551a:	d1ea      	bne.n	80054f2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f003 0304 	and.w	r3, r3, #4
 8005524:	2b00      	cmp	r3, #0
 8005526:	f000 8097 	beq.w	8005658 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800552a:	2300      	movs	r3, #0
 800552c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800552e:	4b81      	ldr	r3, [pc, #516]	@ (8005734 <HAL_RCC_OscConfig+0x470>)
 8005530:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005532:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005536:	2b00      	cmp	r3, #0
 8005538:	d10f      	bne.n	800555a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800553a:	2300      	movs	r3, #0
 800553c:	60bb      	str	r3, [r7, #8]
 800553e:	4b7d      	ldr	r3, [pc, #500]	@ (8005734 <HAL_RCC_OscConfig+0x470>)
 8005540:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005542:	4a7c      	ldr	r2, [pc, #496]	@ (8005734 <HAL_RCC_OscConfig+0x470>)
 8005544:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005548:	6413      	str	r3, [r2, #64]	@ 0x40
 800554a:	4b7a      	ldr	r3, [pc, #488]	@ (8005734 <HAL_RCC_OscConfig+0x470>)
 800554c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800554e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005552:	60bb      	str	r3, [r7, #8]
 8005554:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005556:	2301      	movs	r3, #1
 8005558:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800555a:	4b77      	ldr	r3, [pc, #476]	@ (8005738 <HAL_RCC_OscConfig+0x474>)
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005562:	2b00      	cmp	r3, #0
 8005564:	d118      	bne.n	8005598 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005566:	4b74      	ldr	r3, [pc, #464]	@ (8005738 <HAL_RCC_OscConfig+0x474>)
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	4a73      	ldr	r2, [pc, #460]	@ (8005738 <HAL_RCC_OscConfig+0x474>)
 800556c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005570:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005572:	f7fd f8c7 	bl	8002704 <HAL_GetTick>
 8005576:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005578:	e008      	b.n	800558c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800557a:	f7fd f8c3 	bl	8002704 <HAL_GetTick>
 800557e:	4602      	mov	r2, r0
 8005580:	693b      	ldr	r3, [r7, #16]
 8005582:	1ad3      	subs	r3, r2, r3
 8005584:	2b02      	cmp	r3, #2
 8005586:	d901      	bls.n	800558c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005588:	2303      	movs	r3, #3
 800558a:	e10c      	b.n	80057a6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800558c:	4b6a      	ldr	r3, [pc, #424]	@ (8005738 <HAL_RCC_OscConfig+0x474>)
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005594:	2b00      	cmp	r3, #0
 8005596:	d0f0      	beq.n	800557a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	689b      	ldr	r3, [r3, #8]
 800559c:	2b01      	cmp	r3, #1
 800559e:	d106      	bne.n	80055ae <HAL_RCC_OscConfig+0x2ea>
 80055a0:	4b64      	ldr	r3, [pc, #400]	@ (8005734 <HAL_RCC_OscConfig+0x470>)
 80055a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80055a4:	4a63      	ldr	r2, [pc, #396]	@ (8005734 <HAL_RCC_OscConfig+0x470>)
 80055a6:	f043 0301 	orr.w	r3, r3, #1
 80055aa:	6713      	str	r3, [r2, #112]	@ 0x70
 80055ac:	e01c      	b.n	80055e8 <HAL_RCC_OscConfig+0x324>
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	689b      	ldr	r3, [r3, #8]
 80055b2:	2b05      	cmp	r3, #5
 80055b4:	d10c      	bne.n	80055d0 <HAL_RCC_OscConfig+0x30c>
 80055b6:	4b5f      	ldr	r3, [pc, #380]	@ (8005734 <HAL_RCC_OscConfig+0x470>)
 80055b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80055ba:	4a5e      	ldr	r2, [pc, #376]	@ (8005734 <HAL_RCC_OscConfig+0x470>)
 80055bc:	f043 0304 	orr.w	r3, r3, #4
 80055c0:	6713      	str	r3, [r2, #112]	@ 0x70
 80055c2:	4b5c      	ldr	r3, [pc, #368]	@ (8005734 <HAL_RCC_OscConfig+0x470>)
 80055c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80055c6:	4a5b      	ldr	r2, [pc, #364]	@ (8005734 <HAL_RCC_OscConfig+0x470>)
 80055c8:	f043 0301 	orr.w	r3, r3, #1
 80055cc:	6713      	str	r3, [r2, #112]	@ 0x70
 80055ce:	e00b      	b.n	80055e8 <HAL_RCC_OscConfig+0x324>
 80055d0:	4b58      	ldr	r3, [pc, #352]	@ (8005734 <HAL_RCC_OscConfig+0x470>)
 80055d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80055d4:	4a57      	ldr	r2, [pc, #348]	@ (8005734 <HAL_RCC_OscConfig+0x470>)
 80055d6:	f023 0301 	bic.w	r3, r3, #1
 80055da:	6713      	str	r3, [r2, #112]	@ 0x70
 80055dc:	4b55      	ldr	r3, [pc, #340]	@ (8005734 <HAL_RCC_OscConfig+0x470>)
 80055de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80055e0:	4a54      	ldr	r2, [pc, #336]	@ (8005734 <HAL_RCC_OscConfig+0x470>)
 80055e2:	f023 0304 	bic.w	r3, r3, #4
 80055e6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	689b      	ldr	r3, [r3, #8]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d015      	beq.n	800561c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055f0:	f7fd f888 	bl	8002704 <HAL_GetTick>
 80055f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80055f6:	e00a      	b.n	800560e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80055f8:	f7fd f884 	bl	8002704 <HAL_GetTick>
 80055fc:	4602      	mov	r2, r0
 80055fe:	693b      	ldr	r3, [r7, #16]
 8005600:	1ad3      	subs	r3, r2, r3
 8005602:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005606:	4293      	cmp	r3, r2
 8005608:	d901      	bls.n	800560e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800560a:	2303      	movs	r3, #3
 800560c:	e0cb      	b.n	80057a6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800560e:	4b49      	ldr	r3, [pc, #292]	@ (8005734 <HAL_RCC_OscConfig+0x470>)
 8005610:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005612:	f003 0302 	and.w	r3, r3, #2
 8005616:	2b00      	cmp	r3, #0
 8005618:	d0ee      	beq.n	80055f8 <HAL_RCC_OscConfig+0x334>
 800561a:	e014      	b.n	8005646 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800561c:	f7fd f872 	bl	8002704 <HAL_GetTick>
 8005620:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005622:	e00a      	b.n	800563a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005624:	f7fd f86e 	bl	8002704 <HAL_GetTick>
 8005628:	4602      	mov	r2, r0
 800562a:	693b      	ldr	r3, [r7, #16]
 800562c:	1ad3      	subs	r3, r2, r3
 800562e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005632:	4293      	cmp	r3, r2
 8005634:	d901      	bls.n	800563a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005636:	2303      	movs	r3, #3
 8005638:	e0b5      	b.n	80057a6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800563a:	4b3e      	ldr	r3, [pc, #248]	@ (8005734 <HAL_RCC_OscConfig+0x470>)
 800563c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800563e:	f003 0302 	and.w	r3, r3, #2
 8005642:	2b00      	cmp	r3, #0
 8005644:	d1ee      	bne.n	8005624 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005646:	7dfb      	ldrb	r3, [r7, #23]
 8005648:	2b01      	cmp	r3, #1
 800564a:	d105      	bne.n	8005658 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800564c:	4b39      	ldr	r3, [pc, #228]	@ (8005734 <HAL_RCC_OscConfig+0x470>)
 800564e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005650:	4a38      	ldr	r2, [pc, #224]	@ (8005734 <HAL_RCC_OscConfig+0x470>)
 8005652:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005656:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	699b      	ldr	r3, [r3, #24]
 800565c:	2b00      	cmp	r3, #0
 800565e:	f000 80a1 	beq.w	80057a4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005662:	4b34      	ldr	r3, [pc, #208]	@ (8005734 <HAL_RCC_OscConfig+0x470>)
 8005664:	689b      	ldr	r3, [r3, #8]
 8005666:	f003 030c 	and.w	r3, r3, #12
 800566a:	2b08      	cmp	r3, #8
 800566c:	d05c      	beq.n	8005728 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	699b      	ldr	r3, [r3, #24]
 8005672:	2b02      	cmp	r3, #2
 8005674:	d141      	bne.n	80056fa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005676:	4b31      	ldr	r3, [pc, #196]	@ (800573c <HAL_RCC_OscConfig+0x478>)
 8005678:	2200      	movs	r2, #0
 800567a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800567c:	f7fd f842 	bl	8002704 <HAL_GetTick>
 8005680:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005682:	e008      	b.n	8005696 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005684:	f7fd f83e 	bl	8002704 <HAL_GetTick>
 8005688:	4602      	mov	r2, r0
 800568a:	693b      	ldr	r3, [r7, #16]
 800568c:	1ad3      	subs	r3, r2, r3
 800568e:	2b02      	cmp	r3, #2
 8005690:	d901      	bls.n	8005696 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005692:	2303      	movs	r3, #3
 8005694:	e087      	b.n	80057a6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005696:	4b27      	ldr	r3, [pc, #156]	@ (8005734 <HAL_RCC_OscConfig+0x470>)
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d1f0      	bne.n	8005684 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	69da      	ldr	r2, [r3, #28]
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	6a1b      	ldr	r3, [r3, #32]
 80056aa:	431a      	orrs	r2, r3
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056b0:	019b      	lsls	r3, r3, #6
 80056b2:	431a      	orrs	r2, r3
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056b8:	085b      	lsrs	r3, r3, #1
 80056ba:	3b01      	subs	r3, #1
 80056bc:	041b      	lsls	r3, r3, #16
 80056be:	431a      	orrs	r2, r3
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056c4:	061b      	lsls	r3, r3, #24
 80056c6:	491b      	ldr	r1, [pc, #108]	@ (8005734 <HAL_RCC_OscConfig+0x470>)
 80056c8:	4313      	orrs	r3, r2
 80056ca:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80056cc:	4b1b      	ldr	r3, [pc, #108]	@ (800573c <HAL_RCC_OscConfig+0x478>)
 80056ce:	2201      	movs	r2, #1
 80056d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056d2:	f7fd f817 	bl	8002704 <HAL_GetTick>
 80056d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80056d8:	e008      	b.n	80056ec <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80056da:	f7fd f813 	bl	8002704 <HAL_GetTick>
 80056de:	4602      	mov	r2, r0
 80056e0:	693b      	ldr	r3, [r7, #16]
 80056e2:	1ad3      	subs	r3, r2, r3
 80056e4:	2b02      	cmp	r3, #2
 80056e6:	d901      	bls.n	80056ec <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80056e8:	2303      	movs	r3, #3
 80056ea:	e05c      	b.n	80057a6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80056ec:	4b11      	ldr	r3, [pc, #68]	@ (8005734 <HAL_RCC_OscConfig+0x470>)
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d0f0      	beq.n	80056da <HAL_RCC_OscConfig+0x416>
 80056f8:	e054      	b.n	80057a4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80056fa:	4b10      	ldr	r3, [pc, #64]	@ (800573c <HAL_RCC_OscConfig+0x478>)
 80056fc:	2200      	movs	r2, #0
 80056fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005700:	f7fd f800 	bl	8002704 <HAL_GetTick>
 8005704:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005706:	e008      	b.n	800571a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005708:	f7fc fffc 	bl	8002704 <HAL_GetTick>
 800570c:	4602      	mov	r2, r0
 800570e:	693b      	ldr	r3, [r7, #16]
 8005710:	1ad3      	subs	r3, r2, r3
 8005712:	2b02      	cmp	r3, #2
 8005714:	d901      	bls.n	800571a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005716:	2303      	movs	r3, #3
 8005718:	e045      	b.n	80057a6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800571a:	4b06      	ldr	r3, [pc, #24]	@ (8005734 <HAL_RCC_OscConfig+0x470>)
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005722:	2b00      	cmp	r3, #0
 8005724:	d1f0      	bne.n	8005708 <HAL_RCC_OscConfig+0x444>
 8005726:	e03d      	b.n	80057a4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	699b      	ldr	r3, [r3, #24]
 800572c:	2b01      	cmp	r3, #1
 800572e:	d107      	bne.n	8005740 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005730:	2301      	movs	r3, #1
 8005732:	e038      	b.n	80057a6 <HAL_RCC_OscConfig+0x4e2>
 8005734:	40023800 	.word	0x40023800
 8005738:	40007000 	.word	0x40007000
 800573c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005740:	4b1b      	ldr	r3, [pc, #108]	@ (80057b0 <HAL_RCC_OscConfig+0x4ec>)
 8005742:	685b      	ldr	r3, [r3, #4]
 8005744:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	699b      	ldr	r3, [r3, #24]
 800574a:	2b01      	cmp	r3, #1
 800574c:	d028      	beq.n	80057a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005758:	429a      	cmp	r2, r3
 800575a:	d121      	bne.n	80057a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005766:	429a      	cmp	r2, r3
 8005768:	d11a      	bne.n	80057a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800576a:	68fa      	ldr	r2, [r7, #12]
 800576c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005770:	4013      	ands	r3, r2
 8005772:	687a      	ldr	r2, [r7, #4]
 8005774:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005776:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005778:	4293      	cmp	r3, r2
 800577a:	d111      	bne.n	80057a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005786:	085b      	lsrs	r3, r3, #1
 8005788:	3b01      	subs	r3, #1
 800578a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800578c:	429a      	cmp	r2, r3
 800578e:	d107      	bne.n	80057a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800579a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800579c:	429a      	cmp	r2, r3
 800579e:	d001      	beq.n	80057a4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80057a0:	2301      	movs	r3, #1
 80057a2:	e000      	b.n	80057a6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80057a4:	2300      	movs	r3, #0
}
 80057a6:	4618      	mov	r0, r3
 80057a8:	3718      	adds	r7, #24
 80057aa:	46bd      	mov	sp, r7
 80057ac:	bd80      	pop	{r7, pc}
 80057ae:	bf00      	nop
 80057b0:	40023800 	.word	0x40023800

080057b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80057b4:	b580      	push	{r7, lr}
 80057b6:	b084      	sub	sp, #16
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]
 80057bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d101      	bne.n	80057c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80057c4:	2301      	movs	r3, #1
 80057c6:	e0cc      	b.n	8005962 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80057c8:	4b68      	ldr	r3, [pc, #416]	@ (800596c <HAL_RCC_ClockConfig+0x1b8>)
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f003 030f 	and.w	r3, r3, #15
 80057d0:	683a      	ldr	r2, [r7, #0]
 80057d2:	429a      	cmp	r2, r3
 80057d4:	d90c      	bls.n	80057f0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80057d6:	4b65      	ldr	r3, [pc, #404]	@ (800596c <HAL_RCC_ClockConfig+0x1b8>)
 80057d8:	683a      	ldr	r2, [r7, #0]
 80057da:	b2d2      	uxtb	r2, r2
 80057dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80057de:	4b63      	ldr	r3, [pc, #396]	@ (800596c <HAL_RCC_ClockConfig+0x1b8>)
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f003 030f 	and.w	r3, r3, #15
 80057e6:	683a      	ldr	r2, [r7, #0]
 80057e8:	429a      	cmp	r2, r3
 80057ea:	d001      	beq.n	80057f0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80057ec:	2301      	movs	r3, #1
 80057ee:	e0b8      	b.n	8005962 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	f003 0302 	and.w	r3, r3, #2
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d020      	beq.n	800583e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	f003 0304 	and.w	r3, r3, #4
 8005804:	2b00      	cmp	r3, #0
 8005806:	d005      	beq.n	8005814 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005808:	4b59      	ldr	r3, [pc, #356]	@ (8005970 <HAL_RCC_ClockConfig+0x1bc>)
 800580a:	689b      	ldr	r3, [r3, #8]
 800580c:	4a58      	ldr	r2, [pc, #352]	@ (8005970 <HAL_RCC_ClockConfig+0x1bc>)
 800580e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005812:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f003 0308 	and.w	r3, r3, #8
 800581c:	2b00      	cmp	r3, #0
 800581e:	d005      	beq.n	800582c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005820:	4b53      	ldr	r3, [pc, #332]	@ (8005970 <HAL_RCC_ClockConfig+0x1bc>)
 8005822:	689b      	ldr	r3, [r3, #8]
 8005824:	4a52      	ldr	r2, [pc, #328]	@ (8005970 <HAL_RCC_ClockConfig+0x1bc>)
 8005826:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800582a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800582c:	4b50      	ldr	r3, [pc, #320]	@ (8005970 <HAL_RCC_ClockConfig+0x1bc>)
 800582e:	689b      	ldr	r3, [r3, #8]
 8005830:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	689b      	ldr	r3, [r3, #8]
 8005838:	494d      	ldr	r1, [pc, #308]	@ (8005970 <HAL_RCC_ClockConfig+0x1bc>)
 800583a:	4313      	orrs	r3, r2
 800583c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f003 0301 	and.w	r3, r3, #1
 8005846:	2b00      	cmp	r3, #0
 8005848:	d044      	beq.n	80058d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	685b      	ldr	r3, [r3, #4]
 800584e:	2b01      	cmp	r3, #1
 8005850:	d107      	bne.n	8005862 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005852:	4b47      	ldr	r3, [pc, #284]	@ (8005970 <HAL_RCC_ClockConfig+0x1bc>)
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800585a:	2b00      	cmp	r3, #0
 800585c:	d119      	bne.n	8005892 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800585e:	2301      	movs	r3, #1
 8005860:	e07f      	b.n	8005962 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	685b      	ldr	r3, [r3, #4]
 8005866:	2b02      	cmp	r3, #2
 8005868:	d003      	beq.n	8005872 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800586e:	2b03      	cmp	r3, #3
 8005870:	d107      	bne.n	8005882 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005872:	4b3f      	ldr	r3, [pc, #252]	@ (8005970 <HAL_RCC_ClockConfig+0x1bc>)
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800587a:	2b00      	cmp	r3, #0
 800587c:	d109      	bne.n	8005892 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800587e:	2301      	movs	r3, #1
 8005880:	e06f      	b.n	8005962 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005882:	4b3b      	ldr	r3, [pc, #236]	@ (8005970 <HAL_RCC_ClockConfig+0x1bc>)
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f003 0302 	and.w	r3, r3, #2
 800588a:	2b00      	cmp	r3, #0
 800588c:	d101      	bne.n	8005892 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800588e:	2301      	movs	r3, #1
 8005890:	e067      	b.n	8005962 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005892:	4b37      	ldr	r3, [pc, #220]	@ (8005970 <HAL_RCC_ClockConfig+0x1bc>)
 8005894:	689b      	ldr	r3, [r3, #8]
 8005896:	f023 0203 	bic.w	r2, r3, #3
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	685b      	ldr	r3, [r3, #4]
 800589e:	4934      	ldr	r1, [pc, #208]	@ (8005970 <HAL_RCC_ClockConfig+0x1bc>)
 80058a0:	4313      	orrs	r3, r2
 80058a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80058a4:	f7fc ff2e 	bl	8002704 <HAL_GetTick>
 80058a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80058aa:	e00a      	b.n	80058c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80058ac:	f7fc ff2a 	bl	8002704 <HAL_GetTick>
 80058b0:	4602      	mov	r2, r0
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	1ad3      	subs	r3, r2, r3
 80058b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80058ba:	4293      	cmp	r3, r2
 80058bc:	d901      	bls.n	80058c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80058be:	2303      	movs	r3, #3
 80058c0:	e04f      	b.n	8005962 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80058c2:	4b2b      	ldr	r3, [pc, #172]	@ (8005970 <HAL_RCC_ClockConfig+0x1bc>)
 80058c4:	689b      	ldr	r3, [r3, #8]
 80058c6:	f003 020c 	and.w	r2, r3, #12
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	685b      	ldr	r3, [r3, #4]
 80058ce:	009b      	lsls	r3, r3, #2
 80058d0:	429a      	cmp	r2, r3
 80058d2:	d1eb      	bne.n	80058ac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80058d4:	4b25      	ldr	r3, [pc, #148]	@ (800596c <HAL_RCC_ClockConfig+0x1b8>)
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f003 030f 	and.w	r3, r3, #15
 80058dc:	683a      	ldr	r2, [r7, #0]
 80058de:	429a      	cmp	r2, r3
 80058e0:	d20c      	bcs.n	80058fc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80058e2:	4b22      	ldr	r3, [pc, #136]	@ (800596c <HAL_RCC_ClockConfig+0x1b8>)
 80058e4:	683a      	ldr	r2, [r7, #0]
 80058e6:	b2d2      	uxtb	r2, r2
 80058e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80058ea:	4b20      	ldr	r3, [pc, #128]	@ (800596c <HAL_RCC_ClockConfig+0x1b8>)
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f003 030f 	and.w	r3, r3, #15
 80058f2:	683a      	ldr	r2, [r7, #0]
 80058f4:	429a      	cmp	r2, r3
 80058f6:	d001      	beq.n	80058fc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80058f8:	2301      	movs	r3, #1
 80058fa:	e032      	b.n	8005962 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f003 0304 	and.w	r3, r3, #4
 8005904:	2b00      	cmp	r3, #0
 8005906:	d008      	beq.n	800591a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005908:	4b19      	ldr	r3, [pc, #100]	@ (8005970 <HAL_RCC_ClockConfig+0x1bc>)
 800590a:	689b      	ldr	r3, [r3, #8]
 800590c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	68db      	ldr	r3, [r3, #12]
 8005914:	4916      	ldr	r1, [pc, #88]	@ (8005970 <HAL_RCC_ClockConfig+0x1bc>)
 8005916:	4313      	orrs	r3, r2
 8005918:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f003 0308 	and.w	r3, r3, #8
 8005922:	2b00      	cmp	r3, #0
 8005924:	d009      	beq.n	800593a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005926:	4b12      	ldr	r3, [pc, #72]	@ (8005970 <HAL_RCC_ClockConfig+0x1bc>)
 8005928:	689b      	ldr	r3, [r3, #8]
 800592a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	691b      	ldr	r3, [r3, #16]
 8005932:	00db      	lsls	r3, r3, #3
 8005934:	490e      	ldr	r1, [pc, #56]	@ (8005970 <HAL_RCC_ClockConfig+0x1bc>)
 8005936:	4313      	orrs	r3, r2
 8005938:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800593a:	f000 f821 	bl	8005980 <HAL_RCC_GetSysClockFreq>
 800593e:	4602      	mov	r2, r0
 8005940:	4b0b      	ldr	r3, [pc, #44]	@ (8005970 <HAL_RCC_ClockConfig+0x1bc>)
 8005942:	689b      	ldr	r3, [r3, #8]
 8005944:	091b      	lsrs	r3, r3, #4
 8005946:	f003 030f 	and.w	r3, r3, #15
 800594a:	490a      	ldr	r1, [pc, #40]	@ (8005974 <HAL_RCC_ClockConfig+0x1c0>)
 800594c:	5ccb      	ldrb	r3, [r1, r3]
 800594e:	fa22 f303 	lsr.w	r3, r2, r3
 8005952:	4a09      	ldr	r2, [pc, #36]	@ (8005978 <HAL_RCC_ClockConfig+0x1c4>)
 8005954:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8005956:	4b09      	ldr	r3, [pc, #36]	@ (800597c <HAL_RCC_ClockConfig+0x1c8>)
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	4618      	mov	r0, r3
 800595c:	f7fc fe8e 	bl	800267c <HAL_InitTick>

  return HAL_OK;
 8005960:	2300      	movs	r3, #0
}
 8005962:	4618      	mov	r0, r3
 8005964:	3710      	adds	r7, #16
 8005966:	46bd      	mov	sp, r7
 8005968:	bd80      	pop	{r7, pc}
 800596a:	bf00      	nop
 800596c:	40023c00 	.word	0x40023c00
 8005970:	40023800 	.word	0x40023800
 8005974:	0800d534 	.word	0x0800d534
 8005978:	20000004 	.word	0x20000004
 800597c:	20000008 	.word	0x20000008

08005980 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005980:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005984:	b094      	sub	sp, #80	@ 0x50
 8005986:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005988:	2300      	movs	r3, #0
 800598a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 800598c:	2300      	movs	r3, #0
 800598e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8005990:	2300      	movs	r3, #0
 8005992:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8005994:	2300      	movs	r3, #0
 8005996:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005998:	4b79      	ldr	r3, [pc, #484]	@ (8005b80 <HAL_RCC_GetSysClockFreq+0x200>)
 800599a:	689b      	ldr	r3, [r3, #8]
 800599c:	f003 030c 	and.w	r3, r3, #12
 80059a0:	2b08      	cmp	r3, #8
 80059a2:	d00d      	beq.n	80059c0 <HAL_RCC_GetSysClockFreq+0x40>
 80059a4:	2b08      	cmp	r3, #8
 80059a6:	f200 80e1 	bhi.w	8005b6c <HAL_RCC_GetSysClockFreq+0x1ec>
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d002      	beq.n	80059b4 <HAL_RCC_GetSysClockFreq+0x34>
 80059ae:	2b04      	cmp	r3, #4
 80059b0:	d003      	beq.n	80059ba <HAL_RCC_GetSysClockFreq+0x3a>
 80059b2:	e0db      	b.n	8005b6c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80059b4:	4b73      	ldr	r3, [pc, #460]	@ (8005b84 <HAL_RCC_GetSysClockFreq+0x204>)
 80059b6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80059b8:	e0db      	b.n	8005b72 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80059ba:	4b73      	ldr	r3, [pc, #460]	@ (8005b88 <HAL_RCC_GetSysClockFreq+0x208>)
 80059bc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80059be:	e0d8      	b.n	8005b72 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80059c0:	4b6f      	ldr	r3, [pc, #444]	@ (8005b80 <HAL_RCC_GetSysClockFreq+0x200>)
 80059c2:	685b      	ldr	r3, [r3, #4]
 80059c4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80059c8:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80059ca:	4b6d      	ldr	r3, [pc, #436]	@ (8005b80 <HAL_RCC_GetSysClockFreq+0x200>)
 80059cc:	685b      	ldr	r3, [r3, #4]
 80059ce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d063      	beq.n	8005a9e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80059d6:	4b6a      	ldr	r3, [pc, #424]	@ (8005b80 <HAL_RCC_GetSysClockFreq+0x200>)
 80059d8:	685b      	ldr	r3, [r3, #4]
 80059da:	099b      	lsrs	r3, r3, #6
 80059dc:	2200      	movs	r2, #0
 80059de:	63bb      	str	r3, [r7, #56]	@ 0x38
 80059e0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80059e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059e8:	633b      	str	r3, [r7, #48]	@ 0x30
 80059ea:	2300      	movs	r3, #0
 80059ec:	637b      	str	r3, [r7, #52]	@ 0x34
 80059ee:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80059f2:	4622      	mov	r2, r4
 80059f4:	462b      	mov	r3, r5
 80059f6:	f04f 0000 	mov.w	r0, #0
 80059fa:	f04f 0100 	mov.w	r1, #0
 80059fe:	0159      	lsls	r1, r3, #5
 8005a00:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005a04:	0150      	lsls	r0, r2, #5
 8005a06:	4602      	mov	r2, r0
 8005a08:	460b      	mov	r3, r1
 8005a0a:	4621      	mov	r1, r4
 8005a0c:	1a51      	subs	r1, r2, r1
 8005a0e:	6139      	str	r1, [r7, #16]
 8005a10:	4629      	mov	r1, r5
 8005a12:	eb63 0301 	sbc.w	r3, r3, r1
 8005a16:	617b      	str	r3, [r7, #20]
 8005a18:	f04f 0200 	mov.w	r2, #0
 8005a1c:	f04f 0300 	mov.w	r3, #0
 8005a20:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005a24:	4659      	mov	r1, fp
 8005a26:	018b      	lsls	r3, r1, #6
 8005a28:	4651      	mov	r1, sl
 8005a2a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005a2e:	4651      	mov	r1, sl
 8005a30:	018a      	lsls	r2, r1, #6
 8005a32:	4651      	mov	r1, sl
 8005a34:	ebb2 0801 	subs.w	r8, r2, r1
 8005a38:	4659      	mov	r1, fp
 8005a3a:	eb63 0901 	sbc.w	r9, r3, r1
 8005a3e:	f04f 0200 	mov.w	r2, #0
 8005a42:	f04f 0300 	mov.w	r3, #0
 8005a46:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005a4a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005a4e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005a52:	4690      	mov	r8, r2
 8005a54:	4699      	mov	r9, r3
 8005a56:	4623      	mov	r3, r4
 8005a58:	eb18 0303 	adds.w	r3, r8, r3
 8005a5c:	60bb      	str	r3, [r7, #8]
 8005a5e:	462b      	mov	r3, r5
 8005a60:	eb49 0303 	adc.w	r3, r9, r3
 8005a64:	60fb      	str	r3, [r7, #12]
 8005a66:	f04f 0200 	mov.w	r2, #0
 8005a6a:	f04f 0300 	mov.w	r3, #0
 8005a6e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005a72:	4629      	mov	r1, r5
 8005a74:	024b      	lsls	r3, r1, #9
 8005a76:	4621      	mov	r1, r4
 8005a78:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005a7c:	4621      	mov	r1, r4
 8005a7e:	024a      	lsls	r2, r1, #9
 8005a80:	4610      	mov	r0, r2
 8005a82:	4619      	mov	r1, r3
 8005a84:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005a86:	2200      	movs	r2, #0
 8005a88:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005a8a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005a8c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005a90:	f7fb f8ea 	bl	8000c68 <__aeabi_uldivmod>
 8005a94:	4602      	mov	r2, r0
 8005a96:	460b      	mov	r3, r1
 8005a98:	4613      	mov	r3, r2
 8005a9a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005a9c:	e058      	b.n	8005b50 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005a9e:	4b38      	ldr	r3, [pc, #224]	@ (8005b80 <HAL_RCC_GetSysClockFreq+0x200>)
 8005aa0:	685b      	ldr	r3, [r3, #4]
 8005aa2:	099b      	lsrs	r3, r3, #6
 8005aa4:	2200      	movs	r2, #0
 8005aa6:	4618      	mov	r0, r3
 8005aa8:	4611      	mov	r1, r2
 8005aaa:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005aae:	623b      	str	r3, [r7, #32]
 8005ab0:	2300      	movs	r3, #0
 8005ab2:	627b      	str	r3, [r7, #36]	@ 0x24
 8005ab4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005ab8:	4642      	mov	r2, r8
 8005aba:	464b      	mov	r3, r9
 8005abc:	f04f 0000 	mov.w	r0, #0
 8005ac0:	f04f 0100 	mov.w	r1, #0
 8005ac4:	0159      	lsls	r1, r3, #5
 8005ac6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005aca:	0150      	lsls	r0, r2, #5
 8005acc:	4602      	mov	r2, r0
 8005ace:	460b      	mov	r3, r1
 8005ad0:	4641      	mov	r1, r8
 8005ad2:	ebb2 0a01 	subs.w	sl, r2, r1
 8005ad6:	4649      	mov	r1, r9
 8005ad8:	eb63 0b01 	sbc.w	fp, r3, r1
 8005adc:	f04f 0200 	mov.w	r2, #0
 8005ae0:	f04f 0300 	mov.w	r3, #0
 8005ae4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005ae8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005aec:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005af0:	ebb2 040a 	subs.w	r4, r2, sl
 8005af4:	eb63 050b 	sbc.w	r5, r3, fp
 8005af8:	f04f 0200 	mov.w	r2, #0
 8005afc:	f04f 0300 	mov.w	r3, #0
 8005b00:	00eb      	lsls	r3, r5, #3
 8005b02:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005b06:	00e2      	lsls	r2, r4, #3
 8005b08:	4614      	mov	r4, r2
 8005b0a:	461d      	mov	r5, r3
 8005b0c:	4643      	mov	r3, r8
 8005b0e:	18e3      	adds	r3, r4, r3
 8005b10:	603b      	str	r3, [r7, #0]
 8005b12:	464b      	mov	r3, r9
 8005b14:	eb45 0303 	adc.w	r3, r5, r3
 8005b18:	607b      	str	r3, [r7, #4]
 8005b1a:	f04f 0200 	mov.w	r2, #0
 8005b1e:	f04f 0300 	mov.w	r3, #0
 8005b22:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005b26:	4629      	mov	r1, r5
 8005b28:	028b      	lsls	r3, r1, #10
 8005b2a:	4621      	mov	r1, r4
 8005b2c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005b30:	4621      	mov	r1, r4
 8005b32:	028a      	lsls	r2, r1, #10
 8005b34:	4610      	mov	r0, r2
 8005b36:	4619      	mov	r1, r3
 8005b38:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	61bb      	str	r3, [r7, #24]
 8005b3e:	61fa      	str	r2, [r7, #28]
 8005b40:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005b44:	f7fb f890 	bl	8000c68 <__aeabi_uldivmod>
 8005b48:	4602      	mov	r2, r0
 8005b4a:	460b      	mov	r3, r1
 8005b4c:	4613      	mov	r3, r2
 8005b4e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005b50:	4b0b      	ldr	r3, [pc, #44]	@ (8005b80 <HAL_RCC_GetSysClockFreq+0x200>)
 8005b52:	685b      	ldr	r3, [r3, #4]
 8005b54:	0c1b      	lsrs	r3, r3, #16
 8005b56:	f003 0303 	and.w	r3, r3, #3
 8005b5a:	3301      	adds	r3, #1
 8005b5c:	005b      	lsls	r3, r3, #1
 8005b5e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8005b60:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005b62:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005b64:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b68:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005b6a:	e002      	b.n	8005b72 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005b6c:	4b05      	ldr	r3, [pc, #20]	@ (8005b84 <HAL_RCC_GetSysClockFreq+0x204>)
 8005b6e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005b70:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005b72:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8005b74:	4618      	mov	r0, r3
 8005b76:	3750      	adds	r7, #80	@ 0x50
 8005b78:	46bd      	mov	sp, r7
 8005b7a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005b7e:	bf00      	nop
 8005b80:	40023800 	.word	0x40023800
 8005b84:	00f42400 	.word	0x00f42400
 8005b88:	007a1200 	.word	0x007a1200

08005b8c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005b8c:	b480      	push	{r7}
 8005b8e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005b90:	4b03      	ldr	r3, [pc, #12]	@ (8005ba0 <HAL_RCC_GetHCLKFreq+0x14>)
 8005b92:	681b      	ldr	r3, [r3, #0]
}
 8005b94:	4618      	mov	r0, r3
 8005b96:	46bd      	mov	sp, r7
 8005b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9c:	4770      	bx	lr
 8005b9e:	bf00      	nop
 8005ba0:	20000004 	.word	0x20000004

08005ba4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005ba4:	b580      	push	{r7, lr}
 8005ba6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005ba8:	f7ff fff0 	bl	8005b8c <HAL_RCC_GetHCLKFreq>
 8005bac:	4602      	mov	r2, r0
 8005bae:	4b05      	ldr	r3, [pc, #20]	@ (8005bc4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005bb0:	689b      	ldr	r3, [r3, #8]
 8005bb2:	0a9b      	lsrs	r3, r3, #10
 8005bb4:	f003 0307 	and.w	r3, r3, #7
 8005bb8:	4903      	ldr	r1, [pc, #12]	@ (8005bc8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005bba:	5ccb      	ldrb	r3, [r1, r3]
 8005bbc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005bc0:	4618      	mov	r0, r3
 8005bc2:	bd80      	pop	{r7, pc}
 8005bc4:	40023800 	.word	0x40023800
 8005bc8:	0800d544 	.word	0x0800d544

08005bcc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005bcc:	b580      	push	{r7, lr}
 8005bce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005bd0:	f7ff ffdc 	bl	8005b8c <HAL_RCC_GetHCLKFreq>
 8005bd4:	4602      	mov	r2, r0
 8005bd6:	4b05      	ldr	r3, [pc, #20]	@ (8005bec <HAL_RCC_GetPCLK2Freq+0x20>)
 8005bd8:	689b      	ldr	r3, [r3, #8]
 8005bda:	0b5b      	lsrs	r3, r3, #13
 8005bdc:	f003 0307 	and.w	r3, r3, #7
 8005be0:	4903      	ldr	r1, [pc, #12]	@ (8005bf0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005be2:	5ccb      	ldrb	r3, [r1, r3]
 8005be4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005be8:	4618      	mov	r0, r3
 8005bea:	bd80      	pop	{r7, pc}
 8005bec:	40023800 	.word	0x40023800
 8005bf0:	0800d544 	.word	0x0800d544

08005bf4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005bf4:	b580      	push	{r7, lr}
 8005bf6:	b082      	sub	sp, #8
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d101      	bne.n	8005c06 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005c02:	2301      	movs	r3, #1
 8005c04:	e042      	b.n	8005c8c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005c0c:	b2db      	uxtb	r3, r3
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d106      	bne.n	8005c20 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	2200      	movs	r2, #0
 8005c16:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005c1a:	6878      	ldr	r0, [r7, #4]
 8005c1c:	f7fc fb88 	bl	8002330 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2224      	movs	r2, #36	@ 0x24
 8005c24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	68da      	ldr	r2, [r3, #12]
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005c36:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005c38:	6878      	ldr	r0, [r7, #4]
 8005c3a:	f000 f973 	bl	8005f24 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	691a      	ldr	r2, [r3, #16]
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005c4c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	695a      	ldr	r2, [r3, #20]
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005c5c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	68da      	ldr	r2, [r3, #12]
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005c6c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	2200      	movs	r2, #0
 8005c72:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2220      	movs	r2, #32
 8005c78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	2220      	movs	r2, #32
 8005c80:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2200      	movs	r2, #0
 8005c88:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005c8a:	2300      	movs	r3, #0
}
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	3708      	adds	r7, #8
 8005c90:	46bd      	mov	sp, r7
 8005c92:	bd80      	pop	{r7, pc}

08005c94 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005c94:	b580      	push	{r7, lr}
 8005c96:	b08a      	sub	sp, #40	@ 0x28
 8005c98:	af02      	add	r7, sp, #8
 8005c9a:	60f8      	str	r0, [r7, #12]
 8005c9c:	60b9      	str	r1, [r7, #8]
 8005c9e:	603b      	str	r3, [r7, #0]
 8005ca0:	4613      	mov	r3, r2
 8005ca2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005ca4:	2300      	movs	r3, #0
 8005ca6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005cae:	b2db      	uxtb	r3, r3
 8005cb0:	2b20      	cmp	r3, #32
 8005cb2:	d175      	bne.n	8005da0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005cb4:	68bb      	ldr	r3, [r7, #8]
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d002      	beq.n	8005cc0 <HAL_UART_Transmit+0x2c>
 8005cba:	88fb      	ldrh	r3, [r7, #6]
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d101      	bne.n	8005cc4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005cc0:	2301      	movs	r3, #1
 8005cc2:	e06e      	b.n	8005da2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	2221      	movs	r2, #33	@ 0x21
 8005cce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005cd2:	f7fc fd17 	bl	8002704 <HAL_GetTick>
 8005cd6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	88fa      	ldrh	r2, [r7, #6]
 8005cdc:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	88fa      	ldrh	r2, [r7, #6]
 8005ce2:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	689b      	ldr	r3, [r3, #8]
 8005ce8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005cec:	d108      	bne.n	8005d00 <HAL_UART_Transmit+0x6c>
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	691b      	ldr	r3, [r3, #16]
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d104      	bne.n	8005d00 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005cf6:	2300      	movs	r3, #0
 8005cf8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005cfa:	68bb      	ldr	r3, [r7, #8]
 8005cfc:	61bb      	str	r3, [r7, #24]
 8005cfe:	e003      	b.n	8005d08 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005d00:	68bb      	ldr	r3, [r7, #8]
 8005d02:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005d04:	2300      	movs	r3, #0
 8005d06:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005d08:	e02e      	b.n	8005d68 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005d0a:	683b      	ldr	r3, [r7, #0]
 8005d0c:	9300      	str	r3, [sp, #0]
 8005d0e:	697b      	ldr	r3, [r7, #20]
 8005d10:	2200      	movs	r2, #0
 8005d12:	2180      	movs	r1, #128	@ 0x80
 8005d14:	68f8      	ldr	r0, [r7, #12]
 8005d16:	f000 f848 	bl	8005daa <UART_WaitOnFlagUntilTimeout>
 8005d1a:	4603      	mov	r3, r0
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d005      	beq.n	8005d2c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	2220      	movs	r2, #32
 8005d24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8005d28:	2303      	movs	r3, #3
 8005d2a:	e03a      	b.n	8005da2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005d2c:	69fb      	ldr	r3, [r7, #28]
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d10b      	bne.n	8005d4a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005d32:	69bb      	ldr	r3, [r7, #24]
 8005d34:	881b      	ldrh	r3, [r3, #0]
 8005d36:	461a      	mov	r2, r3
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005d40:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005d42:	69bb      	ldr	r3, [r7, #24]
 8005d44:	3302      	adds	r3, #2
 8005d46:	61bb      	str	r3, [r7, #24]
 8005d48:	e007      	b.n	8005d5a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005d4a:	69fb      	ldr	r3, [r7, #28]
 8005d4c:	781a      	ldrb	r2, [r3, #0]
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005d54:	69fb      	ldr	r3, [r7, #28]
 8005d56:	3301      	adds	r3, #1
 8005d58:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005d5e:	b29b      	uxth	r3, r3
 8005d60:	3b01      	subs	r3, #1
 8005d62:	b29a      	uxth	r2, r3
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005d6c:	b29b      	uxth	r3, r3
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d1cb      	bne.n	8005d0a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005d72:	683b      	ldr	r3, [r7, #0]
 8005d74:	9300      	str	r3, [sp, #0]
 8005d76:	697b      	ldr	r3, [r7, #20]
 8005d78:	2200      	movs	r2, #0
 8005d7a:	2140      	movs	r1, #64	@ 0x40
 8005d7c:	68f8      	ldr	r0, [r7, #12]
 8005d7e:	f000 f814 	bl	8005daa <UART_WaitOnFlagUntilTimeout>
 8005d82:	4603      	mov	r3, r0
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d005      	beq.n	8005d94 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	2220      	movs	r2, #32
 8005d8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8005d90:	2303      	movs	r3, #3
 8005d92:	e006      	b.n	8005da2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	2220      	movs	r2, #32
 8005d98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005d9c:	2300      	movs	r3, #0
 8005d9e:	e000      	b.n	8005da2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005da0:	2302      	movs	r3, #2
  }
}
 8005da2:	4618      	mov	r0, r3
 8005da4:	3720      	adds	r7, #32
 8005da6:	46bd      	mov	sp, r7
 8005da8:	bd80      	pop	{r7, pc}

08005daa <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005daa:	b580      	push	{r7, lr}
 8005dac:	b086      	sub	sp, #24
 8005dae:	af00      	add	r7, sp, #0
 8005db0:	60f8      	str	r0, [r7, #12]
 8005db2:	60b9      	str	r1, [r7, #8]
 8005db4:	603b      	str	r3, [r7, #0]
 8005db6:	4613      	mov	r3, r2
 8005db8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005dba:	e03b      	b.n	8005e34 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005dbc:	6a3b      	ldr	r3, [r7, #32]
 8005dbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dc2:	d037      	beq.n	8005e34 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005dc4:	f7fc fc9e 	bl	8002704 <HAL_GetTick>
 8005dc8:	4602      	mov	r2, r0
 8005dca:	683b      	ldr	r3, [r7, #0]
 8005dcc:	1ad3      	subs	r3, r2, r3
 8005dce:	6a3a      	ldr	r2, [r7, #32]
 8005dd0:	429a      	cmp	r2, r3
 8005dd2:	d302      	bcc.n	8005dda <UART_WaitOnFlagUntilTimeout+0x30>
 8005dd4:	6a3b      	ldr	r3, [r7, #32]
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d101      	bne.n	8005dde <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005dda:	2303      	movs	r3, #3
 8005ddc:	e03a      	b.n	8005e54 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	68db      	ldr	r3, [r3, #12]
 8005de4:	f003 0304 	and.w	r3, r3, #4
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d023      	beq.n	8005e34 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005dec:	68bb      	ldr	r3, [r7, #8]
 8005dee:	2b80      	cmp	r3, #128	@ 0x80
 8005df0:	d020      	beq.n	8005e34 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005df2:	68bb      	ldr	r3, [r7, #8]
 8005df4:	2b40      	cmp	r3, #64	@ 0x40
 8005df6:	d01d      	beq.n	8005e34 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	f003 0308 	and.w	r3, r3, #8
 8005e02:	2b08      	cmp	r3, #8
 8005e04:	d116      	bne.n	8005e34 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005e06:	2300      	movs	r3, #0
 8005e08:	617b      	str	r3, [r7, #20]
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	617b      	str	r3, [r7, #20]
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	685b      	ldr	r3, [r3, #4]
 8005e18:	617b      	str	r3, [r7, #20]
 8005e1a:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005e1c:	68f8      	ldr	r0, [r7, #12]
 8005e1e:	f000 f81d 	bl	8005e5c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	2208      	movs	r2, #8
 8005e26:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	2200      	movs	r2, #0
 8005e2c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005e30:	2301      	movs	r3, #1
 8005e32:	e00f      	b.n	8005e54 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	681a      	ldr	r2, [r3, #0]
 8005e3a:	68bb      	ldr	r3, [r7, #8]
 8005e3c:	4013      	ands	r3, r2
 8005e3e:	68ba      	ldr	r2, [r7, #8]
 8005e40:	429a      	cmp	r2, r3
 8005e42:	bf0c      	ite	eq
 8005e44:	2301      	moveq	r3, #1
 8005e46:	2300      	movne	r3, #0
 8005e48:	b2db      	uxtb	r3, r3
 8005e4a:	461a      	mov	r2, r3
 8005e4c:	79fb      	ldrb	r3, [r7, #7]
 8005e4e:	429a      	cmp	r2, r3
 8005e50:	d0b4      	beq.n	8005dbc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005e52:	2300      	movs	r3, #0
}
 8005e54:	4618      	mov	r0, r3
 8005e56:	3718      	adds	r7, #24
 8005e58:	46bd      	mov	sp, r7
 8005e5a:	bd80      	pop	{r7, pc}

08005e5c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005e5c:	b480      	push	{r7}
 8005e5e:	b095      	sub	sp, #84	@ 0x54
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	330c      	adds	r3, #12
 8005e6a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e6e:	e853 3f00 	ldrex	r3, [r3]
 8005e72:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005e74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e76:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005e7a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	330c      	adds	r3, #12
 8005e82:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005e84:	643a      	str	r2, [r7, #64]	@ 0x40
 8005e86:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e88:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005e8a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005e8c:	e841 2300 	strex	r3, r2, [r1]
 8005e90:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005e92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d1e5      	bne.n	8005e64 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	3314      	adds	r3, #20
 8005e9e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ea0:	6a3b      	ldr	r3, [r7, #32]
 8005ea2:	e853 3f00 	ldrex	r3, [r3]
 8005ea6:	61fb      	str	r3, [r7, #28]
   return(result);
 8005ea8:	69fb      	ldr	r3, [r7, #28]
 8005eaa:	f023 0301 	bic.w	r3, r3, #1
 8005eae:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	3314      	adds	r3, #20
 8005eb6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005eb8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005eba:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ebc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005ebe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005ec0:	e841 2300 	strex	r3, r2, [r1]
 8005ec4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005ec6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d1e5      	bne.n	8005e98 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ed0:	2b01      	cmp	r3, #1
 8005ed2:	d119      	bne.n	8005f08 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	330c      	adds	r3, #12
 8005eda:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	e853 3f00 	ldrex	r3, [r3]
 8005ee2:	60bb      	str	r3, [r7, #8]
   return(result);
 8005ee4:	68bb      	ldr	r3, [r7, #8]
 8005ee6:	f023 0310 	bic.w	r3, r3, #16
 8005eea:	647b      	str	r3, [r7, #68]	@ 0x44
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	330c      	adds	r3, #12
 8005ef2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005ef4:	61ba      	str	r2, [r7, #24]
 8005ef6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ef8:	6979      	ldr	r1, [r7, #20]
 8005efa:	69ba      	ldr	r2, [r7, #24]
 8005efc:	e841 2300 	strex	r3, r2, [r1]
 8005f00:	613b      	str	r3, [r7, #16]
   return(result);
 8005f02:	693b      	ldr	r3, [r7, #16]
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d1e5      	bne.n	8005ed4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	2220      	movs	r2, #32
 8005f0c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	2200      	movs	r2, #0
 8005f14:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005f16:	bf00      	nop
 8005f18:	3754      	adds	r7, #84	@ 0x54
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f20:	4770      	bx	lr
	...

08005f24 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005f24:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005f28:	b0c0      	sub	sp, #256	@ 0x100
 8005f2a:	af00      	add	r7, sp, #0
 8005f2c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005f30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	691b      	ldr	r3, [r3, #16]
 8005f38:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005f3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f40:	68d9      	ldr	r1, [r3, #12]
 8005f42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f46:	681a      	ldr	r2, [r3, #0]
 8005f48:	ea40 0301 	orr.w	r3, r0, r1
 8005f4c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005f4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f52:	689a      	ldr	r2, [r3, #8]
 8005f54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f58:	691b      	ldr	r3, [r3, #16]
 8005f5a:	431a      	orrs	r2, r3
 8005f5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f60:	695b      	ldr	r3, [r3, #20]
 8005f62:	431a      	orrs	r2, r3
 8005f64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f68:	69db      	ldr	r3, [r3, #28]
 8005f6a:	4313      	orrs	r3, r2
 8005f6c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005f70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	68db      	ldr	r3, [r3, #12]
 8005f78:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005f7c:	f021 010c 	bic.w	r1, r1, #12
 8005f80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f84:	681a      	ldr	r2, [r3, #0]
 8005f86:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005f8a:	430b      	orrs	r3, r1
 8005f8c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005f8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	695b      	ldr	r3, [r3, #20]
 8005f96:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005f9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f9e:	6999      	ldr	r1, [r3, #24]
 8005fa0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005fa4:	681a      	ldr	r2, [r3, #0]
 8005fa6:	ea40 0301 	orr.w	r3, r0, r1
 8005faa:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005fac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005fb0:	681a      	ldr	r2, [r3, #0]
 8005fb2:	4b8f      	ldr	r3, [pc, #572]	@ (80061f0 <UART_SetConfig+0x2cc>)
 8005fb4:	429a      	cmp	r2, r3
 8005fb6:	d005      	beq.n	8005fc4 <UART_SetConfig+0xa0>
 8005fb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005fbc:	681a      	ldr	r2, [r3, #0]
 8005fbe:	4b8d      	ldr	r3, [pc, #564]	@ (80061f4 <UART_SetConfig+0x2d0>)
 8005fc0:	429a      	cmp	r2, r3
 8005fc2:	d104      	bne.n	8005fce <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005fc4:	f7ff fe02 	bl	8005bcc <HAL_RCC_GetPCLK2Freq>
 8005fc8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005fcc:	e003      	b.n	8005fd6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005fce:	f7ff fde9 	bl	8005ba4 <HAL_RCC_GetPCLK1Freq>
 8005fd2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005fd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005fda:	69db      	ldr	r3, [r3, #28]
 8005fdc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005fe0:	f040 810c 	bne.w	80061fc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005fe4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005fe8:	2200      	movs	r2, #0
 8005fea:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005fee:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005ff2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005ff6:	4622      	mov	r2, r4
 8005ff8:	462b      	mov	r3, r5
 8005ffa:	1891      	adds	r1, r2, r2
 8005ffc:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005ffe:	415b      	adcs	r3, r3
 8006000:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006002:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006006:	4621      	mov	r1, r4
 8006008:	eb12 0801 	adds.w	r8, r2, r1
 800600c:	4629      	mov	r1, r5
 800600e:	eb43 0901 	adc.w	r9, r3, r1
 8006012:	f04f 0200 	mov.w	r2, #0
 8006016:	f04f 0300 	mov.w	r3, #0
 800601a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800601e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006022:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006026:	4690      	mov	r8, r2
 8006028:	4699      	mov	r9, r3
 800602a:	4623      	mov	r3, r4
 800602c:	eb18 0303 	adds.w	r3, r8, r3
 8006030:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006034:	462b      	mov	r3, r5
 8006036:	eb49 0303 	adc.w	r3, r9, r3
 800603a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800603e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006042:	685b      	ldr	r3, [r3, #4]
 8006044:	2200      	movs	r2, #0
 8006046:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800604a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800604e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006052:	460b      	mov	r3, r1
 8006054:	18db      	adds	r3, r3, r3
 8006056:	653b      	str	r3, [r7, #80]	@ 0x50
 8006058:	4613      	mov	r3, r2
 800605a:	eb42 0303 	adc.w	r3, r2, r3
 800605e:	657b      	str	r3, [r7, #84]	@ 0x54
 8006060:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8006064:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006068:	f7fa fdfe 	bl	8000c68 <__aeabi_uldivmod>
 800606c:	4602      	mov	r2, r0
 800606e:	460b      	mov	r3, r1
 8006070:	4b61      	ldr	r3, [pc, #388]	@ (80061f8 <UART_SetConfig+0x2d4>)
 8006072:	fba3 2302 	umull	r2, r3, r3, r2
 8006076:	095b      	lsrs	r3, r3, #5
 8006078:	011c      	lsls	r4, r3, #4
 800607a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800607e:	2200      	movs	r2, #0
 8006080:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006084:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006088:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800608c:	4642      	mov	r2, r8
 800608e:	464b      	mov	r3, r9
 8006090:	1891      	adds	r1, r2, r2
 8006092:	64b9      	str	r1, [r7, #72]	@ 0x48
 8006094:	415b      	adcs	r3, r3
 8006096:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006098:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800609c:	4641      	mov	r1, r8
 800609e:	eb12 0a01 	adds.w	sl, r2, r1
 80060a2:	4649      	mov	r1, r9
 80060a4:	eb43 0b01 	adc.w	fp, r3, r1
 80060a8:	f04f 0200 	mov.w	r2, #0
 80060ac:	f04f 0300 	mov.w	r3, #0
 80060b0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80060b4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80060b8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80060bc:	4692      	mov	sl, r2
 80060be:	469b      	mov	fp, r3
 80060c0:	4643      	mov	r3, r8
 80060c2:	eb1a 0303 	adds.w	r3, sl, r3
 80060c6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80060ca:	464b      	mov	r3, r9
 80060cc:	eb4b 0303 	adc.w	r3, fp, r3
 80060d0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80060d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060d8:	685b      	ldr	r3, [r3, #4]
 80060da:	2200      	movs	r2, #0
 80060dc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80060e0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80060e4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80060e8:	460b      	mov	r3, r1
 80060ea:	18db      	adds	r3, r3, r3
 80060ec:	643b      	str	r3, [r7, #64]	@ 0x40
 80060ee:	4613      	mov	r3, r2
 80060f0:	eb42 0303 	adc.w	r3, r2, r3
 80060f4:	647b      	str	r3, [r7, #68]	@ 0x44
 80060f6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80060fa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80060fe:	f7fa fdb3 	bl	8000c68 <__aeabi_uldivmod>
 8006102:	4602      	mov	r2, r0
 8006104:	460b      	mov	r3, r1
 8006106:	4611      	mov	r1, r2
 8006108:	4b3b      	ldr	r3, [pc, #236]	@ (80061f8 <UART_SetConfig+0x2d4>)
 800610a:	fba3 2301 	umull	r2, r3, r3, r1
 800610e:	095b      	lsrs	r3, r3, #5
 8006110:	2264      	movs	r2, #100	@ 0x64
 8006112:	fb02 f303 	mul.w	r3, r2, r3
 8006116:	1acb      	subs	r3, r1, r3
 8006118:	00db      	lsls	r3, r3, #3
 800611a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800611e:	4b36      	ldr	r3, [pc, #216]	@ (80061f8 <UART_SetConfig+0x2d4>)
 8006120:	fba3 2302 	umull	r2, r3, r3, r2
 8006124:	095b      	lsrs	r3, r3, #5
 8006126:	005b      	lsls	r3, r3, #1
 8006128:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800612c:	441c      	add	r4, r3
 800612e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006132:	2200      	movs	r2, #0
 8006134:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006138:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800613c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8006140:	4642      	mov	r2, r8
 8006142:	464b      	mov	r3, r9
 8006144:	1891      	adds	r1, r2, r2
 8006146:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006148:	415b      	adcs	r3, r3
 800614a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800614c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006150:	4641      	mov	r1, r8
 8006152:	1851      	adds	r1, r2, r1
 8006154:	6339      	str	r1, [r7, #48]	@ 0x30
 8006156:	4649      	mov	r1, r9
 8006158:	414b      	adcs	r3, r1
 800615a:	637b      	str	r3, [r7, #52]	@ 0x34
 800615c:	f04f 0200 	mov.w	r2, #0
 8006160:	f04f 0300 	mov.w	r3, #0
 8006164:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006168:	4659      	mov	r1, fp
 800616a:	00cb      	lsls	r3, r1, #3
 800616c:	4651      	mov	r1, sl
 800616e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006172:	4651      	mov	r1, sl
 8006174:	00ca      	lsls	r2, r1, #3
 8006176:	4610      	mov	r0, r2
 8006178:	4619      	mov	r1, r3
 800617a:	4603      	mov	r3, r0
 800617c:	4642      	mov	r2, r8
 800617e:	189b      	adds	r3, r3, r2
 8006180:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006184:	464b      	mov	r3, r9
 8006186:	460a      	mov	r2, r1
 8006188:	eb42 0303 	adc.w	r3, r2, r3
 800618c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006190:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006194:	685b      	ldr	r3, [r3, #4]
 8006196:	2200      	movs	r2, #0
 8006198:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800619c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80061a0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80061a4:	460b      	mov	r3, r1
 80061a6:	18db      	adds	r3, r3, r3
 80061a8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80061aa:	4613      	mov	r3, r2
 80061ac:	eb42 0303 	adc.w	r3, r2, r3
 80061b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80061b2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80061b6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80061ba:	f7fa fd55 	bl	8000c68 <__aeabi_uldivmod>
 80061be:	4602      	mov	r2, r0
 80061c0:	460b      	mov	r3, r1
 80061c2:	4b0d      	ldr	r3, [pc, #52]	@ (80061f8 <UART_SetConfig+0x2d4>)
 80061c4:	fba3 1302 	umull	r1, r3, r3, r2
 80061c8:	095b      	lsrs	r3, r3, #5
 80061ca:	2164      	movs	r1, #100	@ 0x64
 80061cc:	fb01 f303 	mul.w	r3, r1, r3
 80061d0:	1ad3      	subs	r3, r2, r3
 80061d2:	00db      	lsls	r3, r3, #3
 80061d4:	3332      	adds	r3, #50	@ 0x32
 80061d6:	4a08      	ldr	r2, [pc, #32]	@ (80061f8 <UART_SetConfig+0x2d4>)
 80061d8:	fba2 2303 	umull	r2, r3, r2, r3
 80061dc:	095b      	lsrs	r3, r3, #5
 80061de:	f003 0207 	and.w	r2, r3, #7
 80061e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	4422      	add	r2, r4
 80061ea:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80061ec:	e106      	b.n	80063fc <UART_SetConfig+0x4d8>
 80061ee:	bf00      	nop
 80061f0:	40011000 	.word	0x40011000
 80061f4:	40011400 	.word	0x40011400
 80061f8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80061fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006200:	2200      	movs	r2, #0
 8006202:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006206:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800620a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800620e:	4642      	mov	r2, r8
 8006210:	464b      	mov	r3, r9
 8006212:	1891      	adds	r1, r2, r2
 8006214:	6239      	str	r1, [r7, #32]
 8006216:	415b      	adcs	r3, r3
 8006218:	627b      	str	r3, [r7, #36]	@ 0x24
 800621a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800621e:	4641      	mov	r1, r8
 8006220:	1854      	adds	r4, r2, r1
 8006222:	4649      	mov	r1, r9
 8006224:	eb43 0501 	adc.w	r5, r3, r1
 8006228:	f04f 0200 	mov.w	r2, #0
 800622c:	f04f 0300 	mov.w	r3, #0
 8006230:	00eb      	lsls	r3, r5, #3
 8006232:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006236:	00e2      	lsls	r2, r4, #3
 8006238:	4614      	mov	r4, r2
 800623a:	461d      	mov	r5, r3
 800623c:	4643      	mov	r3, r8
 800623e:	18e3      	adds	r3, r4, r3
 8006240:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006244:	464b      	mov	r3, r9
 8006246:	eb45 0303 	adc.w	r3, r5, r3
 800624a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800624e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006252:	685b      	ldr	r3, [r3, #4]
 8006254:	2200      	movs	r2, #0
 8006256:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800625a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800625e:	f04f 0200 	mov.w	r2, #0
 8006262:	f04f 0300 	mov.w	r3, #0
 8006266:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800626a:	4629      	mov	r1, r5
 800626c:	008b      	lsls	r3, r1, #2
 800626e:	4621      	mov	r1, r4
 8006270:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006274:	4621      	mov	r1, r4
 8006276:	008a      	lsls	r2, r1, #2
 8006278:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800627c:	f7fa fcf4 	bl	8000c68 <__aeabi_uldivmod>
 8006280:	4602      	mov	r2, r0
 8006282:	460b      	mov	r3, r1
 8006284:	4b60      	ldr	r3, [pc, #384]	@ (8006408 <UART_SetConfig+0x4e4>)
 8006286:	fba3 2302 	umull	r2, r3, r3, r2
 800628a:	095b      	lsrs	r3, r3, #5
 800628c:	011c      	lsls	r4, r3, #4
 800628e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006292:	2200      	movs	r2, #0
 8006294:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006298:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800629c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80062a0:	4642      	mov	r2, r8
 80062a2:	464b      	mov	r3, r9
 80062a4:	1891      	adds	r1, r2, r2
 80062a6:	61b9      	str	r1, [r7, #24]
 80062a8:	415b      	adcs	r3, r3
 80062aa:	61fb      	str	r3, [r7, #28]
 80062ac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80062b0:	4641      	mov	r1, r8
 80062b2:	1851      	adds	r1, r2, r1
 80062b4:	6139      	str	r1, [r7, #16]
 80062b6:	4649      	mov	r1, r9
 80062b8:	414b      	adcs	r3, r1
 80062ba:	617b      	str	r3, [r7, #20]
 80062bc:	f04f 0200 	mov.w	r2, #0
 80062c0:	f04f 0300 	mov.w	r3, #0
 80062c4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80062c8:	4659      	mov	r1, fp
 80062ca:	00cb      	lsls	r3, r1, #3
 80062cc:	4651      	mov	r1, sl
 80062ce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80062d2:	4651      	mov	r1, sl
 80062d4:	00ca      	lsls	r2, r1, #3
 80062d6:	4610      	mov	r0, r2
 80062d8:	4619      	mov	r1, r3
 80062da:	4603      	mov	r3, r0
 80062dc:	4642      	mov	r2, r8
 80062de:	189b      	adds	r3, r3, r2
 80062e0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80062e4:	464b      	mov	r3, r9
 80062e6:	460a      	mov	r2, r1
 80062e8:	eb42 0303 	adc.w	r3, r2, r3
 80062ec:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80062f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80062f4:	685b      	ldr	r3, [r3, #4]
 80062f6:	2200      	movs	r2, #0
 80062f8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80062fa:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80062fc:	f04f 0200 	mov.w	r2, #0
 8006300:	f04f 0300 	mov.w	r3, #0
 8006304:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006308:	4649      	mov	r1, r9
 800630a:	008b      	lsls	r3, r1, #2
 800630c:	4641      	mov	r1, r8
 800630e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006312:	4641      	mov	r1, r8
 8006314:	008a      	lsls	r2, r1, #2
 8006316:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800631a:	f7fa fca5 	bl	8000c68 <__aeabi_uldivmod>
 800631e:	4602      	mov	r2, r0
 8006320:	460b      	mov	r3, r1
 8006322:	4611      	mov	r1, r2
 8006324:	4b38      	ldr	r3, [pc, #224]	@ (8006408 <UART_SetConfig+0x4e4>)
 8006326:	fba3 2301 	umull	r2, r3, r3, r1
 800632a:	095b      	lsrs	r3, r3, #5
 800632c:	2264      	movs	r2, #100	@ 0x64
 800632e:	fb02 f303 	mul.w	r3, r2, r3
 8006332:	1acb      	subs	r3, r1, r3
 8006334:	011b      	lsls	r3, r3, #4
 8006336:	3332      	adds	r3, #50	@ 0x32
 8006338:	4a33      	ldr	r2, [pc, #204]	@ (8006408 <UART_SetConfig+0x4e4>)
 800633a:	fba2 2303 	umull	r2, r3, r2, r3
 800633e:	095b      	lsrs	r3, r3, #5
 8006340:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006344:	441c      	add	r4, r3
 8006346:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800634a:	2200      	movs	r2, #0
 800634c:	673b      	str	r3, [r7, #112]	@ 0x70
 800634e:	677a      	str	r2, [r7, #116]	@ 0x74
 8006350:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006354:	4642      	mov	r2, r8
 8006356:	464b      	mov	r3, r9
 8006358:	1891      	adds	r1, r2, r2
 800635a:	60b9      	str	r1, [r7, #8]
 800635c:	415b      	adcs	r3, r3
 800635e:	60fb      	str	r3, [r7, #12]
 8006360:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006364:	4641      	mov	r1, r8
 8006366:	1851      	adds	r1, r2, r1
 8006368:	6039      	str	r1, [r7, #0]
 800636a:	4649      	mov	r1, r9
 800636c:	414b      	adcs	r3, r1
 800636e:	607b      	str	r3, [r7, #4]
 8006370:	f04f 0200 	mov.w	r2, #0
 8006374:	f04f 0300 	mov.w	r3, #0
 8006378:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800637c:	4659      	mov	r1, fp
 800637e:	00cb      	lsls	r3, r1, #3
 8006380:	4651      	mov	r1, sl
 8006382:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006386:	4651      	mov	r1, sl
 8006388:	00ca      	lsls	r2, r1, #3
 800638a:	4610      	mov	r0, r2
 800638c:	4619      	mov	r1, r3
 800638e:	4603      	mov	r3, r0
 8006390:	4642      	mov	r2, r8
 8006392:	189b      	adds	r3, r3, r2
 8006394:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006396:	464b      	mov	r3, r9
 8006398:	460a      	mov	r2, r1
 800639a:	eb42 0303 	adc.w	r3, r2, r3
 800639e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80063a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80063a4:	685b      	ldr	r3, [r3, #4]
 80063a6:	2200      	movs	r2, #0
 80063a8:	663b      	str	r3, [r7, #96]	@ 0x60
 80063aa:	667a      	str	r2, [r7, #100]	@ 0x64
 80063ac:	f04f 0200 	mov.w	r2, #0
 80063b0:	f04f 0300 	mov.w	r3, #0
 80063b4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80063b8:	4649      	mov	r1, r9
 80063ba:	008b      	lsls	r3, r1, #2
 80063bc:	4641      	mov	r1, r8
 80063be:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80063c2:	4641      	mov	r1, r8
 80063c4:	008a      	lsls	r2, r1, #2
 80063c6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80063ca:	f7fa fc4d 	bl	8000c68 <__aeabi_uldivmod>
 80063ce:	4602      	mov	r2, r0
 80063d0:	460b      	mov	r3, r1
 80063d2:	4b0d      	ldr	r3, [pc, #52]	@ (8006408 <UART_SetConfig+0x4e4>)
 80063d4:	fba3 1302 	umull	r1, r3, r3, r2
 80063d8:	095b      	lsrs	r3, r3, #5
 80063da:	2164      	movs	r1, #100	@ 0x64
 80063dc:	fb01 f303 	mul.w	r3, r1, r3
 80063e0:	1ad3      	subs	r3, r2, r3
 80063e2:	011b      	lsls	r3, r3, #4
 80063e4:	3332      	adds	r3, #50	@ 0x32
 80063e6:	4a08      	ldr	r2, [pc, #32]	@ (8006408 <UART_SetConfig+0x4e4>)
 80063e8:	fba2 2303 	umull	r2, r3, r2, r3
 80063ec:	095b      	lsrs	r3, r3, #5
 80063ee:	f003 020f 	and.w	r2, r3, #15
 80063f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	4422      	add	r2, r4
 80063fa:	609a      	str	r2, [r3, #8]
}
 80063fc:	bf00      	nop
 80063fe:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8006402:	46bd      	mov	sp, r7
 8006404:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006408:	51eb851f 	.word	0x51eb851f

0800640c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800640c:	b084      	sub	sp, #16
 800640e:	b580      	push	{r7, lr}
 8006410:	b084      	sub	sp, #16
 8006412:	af00      	add	r7, sp, #0
 8006414:	6078      	str	r0, [r7, #4]
 8006416:	f107 001c 	add.w	r0, r7, #28
 800641a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800641e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8006422:	2b01      	cmp	r3, #1
 8006424:	d123      	bne.n	800646e <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800642a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	68db      	ldr	r3, [r3, #12]
 8006436:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800643a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800643e:	687a      	ldr	r2, [r7, #4]
 8006440:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	68db      	ldr	r3, [r3, #12]
 8006446:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800644e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006452:	2b01      	cmp	r3, #1
 8006454:	d105      	bne.n	8006462 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	68db      	ldr	r3, [r3, #12]
 800645a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006462:	6878      	ldr	r0, [r7, #4]
 8006464:	f001 fae8 	bl	8007a38 <USB_CoreReset>
 8006468:	4603      	mov	r3, r0
 800646a:	73fb      	strb	r3, [r7, #15]
 800646c:	e01b      	b.n	80064a6 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	68db      	ldr	r3, [r3, #12]
 8006472:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800647a:	6878      	ldr	r0, [r7, #4]
 800647c:	f001 fadc 	bl	8007a38 <USB_CoreReset>
 8006480:	4603      	mov	r3, r0
 8006482:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006484:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006488:	2b00      	cmp	r3, #0
 800648a:	d106      	bne.n	800649a <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006490:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	639a      	str	r2, [r3, #56]	@ 0x38
 8006498:	e005      	b.n	80064a6 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800649e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80064a6:	7fbb      	ldrb	r3, [r7, #30]
 80064a8:	2b01      	cmp	r3, #1
 80064aa:	d10b      	bne.n	80064c4 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	689b      	ldr	r3, [r3, #8]
 80064b0:	f043 0206 	orr.w	r2, r3, #6
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	689b      	ldr	r3, [r3, #8]
 80064bc:	f043 0220 	orr.w	r2, r3, #32
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80064c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80064c6:	4618      	mov	r0, r3
 80064c8:	3710      	adds	r7, #16
 80064ca:	46bd      	mov	sp, r7
 80064cc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80064d0:	b004      	add	sp, #16
 80064d2:	4770      	bx	lr

080064d4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80064d4:	b480      	push	{r7}
 80064d6:	b087      	sub	sp, #28
 80064d8:	af00      	add	r7, sp, #0
 80064da:	60f8      	str	r0, [r7, #12]
 80064dc:	60b9      	str	r1, [r7, #8]
 80064de:	4613      	mov	r3, r2
 80064e0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80064e2:	79fb      	ldrb	r3, [r7, #7]
 80064e4:	2b02      	cmp	r3, #2
 80064e6:	d165      	bne.n	80065b4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80064e8:	68bb      	ldr	r3, [r7, #8]
 80064ea:	4a41      	ldr	r2, [pc, #260]	@ (80065f0 <USB_SetTurnaroundTime+0x11c>)
 80064ec:	4293      	cmp	r3, r2
 80064ee:	d906      	bls.n	80064fe <USB_SetTurnaroundTime+0x2a>
 80064f0:	68bb      	ldr	r3, [r7, #8]
 80064f2:	4a40      	ldr	r2, [pc, #256]	@ (80065f4 <USB_SetTurnaroundTime+0x120>)
 80064f4:	4293      	cmp	r3, r2
 80064f6:	d202      	bcs.n	80064fe <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80064f8:	230f      	movs	r3, #15
 80064fa:	617b      	str	r3, [r7, #20]
 80064fc:	e062      	b.n	80065c4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80064fe:	68bb      	ldr	r3, [r7, #8]
 8006500:	4a3c      	ldr	r2, [pc, #240]	@ (80065f4 <USB_SetTurnaroundTime+0x120>)
 8006502:	4293      	cmp	r3, r2
 8006504:	d306      	bcc.n	8006514 <USB_SetTurnaroundTime+0x40>
 8006506:	68bb      	ldr	r3, [r7, #8]
 8006508:	4a3b      	ldr	r2, [pc, #236]	@ (80065f8 <USB_SetTurnaroundTime+0x124>)
 800650a:	4293      	cmp	r3, r2
 800650c:	d202      	bcs.n	8006514 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800650e:	230e      	movs	r3, #14
 8006510:	617b      	str	r3, [r7, #20]
 8006512:	e057      	b.n	80065c4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8006514:	68bb      	ldr	r3, [r7, #8]
 8006516:	4a38      	ldr	r2, [pc, #224]	@ (80065f8 <USB_SetTurnaroundTime+0x124>)
 8006518:	4293      	cmp	r3, r2
 800651a:	d306      	bcc.n	800652a <USB_SetTurnaroundTime+0x56>
 800651c:	68bb      	ldr	r3, [r7, #8]
 800651e:	4a37      	ldr	r2, [pc, #220]	@ (80065fc <USB_SetTurnaroundTime+0x128>)
 8006520:	4293      	cmp	r3, r2
 8006522:	d202      	bcs.n	800652a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8006524:	230d      	movs	r3, #13
 8006526:	617b      	str	r3, [r7, #20]
 8006528:	e04c      	b.n	80065c4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800652a:	68bb      	ldr	r3, [r7, #8]
 800652c:	4a33      	ldr	r2, [pc, #204]	@ (80065fc <USB_SetTurnaroundTime+0x128>)
 800652e:	4293      	cmp	r3, r2
 8006530:	d306      	bcc.n	8006540 <USB_SetTurnaroundTime+0x6c>
 8006532:	68bb      	ldr	r3, [r7, #8]
 8006534:	4a32      	ldr	r2, [pc, #200]	@ (8006600 <USB_SetTurnaroundTime+0x12c>)
 8006536:	4293      	cmp	r3, r2
 8006538:	d802      	bhi.n	8006540 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800653a:	230c      	movs	r3, #12
 800653c:	617b      	str	r3, [r7, #20]
 800653e:	e041      	b.n	80065c4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8006540:	68bb      	ldr	r3, [r7, #8]
 8006542:	4a2f      	ldr	r2, [pc, #188]	@ (8006600 <USB_SetTurnaroundTime+0x12c>)
 8006544:	4293      	cmp	r3, r2
 8006546:	d906      	bls.n	8006556 <USB_SetTurnaroundTime+0x82>
 8006548:	68bb      	ldr	r3, [r7, #8]
 800654a:	4a2e      	ldr	r2, [pc, #184]	@ (8006604 <USB_SetTurnaroundTime+0x130>)
 800654c:	4293      	cmp	r3, r2
 800654e:	d802      	bhi.n	8006556 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8006550:	230b      	movs	r3, #11
 8006552:	617b      	str	r3, [r7, #20]
 8006554:	e036      	b.n	80065c4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8006556:	68bb      	ldr	r3, [r7, #8]
 8006558:	4a2a      	ldr	r2, [pc, #168]	@ (8006604 <USB_SetTurnaroundTime+0x130>)
 800655a:	4293      	cmp	r3, r2
 800655c:	d906      	bls.n	800656c <USB_SetTurnaroundTime+0x98>
 800655e:	68bb      	ldr	r3, [r7, #8]
 8006560:	4a29      	ldr	r2, [pc, #164]	@ (8006608 <USB_SetTurnaroundTime+0x134>)
 8006562:	4293      	cmp	r3, r2
 8006564:	d802      	bhi.n	800656c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8006566:	230a      	movs	r3, #10
 8006568:	617b      	str	r3, [r7, #20]
 800656a:	e02b      	b.n	80065c4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800656c:	68bb      	ldr	r3, [r7, #8]
 800656e:	4a26      	ldr	r2, [pc, #152]	@ (8006608 <USB_SetTurnaroundTime+0x134>)
 8006570:	4293      	cmp	r3, r2
 8006572:	d906      	bls.n	8006582 <USB_SetTurnaroundTime+0xae>
 8006574:	68bb      	ldr	r3, [r7, #8]
 8006576:	4a25      	ldr	r2, [pc, #148]	@ (800660c <USB_SetTurnaroundTime+0x138>)
 8006578:	4293      	cmp	r3, r2
 800657a:	d202      	bcs.n	8006582 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800657c:	2309      	movs	r3, #9
 800657e:	617b      	str	r3, [r7, #20]
 8006580:	e020      	b.n	80065c4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8006582:	68bb      	ldr	r3, [r7, #8]
 8006584:	4a21      	ldr	r2, [pc, #132]	@ (800660c <USB_SetTurnaroundTime+0x138>)
 8006586:	4293      	cmp	r3, r2
 8006588:	d306      	bcc.n	8006598 <USB_SetTurnaroundTime+0xc4>
 800658a:	68bb      	ldr	r3, [r7, #8]
 800658c:	4a20      	ldr	r2, [pc, #128]	@ (8006610 <USB_SetTurnaroundTime+0x13c>)
 800658e:	4293      	cmp	r3, r2
 8006590:	d802      	bhi.n	8006598 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8006592:	2308      	movs	r3, #8
 8006594:	617b      	str	r3, [r7, #20]
 8006596:	e015      	b.n	80065c4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8006598:	68bb      	ldr	r3, [r7, #8]
 800659a:	4a1d      	ldr	r2, [pc, #116]	@ (8006610 <USB_SetTurnaroundTime+0x13c>)
 800659c:	4293      	cmp	r3, r2
 800659e:	d906      	bls.n	80065ae <USB_SetTurnaroundTime+0xda>
 80065a0:	68bb      	ldr	r3, [r7, #8]
 80065a2:	4a1c      	ldr	r2, [pc, #112]	@ (8006614 <USB_SetTurnaroundTime+0x140>)
 80065a4:	4293      	cmp	r3, r2
 80065a6:	d202      	bcs.n	80065ae <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80065a8:	2307      	movs	r3, #7
 80065aa:	617b      	str	r3, [r7, #20]
 80065ac:	e00a      	b.n	80065c4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80065ae:	2306      	movs	r3, #6
 80065b0:	617b      	str	r3, [r7, #20]
 80065b2:	e007      	b.n	80065c4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80065b4:	79fb      	ldrb	r3, [r7, #7]
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d102      	bne.n	80065c0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80065ba:	2309      	movs	r3, #9
 80065bc:	617b      	str	r3, [r7, #20]
 80065be:	e001      	b.n	80065c4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80065c0:	2309      	movs	r3, #9
 80065c2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	68db      	ldr	r3, [r3, #12]
 80065c8:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	68da      	ldr	r2, [r3, #12]
 80065d4:	697b      	ldr	r3, [r7, #20]
 80065d6:	029b      	lsls	r3, r3, #10
 80065d8:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 80065dc:	431a      	orrs	r2, r3
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80065e2:	2300      	movs	r3, #0
}
 80065e4:	4618      	mov	r0, r3
 80065e6:	371c      	adds	r7, #28
 80065e8:	46bd      	mov	sp, r7
 80065ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ee:	4770      	bx	lr
 80065f0:	00d8acbf 	.word	0x00d8acbf
 80065f4:	00e4e1c0 	.word	0x00e4e1c0
 80065f8:	00f42400 	.word	0x00f42400
 80065fc:	01067380 	.word	0x01067380
 8006600:	011a499f 	.word	0x011a499f
 8006604:	01312cff 	.word	0x01312cff
 8006608:	014ca43f 	.word	0x014ca43f
 800660c:	016e3600 	.word	0x016e3600
 8006610:	01a6ab1f 	.word	0x01a6ab1f
 8006614:	01e84800 	.word	0x01e84800

08006618 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006618:	b480      	push	{r7}
 800661a:	b083      	sub	sp, #12
 800661c:	af00      	add	r7, sp, #0
 800661e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	689b      	ldr	r3, [r3, #8]
 8006624:	f043 0201 	orr.w	r2, r3, #1
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800662c:	2300      	movs	r3, #0
}
 800662e:	4618      	mov	r0, r3
 8006630:	370c      	adds	r7, #12
 8006632:	46bd      	mov	sp, r7
 8006634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006638:	4770      	bx	lr

0800663a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800663a:	b480      	push	{r7}
 800663c:	b083      	sub	sp, #12
 800663e:	af00      	add	r7, sp, #0
 8006640:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	689b      	ldr	r3, [r3, #8]
 8006646:	f023 0201 	bic.w	r2, r3, #1
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800664e:	2300      	movs	r3, #0
}
 8006650:	4618      	mov	r0, r3
 8006652:	370c      	adds	r7, #12
 8006654:	46bd      	mov	sp, r7
 8006656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665a:	4770      	bx	lr

0800665c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800665c:	b580      	push	{r7, lr}
 800665e:	b084      	sub	sp, #16
 8006660:	af00      	add	r7, sp, #0
 8006662:	6078      	str	r0, [r7, #4]
 8006664:	460b      	mov	r3, r1
 8006666:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006668:	2300      	movs	r3, #0
 800666a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	68db      	ldr	r3, [r3, #12]
 8006670:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006678:	78fb      	ldrb	r3, [r7, #3]
 800667a:	2b01      	cmp	r3, #1
 800667c:	d115      	bne.n	80066aa <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	68db      	ldr	r3, [r3, #12]
 8006682:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800668a:	200a      	movs	r0, #10
 800668c:	f7fc f846 	bl	800271c <HAL_Delay>
      ms += 10U;
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	330a      	adds	r3, #10
 8006694:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006696:	6878      	ldr	r0, [r7, #4]
 8006698:	f001 f93f 	bl	800791a <USB_GetMode>
 800669c:	4603      	mov	r3, r0
 800669e:	2b01      	cmp	r3, #1
 80066a0:	d01e      	beq.n	80066e0 <USB_SetCurrentMode+0x84>
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	2bc7      	cmp	r3, #199	@ 0xc7
 80066a6:	d9f0      	bls.n	800668a <USB_SetCurrentMode+0x2e>
 80066a8:	e01a      	b.n	80066e0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80066aa:	78fb      	ldrb	r3, [r7, #3]
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d115      	bne.n	80066dc <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	68db      	ldr	r3, [r3, #12]
 80066b4:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80066bc:	200a      	movs	r0, #10
 80066be:	f7fc f82d 	bl	800271c <HAL_Delay>
      ms += 10U;
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	330a      	adds	r3, #10
 80066c6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80066c8:	6878      	ldr	r0, [r7, #4]
 80066ca:	f001 f926 	bl	800791a <USB_GetMode>
 80066ce:	4603      	mov	r3, r0
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d005      	beq.n	80066e0 <USB_SetCurrentMode+0x84>
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	2bc7      	cmp	r3, #199	@ 0xc7
 80066d8:	d9f0      	bls.n	80066bc <USB_SetCurrentMode+0x60>
 80066da:	e001      	b.n	80066e0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80066dc:	2301      	movs	r3, #1
 80066de:	e005      	b.n	80066ec <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	2bc8      	cmp	r3, #200	@ 0xc8
 80066e4:	d101      	bne.n	80066ea <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80066e6:	2301      	movs	r3, #1
 80066e8:	e000      	b.n	80066ec <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80066ea:	2300      	movs	r3, #0
}
 80066ec:	4618      	mov	r0, r3
 80066ee:	3710      	adds	r7, #16
 80066f0:	46bd      	mov	sp, r7
 80066f2:	bd80      	pop	{r7, pc}

080066f4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80066f4:	b084      	sub	sp, #16
 80066f6:	b580      	push	{r7, lr}
 80066f8:	b086      	sub	sp, #24
 80066fa:	af00      	add	r7, sp, #0
 80066fc:	6078      	str	r0, [r7, #4]
 80066fe:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8006702:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006706:	2300      	movs	r3, #0
 8006708:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800670e:	2300      	movs	r3, #0
 8006710:	613b      	str	r3, [r7, #16]
 8006712:	e009      	b.n	8006728 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006714:	687a      	ldr	r2, [r7, #4]
 8006716:	693b      	ldr	r3, [r7, #16]
 8006718:	3340      	adds	r3, #64	@ 0x40
 800671a:	009b      	lsls	r3, r3, #2
 800671c:	4413      	add	r3, r2
 800671e:	2200      	movs	r2, #0
 8006720:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006722:	693b      	ldr	r3, [r7, #16]
 8006724:	3301      	adds	r3, #1
 8006726:	613b      	str	r3, [r7, #16]
 8006728:	693b      	ldr	r3, [r7, #16]
 800672a:	2b0e      	cmp	r3, #14
 800672c:	d9f2      	bls.n	8006714 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800672e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006732:	2b00      	cmp	r3, #0
 8006734:	d11c      	bne.n	8006770 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800673c:	685b      	ldr	r3, [r3, #4]
 800673e:	68fa      	ldr	r2, [r7, #12]
 8006740:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006744:	f043 0302 	orr.w	r3, r3, #2
 8006748:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800674e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800675a:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006766:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	639a      	str	r2, [r3, #56]	@ 0x38
 800676e:	e00b      	b.n	8006788 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006774:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006780:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800678e:	461a      	mov	r2, r3
 8006790:	2300      	movs	r3, #0
 8006792:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006794:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8006798:	2b01      	cmp	r3, #1
 800679a:	d10d      	bne.n	80067b8 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800679c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d104      	bne.n	80067ae <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80067a4:	2100      	movs	r1, #0
 80067a6:	6878      	ldr	r0, [r7, #4]
 80067a8:	f000 f968 	bl	8006a7c <USB_SetDevSpeed>
 80067ac:	e008      	b.n	80067c0 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80067ae:	2101      	movs	r1, #1
 80067b0:	6878      	ldr	r0, [r7, #4]
 80067b2:	f000 f963 	bl	8006a7c <USB_SetDevSpeed>
 80067b6:	e003      	b.n	80067c0 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80067b8:	2103      	movs	r1, #3
 80067ba:	6878      	ldr	r0, [r7, #4]
 80067bc:	f000 f95e 	bl	8006a7c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80067c0:	2110      	movs	r1, #16
 80067c2:	6878      	ldr	r0, [r7, #4]
 80067c4:	f000 f8fa 	bl	80069bc <USB_FlushTxFifo>
 80067c8:	4603      	mov	r3, r0
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d001      	beq.n	80067d2 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 80067ce:	2301      	movs	r3, #1
 80067d0:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80067d2:	6878      	ldr	r0, [r7, #4]
 80067d4:	f000 f924 	bl	8006a20 <USB_FlushRxFifo>
 80067d8:	4603      	mov	r3, r0
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d001      	beq.n	80067e2 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 80067de:	2301      	movs	r3, #1
 80067e0:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80067e8:	461a      	mov	r2, r3
 80067ea:	2300      	movs	r3, #0
 80067ec:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80067f4:	461a      	mov	r2, r3
 80067f6:	2300      	movs	r3, #0
 80067f8:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006800:	461a      	mov	r2, r3
 8006802:	2300      	movs	r3, #0
 8006804:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006806:	2300      	movs	r3, #0
 8006808:	613b      	str	r3, [r7, #16]
 800680a:	e043      	b.n	8006894 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800680c:	693b      	ldr	r3, [r7, #16]
 800680e:	015a      	lsls	r2, r3, #5
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	4413      	add	r3, r2
 8006814:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800681e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006822:	d118      	bne.n	8006856 <USB_DevInit+0x162>
    {
      if (i == 0U)
 8006824:	693b      	ldr	r3, [r7, #16]
 8006826:	2b00      	cmp	r3, #0
 8006828:	d10a      	bne.n	8006840 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800682a:	693b      	ldr	r3, [r7, #16]
 800682c:	015a      	lsls	r2, r3, #5
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	4413      	add	r3, r2
 8006832:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006836:	461a      	mov	r2, r3
 8006838:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800683c:	6013      	str	r3, [r2, #0]
 800683e:	e013      	b.n	8006868 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006840:	693b      	ldr	r3, [r7, #16]
 8006842:	015a      	lsls	r2, r3, #5
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	4413      	add	r3, r2
 8006848:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800684c:	461a      	mov	r2, r3
 800684e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006852:	6013      	str	r3, [r2, #0]
 8006854:	e008      	b.n	8006868 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006856:	693b      	ldr	r3, [r7, #16]
 8006858:	015a      	lsls	r2, r3, #5
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	4413      	add	r3, r2
 800685e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006862:	461a      	mov	r2, r3
 8006864:	2300      	movs	r3, #0
 8006866:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006868:	693b      	ldr	r3, [r7, #16]
 800686a:	015a      	lsls	r2, r3, #5
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	4413      	add	r3, r2
 8006870:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006874:	461a      	mov	r2, r3
 8006876:	2300      	movs	r3, #0
 8006878:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800687a:	693b      	ldr	r3, [r7, #16]
 800687c:	015a      	lsls	r2, r3, #5
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	4413      	add	r3, r2
 8006882:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006886:	461a      	mov	r2, r3
 8006888:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800688c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800688e:	693b      	ldr	r3, [r7, #16]
 8006890:	3301      	adds	r3, #1
 8006892:	613b      	str	r3, [r7, #16]
 8006894:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006898:	461a      	mov	r2, r3
 800689a:	693b      	ldr	r3, [r7, #16]
 800689c:	4293      	cmp	r3, r2
 800689e:	d3b5      	bcc.n	800680c <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80068a0:	2300      	movs	r3, #0
 80068a2:	613b      	str	r3, [r7, #16]
 80068a4:	e043      	b.n	800692e <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80068a6:	693b      	ldr	r3, [r7, #16]
 80068a8:	015a      	lsls	r2, r3, #5
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	4413      	add	r3, r2
 80068ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80068b8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80068bc:	d118      	bne.n	80068f0 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 80068be:	693b      	ldr	r3, [r7, #16]
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d10a      	bne.n	80068da <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80068c4:	693b      	ldr	r3, [r7, #16]
 80068c6:	015a      	lsls	r2, r3, #5
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	4413      	add	r3, r2
 80068cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80068d0:	461a      	mov	r2, r3
 80068d2:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80068d6:	6013      	str	r3, [r2, #0]
 80068d8:	e013      	b.n	8006902 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80068da:	693b      	ldr	r3, [r7, #16]
 80068dc:	015a      	lsls	r2, r3, #5
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	4413      	add	r3, r2
 80068e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80068e6:	461a      	mov	r2, r3
 80068e8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80068ec:	6013      	str	r3, [r2, #0]
 80068ee:	e008      	b.n	8006902 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80068f0:	693b      	ldr	r3, [r7, #16]
 80068f2:	015a      	lsls	r2, r3, #5
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	4413      	add	r3, r2
 80068f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80068fc:	461a      	mov	r2, r3
 80068fe:	2300      	movs	r3, #0
 8006900:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006902:	693b      	ldr	r3, [r7, #16]
 8006904:	015a      	lsls	r2, r3, #5
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	4413      	add	r3, r2
 800690a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800690e:	461a      	mov	r2, r3
 8006910:	2300      	movs	r3, #0
 8006912:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006914:	693b      	ldr	r3, [r7, #16]
 8006916:	015a      	lsls	r2, r3, #5
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	4413      	add	r3, r2
 800691c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006920:	461a      	mov	r2, r3
 8006922:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006926:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006928:	693b      	ldr	r3, [r7, #16]
 800692a:	3301      	adds	r3, #1
 800692c:	613b      	str	r3, [r7, #16]
 800692e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006932:	461a      	mov	r2, r3
 8006934:	693b      	ldr	r3, [r7, #16]
 8006936:	4293      	cmp	r3, r2
 8006938:	d3b5      	bcc.n	80068a6 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006940:	691b      	ldr	r3, [r3, #16]
 8006942:	68fa      	ldr	r2, [r7, #12]
 8006944:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006948:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800694c:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	2200      	movs	r2, #0
 8006952:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800695a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800695c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006960:	2b00      	cmp	r3, #0
 8006962:	d105      	bne.n	8006970 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	699b      	ldr	r3, [r3, #24]
 8006968:	f043 0210 	orr.w	r2, r3, #16
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	699a      	ldr	r2, [r3, #24]
 8006974:	4b10      	ldr	r3, [pc, #64]	@ (80069b8 <USB_DevInit+0x2c4>)
 8006976:	4313      	orrs	r3, r2
 8006978:	687a      	ldr	r2, [r7, #4]
 800697a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800697c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8006980:	2b00      	cmp	r3, #0
 8006982:	d005      	beq.n	8006990 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	699b      	ldr	r3, [r3, #24]
 8006988:	f043 0208 	orr.w	r2, r3, #8
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006990:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006994:	2b01      	cmp	r3, #1
 8006996:	d107      	bne.n	80069a8 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	699b      	ldr	r3, [r3, #24]
 800699c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80069a0:	f043 0304 	orr.w	r3, r3, #4
 80069a4:	687a      	ldr	r2, [r7, #4]
 80069a6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80069a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80069aa:	4618      	mov	r0, r3
 80069ac:	3718      	adds	r7, #24
 80069ae:	46bd      	mov	sp, r7
 80069b0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80069b4:	b004      	add	sp, #16
 80069b6:	4770      	bx	lr
 80069b8:	803c3800 	.word	0x803c3800

080069bc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80069bc:	b480      	push	{r7}
 80069be:	b085      	sub	sp, #20
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	6078      	str	r0, [r7, #4]
 80069c4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80069c6:	2300      	movs	r3, #0
 80069c8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	3301      	adds	r3, #1
 80069ce:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80069d6:	d901      	bls.n	80069dc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80069d8:	2303      	movs	r3, #3
 80069da:	e01b      	b.n	8006a14 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	691b      	ldr	r3, [r3, #16]
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	daf2      	bge.n	80069ca <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80069e4:	2300      	movs	r3, #0
 80069e6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80069e8:	683b      	ldr	r3, [r7, #0]
 80069ea:	019b      	lsls	r3, r3, #6
 80069ec:	f043 0220 	orr.w	r2, r3, #32
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	3301      	adds	r3, #1
 80069f8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006a00:	d901      	bls.n	8006a06 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006a02:	2303      	movs	r3, #3
 8006a04:	e006      	b.n	8006a14 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	691b      	ldr	r3, [r3, #16]
 8006a0a:	f003 0320 	and.w	r3, r3, #32
 8006a0e:	2b20      	cmp	r3, #32
 8006a10:	d0f0      	beq.n	80069f4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006a12:	2300      	movs	r3, #0
}
 8006a14:	4618      	mov	r0, r3
 8006a16:	3714      	adds	r7, #20
 8006a18:	46bd      	mov	sp, r7
 8006a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1e:	4770      	bx	lr

08006a20 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006a20:	b480      	push	{r7}
 8006a22:	b085      	sub	sp, #20
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006a28:	2300      	movs	r3, #0
 8006a2a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	3301      	adds	r3, #1
 8006a30:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006a38:	d901      	bls.n	8006a3e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006a3a:	2303      	movs	r3, #3
 8006a3c:	e018      	b.n	8006a70 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	691b      	ldr	r3, [r3, #16]
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	daf2      	bge.n	8006a2c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006a46:	2300      	movs	r3, #0
 8006a48:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	2210      	movs	r2, #16
 8006a4e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	3301      	adds	r3, #1
 8006a54:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006a5c:	d901      	bls.n	8006a62 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006a5e:	2303      	movs	r3, #3
 8006a60:	e006      	b.n	8006a70 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	691b      	ldr	r3, [r3, #16]
 8006a66:	f003 0310 	and.w	r3, r3, #16
 8006a6a:	2b10      	cmp	r3, #16
 8006a6c:	d0f0      	beq.n	8006a50 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006a6e:	2300      	movs	r3, #0
}
 8006a70:	4618      	mov	r0, r3
 8006a72:	3714      	adds	r7, #20
 8006a74:	46bd      	mov	sp, r7
 8006a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a7a:	4770      	bx	lr

08006a7c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006a7c:	b480      	push	{r7}
 8006a7e:	b085      	sub	sp, #20
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	6078      	str	r0, [r7, #4]
 8006a84:	460b      	mov	r3, r1
 8006a86:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006a92:	681a      	ldr	r2, [r3, #0]
 8006a94:	78fb      	ldrb	r3, [r7, #3]
 8006a96:	68f9      	ldr	r1, [r7, #12]
 8006a98:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006a9c:	4313      	orrs	r3, r2
 8006a9e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006aa0:	2300      	movs	r3, #0
}
 8006aa2:	4618      	mov	r0, r3
 8006aa4:	3714      	adds	r7, #20
 8006aa6:	46bd      	mov	sp, r7
 8006aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aac:	4770      	bx	lr

08006aae <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8006aae:	b480      	push	{r7}
 8006ab0:	b087      	sub	sp, #28
 8006ab2:	af00      	add	r7, sp, #0
 8006ab4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8006aba:	693b      	ldr	r3, [r7, #16]
 8006abc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006ac0:	689b      	ldr	r3, [r3, #8]
 8006ac2:	f003 0306 	and.w	r3, r3, #6
 8006ac6:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d102      	bne.n	8006ad4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8006ace:	2300      	movs	r3, #0
 8006ad0:	75fb      	strb	r3, [r7, #23]
 8006ad2:	e00a      	b.n	8006aea <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	2b02      	cmp	r3, #2
 8006ad8:	d002      	beq.n	8006ae0 <USB_GetDevSpeed+0x32>
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	2b06      	cmp	r3, #6
 8006ade:	d102      	bne.n	8006ae6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8006ae0:	2302      	movs	r3, #2
 8006ae2:	75fb      	strb	r3, [r7, #23]
 8006ae4:	e001      	b.n	8006aea <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8006ae6:	230f      	movs	r3, #15
 8006ae8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8006aea:	7dfb      	ldrb	r3, [r7, #23]
}
 8006aec:	4618      	mov	r0, r3
 8006aee:	371c      	adds	r7, #28
 8006af0:	46bd      	mov	sp, r7
 8006af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af6:	4770      	bx	lr

08006af8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006af8:	b480      	push	{r7}
 8006afa:	b085      	sub	sp, #20
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	6078      	str	r0, [r7, #4]
 8006b00:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006b06:	683b      	ldr	r3, [r7, #0]
 8006b08:	781b      	ldrb	r3, [r3, #0]
 8006b0a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006b0c:	683b      	ldr	r3, [r7, #0]
 8006b0e:	785b      	ldrb	r3, [r3, #1]
 8006b10:	2b01      	cmp	r3, #1
 8006b12:	d13a      	bne.n	8006b8a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006b1a:	69da      	ldr	r2, [r3, #28]
 8006b1c:	683b      	ldr	r3, [r7, #0]
 8006b1e:	781b      	ldrb	r3, [r3, #0]
 8006b20:	f003 030f 	and.w	r3, r3, #15
 8006b24:	2101      	movs	r1, #1
 8006b26:	fa01 f303 	lsl.w	r3, r1, r3
 8006b2a:	b29b      	uxth	r3, r3
 8006b2c:	68f9      	ldr	r1, [r7, #12]
 8006b2e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006b32:	4313      	orrs	r3, r2
 8006b34:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8006b36:	68bb      	ldr	r3, [r7, #8]
 8006b38:	015a      	lsls	r2, r3, #5
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	4413      	add	r3, r2
 8006b3e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d155      	bne.n	8006bf8 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006b4c:	68bb      	ldr	r3, [r7, #8]
 8006b4e:	015a      	lsls	r2, r3, #5
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	4413      	add	r3, r2
 8006b54:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006b58:	681a      	ldr	r2, [r3, #0]
 8006b5a:	683b      	ldr	r3, [r7, #0]
 8006b5c:	689b      	ldr	r3, [r3, #8]
 8006b5e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006b62:	683b      	ldr	r3, [r7, #0]
 8006b64:	791b      	ldrb	r3, [r3, #4]
 8006b66:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006b68:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006b6a:	68bb      	ldr	r3, [r7, #8]
 8006b6c:	059b      	lsls	r3, r3, #22
 8006b6e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006b70:	4313      	orrs	r3, r2
 8006b72:	68ba      	ldr	r2, [r7, #8]
 8006b74:	0151      	lsls	r1, r2, #5
 8006b76:	68fa      	ldr	r2, [r7, #12]
 8006b78:	440a      	add	r2, r1
 8006b7a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006b7e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006b82:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006b86:	6013      	str	r3, [r2, #0]
 8006b88:	e036      	b.n	8006bf8 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006b90:	69da      	ldr	r2, [r3, #28]
 8006b92:	683b      	ldr	r3, [r7, #0]
 8006b94:	781b      	ldrb	r3, [r3, #0]
 8006b96:	f003 030f 	and.w	r3, r3, #15
 8006b9a:	2101      	movs	r1, #1
 8006b9c:	fa01 f303 	lsl.w	r3, r1, r3
 8006ba0:	041b      	lsls	r3, r3, #16
 8006ba2:	68f9      	ldr	r1, [r7, #12]
 8006ba4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006ba8:	4313      	orrs	r3, r2
 8006baa:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8006bac:	68bb      	ldr	r3, [r7, #8]
 8006bae:	015a      	lsls	r2, r3, #5
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	4413      	add	r3, r2
 8006bb4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d11a      	bne.n	8006bf8 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006bc2:	68bb      	ldr	r3, [r7, #8]
 8006bc4:	015a      	lsls	r2, r3, #5
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	4413      	add	r3, r2
 8006bca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006bce:	681a      	ldr	r2, [r3, #0]
 8006bd0:	683b      	ldr	r3, [r7, #0]
 8006bd2:	689b      	ldr	r3, [r3, #8]
 8006bd4:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8006bd8:	683b      	ldr	r3, [r7, #0]
 8006bda:	791b      	ldrb	r3, [r3, #4]
 8006bdc:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006bde:	430b      	orrs	r3, r1
 8006be0:	4313      	orrs	r3, r2
 8006be2:	68ba      	ldr	r2, [r7, #8]
 8006be4:	0151      	lsls	r1, r2, #5
 8006be6:	68fa      	ldr	r2, [r7, #12]
 8006be8:	440a      	add	r2, r1
 8006bea:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006bee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006bf2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006bf6:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8006bf8:	2300      	movs	r3, #0
}
 8006bfa:	4618      	mov	r0, r3
 8006bfc:	3714      	adds	r7, #20
 8006bfe:	46bd      	mov	sp, r7
 8006c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c04:	4770      	bx	lr
	...

08006c08 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006c08:	b480      	push	{r7}
 8006c0a:	b085      	sub	sp, #20
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	6078      	str	r0, [r7, #4]
 8006c10:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006c16:	683b      	ldr	r3, [r7, #0]
 8006c18:	781b      	ldrb	r3, [r3, #0]
 8006c1a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8006c1c:	683b      	ldr	r3, [r7, #0]
 8006c1e:	785b      	ldrb	r3, [r3, #1]
 8006c20:	2b01      	cmp	r3, #1
 8006c22:	d161      	bne.n	8006ce8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006c24:	68bb      	ldr	r3, [r7, #8]
 8006c26:	015a      	lsls	r2, r3, #5
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	4413      	add	r3, r2
 8006c2c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006c36:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006c3a:	d11f      	bne.n	8006c7c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006c3c:	68bb      	ldr	r3, [r7, #8]
 8006c3e:	015a      	lsls	r2, r3, #5
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	4413      	add	r3, r2
 8006c44:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	68ba      	ldr	r2, [r7, #8]
 8006c4c:	0151      	lsls	r1, r2, #5
 8006c4e:	68fa      	ldr	r2, [r7, #12]
 8006c50:	440a      	add	r2, r1
 8006c52:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006c56:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006c5a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8006c5c:	68bb      	ldr	r3, [r7, #8]
 8006c5e:	015a      	lsls	r2, r3, #5
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	4413      	add	r3, r2
 8006c64:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	68ba      	ldr	r2, [r7, #8]
 8006c6c:	0151      	lsls	r1, r2, #5
 8006c6e:	68fa      	ldr	r2, [r7, #12]
 8006c70:	440a      	add	r2, r1
 8006c72:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006c76:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006c7a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006c82:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006c84:	683b      	ldr	r3, [r7, #0]
 8006c86:	781b      	ldrb	r3, [r3, #0]
 8006c88:	f003 030f 	and.w	r3, r3, #15
 8006c8c:	2101      	movs	r1, #1
 8006c8e:	fa01 f303 	lsl.w	r3, r1, r3
 8006c92:	b29b      	uxth	r3, r3
 8006c94:	43db      	mvns	r3, r3
 8006c96:	68f9      	ldr	r1, [r7, #12]
 8006c98:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006c9c:	4013      	ands	r3, r2
 8006c9e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006ca6:	69da      	ldr	r2, [r3, #28]
 8006ca8:	683b      	ldr	r3, [r7, #0]
 8006caa:	781b      	ldrb	r3, [r3, #0]
 8006cac:	f003 030f 	and.w	r3, r3, #15
 8006cb0:	2101      	movs	r1, #1
 8006cb2:	fa01 f303 	lsl.w	r3, r1, r3
 8006cb6:	b29b      	uxth	r3, r3
 8006cb8:	43db      	mvns	r3, r3
 8006cba:	68f9      	ldr	r1, [r7, #12]
 8006cbc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006cc0:	4013      	ands	r3, r2
 8006cc2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8006cc4:	68bb      	ldr	r3, [r7, #8]
 8006cc6:	015a      	lsls	r2, r3, #5
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	4413      	add	r3, r2
 8006ccc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006cd0:	681a      	ldr	r2, [r3, #0]
 8006cd2:	68bb      	ldr	r3, [r7, #8]
 8006cd4:	0159      	lsls	r1, r3, #5
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	440b      	add	r3, r1
 8006cda:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006cde:	4619      	mov	r1, r3
 8006ce0:	4b35      	ldr	r3, [pc, #212]	@ (8006db8 <USB_DeactivateEndpoint+0x1b0>)
 8006ce2:	4013      	ands	r3, r2
 8006ce4:	600b      	str	r3, [r1, #0]
 8006ce6:	e060      	b.n	8006daa <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006ce8:	68bb      	ldr	r3, [r7, #8]
 8006cea:	015a      	lsls	r2, r3, #5
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	4413      	add	r3, r2
 8006cf0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006cfa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006cfe:	d11f      	bne.n	8006d40 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006d00:	68bb      	ldr	r3, [r7, #8]
 8006d02:	015a      	lsls	r2, r3, #5
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	4413      	add	r3, r2
 8006d08:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	68ba      	ldr	r2, [r7, #8]
 8006d10:	0151      	lsls	r1, r2, #5
 8006d12:	68fa      	ldr	r2, [r7, #12]
 8006d14:	440a      	add	r2, r1
 8006d16:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006d1a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006d1e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8006d20:	68bb      	ldr	r3, [r7, #8]
 8006d22:	015a      	lsls	r2, r3, #5
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	4413      	add	r3, r2
 8006d28:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	68ba      	ldr	r2, [r7, #8]
 8006d30:	0151      	lsls	r1, r2, #5
 8006d32:	68fa      	ldr	r2, [r7, #12]
 8006d34:	440a      	add	r2, r1
 8006d36:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006d3a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006d3e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006d46:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006d48:	683b      	ldr	r3, [r7, #0]
 8006d4a:	781b      	ldrb	r3, [r3, #0]
 8006d4c:	f003 030f 	and.w	r3, r3, #15
 8006d50:	2101      	movs	r1, #1
 8006d52:	fa01 f303 	lsl.w	r3, r1, r3
 8006d56:	041b      	lsls	r3, r3, #16
 8006d58:	43db      	mvns	r3, r3
 8006d5a:	68f9      	ldr	r1, [r7, #12]
 8006d5c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006d60:	4013      	ands	r3, r2
 8006d62:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006d6a:	69da      	ldr	r2, [r3, #28]
 8006d6c:	683b      	ldr	r3, [r7, #0]
 8006d6e:	781b      	ldrb	r3, [r3, #0]
 8006d70:	f003 030f 	and.w	r3, r3, #15
 8006d74:	2101      	movs	r1, #1
 8006d76:	fa01 f303 	lsl.w	r3, r1, r3
 8006d7a:	041b      	lsls	r3, r3, #16
 8006d7c:	43db      	mvns	r3, r3
 8006d7e:	68f9      	ldr	r1, [r7, #12]
 8006d80:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006d84:	4013      	ands	r3, r2
 8006d86:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006d88:	68bb      	ldr	r3, [r7, #8]
 8006d8a:	015a      	lsls	r2, r3, #5
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	4413      	add	r3, r2
 8006d90:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d94:	681a      	ldr	r2, [r3, #0]
 8006d96:	68bb      	ldr	r3, [r7, #8]
 8006d98:	0159      	lsls	r1, r3, #5
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	440b      	add	r3, r1
 8006d9e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006da2:	4619      	mov	r1, r3
 8006da4:	4b05      	ldr	r3, [pc, #20]	@ (8006dbc <USB_DeactivateEndpoint+0x1b4>)
 8006da6:	4013      	ands	r3, r2
 8006da8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8006daa:	2300      	movs	r3, #0
}
 8006dac:	4618      	mov	r0, r3
 8006dae:	3714      	adds	r7, #20
 8006db0:	46bd      	mov	sp, r7
 8006db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db6:	4770      	bx	lr
 8006db8:	ec337800 	.word	0xec337800
 8006dbc:	eff37800 	.word	0xeff37800

08006dc0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006dc0:	b580      	push	{r7, lr}
 8006dc2:	b08a      	sub	sp, #40	@ 0x28
 8006dc4:	af02      	add	r7, sp, #8
 8006dc6:	60f8      	str	r0, [r7, #12]
 8006dc8:	60b9      	str	r1, [r7, #8]
 8006dca:	4613      	mov	r3, r2
 8006dcc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8006dd2:	68bb      	ldr	r3, [r7, #8]
 8006dd4:	781b      	ldrb	r3, [r3, #0]
 8006dd6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006dd8:	68bb      	ldr	r3, [r7, #8]
 8006dda:	785b      	ldrb	r3, [r3, #1]
 8006ddc:	2b01      	cmp	r3, #1
 8006dde:	f040 817f 	bne.w	80070e0 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006de2:	68bb      	ldr	r3, [r7, #8]
 8006de4:	691b      	ldr	r3, [r3, #16]
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d132      	bne.n	8006e50 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006dea:	69bb      	ldr	r3, [r7, #24]
 8006dec:	015a      	lsls	r2, r3, #5
 8006dee:	69fb      	ldr	r3, [r7, #28]
 8006df0:	4413      	add	r3, r2
 8006df2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006df6:	691b      	ldr	r3, [r3, #16]
 8006df8:	69ba      	ldr	r2, [r7, #24]
 8006dfa:	0151      	lsls	r1, r2, #5
 8006dfc:	69fa      	ldr	r2, [r7, #28]
 8006dfe:	440a      	add	r2, r1
 8006e00:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006e04:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8006e08:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8006e0c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006e0e:	69bb      	ldr	r3, [r7, #24]
 8006e10:	015a      	lsls	r2, r3, #5
 8006e12:	69fb      	ldr	r3, [r7, #28]
 8006e14:	4413      	add	r3, r2
 8006e16:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006e1a:	691b      	ldr	r3, [r3, #16]
 8006e1c:	69ba      	ldr	r2, [r7, #24]
 8006e1e:	0151      	lsls	r1, r2, #5
 8006e20:	69fa      	ldr	r2, [r7, #28]
 8006e22:	440a      	add	r2, r1
 8006e24:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006e28:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006e2c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006e2e:	69bb      	ldr	r3, [r7, #24]
 8006e30:	015a      	lsls	r2, r3, #5
 8006e32:	69fb      	ldr	r3, [r7, #28]
 8006e34:	4413      	add	r3, r2
 8006e36:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006e3a:	691b      	ldr	r3, [r3, #16]
 8006e3c:	69ba      	ldr	r2, [r7, #24]
 8006e3e:	0151      	lsls	r1, r2, #5
 8006e40:	69fa      	ldr	r2, [r7, #28]
 8006e42:	440a      	add	r2, r1
 8006e44:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006e48:	0cdb      	lsrs	r3, r3, #19
 8006e4a:	04db      	lsls	r3, r3, #19
 8006e4c:	6113      	str	r3, [r2, #16]
 8006e4e:	e097      	b.n	8006f80 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006e50:	69bb      	ldr	r3, [r7, #24]
 8006e52:	015a      	lsls	r2, r3, #5
 8006e54:	69fb      	ldr	r3, [r7, #28]
 8006e56:	4413      	add	r3, r2
 8006e58:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006e5c:	691b      	ldr	r3, [r3, #16]
 8006e5e:	69ba      	ldr	r2, [r7, #24]
 8006e60:	0151      	lsls	r1, r2, #5
 8006e62:	69fa      	ldr	r2, [r7, #28]
 8006e64:	440a      	add	r2, r1
 8006e66:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006e6a:	0cdb      	lsrs	r3, r3, #19
 8006e6c:	04db      	lsls	r3, r3, #19
 8006e6e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006e70:	69bb      	ldr	r3, [r7, #24]
 8006e72:	015a      	lsls	r2, r3, #5
 8006e74:	69fb      	ldr	r3, [r7, #28]
 8006e76:	4413      	add	r3, r2
 8006e78:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006e7c:	691b      	ldr	r3, [r3, #16]
 8006e7e:	69ba      	ldr	r2, [r7, #24]
 8006e80:	0151      	lsls	r1, r2, #5
 8006e82:	69fa      	ldr	r2, [r7, #28]
 8006e84:	440a      	add	r2, r1
 8006e86:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006e8a:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8006e8e:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8006e92:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8006e94:	69bb      	ldr	r3, [r7, #24]
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d11a      	bne.n	8006ed0 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8006e9a:	68bb      	ldr	r3, [r7, #8]
 8006e9c:	691a      	ldr	r2, [r3, #16]
 8006e9e:	68bb      	ldr	r3, [r7, #8]
 8006ea0:	689b      	ldr	r3, [r3, #8]
 8006ea2:	429a      	cmp	r2, r3
 8006ea4:	d903      	bls.n	8006eae <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8006ea6:	68bb      	ldr	r3, [r7, #8]
 8006ea8:	689a      	ldr	r2, [r3, #8]
 8006eaa:	68bb      	ldr	r3, [r7, #8]
 8006eac:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006eae:	69bb      	ldr	r3, [r7, #24]
 8006eb0:	015a      	lsls	r2, r3, #5
 8006eb2:	69fb      	ldr	r3, [r7, #28]
 8006eb4:	4413      	add	r3, r2
 8006eb6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006eba:	691b      	ldr	r3, [r3, #16]
 8006ebc:	69ba      	ldr	r2, [r7, #24]
 8006ebe:	0151      	lsls	r1, r2, #5
 8006ec0:	69fa      	ldr	r2, [r7, #28]
 8006ec2:	440a      	add	r2, r1
 8006ec4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006ec8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006ecc:	6113      	str	r3, [r2, #16]
 8006ece:	e044      	b.n	8006f5a <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006ed0:	68bb      	ldr	r3, [r7, #8]
 8006ed2:	691a      	ldr	r2, [r3, #16]
 8006ed4:	68bb      	ldr	r3, [r7, #8]
 8006ed6:	689b      	ldr	r3, [r3, #8]
 8006ed8:	4413      	add	r3, r2
 8006eda:	1e5a      	subs	r2, r3, #1
 8006edc:	68bb      	ldr	r3, [r7, #8]
 8006ede:	689b      	ldr	r3, [r3, #8]
 8006ee0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ee4:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 8006ee6:	69bb      	ldr	r3, [r7, #24]
 8006ee8:	015a      	lsls	r2, r3, #5
 8006eea:	69fb      	ldr	r3, [r7, #28]
 8006eec:	4413      	add	r3, r2
 8006eee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006ef2:	691a      	ldr	r2, [r3, #16]
 8006ef4:	8afb      	ldrh	r3, [r7, #22]
 8006ef6:	04d9      	lsls	r1, r3, #19
 8006ef8:	4ba4      	ldr	r3, [pc, #656]	@ (800718c <USB_EPStartXfer+0x3cc>)
 8006efa:	400b      	ands	r3, r1
 8006efc:	69b9      	ldr	r1, [r7, #24]
 8006efe:	0148      	lsls	r0, r1, #5
 8006f00:	69f9      	ldr	r1, [r7, #28]
 8006f02:	4401      	add	r1, r0
 8006f04:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8006f08:	4313      	orrs	r3, r2
 8006f0a:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8006f0c:	68bb      	ldr	r3, [r7, #8]
 8006f0e:	791b      	ldrb	r3, [r3, #4]
 8006f10:	2b01      	cmp	r3, #1
 8006f12:	d122      	bne.n	8006f5a <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8006f14:	69bb      	ldr	r3, [r7, #24]
 8006f16:	015a      	lsls	r2, r3, #5
 8006f18:	69fb      	ldr	r3, [r7, #28]
 8006f1a:	4413      	add	r3, r2
 8006f1c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006f20:	691b      	ldr	r3, [r3, #16]
 8006f22:	69ba      	ldr	r2, [r7, #24]
 8006f24:	0151      	lsls	r1, r2, #5
 8006f26:	69fa      	ldr	r2, [r7, #28]
 8006f28:	440a      	add	r2, r1
 8006f2a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006f2e:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8006f32:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 8006f34:	69bb      	ldr	r3, [r7, #24]
 8006f36:	015a      	lsls	r2, r3, #5
 8006f38:	69fb      	ldr	r3, [r7, #28]
 8006f3a:	4413      	add	r3, r2
 8006f3c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006f40:	691a      	ldr	r2, [r3, #16]
 8006f42:	8afb      	ldrh	r3, [r7, #22]
 8006f44:	075b      	lsls	r3, r3, #29
 8006f46:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8006f4a:	69b9      	ldr	r1, [r7, #24]
 8006f4c:	0148      	lsls	r0, r1, #5
 8006f4e:	69f9      	ldr	r1, [r7, #28]
 8006f50:	4401      	add	r1, r0
 8006f52:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8006f56:	4313      	orrs	r3, r2
 8006f58:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006f5a:	69bb      	ldr	r3, [r7, #24]
 8006f5c:	015a      	lsls	r2, r3, #5
 8006f5e:	69fb      	ldr	r3, [r7, #28]
 8006f60:	4413      	add	r3, r2
 8006f62:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006f66:	691a      	ldr	r2, [r3, #16]
 8006f68:	68bb      	ldr	r3, [r7, #8]
 8006f6a:	691b      	ldr	r3, [r3, #16]
 8006f6c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006f70:	69b9      	ldr	r1, [r7, #24]
 8006f72:	0148      	lsls	r0, r1, #5
 8006f74:	69f9      	ldr	r1, [r7, #28]
 8006f76:	4401      	add	r1, r0
 8006f78:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8006f7c:	4313      	orrs	r3, r2
 8006f7e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006f80:	79fb      	ldrb	r3, [r7, #7]
 8006f82:	2b01      	cmp	r3, #1
 8006f84:	d14b      	bne.n	800701e <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006f86:	68bb      	ldr	r3, [r7, #8]
 8006f88:	69db      	ldr	r3, [r3, #28]
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d009      	beq.n	8006fa2 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006f8e:	69bb      	ldr	r3, [r7, #24]
 8006f90:	015a      	lsls	r2, r3, #5
 8006f92:	69fb      	ldr	r3, [r7, #28]
 8006f94:	4413      	add	r3, r2
 8006f96:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006f9a:	461a      	mov	r2, r3
 8006f9c:	68bb      	ldr	r3, [r7, #8]
 8006f9e:	69db      	ldr	r3, [r3, #28]
 8006fa0:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8006fa2:	68bb      	ldr	r3, [r7, #8]
 8006fa4:	791b      	ldrb	r3, [r3, #4]
 8006fa6:	2b01      	cmp	r3, #1
 8006fa8:	d128      	bne.n	8006ffc <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006faa:	69fb      	ldr	r3, [r7, #28]
 8006fac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006fb0:	689b      	ldr	r3, [r3, #8]
 8006fb2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d110      	bne.n	8006fdc <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006fba:	69bb      	ldr	r3, [r7, #24]
 8006fbc:	015a      	lsls	r2, r3, #5
 8006fbe:	69fb      	ldr	r3, [r7, #28]
 8006fc0:	4413      	add	r3, r2
 8006fc2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	69ba      	ldr	r2, [r7, #24]
 8006fca:	0151      	lsls	r1, r2, #5
 8006fcc:	69fa      	ldr	r2, [r7, #28]
 8006fce:	440a      	add	r2, r1
 8006fd0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006fd4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006fd8:	6013      	str	r3, [r2, #0]
 8006fda:	e00f      	b.n	8006ffc <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006fdc:	69bb      	ldr	r3, [r7, #24]
 8006fde:	015a      	lsls	r2, r3, #5
 8006fe0:	69fb      	ldr	r3, [r7, #28]
 8006fe2:	4413      	add	r3, r2
 8006fe4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	69ba      	ldr	r2, [r7, #24]
 8006fec:	0151      	lsls	r1, r2, #5
 8006fee:	69fa      	ldr	r2, [r7, #28]
 8006ff0:	440a      	add	r2, r1
 8006ff2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006ff6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006ffa:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006ffc:	69bb      	ldr	r3, [r7, #24]
 8006ffe:	015a      	lsls	r2, r3, #5
 8007000:	69fb      	ldr	r3, [r7, #28]
 8007002:	4413      	add	r3, r2
 8007004:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	69ba      	ldr	r2, [r7, #24]
 800700c:	0151      	lsls	r1, r2, #5
 800700e:	69fa      	ldr	r2, [r7, #28]
 8007010:	440a      	add	r2, r1
 8007012:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007016:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800701a:	6013      	str	r3, [r2, #0]
 800701c:	e166      	b.n	80072ec <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800701e:	69bb      	ldr	r3, [r7, #24]
 8007020:	015a      	lsls	r2, r3, #5
 8007022:	69fb      	ldr	r3, [r7, #28]
 8007024:	4413      	add	r3, r2
 8007026:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	69ba      	ldr	r2, [r7, #24]
 800702e:	0151      	lsls	r1, r2, #5
 8007030:	69fa      	ldr	r2, [r7, #28]
 8007032:	440a      	add	r2, r1
 8007034:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007038:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800703c:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800703e:	68bb      	ldr	r3, [r7, #8]
 8007040:	791b      	ldrb	r3, [r3, #4]
 8007042:	2b01      	cmp	r3, #1
 8007044:	d015      	beq.n	8007072 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8007046:	68bb      	ldr	r3, [r7, #8]
 8007048:	691b      	ldr	r3, [r3, #16]
 800704a:	2b00      	cmp	r3, #0
 800704c:	f000 814e 	beq.w	80072ec <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007050:	69fb      	ldr	r3, [r7, #28]
 8007052:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007056:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007058:	68bb      	ldr	r3, [r7, #8]
 800705a:	781b      	ldrb	r3, [r3, #0]
 800705c:	f003 030f 	and.w	r3, r3, #15
 8007060:	2101      	movs	r1, #1
 8007062:	fa01 f303 	lsl.w	r3, r1, r3
 8007066:	69f9      	ldr	r1, [r7, #28]
 8007068:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800706c:	4313      	orrs	r3, r2
 800706e:	634b      	str	r3, [r1, #52]	@ 0x34
 8007070:	e13c      	b.n	80072ec <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007072:	69fb      	ldr	r3, [r7, #28]
 8007074:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007078:	689b      	ldr	r3, [r3, #8]
 800707a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800707e:	2b00      	cmp	r3, #0
 8007080:	d110      	bne.n	80070a4 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007082:	69bb      	ldr	r3, [r7, #24]
 8007084:	015a      	lsls	r2, r3, #5
 8007086:	69fb      	ldr	r3, [r7, #28]
 8007088:	4413      	add	r3, r2
 800708a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	69ba      	ldr	r2, [r7, #24]
 8007092:	0151      	lsls	r1, r2, #5
 8007094:	69fa      	ldr	r2, [r7, #28]
 8007096:	440a      	add	r2, r1
 8007098:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800709c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80070a0:	6013      	str	r3, [r2, #0]
 80070a2:	e00f      	b.n	80070c4 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80070a4:	69bb      	ldr	r3, [r7, #24]
 80070a6:	015a      	lsls	r2, r3, #5
 80070a8:	69fb      	ldr	r3, [r7, #28]
 80070aa:	4413      	add	r3, r2
 80070ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	69ba      	ldr	r2, [r7, #24]
 80070b4:	0151      	lsls	r1, r2, #5
 80070b6:	69fa      	ldr	r2, [r7, #28]
 80070b8:	440a      	add	r2, r1
 80070ba:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80070be:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80070c2:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80070c4:	68bb      	ldr	r3, [r7, #8]
 80070c6:	68d9      	ldr	r1, [r3, #12]
 80070c8:	68bb      	ldr	r3, [r7, #8]
 80070ca:	781a      	ldrb	r2, [r3, #0]
 80070cc:	68bb      	ldr	r3, [r7, #8]
 80070ce:	691b      	ldr	r3, [r3, #16]
 80070d0:	b298      	uxth	r0, r3
 80070d2:	79fb      	ldrb	r3, [r7, #7]
 80070d4:	9300      	str	r3, [sp, #0]
 80070d6:	4603      	mov	r3, r0
 80070d8:	68f8      	ldr	r0, [r7, #12]
 80070da:	f000 f9b9 	bl	8007450 <USB_WritePacket>
 80070de:	e105      	b.n	80072ec <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80070e0:	69bb      	ldr	r3, [r7, #24]
 80070e2:	015a      	lsls	r2, r3, #5
 80070e4:	69fb      	ldr	r3, [r7, #28]
 80070e6:	4413      	add	r3, r2
 80070e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80070ec:	691b      	ldr	r3, [r3, #16]
 80070ee:	69ba      	ldr	r2, [r7, #24]
 80070f0:	0151      	lsls	r1, r2, #5
 80070f2:	69fa      	ldr	r2, [r7, #28]
 80070f4:	440a      	add	r2, r1
 80070f6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80070fa:	0cdb      	lsrs	r3, r3, #19
 80070fc:	04db      	lsls	r3, r3, #19
 80070fe:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007100:	69bb      	ldr	r3, [r7, #24]
 8007102:	015a      	lsls	r2, r3, #5
 8007104:	69fb      	ldr	r3, [r7, #28]
 8007106:	4413      	add	r3, r2
 8007108:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800710c:	691b      	ldr	r3, [r3, #16]
 800710e:	69ba      	ldr	r2, [r7, #24]
 8007110:	0151      	lsls	r1, r2, #5
 8007112:	69fa      	ldr	r2, [r7, #28]
 8007114:	440a      	add	r2, r1
 8007116:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800711a:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800711e:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8007122:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8007124:	69bb      	ldr	r3, [r7, #24]
 8007126:	2b00      	cmp	r3, #0
 8007128:	d132      	bne.n	8007190 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 800712a:	68bb      	ldr	r3, [r7, #8]
 800712c:	691b      	ldr	r3, [r3, #16]
 800712e:	2b00      	cmp	r3, #0
 8007130:	d003      	beq.n	800713a <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 8007132:	68bb      	ldr	r3, [r7, #8]
 8007134:	689a      	ldr	r2, [r3, #8]
 8007136:	68bb      	ldr	r3, [r7, #8]
 8007138:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800713a:	68bb      	ldr	r3, [r7, #8]
 800713c:	689a      	ldr	r2, [r3, #8]
 800713e:	68bb      	ldr	r3, [r7, #8]
 8007140:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8007142:	69bb      	ldr	r3, [r7, #24]
 8007144:	015a      	lsls	r2, r3, #5
 8007146:	69fb      	ldr	r3, [r7, #28]
 8007148:	4413      	add	r3, r2
 800714a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800714e:	691a      	ldr	r2, [r3, #16]
 8007150:	68bb      	ldr	r3, [r7, #8]
 8007152:	6a1b      	ldr	r3, [r3, #32]
 8007154:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007158:	69b9      	ldr	r1, [r7, #24]
 800715a:	0148      	lsls	r0, r1, #5
 800715c:	69f9      	ldr	r1, [r7, #28]
 800715e:	4401      	add	r1, r0
 8007160:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8007164:	4313      	orrs	r3, r2
 8007166:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007168:	69bb      	ldr	r3, [r7, #24]
 800716a:	015a      	lsls	r2, r3, #5
 800716c:	69fb      	ldr	r3, [r7, #28]
 800716e:	4413      	add	r3, r2
 8007170:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007174:	691b      	ldr	r3, [r3, #16]
 8007176:	69ba      	ldr	r2, [r7, #24]
 8007178:	0151      	lsls	r1, r2, #5
 800717a:	69fa      	ldr	r2, [r7, #28]
 800717c:	440a      	add	r2, r1
 800717e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007182:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007186:	6113      	str	r3, [r2, #16]
 8007188:	e062      	b.n	8007250 <USB_EPStartXfer+0x490>
 800718a:	bf00      	nop
 800718c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8007190:	68bb      	ldr	r3, [r7, #8]
 8007192:	691b      	ldr	r3, [r3, #16]
 8007194:	2b00      	cmp	r3, #0
 8007196:	d123      	bne.n	80071e0 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8007198:	69bb      	ldr	r3, [r7, #24]
 800719a:	015a      	lsls	r2, r3, #5
 800719c:	69fb      	ldr	r3, [r7, #28]
 800719e:	4413      	add	r3, r2
 80071a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80071a4:	691a      	ldr	r2, [r3, #16]
 80071a6:	68bb      	ldr	r3, [r7, #8]
 80071a8:	689b      	ldr	r3, [r3, #8]
 80071aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80071ae:	69b9      	ldr	r1, [r7, #24]
 80071b0:	0148      	lsls	r0, r1, #5
 80071b2:	69f9      	ldr	r1, [r7, #28]
 80071b4:	4401      	add	r1, r0
 80071b6:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80071ba:	4313      	orrs	r3, r2
 80071bc:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80071be:	69bb      	ldr	r3, [r7, #24]
 80071c0:	015a      	lsls	r2, r3, #5
 80071c2:	69fb      	ldr	r3, [r7, #28]
 80071c4:	4413      	add	r3, r2
 80071c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80071ca:	691b      	ldr	r3, [r3, #16]
 80071cc:	69ba      	ldr	r2, [r7, #24]
 80071ce:	0151      	lsls	r1, r2, #5
 80071d0:	69fa      	ldr	r2, [r7, #28]
 80071d2:	440a      	add	r2, r1
 80071d4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80071d8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80071dc:	6113      	str	r3, [r2, #16]
 80071de:	e037      	b.n	8007250 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80071e0:	68bb      	ldr	r3, [r7, #8]
 80071e2:	691a      	ldr	r2, [r3, #16]
 80071e4:	68bb      	ldr	r3, [r7, #8]
 80071e6:	689b      	ldr	r3, [r3, #8]
 80071e8:	4413      	add	r3, r2
 80071ea:	1e5a      	subs	r2, r3, #1
 80071ec:	68bb      	ldr	r3, [r7, #8]
 80071ee:	689b      	ldr	r3, [r3, #8]
 80071f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80071f4:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 80071f6:	68bb      	ldr	r3, [r7, #8]
 80071f8:	689b      	ldr	r3, [r3, #8]
 80071fa:	8afa      	ldrh	r2, [r7, #22]
 80071fc:	fb03 f202 	mul.w	r2, r3, r2
 8007200:	68bb      	ldr	r3, [r7, #8]
 8007202:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8007204:	69bb      	ldr	r3, [r7, #24]
 8007206:	015a      	lsls	r2, r3, #5
 8007208:	69fb      	ldr	r3, [r7, #28]
 800720a:	4413      	add	r3, r2
 800720c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007210:	691a      	ldr	r2, [r3, #16]
 8007212:	8afb      	ldrh	r3, [r7, #22]
 8007214:	04d9      	lsls	r1, r3, #19
 8007216:	4b38      	ldr	r3, [pc, #224]	@ (80072f8 <USB_EPStartXfer+0x538>)
 8007218:	400b      	ands	r3, r1
 800721a:	69b9      	ldr	r1, [r7, #24]
 800721c:	0148      	lsls	r0, r1, #5
 800721e:	69f9      	ldr	r1, [r7, #28]
 8007220:	4401      	add	r1, r0
 8007222:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8007226:	4313      	orrs	r3, r2
 8007228:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800722a:	69bb      	ldr	r3, [r7, #24]
 800722c:	015a      	lsls	r2, r3, #5
 800722e:	69fb      	ldr	r3, [r7, #28]
 8007230:	4413      	add	r3, r2
 8007232:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007236:	691a      	ldr	r2, [r3, #16]
 8007238:	68bb      	ldr	r3, [r7, #8]
 800723a:	6a1b      	ldr	r3, [r3, #32]
 800723c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007240:	69b9      	ldr	r1, [r7, #24]
 8007242:	0148      	lsls	r0, r1, #5
 8007244:	69f9      	ldr	r1, [r7, #28]
 8007246:	4401      	add	r1, r0
 8007248:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800724c:	4313      	orrs	r3, r2
 800724e:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8007250:	79fb      	ldrb	r3, [r7, #7]
 8007252:	2b01      	cmp	r3, #1
 8007254:	d10d      	bne.n	8007272 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007256:	68bb      	ldr	r3, [r7, #8]
 8007258:	68db      	ldr	r3, [r3, #12]
 800725a:	2b00      	cmp	r3, #0
 800725c:	d009      	beq.n	8007272 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800725e:	68bb      	ldr	r3, [r7, #8]
 8007260:	68d9      	ldr	r1, [r3, #12]
 8007262:	69bb      	ldr	r3, [r7, #24]
 8007264:	015a      	lsls	r2, r3, #5
 8007266:	69fb      	ldr	r3, [r7, #28]
 8007268:	4413      	add	r3, r2
 800726a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800726e:	460a      	mov	r2, r1
 8007270:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8007272:	68bb      	ldr	r3, [r7, #8]
 8007274:	791b      	ldrb	r3, [r3, #4]
 8007276:	2b01      	cmp	r3, #1
 8007278:	d128      	bne.n	80072cc <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800727a:	69fb      	ldr	r3, [r7, #28]
 800727c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007280:	689b      	ldr	r3, [r3, #8]
 8007282:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007286:	2b00      	cmp	r3, #0
 8007288:	d110      	bne.n	80072ac <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800728a:	69bb      	ldr	r3, [r7, #24]
 800728c:	015a      	lsls	r2, r3, #5
 800728e:	69fb      	ldr	r3, [r7, #28]
 8007290:	4413      	add	r3, r2
 8007292:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	69ba      	ldr	r2, [r7, #24]
 800729a:	0151      	lsls	r1, r2, #5
 800729c:	69fa      	ldr	r2, [r7, #28]
 800729e:	440a      	add	r2, r1
 80072a0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80072a4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80072a8:	6013      	str	r3, [r2, #0]
 80072aa:	e00f      	b.n	80072cc <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80072ac:	69bb      	ldr	r3, [r7, #24]
 80072ae:	015a      	lsls	r2, r3, #5
 80072b0:	69fb      	ldr	r3, [r7, #28]
 80072b2:	4413      	add	r3, r2
 80072b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	69ba      	ldr	r2, [r7, #24]
 80072bc:	0151      	lsls	r1, r2, #5
 80072be:	69fa      	ldr	r2, [r7, #28]
 80072c0:	440a      	add	r2, r1
 80072c2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80072c6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80072ca:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80072cc:	69bb      	ldr	r3, [r7, #24]
 80072ce:	015a      	lsls	r2, r3, #5
 80072d0:	69fb      	ldr	r3, [r7, #28]
 80072d2:	4413      	add	r3, r2
 80072d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	69ba      	ldr	r2, [r7, #24]
 80072dc:	0151      	lsls	r1, r2, #5
 80072de:	69fa      	ldr	r2, [r7, #28]
 80072e0:	440a      	add	r2, r1
 80072e2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80072e6:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80072ea:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80072ec:	2300      	movs	r3, #0
}
 80072ee:	4618      	mov	r0, r3
 80072f0:	3720      	adds	r7, #32
 80072f2:	46bd      	mov	sp, r7
 80072f4:	bd80      	pop	{r7, pc}
 80072f6:	bf00      	nop
 80072f8:	1ff80000 	.word	0x1ff80000

080072fc <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80072fc:	b480      	push	{r7}
 80072fe:	b087      	sub	sp, #28
 8007300:	af00      	add	r7, sp, #0
 8007302:	6078      	str	r0, [r7, #4]
 8007304:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007306:	2300      	movs	r3, #0
 8007308:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800730a:	2300      	movs	r3, #0
 800730c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007312:	683b      	ldr	r3, [r7, #0]
 8007314:	785b      	ldrb	r3, [r3, #1]
 8007316:	2b01      	cmp	r3, #1
 8007318:	d14a      	bne.n	80073b0 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800731a:	683b      	ldr	r3, [r7, #0]
 800731c:	781b      	ldrb	r3, [r3, #0]
 800731e:	015a      	lsls	r2, r3, #5
 8007320:	693b      	ldr	r3, [r7, #16]
 8007322:	4413      	add	r3, r2
 8007324:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800732e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007332:	f040 8086 	bne.w	8007442 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8007336:	683b      	ldr	r3, [r7, #0]
 8007338:	781b      	ldrb	r3, [r3, #0]
 800733a:	015a      	lsls	r2, r3, #5
 800733c:	693b      	ldr	r3, [r7, #16]
 800733e:	4413      	add	r3, r2
 8007340:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	683a      	ldr	r2, [r7, #0]
 8007348:	7812      	ldrb	r2, [r2, #0]
 800734a:	0151      	lsls	r1, r2, #5
 800734c:	693a      	ldr	r2, [r7, #16]
 800734e:	440a      	add	r2, r1
 8007350:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007354:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007358:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800735a:	683b      	ldr	r3, [r7, #0]
 800735c:	781b      	ldrb	r3, [r3, #0]
 800735e:	015a      	lsls	r2, r3, #5
 8007360:	693b      	ldr	r3, [r7, #16]
 8007362:	4413      	add	r3, r2
 8007364:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	683a      	ldr	r2, [r7, #0]
 800736c:	7812      	ldrb	r2, [r2, #0]
 800736e:	0151      	lsls	r1, r2, #5
 8007370:	693a      	ldr	r2, [r7, #16]
 8007372:	440a      	add	r2, r1
 8007374:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007378:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800737c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	3301      	adds	r3, #1
 8007382:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	f242 7210 	movw	r2, #10000	@ 0x2710
 800738a:	4293      	cmp	r3, r2
 800738c:	d902      	bls.n	8007394 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800738e:	2301      	movs	r3, #1
 8007390:	75fb      	strb	r3, [r7, #23]
          break;
 8007392:	e056      	b.n	8007442 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8007394:	683b      	ldr	r3, [r7, #0]
 8007396:	781b      	ldrb	r3, [r3, #0]
 8007398:	015a      	lsls	r2, r3, #5
 800739a:	693b      	ldr	r3, [r7, #16]
 800739c:	4413      	add	r3, r2
 800739e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80073a8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80073ac:	d0e7      	beq.n	800737e <USB_EPStopXfer+0x82>
 80073ae:	e048      	b.n	8007442 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80073b0:	683b      	ldr	r3, [r7, #0]
 80073b2:	781b      	ldrb	r3, [r3, #0]
 80073b4:	015a      	lsls	r2, r3, #5
 80073b6:	693b      	ldr	r3, [r7, #16]
 80073b8:	4413      	add	r3, r2
 80073ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80073c4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80073c8:	d13b      	bne.n	8007442 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80073ca:	683b      	ldr	r3, [r7, #0]
 80073cc:	781b      	ldrb	r3, [r3, #0]
 80073ce:	015a      	lsls	r2, r3, #5
 80073d0:	693b      	ldr	r3, [r7, #16]
 80073d2:	4413      	add	r3, r2
 80073d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	683a      	ldr	r2, [r7, #0]
 80073dc:	7812      	ldrb	r2, [r2, #0]
 80073de:	0151      	lsls	r1, r2, #5
 80073e0:	693a      	ldr	r2, [r7, #16]
 80073e2:	440a      	add	r2, r1
 80073e4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80073e8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80073ec:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80073ee:	683b      	ldr	r3, [r7, #0]
 80073f0:	781b      	ldrb	r3, [r3, #0]
 80073f2:	015a      	lsls	r2, r3, #5
 80073f4:	693b      	ldr	r3, [r7, #16]
 80073f6:	4413      	add	r3, r2
 80073f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	683a      	ldr	r2, [r7, #0]
 8007400:	7812      	ldrb	r2, [r2, #0]
 8007402:	0151      	lsls	r1, r2, #5
 8007404:	693a      	ldr	r2, [r7, #16]
 8007406:	440a      	add	r2, r1
 8007408:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800740c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007410:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	3301      	adds	r3, #1
 8007416:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	f242 7210 	movw	r2, #10000	@ 0x2710
 800741e:	4293      	cmp	r3, r2
 8007420:	d902      	bls.n	8007428 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8007422:	2301      	movs	r3, #1
 8007424:	75fb      	strb	r3, [r7, #23]
          break;
 8007426:	e00c      	b.n	8007442 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8007428:	683b      	ldr	r3, [r7, #0]
 800742a:	781b      	ldrb	r3, [r3, #0]
 800742c:	015a      	lsls	r2, r3, #5
 800742e:	693b      	ldr	r3, [r7, #16]
 8007430:	4413      	add	r3, r2
 8007432:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800743c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007440:	d0e7      	beq.n	8007412 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8007442:	7dfb      	ldrb	r3, [r7, #23]
}
 8007444:	4618      	mov	r0, r3
 8007446:	371c      	adds	r7, #28
 8007448:	46bd      	mov	sp, r7
 800744a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800744e:	4770      	bx	lr

08007450 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007450:	b480      	push	{r7}
 8007452:	b089      	sub	sp, #36	@ 0x24
 8007454:	af00      	add	r7, sp, #0
 8007456:	60f8      	str	r0, [r7, #12]
 8007458:	60b9      	str	r1, [r7, #8]
 800745a:	4611      	mov	r1, r2
 800745c:	461a      	mov	r2, r3
 800745e:	460b      	mov	r3, r1
 8007460:	71fb      	strb	r3, [r7, #7]
 8007462:	4613      	mov	r3, r2
 8007464:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800746a:	68bb      	ldr	r3, [r7, #8]
 800746c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800746e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007472:	2b00      	cmp	r3, #0
 8007474:	d123      	bne.n	80074be <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007476:	88bb      	ldrh	r3, [r7, #4]
 8007478:	3303      	adds	r3, #3
 800747a:	089b      	lsrs	r3, r3, #2
 800747c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800747e:	2300      	movs	r3, #0
 8007480:	61bb      	str	r3, [r7, #24]
 8007482:	e018      	b.n	80074b6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007484:	79fb      	ldrb	r3, [r7, #7]
 8007486:	031a      	lsls	r2, r3, #12
 8007488:	697b      	ldr	r3, [r7, #20]
 800748a:	4413      	add	r3, r2
 800748c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007490:	461a      	mov	r2, r3
 8007492:	69fb      	ldr	r3, [r7, #28]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007498:	69fb      	ldr	r3, [r7, #28]
 800749a:	3301      	adds	r3, #1
 800749c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800749e:	69fb      	ldr	r3, [r7, #28]
 80074a0:	3301      	adds	r3, #1
 80074a2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80074a4:	69fb      	ldr	r3, [r7, #28]
 80074a6:	3301      	adds	r3, #1
 80074a8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80074aa:	69fb      	ldr	r3, [r7, #28]
 80074ac:	3301      	adds	r3, #1
 80074ae:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80074b0:	69bb      	ldr	r3, [r7, #24]
 80074b2:	3301      	adds	r3, #1
 80074b4:	61bb      	str	r3, [r7, #24]
 80074b6:	69ba      	ldr	r2, [r7, #24]
 80074b8:	693b      	ldr	r3, [r7, #16]
 80074ba:	429a      	cmp	r2, r3
 80074bc:	d3e2      	bcc.n	8007484 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80074be:	2300      	movs	r3, #0
}
 80074c0:	4618      	mov	r0, r3
 80074c2:	3724      	adds	r7, #36	@ 0x24
 80074c4:	46bd      	mov	sp, r7
 80074c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ca:	4770      	bx	lr

080074cc <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80074cc:	b480      	push	{r7}
 80074ce:	b08b      	sub	sp, #44	@ 0x2c
 80074d0:	af00      	add	r7, sp, #0
 80074d2:	60f8      	str	r0, [r7, #12]
 80074d4:	60b9      	str	r1, [r7, #8]
 80074d6:	4613      	mov	r3, r2
 80074d8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80074de:	68bb      	ldr	r3, [r7, #8]
 80074e0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80074e2:	88fb      	ldrh	r3, [r7, #6]
 80074e4:	089b      	lsrs	r3, r3, #2
 80074e6:	b29b      	uxth	r3, r3
 80074e8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80074ea:	88fb      	ldrh	r3, [r7, #6]
 80074ec:	f003 0303 	and.w	r3, r3, #3
 80074f0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80074f2:	2300      	movs	r3, #0
 80074f4:	623b      	str	r3, [r7, #32]
 80074f6:	e014      	b.n	8007522 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80074f8:	69bb      	ldr	r3, [r7, #24]
 80074fa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80074fe:	681a      	ldr	r2, [r3, #0]
 8007500:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007502:	601a      	str	r2, [r3, #0]
    pDest++;
 8007504:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007506:	3301      	adds	r3, #1
 8007508:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800750a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800750c:	3301      	adds	r3, #1
 800750e:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007510:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007512:	3301      	adds	r3, #1
 8007514:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007516:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007518:	3301      	adds	r3, #1
 800751a:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800751c:	6a3b      	ldr	r3, [r7, #32]
 800751e:	3301      	adds	r3, #1
 8007520:	623b      	str	r3, [r7, #32]
 8007522:	6a3a      	ldr	r2, [r7, #32]
 8007524:	697b      	ldr	r3, [r7, #20]
 8007526:	429a      	cmp	r2, r3
 8007528:	d3e6      	bcc.n	80074f8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800752a:	8bfb      	ldrh	r3, [r7, #30]
 800752c:	2b00      	cmp	r3, #0
 800752e:	d01e      	beq.n	800756e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007530:	2300      	movs	r3, #0
 8007532:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007534:	69bb      	ldr	r3, [r7, #24]
 8007536:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800753a:	461a      	mov	r2, r3
 800753c:	f107 0310 	add.w	r3, r7, #16
 8007540:	6812      	ldr	r2, [r2, #0]
 8007542:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007544:	693a      	ldr	r2, [r7, #16]
 8007546:	6a3b      	ldr	r3, [r7, #32]
 8007548:	b2db      	uxtb	r3, r3
 800754a:	00db      	lsls	r3, r3, #3
 800754c:	fa22 f303 	lsr.w	r3, r2, r3
 8007550:	b2da      	uxtb	r2, r3
 8007552:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007554:	701a      	strb	r2, [r3, #0]
      i++;
 8007556:	6a3b      	ldr	r3, [r7, #32]
 8007558:	3301      	adds	r3, #1
 800755a:	623b      	str	r3, [r7, #32]
      pDest++;
 800755c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800755e:	3301      	adds	r3, #1
 8007560:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8007562:	8bfb      	ldrh	r3, [r7, #30]
 8007564:	3b01      	subs	r3, #1
 8007566:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007568:	8bfb      	ldrh	r3, [r7, #30]
 800756a:	2b00      	cmp	r3, #0
 800756c:	d1ea      	bne.n	8007544 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800756e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007570:	4618      	mov	r0, r3
 8007572:	372c      	adds	r7, #44	@ 0x2c
 8007574:	46bd      	mov	sp, r7
 8007576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800757a:	4770      	bx	lr

0800757c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800757c:	b480      	push	{r7}
 800757e:	b085      	sub	sp, #20
 8007580:	af00      	add	r7, sp, #0
 8007582:	6078      	str	r0, [r7, #4]
 8007584:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800758a:	683b      	ldr	r3, [r7, #0]
 800758c:	781b      	ldrb	r3, [r3, #0]
 800758e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007590:	683b      	ldr	r3, [r7, #0]
 8007592:	785b      	ldrb	r3, [r3, #1]
 8007594:	2b01      	cmp	r3, #1
 8007596:	d12c      	bne.n	80075f2 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007598:	68bb      	ldr	r3, [r7, #8]
 800759a:	015a      	lsls	r2, r3, #5
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	4413      	add	r3, r2
 80075a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	db12      	blt.n	80075d0 <USB_EPSetStall+0x54>
 80075aa:	68bb      	ldr	r3, [r7, #8]
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d00f      	beq.n	80075d0 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80075b0:	68bb      	ldr	r3, [r7, #8]
 80075b2:	015a      	lsls	r2, r3, #5
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	4413      	add	r3, r2
 80075b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	68ba      	ldr	r2, [r7, #8]
 80075c0:	0151      	lsls	r1, r2, #5
 80075c2:	68fa      	ldr	r2, [r7, #12]
 80075c4:	440a      	add	r2, r1
 80075c6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80075ca:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80075ce:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80075d0:	68bb      	ldr	r3, [r7, #8]
 80075d2:	015a      	lsls	r2, r3, #5
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	4413      	add	r3, r2
 80075d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	68ba      	ldr	r2, [r7, #8]
 80075e0:	0151      	lsls	r1, r2, #5
 80075e2:	68fa      	ldr	r2, [r7, #12]
 80075e4:	440a      	add	r2, r1
 80075e6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80075ea:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80075ee:	6013      	str	r3, [r2, #0]
 80075f0:	e02b      	b.n	800764a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80075f2:	68bb      	ldr	r3, [r7, #8]
 80075f4:	015a      	lsls	r2, r3, #5
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	4413      	add	r3, r2
 80075fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	2b00      	cmp	r3, #0
 8007602:	db12      	blt.n	800762a <USB_EPSetStall+0xae>
 8007604:	68bb      	ldr	r3, [r7, #8]
 8007606:	2b00      	cmp	r3, #0
 8007608:	d00f      	beq.n	800762a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800760a:	68bb      	ldr	r3, [r7, #8]
 800760c:	015a      	lsls	r2, r3, #5
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	4413      	add	r3, r2
 8007612:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	68ba      	ldr	r2, [r7, #8]
 800761a:	0151      	lsls	r1, r2, #5
 800761c:	68fa      	ldr	r2, [r7, #12]
 800761e:	440a      	add	r2, r1
 8007620:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007624:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007628:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800762a:	68bb      	ldr	r3, [r7, #8]
 800762c:	015a      	lsls	r2, r3, #5
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	4413      	add	r3, r2
 8007632:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	68ba      	ldr	r2, [r7, #8]
 800763a:	0151      	lsls	r1, r2, #5
 800763c:	68fa      	ldr	r2, [r7, #12]
 800763e:	440a      	add	r2, r1
 8007640:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007644:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007648:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800764a:	2300      	movs	r3, #0
}
 800764c:	4618      	mov	r0, r3
 800764e:	3714      	adds	r7, #20
 8007650:	46bd      	mov	sp, r7
 8007652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007656:	4770      	bx	lr

08007658 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007658:	b480      	push	{r7}
 800765a:	b085      	sub	sp, #20
 800765c:	af00      	add	r7, sp, #0
 800765e:	6078      	str	r0, [r7, #4]
 8007660:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007666:	683b      	ldr	r3, [r7, #0]
 8007668:	781b      	ldrb	r3, [r3, #0]
 800766a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800766c:	683b      	ldr	r3, [r7, #0]
 800766e:	785b      	ldrb	r3, [r3, #1]
 8007670:	2b01      	cmp	r3, #1
 8007672:	d128      	bne.n	80076c6 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007674:	68bb      	ldr	r3, [r7, #8]
 8007676:	015a      	lsls	r2, r3, #5
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	4413      	add	r3, r2
 800767c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	68ba      	ldr	r2, [r7, #8]
 8007684:	0151      	lsls	r1, r2, #5
 8007686:	68fa      	ldr	r2, [r7, #12]
 8007688:	440a      	add	r2, r1
 800768a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800768e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007692:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007694:	683b      	ldr	r3, [r7, #0]
 8007696:	791b      	ldrb	r3, [r3, #4]
 8007698:	2b03      	cmp	r3, #3
 800769a:	d003      	beq.n	80076a4 <USB_EPClearStall+0x4c>
 800769c:	683b      	ldr	r3, [r7, #0]
 800769e:	791b      	ldrb	r3, [r3, #4]
 80076a0:	2b02      	cmp	r3, #2
 80076a2:	d138      	bne.n	8007716 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80076a4:	68bb      	ldr	r3, [r7, #8]
 80076a6:	015a      	lsls	r2, r3, #5
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	4413      	add	r3, r2
 80076ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	68ba      	ldr	r2, [r7, #8]
 80076b4:	0151      	lsls	r1, r2, #5
 80076b6:	68fa      	ldr	r2, [r7, #12]
 80076b8:	440a      	add	r2, r1
 80076ba:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80076be:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80076c2:	6013      	str	r3, [r2, #0]
 80076c4:	e027      	b.n	8007716 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80076c6:	68bb      	ldr	r3, [r7, #8]
 80076c8:	015a      	lsls	r2, r3, #5
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	4413      	add	r3, r2
 80076ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	68ba      	ldr	r2, [r7, #8]
 80076d6:	0151      	lsls	r1, r2, #5
 80076d8:	68fa      	ldr	r2, [r7, #12]
 80076da:	440a      	add	r2, r1
 80076dc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80076e0:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80076e4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80076e6:	683b      	ldr	r3, [r7, #0]
 80076e8:	791b      	ldrb	r3, [r3, #4]
 80076ea:	2b03      	cmp	r3, #3
 80076ec:	d003      	beq.n	80076f6 <USB_EPClearStall+0x9e>
 80076ee:	683b      	ldr	r3, [r7, #0]
 80076f0:	791b      	ldrb	r3, [r3, #4]
 80076f2:	2b02      	cmp	r3, #2
 80076f4:	d10f      	bne.n	8007716 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80076f6:	68bb      	ldr	r3, [r7, #8]
 80076f8:	015a      	lsls	r2, r3, #5
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	4413      	add	r3, r2
 80076fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	68ba      	ldr	r2, [r7, #8]
 8007706:	0151      	lsls	r1, r2, #5
 8007708:	68fa      	ldr	r2, [r7, #12]
 800770a:	440a      	add	r2, r1
 800770c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007710:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007714:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8007716:	2300      	movs	r3, #0
}
 8007718:	4618      	mov	r0, r3
 800771a:	3714      	adds	r7, #20
 800771c:	46bd      	mov	sp, r7
 800771e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007722:	4770      	bx	lr

08007724 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8007724:	b480      	push	{r7}
 8007726:	b085      	sub	sp, #20
 8007728:	af00      	add	r7, sp, #0
 800772a:	6078      	str	r0, [r7, #4]
 800772c:	460b      	mov	r3, r1
 800772e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	68fa      	ldr	r2, [r7, #12]
 800773e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007742:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8007746:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800774e:	681a      	ldr	r2, [r3, #0]
 8007750:	78fb      	ldrb	r3, [r7, #3]
 8007752:	011b      	lsls	r3, r3, #4
 8007754:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8007758:	68f9      	ldr	r1, [r7, #12]
 800775a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800775e:	4313      	orrs	r3, r2
 8007760:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8007762:	2300      	movs	r3, #0
}
 8007764:	4618      	mov	r0, r3
 8007766:	3714      	adds	r7, #20
 8007768:	46bd      	mov	sp, r7
 800776a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800776e:	4770      	bx	lr

08007770 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8007770:	b480      	push	{r7}
 8007772:	b085      	sub	sp, #20
 8007774:	af00      	add	r7, sp, #0
 8007776:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	68fa      	ldr	r2, [r7, #12]
 8007786:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800778a:	f023 0303 	bic.w	r3, r3, #3
 800778e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007796:	685b      	ldr	r3, [r3, #4]
 8007798:	68fa      	ldr	r2, [r7, #12]
 800779a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800779e:	f023 0302 	bic.w	r3, r3, #2
 80077a2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80077a4:	2300      	movs	r3, #0
}
 80077a6:	4618      	mov	r0, r3
 80077a8:	3714      	adds	r7, #20
 80077aa:	46bd      	mov	sp, r7
 80077ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b0:	4770      	bx	lr

080077b2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80077b2:	b480      	push	{r7}
 80077b4:	b085      	sub	sp, #20
 80077b6:	af00      	add	r7, sp, #0
 80077b8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	68fa      	ldr	r2, [r7, #12]
 80077c8:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80077cc:	f023 0303 	bic.w	r3, r3, #3
 80077d0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80077d8:	685b      	ldr	r3, [r3, #4]
 80077da:	68fa      	ldr	r2, [r7, #12]
 80077dc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80077e0:	f043 0302 	orr.w	r3, r3, #2
 80077e4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80077e6:	2300      	movs	r3, #0
}
 80077e8:	4618      	mov	r0, r3
 80077ea:	3714      	adds	r7, #20
 80077ec:	46bd      	mov	sp, r7
 80077ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f2:	4770      	bx	lr

080077f4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80077f4:	b480      	push	{r7}
 80077f6:	b085      	sub	sp, #20
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	695b      	ldr	r3, [r3, #20]
 8007800:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	699b      	ldr	r3, [r3, #24]
 8007806:	68fa      	ldr	r2, [r7, #12]
 8007808:	4013      	ands	r3, r2
 800780a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800780c:	68fb      	ldr	r3, [r7, #12]
}
 800780e:	4618      	mov	r0, r3
 8007810:	3714      	adds	r7, #20
 8007812:	46bd      	mov	sp, r7
 8007814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007818:	4770      	bx	lr

0800781a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800781a:	b480      	push	{r7}
 800781c:	b085      	sub	sp, #20
 800781e:	af00      	add	r7, sp, #0
 8007820:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800782c:	699b      	ldr	r3, [r3, #24]
 800782e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007836:	69db      	ldr	r3, [r3, #28]
 8007838:	68ba      	ldr	r2, [r7, #8]
 800783a:	4013      	ands	r3, r2
 800783c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800783e:	68bb      	ldr	r3, [r7, #8]
 8007840:	0c1b      	lsrs	r3, r3, #16
}
 8007842:	4618      	mov	r0, r3
 8007844:	3714      	adds	r7, #20
 8007846:	46bd      	mov	sp, r7
 8007848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800784c:	4770      	bx	lr

0800784e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800784e:	b480      	push	{r7}
 8007850:	b085      	sub	sp, #20
 8007852:	af00      	add	r7, sp, #0
 8007854:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007860:	699b      	ldr	r3, [r3, #24]
 8007862:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800786a:	69db      	ldr	r3, [r3, #28]
 800786c:	68ba      	ldr	r2, [r7, #8]
 800786e:	4013      	ands	r3, r2
 8007870:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8007872:	68bb      	ldr	r3, [r7, #8]
 8007874:	b29b      	uxth	r3, r3
}
 8007876:	4618      	mov	r0, r3
 8007878:	3714      	adds	r7, #20
 800787a:	46bd      	mov	sp, r7
 800787c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007880:	4770      	bx	lr

08007882 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007882:	b480      	push	{r7}
 8007884:	b085      	sub	sp, #20
 8007886:	af00      	add	r7, sp, #0
 8007888:	6078      	str	r0, [r7, #4]
 800788a:	460b      	mov	r3, r1
 800788c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8007892:	78fb      	ldrb	r3, [r7, #3]
 8007894:	015a      	lsls	r2, r3, #5
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	4413      	add	r3, r2
 800789a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800789e:	689b      	ldr	r3, [r3, #8]
 80078a0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80078a8:	695b      	ldr	r3, [r3, #20]
 80078aa:	68ba      	ldr	r2, [r7, #8]
 80078ac:	4013      	ands	r3, r2
 80078ae:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80078b0:	68bb      	ldr	r3, [r7, #8]
}
 80078b2:	4618      	mov	r0, r3
 80078b4:	3714      	adds	r7, #20
 80078b6:	46bd      	mov	sp, r7
 80078b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078bc:	4770      	bx	lr

080078be <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80078be:	b480      	push	{r7}
 80078c0:	b087      	sub	sp, #28
 80078c2:	af00      	add	r7, sp, #0
 80078c4:	6078      	str	r0, [r7, #4]
 80078c6:	460b      	mov	r3, r1
 80078c8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80078ce:	697b      	ldr	r3, [r7, #20]
 80078d0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80078d4:	691b      	ldr	r3, [r3, #16]
 80078d6:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80078d8:	697b      	ldr	r3, [r7, #20]
 80078da:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80078de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80078e0:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80078e2:	78fb      	ldrb	r3, [r7, #3]
 80078e4:	f003 030f 	and.w	r3, r3, #15
 80078e8:	68fa      	ldr	r2, [r7, #12]
 80078ea:	fa22 f303 	lsr.w	r3, r2, r3
 80078ee:	01db      	lsls	r3, r3, #7
 80078f0:	b2db      	uxtb	r3, r3
 80078f2:	693a      	ldr	r2, [r7, #16]
 80078f4:	4313      	orrs	r3, r2
 80078f6:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80078f8:	78fb      	ldrb	r3, [r7, #3]
 80078fa:	015a      	lsls	r2, r3, #5
 80078fc:	697b      	ldr	r3, [r7, #20]
 80078fe:	4413      	add	r3, r2
 8007900:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007904:	689b      	ldr	r3, [r3, #8]
 8007906:	693a      	ldr	r2, [r7, #16]
 8007908:	4013      	ands	r3, r2
 800790a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800790c:	68bb      	ldr	r3, [r7, #8]
}
 800790e:	4618      	mov	r0, r3
 8007910:	371c      	adds	r7, #28
 8007912:	46bd      	mov	sp, r7
 8007914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007918:	4770      	bx	lr

0800791a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800791a:	b480      	push	{r7}
 800791c:	b083      	sub	sp, #12
 800791e:	af00      	add	r7, sp, #0
 8007920:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	695b      	ldr	r3, [r3, #20]
 8007926:	f003 0301 	and.w	r3, r3, #1
}
 800792a:	4618      	mov	r0, r3
 800792c:	370c      	adds	r7, #12
 800792e:	46bd      	mov	sp, r7
 8007930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007934:	4770      	bx	lr

08007936 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8007936:	b480      	push	{r7}
 8007938:	b085      	sub	sp, #20
 800793a:	af00      	add	r7, sp, #0
 800793c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	68fa      	ldr	r2, [r7, #12]
 800794c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007950:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8007954:	f023 0307 	bic.w	r3, r3, #7
 8007958:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007960:	685b      	ldr	r3, [r3, #4]
 8007962:	68fa      	ldr	r2, [r7, #12]
 8007964:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007968:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800796c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800796e:	2300      	movs	r3, #0
}
 8007970:	4618      	mov	r0, r3
 8007972:	3714      	adds	r7, #20
 8007974:	46bd      	mov	sp, r7
 8007976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800797a:	4770      	bx	lr

0800797c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800797c:	b480      	push	{r7}
 800797e:	b087      	sub	sp, #28
 8007980:	af00      	add	r7, sp, #0
 8007982:	60f8      	str	r0, [r7, #12]
 8007984:	460b      	mov	r3, r1
 8007986:	607a      	str	r2, [r7, #4]
 8007988:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	333c      	adds	r3, #60	@ 0x3c
 8007992:	3304      	adds	r3, #4
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8007998:	693b      	ldr	r3, [r7, #16]
 800799a:	4a26      	ldr	r2, [pc, #152]	@ (8007a34 <USB_EP0_OutStart+0xb8>)
 800799c:	4293      	cmp	r3, r2
 800799e:	d90a      	bls.n	80079b6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80079a0:	697b      	ldr	r3, [r7, #20]
 80079a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80079ac:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80079b0:	d101      	bne.n	80079b6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80079b2:	2300      	movs	r3, #0
 80079b4:	e037      	b.n	8007a26 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80079b6:	697b      	ldr	r3, [r7, #20]
 80079b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80079bc:	461a      	mov	r2, r3
 80079be:	2300      	movs	r3, #0
 80079c0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80079c2:	697b      	ldr	r3, [r7, #20]
 80079c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80079c8:	691b      	ldr	r3, [r3, #16]
 80079ca:	697a      	ldr	r2, [r7, #20]
 80079cc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80079d0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80079d4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80079d6:	697b      	ldr	r3, [r7, #20]
 80079d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80079dc:	691b      	ldr	r3, [r3, #16]
 80079de:	697a      	ldr	r2, [r7, #20]
 80079e0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80079e4:	f043 0318 	orr.w	r3, r3, #24
 80079e8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80079ea:	697b      	ldr	r3, [r7, #20]
 80079ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80079f0:	691b      	ldr	r3, [r3, #16]
 80079f2:	697a      	ldr	r2, [r7, #20]
 80079f4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80079f8:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 80079fc:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80079fe:	7afb      	ldrb	r3, [r7, #11]
 8007a00:	2b01      	cmp	r3, #1
 8007a02:	d10f      	bne.n	8007a24 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8007a04:	697b      	ldr	r3, [r7, #20]
 8007a06:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a0a:	461a      	mov	r2, r3
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8007a10:	697b      	ldr	r3, [r7, #20]
 8007a12:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	697a      	ldr	r2, [r7, #20]
 8007a1a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007a1e:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8007a22:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007a24:	2300      	movs	r3, #0
}
 8007a26:	4618      	mov	r0, r3
 8007a28:	371c      	adds	r7, #28
 8007a2a:	46bd      	mov	sp, r7
 8007a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a30:	4770      	bx	lr
 8007a32:	bf00      	nop
 8007a34:	4f54300a 	.word	0x4f54300a

08007a38 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007a38:	b480      	push	{r7}
 8007a3a:	b085      	sub	sp, #20
 8007a3c:	af00      	add	r7, sp, #0
 8007a3e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007a40:	2300      	movs	r3, #0
 8007a42:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	3301      	adds	r3, #1
 8007a48:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007a50:	d901      	bls.n	8007a56 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007a52:	2303      	movs	r3, #3
 8007a54:	e022      	b.n	8007a9c <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	691b      	ldr	r3, [r3, #16]
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	daf2      	bge.n	8007a44 <USB_CoreReset+0xc>

  count = 10U;
 8007a5e:	230a      	movs	r3, #10
 8007a60:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 8007a62:	e002      	b.n	8007a6a <USB_CoreReset+0x32>
  {
    count--;
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	3b01      	subs	r3, #1
 8007a68:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d1f9      	bne.n	8007a64 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	691b      	ldr	r3, [r3, #16]
 8007a74:	f043 0201 	orr.w	r2, r3, #1
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	3301      	adds	r3, #1
 8007a80:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007a88:	d901      	bls.n	8007a8e <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 8007a8a:	2303      	movs	r3, #3
 8007a8c:	e006      	b.n	8007a9c <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	691b      	ldr	r3, [r3, #16]
 8007a92:	f003 0301 	and.w	r3, r3, #1
 8007a96:	2b01      	cmp	r3, #1
 8007a98:	d0f0      	beq.n	8007a7c <USB_CoreReset+0x44>

  return HAL_OK;
 8007a9a:	2300      	movs	r3, #0
}
 8007a9c:	4618      	mov	r0, r3
 8007a9e:	3714      	adds	r7, #20
 8007aa0:	46bd      	mov	sp, r7
 8007aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa6:	4770      	bx	lr

08007aa8 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007aa8:	b580      	push	{r7, lr}
 8007aaa:	b084      	sub	sp, #16
 8007aac:	af00      	add	r7, sp, #0
 8007aae:	6078      	str	r0, [r7, #4]
 8007ab0:	460b      	mov	r3, r1
 8007ab2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_HID_HandleTypeDef *hhid;

  hhid = (USBD_HID_HandleTypeDef *)USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 8007ab4:	2010      	movs	r0, #16
 8007ab6:	f002 f953 	bl	8009d60 <USBD_static_malloc>
 8007aba:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d109      	bne.n	8007ad6 <USBD_HID_Init+0x2e>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	32b0      	adds	r2, #176	@ 0xb0
 8007acc:	2100      	movs	r1, #0
 8007ace:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8007ad2:	2302      	movs	r3, #2
 8007ad4:	e048      	b.n	8007b68 <USBD_HID_Init+0xc0>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hhid;
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	32b0      	adds	r2, #176	@ 0xb0
 8007ae0:	68f9      	ldr	r1, [r7, #12]
 8007ae2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	32b0      	adds	r2, #176	@ 0xb0
 8007af0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	7c1b      	ldrb	r3, [r3, #16]
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d10d      	bne.n	8007b1e <USBD_HID_Init+0x76>
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_HS_BINTERVAL;
 8007b02:	4b1b      	ldr	r3, [pc, #108]	@ (8007b70 <USBD_HID_Init+0xc8>)
 8007b04:	781b      	ldrb	r3, [r3, #0]
 8007b06:	f003 020f 	and.w	r2, r3, #15
 8007b0a:	6879      	ldr	r1, [r7, #4]
 8007b0c:	4613      	mov	r3, r2
 8007b0e:	009b      	lsls	r3, r3, #2
 8007b10:	4413      	add	r3, r2
 8007b12:	009b      	lsls	r3, r3, #2
 8007b14:	440b      	add	r3, r1
 8007b16:	331c      	adds	r3, #28
 8007b18:	2207      	movs	r2, #7
 8007b1a:	601a      	str	r2, [r3, #0]
 8007b1c:	e00c      	b.n	8007b38 <USBD_HID_Init+0x90>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_FS_BINTERVAL;
 8007b1e:	4b14      	ldr	r3, [pc, #80]	@ (8007b70 <USBD_HID_Init+0xc8>)
 8007b20:	781b      	ldrb	r3, [r3, #0]
 8007b22:	f003 020f 	and.w	r2, r3, #15
 8007b26:	6879      	ldr	r1, [r7, #4]
 8007b28:	4613      	mov	r3, r2
 8007b2a:	009b      	lsls	r3, r3, #2
 8007b2c:	4413      	add	r3, r2
 8007b2e:	009b      	lsls	r3, r3, #2
 8007b30:	440b      	add	r3, r1
 8007b32:	331c      	adds	r3, #28
 8007b34:	220a      	movs	r2, #10
 8007b36:	601a      	str	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HIDInEpAdd, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 8007b38:	4b0d      	ldr	r3, [pc, #52]	@ (8007b70 <USBD_HID_Init+0xc8>)
 8007b3a:	7819      	ldrb	r1, [r3, #0]
 8007b3c:	2304      	movs	r3, #4
 8007b3e:	2203      	movs	r2, #3
 8007b40:	6878      	ldr	r0, [r7, #4]
 8007b42:	f001 fffc 	bl	8009b3e <USBD_LL_OpenEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 1U;
 8007b46:	4b0a      	ldr	r3, [pc, #40]	@ (8007b70 <USBD_HID_Init+0xc8>)
 8007b48:	781b      	ldrb	r3, [r3, #0]
 8007b4a:	f003 020f 	and.w	r2, r3, #15
 8007b4e:	6879      	ldr	r1, [r7, #4]
 8007b50:	4613      	mov	r3, r2
 8007b52:	009b      	lsls	r3, r3, #2
 8007b54:	4413      	add	r3, r2
 8007b56:	009b      	lsls	r3, r3, #2
 8007b58:	440b      	add	r3, r1
 8007b5a:	3323      	adds	r3, #35	@ 0x23
 8007b5c:	2201      	movs	r2, #1
 8007b5e:	701a      	strb	r2, [r3, #0]

  hhid->state = USBD_HID_IDLE;
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	2200      	movs	r2, #0
 8007b64:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8007b66:	2300      	movs	r3, #0
}
 8007b68:	4618      	mov	r0, r3
 8007b6a:	3710      	adds	r7, #16
 8007b6c:	46bd      	mov	sp, r7
 8007b6e:	bd80      	pop	{r7, pc}
 8007b70:	200000ce 	.word	0x200000ce

08007b74 <USBD_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007b74:	b580      	push	{r7, lr}
 8007b76:	b082      	sub	sp, #8
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	6078      	str	r0, [r7, #4]
 8007b7c:	460b      	mov	r3, r1
 8007b7e:	70fb      	strb	r3, [r7, #3]
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HIDInEpAdd);
 8007b80:	4b1f      	ldr	r3, [pc, #124]	@ (8007c00 <USBD_HID_DeInit+0x8c>)
 8007b82:	781b      	ldrb	r3, [r3, #0]
 8007b84:	4619      	mov	r1, r3
 8007b86:	6878      	ldr	r0, [r7, #4]
 8007b88:	f001 ffff 	bl	8009b8a <USBD_LL_CloseEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 0U;
 8007b8c:	4b1c      	ldr	r3, [pc, #112]	@ (8007c00 <USBD_HID_DeInit+0x8c>)
 8007b8e:	781b      	ldrb	r3, [r3, #0]
 8007b90:	f003 020f 	and.w	r2, r3, #15
 8007b94:	6879      	ldr	r1, [r7, #4]
 8007b96:	4613      	mov	r3, r2
 8007b98:	009b      	lsls	r3, r3, #2
 8007b9a:	4413      	add	r3, r2
 8007b9c:	009b      	lsls	r3, r3, #2
 8007b9e:	440b      	add	r3, r1
 8007ba0:	3323      	adds	r3, #35	@ 0x23
 8007ba2:	2200      	movs	r2, #0
 8007ba4:	701a      	strb	r2, [r3, #0]
  pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = 0U;
 8007ba6:	4b16      	ldr	r3, [pc, #88]	@ (8007c00 <USBD_HID_DeInit+0x8c>)
 8007ba8:	781b      	ldrb	r3, [r3, #0]
 8007baa:	f003 020f 	and.w	r2, r3, #15
 8007bae:	6879      	ldr	r1, [r7, #4]
 8007bb0:	4613      	mov	r3, r2
 8007bb2:	009b      	lsls	r3, r3, #2
 8007bb4:	4413      	add	r3, r2
 8007bb6:	009b      	lsls	r3, r3, #2
 8007bb8:	440b      	add	r3, r1
 8007bba:	331c      	adds	r3, #28
 8007bbc:	2200      	movs	r2, #0
 8007bbe:	601a      	str	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	32b0      	adds	r2, #176	@ 0xb0
 8007bca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d011      	beq.n	8007bf6 <USBD_HID_DeInit+0x82>
  {
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	32b0      	adds	r2, #176	@ 0xb0
 8007bdc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007be0:	4618      	mov	r0, r3
 8007be2:	f002 f8cb 	bl	8009d7c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	32b0      	adds	r2, #176	@ 0xb0
 8007bf0:	2100      	movs	r1, #0
 8007bf2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return (uint8_t)USBD_OK;
 8007bf6:	2300      	movs	r3, #0
}
 8007bf8:	4618      	mov	r0, r3
 8007bfa:	3708      	adds	r7, #8
 8007bfc:	46bd      	mov	sp, r7
 8007bfe:	bd80      	pop	{r7, pc}
 8007c00:	200000ce 	.word	0x200000ce

08007c04 <USBD_HID_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007c04:	b580      	push	{r7, lr}
 8007c06:	b086      	sub	sp, #24
 8007c08:	af00      	add	r7, sp, #0
 8007c0a:	6078      	str	r0, [r7, #4]
 8007c0c:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	32b0      	adds	r2, #176	@ 0xb0
 8007c18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c1c:	60fb      	str	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8007c1e:	2300      	movs	r3, #0
 8007c20:	75fb      	strb	r3, [r7, #23]
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 8007c22:	2300      	movs	r3, #0
 8007c24:	817b      	strh	r3, [r7, #10]

  if (hhid == NULL)
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d101      	bne.n	8007c30 <USBD_HID_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 8007c2c:	2303      	movs	r3, #3
 8007c2e:	e0e8      	b.n	8007e02 <USBD_HID_Setup+0x1fe>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007c30:	683b      	ldr	r3, [r7, #0]
 8007c32:	781b      	ldrb	r3, [r3, #0]
 8007c34:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d046      	beq.n	8007cca <USBD_HID_Setup+0xc6>
 8007c3c:	2b20      	cmp	r3, #32
 8007c3e:	f040 80d8 	bne.w	8007df2 <USBD_HID_Setup+0x1ee>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 8007c42:	683b      	ldr	r3, [r7, #0]
 8007c44:	785b      	ldrb	r3, [r3, #1]
 8007c46:	3b02      	subs	r3, #2
 8007c48:	2b09      	cmp	r3, #9
 8007c4a:	d836      	bhi.n	8007cba <USBD_HID_Setup+0xb6>
 8007c4c:	a201      	add	r2, pc, #4	@ (adr r2, 8007c54 <USBD_HID_Setup+0x50>)
 8007c4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c52:	bf00      	nop
 8007c54:	08007cab 	.word	0x08007cab
 8007c58:	08007c8b 	.word	0x08007c8b
 8007c5c:	08007cbb 	.word	0x08007cbb
 8007c60:	08007cbb 	.word	0x08007cbb
 8007c64:	08007cbb 	.word	0x08007cbb
 8007c68:	08007cbb 	.word	0x08007cbb
 8007c6c:	08007cbb 	.word	0x08007cbb
 8007c70:	08007cbb 	.word	0x08007cbb
 8007c74:	08007c99 	.word	0x08007c99
 8007c78:	08007c7d 	.word	0x08007c7d
      {
        case USBD_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8007c7c:	683b      	ldr	r3, [r7, #0]
 8007c7e:	885b      	ldrh	r3, [r3, #2]
 8007c80:	b2db      	uxtb	r3, r3
 8007c82:	461a      	mov	r2, r3
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	601a      	str	r2, [r3, #0]
          break;
 8007c88:	e01e      	b.n	8007cc8 <USBD_HID_Setup+0xc4>

        case USBD_HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	2201      	movs	r2, #1
 8007c8e:	4619      	mov	r1, r3
 8007c90:	6878      	ldr	r0, [r7, #4]
 8007c92:	f001 fbfb 	bl	800948c <USBD_CtlSendData>
          break;
 8007c96:	e017      	b.n	8007cc8 <USBD_HID_Setup+0xc4>

        case USBD_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8007c98:	683b      	ldr	r3, [r7, #0]
 8007c9a:	885b      	ldrh	r3, [r3, #2]
 8007c9c:	0a1b      	lsrs	r3, r3, #8
 8007c9e:	b29b      	uxth	r3, r3
 8007ca0:	b2db      	uxtb	r3, r3
 8007ca2:	461a      	mov	r2, r3
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	605a      	str	r2, [r3, #4]
          break;
 8007ca8:	e00e      	b.n	8007cc8 <USBD_HID_Setup+0xc4>

        case USBD_HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	3304      	adds	r3, #4
 8007cae:	2201      	movs	r2, #1
 8007cb0:	4619      	mov	r1, r3
 8007cb2:	6878      	ldr	r0, [r7, #4]
 8007cb4:	f001 fbea 	bl	800948c <USBD_CtlSendData>
          break;
 8007cb8:	e006      	b.n	8007cc8 <USBD_HID_Setup+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8007cba:	6839      	ldr	r1, [r7, #0]
 8007cbc:	6878      	ldr	r0, [r7, #4]
 8007cbe:	f001 fb68 	bl	8009392 <USBD_CtlError>
          ret = USBD_FAIL;
 8007cc2:	2303      	movs	r3, #3
 8007cc4:	75fb      	strb	r3, [r7, #23]
          break;
 8007cc6:	bf00      	nop
      }
      break;
 8007cc8:	e09a      	b.n	8007e00 <USBD_HID_Setup+0x1fc>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007cca:	683b      	ldr	r3, [r7, #0]
 8007ccc:	785b      	ldrb	r3, [r3, #1]
 8007cce:	2b0b      	cmp	r3, #11
 8007cd0:	f200 8086 	bhi.w	8007de0 <USBD_HID_Setup+0x1dc>
 8007cd4:	a201      	add	r2, pc, #4	@ (adr r2, 8007cdc <USBD_HID_Setup+0xd8>)
 8007cd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cda:	bf00      	nop
 8007cdc:	08007d0d 	.word	0x08007d0d
 8007ce0:	08007def 	.word	0x08007def
 8007ce4:	08007de1 	.word	0x08007de1
 8007ce8:	08007de1 	.word	0x08007de1
 8007cec:	08007de1 	.word	0x08007de1
 8007cf0:	08007de1 	.word	0x08007de1
 8007cf4:	08007d37 	.word	0x08007d37
 8007cf8:	08007de1 	.word	0x08007de1
 8007cfc:	08007de1 	.word	0x08007de1
 8007d00:	08007de1 	.word	0x08007de1
 8007d04:	08007d8f 	.word	0x08007d8f
 8007d08:	08007db9 	.word	0x08007db9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007d12:	b2db      	uxtb	r3, r3
 8007d14:	2b03      	cmp	r3, #3
 8007d16:	d107      	bne.n	8007d28 <USBD_HID_Setup+0x124>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007d18:	f107 030a 	add.w	r3, r7, #10
 8007d1c:	2202      	movs	r2, #2
 8007d1e:	4619      	mov	r1, r3
 8007d20:	6878      	ldr	r0, [r7, #4]
 8007d22:	f001 fbb3 	bl	800948c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007d26:	e063      	b.n	8007df0 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 8007d28:	6839      	ldr	r1, [r7, #0]
 8007d2a:	6878      	ldr	r0, [r7, #4]
 8007d2c:	f001 fb31 	bl	8009392 <USBD_CtlError>
            ret = USBD_FAIL;
 8007d30:	2303      	movs	r3, #3
 8007d32:	75fb      	strb	r3, [r7, #23]
          break;
 8007d34:	e05c      	b.n	8007df0 <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == HID_REPORT_DESC)
 8007d36:	683b      	ldr	r3, [r7, #0]
 8007d38:	885b      	ldrh	r3, [r3, #2]
 8007d3a:	0a1b      	lsrs	r3, r3, #8
 8007d3c:	b29b      	uxth	r3, r3
 8007d3e:	2b22      	cmp	r3, #34	@ 0x22
 8007d40:	d108      	bne.n	8007d54 <USBD_HID_Setup+0x150>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 8007d42:	683b      	ldr	r3, [r7, #0]
 8007d44:	88db      	ldrh	r3, [r3, #6]
 8007d46:	2b4a      	cmp	r3, #74	@ 0x4a
 8007d48:	bf28      	it	cs
 8007d4a:	234a      	movcs	r3, #74	@ 0x4a
 8007d4c:	82bb      	strh	r3, [r7, #20]
            pbuf = HID_MOUSE_ReportDesc;
 8007d4e:	4b2f      	ldr	r3, [pc, #188]	@ (8007e0c <USBD_HID_Setup+0x208>)
 8007d50:	613b      	str	r3, [r7, #16]
 8007d52:	e015      	b.n	8007d80 <USBD_HID_Setup+0x17c>
          }
          else if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 8007d54:	683b      	ldr	r3, [r7, #0]
 8007d56:	885b      	ldrh	r3, [r3, #2]
 8007d58:	0a1b      	lsrs	r3, r3, #8
 8007d5a:	b29b      	uxth	r3, r3
 8007d5c:	2b21      	cmp	r3, #33	@ 0x21
 8007d5e:	d108      	bne.n	8007d72 <USBD_HID_Setup+0x16e>
          {
            pbuf = USBD_HID_Desc;
 8007d60:	4b2b      	ldr	r3, [pc, #172]	@ (8007e10 <USBD_HID_Setup+0x20c>)
 8007d62:	613b      	str	r3, [r7, #16]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 8007d64:	683b      	ldr	r3, [r7, #0]
 8007d66:	88db      	ldrh	r3, [r3, #6]
 8007d68:	2b09      	cmp	r3, #9
 8007d6a:	bf28      	it	cs
 8007d6c:	2309      	movcs	r3, #9
 8007d6e:	82bb      	strh	r3, [r7, #20]
 8007d70:	e006      	b.n	8007d80 <USBD_HID_Setup+0x17c>
          }
          else
          {
            USBD_CtlError(pdev, req);
 8007d72:	6839      	ldr	r1, [r7, #0]
 8007d74:	6878      	ldr	r0, [r7, #4]
 8007d76:	f001 fb0c 	bl	8009392 <USBD_CtlError>
            ret = USBD_FAIL;
 8007d7a:	2303      	movs	r3, #3
 8007d7c:	75fb      	strb	r3, [r7, #23]
            break;
 8007d7e:	e037      	b.n	8007df0 <USBD_HID_Setup+0x1ec>
          }
          (void)USBD_CtlSendData(pdev, pbuf, len);
 8007d80:	8abb      	ldrh	r3, [r7, #20]
 8007d82:	461a      	mov	r2, r3
 8007d84:	6939      	ldr	r1, [r7, #16]
 8007d86:	6878      	ldr	r0, [r7, #4]
 8007d88:	f001 fb80 	bl	800948c <USBD_CtlSendData>
          break;
 8007d8c:	e030      	b.n	8007df0 <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007d94:	b2db      	uxtb	r3, r3
 8007d96:	2b03      	cmp	r3, #3
 8007d98:	d107      	bne.n	8007daa <USBD_HID_Setup+0x1a6>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	3308      	adds	r3, #8
 8007d9e:	2201      	movs	r2, #1
 8007da0:	4619      	mov	r1, r3
 8007da2:	6878      	ldr	r0, [r7, #4]
 8007da4:	f001 fb72 	bl	800948c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007da8:	e022      	b.n	8007df0 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 8007daa:	6839      	ldr	r1, [r7, #0]
 8007dac:	6878      	ldr	r0, [r7, #4]
 8007dae:	f001 faf0 	bl	8009392 <USBD_CtlError>
            ret = USBD_FAIL;
 8007db2:	2303      	movs	r3, #3
 8007db4:	75fb      	strb	r3, [r7, #23]
          break;
 8007db6:	e01b      	b.n	8007df0 <USBD_HID_Setup+0x1ec>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007dbe:	b2db      	uxtb	r3, r3
 8007dc0:	2b03      	cmp	r3, #3
 8007dc2:	d106      	bne.n	8007dd2 <USBD_HID_Setup+0x1ce>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8007dc4:	683b      	ldr	r3, [r7, #0]
 8007dc6:	885b      	ldrh	r3, [r3, #2]
 8007dc8:	b2db      	uxtb	r3, r3
 8007dca:	461a      	mov	r2, r3
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007dd0:	e00e      	b.n	8007df0 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 8007dd2:	6839      	ldr	r1, [r7, #0]
 8007dd4:	6878      	ldr	r0, [r7, #4]
 8007dd6:	f001 fadc 	bl	8009392 <USBD_CtlError>
            ret = USBD_FAIL;
 8007dda:	2303      	movs	r3, #3
 8007ddc:	75fb      	strb	r3, [r7, #23]
          break;
 8007dde:	e007      	b.n	8007df0 <USBD_HID_Setup+0x1ec>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8007de0:	6839      	ldr	r1, [r7, #0]
 8007de2:	6878      	ldr	r0, [r7, #4]
 8007de4:	f001 fad5 	bl	8009392 <USBD_CtlError>
          ret = USBD_FAIL;
 8007de8:	2303      	movs	r3, #3
 8007dea:	75fb      	strb	r3, [r7, #23]
          break;
 8007dec:	e000      	b.n	8007df0 <USBD_HID_Setup+0x1ec>
          break;
 8007dee:	bf00      	nop
      }
      break;
 8007df0:	e006      	b.n	8007e00 <USBD_HID_Setup+0x1fc>

    default:
      USBD_CtlError(pdev, req);
 8007df2:	6839      	ldr	r1, [r7, #0]
 8007df4:	6878      	ldr	r0, [r7, #4]
 8007df6:	f001 facc 	bl	8009392 <USBD_CtlError>
      ret = USBD_FAIL;
 8007dfa:	2303      	movs	r3, #3
 8007dfc:	75fb      	strb	r3, [r7, #23]
      break;
 8007dfe:	bf00      	nop
  }

  return (uint8_t)ret;
 8007e00:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e02:	4618      	mov	r0, r3
 8007e04:	3718      	adds	r7, #24
 8007e06:	46bd      	mov	sp, r7
 8007e08:	bd80      	pop	{r7, pc}
 8007e0a:	bf00      	nop
 8007e0c:	20000084 	.word	0x20000084
 8007e10:	2000006c 	.word	0x2000006c

08007e14 <USBD_HID_SendReport>:
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len, uint8_t ClassId)
{
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len)
{
 8007e14:	b580      	push	{r7, lr}
 8007e16:	b086      	sub	sp, #24
 8007e18:	af00      	add	r7, sp, #0
 8007e1a:	60f8      	str	r0, [r7, #12]
 8007e1c:	60b9      	str	r1, [r7, #8]
 8007e1e:	4613      	mov	r3, r2
 8007e20:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	32b0      	adds	r2, #176	@ 0xb0
 8007e2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e30:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hhid == NULL)
 8007e32:	697b      	ldr	r3, [r7, #20]
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d101      	bne.n	8007e3c <USBD_HID_SendReport+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8007e38:	2303      	movs	r3, #3
 8007e3a:	e014      	b.n	8007e66 <USBD_HID_SendReport+0x52>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, ClassId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007e42:	b2db      	uxtb	r3, r3
 8007e44:	2b03      	cmp	r3, #3
 8007e46:	d10d      	bne.n	8007e64 <USBD_HID_SendReport+0x50>
  {
    if (hhid->state == USBD_HID_IDLE)
 8007e48:	697b      	ldr	r3, [r7, #20]
 8007e4a:	7b1b      	ldrb	r3, [r3, #12]
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d109      	bne.n	8007e64 <USBD_HID_SendReport+0x50>
    {
      hhid->state = USBD_HID_BUSY;
 8007e50:	697b      	ldr	r3, [r7, #20]
 8007e52:	2201      	movs	r2, #1
 8007e54:	731a      	strb	r2, [r3, #12]
      (void)USBD_LL_Transmit(pdev, HIDInEpAdd, report, len);
 8007e56:	4b06      	ldr	r3, [pc, #24]	@ (8007e70 <USBD_HID_SendReport+0x5c>)
 8007e58:	7819      	ldrb	r1, [r3, #0]
 8007e5a:	88fb      	ldrh	r3, [r7, #6]
 8007e5c:	68ba      	ldr	r2, [r7, #8]
 8007e5e:	68f8      	ldr	r0, [r7, #12]
 8007e60:	f001 ff3b 	bl	8009cda <USBD_LL_Transmit>
    }
  }

  return (uint8_t)USBD_OK;
 8007e64:	2300      	movs	r3, #0
}
 8007e66:	4618      	mov	r0, r3
 8007e68:	3718      	adds	r7, #24
 8007e6a:	46bd      	mov	sp, r7
 8007e6c:	bd80      	pop	{r7, pc}
 8007e6e:	bf00      	nop
 8007e70:	200000ce 	.word	0x200000ce

08007e74 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 8007e74:	b580      	push	{r7, lr}
 8007e76:	b084      	sub	sp, #16
 8007e78:	af00      	add	r7, sp, #0
 8007e7a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 8007e7c:	2181      	movs	r1, #129	@ 0x81
 8007e7e:	4809      	ldr	r0, [pc, #36]	@ (8007ea4 <USBD_HID_GetFSCfgDesc+0x30>)
 8007e80:	f000 fc4e 	bl	8008720 <USBD_GetEpDesc>
 8007e84:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d002      	beq.n	8007e92 <USBD_HID_GetFSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	220a      	movs	r2, #10
 8007e90:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	2222      	movs	r2, #34	@ 0x22
 8007e96:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 8007e98:	4b02      	ldr	r3, [pc, #8]	@ (8007ea4 <USBD_HID_GetFSCfgDesc+0x30>)
}
 8007e9a:	4618      	mov	r0, r3
 8007e9c:	3710      	adds	r7, #16
 8007e9e:	46bd      	mov	sp, r7
 8007ea0:	bd80      	pop	{r7, pc}
 8007ea2:	bf00      	nop
 8007ea4:	20000048 	.word	0x20000048

08007ea8 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 8007ea8:	b580      	push	{r7, lr}
 8007eaa:	b084      	sub	sp, #16
 8007eac:	af00      	add	r7, sp, #0
 8007eae:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 8007eb0:	2181      	movs	r1, #129	@ 0x81
 8007eb2:	4809      	ldr	r0, [pc, #36]	@ (8007ed8 <USBD_HID_GetHSCfgDesc+0x30>)
 8007eb4:	f000 fc34 	bl	8008720 <USBD_GetEpDesc>
 8007eb8:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d002      	beq.n	8007ec6 <USBD_HID_GetHSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_HS_BINTERVAL;
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	2207      	movs	r2, #7
 8007ec4:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	2222      	movs	r2, #34	@ 0x22
 8007eca:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 8007ecc:	4b02      	ldr	r3, [pc, #8]	@ (8007ed8 <USBD_HID_GetHSCfgDesc+0x30>)
}
 8007ece:	4618      	mov	r0, r3
 8007ed0:	3710      	adds	r7, #16
 8007ed2:	46bd      	mov	sp, r7
 8007ed4:	bd80      	pop	{r7, pc}
 8007ed6:	bf00      	nop
 8007ed8:	20000048 	.word	0x20000048

08007edc <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007edc:	b580      	push	{r7, lr}
 8007ede:	b084      	sub	sp, #16
 8007ee0:	af00      	add	r7, sp, #0
 8007ee2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 8007ee4:	2181      	movs	r1, #129	@ 0x81
 8007ee6:	4809      	ldr	r0, [pc, #36]	@ (8007f0c <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
 8007ee8:	f000 fc1a 	bl	8008720 <USBD_GetEpDesc>
 8007eec:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d002      	beq.n	8007efa <USBD_HID_GetOtherSpeedCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	220a      	movs	r2, #10
 8007ef8:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	2222      	movs	r2, #34	@ 0x22
 8007efe:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 8007f00:	4b02      	ldr	r3, [pc, #8]	@ (8007f0c <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
}
 8007f02:	4618      	mov	r0, r3
 8007f04:	3710      	adds	r7, #16
 8007f06:	46bd      	mov	sp, r7
 8007f08:	bd80      	pop	{r7, pc}
 8007f0a:	bf00      	nop
 8007f0c:	20000048 	.word	0x20000048

08007f10 <USBD_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007f10:	b480      	push	{r7}
 8007f12:	b083      	sub	sp, #12
 8007f14:	af00      	add	r7, sp, #0
 8007f16:	6078      	str	r0, [r7, #4]
 8007f18:	460b      	mov	r3, r1
 8007f1a:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId])->state = USBD_HID_IDLE;
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	32b0      	adds	r2, #176	@ 0xb0
 8007f26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f2a:	2200      	movs	r2, #0
 8007f2c:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8007f2e:	2300      	movs	r3, #0
}
 8007f30:	4618      	mov	r0, r3
 8007f32:	370c      	adds	r7, #12
 8007f34:	46bd      	mov	sp, r7
 8007f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f3a:	4770      	bx	lr

08007f3c <USBD_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8007f3c:	b480      	push	{r7}
 8007f3e:	b083      	sub	sp, #12
 8007f40:	af00      	add	r7, sp, #0
 8007f42:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	220a      	movs	r2, #10
 8007f48:	801a      	strh	r2, [r3, #0]

  return USBD_HID_DeviceQualifierDesc;
 8007f4a:	4b03      	ldr	r3, [pc, #12]	@ (8007f58 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 8007f4c:	4618      	mov	r0, r3
 8007f4e:	370c      	adds	r7, #12
 8007f50:	46bd      	mov	sp, r7
 8007f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f56:	4770      	bx	lr
 8007f58:	20000078 	.word	0x20000078

08007f5c <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007f5c:	b580      	push	{r7, lr}
 8007f5e:	b086      	sub	sp, #24
 8007f60:	af00      	add	r7, sp, #0
 8007f62:	60f8      	str	r0, [r7, #12]
 8007f64:	60b9      	str	r1, [r7, #8]
 8007f66:	4613      	mov	r3, r2
 8007f68:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d101      	bne.n	8007f74 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007f70:	2303      	movs	r3, #3
 8007f72:	e01f      	b.n	8007fb4 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	2200      	movs	r2, #0
 8007f78:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	2200      	movs	r2, #0
 8007f80:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	2200      	movs	r2, #0
 8007f88:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007f8c:	68bb      	ldr	r3, [r7, #8]
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d003      	beq.n	8007f9a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	68ba      	ldr	r2, [r7, #8]
 8007f96:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	2201      	movs	r2, #1
 8007f9e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	79fa      	ldrb	r2, [r7, #7]
 8007fa6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007fa8:	68f8      	ldr	r0, [r7, #12]
 8007faa:	f001 fd5b 	bl	8009a64 <USBD_LL_Init>
 8007fae:	4603      	mov	r3, r0
 8007fb0:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007fb2:	7dfb      	ldrb	r3, [r7, #23]
}
 8007fb4:	4618      	mov	r0, r3
 8007fb6:	3718      	adds	r7, #24
 8007fb8:	46bd      	mov	sp, r7
 8007fba:	bd80      	pop	{r7, pc}

08007fbc <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007fbc:	b580      	push	{r7, lr}
 8007fbe:	b084      	sub	sp, #16
 8007fc0:	af00      	add	r7, sp, #0
 8007fc2:	6078      	str	r0, [r7, #4]
 8007fc4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007fc6:	2300      	movs	r3, #0
 8007fc8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8007fca:	683b      	ldr	r3, [r7, #0]
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d101      	bne.n	8007fd4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007fd0:	2303      	movs	r3, #3
 8007fd2:	e025      	b.n	8008020 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	683a      	ldr	r2, [r7, #0]
 8007fd8:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	32ae      	adds	r2, #174	@ 0xae
 8007fe6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007fea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d00f      	beq.n	8008010 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	32ae      	adds	r2, #174	@ 0xae
 8007ffa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ffe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008000:	f107 020e 	add.w	r2, r7, #14
 8008004:	4610      	mov	r0, r2
 8008006:	4798      	blx	r3
 8008008:	4602      	mov	r2, r0
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8008016:	1c5a      	adds	r2, r3, #1
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800801e:	2300      	movs	r3, #0
}
 8008020:	4618      	mov	r0, r3
 8008022:	3710      	adds	r7, #16
 8008024:	46bd      	mov	sp, r7
 8008026:	bd80      	pop	{r7, pc}

08008028 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008028:	b580      	push	{r7, lr}
 800802a:	b082      	sub	sp, #8
 800802c:	af00      	add	r7, sp, #0
 800802e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8008030:	6878      	ldr	r0, [r7, #4]
 8008032:	f001 fd69 	bl	8009b08 <USBD_LL_Start>
 8008036:	4603      	mov	r3, r0
}
 8008038:	4618      	mov	r0, r3
 800803a:	3708      	adds	r7, #8
 800803c:	46bd      	mov	sp, r7
 800803e:	bd80      	pop	{r7, pc}

08008040 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8008040:	b480      	push	{r7}
 8008042:	b083      	sub	sp, #12
 8008044:	af00      	add	r7, sp, #0
 8008046:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008048:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800804a:	4618      	mov	r0, r3
 800804c:	370c      	adds	r7, #12
 800804e:	46bd      	mov	sp, r7
 8008050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008054:	4770      	bx	lr

08008056 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008056:	b580      	push	{r7, lr}
 8008058:	b084      	sub	sp, #16
 800805a:	af00      	add	r7, sp, #0
 800805c:	6078      	str	r0, [r7, #4]
 800805e:	460b      	mov	r3, r1
 8008060:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8008062:	2300      	movs	r3, #0
 8008064:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800806c:	2b00      	cmp	r3, #0
 800806e:	d009      	beq.n	8008084 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	78fa      	ldrb	r2, [r7, #3]
 800807a:	4611      	mov	r1, r2
 800807c:	6878      	ldr	r0, [r7, #4]
 800807e:	4798      	blx	r3
 8008080:	4603      	mov	r3, r0
 8008082:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008084:	7bfb      	ldrb	r3, [r7, #15]
}
 8008086:	4618      	mov	r0, r3
 8008088:	3710      	adds	r7, #16
 800808a:	46bd      	mov	sp, r7
 800808c:	bd80      	pop	{r7, pc}

0800808e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800808e:	b580      	push	{r7, lr}
 8008090:	b084      	sub	sp, #16
 8008092:	af00      	add	r7, sp, #0
 8008094:	6078      	str	r0, [r7, #4]
 8008096:	460b      	mov	r3, r1
 8008098:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800809a:	2300      	movs	r3, #0
 800809c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80080a4:	685b      	ldr	r3, [r3, #4]
 80080a6:	78fa      	ldrb	r2, [r7, #3]
 80080a8:	4611      	mov	r1, r2
 80080aa:	6878      	ldr	r0, [r7, #4]
 80080ac:	4798      	blx	r3
 80080ae:	4603      	mov	r3, r0
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d001      	beq.n	80080b8 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80080b4:	2303      	movs	r3, #3
 80080b6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80080b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80080ba:	4618      	mov	r0, r3
 80080bc:	3710      	adds	r7, #16
 80080be:	46bd      	mov	sp, r7
 80080c0:	bd80      	pop	{r7, pc}

080080c2 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80080c2:	b580      	push	{r7, lr}
 80080c4:	b084      	sub	sp, #16
 80080c6:	af00      	add	r7, sp, #0
 80080c8:	6078      	str	r0, [r7, #4]
 80080ca:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80080d2:	6839      	ldr	r1, [r7, #0]
 80080d4:	4618      	mov	r0, r3
 80080d6:	f001 f922 	bl	800931e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	2201      	movs	r2, #1
 80080de:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 80080e8:	461a      	mov	r2, r3
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80080f6:	f003 031f 	and.w	r3, r3, #31
 80080fa:	2b02      	cmp	r3, #2
 80080fc:	d01a      	beq.n	8008134 <USBD_LL_SetupStage+0x72>
 80080fe:	2b02      	cmp	r3, #2
 8008100:	d822      	bhi.n	8008148 <USBD_LL_SetupStage+0x86>
 8008102:	2b00      	cmp	r3, #0
 8008104:	d002      	beq.n	800810c <USBD_LL_SetupStage+0x4a>
 8008106:	2b01      	cmp	r3, #1
 8008108:	d00a      	beq.n	8008120 <USBD_LL_SetupStage+0x5e>
 800810a:	e01d      	b.n	8008148 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008112:	4619      	mov	r1, r3
 8008114:	6878      	ldr	r0, [r7, #4]
 8008116:	f000 fb77 	bl	8008808 <USBD_StdDevReq>
 800811a:	4603      	mov	r3, r0
 800811c:	73fb      	strb	r3, [r7, #15]
      break;
 800811e:	e020      	b.n	8008162 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008126:	4619      	mov	r1, r3
 8008128:	6878      	ldr	r0, [r7, #4]
 800812a:	f000 fbdf 	bl	80088ec <USBD_StdItfReq>
 800812e:	4603      	mov	r3, r0
 8008130:	73fb      	strb	r3, [r7, #15]
      break;
 8008132:	e016      	b.n	8008162 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800813a:	4619      	mov	r1, r3
 800813c:	6878      	ldr	r0, [r7, #4]
 800813e:	f000 fc41 	bl	80089c4 <USBD_StdEPReq>
 8008142:	4603      	mov	r3, r0
 8008144:	73fb      	strb	r3, [r7, #15]
      break;
 8008146:	e00c      	b.n	8008162 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800814e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8008152:	b2db      	uxtb	r3, r3
 8008154:	4619      	mov	r1, r3
 8008156:	6878      	ldr	r0, [r7, #4]
 8008158:	f001 fd36 	bl	8009bc8 <USBD_LL_StallEP>
 800815c:	4603      	mov	r3, r0
 800815e:	73fb      	strb	r3, [r7, #15]
      break;
 8008160:	bf00      	nop
  }

  return ret;
 8008162:	7bfb      	ldrb	r3, [r7, #15]
}
 8008164:	4618      	mov	r0, r3
 8008166:	3710      	adds	r7, #16
 8008168:	46bd      	mov	sp, r7
 800816a:	bd80      	pop	{r7, pc}

0800816c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800816c:	b580      	push	{r7, lr}
 800816e:	b086      	sub	sp, #24
 8008170:	af00      	add	r7, sp, #0
 8008172:	60f8      	str	r0, [r7, #12]
 8008174:	460b      	mov	r3, r1
 8008176:	607a      	str	r2, [r7, #4]
 8008178:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800817a:	2300      	movs	r3, #0
 800817c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 800817e:	7afb      	ldrb	r3, [r7, #11]
 8008180:	2b00      	cmp	r3, #0
 8008182:	d177      	bne.n	8008274 <USBD_LL_DataOutStage+0x108>
  {
    pep = &pdev->ep_out[0];
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800818a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008192:	2b03      	cmp	r3, #3
 8008194:	f040 80a1 	bne.w	80082da <USBD_LL_DataOutStage+0x16e>
    {
      if (pep->rem_length > pep->maxpacket)
 8008198:	693b      	ldr	r3, [r7, #16]
 800819a:	685b      	ldr	r3, [r3, #4]
 800819c:	693a      	ldr	r2, [r7, #16]
 800819e:	8992      	ldrh	r2, [r2, #12]
 80081a0:	4293      	cmp	r3, r2
 80081a2:	d91c      	bls.n	80081de <USBD_LL_DataOutStage+0x72>
      {
        pep->rem_length -= pep->maxpacket;
 80081a4:	693b      	ldr	r3, [r7, #16]
 80081a6:	685b      	ldr	r3, [r3, #4]
 80081a8:	693a      	ldr	r2, [r7, #16]
 80081aa:	8992      	ldrh	r2, [r2, #12]
 80081ac:	1a9a      	subs	r2, r3, r2
 80081ae:	693b      	ldr	r3, [r7, #16]
 80081b0:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 80081b2:	693b      	ldr	r3, [r7, #16]
 80081b4:	691b      	ldr	r3, [r3, #16]
 80081b6:	693a      	ldr	r2, [r7, #16]
 80081b8:	8992      	ldrh	r2, [r2, #12]
 80081ba:	441a      	add	r2, r3
 80081bc:	693b      	ldr	r3, [r7, #16]
 80081be:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueRx(pdev, pep->pbuffer, MAX(pep->rem_length, pep->maxpacket));
 80081c0:	693b      	ldr	r3, [r7, #16]
 80081c2:	6919      	ldr	r1, [r3, #16]
 80081c4:	693b      	ldr	r3, [r7, #16]
 80081c6:	899b      	ldrh	r3, [r3, #12]
 80081c8:	461a      	mov	r2, r3
 80081ca:	693b      	ldr	r3, [r7, #16]
 80081cc:	685b      	ldr	r3, [r3, #4]
 80081ce:	4293      	cmp	r3, r2
 80081d0:	bf38      	it	cc
 80081d2:	4613      	movcc	r3, r2
 80081d4:	461a      	mov	r2, r3
 80081d6:	68f8      	ldr	r0, [r7, #12]
 80081d8:	f001 f987 	bl	80094ea <USBD_CtlContinueRx>
 80081dc:	e07d      	b.n	80082da <USBD_LL_DataOutStage+0x16e>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80081e4:	f003 031f 	and.w	r3, r3, #31
 80081e8:	2b02      	cmp	r3, #2
 80081ea:	d014      	beq.n	8008216 <USBD_LL_DataOutStage+0xaa>
 80081ec:	2b02      	cmp	r3, #2
 80081ee:	d81d      	bhi.n	800822c <USBD_LL_DataOutStage+0xc0>
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d002      	beq.n	80081fa <USBD_LL_DataOutStage+0x8e>
 80081f4:	2b01      	cmp	r3, #1
 80081f6:	d003      	beq.n	8008200 <USBD_LL_DataOutStage+0x94>
 80081f8:	e018      	b.n	800822c <USBD_LL_DataOutStage+0xc0>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80081fa:	2300      	movs	r3, #0
 80081fc:	75bb      	strb	r3, [r7, #22]
            break;
 80081fe:	e018      	b.n	8008232 <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8008206:	b2db      	uxtb	r3, r3
 8008208:	4619      	mov	r1, r3
 800820a:	68f8      	ldr	r0, [r7, #12]
 800820c:	f000 fa6e 	bl	80086ec <USBD_CoreFindIF>
 8008210:	4603      	mov	r3, r0
 8008212:	75bb      	strb	r3, [r7, #22]
            break;
 8008214:	e00d      	b.n	8008232 <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800821c:	b2db      	uxtb	r3, r3
 800821e:	4619      	mov	r1, r3
 8008220:	68f8      	ldr	r0, [r7, #12]
 8008222:	f000 fa70 	bl	8008706 <USBD_CoreFindEP>
 8008226:	4603      	mov	r3, r0
 8008228:	75bb      	strb	r3, [r7, #22]
            break;
 800822a:	e002      	b.n	8008232 <USBD_LL_DataOutStage+0xc6>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800822c:	2300      	movs	r3, #0
 800822e:	75bb      	strb	r3, [r7, #22]
            break;
 8008230:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8008232:	7dbb      	ldrb	r3, [r7, #22]
 8008234:	2b00      	cmp	r3, #0
 8008236:	d119      	bne.n	800826c <USBD_LL_DataOutStage+0x100>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800823e:	b2db      	uxtb	r3, r3
 8008240:	2b03      	cmp	r3, #3
 8008242:	d113      	bne.n	800826c <USBD_LL_DataOutStage+0x100>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8008244:	7dba      	ldrb	r2, [r7, #22]
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	32ae      	adds	r2, #174	@ 0xae
 800824a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800824e:	691b      	ldr	r3, [r3, #16]
 8008250:	2b00      	cmp	r3, #0
 8008252:	d00b      	beq.n	800826c <USBD_LL_DataOutStage+0x100>
            {
              pdev->classId = idx;
 8008254:	7dba      	ldrb	r2, [r7, #22]
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800825c:	7dba      	ldrb	r2, [r7, #22]
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	32ae      	adds	r2, #174	@ 0xae
 8008262:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008266:	691b      	ldr	r3, [r3, #16]
 8008268:	68f8      	ldr	r0, [r7, #12]
 800826a:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800826c:	68f8      	ldr	r0, [r7, #12]
 800826e:	f001 f94d 	bl	800950c <USBD_CtlSendStatus>
 8008272:	e032      	b.n	80082da <USBD_LL_DataOutStage+0x16e>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8008274:	7afb      	ldrb	r3, [r7, #11]
 8008276:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800827a:	b2db      	uxtb	r3, r3
 800827c:	4619      	mov	r1, r3
 800827e:	68f8      	ldr	r0, [r7, #12]
 8008280:	f000 fa41 	bl	8008706 <USBD_CoreFindEP>
 8008284:	4603      	mov	r3, r0
 8008286:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008288:	7dbb      	ldrb	r3, [r7, #22]
 800828a:	2bff      	cmp	r3, #255	@ 0xff
 800828c:	d025      	beq.n	80082da <USBD_LL_DataOutStage+0x16e>
 800828e:	7dbb      	ldrb	r3, [r7, #22]
 8008290:	2b00      	cmp	r3, #0
 8008292:	d122      	bne.n	80082da <USBD_LL_DataOutStage+0x16e>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800829a:	b2db      	uxtb	r3, r3
 800829c:	2b03      	cmp	r3, #3
 800829e:	d117      	bne.n	80082d0 <USBD_LL_DataOutStage+0x164>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80082a0:	7dba      	ldrb	r2, [r7, #22]
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	32ae      	adds	r2, #174	@ 0xae
 80082a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80082aa:	699b      	ldr	r3, [r3, #24]
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d00f      	beq.n	80082d0 <USBD_LL_DataOutStage+0x164>
        {
          pdev->classId = idx;
 80082b0:	7dba      	ldrb	r2, [r7, #22]
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80082b8:	7dba      	ldrb	r2, [r7, #22]
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	32ae      	adds	r2, #174	@ 0xae
 80082be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80082c2:	699b      	ldr	r3, [r3, #24]
 80082c4:	7afa      	ldrb	r2, [r7, #11]
 80082c6:	4611      	mov	r1, r2
 80082c8:	68f8      	ldr	r0, [r7, #12]
 80082ca:	4798      	blx	r3
 80082cc:	4603      	mov	r3, r0
 80082ce:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80082d0:	7dfb      	ldrb	r3, [r7, #23]
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d001      	beq.n	80082da <USBD_LL_DataOutStage+0x16e>
      {
        return ret;
 80082d6:	7dfb      	ldrb	r3, [r7, #23]
 80082d8:	e000      	b.n	80082dc <USBD_LL_DataOutStage+0x170>
      }
    }
  }

  return USBD_OK;
 80082da:	2300      	movs	r3, #0
}
 80082dc:	4618      	mov	r0, r3
 80082de:	3718      	adds	r7, #24
 80082e0:	46bd      	mov	sp, r7
 80082e2:	bd80      	pop	{r7, pc}

080082e4 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80082e4:	b580      	push	{r7, lr}
 80082e6:	b086      	sub	sp, #24
 80082e8:	af00      	add	r7, sp, #0
 80082ea:	60f8      	str	r0, [r7, #12]
 80082ec:	460b      	mov	r3, r1
 80082ee:	607a      	str	r2, [r7, #4]
 80082f0:	72fb      	strb	r3, [r7, #11]
  USBD_StatusTypeDef ret;
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 80082f2:	7afb      	ldrb	r3, [r7, #11]
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d178      	bne.n	80083ea <USBD_LL_DataInStage+0x106>
  {
    pep = &pdev->ep_in[0];
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	3314      	adds	r3, #20
 80082fc:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008304:	2b02      	cmp	r3, #2
 8008306:	d163      	bne.n	80083d0 <USBD_LL_DataInStage+0xec>
    {
      if (pep->rem_length > pep->maxpacket)
 8008308:	693b      	ldr	r3, [r7, #16]
 800830a:	685b      	ldr	r3, [r3, #4]
 800830c:	693a      	ldr	r2, [r7, #16]
 800830e:	8992      	ldrh	r2, [r2, #12]
 8008310:	4293      	cmp	r3, r2
 8008312:	d91c      	bls.n	800834e <USBD_LL_DataInStage+0x6a>
      {
        pep->rem_length -= pep->maxpacket;
 8008314:	693b      	ldr	r3, [r7, #16]
 8008316:	685b      	ldr	r3, [r3, #4]
 8008318:	693a      	ldr	r2, [r7, #16]
 800831a:	8992      	ldrh	r2, [r2, #12]
 800831c:	1a9a      	subs	r2, r3, r2
 800831e:	693b      	ldr	r3, [r7, #16]
 8008320:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 8008322:	693b      	ldr	r3, [r7, #16]
 8008324:	691b      	ldr	r3, [r3, #16]
 8008326:	693a      	ldr	r2, [r7, #16]
 8008328:	8992      	ldrh	r2, [r2, #12]
 800832a:	441a      	add	r2, r3
 800832c:	693b      	ldr	r3, [r7, #16]
 800832e:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueSendData(pdev, pep->pbuffer, pep->rem_length);
 8008330:	693b      	ldr	r3, [r7, #16]
 8008332:	6919      	ldr	r1, [r3, #16]
 8008334:	693b      	ldr	r3, [r7, #16]
 8008336:	685b      	ldr	r3, [r3, #4]
 8008338:	461a      	mov	r2, r3
 800833a:	68f8      	ldr	r0, [r7, #12]
 800833c:	f001 f8c4 	bl	80094c8 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008340:	2300      	movs	r3, #0
 8008342:	2200      	movs	r2, #0
 8008344:	2100      	movs	r1, #0
 8008346:	68f8      	ldr	r0, [r7, #12]
 8008348:	f001 fce8 	bl	8009d1c <USBD_LL_PrepareReceive>
 800834c:	e040      	b.n	80083d0 <USBD_LL_DataInStage+0xec>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800834e:	693b      	ldr	r3, [r7, #16]
 8008350:	899b      	ldrh	r3, [r3, #12]
 8008352:	461a      	mov	r2, r3
 8008354:	693b      	ldr	r3, [r7, #16]
 8008356:	685b      	ldr	r3, [r3, #4]
 8008358:	429a      	cmp	r2, r3
 800835a:	d11c      	bne.n	8008396 <USBD_LL_DataInStage+0xb2>
            (pep->total_length >= pep->maxpacket) &&
 800835c:	693b      	ldr	r3, [r7, #16]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	693a      	ldr	r2, [r7, #16]
 8008362:	8992      	ldrh	r2, [r2, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8008364:	4293      	cmp	r3, r2
 8008366:	d316      	bcc.n	8008396 <USBD_LL_DataInStage+0xb2>
            (pep->total_length < pdev->ep0_data_len))
 8008368:	693b      	ldr	r3, [r7, #16]
 800836a:	681a      	ldr	r2, [r3, #0]
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008372:	429a      	cmp	r2, r3
 8008374:	d20f      	bcs.n	8008396 <USBD_LL_DataInStage+0xb2>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008376:	2200      	movs	r2, #0
 8008378:	2100      	movs	r1, #0
 800837a:	68f8      	ldr	r0, [r7, #12]
 800837c:	f001 f8a4 	bl	80094c8 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	2200      	movs	r2, #0
 8008384:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008388:	2300      	movs	r3, #0
 800838a:	2200      	movs	r2, #0
 800838c:	2100      	movs	r1, #0
 800838e:	68f8      	ldr	r0, [r7, #12]
 8008390:	f001 fcc4 	bl	8009d1c <USBD_LL_PrepareReceive>
 8008394:	e01c      	b.n	80083d0 <USBD_LL_DataInStage+0xec>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800839c:	b2db      	uxtb	r3, r3
 800839e:	2b03      	cmp	r3, #3
 80083a0:	d10f      	bne.n	80083c2 <USBD_LL_DataInStage+0xde>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80083a8:	68db      	ldr	r3, [r3, #12]
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d009      	beq.n	80083c2 <USBD_LL_DataInStage+0xde>
            {
              pdev->classId = 0U;
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	2200      	movs	r2, #0
 80083b2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80083bc:	68db      	ldr	r3, [r3, #12]
 80083be:	68f8      	ldr	r0, [r7, #12]
 80083c0:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80083c2:	2180      	movs	r1, #128	@ 0x80
 80083c4:	68f8      	ldr	r0, [r7, #12]
 80083c6:	f001 fbff 	bl	8009bc8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80083ca:	68f8      	ldr	r0, [r7, #12]
 80083cc:	f001 f8b1 	bl	8009532 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d03a      	beq.n	8008450 <USBD_LL_DataInStage+0x16c>
    {
      (void)USBD_RunTestMode(pdev);
 80083da:	68f8      	ldr	r0, [r7, #12]
 80083dc:	f7ff fe30 	bl	8008040 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	2200      	movs	r2, #0
 80083e4:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 80083e8:	e032      	b.n	8008450 <USBD_LL_DataInStage+0x16c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80083ea:	7afb      	ldrb	r3, [r7, #11]
 80083ec:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80083f0:	b2db      	uxtb	r3, r3
 80083f2:	4619      	mov	r1, r3
 80083f4:	68f8      	ldr	r0, [r7, #12]
 80083f6:	f000 f986 	bl	8008706 <USBD_CoreFindEP>
 80083fa:	4603      	mov	r3, r0
 80083fc:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80083fe:	7dfb      	ldrb	r3, [r7, #23]
 8008400:	2bff      	cmp	r3, #255	@ 0xff
 8008402:	d025      	beq.n	8008450 <USBD_LL_DataInStage+0x16c>
 8008404:	7dfb      	ldrb	r3, [r7, #23]
 8008406:	2b00      	cmp	r3, #0
 8008408:	d122      	bne.n	8008450 <USBD_LL_DataInStage+0x16c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008410:	b2db      	uxtb	r3, r3
 8008412:	2b03      	cmp	r3, #3
 8008414:	d11c      	bne.n	8008450 <USBD_LL_DataInStage+0x16c>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8008416:	7dfa      	ldrb	r2, [r7, #23]
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	32ae      	adds	r2, #174	@ 0xae
 800841c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008420:	695b      	ldr	r3, [r3, #20]
 8008422:	2b00      	cmp	r3, #0
 8008424:	d014      	beq.n	8008450 <USBD_LL_DataInStage+0x16c>
        {
          pdev->classId = idx;
 8008426:	7dfa      	ldrb	r2, [r7, #23]
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800842e:	7dfa      	ldrb	r2, [r7, #23]
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	32ae      	adds	r2, #174	@ 0xae
 8008434:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008438:	695b      	ldr	r3, [r3, #20]
 800843a:	7afa      	ldrb	r2, [r7, #11]
 800843c:	4611      	mov	r1, r2
 800843e:	68f8      	ldr	r0, [r7, #12]
 8008440:	4798      	blx	r3
 8008442:	4603      	mov	r3, r0
 8008444:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8008446:	7dbb      	ldrb	r3, [r7, #22]
 8008448:	2b00      	cmp	r3, #0
 800844a:	d001      	beq.n	8008450 <USBD_LL_DataInStage+0x16c>
          {
            return ret;
 800844c:	7dbb      	ldrb	r3, [r7, #22]
 800844e:	e000      	b.n	8008452 <USBD_LL_DataInStage+0x16e>
        }
      }
    }
  }

  return USBD_OK;
 8008450:	2300      	movs	r3, #0
}
 8008452:	4618      	mov	r0, r3
 8008454:	3718      	adds	r7, #24
 8008456:	46bd      	mov	sp, r7
 8008458:	bd80      	pop	{r7, pc}

0800845a <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800845a:	b580      	push	{r7, lr}
 800845c:	b084      	sub	sp, #16
 800845e:	af00      	add	r7, sp, #0
 8008460:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8008462:	2300      	movs	r3, #0
 8008464:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	2201      	movs	r2, #1
 800846a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	2200      	movs	r2, #0
 8008472:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	2200      	movs	r2, #0
 800847a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	2200      	movs	r2, #0
 8008480:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	2200      	movs	r2, #0
 8008488:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008492:	2b00      	cmp	r3, #0
 8008494:	d014      	beq.n	80084c0 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800849c:	685b      	ldr	r3, [r3, #4]
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d00e      	beq.n	80084c0 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80084a8:	685b      	ldr	r3, [r3, #4]
 80084aa:	687a      	ldr	r2, [r7, #4]
 80084ac:	6852      	ldr	r2, [r2, #4]
 80084ae:	b2d2      	uxtb	r2, r2
 80084b0:	4611      	mov	r1, r2
 80084b2:	6878      	ldr	r0, [r7, #4]
 80084b4:	4798      	blx	r3
 80084b6:	4603      	mov	r3, r0
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d001      	beq.n	80084c0 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80084bc:	2303      	movs	r3, #3
 80084be:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80084c0:	2340      	movs	r3, #64	@ 0x40
 80084c2:	2200      	movs	r2, #0
 80084c4:	2100      	movs	r1, #0
 80084c6:	6878      	ldr	r0, [r7, #4]
 80084c8:	f001 fb39 	bl	8009b3e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	2201      	movs	r2, #1
 80084d0:	f883 2163 	strb.w	r2, [r3, #355]	@ 0x163

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	2240      	movs	r2, #64	@ 0x40
 80084d8:	f8a3 2160 	strh.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80084dc:	2340      	movs	r3, #64	@ 0x40
 80084de:	2200      	movs	r2, #0
 80084e0:	2180      	movs	r1, #128	@ 0x80
 80084e2:	6878      	ldr	r0, [r7, #4]
 80084e4:	f001 fb2b 	bl	8009b3e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	2201      	movs	r2, #1
 80084ec:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	2240      	movs	r2, #64	@ 0x40
 80084f4:	841a      	strh	r2, [r3, #32]

  return ret;
 80084f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80084f8:	4618      	mov	r0, r3
 80084fa:	3710      	adds	r7, #16
 80084fc:	46bd      	mov	sp, r7
 80084fe:	bd80      	pop	{r7, pc}

08008500 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008500:	b480      	push	{r7}
 8008502:	b083      	sub	sp, #12
 8008504:	af00      	add	r7, sp, #0
 8008506:	6078      	str	r0, [r7, #4]
 8008508:	460b      	mov	r3, r1
 800850a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	78fa      	ldrb	r2, [r7, #3]
 8008510:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008512:	2300      	movs	r3, #0
}
 8008514:	4618      	mov	r0, r3
 8008516:	370c      	adds	r7, #12
 8008518:	46bd      	mov	sp, r7
 800851a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800851e:	4770      	bx	lr

08008520 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008520:	b480      	push	{r7}
 8008522:	b083      	sub	sp, #12
 8008524:	af00      	add	r7, sp, #0
 8008526:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800852e:	b2db      	uxtb	r3, r3
 8008530:	2b04      	cmp	r3, #4
 8008532:	d006      	beq.n	8008542 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800853a:	b2da      	uxtb	r2, r3
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	2204      	movs	r2, #4
 8008546:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800854a:	2300      	movs	r3, #0
}
 800854c:	4618      	mov	r0, r3
 800854e:	370c      	adds	r7, #12
 8008550:	46bd      	mov	sp, r7
 8008552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008556:	4770      	bx	lr

08008558 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008558:	b480      	push	{r7}
 800855a:	b083      	sub	sp, #12
 800855c:	af00      	add	r7, sp, #0
 800855e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008566:	b2db      	uxtb	r3, r3
 8008568:	2b04      	cmp	r3, #4
 800856a:	d106      	bne.n	800857a <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8008572:	b2da      	uxtb	r2, r3
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800857a:	2300      	movs	r3, #0
}
 800857c:	4618      	mov	r0, r3
 800857e:	370c      	adds	r7, #12
 8008580:	46bd      	mov	sp, r7
 8008582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008586:	4770      	bx	lr

08008588 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008588:	b580      	push	{r7, lr}
 800858a:	b082      	sub	sp, #8
 800858c:	af00      	add	r7, sp, #0
 800858e:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008596:	b2db      	uxtb	r3, r3
 8008598:	2b03      	cmp	r3, #3
 800859a:	d110      	bne.n	80085be <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d00b      	beq.n	80085be <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80085ac:	69db      	ldr	r3, [r3, #28]
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d005      	beq.n	80085be <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80085b8:	69db      	ldr	r3, [r3, #28]
 80085ba:	6878      	ldr	r0, [r7, #4]
 80085bc:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80085be:	2300      	movs	r3, #0
}
 80085c0:	4618      	mov	r0, r3
 80085c2:	3708      	adds	r7, #8
 80085c4:	46bd      	mov	sp, r7
 80085c6:	bd80      	pop	{r7, pc}

080085c8 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80085c8:	b580      	push	{r7, lr}
 80085ca:	b082      	sub	sp, #8
 80085cc:	af00      	add	r7, sp, #0
 80085ce:	6078      	str	r0, [r7, #4]
 80085d0:	460b      	mov	r3, r1
 80085d2:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	32ae      	adds	r2, #174	@ 0xae
 80085de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d101      	bne.n	80085ea <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80085e6:	2303      	movs	r3, #3
 80085e8:	e01c      	b.n	8008624 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80085f0:	b2db      	uxtb	r3, r3
 80085f2:	2b03      	cmp	r3, #3
 80085f4:	d115      	bne.n	8008622 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	32ae      	adds	r2, #174	@ 0xae
 8008600:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008604:	6a1b      	ldr	r3, [r3, #32]
 8008606:	2b00      	cmp	r3, #0
 8008608:	d00b      	beq.n	8008622 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	32ae      	adds	r2, #174	@ 0xae
 8008614:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008618:	6a1b      	ldr	r3, [r3, #32]
 800861a:	78fa      	ldrb	r2, [r7, #3]
 800861c:	4611      	mov	r1, r2
 800861e:	6878      	ldr	r0, [r7, #4]
 8008620:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008622:	2300      	movs	r3, #0
}
 8008624:	4618      	mov	r0, r3
 8008626:	3708      	adds	r7, #8
 8008628:	46bd      	mov	sp, r7
 800862a:	bd80      	pop	{r7, pc}

0800862c <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800862c:	b580      	push	{r7, lr}
 800862e:	b082      	sub	sp, #8
 8008630:	af00      	add	r7, sp, #0
 8008632:	6078      	str	r0, [r7, #4]
 8008634:	460b      	mov	r3, r1
 8008636:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	32ae      	adds	r2, #174	@ 0xae
 8008642:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008646:	2b00      	cmp	r3, #0
 8008648:	d101      	bne.n	800864e <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800864a:	2303      	movs	r3, #3
 800864c:	e01c      	b.n	8008688 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008654:	b2db      	uxtb	r3, r3
 8008656:	2b03      	cmp	r3, #3
 8008658:	d115      	bne.n	8008686 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	32ae      	adds	r2, #174	@ 0xae
 8008664:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008668:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800866a:	2b00      	cmp	r3, #0
 800866c:	d00b      	beq.n	8008686 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	32ae      	adds	r2, #174	@ 0xae
 8008678:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800867c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800867e:	78fa      	ldrb	r2, [r7, #3]
 8008680:	4611      	mov	r1, r2
 8008682:	6878      	ldr	r0, [r7, #4]
 8008684:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008686:	2300      	movs	r3, #0
}
 8008688:	4618      	mov	r0, r3
 800868a:	3708      	adds	r7, #8
 800868c:	46bd      	mov	sp, r7
 800868e:	bd80      	pop	{r7, pc}

08008690 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8008690:	b480      	push	{r7}
 8008692:	b083      	sub	sp, #12
 8008694:	af00      	add	r7, sp, #0
 8008696:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008698:	2300      	movs	r3, #0
}
 800869a:	4618      	mov	r0, r3
 800869c:	370c      	adds	r7, #12
 800869e:	46bd      	mov	sp, r7
 80086a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a4:	4770      	bx	lr

080086a6 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80086a6:	b580      	push	{r7, lr}
 80086a8:	b084      	sub	sp, #16
 80086aa:	af00      	add	r7, sp, #0
 80086ac:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80086ae:	2300      	movs	r3, #0
 80086b0:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	2201      	movs	r2, #1
 80086b6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d00e      	beq.n	80086e2 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80086ca:	685b      	ldr	r3, [r3, #4]
 80086cc:	687a      	ldr	r2, [r7, #4]
 80086ce:	6852      	ldr	r2, [r2, #4]
 80086d0:	b2d2      	uxtb	r2, r2
 80086d2:	4611      	mov	r1, r2
 80086d4:	6878      	ldr	r0, [r7, #4]
 80086d6:	4798      	blx	r3
 80086d8:	4603      	mov	r3, r0
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d001      	beq.n	80086e2 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80086de:	2303      	movs	r3, #3
 80086e0:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80086e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80086e4:	4618      	mov	r0, r3
 80086e6:	3710      	adds	r7, #16
 80086e8:	46bd      	mov	sp, r7
 80086ea:	bd80      	pop	{r7, pc}

080086ec <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80086ec:	b480      	push	{r7}
 80086ee:	b083      	sub	sp, #12
 80086f0:	af00      	add	r7, sp, #0
 80086f2:	6078      	str	r0, [r7, #4]
 80086f4:	460b      	mov	r3, r1
 80086f6:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80086f8:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80086fa:	4618      	mov	r0, r3
 80086fc:	370c      	adds	r7, #12
 80086fe:	46bd      	mov	sp, r7
 8008700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008704:	4770      	bx	lr

08008706 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008706:	b480      	push	{r7}
 8008708:	b083      	sub	sp, #12
 800870a:	af00      	add	r7, sp, #0
 800870c:	6078      	str	r0, [r7, #4]
 800870e:	460b      	mov	r3, r1
 8008710:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008712:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008714:	4618      	mov	r0, r3
 8008716:	370c      	adds	r7, #12
 8008718:	46bd      	mov	sp, r7
 800871a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800871e:	4770      	bx	lr

08008720 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8008720:	b580      	push	{r7, lr}
 8008722:	b086      	sub	sp, #24
 8008724:	af00      	add	r7, sp, #0
 8008726:	6078      	str	r0, [r7, #4]
 8008728:	460b      	mov	r3, r1
 800872a:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8008734:	2300      	movs	r3, #0
 8008736:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	885b      	ldrh	r3, [r3, #2]
 800873c:	b29b      	uxth	r3, r3
 800873e:	68fa      	ldr	r2, [r7, #12]
 8008740:	7812      	ldrb	r2, [r2, #0]
 8008742:	4293      	cmp	r3, r2
 8008744:	d91f      	bls.n	8008786 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	781b      	ldrb	r3, [r3, #0]
 800874a:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800874c:	e013      	b.n	8008776 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800874e:	f107 030a 	add.w	r3, r7, #10
 8008752:	4619      	mov	r1, r3
 8008754:	6978      	ldr	r0, [r7, #20]
 8008756:	f000 f81b 	bl	8008790 <USBD_GetNextDesc>
 800875a:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800875c:	697b      	ldr	r3, [r7, #20]
 800875e:	785b      	ldrb	r3, [r3, #1]
 8008760:	2b05      	cmp	r3, #5
 8008762:	d108      	bne.n	8008776 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8008764:	697b      	ldr	r3, [r7, #20]
 8008766:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8008768:	693b      	ldr	r3, [r7, #16]
 800876a:	789b      	ldrb	r3, [r3, #2]
 800876c:	78fa      	ldrb	r2, [r7, #3]
 800876e:	429a      	cmp	r2, r3
 8008770:	d008      	beq.n	8008784 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8008772:	2300      	movs	r3, #0
 8008774:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	885b      	ldrh	r3, [r3, #2]
 800877a:	b29a      	uxth	r2, r3
 800877c:	897b      	ldrh	r3, [r7, #10]
 800877e:	429a      	cmp	r2, r3
 8008780:	d8e5      	bhi.n	800874e <USBD_GetEpDesc+0x2e>
 8008782:	e000      	b.n	8008786 <USBD_GetEpDesc+0x66>
          break;
 8008784:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8008786:	693b      	ldr	r3, [r7, #16]
}
 8008788:	4618      	mov	r0, r3
 800878a:	3718      	adds	r7, #24
 800878c:	46bd      	mov	sp, r7
 800878e:	bd80      	pop	{r7, pc}

08008790 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8008790:	b480      	push	{r7}
 8008792:	b085      	sub	sp, #20
 8008794:	af00      	add	r7, sp, #0
 8008796:	6078      	str	r0, [r7, #4]
 8008798:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800879e:	683b      	ldr	r3, [r7, #0]
 80087a0:	881b      	ldrh	r3, [r3, #0]
 80087a2:	68fa      	ldr	r2, [r7, #12]
 80087a4:	7812      	ldrb	r2, [r2, #0]
 80087a6:	4413      	add	r3, r2
 80087a8:	b29a      	uxth	r2, r3
 80087aa:	683b      	ldr	r3, [r7, #0]
 80087ac:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	781b      	ldrb	r3, [r3, #0]
 80087b2:	461a      	mov	r2, r3
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	4413      	add	r3, r2
 80087b8:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80087ba:	68fb      	ldr	r3, [r7, #12]
}
 80087bc:	4618      	mov	r0, r3
 80087be:	3714      	adds	r7, #20
 80087c0:	46bd      	mov	sp, r7
 80087c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c6:	4770      	bx	lr

080087c8 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80087c8:	b480      	push	{r7}
 80087ca:	b087      	sub	sp, #28
 80087cc:	af00      	add	r7, sp, #0
 80087ce:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80087d4:	697b      	ldr	r3, [r7, #20]
 80087d6:	781b      	ldrb	r3, [r3, #0]
 80087d8:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80087da:	697b      	ldr	r3, [r7, #20]
 80087dc:	3301      	adds	r3, #1
 80087de:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80087e0:	697b      	ldr	r3, [r7, #20]
 80087e2:	781b      	ldrb	r3, [r3, #0]
 80087e4:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80087e6:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80087ea:	021b      	lsls	r3, r3, #8
 80087ec:	b21a      	sxth	r2, r3
 80087ee:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80087f2:	4313      	orrs	r3, r2
 80087f4:	b21b      	sxth	r3, r3
 80087f6:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80087f8:	89fb      	ldrh	r3, [r7, #14]
}
 80087fa:	4618      	mov	r0, r3
 80087fc:	371c      	adds	r7, #28
 80087fe:	46bd      	mov	sp, r7
 8008800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008804:	4770      	bx	lr
	...

08008808 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008808:	b580      	push	{r7, lr}
 800880a:	b084      	sub	sp, #16
 800880c:	af00      	add	r7, sp, #0
 800880e:	6078      	str	r0, [r7, #4]
 8008810:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008812:	2300      	movs	r3, #0
 8008814:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008816:	683b      	ldr	r3, [r7, #0]
 8008818:	781b      	ldrb	r3, [r3, #0]
 800881a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800881e:	2b40      	cmp	r3, #64	@ 0x40
 8008820:	d005      	beq.n	800882e <USBD_StdDevReq+0x26>
 8008822:	2b40      	cmp	r3, #64	@ 0x40
 8008824:	d857      	bhi.n	80088d6 <USBD_StdDevReq+0xce>
 8008826:	2b00      	cmp	r3, #0
 8008828:	d00f      	beq.n	800884a <USBD_StdDevReq+0x42>
 800882a:	2b20      	cmp	r3, #32
 800882c:	d153      	bne.n	80088d6 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	32ae      	adds	r2, #174	@ 0xae
 8008838:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800883c:	689b      	ldr	r3, [r3, #8]
 800883e:	6839      	ldr	r1, [r7, #0]
 8008840:	6878      	ldr	r0, [r7, #4]
 8008842:	4798      	blx	r3
 8008844:	4603      	mov	r3, r0
 8008846:	73fb      	strb	r3, [r7, #15]
      break;
 8008848:	e04a      	b.n	80088e0 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800884a:	683b      	ldr	r3, [r7, #0]
 800884c:	785b      	ldrb	r3, [r3, #1]
 800884e:	2b09      	cmp	r3, #9
 8008850:	d83b      	bhi.n	80088ca <USBD_StdDevReq+0xc2>
 8008852:	a201      	add	r2, pc, #4	@ (adr r2, 8008858 <USBD_StdDevReq+0x50>)
 8008854:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008858:	080088ad 	.word	0x080088ad
 800885c:	080088c1 	.word	0x080088c1
 8008860:	080088cb 	.word	0x080088cb
 8008864:	080088b7 	.word	0x080088b7
 8008868:	080088cb 	.word	0x080088cb
 800886c:	0800888b 	.word	0x0800888b
 8008870:	08008881 	.word	0x08008881
 8008874:	080088cb 	.word	0x080088cb
 8008878:	080088a3 	.word	0x080088a3
 800887c:	08008895 	.word	0x08008895
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008880:	6839      	ldr	r1, [r7, #0]
 8008882:	6878      	ldr	r0, [r7, #4]
 8008884:	f000 fa3e 	bl	8008d04 <USBD_GetDescriptor>
          break;
 8008888:	e024      	b.n	80088d4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800888a:	6839      	ldr	r1, [r7, #0]
 800888c:	6878      	ldr	r0, [r7, #4]
 800888e:	f000 fba3 	bl	8008fd8 <USBD_SetAddress>
          break;
 8008892:	e01f      	b.n	80088d4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8008894:	6839      	ldr	r1, [r7, #0]
 8008896:	6878      	ldr	r0, [r7, #4]
 8008898:	f000 fbe2 	bl	8009060 <USBD_SetConfig>
 800889c:	4603      	mov	r3, r0
 800889e:	73fb      	strb	r3, [r7, #15]
          break;
 80088a0:	e018      	b.n	80088d4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80088a2:	6839      	ldr	r1, [r7, #0]
 80088a4:	6878      	ldr	r0, [r7, #4]
 80088a6:	f000 fc85 	bl	80091b4 <USBD_GetConfig>
          break;
 80088aa:	e013      	b.n	80088d4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80088ac:	6839      	ldr	r1, [r7, #0]
 80088ae:	6878      	ldr	r0, [r7, #4]
 80088b0:	f000 fcb6 	bl	8009220 <USBD_GetStatus>
          break;
 80088b4:	e00e      	b.n	80088d4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80088b6:	6839      	ldr	r1, [r7, #0]
 80088b8:	6878      	ldr	r0, [r7, #4]
 80088ba:	f000 fce5 	bl	8009288 <USBD_SetFeature>
          break;
 80088be:	e009      	b.n	80088d4 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80088c0:	6839      	ldr	r1, [r7, #0]
 80088c2:	6878      	ldr	r0, [r7, #4]
 80088c4:	f000 fd09 	bl	80092da <USBD_ClrFeature>
          break;
 80088c8:	e004      	b.n	80088d4 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80088ca:	6839      	ldr	r1, [r7, #0]
 80088cc:	6878      	ldr	r0, [r7, #4]
 80088ce:	f000 fd60 	bl	8009392 <USBD_CtlError>
          break;
 80088d2:	bf00      	nop
      }
      break;
 80088d4:	e004      	b.n	80088e0 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80088d6:	6839      	ldr	r1, [r7, #0]
 80088d8:	6878      	ldr	r0, [r7, #4]
 80088da:	f000 fd5a 	bl	8009392 <USBD_CtlError>
      break;
 80088de:	bf00      	nop
  }

  return ret;
 80088e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80088e2:	4618      	mov	r0, r3
 80088e4:	3710      	adds	r7, #16
 80088e6:	46bd      	mov	sp, r7
 80088e8:	bd80      	pop	{r7, pc}
 80088ea:	bf00      	nop

080088ec <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80088ec:	b580      	push	{r7, lr}
 80088ee:	b084      	sub	sp, #16
 80088f0:	af00      	add	r7, sp, #0
 80088f2:	6078      	str	r0, [r7, #4]
 80088f4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80088f6:	2300      	movs	r3, #0
 80088f8:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80088fa:	683b      	ldr	r3, [r7, #0]
 80088fc:	781b      	ldrb	r3, [r3, #0]
 80088fe:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008902:	2b40      	cmp	r3, #64	@ 0x40
 8008904:	d005      	beq.n	8008912 <USBD_StdItfReq+0x26>
 8008906:	2b40      	cmp	r3, #64	@ 0x40
 8008908:	d852      	bhi.n	80089b0 <USBD_StdItfReq+0xc4>
 800890a:	2b00      	cmp	r3, #0
 800890c:	d001      	beq.n	8008912 <USBD_StdItfReq+0x26>
 800890e:	2b20      	cmp	r3, #32
 8008910:	d14e      	bne.n	80089b0 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008918:	b2db      	uxtb	r3, r3
 800891a:	3b01      	subs	r3, #1
 800891c:	2b02      	cmp	r3, #2
 800891e:	d840      	bhi.n	80089a2 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008920:	683b      	ldr	r3, [r7, #0]
 8008922:	889b      	ldrh	r3, [r3, #4]
 8008924:	b2db      	uxtb	r3, r3
 8008926:	2b01      	cmp	r3, #1
 8008928:	d836      	bhi.n	8008998 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800892a:	683b      	ldr	r3, [r7, #0]
 800892c:	889b      	ldrh	r3, [r3, #4]
 800892e:	b2db      	uxtb	r3, r3
 8008930:	4619      	mov	r1, r3
 8008932:	6878      	ldr	r0, [r7, #4]
 8008934:	f7ff feda 	bl	80086ec <USBD_CoreFindIF>
 8008938:	4603      	mov	r3, r0
 800893a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800893c:	7bbb      	ldrb	r3, [r7, #14]
 800893e:	2bff      	cmp	r3, #255	@ 0xff
 8008940:	d01d      	beq.n	800897e <USBD_StdItfReq+0x92>
 8008942:	7bbb      	ldrb	r3, [r7, #14]
 8008944:	2b00      	cmp	r3, #0
 8008946:	d11a      	bne.n	800897e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8008948:	7bba      	ldrb	r2, [r7, #14]
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	32ae      	adds	r2, #174	@ 0xae
 800894e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008952:	689b      	ldr	r3, [r3, #8]
 8008954:	2b00      	cmp	r3, #0
 8008956:	d00f      	beq.n	8008978 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8008958:	7bba      	ldrb	r2, [r7, #14]
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008960:	7bba      	ldrb	r2, [r7, #14]
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	32ae      	adds	r2, #174	@ 0xae
 8008966:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800896a:	689b      	ldr	r3, [r3, #8]
 800896c:	6839      	ldr	r1, [r7, #0]
 800896e:	6878      	ldr	r0, [r7, #4]
 8008970:	4798      	blx	r3
 8008972:	4603      	mov	r3, r0
 8008974:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008976:	e004      	b.n	8008982 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8008978:	2303      	movs	r3, #3
 800897a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800897c:	e001      	b.n	8008982 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800897e:	2303      	movs	r3, #3
 8008980:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008982:	683b      	ldr	r3, [r7, #0]
 8008984:	88db      	ldrh	r3, [r3, #6]
 8008986:	2b00      	cmp	r3, #0
 8008988:	d110      	bne.n	80089ac <USBD_StdItfReq+0xc0>
 800898a:	7bfb      	ldrb	r3, [r7, #15]
 800898c:	2b00      	cmp	r3, #0
 800898e:	d10d      	bne.n	80089ac <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8008990:	6878      	ldr	r0, [r7, #4]
 8008992:	f000 fdbb 	bl	800950c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008996:	e009      	b.n	80089ac <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8008998:	6839      	ldr	r1, [r7, #0]
 800899a:	6878      	ldr	r0, [r7, #4]
 800899c:	f000 fcf9 	bl	8009392 <USBD_CtlError>
          break;
 80089a0:	e004      	b.n	80089ac <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80089a2:	6839      	ldr	r1, [r7, #0]
 80089a4:	6878      	ldr	r0, [r7, #4]
 80089a6:	f000 fcf4 	bl	8009392 <USBD_CtlError>
          break;
 80089aa:	e000      	b.n	80089ae <USBD_StdItfReq+0xc2>
          break;
 80089ac:	bf00      	nop
      }
      break;
 80089ae:	e004      	b.n	80089ba <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80089b0:	6839      	ldr	r1, [r7, #0]
 80089b2:	6878      	ldr	r0, [r7, #4]
 80089b4:	f000 fced 	bl	8009392 <USBD_CtlError>
      break;
 80089b8:	bf00      	nop
  }

  return ret;
 80089ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80089bc:	4618      	mov	r0, r3
 80089be:	3710      	adds	r7, #16
 80089c0:	46bd      	mov	sp, r7
 80089c2:	bd80      	pop	{r7, pc}

080089c4 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80089c4:	b580      	push	{r7, lr}
 80089c6:	b084      	sub	sp, #16
 80089c8:	af00      	add	r7, sp, #0
 80089ca:	6078      	str	r0, [r7, #4]
 80089cc:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80089ce:	2300      	movs	r3, #0
 80089d0:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80089d2:	683b      	ldr	r3, [r7, #0]
 80089d4:	889b      	ldrh	r3, [r3, #4]
 80089d6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80089d8:	683b      	ldr	r3, [r7, #0]
 80089da:	781b      	ldrb	r3, [r3, #0]
 80089dc:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80089e0:	2b40      	cmp	r3, #64	@ 0x40
 80089e2:	d007      	beq.n	80089f4 <USBD_StdEPReq+0x30>
 80089e4:	2b40      	cmp	r3, #64	@ 0x40
 80089e6:	f200 8181 	bhi.w	8008cec <USBD_StdEPReq+0x328>
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d02a      	beq.n	8008a44 <USBD_StdEPReq+0x80>
 80089ee:	2b20      	cmp	r3, #32
 80089f0:	f040 817c 	bne.w	8008cec <USBD_StdEPReq+0x328>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80089f4:	7bbb      	ldrb	r3, [r7, #14]
 80089f6:	4619      	mov	r1, r3
 80089f8:	6878      	ldr	r0, [r7, #4]
 80089fa:	f7ff fe84 	bl	8008706 <USBD_CoreFindEP>
 80089fe:	4603      	mov	r3, r0
 8008a00:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008a02:	7b7b      	ldrb	r3, [r7, #13]
 8008a04:	2bff      	cmp	r3, #255	@ 0xff
 8008a06:	f000 8176 	beq.w	8008cf6 <USBD_StdEPReq+0x332>
 8008a0a:	7b7b      	ldrb	r3, [r7, #13]
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	f040 8172 	bne.w	8008cf6 <USBD_StdEPReq+0x332>
      {
        pdev->classId = idx;
 8008a12:	7b7a      	ldrb	r2, [r7, #13]
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8008a1a:	7b7a      	ldrb	r2, [r7, #13]
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	32ae      	adds	r2, #174	@ 0xae
 8008a20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a24:	689b      	ldr	r3, [r3, #8]
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	f000 8165 	beq.w	8008cf6 <USBD_StdEPReq+0x332>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8008a2c:	7b7a      	ldrb	r2, [r7, #13]
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	32ae      	adds	r2, #174	@ 0xae
 8008a32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a36:	689b      	ldr	r3, [r3, #8]
 8008a38:	6839      	ldr	r1, [r7, #0]
 8008a3a:	6878      	ldr	r0, [r7, #4]
 8008a3c:	4798      	blx	r3
 8008a3e:	4603      	mov	r3, r0
 8008a40:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8008a42:	e158      	b.n	8008cf6 <USBD_StdEPReq+0x332>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008a44:	683b      	ldr	r3, [r7, #0]
 8008a46:	785b      	ldrb	r3, [r3, #1]
 8008a48:	2b03      	cmp	r3, #3
 8008a4a:	d008      	beq.n	8008a5e <USBD_StdEPReq+0x9a>
 8008a4c:	2b03      	cmp	r3, #3
 8008a4e:	f300 8147 	bgt.w	8008ce0 <USBD_StdEPReq+0x31c>
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	f000 809b 	beq.w	8008b8e <USBD_StdEPReq+0x1ca>
 8008a58:	2b01      	cmp	r3, #1
 8008a5a:	d03c      	beq.n	8008ad6 <USBD_StdEPReq+0x112>
 8008a5c:	e140      	b.n	8008ce0 <USBD_StdEPReq+0x31c>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008a64:	b2db      	uxtb	r3, r3
 8008a66:	2b02      	cmp	r3, #2
 8008a68:	d002      	beq.n	8008a70 <USBD_StdEPReq+0xac>
 8008a6a:	2b03      	cmp	r3, #3
 8008a6c:	d016      	beq.n	8008a9c <USBD_StdEPReq+0xd8>
 8008a6e:	e02c      	b.n	8008aca <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008a70:	7bbb      	ldrb	r3, [r7, #14]
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d00d      	beq.n	8008a92 <USBD_StdEPReq+0xce>
 8008a76:	7bbb      	ldrb	r3, [r7, #14]
 8008a78:	2b80      	cmp	r3, #128	@ 0x80
 8008a7a:	d00a      	beq.n	8008a92 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008a7c:	7bbb      	ldrb	r3, [r7, #14]
 8008a7e:	4619      	mov	r1, r3
 8008a80:	6878      	ldr	r0, [r7, #4]
 8008a82:	f001 f8a1 	bl	8009bc8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008a86:	2180      	movs	r1, #128	@ 0x80
 8008a88:	6878      	ldr	r0, [r7, #4]
 8008a8a:	f001 f89d 	bl	8009bc8 <USBD_LL_StallEP>
 8008a8e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008a90:	e020      	b.n	8008ad4 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8008a92:	6839      	ldr	r1, [r7, #0]
 8008a94:	6878      	ldr	r0, [r7, #4]
 8008a96:	f000 fc7c 	bl	8009392 <USBD_CtlError>
              break;
 8008a9a:	e01b      	b.n	8008ad4 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008a9c:	683b      	ldr	r3, [r7, #0]
 8008a9e:	885b      	ldrh	r3, [r3, #2]
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d10e      	bne.n	8008ac2 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008aa4:	7bbb      	ldrb	r3, [r7, #14]
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d00b      	beq.n	8008ac2 <USBD_StdEPReq+0xfe>
 8008aaa:	7bbb      	ldrb	r3, [r7, #14]
 8008aac:	2b80      	cmp	r3, #128	@ 0x80
 8008aae:	d008      	beq.n	8008ac2 <USBD_StdEPReq+0xfe>
 8008ab0:	683b      	ldr	r3, [r7, #0]
 8008ab2:	88db      	ldrh	r3, [r3, #6]
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d104      	bne.n	8008ac2 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008ab8:	7bbb      	ldrb	r3, [r7, #14]
 8008aba:	4619      	mov	r1, r3
 8008abc:	6878      	ldr	r0, [r7, #4]
 8008abe:	f001 f883 	bl	8009bc8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8008ac2:	6878      	ldr	r0, [r7, #4]
 8008ac4:	f000 fd22 	bl	800950c <USBD_CtlSendStatus>

              break;
 8008ac8:	e004      	b.n	8008ad4 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8008aca:	6839      	ldr	r1, [r7, #0]
 8008acc:	6878      	ldr	r0, [r7, #4]
 8008ace:	f000 fc60 	bl	8009392 <USBD_CtlError>
              break;
 8008ad2:	bf00      	nop
          }
          break;
 8008ad4:	e109      	b.n	8008cea <USBD_StdEPReq+0x326>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008adc:	b2db      	uxtb	r3, r3
 8008ade:	2b02      	cmp	r3, #2
 8008ae0:	d002      	beq.n	8008ae8 <USBD_StdEPReq+0x124>
 8008ae2:	2b03      	cmp	r3, #3
 8008ae4:	d016      	beq.n	8008b14 <USBD_StdEPReq+0x150>
 8008ae6:	e04b      	b.n	8008b80 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008ae8:	7bbb      	ldrb	r3, [r7, #14]
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d00d      	beq.n	8008b0a <USBD_StdEPReq+0x146>
 8008aee:	7bbb      	ldrb	r3, [r7, #14]
 8008af0:	2b80      	cmp	r3, #128	@ 0x80
 8008af2:	d00a      	beq.n	8008b0a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008af4:	7bbb      	ldrb	r3, [r7, #14]
 8008af6:	4619      	mov	r1, r3
 8008af8:	6878      	ldr	r0, [r7, #4]
 8008afa:	f001 f865 	bl	8009bc8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008afe:	2180      	movs	r1, #128	@ 0x80
 8008b00:	6878      	ldr	r0, [r7, #4]
 8008b02:	f001 f861 	bl	8009bc8 <USBD_LL_StallEP>
 8008b06:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008b08:	e040      	b.n	8008b8c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8008b0a:	6839      	ldr	r1, [r7, #0]
 8008b0c:	6878      	ldr	r0, [r7, #4]
 8008b0e:	f000 fc40 	bl	8009392 <USBD_CtlError>
              break;
 8008b12:	e03b      	b.n	8008b8c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008b14:	683b      	ldr	r3, [r7, #0]
 8008b16:	885b      	ldrh	r3, [r3, #2]
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d136      	bne.n	8008b8a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008b1c:	7bbb      	ldrb	r3, [r7, #14]
 8008b1e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d004      	beq.n	8008b30 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008b26:	7bbb      	ldrb	r3, [r7, #14]
 8008b28:	4619      	mov	r1, r3
 8008b2a:	6878      	ldr	r0, [r7, #4]
 8008b2c:	f001 f86b 	bl	8009c06 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8008b30:	6878      	ldr	r0, [r7, #4]
 8008b32:	f000 fceb 	bl	800950c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8008b36:	7bbb      	ldrb	r3, [r7, #14]
 8008b38:	4619      	mov	r1, r3
 8008b3a:	6878      	ldr	r0, [r7, #4]
 8008b3c:	f7ff fde3 	bl	8008706 <USBD_CoreFindEP>
 8008b40:	4603      	mov	r3, r0
 8008b42:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008b44:	7b7b      	ldrb	r3, [r7, #13]
 8008b46:	2bff      	cmp	r3, #255	@ 0xff
 8008b48:	d01f      	beq.n	8008b8a <USBD_StdEPReq+0x1c6>
 8008b4a:	7b7b      	ldrb	r3, [r7, #13]
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d11c      	bne.n	8008b8a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8008b50:	7b7a      	ldrb	r2, [r7, #13]
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8008b58:	7b7a      	ldrb	r2, [r7, #13]
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	32ae      	adds	r2, #174	@ 0xae
 8008b5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b62:	689b      	ldr	r3, [r3, #8]
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d010      	beq.n	8008b8a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008b68:	7b7a      	ldrb	r2, [r7, #13]
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	32ae      	adds	r2, #174	@ 0xae
 8008b6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b72:	689b      	ldr	r3, [r3, #8]
 8008b74:	6839      	ldr	r1, [r7, #0]
 8008b76:	6878      	ldr	r0, [r7, #4]
 8008b78:	4798      	blx	r3
 8008b7a:	4603      	mov	r3, r0
 8008b7c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8008b7e:	e004      	b.n	8008b8a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8008b80:	6839      	ldr	r1, [r7, #0]
 8008b82:	6878      	ldr	r0, [r7, #4]
 8008b84:	f000 fc05 	bl	8009392 <USBD_CtlError>
              break;
 8008b88:	e000      	b.n	8008b8c <USBD_StdEPReq+0x1c8>
              break;
 8008b8a:	bf00      	nop
          }
          break;
 8008b8c:	e0ad      	b.n	8008cea <USBD_StdEPReq+0x326>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008b94:	b2db      	uxtb	r3, r3
 8008b96:	2b02      	cmp	r3, #2
 8008b98:	d002      	beq.n	8008ba0 <USBD_StdEPReq+0x1dc>
 8008b9a:	2b03      	cmp	r3, #3
 8008b9c:	d033      	beq.n	8008c06 <USBD_StdEPReq+0x242>
 8008b9e:	e099      	b.n	8008cd4 <USBD_StdEPReq+0x310>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008ba0:	7bbb      	ldrb	r3, [r7, #14]
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d007      	beq.n	8008bb6 <USBD_StdEPReq+0x1f2>
 8008ba6:	7bbb      	ldrb	r3, [r7, #14]
 8008ba8:	2b80      	cmp	r3, #128	@ 0x80
 8008baa:	d004      	beq.n	8008bb6 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8008bac:	6839      	ldr	r1, [r7, #0]
 8008bae:	6878      	ldr	r0, [r7, #4]
 8008bb0:	f000 fbef 	bl	8009392 <USBD_CtlError>
                break;
 8008bb4:	e093      	b.n	8008cde <USBD_StdEPReq+0x31a>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008bb6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	da0b      	bge.n	8008bd6 <USBD_StdEPReq+0x212>
 8008bbe:	7bbb      	ldrb	r3, [r7, #14]
 8008bc0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008bc4:	4613      	mov	r3, r2
 8008bc6:	009b      	lsls	r3, r3, #2
 8008bc8:	4413      	add	r3, r2
 8008bca:	009b      	lsls	r3, r3, #2
 8008bcc:	3310      	adds	r3, #16
 8008bce:	687a      	ldr	r2, [r7, #4]
 8008bd0:	4413      	add	r3, r2
 8008bd2:	3304      	adds	r3, #4
 8008bd4:	e00b      	b.n	8008bee <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008bd6:	7bbb      	ldrb	r3, [r7, #14]
 8008bd8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008bdc:	4613      	mov	r3, r2
 8008bde:	009b      	lsls	r3, r3, #2
 8008be0:	4413      	add	r3, r2
 8008be2:	009b      	lsls	r3, r3, #2
 8008be4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008be8:	687a      	ldr	r2, [r7, #4]
 8008bea:	4413      	add	r3, r2
 8008bec:	3304      	adds	r3, #4
 8008bee:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008bf0:	68bb      	ldr	r3, [r7, #8]
 8008bf2:	2200      	movs	r2, #0
 8008bf4:	739a      	strb	r2, [r3, #14]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008bf6:	68bb      	ldr	r3, [r7, #8]
 8008bf8:	330e      	adds	r3, #14
 8008bfa:	2202      	movs	r2, #2
 8008bfc:	4619      	mov	r1, r3
 8008bfe:	6878      	ldr	r0, [r7, #4]
 8008c00:	f000 fc44 	bl	800948c <USBD_CtlSendData>
              break;
 8008c04:	e06b      	b.n	8008cde <USBD_StdEPReq+0x31a>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008c06:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	da11      	bge.n	8008c32 <USBD_StdEPReq+0x26e>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008c0e:	7bbb      	ldrb	r3, [r7, #14]
 8008c10:	f003 020f 	and.w	r2, r3, #15
 8008c14:	6879      	ldr	r1, [r7, #4]
 8008c16:	4613      	mov	r3, r2
 8008c18:	009b      	lsls	r3, r3, #2
 8008c1a:	4413      	add	r3, r2
 8008c1c:	009b      	lsls	r3, r3, #2
 8008c1e:	440b      	add	r3, r1
 8008c20:	3323      	adds	r3, #35	@ 0x23
 8008c22:	781b      	ldrb	r3, [r3, #0]
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d117      	bne.n	8008c58 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 8008c28:	6839      	ldr	r1, [r7, #0]
 8008c2a:	6878      	ldr	r0, [r7, #4]
 8008c2c:	f000 fbb1 	bl	8009392 <USBD_CtlError>
                  break;
 8008c30:	e055      	b.n	8008cde <USBD_StdEPReq+0x31a>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008c32:	7bbb      	ldrb	r3, [r7, #14]
 8008c34:	f003 020f 	and.w	r2, r3, #15
 8008c38:	6879      	ldr	r1, [r7, #4]
 8008c3a:	4613      	mov	r3, r2
 8008c3c:	009b      	lsls	r3, r3, #2
 8008c3e:	4413      	add	r3, r2
 8008c40:	009b      	lsls	r3, r3, #2
 8008c42:	440b      	add	r3, r1
 8008c44:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8008c48:	781b      	ldrb	r3, [r3, #0]
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d104      	bne.n	8008c58 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 8008c4e:	6839      	ldr	r1, [r7, #0]
 8008c50:	6878      	ldr	r0, [r7, #4]
 8008c52:	f000 fb9e 	bl	8009392 <USBD_CtlError>
                  break;
 8008c56:	e042      	b.n	8008cde <USBD_StdEPReq+0x31a>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008c58:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	da0b      	bge.n	8008c78 <USBD_StdEPReq+0x2b4>
 8008c60:	7bbb      	ldrb	r3, [r7, #14]
 8008c62:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008c66:	4613      	mov	r3, r2
 8008c68:	009b      	lsls	r3, r3, #2
 8008c6a:	4413      	add	r3, r2
 8008c6c:	009b      	lsls	r3, r3, #2
 8008c6e:	3310      	adds	r3, #16
 8008c70:	687a      	ldr	r2, [r7, #4]
 8008c72:	4413      	add	r3, r2
 8008c74:	3304      	adds	r3, #4
 8008c76:	e00b      	b.n	8008c90 <USBD_StdEPReq+0x2cc>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008c78:	7bbb      	ldrb	r3, [r7, #14]
 8008c7a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008c7e:	4613      	mov	r3, r2
 8008c80:	009b      	lsls	r3, r3, #2
 8008c82:	4413      	add	r3, r2
 8008c84:	009b      	lsls	r3, r3, #2
 8008c86:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008c8a:	687a      	ldr	r2, [r7, #4]
 8008c8c:	4413      	add	r3, r2
 8008c8e:	3304      	adds	r3, #4
 8008c90:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008c92:	7bbb      	ldrb	r3, [r7, #14]
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d002      	beq.n	8008c9e <USBD_StdEPReq+0x2da>
 8008c98:	7bbb      	ldrb	r3, [r7, #14]
 8008c9a:	2b80      	cmp	r3, #128	@ 0x80
 8008c9c:	d103      	bne.n	8008ca6 <USBD_StdEPReq+0x2e2>
              {
                pep->status = 0x0000U;
 8008c9e:	68bb      	ldr	r3, [r7, #8]
 8008ca0:	2200      	movs	r2, #0
 8008ca2:	739a      	strb	r2, [r3, #14]
 8008ca4:	e00e      	b.n	8008cc4 <USBD_StdEPReq+0x300>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008ca6:	7bbb      	ldrb	r3, [r7, #14]
 8008ca8:	4619      	mov	r1, r3
 8008caa:	6878      	ldr	r0, [r7, #4]
 8008cac:	f000 ffca 	bl	8009c44 <USBD_LL_IsStallEP>
 8008cb0:	4603      	mov	r3, r0
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d003      	beq.n	8008cbe <USBD_StdEPReq+0x2fa>
              {
                pep->status = 0x0001U;
 8008cb6:	68bb      	ldr	r3, [r7, #8]
 8008cb8:	2201      	movs	r2, #1
 8008cba:	739a      	strb	r2, [r3, #14]
 8008cbc:	e002      	b.n	8008cc4 <USBD_StdEPReq+0x300>
              }
              else
              {
                pep->status = 0x0000U;
 8008cbe:	68bb      	ldr	r3, [r7, #8]
 8008cc0:	2200      	movs	r2, #0
 8008cc2:	739a      	strb	r2, [r3, #14]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008cc4:	68bb      	ldr	r3, [r7, #8]
 8008cc6:	330e      	adds	r3, #14
 8008cc8:	2202      	movs	r2, #2
 8008cca:	4619      	mov	r1, r3
 8008ccc:	6878      	ldr	r0, [r7, #4]
 8008cce:	f000 fbdd 	bl	800948c <USBD_CtlSendData>
              break;
 8008cd2:	e004      	b.n	8008cde <USBD_StdEPReq+0x31a>

            default:
              USBD_CtlError(pdev, req);
 8008cd4:	6839      	ldr	r1, [r7, #0]
 8008cd6:	6878      	ldr	r0, [r7, #4]
 8008cd8:	f000 fb5b 	bl	8009392 <USBD_CtlError>
              break;
 8008cdc:	bf00      	nop
          }
          break;
 8008cde:	e004      	b.n	8008cea <USBD_StdEPReq+0x326>

        default:
          USBD_CtlError(pdev, req);
 8008ce0:	6839      	ldr	r1, [r7, #0]
 8008ce2:	6878      	ldr	r0, [r7, #4]
 8008ce4:	f000 fb55 	bl	8009392 <USBD_CtlError>
          break;
 8008ce8:	bf00      	nop
      }
      break;
 8008cea:	e005      	b.n	8008cf8 <USBD_StdEPReq+0x334>

    default:
      USBD_CtlError(pdev, req);
 8008cec:	6839      	ldr	r1, [r7, #0]
 8008cee:	6878      	ldr	r0, [r7, #4]
 8008cf0:	f000 fb4f 	bl	8009392 <USBD_CtlError>
      break;
 8008cf4:	e000      	b.n	8008cf8 <USBD_StdEPReq+0x334>
      break;
 8008cf6:	bf00      	nop
  }

  return ret;
 8008cf8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cfa:	4618      	mov	r0, r3
 8008cfc:	3710      	adds	r7, #16
 8008cfe:	46bd      	mov	sp, r7
 8008d00:	bd80      	pop	{r7, pc}
	...

08008d04 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008d04:	b580      	push	{r7, lr}
 8008d06:	b084      	sub	sp, #16
 8008d08:	af00      	add	r7, sp, #0
 8008d0a:	6078      	str	r0, [r7, #4]
 8008d0c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008d0e:	2300      	movs	r3, #0
 8008d10:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008d12:	2300      	movs	r3, #0
 8008d14:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008d16:	2300      	movs	r3, #0
 8008d18:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008d1a:	683b      	ldr	r3, [r7, #0]
 8008d1c:	885b      	ldrh	r3, [r3, #2]
 8008d1e:	0a1b      	lsrs	r3, r3, #8
 8008d20:	b29b      	uxth	r3, r3
 8008d22:	3b01      	subs	r3, #1
 8008d24:	2b06      	cmp	r3, #6
 8008d26:	f200 8128 	bhi.w	8008f7a <USBD_GetDescriptor+0x276>
 8008d2a:	a201      	add	r2, pc, #4	@ (adr r2, 8008d30 <USBD_GetDescriptor+0x2c>)
 8008d2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d30:	08008d4d 	.word	0x08008d4d
 8008d34:	08008d65 	.word	0x08008d65
 8008d38:	08008da5 	.word	0x08008da5
 8008d3c:	08008f7b 	.word	0x08008f7b
 8008d40:	08008f7b 	.word	0x08008f7b
 8008d44:	08008f1b 	.word	0x08008f1b
 8008d48:	08008f47 	.word	0x08008f47
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	687a      	ldr	r2, [r7, #4]
 8008d56:	7c12      	ldrb	r2, [r2, #16]
 8008d58:	f107 0108 	add.w	r1, r7, #8
 8008d5c:	4610      	mov	r0, r2
 8008d5e:	4798      	blx	r3
 8008d60:	60f8      	str	r0, [r7, #12]
      break;
 8008d62:	e112      	b.n	8008f8a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	7c1b      	ldrb	r3, [r3, #16]
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d10d      	bne.n	8008d88 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008d72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d74:	f107 0208 	add.w	r2, r7, #8
 8008d78:	4610      	mov	r0, r2
 8008d7a:	4798      	blx	r3
 8008d7c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	3301      	adds	r3, #1
 8008d82:	2202      	movs	r2, #2
 8008d84:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008d86:	e100      	b.n	8008f8a <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008d8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d90:	f107 0208 	add.w	r2, r7, #8
 8008d94:	4610      	mov	r0, r2
 8008d96:	4798      	blx	r3
 8008d98:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	3301      	adds	r3, #1
 8008d9e:	2202      	movs	r2, #2
 8008da0:	701a      	strb	r2, [r3, #0]
      break;
 8008da2:	e0f2      	b.n	8008f8a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008da4:	683b      	ldr	r3, [r7, #0]
 8008da6:	885b      	ldrh	r3, [r3, #2]
 8008da8:	b2db      	uxtb	r3, r3
 8008daa:	2b05      	cmp	r3, #5
 8008dac:	f200 80ac 	bhi.w	8008f08 <USBD_GetDescriptor+0x204>
 8008db0:	a201      	add	r2, pc, #4	@ (adr r2, 8008db8 <USBD_GetDescriptor+0xb4>)
 8008db2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008db6:	bf00      	nop
 8008db8:	08008dd1 	.word	0x08008dd1
 8008dbc:	08008e05 	.word	0x08008e05
 8008dc0:	08008e39 	.word	0x08008e39
 8008dc4:	08008e6d 	.word	0x08008e6d
 8008dc8:	08008ea1 	.word	0x08008ea1
 8008dcc:	08008ed5 	.word	0x08008ed5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008dd6:	685b      	ldr	r3, [r3, #4]
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d00b      	beq.n	8008df4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008de2:	685b      	ldr	r3, [r3, #4]
 8008de4:	687a      	ldr	r2, [r7, #4]
 8008de6:	7c12      	ldrb	r2, [r2, #16]
 8008de8:	f107 0108 	add.w	r1, r7, #8
 8008dec:	4610      	mov	r0, r2
 8008dee:	4798      	blx	r3
 8008df0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008df2:	e091      	b.n	8008f18 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008df4:	6839      	ldr	r1, [r7, #0]
 8008df6:	6878      	ldr	r0, [r7, #4]
 8008df8:	f000 facb 	bl	8009392 <USBD_CtlError>
            err++;
 8008dfc:	7afb      	ldrb	r3, [r7, #11]
 8008dfe:	3301      	adds	r3, #1
 8008e00:	72fb      	strb	r3, [r7, #11]
          break;
 8008e02:	e089      	b.n	8008f18 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008e0a:	689b      	ldr	r3, [r3, #8]
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d00b      	beq.n	8008e28 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008e16:	689b      	ldr	r3, [r3, #8]
 8008e18:	687a      	ldr	r2, [r7, #4]
 8008e1a:	7c12      	ldrb	r2, [r2, #16]
 8008e1c:	f107 0108 	add.w	r1, r7, #8
 8008e20:	4610      	mov	r0, r2
 8008e22:	4798      	blx	r3
 8008e24:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008e26:	e077      	b.n	8008f18 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008e28:	6839      	ldr	r1, [r7, #0]
 8008e2a:	6878      	ldr	r0, [r7, #4]
 8008e2c:	f000 fab1 	bl	8009392 <USBD_CtlError>
            err++;
 8008e30:	7afb      	ldrb	r3, [r7, #11]
 8008e32:	3301      	adds	r3, #1
 8008e34:	72fb      	strb	r3, [r7, #11]
          break;
 8008e36:	e06f      	b.n	8008f18 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008e3e:	68db      	ldr	r3, [r3, #12]
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d00b      	beq.n	8008e5c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008e4a:	68db      	ldr	r3, [r3, #12]
 8008e4c:	687a      	ldr	r2, [r7, #4]
 8008e4e:	7c12      	ldrb	r2, [r2, #16]
 8008e50:	f107 0108 	add.w	r1, r7, #8
 8008e54:	4610      	mov	r0, r2
 8008e56:	4798      	blx	r3
 8008e58:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008e5a:	e05d      	b.n	8008f18 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008e5c:	6839      	ldr	r1, [r7, #0]
 8008e5e:	6878      	ldr	r0, [r7, #4]
 8008e60:	f000 fa97 	bl	8009392 <USBD_CtlError>
            err++;
 8008e64:	7afb      	ldrb	r3, [r7, #11]
 8008e66:	3301      	adds	r3, #1
 8008e68:	72fb      	strb	r3, [r7, #11]
          break;
 8008e6a:	e055      	b.n	8008f18 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008e72:	691b      	ldr	r3, [r3, #16]
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d00b      	beq.n	8008e90 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008e7e:	691b      	ldr	r3, [r3, #16]
 8008e80:	687a      	ldr	r2, [r7, #4]
 8008e82:	7c12      	ldrb	r2, [r2, #16]
 8008e84:	f107 0108 	add.w	r1, r7, #8
 8008e88:	4610      	mov	r0, r2
 8008e8a:	4798      	blx	r3
 8008e8c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008e8e:	e043      	b.n	8008f18 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008e90:	6839      	ldr	r1, [r7, #0]
 8008e92:	6878      	ldr	r0, [r7, #4]
 8008e94:	f000 fa7d 	bl	8009392 <USBD_CtlError>
            err++;
 8008e98:	7afb      	ldrb	r3, [r7, #11]
 8008e9a:	3301      	adds	r3, #1
 8008e9c:	72fb      	strb	r3, [r7, #11]
          break;
 8008e9e:	e03b      	b.n	8008f18 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008ea6:	695b      	ldr	r3, [r3, #20]
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d00b      	beq.n	8008ec4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008eb2:	695b      	ldr	r3, [r3, #20]
 8008eb4:	687a      	ldr	r2, [r7, #4]
 8008eb6:	7c12      	ldrb	r2, [r2, #16]
 8008eb8:	f107 0108 	add.w	r1, r7, #8
 8008ebc:	4610      	mov	r0, r2
 8008ebe:	4798      	blx	r3
 8008ec0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008ec2:	e029      	b.n	8008f18 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008ec4:	6839      	ldr	r1, [r7, #0]
 8008ec6:	6878      	ldr	r0, [r7, #4]
 8008ec8:	f000 fa63 	bl	8009392 <USBD_CtlError>
            err++;
 8008ecc:	7afb      	ldrb	r3, [r7, #11]
 8008ece:	3301      	adds	r3, #1
 8008ed0:	72fb      	strb	r3, [r7, #11]
          break;
 8008ed2:	e021      	b.n	8008f18 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008eda:	699b      	ldr	r3, [r3, #24]
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d00b      	beq.n	8008ef8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008ee6:	699b      	ldr	r3, [r3, #24]
 8008ee8:	687a      	ldr	r2, [r7, #4]
 8008eea:	7c12      	ldrb	r2, [r2, #16]
 8008eec:	f107 0108 	add.w	r1, r7, #8
 8008ef0:	4610      	mov	r0, r2
 8008ef2:	4798      	blx	r3
 8008ef4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008ef6:	e00f      	b.n	8008f18 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008ef8:	6839      	ldr	r1, [r7, #0]
 8008efa:	6878      	ldr	r0, [r7, #4]
 8008efc:	f000 fa49 	bl	8009392 <USBD_CtlError>
            err++;
 8008f00:	7afb      	ldrb	r3, [r7, #11]
 8008f02:	3301      	adds	r3, #1
 8008f04:	72fb      	strb	r3, [r7, #11]
          break;
 8008f06:	e007      	b.n	8008f18 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8008f08:	6839      	ldr	r1, [r7, #0]
 8008f0a:	6878      	ldr	r0, [r7, #4]
 8008f0c:	f000 fa41 	bl	8009392 <USBD_CtlError>
          err++;
 8008f10:	7afb      	ldrb	r3, [r7, #11]
 8008f12:	3301      	adds	r3, #1
 8008f14:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8008f16:	bf00      	nop
      }
      break;
 8008f18:	e037      	b.n	8008f8a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	7c1b      	ldrb	r3, [r3, #16]
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d109      	bne.n	8008f36 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008f28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008f2a:	f107 0208 	add.w	r2, r7, #8
 8008f2e:	4610      	mov	r0, r2
 8008f30:	4798      	blx	r3
 8008f32:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008f34:	e029      	b.n	8008f8a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008f36:	6839      	ldr	r1, [r7, #0]
 8008f38:	6878      	ldr	r0, [r7, #4]
 8008f3a:	f000 fa2a 	bl	8009392 <USBD_CtlError>
        err++;
 8008f3e:	7afb      	ldrb	r3, [r7, #11]
 8008f40:	3301      	adds	r3, #1
 8008f42:	72fb      	strb	r3, [r7, #11]
      break;
 8008f44:	e021      	b.n	8008f8a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	7c1b      	ldrb	r3, [r3, #16]
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d10d      	bne.n	8008f6a <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008f54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008f56:	f107 0208 	add.w	r2, r7, #8
 8008f5a:	4610      	mov	r0, r2
 8008f5c:	4798      	blx	r3
 8008f5e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	3301      	adds	r3, #1
 8008f64:	2207      	movs	r2, #7
 8008f66:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008f68:	e00f      	b.n	8008f8a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008f6a:	6839      	ldr	r1, [r7, #0]
 8008f6c:	6878      	ldr	r0, [r7, #4]
 8008f6e:	f000 fa10 	bl	8009392 <USBD_CtlError>
        err++;
 8008f72:	7afb      	ldrb	r3, [r7, #11]
 8008f74:	3301      	adds	r3, #1
 8008f76:	72fb      	strb	r3, [r7, #11]
      break;
 8008f78:	e007      	b.n	8008f8a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8008f7a:	6839      	ldr	r1, [r7, #0]
 8008f7c:	6878      	ldr	r0, [r7, #4]
 8008f7e:	f000 fa08 	bl	8009392 <USBD_CtlError>
      err++;
 8008f82:	7afb      	ldrb	r3, [r7, #11]
 8008f84:	3301      	adds	r3, #1
 8008f86:	72fb      	strb	r3, [r7, #11]
      break;
 8008f88:	bf00      	nop
  }

  if (err != 0U)
 8008f8a:	7afb      	ldrb	r3, [r7, #11]
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d11e      	bne.n	8008fce <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8008f90:	683b      	ldr	r3, [r7, #0]
 8008f92:	88db      	ldrh	r3, [r3, #6]
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d016      	beq.n	8008fc6 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8008f98:	893b      	ldrh	r3, [r7, #8]
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d00e      	beq.n	8008fbc <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8008f9e:	683b      	ldr	r3, [r7, #0]
 8008fa0:	88da      	ldrh	r2, [r3, #6]
 8008fa2:	893b      	ldrh	r3, [r7, #8]
 8008fa4:	4293      	cmp	r3, r2
 8008fa6:	bf28      	it	cs
 8008fa8:	4613      	movcs	r3, r2
 8008faa:	b29b      	uxth	r3, r3
 8008fac:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008fae:	893b      	ldrh	r3, [r7, #8]
 8008fb0:	461a      	mov	r2, r3
 8008fb2:	68f9      	ldr	r1, [r7, #12]
 8008fb4:	6878      	ldr	r0, [r7, #4]
 8008fb6:	f000 fa69 	bl	800948c <USBD_CtlSendData>
 8008fba:	e009      	b.n	8008fd0 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008fbc:	6839      	ldr	r1, [r7, #0]
 8008fbe:	6878      	ldr	r0, [r7, #4]
 8008fc0:	f000 f9e7 	bl	8009392 <USBD_CtlError>
 8008fc4:	e004      	b.n	8008fd0 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8008fc6:	6878      	ldr	r0, [r7, #4]
 8008fc8:	f000 faa0 	bl	800950c <USBD_CtlSendStatus>
 8008fcc:	e000      	b.n	8008fd0 <USBD_GetDescriptor+0x2cc>
    return;
 8008fce:	bf00      	nop
  }
}
 8008fd0:	3710      	adds	r7, #16
 8008fd2:	46bd      	mov	sp, r7
 8008fd4:	bd80      	pop	{r7, pc}
 8008fd6:	bf00      	nop

08008fd8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008fd8:	b580      	push	{r7, lr}
 8008fda:	b084      	sub	sp, #16
 8008fdc:	af00      	add	r7, sp, #0
 8008fde:	6078      	str	r0, [r7, #4]
 8008fe0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008fe2:	683b      	ldr	r3, [r7, #0]
 8008fe4:	889b      	ldrh	r3, [r3, #4]
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d131      	bne.n	800904e <USBD_SetAddress+0x76>
 8008fea:	683b      	ldr	r3, [r7, #0]
 8008fec:	88db      	ldrh	r3, [r3, #6]
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d12d      	bne.n	800904e <USBD_SetAddress+0x76>
 8008ff2:	683b      	ldr	r3, [r7, #0]
 8008ff4:	885b      	ldrh	r3, [r3, #2]
 8008ff6:	2b7f      	cmp	r3, #127	@ 0x7f
 8008ff8:	d829      	bhi.n	800904e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008ffa:	683b      	ldr	r3, [r7, #0]
 8008ffc:	885b      	ldrh	r3, [r3, #2]
 8008ffe:	b2db      	uxtb	r3, r3
 8009000:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009004:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800900c:	b2db      	uxtb	r3, r3
 800900e:	2b03      	cmp	r3, #3
 8009010:	d104      	bne.n	800901c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8009012:	6839      	ldr	r1, [r7, #0]
 8009014:	6878      	ldr	r0, [r7, #4]
 8009016:	f000 f9bc 	bl	8009392 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800901a:	e01d      	b.n	8009058 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	7bfa      	ldrb	r2, [r7, #15]
 8009020:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009024:	7bfb      	ldrb	r3, [r7, #15]
 8009026:	4619      	mov	r1, r3
 8009028:	6878      	ldr	r0, [r7, #4]
 800902a:	f000 fe37 	bl	8009c9c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800902e:	6878      	ldr	r0, [r7, #4]
 8009030:	f000 fa6c 	bl	800950c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009034:	7bfb      	ldrb	r3, [r7, #15]
 8009036:	2b00      	cmp	r3, #0
 8009038:	d004      	beq.n	8009044 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	2202      	movs	r2, #2
 800903e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009042:	e009      	b.n	8009058 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	2201      	movs	r2, #1
 8009048:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800904c:	e004      	b.n	8009058 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800904e:	6839      	ldr	r1, [r7, #0]
 8009050:	6878      	ldr	r0, [r7, #4]
 8009052:	f000 f99e 	bl	8009392 <USBD_CtlError>
  }
}
 8009056:	bf00      	nop
 8009058:	bf00      	nop
 800905a:	3710      	adds	r7, #16
 800905c:	46bd      	mov	sp, r7
 800905e:	bd80      	pop	{r7, pc}

08009060 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009060:	b580      	push	{r7, lr}
 8009062:	b084      	sub	sp, #16
 8009064:	af00      	add	r7, sp, #0
 8009066:	6078      	str	r0, [r7, #4]
 8009068:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800906a:	2300      	movs	r3, #0
 800906c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800906e:	683b      	ldr	r3, [r7, #0]
 8009070:	885b      	ldrh	r3, [r3, #2]
 8009072:	b2da      	uxtb	r2, r3
 8009074:	4b4e      	ldr	r3, [pc, #312]	@ (80091b0 <USBD_SetConfig+0x150>)
 8009076:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009078:	4b4d      	ldr	r3, [pc, #308]	@ (80091b0 <USBD_SetConfig+0x150>)
 800907a:	781b      	ldrb	r3, [r3, #0]
 800907c:	2b01      	cmp	r3, #1
 800907e:	d905      	bls.n	800908c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8009080:	6839      	ldr	r1, [r7, #0]
 8009082:	6878      	ldr	r0, [r7, #4]
 8009084:	f000 f985 	bl	8009392 <USBD_CtlError>
    return USBD_FAIL;
 8009088:	2303      	movs	r3, #3
 800908a:	e08c      	b.n	80091a6 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009092:	b2db      	uxtb	r3, r3
 8009094:	2b02      	cmp	r3, #2
 8009096:	d002      	beq.n	800909e <USBD_SetConfig+0x3e>
 8009098:	2b03      	cmp	r3, #3
 800909a:	d029      	beq.n	80090f0 <USBD_SetConfig+0x90>
 800909c:	e075      	b.n	800918a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800909e:	4b44      	ldr	r3, [pc, #272]	@ (80091b0 <USBD_SetConfig+0x150>)
 80090a0:	781b      	ldrb	r3, [r3, #0]
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d020      	beq.n	80090e8 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80090a6:	4b42      	ldr	r3, [pc, #264]	@ (80091b0 <USBD_SetConfig+0x150>)
 80090a8:	781b      	ldrb	r3, [r3, #0]
 80090aa:	461a      	mov	r2, r3
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80090b0:	4b3f      	ldr	r3, [pc, #252]	@ (80091b0 <USBD_SetConfig+0x150>)
 80090b2:	781b      	ldrb	r3, [r3, #0]
 80090b4:	4619      	mov	r1, r3
 80090b6:	6878      	ldr	r0, [r7, #4]
 80090b8:	f7fe ffcd 	bl	8008056 <USBD_SetClassConfig>
 80090bc:	4603      	mov	r3, r0
 80090be:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80090c0:	7bfb      	ldrb	r3, [r7, #15]
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d008      	beq.n	80090d8 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80090c6:	6839      	ldr	r1, [r7, #0]
 80090c8:	6878      	ldr	r0, [r7, #4]
 80090ca:	f000 f962 	bl	8009392 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	2202      	movs	r2, #2
 80090d2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80090d6:	e065      	b.n	80091a4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80090d8:	6878      	ldr	r0, [r7, #4]
 80090da:	f000 fa17 	bl	800950c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	2203      	movs	r2, #3
 80090e2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80090e6:	e05d      	b.n	80091a4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80090e8:	6878      	ldr	r0, [r7, #4]
 80090ea:	f000 fa0f 	bl	800950c <USBD_CtlSendStatus>
      break;
 80090ee:	e059      	b.n	80091a4 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80090f0:	4b2f      	ldr	r3, [pc, #188]	@ (80091b0 <USBD_SetConfig+0x150>)
 80090f2:	781b      	ldrb	r3, [r3, #0]
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d112      	bne.n	800911e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	2202      	movs	r2, #2
 80090fc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8009100:	4b2b      	ldr	r3, [pc, #172]	@ (80091b0 <USBD_SetConfig+0x150>)
 8009102:	781b      	ldrb	r3, [r3, #0]
 8009104:	461a      	mov	r2, r3
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800910a:	4b29      	ldr	r3, [pc, #164]	@ (80091b0 <USBD_SetConfig+0x150>)
 800910c:	781b      	ldrb	r3, [r3, #0]
 800910e:	4619      	mov	r1, r3
 8009110:	6878      	ldr	r0, [r7, #4]
 8009112:	f7fe ffbc 	bl	800808e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8009116:	6878      	ldr	r0, [r7, #4]
 8009118:	f000 f9f8 	bl	800950c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800911c:	e042      	b.n	80091a4 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800911e:	4b24      	ldr	r3, [pc, #144]	@ (80091b0 <USBD_SetConfig+0x150>)
 8009120:	781b      	ldrb	r3, [r3, #0]
 8009122:	461a      	mov	r2, r3
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	685b      	ldr	r3, [r3, #4]
 8009128:	429a      	cmp	r2, r3
 800912a:	d02a      	beq.n	8009182 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	685b      	ldr	r3, [r3, #4]
 8009130:	b2db      	uxtb	r3, r3
 8009132:	4619      	mov	r1, r3
 8009134:	6878      	ldr	r0, [r7, #4]
 8009136:	f7fe ffaa 	bl	800808e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800913a:	4b1d      	ldr	r3, [pc, #116]	@ (80091b0 <USBD_SetConfig+0x150>)
 800913c:	781b      	ldrb	r3, [r3, #0]
 800913e:	461a      	mov	r2, r3
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009144:	4b1a      	ldr	r3, [pc, #104]	@ (80091b0 <USBD_SetConfig+0x150>)
 8009146:	781b      	ldrb	r3, [r3, #0]
 8009148:	4619      	mov	r1, r3
 800914a:	6878      	ldr	r0, [r7, #4]
 800914c:	f7fe ff83 	bl	8008056 <USBD_SetClassConfig>
 8009150:	4603      	mov	r3, r0
 8009152:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8009154:	7bfb      	ldrb	r3, [r7, #15]
 8009156:	2b00      	cmp	r3, #0
 8009158:	d00f      	beq.n	800917a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800915a:	6839      	ldr	r1, [r7, #0]
 800915c:	6878      	ldr	r0, [r7, #4]
 800915e:	f000 f918 	bl	8009392 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	685b      	ldr	r3, [r3, #4]
 8009166:	b2db      	uxtb	r3, r3
 8009168:	4619      	mov	r1, r3
 800916a:	6878      	ldr	r0, [r7, #4]
 800916c:	f7fe ff8f 	bl	800808e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	2202      	movs	r2, #2
 8009174:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8009178:	e014      	b.n	80091a4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800917a:	6878      	ldr	r0, [r7, #4]
 800917c:	f000 f9c6 	bl	800950c <USBD_CtlSendStatus>
      break;
 8009180:	e010      	b.n	80091a4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009182:	6878      	ldr	r0, [r7, #4]
 8009184:	f000 f9c2 	bl	800950c <USBD_CtlSendStatus>
      break;
 8009188:	e00c      	b.n	80091a4 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800918a:	6839      	ldr	r1, [r7, #0]
 800918c:	6878      	ldr	r0, [r7, #4]
 800918e:	f000 f900 	bl	8009392 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009192:	4b07      	ldr	r3, [pc, #28]	@ (80091b0 <USBD_SetConfig+0x150>)
 8009194:	781b      	ldrb	r3, [r3, #0]
 8009196:	4619      	mov	r1, r3
 8009198:	6878      	ldr	r0, [r7, #4]
 800919a:	f7fe ff78 	bl	800808e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800919e:	2303      	movs	r3, #3
 80091a0:	73fb      	strb	r3, [r7, #15]
      break;
 80091a2:	bf00      	nop
  }

  return ret;
 80091a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80091a6:	4618      	mov	r0, r3
 80091a8:	3710      	adds	r7, #16
 80091aa:	46bd      	mov	sp, r7
 80091ac:	bd80      	pop	{r7, pc}
 80091ae:	bf00      	nop
 80091b0:	200004dc 	.word	0x200004dc

080091b4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80091b4:	b580      	push	{r7, lr}
 80091b6:	b082      	sub	sp, #8
 80091b8:	af00      	add	r7, sp, #0
 80091ba:	6078      	str	r0, [r7, #4]
 80091bc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80091be:	683b      	ldr	r3, [r7, #0]
 80091c0:	88db      	ldrh	r3, [r3, #6]
 80091c2:	2b01      	cmp	r3, #1
 80091c4:	d004      	beq.n	80091d0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80091c6:	6839      	ldr	r1, [r7, #0]
 80091c8:	6878      	ldr	r0, [r7, #4]
 80091ca:	f000 f8e2 	bl	8009392 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80091ce:	e023      	b.n	8009218 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80091d6:	b2db      	uxtb	r3, r3
 80091d8:	2b02      	cmp	r3, #2
 80091da:	dc02      	bgt.n	80091e2 <USBD_GetConfig+0x2e>
 80091dc:	2b00      	cmp	r3, #0
 80091de:	dc03      	bgt.n	80091e8 <USBD_GetConfig+0x34>
 80091e0:	e015      	b.n	800920e <USBD_GetConfig+0x5a>
 80091e2:	2b03      	cmp	r3, #3
 80091e4:	d00b      	beq.n	80091fe <USBD_GetConfig+0x4a>
 80091e6:	e012      	b.n	800920e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	2200      	movs	r2, #0
 80091ec:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	3308      	adds	r3, #8
 80091f2:	2201      	movs	r2, #1
 80091f4:	4619      	mov	r1, r3
 80091f6:	6878      	ldr	r0, [r7, #4]
 80091f8:	f000 f948 	bl	800948c <USBD_CtlSendData>
        break;
 80091fc:	e00c      	b.n	8009218 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	3304      	adds	r3, #4
 8009202:	2201      	movs	r2, #1
 8009204:	4619      	mov	r1, r3
 8009206:	6878      	ldr	r0, [r7, #4]
 8009208:	f000 f940 	bl	800948c <USBD_CtlSendData>
        break;
 800920c:	e004      	b.n	8009218 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800920e:	6839      	ldr	r1, [r7, #0]
 8009210:	6878      	ldr	r0, [r7, #4]
 8009212:	f000 f8be 	bl	8009392 <USBD_CtlError>
        break;
 8009216:	bf00      	nop
}
 8009218:	bf00      	nop
 800921a:	3708      	adds	r7, #8
 800921c:	46bd      	mov	sp, r7
 800921e:	bd80      	pop	{r7, pc}

08009220 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009220:	b580      	push	{r7, lr}
 8009222:	b082      	sub	sp, #8
 8009224:	af00      	add	r7, sp, #0
 8009226:	6078      	str	r0, [r7, #4]
 8009228:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009230:	b2db      	uxtb	r3, r3
 8009232:	3b01      	subs	r3, #1
 8009234:	2b02      	cmp	r3, #2
 8009236:	d81e      	bhi.n	8009276 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009238:	683b      	ldr	r3, [r7, #0]
 800923a:	88db      	ldrh	r3, [r3, #6]
 800923c:	2b02      	cmp	r3, #2
 800923e:	d004      	beq.n	800924a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8009240:	6839      	ldr	r1, [r7, #0]
 8009242:	6878      	ldr	r0, [r7, #4]
 8009244:	f000 f8a5 	bl	8009392 <USBD_CtlError>
        break;
 8009248:	e01a      	b.n	8009280 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	2201      	movs	r2, #1
 800924e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8009256:	2b00      	cmp	r3, #0
 8009258:	d005      	beq.n	8009266 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	68db      	ldr	r3, [r3, #12]
 800925e:	f043 0202 	orr.w	r2, r3, #2
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	330c      	adds	r3, #12
 800926a:	2202      	movs	r2, #2
 800926c:	4619      	mov	r1, r3
 800926e:	6878      	ldr	r0, [r7, #4]
 8009270:	f000 f90c 	bl	800948c <USBD_CtlSendData>
      break;
 8009274:	e004      	b.n	8009280 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8009276:	6839      	ldr	r1, [r7, #0]
 8009278:	6878      	ldr	r0, [r7, #4]
 800927a:	f000 f88a 	bl	8009392 <USBD_CtlError>
      break;
 800927e:	bf00      	nop
  }
}
 8009280:	bf00      	nop
 8009282:	3708      	adds	r7, #8
 8009284:	46bd      	mov	sp, r7
 8009286:	bd80      	pop	{r7, pc}

08009288 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009288:	b580      	push	{r7, lr}
 800928a:	b082      	sub	sp, #8
 800928c:	af00      	add	r7, sp, #0
 800928e:	6078      	str	r0, [r7, #4]
 8009290:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009292:	683b      	ldr	r3, [r7, #0]
 8009294:	885b      	ldrh	r3, [r3, #2]
 8009296:	2b01      	cmp	r3, #1
 8009298:	d107      	bne.n	80092aa <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	2201      	movs	r2, #1
 800929e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80092a2:	6878      	ldr	r0, [r7, #4]
 80092a4:	f000 f932 	bl	800950c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80092a8:	e013      	b.n	80092d2 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80092aa:	683b      	ldr	r3, [r7, #0]
 80092ac:	885b      	ldrh	r3, [r3, #2]
 80092ae:	2b02      	cmp	r3, #2
 80092b0:	d10b      	bne.n	80092ca <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 80092b2:	683b      	ldr	r3, [r7, #0]
 80092b4:	889b      	ldrh	r3, [r3, #4]
 80092b6:	0a1b      	lsrs	r3, r3, #8
 80092b8:	b29b      	uxth	r3, r3
 80092ba:	b2da      	uxtb	r2, r3
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80092c2:	6878      	ldr	r0, [r7, #4]
 80092c4:	f000 f922 	bl	800950c <USBD_CtlSendStatus>
}
 80092c8:	e003      	b.n	80092d2 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80092ca:	6839      	ldr	r1, [r7, #0]
 80092cc:	6878      	ldr	r0, [r7, #4]
 80092ce:	f000 f860 	bl	8009392 <USBD_CtlError>
}
 80092d2:	bf00      	nop
 80092d4:	3708      	adds	r7, #8
 80092d6:	46bd      	mov	sp, r7
 80092d8:	bd80      	pop	{r7, pc}

080092da <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80092da:	b580      	push	{r7, lr}
 80092dc:	b082      	sub	sp, #8
 80092de:	af00      	add	r7, sp, #0
 80092e0:	6078      	str	r0, [r7, #4]
 80092e2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80092ea:	b2db      	uxtb	r3, r3
 80092ec:	3b01      	subs	r3, #1
 80092ee:	2b02      	cmp	r3, #2
 80092f0:	d80b      	bhi.n	800930a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80092f2:	683b      	ldr	r3, [r7, #0]
 80092f4:	885b      	ldrh	r3, [r3, #2]
 80092f6:	2b01      	cmp	r3, #1
 80092f8:	d10c      	bne.n	8009314 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	2200      	movs	r2, #0
 80092fe:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8009302:	6878      	ldr	r0, [r7, #4]
 8009304:	f000 f902 	bl	800950c <USBD_CtlSendStatus>
      }
      break;
 8009308:	e004      	b.n	8009314 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800930a:	6839      	ldr	r1, [r7, #0]
 800930c:	6878      	ldr	r0, [r7, #4]
 800930e:	f000 f840 	bl	8009392 <USBD_CtlError>
      break;
 8009312:	e000      	b.n	8009316 <USBD_ClrFeature+0x3c>
      break;
 8009314:	bf00      	nop
  }
}
 8009316:	bf00      	nop
 8009318:	3708      	adds	r7, #8
 800931a:	46bd      	mov	sp, r7
 800931c:	bd80      	pop	{r7, pc}

0800931e <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800931e:	b580      	push	{r7, lr}
 8009320:	b084      	sub	sp, #16
 8009322:	af00      	add	r7, sp, #0
 8009324:	6078      	str	r0, [r7, #4]
 8009326:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8009328:	683b      	ldr	r3, [r7, #0]
 800932a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	781a      	ldrb	r2, [r3, #0]
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	3301      	adds	r3, #1
 8009338:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	781a      	ldrb	r2, [r3, #0]
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	3301      	adds	r3, #1
 8009346:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8009348:	68f8      	ldr	r0, [r7, #12]
 800934a:	f7ff fa3d 	bl	80087c8 <SWAPBYTE>
 800934e:	4603      	mov	r3, r0
 8009350:	461a      	mov	r2, r3
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	3301      	adds	r3, #1
 800935a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	3301      	adds	r3, #1
 8009360:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8009362:	68f8      	ldr	r0, [r7, #12]
 8009364:	f7ff fa30 	bl	80087c8 <SWAPBYTE>
 8009368:	4603      	mov	r3, r0
 800936a:	461a      	mov	r2, r3
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	3301      	adds	r3, #1
 8009374:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	3301      	adds	r3, #1
 800937a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800937c:	68f8      	ldr	r0, [r7, #12]
 800937e:	f7ff fa23 	bl	80087c8 <SWAPBYTE>
 8009382:	4603      	mov	r3, r0
 8009384:	461a      	mov	r2, r3
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	80da      	strh	r2, [r3, #6]
}
 800938a:	bf00      	nop
 800938c:	3710      	adds	r7, #16
 800938e:	46bd      	mov	sp, r7
 8009390:	bd80      	pop	{r7, pc}

08009392 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009392:	b580      	push	{r7, lr}
 8009394:	b082      	sub	sp, #8
 8009396:	af00      	add	r7, sp, #0
 8009398:	6078      	str	r0, [r7, #4]
 800939a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800939c:	2180      	movs	r1, #128	@ 0x80
 800939e:	6878      	ldr	r0, [r7, #4]
 80093a0:	f000 fc12 	bl	8009bc8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80093a4:	2100      	movs	r1, #0
 80093a6:	6878      	ldr	r0, [r7, #4]
 80093a8:	f000 fc0e 	bl	8009bc8 <USBD_LL_StallEP>
}
 80093ac:	bf00      	nop
 80093ae:	3708      	adds	r7, #8
 80093b0:	46bd      	mov	sp, r7
 80093b2:	bd80      	pop	{r7, pc}

080093b4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80093b4:	b580      	push	{r7, lr}
 80093b6:	b086      	sub	sp, #24
 80093b8:	af00      	add	r7, sp, #0
 80093ba:	60f8      	str	r0, [r7, #12]
 80093bc:	60b9      	str	r1, [r7, #8]
 80093be:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80093c0:	2300      	movs	r3, #0
 80093c2:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d042      	beq.n	8009450 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 80093ce:	6938      	ldr	r0, [r7, #16]
 80093d0:	f000 f842 	bl	8009458 <USBD_GetLen>
 80093d4:	4603      	mov	r3, r0
 80093d6:	3301      	adds	r3, #1
 80093d8:	005b      	lsls	r3, r3, #1
 80093da:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80093de:	d808      	bhi.n	80093f2 <USBD_GetString+0x3e>
 80093e0:	6938      	ldr	r0, [r7, #16]
 80093e2:	f000 f839 	bl	8009458 <USBD_GetLen>
 80093e6:	4603      	mov	r3, r0
 80093e8:	3301      	adds	r3, #1
 80093ea:	b29b      	uxth	r3, r3
 80093ec:	005b      	lsls	r3, r3, #1
 80093ee:	b29a      	uxth	r2, r3
 80093f0:	e001      	b.n	80093f6 <USBD_GetString+0x42>
 80093f2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80093fa:	7dfb      	ldrb	r3, [r7, #23]
 80093fc:	68ba      	ldr	r2, [r7, #8]
 80093fe:	4413      	add	r3, r2
 8009400:	687a      	ldr	r2, [r7, #4]
 8009402:	7812      	ldrb	r2, [r2, #0]
 8009404:	701a      	strb	r2, [r3, #0]
  idx++;
 8009406:	7dfb      	ldrb	r3, [r7, #23]
 8009408:	3301      	adds	r3, #1
 800940a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800940c:	7dfb      	ldrb	r3, [r7, #23]
 800940e:	68ba      	ldr	r2, [r7, #8]
 8009410:	4413      	add	r3, r2
 8009412:	2203      	movs	r2, #3
 8009414:	701a      	strb	r2, [r3, #0]
  idx++;
 8009416:	7dfb      	ldrb	r3, [r7, #23]
 8009418:	3301      	adds	r3, #1
 800941a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800941c:	e013      	b.n	8009446 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800941e:	7dfb      	ldrb	r3, [r7, #23]
 8009420:	68ba      	ldr	r2, [r7, #8]
 8009422:	4413      	add	r3, r2
 8009424:	693a      	ldr	r2, [r7, #16]
 8009426:	7812      	ldrb	r2, [r2, #0]
 8009428:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800942a:	693b      	ldr	r3, [r7, #16]
 800942c:	3301      	adds	r3, #1
 800942e:	613b      	str	r3, [r7, #16]
    idx++;
 8009430:	7dfb      	ldrb	r3, [r7, #23]
 8009432:	3301      	adds	r3, #1
 8009434:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8009436:	7dfb      	ldrb	r3, [r7, #23]
 8009438:	68ba      	ldr	r2, [r7, #8]
 800943a:	4413      	add	r3, r2
 800943c:	2200      	movs	r2, #0
 800943e:	701a      	strb	r2, [r3, #0]
    idx++;
 8009440:	7dfb      	ldrb	r3, [r7, #23]
 8009442:	3301      	adds	r3, #1
 8009444:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8009446:	693b      	ldr	r3, [r7, #16]
 8009448:	781b      	ldrb	r3, [r3, #0]
 800944a:	2b00      	cmp	r3, #0
 800944c:	d1e7      	bne.n	800941e <USBD_GetString+0x6a>
 800944e:	e000      	b.n	8009452 <USBD_GetString+0x9e>
    return;
 8009450:	bf00      	nop
  }
}
 8009452:	3718      	adds	r7, #24
 8009454:	46bd      	mov	sp, r7
 8009456:	bd80      	pop	{r7, pc}

08009458 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009458:	b480      	push	{r7}
 800945a:	b085      	sub	sp, #20
 800945c:	af00      	add	r7, sp, #0
 800945e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009460:	2300      	movs	r3, #0
 8009462:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8009468:	e005      	b.n	8009476 <USBD_GetLen+0x1e>
  {
    len++;
 800946a:	7bfb      	ldrb	r3, [r7, #15]
 800946c:	3301      	adds	r3, #1
 800946e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8009470:	68bb      	ldr	r3, [r7, #8]
 8009472:	3301      	adds	r3, #1
 8009474:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8009476:	68bb      	ldr	r3, [r7, #8]
 8009478:	781b      	ldrb	r3, [r3, #0]
 800947a:	2b00      	cmp	r3, #0
 800947c:	d1f5      	bne.n	800946a <USBD_GetLen+0x12>
  }

  return len;
 800947e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009480:	4618      	mov	r0, r3
 8009482:	3714      	adds	r7, #20
 8009484:	46bd      	mov	sp, r7
 8009486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800948a:	4770      	bx	lr

0800948c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800948c:	b580      	push	{r7, lr}
 800948e:	b084      	sub	sp, #16
 8009490:	af00      	add	r7, sp, #0
 8009492:	60f8      	str	r0, [r7, #12]
 8009494:	60b9      	str	r1, [r7, #8]
 8009496:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	2202      	movs	r2, #2
 800949c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	687a      	ldr	r2, [r7, #4]
 80094a4:	615a      	str	r2, [r3, #20]
  pdev->ep_in[0].pbuffer = pbuf;
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	68ba      	ldr	r2, [r7, #8]
 80094aa:	625a      	str	r2, [r3, #36]	@ 0x24

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	687a      	ldr	r2, [r7, #4]
 80094b0:	619a      	str	r2, [r3, #24]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	68ba      	ldr	r2, [r7, #8]
 80094b6:	2100      	movs	r1, #0
 80094b8:	68f8      	ldr	r0, [r7, #12]
 80094ba:	f000 fc0e 	bl	8009cda <USBD_LL_Transmit>

  return USBD_OK;
 80094be:	2300      	movs	r3, #0
}
 80094c0:	4618      	mov	r0, r3
 80094c2:	3710      	adds	r7, #16
 80094c4:	46bd      	mov	sp, r7
 80094c6:	bd80      	pop	{r7, pc}

080094c8 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80094c8:	b580      	push	{r7, lr}
 80094ca:	b084      	sub	sp, #16
 80094cc:	af00      	add	r7, sp, #0
 80094ce:	60f8      	str	r0, [r7, #12]
 80094d0:	60b9      	str	r1, [r7, #8]
 80094d2:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	68ba      	ldr	r2, [r7, #8]
 80094d8:	2100      	movs	r1, #0
 80094da:	68f8      	ldr	r0, [r7, #12]
 80094dc:	f000 fbfd 	bl	8009cda <USBD_LL_Transmit>

  return USBD_OK;
 80094e0:	2300      	movs	r3, #0
}
 80094e2:	4618      	mov	r0, r3
 80094e4:	3710      	adds	r7, #16
 80094e6:	46bd      	mov	sp, r7
 80094e8:	bd80      	pop	{r7, pc}

080094ea <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80094ea:	b580      	push	{r7, lr}
 80094ec:	b084      	sub	sp, #16
 80094ee:	af00      	add	r7, sp, #0
 80094f0:	60f8      	str	r0, [r7, #12]
 80094f2:	60b9      	str	r1, [r7, #8]
 80094f4:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	68ba      	ldr	r2, [r7, #8]
 80094fa:	2100      	movs	r1, #0
 80094fc:	68f8      	ldr	r0, [r7, #12]
 80094fe:	f000 fc0d 	bl	8009d1c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009502:	2300      	movs	r3, #0
}
 8009504:	4618      	mov	r0, r3
 8009506:	3710      	adds	r7, #16
 8009508:	46bd      	mov	sp, r7
 800950a:	bd80      	pop	{r7, pc}

0800950c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800950c:	b580      	push	{r7, lr}
 800950e:	b082      	sub	sp, #8
 8009510:	af00      	add	r7, sp, #0
 8009512:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	2204      	movs	r2, #4
 8009518:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800951c:	2300      	movs	r3, #0
 800951e:	2200      	movs	r2, #0
 8009520:	2100      	movs	r1, #0
 8009522:	6878      	ldr	r0, [r7, #4]
 8009524:	f000 fbd9 	bl	8009cda <USBD_LL_Transmit>

  return USBD_OK;
 8009528:	2300      	movs	r3, #0
}
 800952a:	4618      	mov	r0, r3
 800952c:	3708      	adds	r7, #8
 800952e:	46bd      	mov	sp, r7
 8009530:	bd80      	pop	{r7, pc}

08009532 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009532:	b580      	push	{r7, lr}
 8009534:	b082      	sub	sp, #8
 8009536:	af00      	add	r7, sp, #0
 8009538:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	2205      	movs	r2, #5
 800953e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009542:	2300      	movs	r3, #0
 8009544:	2200      	movs	r2, #0
 8009546:	2100      	movs	r1, #0
 8009548:	6878      	ldr	r0, [r7, #4]
 800954a:	f000 fbe7 	bl	8009d1c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800954e:	2300      	movs	r3, #0
}
 8009550:	4618      	mov	r0, r3
 8009552:	3708      	adds	r7, #8
 8009554:	46bd      	mov	sp, r7
 8009556:	bd80      	pop	{r7, pc}

08009558 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009558:	b580      	push	{r7, lr}
 800955a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 800955c:	2201      	movs	r2, #1
 800955e:	490e      	ldr	r1, [pc, #56]	@ (8009598 <MX_USB_DEVICE_Init+0x40>)
 8009560:	480e      	ldr	r0, [pc, #56]	@ (800959c <MX_USB_DEVICE_Init+0x44>)
 8009562:	f7fe fcfb 	bl	8007f5c <USBD_Init>
 8009566:	4603      	mov	r3, r0
 8009568:	2b00      	cmp	r3, #0
 800956a:	d001      	beq.n	8009570 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800956c:	f7f8 fe6a 	bl	8002244 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_HID) != USBD_OK)
 8009570:	490b      	ldr	r1, [pc, #44]	@ (80095a0 <MX_USB_DEVICE_Init+0x48>)
 8009572:	480a      	ldr	r0, [pc, #40]	@ (800959c <MX_USB_DEVICE_Init+0x44>)
 8009574:	f7fe fd22 	bl	8007fbc <USBD_RegisterClass>
 8009578:	4603      	mov	r3, r0
 800957a:	2b00      	cmp	r3, #0
 800957c:	d001      	beq.n	8009582 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800957e:	f7f8 fe61 	bl	8002244 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 8009582:	4806      	ldr	r0, [pc, #24]	@ (800959c <MX_USB_DEVICE_Init+0x44>)
 8009584:	f7fe fd50 	bl	8008028 <USBD_Start>
 8009588:	4603      	mov	r3, r0
 800958a:	2b00      	cmp	r3, #0
 800958c:	d001      	beq.n	8009592 <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 800958e:	f7f8 fe59 	bl	8002244 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009592:	bf00      	nop
 8009594:	bd80      	pop	{r7, pc}
 8009596:	bf00      	nop
 8009598:	200000d0 	.word	0x200000d0
 800959c:	200004e0 	.word	0x200004e0
 80095a0:	20000010 	.word	0x20000010

080095a4 <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80095a4:	b480      	push	{r7}
 80095a6:	b083      	sub	sp, #12
 80095a8:	af00      	add	r7, sp, #0
 80095aa:	4603      	mov	r3, r0
 80095ac:	6039      	str	r1, [r7, #0]
 80095ae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 80095b0:	683b      	ldr	r3, [r7, #0]
 80095b2:	2212      	movs	r2, #18
 80095b4:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 80095b6:	4b03      	ldr	r3, [pc, #12]	@ (80095c4 <USBD_HS_DeviceDescriptor+0x20>)
}
 80095b8:	4618      	mov	r0, r3
 80095ba:	370c      	adds	r7, #12
 80095bc:	46bd      	mov	sp, r7
 80095be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095c2:	4770      	bx	lr
 80095c4:	200000ec 	.word	0x200000ec

080095c8 <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80095c8:	b480      	push	{r7}
 80095ca:	b083      	sub	sp, #12
 80095cc:	af00      	add	r7, sp, #0
 80095ce:	4603      	mov	r3, r0
 80095d0:	6039      	str	r1, [r7, #0]
 80095d2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80095d4:	683b      	ldr	r3, [r7, #0]
 80095d6:	2204      	movs	r2, #4
 80095d8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80095da:	4b03      	ldr	r3, [pc, #12]	@ (80095e8 <USBD_HS_LangIDStrDescriptor+0x20>)
}
 80095dc:	4618      	mov	r0, r3
 80095de:	370c      	adds	r7, #12
 80095e0:	46bd      	mov	sp, r7
 80095e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095e6:	4770      	bx	lr
 80095e8:	20000100 	.word	0x20000100

080095ec <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80095ec:	b580      	push	{r7, lr}
 80095ee:	b082      	sub	sp, #8
 80095f0:	af00      	add	r7, sp, #0
 80095f2:	4603      	mov	r3, r0
 80095f4:	6039      	str	r1, [r7, #0]
 80095f6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80095f8:	79fb      	ldrb	r3, [r7, #7]
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d105      	bne.n	800960a <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 80095fe:	683a      	ldr	r2, [r7, #0]
 8009600:	4907      	ldr	r1, [pc, #28]	@ (8009620 <USBD_HS_ProductStrDescriptor+0x34>)
 8009602:	4808      	ldr	r0, [pc, #32]	@ (8009624 <USBD_HS_ProductStrDescriptor+0x38>)
 8009604:	f7ff fed6 	bl	80093b4 <USBD_GetString>
 8009608:	e004      	b.n	8009614 <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 800960a:	683a      	ldr	r2, [r7, #0]
 800960c:	4904      	ldr	r1, [pc, #16]	@ (8009620 <USBD_HS_ProductStrDescriptor+0x34>)
 800960e:	4805      	ldr	r0, [pc, #20]	@ (8009624 <USBD_HS_ProductStrDescriptor+0x38>)
 8009610:	f7ff fed0 	bl	80093b4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009614:	4b02      	ldr	r3, [pc, #8]	@ (8009620 <USBD_HS_ProductStrDescriptor+0x34>)
}
 8009616:	4618      	mov	r0, r3
 8009618:	3708      	adds	r7, #8
 800961a:	46bd      	mov	sp, r7
 800961c:	bd80      	pop	{r7, pc}
 800961e:	bf00      	nop
 8009620:	200007bc 	.word	0x200007bc
 8009624:	0800d4ec 	.word	0x0800d4ec

08009628 <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009628:	b580      	push	{r7, lr}
 800962a:	b082      	sub	sp, #8
 800962c:	af00      	add	r7, sp, #0
 800962e:	4603      	mov	r3, r0
 8009630:	6039      	str	r1, [r7, #0]
 8009632:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009634:	683a      	ldr	r2, [r7, #0]
 8009636:	4904      	ldr	r1, [pc, #16]	@ (8009648 <USBD_HS_ManufacturerStrDescriptor+0x20>)
 8009638:	4804      	ldr	r0, [pc, #16]	@ (800964c <USBD_HS_ManufacturerStrDescriptor+0x24>)
 800963a:	f7ff febb 	bl	80093b4 <USBD_GetString>
  return USBD_StrDesc;
 800963e:	4b02      	ldr	r3, [pc, #8]	@ (8009648 <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 8009640:	4618      	mov	r0, r3
 8009642:	3708      	adds	r7, #8
 8009644:	46bd      	mov	sp, r7
 8009646:	bd80      	pop	{r7, pc}
 8009648:	200007bc 	.word	0x200007bc
 800964c:	0800d504 	.word	0x0800d504

08009650 <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009650:	b580      	push	{r7, lr}
 8009652:	b082      	sub	sp, #8
 8009654:	af00      	add	r7, sp, #0
 8009656:	4603      	mov	r3, r0
 8009658:	6039      	str	r1, [r7, #0]
 800965a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800965c:	683b      	ldr	r3, [r7, #0]
 800965e:	221a      	movs	r2, #26
 8009660:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009662:	f000 f843 	bl	80096ec <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8009666:	4b02      	ldr	r3, [pc, #8]	@ (8009670 <USBD_HS_SerialStrDescriptor+0x20>)
}
 8009668:	4618      	mov	r0, r3
 800966a:	3708      	adds	r7, #8
 800966c:	46bd      	mov	sp, r7
 800966e:	bd80      	pop	{r7, pc}
 8009670:	20000104 	.word	0x20000104

08009674 <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009674:	b580      	push	{r7, lr}
 8009676:	b082      	sub	sp, #8
 8009678:	af00      	add	r7, sp, #0
 800967a:	4603      	mov	r3, r0
 800967c:	6039      	str	r1, [r7, #0]
 800967e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009680:	79fb      	ldrb	r3, [r7, #7]
 8009682:	2b00      	cmp	r3, #0
 8009684:	d105      	bne.n	8009692 <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 8009686:	683a      	ldr	r2, [r7, #0]
 8009688:	4907      	ldr	r1, [pc, #28]	@ (80096a8 <USBD_HS_ConfigStrDescriptor+0x34>)
 800968a:	4808      	ldr	r0, [pc, #32]	@ (80096ac <USBD_HS_ConfigStrDescriptor+0x38>)
 800968c:	f7ff fe92 	bl	80093b4 <USBD_GetString>
 8009690:	e004      	b.n	800969c <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 8009692:	683a      	ldr	r2, [r7, #0]
 8009694:	4904      	ldr	r1, [pc, #16]	@ (80096a8 <USBD_HS_ConfigStrDescriptor+0x34>)
 8009696:	4805      	ldr	r0, [pc, #20]	@ (80096ac <USBD_HS_ConfigStrDescriptor+0x38>)
 8009698:	f7ff fe8c 	bl	80093b4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800969c:	4b02      	ldr	r3, [pc, #8]	@ (80096a8 <USBD_HS_ConfigStrDescriptor+0x34>)
}
 800969e:	4618      	mov	r0, r3
 80096a0:	3708      	adds	r7, #8
 80096a2:	46bd      	mov	sp, r7
 80096a4:	bd80      	pop	{r7, pc}
 80096a6:	bf00      	nop
 80096a8:	200007bc 	.word	0x200007bc
 80096ac:	0800d518 	.word	0x0800d518

080096b0 <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80096b0:	b580      	push	{r7, lr}
 80096b2:	b082      	sub	sp, #8
 80096b4:	af00      	add	r7, sp, #0
 80096b6:	4603      	mov	r3, r0
 80096b8:	6039      	str	r1, [r7, #0]
 80096ba:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80096bc:	79fb      	ldrb	r3, [r7, #7]
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d105      	bne.n	80096ce <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 80096c2:	683a      	ldr	r2, [r7, #0]
 80096c4:	4907      	ldr	r1, [pc, #28]	@ (80096e4 <USBD_HS_InterfaceStrDescriptor+0x34>)
 80096c6:	4808      	ldr	r0, [pc, #32]	@ (80096e8 <USBD_HS_InterfaceStrDescriptor+0x38>)
 80096c8:	f7ff fe74 	bl	80093b4 <USBD_GetString>
 80096cc:	e004      	b.n	80096d8 <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 80096ce:	683a      	ldr	r2, [r7, #0]
 80096d0:	4904      	ldr	r1, [pc, #16]	@ (80096e4 <USBD_HS_InterfaceStrDescriptor+0x34>)
 80096d2:	4805      	ldr	r0, [pc, #20]	@ (80096e8 <USBD_HS_InterfaceStrDescriptor+0x38>)
 80096d4:	f7ff fe6e 	bl	80093b4 <USBD_GetString>
  }
  return USBD_StrDesc;
 80096d8:	4b02      	ldr	r3, [pc, #8]	@ (80096e4 <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 80096da:	4618      	mov	r0, r3
 80096dc:	3708      	adds	r7, #8
 80096de:	46bd      	mov	sp, r7
 80096e0:	bd80      	pop	{r7, pc}
 80096e2:	bf00      	nop
 80096e4:	200007bc 	.word	0x200007bc
 80096e8:	0800d524 	.word	0x0800d524

080096ec <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80096ec:	b580      	push	{r7, lr}
 80096ee:	b084      	sub	sp, #16
 80096f0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80096f2:	4b0f      	ldr	r3, [pc, #60]	@ (8009730 <Get_SerialNum+0x44>)
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80096f8:	4b0e      	ldr	r3, [pc, #56]	@ (8009734 <Get_SerialNum+0x48>)
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80096fe:	4b0e      	ldr	r3, [pc, #56]	@ (8009738 <Get_SerialNum+0x4c>)
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009704:	68fa      	ldr	r2, [r7, #12]
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	4413      	add	r3, r2
 800970a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	2b00      	cmp	r3, #0
 8009710:	d009      	beq.n	8009726 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009712:	2208      	movs	r2, #8
 8009714:	4909      	ldr	r1, [pc, #36]	@ (800973c <Get_SerialNum+0x50>)
 8009716:	68f8      	ldr	r0, [r7, #12]
 8009718:	f000 f814 	bl	8009744 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800971c:	2204      	movs	r2, #4
 800971e:	4908      	ldr	r1, [pc, #32]	@ (8009740 <Get_SerialNum+0x54>)
 8009720:	68b8      	ldr	r0, [r7, #8]
 8009722:	f000 f80f 	bl	8009744 <IntToUnicode>
  }
}
 8009726:	bf00      	nop
 8009728:	3710      	adds	r7, #16
 800972a:	46bd      	mov	sp, r7
 800972c:	bd80      	pop	{r7, pc}
 800972e:	bf00      	nop
 8009730:	1fff7a10 	.word	0x1fff7a10
 8009734:	1fff7a14 	.word	0x1fff7a14
 8009738:	1fff7a18 	.word	0x1fff7a18
 800973c:	20000106 	.word	0x20000106
 8009740:	20000116 	.word	0x20000116

08009744 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009744:	b480      	push	{r7}
 8009746:	b087      	sub	sp, #28
 8009748:	af00      	add	r7, sp, #0
 800974a:	60f8      	str	r0, [r7, #12]
 800974c:	60b9      	str	r1, [r7, #8]
 800974e:	4613      	mov	r3, r2
 8009750:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009752:	2300      	movs	r3, #0
 8009754:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009756:	2300      	movs	r3, #0
 8009758:	75fb      	strb	r3, [r7, #23]
 800975a:	e027      	b.n	80097ac <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	0f1b      	lsrs	r3, r3, #28
 8009760:	2b09      	cmp	r3, #9
 8009762:	d80b      	bhi.n	800977c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	0f1b      	lsrs	r3, r3, #28
 8009768:	b2da      	uxtb	r2, r3
 800976a:	7dfb      	ldrb	r3, [r7, #23]
 800976c:	005b      	lsls	r3, r3, #1
 800976e:	4619      	mov	r1, r3
 8009770:	68bb      	ldr	r3, [r7, #8]
 8009772:	440b      	add	r3, r1
 8009774:	3230      	adds	r2, #48	@ 0x30
 8009776:	b2d2      	uxtb	r2, r2
 8009778:	701a      	strb	r2, [r3, #0]
 800977a:	e00a      	b.n	8009792 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	0f1b      	lsrs	r3, r3, #28
 8009780:	b2da      	uxtb	r2, r3
 8009782:	7dfb      	ldrb	r3, [r7, #23]
 8009784:	005b      	lsls	r3, r3, #1
 8009786:	4619      	mov	r1, r3
 8009788:	68bb      	ldr	r3, [r7, #8]
 800978a:	440b      	add	r3, r1
 800978c:	3237      	adds	r2, #55	@ 0x37
 800978e:	b2d2      	uxtb	r2, r2
 8009790:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	011b      	lsls	r3, r3, #4
 8009796:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009798:	7dfb      	ldrb	r3, [r7, #23]
 800979a:	005b      	lsls	r3, r3, #1
 800979c:	3301      	adds	r3, #1
 800979e:	68ba      	ldr	r2, [r7, #8]
 80097a0:	4413      	add	r3, r2
 80097a2:	2200      	movs	r2, #0
 80097a4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80097a6:	7dfb      	ldrb	r3, [r7, #23]
 80097a8:	3301      	adds	r3, #1
 80097aa:	75fb      	strb	r3, [r7, #23]
 80097ac:	7dfa      	ldrb	r2, [r7, #23]
 80097ae:	79fb      	ldrb	r3, [r7, #7]
 80097b0:	429a      	cmp	r2, r3
 80097b2:	d3d3      	bcc.n	800975c <IntToUnicode+0x18>
  }
}
 80097b4:	bf00      	nop
 80097b6:	bf00      	nop
 80097b8:	371c      	adds	r7, #28
 80097ba:	46bd      	mov	sp, r7
 80097bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097c0:	4770      	bx	lr
	...

080097c4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80097c4:	b580      	push	{r7, lr}
 80097c6:	b08a      	sub	sp, #40	@ 0x28
 80097c8:	af00      	add	r7, sp, #0
 80097ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80097cc:	f107 0314 	add.w	r3, r7, #20
 80097d0:	2200      	movs	r2, #0
 80097d2:	601a      	str	r2, [r3, #0]
 80097d4:	605a      	str	r2, [r3, #4]
 80097d6:	609a      	str	r2, [r3, #8]
 80097d8:	60da      	str	r2, [r3, #12]
 80097da:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_HS)
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	4a24      	ldr	r2, [pc, #144]	@ (8009874 <HAL_PCD_MspInit+0xb0>)
 80097e2:	4293      	cmp	r3, r2
 80097e4:	d141      	bne.n	800986a <HAL_PCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

  /* USER CODE END USB_OTG_HS_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80097e6:	2300      	movs	r3, #0
 80097e8:	613b      	str	r3, [r7, #16]
 80097ea:	4b23      	ldr	r3, [pc, #140]	@ (8009878 <HAL_PCD_MspInit+0xb4>)
 80097ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80097ee:	4a22      	ldr	r2, [pc, #136]	@ (8009878 <HAL_PCD_MspInit+0xb4>)
 80097f0:	f043 0302 	orr.w	r3, r3, #2
 80097f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80097f6:	4b20      	ldr	r3, [pc, #128]	@ (8009878 <HAL_PCD_MspInit+0xb4>)
 80097f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80097fa:	f003 0302 	and.w	r3, r3, #2
 80097fe:	613b      	str	r3, [r7, #16]
 8009800:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_HS GPIO Configuration
    PB13     ------> USB_OTG_HS_VBUS
    PB14     ------> USB_OTG_HS_DM
    PB15     ------> USB_OTG_HS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8009802:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8009806:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009808:	2300      	movs	r3, #0
 800980a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800980c:	2300      	movs	r3, #0
 800980e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009810:	f107 0314 	add.w	r3, r7, #20
 8009814:	4619      	mov	r1, r3
 8009816:	4819      	ldr	r0, [pc, #100]	@ (800987c <HAL_PCD_MspInit+0xb8>)
 8009818:	f7f9 f8b6 	bl	8002988 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800981c:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8009820:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009822:	2302      	movs	r3, #2
 8009824:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009826:	2300      	movs	r3, #0
 8009828:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800982a:	2303      	movs	r3, #3
 800982c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 800982e:	230c      	movs	r3, #12
 8009830:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009832:	f107 0314 	add.w	r3, r7, #20
 8009836:	4619      	mov	r1, r3
 8009838:	4810      	ldr	r0, [pc, #64]	@ (800987c <HAL_PCD_MspInit+0xb8>)
 800983a:	f7f9 f8a5 	bl	8002988 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 800983e:	2300      	movs	r3, #0
 8009840:	60fb      	str	r3, [r7, #12]
 8009842:	4b0d      	ldr	r3, [pc, #52]	@ (8009878 <HAL_PCD_MspInit+0xb4>)
 8009844:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009846:	4a0c      	ldr	r2, [pc, #48]	@ (8009878 <HAL_PCD_MspInit+0xb4>)
 8009848:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800984c:	6313      	str	r3, [r2, #48]	@ 0x30
 800984e:	4b0a      	ldr	r3, [pc, #40]	@ (8009878 <HAL_PCD_MspInit+0xb4>)
 8009850:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009852:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009856:	60fb      	str	r3, [r7, #12]
 8009858:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 800985a:	2200      	movs	r2, #0
 800985c:	2100      	movs	r1, #0
 800985e:	204d      	movs	r0, #77	@ 0x4d
 8009860:	f7f9 f85b 	bl	800291a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 8009864:	204d      	movs	r0, #77	@ 0x4d
 8009866:	f7f9 f874 	bl	8002952 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 800986a:	bf00      	nop
 800986c:	3728      	adds	r7, #40	@ 0x28
 800986e:	46bd      	mov	sp, r7
 8009870:	bd80      	pop	{r7, pc}
 8009872:	bf00      	nop
 8009874:	40040000 	.word	0x40040000
 8009878:	40023800 	.word	0x40023800
 800987c:	40020400 	.word	0x40020400

08009880 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009880:	b580      	push	{r7, lr}
 8009882:	b082      	sub	sp, #8
 8009884:	af00      	add	r7, sp, #0
 8009886:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8009894:	4619      	mov	r1, r3
 8009896:	4610      	mov	r0, r2
 8009898:	f7fe fc13 	bl	80080c2 <USBD_LL_SetupStage>
}
 800989c:	bf00      	nop
 800989e:	3708      	adds	r7, #8
 80098a0:	46bd      	mov	sp, r7
 80098a2:	bd80      	pop	{r7, pc}

080098a4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80098a4:	b580      	push	{r7, lr}
 80098a6:	b082      	sub	sp, #8
 80098a8:	af00      	add	r7, sp, #0
 80098aa:	6078      	str	r0, [r7, #4]
 80098ac:	460b      	mov	r3, r1
 80098ae:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 80098b6:	78fa      	ldrb	r2, [r7, #3]
 80098b8:	6879      	ldr	r1, [r7, #4]
 80098ba:	4613      	mov	r3, r2
 80098bc:	00db      	lsls	r3, r3, #3
 80098be:	4413      	add	r3, r2
 80098c0:	009b      	lsls	r3, r3, #2
 80098c2:	440b      	add	r3, r1
 80098c4:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80098c8:	681a      	ldr	r2, [r3, #0]
 80098ca:	78fb      	ldrb	r3, [r7, #3]
 80098cc:	4619      	mov	r1, r3
 80098ce:	f7fe fc4d 	bl	800816c <USBD_LL_DataOutStage>
}
 80098d2:	bf00      	nop
 80098d4:	3708      	adds	r7, #8
 80098d6:	46bd      	mov	sp, r7
 80098d8:	bd80      	pop	{r7, pc}

080098da <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80098da:	b580      	push	{r7, lr}
 80098dc:	b082      	sub	sp, #8
 80098de:	af00      	add	r7, sp, #0
 80098e0:	6078      	str	r0, [r7, #4]
 80098e2:	460b      	mov	r3, r1
 80098e4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 80098ec:	78fa      	ldrb	r2, [r7, #3]
 80098ee:	6879      	ldr	r1, [r7, #4]
 80098f0:	4613      	mov	r3, r2
 80098f2:	00db      	lsls	r3, r3, #3
 80098f4:	4413      	add	r3, r2
 80098f6:	009b      	lsls	r3, r3, #2
 80098f8:	440b      	add	r3, r1
 80098fa:	3320      	adds	r3, #32
 80098fc:	681a      	ldr	r2, [r3, #0]
 80098fe:	78fb      	ldrb	r3, [r7, #3]
 8009900:	4619      	mov	r1, r3
 8009902:	f7fe fcef 	bl	80082e4 <USBD_LL_DataInStage>
}
 8009906:	bf00      	nop
 8009908:	3708      	adds	r7, #8
 800990a:	46bd      	mov	sp, r7
 800990c:	bd80      	pop	{r7, pc}

0800990e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800990e:	b580      	push	{r7, lr}
 8009910:	b082      	sub	sp, #8
 8009912:	af00      	add	r7, sp, #0
 8009914:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800991c:	4618      	mov	r0, r3
 800991e:	f7fe fe33 	bl	8008588 <USBD_LL_SOF>
}
 8009922:	bf00      	nop
 8009924:	3708      	adds	r7, #8
 8009926:	46bd      	mov	sp, r7
 8009928:	bd80      	pop	{r7, pc}

0800992a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800992a:	b580      	push	{r7, lr}
 800992c:	b084      	sub	sp, #16
 800992e:	af00      	add	r7, sp, #0
 8009930:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009932:	2301      	movs	r3, #1
 8009934:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	79db      	ldrb	r3, [r3, #7]
 800993a:	2b00      	cmp	r3, #0
 800993c:	d102      	bne.n	8009944 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800993e:	2300      	movs	r3, #0
 8009940:	73fb      	strb	r3, [r7, #15]
 8009942:	e008      	b.n	8009956 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	79db      	ldrb	r3, [r3, #7]
 8009948:	2b02      	cmp	r3, #2
 800994a:	d102      	bne.n	8009952 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800994c:	2301      	movs	r3, #1
 800994e:	73fb      	strb	r3, [r7, #15]
 8009950:	e001      	b.n	8009956 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8009952:	f7f8 fc77 	bl	8002244 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800995c:	7bfa      	ldrb	r2, [r7, #15]
 800995e:	4611      	mov	r1, r2
 8009960:	4618      	mov	r0, r3
 8009962:	f7fe fdcd 	bl	8008500 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800996c:	4618      	mov	r0, r3
 800996e:	f7fe fd74 	bl	800845a <USBD_LL_Reset>
}
 8009972:	bf00      	nop
 8009974:	3710      	adds	r7, #16
 8009976:	46bd      	mov	sp, r7
 8009978:	bd80      	pop	{r7, pc}
	...

0800997c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800997c:	b580      	push	{r7, lr}
 800997e:	b082      	sub	sp, #8
 8009980:	af00      	add	r7, sp, #0
 8009982:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800998a:	4618      	mov	r0, r3
 800998c:	f7fe fdc8 	bl	8008520 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	687a      	ldr	r2, [r7, #4]
 800999c:	6812      	ldr	r2, [r2, #0]
 800999e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80099a2:	f043 0301 	orr.w	r3, r3, #1
 80099a6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	7adb      	ldrb	r3, [r3, #11]
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d005      	beq.n	80099bc <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80099b0:	4b04      	ldr	r3, [pc, #16]	@ (80099c4 <HAL_PCD_SuspendCallback+0x48>)
 80099b2:	691b      	ldr	r3, [r3, #16]
 80099b4:	4a03      	ldr	r2, [pc, #12]	@ (80099c4 <HAL_PCD_SuspendCallback+0x48>)
 80099b6:	f043 0306 	orr.w	r3, r3, #6
 80099ba:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80099bc:	bf00      	nop
 80099be:	3708      	adds	r7, #8
 80099c0:	46bd      	mov	sp, r7
 80099c2:	bd80      	pop	{r7, pc}
 80099c4:	e000ed00 	.word	0xe000ed00

080099c8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80099c8:	b580      	push	{r7, lr}
 80099ca:	b082      	sub	sp, #8
 80099cc:	af00      	add	r7, sp, #0
 80099ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80099d6:	4618      	mov	r0, r3
 80099d8:	f7fe fdbe 	bl	8008558 <USBD_LL_Resume>
}
 80099dc:	bf00      	nop
 80099de:	3708      	adds	r7, #8
 80099e0:	46bd      	mov	sp, r7
 80099e2:	bd80      	pop	{r7, pc}

080099e4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80099e4:	b580      	push	{r7, lr}
 80099e6:	b082      	sub	sp, #8
 80099e8:	af00      	add	r7, sp, #0
 80099ea:	6078      	str	r0, [r7, #4]
 80099ec:	460b      	mov	r3, r1
 80099ee:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80099f6:	78fa      	ldrb	r2, [r7, #3]
 80099f8:	4611      	mov	r1, r2
 80099fa:	4618      	mov	r0, r3
 80099fc:	f7fe fe16 	bl	800862c <USBD_LL_IsoOUTIncomplete>
}
 8009a00:	bf00      	nop
 8009a02:	3708      	adds	r7, #8
 8009a04:	46bd      	mov	sp, r7
 8009a06:	bd80      	pop	{r7, pc}

08009a08 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009a08:	b580      	push	{r7, lr}
 8009a0a:	b082      	sub	sp, #8
 8009a0c:	af00      	add	r7, sp, #0
 8009a0e:	6078      	str	r0, [r7, #4]
 8009a10:	460b      	mov	r3, r1
 8009a12:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009a1a:	78fa      	ldrb	r2, [r7, #3]
 8009a1c:	4611      	mov	r1, r2
 8009a1e:	4618      	mov	r0, r3
 8009a20:	f7fe fdd2 	bl	80085c8 <USBD_LL_IsoINIncomplete>
}
 8009a24:	bf00      	nop
 8009a26:	3708      	adds	r7, #8
 8009a28:	46bd      	mov	sp, r7
 8009a2a:	bd80      	pop	{r7, pc}

08009a2c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009a2c:	b580      	push	{r7, lr}
 8009a2e:	b082      	sub	sp, #8
 8009a30:	af00      	add	r7, sp, #0
 8009a32:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009a3a:	4618      	mov	r0, r3
 8009a3c:	f7fe fe28 	bl	8008690 <USBD_LL_DevConnected>
}
 8009a40:	bf00      	nop
 8009a42:	3708      	adds	r7, #8
 8009a44:	46bd      	mov	sp, r7
 8009a46:	bd80      	pop	{r7, pc}

08009a48 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009a48:	b580      	push	{r7, lr}
 8009a4a:	b082      	sub	sp, #8
 8009a4c:	af00      	add	r7, sp, #0
 8009a4e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009a56:	4618      	mov	r0, r3
 8009a58:	f7fe fe25 	bl	80086a6 <USBD_LL_DevDisconnected>
}
 8009a5c:	bf00      	nop
 8009a5e:	3708      	adds	r7, #8
 8009a60:	46bd      	mov	sp, r7
 8009a62:	bd80      	pop	{r7, pc}

08009a64 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009a64:	b580      	push	{r7, lr}
 8009a66:	b082      	sub	sp, #8
 8009a68:	af00      	add	r7, sp, #0
 8009a6a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	781b      	ldrb	r3, [r3, #0]
 8009a70:	2b01      	cmp	r3, #1
 8009a72:	d140      	bne.n	8009af6 <USBD_LL_Init+0x92>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 8009a74:	4a22      	ldr	r2, [pc, #136]	@ (8009b00 <USBD_LL_Init+0x9c>)
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_HS;
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	4a20      	ldr	r2, [pc, #128]	@ (8009b00 <USBD_LL_Init+0x9c>)
 8009a80:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 8009a84:	4b1e      	ldr	r3, [pc, #120]	@ (8009b00 <USBD_LL_Init+0x9c>)
 8009a86:	4a1f      	ldr	r2, [pc, #124]	@ (8009b04 <USBD_LL_Init+0xa0>)
 8009a88:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 6;
 8009a8a:	4b1d      	ldr	r3, [pc, #116]	@ (8009b00 <USBD_LL_Init+0x9c>)
 8009a8c:	2206      	movs	r2, #6
 8009a8e:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 8009a90:	4b1b      	ldr	r3, [pc, #108]	@ (8009b00 <USBD_LL_Init+0x9c>)
 8009a92:	2202      	movs	r2, #2
 8009a94:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 8009a96:	4b1a      	ldr	r3, [pc, #104]	@ (8009b00 <USBD_LL_Init+0x9c>)
 8009a98:	2200      	movs	r2, #0
 8009a9a:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 8009a9c:	4b18      	ldr	r3, [pc, #96]	@ (8009b00 <USBD_LL_Init+0x9c>)
 8009a9e:	2202      	movs	r2, #2
 8009aa0:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 8009aa2:	4b17      	ldr	r3, [pc, #92]	@ (8009b00 <USBD_LL_Init+0x9c>)
 8009aa4:	2200      	movs	r2, #0
 8009aa6:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 8009aa8:	4b15      	ldr	r3, [pc, #84]	@ (8009b00 <USBD_LL_Init+0x9c>)
 8009aaa:	2200      	movs	r2, #0
 8009aac:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 8009aae:	4b14      	ldr	r3, [pc, #80]	@ (8009b00 <USBD_LL_Init+0x9c>)
 8009ab0:	2200      	movs	r2, #0
 8009ab2:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = ENABLE;
 8009ab4:	4b12      	ldr	r3, [pc, #72]	@ (8009b00 <USBD_LL_Init+0x9c>)
 8009ab6:	2201      	movs	r2, #1
 8009ab8:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 8009aba:	4b11      	ldr	r3, [pc, #68]	@ (8009b00 <USBD_LL_Init+0x9c>)
 8009abc:	2200      	movs	r2, #0
 8009abe:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 8009ac0:	4b0f      	ldr	r3, [pc, #60]	@ (8009b00 <USBD_LL_Init+0x9c>)
 8009ac2:	2200      	movs	r2, #0
 8009ac4:	741a      	strb	r2, [r3, #16]
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 8009ac6:	480e      	ldr	r0, [pc, #56]	@ (8009b00 <USBD_LL_Init+0x9c>)
 8009ac8:	f7fa f9c1 	bl	8003e4e <HAL_PCD_Init>
 8009acc:	4603      	mov	r3, r0
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d001      	beq.n	8009ad6 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 8009ad2:	f7f8 fbb7 	bl	8002244 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_HS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 8009ad6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8009ada:	4809      	ldr	r0, [pc, #36]	@ (8009b00 <USBD_LL_Init+0x9c>)
 8009adc:	f7fb fbd5 	bl	800528a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 8009ae0:	2280      	movs	r2, #128	@ 0x80
 8009ae2:	2100      	movs	r1, #0
 8009ae4:	4806      	ldr	r0, [pc, #24]	@ (8009b00 <USBD_LL_Init+0x9c>)
 8009ae6:	f7fb fb89 	bl	80051fc <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 8009aea:	f44f 72ba 	mov.w	r2, #372	@ 0x174
 8009aee:	2101      	movs	r1, #1
 8009af0:	4803      	ldr	r0, [pc, #12]	@ (8009b00 <USBD_LL_Init+0x9c>)
 8009af2:	f7fb fb83 	bl	80051fc <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8009af6:	2300      	movs	r3, #0
}
 8009af8:	4618      	mov	r0, r3
 8009afa:	3708      	adds	r7, #8
 8009afc:	46bd      	mov	sp, r7
 8009afe:	bd80      	pop	{r7, pc}
 8009b00:	200009bc 	.word	0x200009bc
 8009b04:	40040000 	.word	0x40040000

08009b08 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009b08:	b580      	push	{r7, lr}
 8009b0a:	b084      	sub	sp, #16
 8009b0c:	af00      	add	r7, sp, #0
 8009b0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009b10:	2300      	movs	r3, #0
 8009b12:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009b14:	2300      	movs	r3, #0
 8009b16:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009b1e:	4618      	mov	r0, r3
 8009b20:	f7fa faa4 	bl	800406c <HAL_PCD_Start>
 8009b24:	4603      	mov	r3, r0
 8009b26:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009b28:	7bfb      	ldrb	r3, [r7, #15]
 8009b2a:	4618      	mov	r0, r3
 8009b2c:	f000 f930 	bl	8009d90 <USBD_Get_USB_Status>
 8009b30:	4603      	mov	r3, r0
 8009b32:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009b34:	7bbb      	ldrb	r3, [r7, #14]
}
 8009b36:	4618      	mov	r0, r3
 8009b38:	3710      	adds	r7, #16
 8009b3a:	46bd      	mov	sp, r7
 8009b3c:	bd80      	pop	{r7, pc}

08009b3e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009b3e:	b580      	push	{r7, lr}
 8009b40:	b084      	sub	sp, #16
 8009b42:	af00      	add	r7, sp, #0
 8009b44:	6078      	str	r0, [r7, #4]
 8009b46:	4608      	mov	r0, r1
 8009b48:	4611      	mov	r1, r2
 8009b4a:	461a      	mov	r2, r3
 8009b4c:	4603      	mov	r3, r0
 8009b4e:	70fb      	strb	r3, [r7, #3]
 8009b50:	460b      	mov	r3, r1
 8009b52:	70bb      	strb	r3, [r7, #2]
 8009b54:	4613      	mov	r3, r2
 8009b56:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009b58:	2300      	movs	r3, #0
 8009b5a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009b5c:	2300      	movs	r3, #0
 8009b5e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8009b66:	78bb      	ldrb	r3, [r7, #2]
 8009b68:	883a      	ldrh	r2, [r7, #0]
 8009b6a:	78f9      	ldrb	r1, [r7, #3]
 8009b6c:	f7fa ff78 	bl	8004a60 <HAL_PCD_EP_Open>
 8009b70:	4603      	mov	r3, r0
 8009b72:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009b74:	7bfb      	ldrb	r3, [r7, #15]
 8009b76:	4618      	mov	r0, r3
 8009b78:	f000 f90a 	bl	8009d90 <USBD_Get_USB_Status>
 8009b7c:	4603      	mov	r3, r0
 8009b7e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009b80:	7bbb      	ldrb	r3, [r7, #14]
}
 8009b82:	4618      	mov	r0, r3
 8009b84:	3710      	adds	r7, #16
 8009b86:	46bd      	mov	sp, r7
 8009b88:	bd80      	pop	{r7, pc}

08009b8a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009b8a:	b580      	push	{r7, lr}
 8009b8c:	b084      	sub	sp, #16
 8009b8e:	af00      	add	r7, sp, #0
 8009b90:	6078      	str	r0, [r7, #4]
 8009b92:	460b      	mov	r3, r1
 8009b94:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009b96:	2300      	movs	r3, #0
 8009b98:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009b9a:	2300      	movs	r3, #0
 8009b9c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009ba4:	78fa      	ldrb	r2, [r7, #3]
 8009ba6:	4611      	mov	r1, r2
 8009ba8:	4618      	mov	r0, r3
 8009baa:	f7fa ffc3 	bl	8004b34 <HAL_PCD_EP_Close>
 8009bae:	4603      	mov	r3, r0
 8009bb0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009bb2:	7bfb      	ldrb	r3, [r7, #15]
 8009bb4:	4618      	mov	r0, r3
 8009bb6:	f000 f8eb 	bl	8009d90 <USBD_Get_USB_Status>
 8009bba:	4603      	mov	r3, r0
 8009bbc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009bbe:	7bbb      	ldrb	r3, [r7, #14]
}
 8009bc0:	4618      	mov	r0, r3
 8009bc2:	3710      	adds	r7, #16
 8009bc4:	46bd      	mov	sp, r7
 8009bc6:	bd80      	pop	{r7, pc}

08009bc8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009bc8:	b580      	push	{r7, lr}
 8009bca:	b084      	sub	sp, #16
 8009bcc:	af00      	add	r7, sp, #0
 8009bce:	6078      	str	r0, [r7, #4]
 8009bd0:	460b      	mov	r3, r1
 8009bd2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009bd4:	2300      	movs	r3, #0
 8009bd6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009bd8:	2300      	movs	r3, #0
 8009bda:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009be2:	78fa      	ldrb	r2, [r7, #3]
 8009be4:	4611      	mov	r1, r2
 8009be6:	4618      	mov	r0, r3
 8009be8:	f7fb f863 	bl	8004cb2 <HAL_PCD_EP_SetStall>
 8009bec:	4603      	mov	r3, r0
 8009bee:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009bf0:	7bfb      	ldrb	r3, [r7, #15]
 8009bf2:	4618      	mov	r0, r3
 8009bf4:	f000 f8cc 	bl	8009d90 <USBD_Get_USB_Status>
 8009bf8:	4603      	mov	r3, r0
 8009bfa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009bfc:	7bbb      	ldrb	r3, [r7, #14]
}
 8009bfe:	4618      	mov	r0, r3
 8009c00:	3710      	adds	r7, #16
 8009c02:	46bd      	mov	sp, r7
 8009c04:	bd80      	pop	{r7, pc}

08009c06 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009c06:	b580      	push	{r7, lr}
 8009c08:	b084      	sub	sp, #16
 8009c0a:	af00      	add	r7, sp, #0
 8009c0c:	6078      	str	r0, [r7, #4]
 8009c0e:	460b      	mov	r3, r1
 8009c10:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009c12:	2300      	movs	r3, #0
 8009c14:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009c16:	2300      	movs	r3, #0
 8009c18:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009c20:	78fa      	ldrb	r2, [r7, #3]
 8009c22:	4611      	mov	r1, r2
 8009c24:	4618      	mov	r0, r3
 8009c26:	f7fb f8a7 	bl	8004d78 <HAL_PCD_EP_ClrStall>
 8009c2a:	4603      	mov	r3, r0
 8009c2c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009c2e:	7bfb      	ldrb	r3, [r7, #15]
 8009c30:	4618      	mov	r0, r3
 8009c32:	f000 f8ad 	bl	8009d90 <USBD_Get_USB_Status>
 8009c36:	4603      	mov	r3, r0
 8009c38:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009c3a:	7bbb      	ldrb	r3, [r7, #14]
}
 8009c3c:	4618      	mov	r0, r3
 8009c3e:	3710      	adds	r7, #16
 8009c40:	46bd      	mov	sp, r7
 8009c42:	bd80      	pop	{r7, pc}

08009c44 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009c44:	b480      	push	{r7}
 8009c46:	b085      	sub	sp, #20
 8009c48:	af00      	add	r7, sp, #0
 8009c4a:	6078      	str	r0, [r7, #4]
 8009c4c:	460b      	mov	r3, r1
 8009c4e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009c56:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009c58:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	da0b      	bge.n	8009c78 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009c60:	78fb      	ldrb	r3, [r7, #3]
 8009c62:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009c66:	68f9      	ldr	r1, [r7, #12]
 8009c68:	4613      	mov	r3, r2
 8009c6a:	00db      	lsls	r3, r3, #3
 8009c6c:	4413      	add	r3, r2
 8009c6e:	009b      	lsls	r3, r3, #2
 8009c70:	440b      	add	r3, r1
 8009c72:	3316      	adds	r3, #22
 8009c74:	781b      	ldrb	r3, [r3, #0]
 8009c76:	e00b      	b.n	8009c90 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009c78:	78fb      	ldrb	r3, [r7, #3]
 8009c7a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009c7e:	68f9      	ldr	r1, [r7, #12]
 8009c80:	4613      	mov	r3, r2
 8009c82:	00db      	lsls	r3, r3, #3
 8009c84:	4413      	add	r3, r2
 8009c86:	009b      	lsls	r3, r3, #2
 8009c88:	440b      	add	r3, r1
 8009c8a:	f203 2356 	addw	r3, r3, #598	@ 0x256
 8009c8e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009c90:	4618      	mov	r0, r3
 8009c92:	3714      	adds	r7, #20
 8009c94:	46bd      	mov	sp, r7
 8009c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c9a:	4770      	bx	lr

08009c9c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009c9c:	b580      	push	{r7, lr}
 8009c9e:	b084      	sub	sp, #16
 8009ca0:	af00      	add	r7, sp, #0
 8009ca2:	6078      	str	r0, [r7, #4]
 8009ca4:	460b      	mov	r3, r1
 8009ca6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009ca8:	2300      	movs	r3, #0
 8009caa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009cac:	2300      	movs	r3, #0
 8009cae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009cb6:	78fa      	ldrb	r2, [r7, #3]
 8009cb8:	4611      	mov	r1, r2
 8009cba:	4618      	mov	r0, r3
 8009cbc:	f7fa feac 	bl	8004a18 <HAL_PCD_SetAddress>
 8009cc0:	4603      	mov	r3, r0
 8009cc2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009cc4:	7bfb      	ldrb	r3, [r7, #15]
 8009cc6:	4618      	mov	r0, r3
 8009cc8:	f000 f862 	bl	8009d90 <USBD_Get_USB_Status>
 8009ccc:	4603      	mov	r3, r0
 8009cce:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009cd0:	7bbb      	ldrb	r3, [r7, #14]
}
 8009cd2:	4618      	mov	r0, r3
 8009cd4:	3710      	adds	r7, #16
 8009cd6:	46bd      	mov	sp, r7
 8009cd8:	bd80      	pop	{r7, pc}

08009cda <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009cda:	b580      	push	{r7, lr}
 8009cdc:	b086      	sub	sp, #24
 8009cde:	af00      	add	r7, sp, #0
 8009ce0:	60f8      	str	r0, [r7, #12]
 8009ce2:	607a      	str	r2, [r7, #4]
 8009ce4:	603b      	str	r3, [r7, #0]
 8009ce6:	460b      	mov	r3, r1
 8009ce8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009cea:	2300      	movs	r3, #0
 8009cec:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009cee:	2300      	movs	r3, #0
 8009cf0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8009cf8:	7af9      	ldrb	r1, [r7, #11]
 8009cfa:	683b      	ldr	r3, [r7, #0]
 8009cfc:	687a      	ldr	r2, [r7, #4]
 8009cfe:	f7fa ff9e 	bl	8004c3e <HAL_PCD_EP_Transmit>
 8009d02:	4603      	mov	r3, r0
 8009d04:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009d06:	7dfb      	ldrb	r3, [r7, #23]
 8009d08:	4618      	mov	r0, r3
 8009d0a:	f000 f841 	bl	8009d90 <USBD_Get_USB_Status>
 8009d0e:	4603      	mov	r3, r0
 8009d10:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009d12:	7dbb      	ldrb	r3, [r7, #22]
}
 8009d14:	4618      	mov	r0, r3
 8009d16:	3718      	adds	r7, #24
 8009d18:	46bd      	mov	sp, r7
 8009d1a:	bd80      	pop	{r7, pc}

08009d1c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009d1c:	b580      	push	{r7, lr}
 8009d1e:	b086      	sub	sp, #24
 8009d20:	af00      	add	r7, sp, #0
 8009d22:	60f8      	str	r0, [r7, #12]
 8009d24:	607a      	str	r2, [r7, #4]
 8009d26:	603b      	str	r3, [r7, #0]
 8009d28:	460b      	mov	r3, r1
 8009d2a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009d2c:	2300      	movs	r3, #0
 8009d2e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009d30:	2300      	movs	r3, #0
 8009d32:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8009d3a:	7af9      	ldrb	r1, [r7, #11]
 8009d3c:	683b      	ldr	r3, [r7, #0]
 8009d3e:	687a      	ldr	r2, [r7, #4]
 8009d40:	f7fa ff42 	bl	8004bc8 <HAL_PCD_EP_Receive>
 8009d44:	4603      	mov	r3, r0
 8009d46:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009d48:	7dfb      	ldrb	r3, [r7, #23]
 8009d4a:	4618      	mov	r0, r3
 8009d4c:	f000 f820 	bl	8009d90 <USBD_Get_USB_Status>
 8009d50:	4603      	mov	r3, r0
 8009d52:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009d54:	7dbb      	ldrb	r3, [r7, #22]
}
 8009d56:	4618      	mov	r0, r3
 8009d58:	3718      	adds	r7, #24
 8009d5a:	46bd      	mov	sp, r7
 8009d5c:	bd80      	pop	{r7, pc}
	...

08009d60 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009d60:	b480      	push	{r7}
 8009d62:	b083      	sub	sp, #12
 8009d64:	af00      	add	r7, sp, #0
 8009d66:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009d68:	4b03      	ldr	r3, [pc, #12]	@ (8009d78 <USBD_static_malloc+0x18>)
}
 8009d6a:	4618      	mov	r0, r3
 8009d6c:	370c      	adds	r7, #12
 8009d6e:	46bd      	mov	sp, r7
 8009d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d74:	4770      	bx	lr
 8009d76:	bf00      	nop
 8009d78:	20000ea0 	.word	0x20000ea0

08009d7c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009d7c:	b480      	push	{r7}
 8009d7e:	b083      	sub	sp, #12
 8009d80:	af00      	add	r7, sp, #0
 8009d82:	6078      	str	r0, [r7, #4]

}
 8009d84:	bf00      	nop
 8009d86:	370c      	adds	r7, #12
 8009d88:	46bd      	mov	sp, r7
 8009d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d8e:	4770      	bx	lr

08009d90 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009d90:	b480      	push	{r7}
 8009d92:	b085      	sub	sp, #20
 8009d94:	af00      	add	r7, sp, #0
 8009d96:	4603      	mov	r3, r0
 8009d98:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009d9a:	2300      	movs	r3, #0
 8009d9c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009d9e:	79fb      	ldrb	r3, [r7, #7]
 8009da0:	2b03      	cmp	r3, #3
 8009da2:	d817      	bhi.n	8009dd4 <USBD_Get_USB_Status+0x44>
 8009da4:	a201      	add	r2, pc, #4	@ (adr r2, 8009dac <USBD_Get_USB_Status+0x1c>)
 8009da6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009daa:	bf00      	nop
 8009dac:	08009dbd 	.word	0x08009dbd
 8009db0:	08009dc3 	.word	0x08009dc3
 8009db4:	08009dc9 	.word	0x08009dc9
 8009db8:	08009dcf 	.word	0x08009dcf
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009dbc:	2300      	movs	r3, #0
 8009dbe:	73fb      	strb	r3, [r7, #15]
    break;
 8009dc0:	e00b      	b.n	8009dda <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009dc2:	2303      	movs	r3, #3
 8009dc4:	73fb      	strb	r3, [r7, #15]
    break;
 8009dc6:	e008      	b.n	8009dda <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009dc8:	2301      	movs	r3, #1
 8009dca:	73fb      	strb	r3, [r7, #15]
    break;
 8009dcc:	e005      	b.n	8009dda <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009dce:	2303      	movs	r3, #3
 8009dd0:	73fb      	strb	r3, [r7, #15]
    break;
 8009dd2:	e002      	b.n	8009dda <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009dd4:	2303      	movs	r3, #3
 8009dd6:	73fb      	strb	r3, [r7, #15]
    break;
 8009dd8:	bf00      	nop
  }
  return usb_status;
 8009dda:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ddc:	4618      	mov	r0, r3
 8009dde:	3714      	adds	r7, #20
 8009de0:	46bd      	mov	sp, r7
 8009de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009de6:	4770      	bx	lr

08009de8 <__cvt>:
 8009de8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009dec:	ec57 6b10 	vmov	r6, r7, d0
 8009df0:	2f00      	cmp	r7, #0
 8009df2:	460c      	mov	r4, r1
 8009df4:	4619      	mov	r1, r3
 8009df6:	463b      	mov	r3, r7
 8009df8:	bfbb      	ittet	lt
 8009dfa:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8009dfe:	461f      	movlt	r7, r3
 8009e00:	2300      	movge	r3, #0
 8009e02:	232d      	movlt	r3, #45	@ 0x2d
 8009e04:	700b      	strb	r3, [r1, #0]
 8009e06:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009e08:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8009e0c:	4691      	mov	r9, r2
 8009e0e:	f023 0820 	bic.w	r8, r3, #32
 8009e12:	bfbc      	itt	lt
 8009e14:	4632      	movlt	r2, r6
 8009e16:	4616      	movlt	r6, r2
 8009e18:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009e1c:	d005      	beq.n	8009e2a <__cvt+0x42>
 8009e1e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8009e22:	d100      	bne.n	8009e26 <__cvt+0x3e>
 8009e24:	3401      	adds	r4, #1
 8009e26:	2102      	movs	r1, #2
 8009e28:	e000      	b.n	8009e2c <__cvt+0x44>
 8009e2a:	2103      	movs	r1, #3
 8009e2c:	ab03      	add	r3, sp, #12
 8009e2e:	9301      	str	r3, [sp, #4]
 8009e30:	ab02      	add	r3, sp, #8
 8009e32:	9300      	str	r3, [sp, #0]
 8009e34:	ec47 6b10 	vmov	d0, r6, r7
 8009e38:	4653      	mov	r3, sl
 8009e3a:	4622      	mov	r2, r4
 8009e3c:	f000 fe5c 	bl	800aaf8 <_dtoa_r>
 8009e40:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8009e44:	4605      	mov	r5, r0
 8009e46:	d119      	bne.n	8009e7c <__cvt+0x94>
 8009e48:	f019 0f01 	tst.w	r9, #1
 8009e4c:	d00e      	beq.n	8009e6c <__cvt+0x84>
 8009e4e:	eb00 0904 	add.w	r9, r0, r4
 8009e52:	2200      	movs	r2, #0
 8009e54:	2300      	movs	r3, #0
 8009e56:	4630      	mov	r0, r6
 8009e58:	4639      	mov	r1, r7
 8009e5a:	f7f6 fe45 	bl	8000ae8 <__aeabi_dcmpeq>
 8009e5e:	b108      	cbz	r0, 8009e64 <__cvt+0x7c>
 8009e60:	f8cd 900c 	str.w	r9, [sp, #12]
 8009e64:	2230      	movs	r2, #48	@ 0x30
 8009e66:	9b03      	ldr	r3, [sp, #12]
 8009e68:	454b      	cmp	r3, r9
 8009e6a:	d31e      	bcc.n	8009eaa <__cvt+0xc2>
 8009e6c:	9b03      	ldr	r3, [sp, #12]
 8009e6e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009e70:	1b5b      	subs	r3, r3, r5
 8009e72:	4628      	mov	r0, r5
 8009e74:	6013      	str	r3, [r2, #0]
 8009e76:	b004      	add	sp, #16
 8009e78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e7c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009e80:	eb00 0904 	add.w	r9, r0, r4
 8009e84:	d1e5      	bne.n	8009e52 <__cvt+0x6a>
 8009e86:	7803      	ldrb	r3, [r0, #0]
 8009e88:	2b30      	cmp	r3, #48	@ 0x30
 8009e8a:	d10a      	bne.n	8009ea2 <__cvt+0xba>
 8009e8c:	2200      	movs	r2, #0
 8009e8e:	2300      	movs	r3, #0
 8009e90:	4630      	mov	r0, r6
 8009e92:	4639      	mov	r1, r7
 8009e94:	f7f6 fe28 	bl	8000ae8 <__aeabi_dcmpeq>
 8009e98:	b918      	cbnz	r0, 8009ea2 <__cvt+0xba>
 8009e9a:	f1c4 0401 	rsb	r4, r4, #1
 8009e9e:	f8ca 4000 	str.w	r4, [sl]
 8009ea2:	f8da 3000 	ldr.w	r3, [sl]
 8009ea6:	4499      	add	r9, r3
 8009ea8:	e7d3      	b.n	8009e52 <__cvt+0x6a>
 8009eaa:	1c59      	adds	r1, r3, #1
 8009eac:	9103      	str	r1, [sp, #12]
 8009eae:	701a      	strb	r2, [r3, #0]
 8009eb0:	e7d9      	b.n	8009e66 <__cvt+0x7e>

08009eb2 <__exponent>:
 8009eb2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009eb4:	2900      	cmp	r1, #0
 8009eb6:	bfba      	itte	lt
 8009eb8:	4249      	neglt	r1, r1
 8009eba:	232d      	movlt	r3, #45	@ 0x2d
 8009ebc:	232b      	movge	r3, #43	@ 0x2b
 8009ebe:	2909      	cmp	r1, #9
 8009ec0:	7002      	strb	r2, [r0, #0]
 8009ec2:	7043      	strb	r3, [r0, #1]
 8009ec4:	dd29      	ble.n	8009f1a <__exponent+0x68>
 8009ec6:	f10d 0307 	add.w	r3, sp, #7
 8009eca:	461d      	mov	r5, r3
 8009ecc:	270a      	movs	r7, #10
 8009ece:	461a      	mov	r2, r3
 8009ed0:	fbb1 f6f7 	udiv	r6, r1, r7
 8009ed4:	fb07 1416 	mls	r4, r7, r6, r1
 8009ed8:	3430      	adds	r4, #48	@ 0x30
 8009eda:	f802 4c01 	strb.w	r4, [r2, #-1]
 8009ede:	460c      	mov	r4, r1
 8009ee0:	2c63      	cmp	r4, #99	@ 0x63
 8009ee2:	f103 33ff 	add.w	r3, r3, #4294967295
 8009ee6:	4631      	mov	r1, r6
 8009ee8:	dcf1      	bgt.n	8009ece <__exponent+0x1c>
 8009eea:	3130      	adds	r1, #48	@ 0x30
 8009eec:	1e94      	subs	r4, r2, #2
 8009eee:	f803 1c01 	strb.w	r1, [r3, #-1]
 8009ef2:	1c41      	adds	r1, r0, #1
 8009ef4:	4623      	mov	r3, r4
 8009ef6:	42ab      	cmp	r3, r5
 8009ef8:	d30a      	bcc.n	8009f10 <__exponent+0x5e>
 8009efa:	f10d 0309 	add.w	r3, sp, #9
 8009efe:	1a9b      	subs	r3, r3, r2
 8009f00:	42ac      	cmp	r4, r5
 8009f02:	bf88      	it	hi
 8009f04:	2300      	movhi	r3, #0
 8009f06:	3302      	adds	r3, #2
 8009f08:	4403      	add	r3, r0
 8009f0a:	1a18      	subs	r0, r3, r0
 8009f0c:	b003      	add	sp, #12
 8009f0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009f10:	f813 6b01 	ldrb.w	r6, [r3], #1
 8009f14:	f801 6f01 	strb.w	r6, [r1, #1]!
 8009f18:	e7ed      	b.n	8009ef6 <__exponent+0x44>
 8009f1a:	2330      	movs	r3, #48	@ 0x30
 8009f1c:	3130      	adds	r1, #48	@ 0x30
 8009f1e:	7083      	strb	r3, [r0, #2]
 8009f20:	70c1      	strb	r1, [r0, #3]
 8009f22:	1d03      	adds	r3, r0, #4
 8009f24:	e7f1      	b.n	8009f0a <__exponent+0x58>
	...

08009f28 <_printf_float>:
 8009f28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f2c:	b08d      	sub	sp, #52	@ 0x34
 8009f2e:	460c      	mov	r4, r1
 8009f30:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8009f34:	4616      	mov	r6, r2
 8009f36:	461f      	mov	r7, r3
 8009f38:	4605      	mov	r5, r0
 8009f3a:	f000 fcdb 	bl	800a8f4 <_localeconv_r>
 8009f3e:	6803      	ldr	r3, [r0, #0]
 8009f40:	9304      	str	r3, [sp, #16]
 8009f42:	4618      	mov	r0, r3
 8009f44:	f7f6 f9a4 	bl	8000290 <strlen>
 8009f48:	2300      	movs	r3, #0
 8009f4a:	930a      	str	r3, [sp, #40]	@ 0x28
 8009f4c:	f8d8 3000 	ldr.w	r3, [r8]
 8009f50:	9005      	str	r0, [sp, #20]
 8009f52:	3307      	adds	r3, #7
 8009f54:	f023 0307 	bic.w	r3, r3, #7
 8009f58:	f103 0208 	add.w	r2, r3, #8
 8009f5c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8009f60:	f8d4 b000 	ldr.w	fp, [r4]
 8009f64:	f8c8 2000 	str.w	r2, [r8]
 8009f68:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009f6c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8009f70:	9307      	str	r3, [sp, #28]
 8009f72:	f8cd 8018 	str.w	r8, [sp, #24]
 8009f76:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8009f7a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009f7e:	4b9c      	ldr	r3, [pc, #624]	@ (800a1f0 <_printf_float+0x2c8>)
 8009f80:	f04f 32ff 	mov.w	r2, #4294967295
 8009f84:	f7f6 fde2 	bl	8000b4c <__aeabi_dcmpun>
 8009f88:	bb70      	cbnz	r0, 8009fe8 <_printf_float+0xc0>
 8009f8a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009f8e:	4b98      	ldr	r3, [pc, #608]	@ (800a1f0 <_printf_float+0x2c8>)
 8009f90:	f04f 32ff 	mov.w	r2, #4294967295
 8009f94:	f7f6 fdbc 	bl	8000b10 <__aeabi_dcmple>
 8009f98:	bb30      	cbnz	r0, 8009fe8 <_printf_float+0xc0>
 8009f9a:	2200      	movs	r2, #0
 8009f9c:	2300      	movs	r3, #0
 8009f9e:	4640      	mov	r0, r8
 8009fa0:	4649      	mov	r1, r9
 8009fa2:	f7f6 fdab 	bl	8000afc <__aeabi_dcmplt>
 8009fa6:	b110      	cbz	r0, 8009fae <_printf_float+0x86>
 8009fa8:	232d      	movs	r3, #45	@ 0x2d
 8009faa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009fae:	4a91      	ldr	r2, [pc, #580]	@ (800a1f4 <_printf_float+0x2cc>)
 8009fb0:	4b91      	ldr	r3, [pc, #580]	@ (800a1f8 <_printf_float+0x2d0>)
 8009fb2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8009fb6:	bf8c      	ite	hi
 8009fb8:	4690      	movhi	r8, r2
 8009fba:	4698      	movls	r8, r3
 8009fbc:	2303      	movs	r3, #3
 8009fbe:	6123      	str	r3, [r4, #16]
 8009fc0:	f02b 0304 	bic.w	r3, fp, #4
 8009fc4:	6023      	str	r3, [r4, #0]
 8009fc6:	f04f 0900 	mov.w	r9, #0
 8009fca:	9700      	str	r7, [sp, #0]
 8009fcc:	4633      	mov	r3, r6
 8009fce:	aa0b      	add	r2, sp, #44	@ 0x2c
 8009fd0:	4621      	mov	r1, r4
 8009fd2:	4628      	mov	r0, r5
 8009fd4:	f000 f9d2 	bl	800a37c <_printf_common>
 8009fd8:	3001      	adds	r0, #1
 8009fda:	f040 808d 	bne.w	800a0f8 <_printf_float+0x1d0>
 8009fde:	f04f 30ff 	mov.w	r0, #4294967295
 8009fe2:	b00d      	add	sp, #52	@ 0x34
 8009fe4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009fe8:	4642      	mov	r2, r8
 8009fea:	464b      	mov	r3, r9
 8009fec:	4640      	mov	r0, r8
 8009fee:	4649      	mov	r1, r9
 8009ff0:	f7f6 fdac 	bl	8000b4c <__aeabi_dcmpun>
 8009ff4:	b140      	cbz	r0, 800a008 <_printf_float+0xe0>
 8009ff6:	464b      	mov	r3, r9
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	bfbc      	itt	lt
 8009ffc:	232d      	movlt	r3, #45	@ 0x2d
 8009ffe:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800a002:	4a7e      	ldr	r2, [pc, #504]	@ (800a1fc <_printf_float+0x2d4>)
 800a004:	4b7e      	ldr	r3, [pc, #504]	@ (800a200 <_printf_float+0x2d8>)
 800a006:	e7d4      	b.n	8009fb2 <_printf_float+0x8a>
 800a008:	6863      	ldr	r3, [r4, #4]
 800a00a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800a00e:	9206      	str	r2, [sp, #24]
 800a010:	1c5a      	adds	r2, r3, #1
 800a012:	d13b      	bne.n	800a08c <_printf_float+0x164>
 800a014:	2306      	movs	r3, #6
 800a016:	6063      	str	r3, [r4, #4]
 800a018:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800a01c:	2300      	movs	r3, #0
 800a01e:	6022      	str	r2, [r4, #0]
 800a020:	9303      	str	r3, [sp, #12]
 800a022:	ab0a      	add	r3, sp, #40	@ 0x28
 800a024:	e9cd a301 	strd	sl, r3, [sp, #4]
 800a028:	ab09      	add	r3, sp, #36	@ 0x24
 800a02a:	9300      	str	r3, [sp, #0]
 800a02c:	6861      	ldr	r1, [r4, #4]
 800a02e:	ec49 8b10 	vmov	d0, r8, r9
 800a032:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800a036:	4628      	mov	r0, r5
 800a038:	f7ff fed6 	bl	8009de8 <__cvt>
 800a03c:	9b06      	ldr	r3, [sp, #24]
 800a03e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a040:	2b47      	cmp	r3, #71	@ 0x47
 800a042:	4680      	mov	r8, r0
 800a044:	d129      	bne.n	800a09a <_printf_float+0x172>
 800a046:	1cc8      	adds	r0, r1, #3
 800a048:	db02      	blt.n	800a050 <_printf_float+0x128>
 800a04a:	6863      	ldr	r3, [r4, #4]
 800a04c:	4299      	cmp	r1, r3
 800a04e:	dd41      	ble.n	800a0d4 <_printf_float+0x1ac>
 800a050:	f1aa 0a02 	sub.w	sl, sl, #2
 800a054:	fa5f fa8a 	uxtb.w	sl, sl
 800a058:	3901      	subs	r1, #1
 800a05a:	4652      	mov	r2, sl
 800a05c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800a060:	9109      	str	r1, [sp, #36]	@ 0x24
 800a062:	f7ff ff26 	bl	8009eb2 <__exponent>
 800a066:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a068:	1813      	adds	r3, r2, r0
 800a06a:	2a01      	cmp	r2, #1
 800a06c:	4681      	mov	r9, r0
 800a06e:	6123      	str	r3, [r4, #16]
 800a070:	dc02      	bgt.n	800a078 <_printf_float+0x150>
 800a072:	6822      	ldr	r2, [r4, #0]
 800a074:	07d2      	lsls	r2, r2, #31
 800a076:	d501      	bpl.n	800a07c <_printf_float+0x154>
 800a078:	3301      	adds	r3, #1
 800a07a:	6123      	str	r3, [r4, #16]
 800a07c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800a080:	2b00      	cmp	r3, #0
 800a082:	d0a2      	beq.n	8009fca <_printf_float+0xa2>
 800a084:	232d      	movs	r3, #45	@ 0x2d
 800a086:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a08a:	e79e      	b.n	8009fca <_printf_float+0xa2>
 800a08c:	9a06      	ldr	r2, [sp, #24]
 800a08e:	2a47      	cmp	r2, #71	@ 0x47
 800a090:	d1c2      	bne.n	800a018 <_printf_float+0xf0>
 800a092:	2b00      	cmp	r3, #0
 800a094:	d1c0      	bne.n	800a018 <_printf_float+0xf0>
 800a096:	2301      	movs	r3, #1
 800a098:	e7bd      	b.n	800a016 <_printf_float+0xee>
 800a09a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a09e:	d9db      	bls.n	800a058 <_printf_float+0x130>
 800a0a0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800a0a4:	d118      	bne.n	800a0d8 <_printf_float+0x1b0>
 800a0a6:	2900      	cmp	r1, #0
 800a0a8:	6863      	ldr	r3, [r4, #4]
 800a0aa:	dd0b      	ble.n	800a0c4 <_printf_float+0x19c>
 800a0ac:	6121      	str	r1, [r4, #16]
 800a0ae:	b913      	cbnz	r3, 800a0b6 <_printf_float+0x18e>
 800a0b0:	6822      	ldr	r2, [r4, #0]
 800a0b2:	07d0      	lsls	r0, r2, #31
 800a0b4:	d502      	bpl.n	800a0bc <_printf_float+0x194>
 800a0b6:	3301      	adds	r3, #1
 800a0b8:	440b      	add	r3, r1
 800a0ba:	6123      	str	r3, [r4, #16]
 800a0bc:	65a1      	str	r1, [r4, #88]	@ 0x58
 800a0be:	f04f 0900 	mov.w	r9, #0
 800a0c2:	e7db      	b.n	800a07c <_printf_float+0x154>
 800a0c4:	b913      	cbnz	r3, 800a0cc <_printf_float+0x1a4>
 800a0c6:	6822      	ldr	r2, [r4, #0]
 800a0c8:	07d2      	lsls	r2, r2, #31
 800a0ca:	d501      	bpl.n	800a0d0 <_printf_float+0x1a8>
 800a0cc:	3302      	adds	r3, #2
 800a0ce:	e7f4      	b.n	800a0ba <_printf_float+0x192>
 800a0d0:	2301      	movs	r3, #1
 800a0d2:	e7f2      	b.n	800a0ba <_printf_float+0x192>
 800a0d4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800a0d8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a0da:	4299      	cmp	r1, r3
 800a0dc:	db05      	blt.n	800a0ea <_printf_float+0x1c2>
 800a0de:	6823      	ldr	r3, [r4, #0]
 800a0e0:	6121      	str	r1, [r4, #16]
 800a0e2:	07d8      	lsls	r0, r3, #31
 800a0e4:	d5ea      	bpl.n	800a0bc <_printf_float+0x194>
 800a0e6:	1c4b      	adds	r3, r1, #1
 800a0e8:	e7e7      	b.n	800a0ba <_printf_float+0x192>
 800a0ea:	2900      	cmp	r1, #0
 800a0ec:	bfd4      	ite	le
 800a0ee:	f1c1 0202 	rsble	r2, r1, #2
 800a0f2:	2201      	movgt	r2, #1
 800a0f4:	4413      	add	r3, r2
 800a0f6:	e7e0      	b.n	800a0ba <_printf_float+0x192>
 800a0f8:	6823      	ldr	r3, [r4, #0]
 800a0fa:	055a      	lsls	r2, r3, #21
 800a0fc:	d407      	bmi.n	800a10e <_printf_float+0x1e6>
 800a0fe:	6923      	ldr	r3, [r4, #16]
 800a100:	4642      	mov	r2, r8
 800a102:	4631      	mov	r1, r6
 800a104:	4628      	mov	r0, r5
 800a106:	47b8      	blx	r7
 800a108:	3001      	adds	r0, #1
 800a10a:	d12b      	bne.n	800a164 <_printf_float+0x23c>
 800a10c:	e767      	b.n	8009fde <_printf_float+0xb6>
 800a10e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a112:	f240 80dd 	bls.w	800a2d0 <_printf_float+0x3a8>
 800a116:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a11a:	2200      	movs	r2, #0
 800a11c:	2300      	movs	r3, #0
 800a11e:	f7f6 fce3 	bl	8000ae8 <__aeabi_dcmpeq>
 800a122:	2800      	cmp	r0, #0
 800a124:	d033      	beq.n	800a18e <_printf_float+0x266>
 800a126:	4a37      	ldr	r2, [pc, #220]	@ (800a204 <_printf_float+0x2dc>)
 800a128:	2301      	movs	r3, #1
 800a12a:	4631      	mov	r1, r6
 800a12c:	4628      	mov	r0, r5
 800a12e:	47b8      	blx	r7
 800a130:	3001      	adds	r0, #1
 800a132:	f43f af54 	beq.w	8009fde <_printf_float+0xb6>
 800a136:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800a13a:	4543      	cmp	r3, r8
 800a13c:	db02      	blt.n	800a144 <_printf_float+0x21c>
 800a13e:	6823      	ldr	r3, [r4, #0]
 800a140:	07d8      	lsls	r0, r3, #31
 800a142:	d50f      	bpl.n	800a164 <_printf_float+0x23c>
 800a144:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a148:	4631      	mov	r1, r6
 800a14a:	4628      	mov	r0, r5
 800a14c:	47b8      	blx	r7
 800a14e:	3001      	adds	r0, #1
 800a150:	f43f af45 	beq.w	8009fde <_printf_float+0xb6>
 800a154:	f04f 0900 	mov.w	r9, #0
 800a158:	f108 38ff 	add.w	r8, r8, #4294967295
 800a15c:	f104 0a1a 	add.w	sl, r4, #26
 800a160:	45c8      	cmp	r8, r9
 800a162:	dc09      	bgt.n	800a178 <_printf_float+0x250>
 800a164:	6823      	ldr	r3, [r4, #0]
 800a166:	079b      	lsls	r3, r3, #30
 800a168:	f100 8103 	bmi.w	800a372 <_printf_float+0x44a>
 800a16c:	68e0      	ldr	r0, [r4, #12]
 800a16e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a170:	4298      	cmp	r0, r3
 800a172:	bfb8      	it	lt
 800a174:	4618      	movlt	r0, r3
 800a176:	e734      	b.n	8009fe2 <_printf_float+0xba>
 800a178:	2301      	movs	r3, #1
 800a17a:	4652      	mov	r2, sl
 800a17c:	4631      	mov	r1, r6
 800a17e:	4628      	mov	r0, r5
 800a180:	47b8      	blx	r7
 800a182:	3001      	adds	r0, #1
 800a184:	f43f af2b 	beq.w	8009fde <_printf_float+0xb6>
 800a188:	f109 0901 	add.w	r9, r9, #1
 800a18c:	e7e8      	b.n	800a160 <_printf_float+0x238>
 800a18e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a190:	2b00      	cmp	r3, #0
 800a192:	dc39      	bgt.n	800a208 <_printf_float+0x2e0>
 800a194:	4a1b      	ldr	r2, [pc, #108]	@ (800a204 <_printf_float+0x2dc>)
 800a196:	2301      	movs	r3, #1
 800a198:	4631      	mov	r1, r6
 800a19a:	4628      	mov	r0, r5
 800a19c:	47b8      	blx	r7
 800a19e:	3001      	adds	r0, #1
 800a1a0:	f43f af1d 	beq.w	8009fde <_printf_float+0xb6>
 800a1a4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800a1a8:	ea59 0303 	orrs.w	r3, r9, r3
 800a1ac:	d102      	bne.n	800a1b4 <_printf_float+0x28c>
 800a1ae:	6823      	ldr	r3, [r4, #0]
 800a1b0:	07d9      	lsls	r1, r3, #31
 800a1b2:	d5d7      	bpl.n	800a164 <_printf_float+0x23c>
 800a1b4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a1b8:	4631      	mov	r1, r6
 800a1ba:	4628      	mov	r0, r5
 800a1bc:	47b8      	blx	r7
 800a1be:	3001      	adds	r0, #1
 800a1c0:	f43f af0d 	beq.w	8009fde <_printf_float+0xb6>
 800a1c4:	f04f 0a00 	mov.w	sl, #0
 800a1c8:	f104 0b1a 	add.w	fp, r4, #26
 800a1cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a1ce:	425b      	negs	r3, r3
 800a1d0:	4553      	cmp	r3, sl
 800a1d2:	dc01      	bgt.n	800a1d8 <_printf_float+0x2b0>
 800a1d4:	464b      	mov	r3, r9
 800a1d6:	e793      	b.n	800a100 <_printf_float+0x1d8>
 800a1d8:	2301      	movs	r3, #1
 800a1da:	465a      	mov	r2, fp
 800a1dc:	4631      	mov	r1, r6
 800a1de:	4628      	mov	r0, r5
 800a1e0:	47b8      	blx	r7
 800a1e2:	3001      	adds	r0, #1
 800a1e4:	f43f aefb 	beq.w	8009fde <_printf_float+0xb6>
 800a1e8:	f10a 0a01 	add.w	sl, sl, #1
 800a1ec:	e7ee      	b.n	800a1cc <_printf_float+0x2a4>
 800a1ee:	bf00      	nop
 800a1f0:	7fefffff 	.word	0x7fefffff
 800a1f4:	0800d550 	.word	0x0800d550
 800a1f8:	0800d54c 	.word	0x0800d54c
 800a1fc:	0800d558 	.word	0x0800d558
 800a200:	0800d554 	.word	0x0800d554
 800a204:	0800d55c 	.word	0x0800d55c
 800a208:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a20a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800a20e:	4553      	cmp	r3, sl
 800a210:	bfa8      	it	ge
 800a212:	4653      	movge	r3, sl
 800a214:	2b00      	cmp	r3, #0
 800a216:	4699      	mov	r9, r3
 800a218:	dc36      	bgt.n	800a288 <_printf_float+0x360>
 800a21a:	f04f 0b00 	mov.w	fp, #0
 800a21e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a222:	f104 021a 	add.w	r2, r4, #26
 800a226:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a228:	9306      	str	r3, [sp, #24]
 800a22a:	eba3 0309 	sub.w	r3, r3, r9
 800a22e:	455b      	cmp	r3, fp
 800a230:	dc31      	bgt.n	800a296 <_printf_float+0x36e>
 800a232:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a234:	459a      	cmp	sl, r3
 800a236:	dc3a      	bgt.n	800a2ae <_printf_float+0x386>
 800a238:	6823      	ldr	r3, [r4, #0]
 800a23a:	07da      	lsls	r2, r3, #31
 800a23c:	d437      	bmi.n	800a2ae <_printf_float+0x386>
 800a23e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a240:	ebaa 0903 	sub.w	r9, sl, r3
 800a244:	9b06      	ldr	r3, [sp, #24]
 800a246:	ebaa 0303 	sub.w	r3, sl, r3
 800a24a:	4599      	cmp	r9, r3
 800a24c:	bfa8      	it	ge
 800a24e:	4699      	movge	r9, r3
 800a250:	f1b9 0f00 	cmp.w	r9, #0
 800a254:	dc33      	bgt.n	800a2be <_printf_float+0x396>
 800a256:	f04f 0800 	mov.w	r8, #0
 800a25a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a25e:	f104 0b1a 	add.w	fp, r4, #26
 800a262:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a264:	ebaa 0303 	sub.w	r3, sl, r3
 800a268:	eba3 0309 	sub.w	r3, r3, r9
 800a26c:	4543      	cmp	r3, r8
 800a26e:	f77f af79 	ble.w	800a164 <_printf_float+0x23c>
 800a272:	2301      	movs	r3, #1
 800a274:	465a      	mov	r2, fp
 800a276:	4631      	mov	r1, r6
 800a278:	4628      	mov	r0, r5
 800a27a:	47b8      	blx	r7
 800a27c:	3001      	adds	r0, #1
 800a27e:	f43f aeae 	beq.w	8009fde <_printf_float+0xb6>
 800a282:	f108 0801 	add.w	r8, r8, #1
 800a286:	e7ec      	b.n	800a262 <_printf_float+0x33a>
 800a288:	4642      	mov	r2, r8
 800a28a:	4631      	mov	r1, r6
 800a28c:	4628      	mov	r0, r5
 800a28e:	47b8      	blx	r7
 800a290:	3001      	adds	r0, #1
 800a292:	d1c2      	bne.n	800a21a <_printf_float+0x2f2>
 800a294:	e6a3      	b.n	8009fde <_printf_float+0xb6>
 800a296:	2301      	movs	r3, #1
 800a298:	4631      	mov	r1, r6
 800a29a:	4628      	mov	r0, r5
 800a29c:	9206      	str	r2, [sp, #24]
 800a29e:	47b8      	blx	r7
 800a2a0:	3001      	adds	r0, #1
 800a2a2:	f43f ae9c 	beq.w	8009fde <_printf_float+0xb6>
 800a2a6:	9a06      	ldr	r2, [sp, #24]
 800a2a8:	f10b 0b01 	add.w	fp, fp, #1
 800a2ac:	e7bb      	b.n	800a226 <_printf_float+0x2fe>
 800a2ae:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a2b2:	4631      	mov	r1, r6
 800a2b4:	4628      	mov	r0, r5
 800a2b6:	47b8      	blx	r7
 800a2b8:	3001      	adds	r0, #1
 800a2ba:	d1c0      	bne.n	800a23e <_printf_float+0x316>
 800a2bc:	e68f      	b.n	8009fde <_printf_float+0xb6>
 800a2be:	9a06      	ldr	r2, [sp, #24]
 800a2c0:	464b      	mov	r3, r9
 800a2c2:	4442      	add	r2, r8
 800a2c4:	4631      	mov	r1, r6
 800a2c6:	4628      	mov	r0, r5
 800a2c8:	47b8      	blx	r7
 800a2ca:	3001      	adds	r0, #1
 800a2cc:	d1c3      	bne.n	800a256 <_printf_float+0x32e>
 800a2ce:	e686      	b.n	8009fde <_printf_float+0xb6>
 800a2d0:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800a2d4:	f1ba 0f01 	cmp.w	sl, #1
 800a2d8:	dc01      	bgt.n	800a2de <_printf_float+0x3b6>
 800a2da:	07db      	lsls	r3, r3, #31
 800a2dc:	d536      	bpl.n	800a34c <_printf_float+0x424>
 800a2de:	2301      	movs	r3, #1
 800a2e0:	4642      	mov	r2, r8
 800a2e2:	4631      	mov	r1, r6
 800a2e4:	4628      	mov	r0, r5
 800a2e6:	47b8      	blx	r7
 800a2e8:	3001      	adds	r0, #1
 800a2ea:	f43f ae78 	beq.w	8009fde <_printf_float+0xb6>
 800a2ee:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a2f2:	4631      	mov	r1, r6
 800a2f4:	4628      	mov	r0, r5
 800a2f6:	47b8      	blx	r7
 800a2f8:	3001      	adds	r0, #1
 800a2fa:	f43f ae70 	beq.w	8009fde <_printf_float+0xb6>
 800a2fe:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a302:	2200      	movs	r2, #0
 800a304:	2300      	movs	r3, #0
 800a306:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a30a:	f7f6 fbed 	bl	8000ae8 <__aeabi_dcmpeq>
 800a30e:	b9c0      	cbnz	r0, 800a342 <_printf_float+0x41a>
 800a310:	4653      	mov	r3, sl
 800a312:	f108 0201 	add.w	r2, r8, #1
 800a316:	4631      	mov	r1, r6
 800a318:	4628      	mov	r0, r5
 800a31a:	47b8      	blx	r7
 800a31c:	3001      	adds	r0, #1
 800a31e:	d10c      	bne.n	800a33a <_printf_float+0x412>
 800a320:	e65d      	b.n	8009fde <_printf_float+0xb6>
 800a322:	2301      	movs	r3, #1
 800a324:	465a      	mov	r2, fp
 800a326:	4631      	mov	r1, r6
 800a328:	4628      	mov	r0, r5
 800a32a:	47b8      	blx	r7
 800a32c:	3001      	adds	r0, #1
 800a32e:	f43f ae56 	beq.w	8009fde <_printf_float+0xb6>
 800a332:	f108 0801 	add.w	r8, r8, #1
 800a336:	45d0      	cmp	r8, sl
 800a338:	dbf3      	blt.n	800a322 <_printf_float+0x3fa>
 800a33a:	464b      	mov	r3, r9
 800a33c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800a340:	e6df      	b.n	800a102 <_printf_float+0x1da>
 800a342:	f04f 0800 	mov.w	r8, #0
 800a346:	f104 0b1a 	add.w	fp, r4, #26
 800a34a:	e7f4      	b.n	800a336 <_printf_float+0x40e>
 800a34c:	2301      	movs	r3, #1
 800a34e:	4642      	mov	r2, r8
 800a350:	e7e1      	b.n	800a316 <_printf_float+0x3ee>
 800a352:	2301      	movs	r3, #1
 800a354:	464a      	mov	r2, r9
 800a356:	4631      	mov	r1, r6
 800a358:	4628      	mov	r0, r5
 800a35a:	47b8      	blx	r7
 800a35c:	3001      	adds	r0, #1
 800a35e:	f43f ae3e 	beq.w	8009fde <_printf_float+0xb6>
 800a362:	f108 0801 	add.w	r8, r8, #1
 800a366:	68e3      	ldr	r3, [r4, #12]
 800a368:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a36a:	1a5b      	subs	r3, r3, r1
 800a36c:	4543      	cmp	r3, r8
 800a36e:	dcf0      	bgt.n	800a352 <_printf_float+0x42a>
 800a370:	e6fc      	b.n	800a16c <_printf_float+0x244>
 800a372:	f04f 0800 	mov.w	r8, #0
 800a376:	f104 0919 	add.w	r9, r4, #25
 800a37a:	e7f4      	b.n	800a366 <_printf_float+0x43e>

0800a37c <_printf_common>:
 800a37c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a380:	4616      	mov	r6, r2
 800a382:	4698      	mov	r8, r3
 800a384:	688a      	ldr	r2, [r1, #8]
 800a386:	690b      	ldr	r3, [r1, #16]
 800a388:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a38c:	4293      	cmp	r3, r2
 800a38e:	bfb8      	it	lt
 800a390:	4613      	movlt	r3, r2
 800a392:	6033      	str	r3, [r6, #0]
 800a394:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a398:	4607      	mov	r7, r0
 800a39a:	460c      	mov	r4, r1
 800a39c:	b10a      	cbz	r2, 800a3a2 <_printf_common+0x26>
 800a39e:	3301      	adds	r3, #1
 800a3a0:	6033      	str	r3, [r6, #0]
 800a3a2:	6823      	ldr	r3, [r4, #0]
 800a3a4:	0699      	lsls	r1, r3, #26
 800a3a6:	bf42      	ittt	mi
 800a3a8:	6833      	ldrmi	r3, [r6, #0]
 800a3aa:	3302      	addmi	r3, #2
 800a3ac:	6033      	strmi	r3, [r6, #0]
 800a3ae:	6825      	ldr	r5, [r4, #0]
 800a3b0:	f015 0506 	ands.w	r5, r5, #6
 800a3b4:	d106      	bne.n	800a3c4 <_printf_common+0x48>
 800a3b6:	f104 0a19 	add.w	sl, r4, #25
 800a3ba:	68e3      	ldr	r3, [r4, #12]
 800a3bc:	6832      	ldr	r2, [r6, #0]
 800a3be:	1a9b      	subs	r3, r3, r2
 800a3c0:	42ab      	cmp	r3, r5
 800a3c2:	dc26      	bgt.n	800a412 <_printf_common+0x96>
 800a3c4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a3c8:	6822      	ldr	r2, [r4, #0]
 800a3ca:	3b00      	subs	r3, #0
 800a3cc:	bf18      	it	ne
 800a3ce:	2301      	movne	r3, #1
 800a3d0:	0692      	lsls	r2, r2, #26
 800a3d2:	d42b      	bmi.n	800a42c <_printf_common+0xb0>
 800a3d4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a3d8:	4641      	mov	r1, r8
 800a3da:	4638      	mov	r0, r7
 800a3dc:	47c8      	blx	r9
 800a3de:	3001      	adds	r0, #1
 800a3e0:	d01e      	beq.n	800a420 <_printf_common+0xa4>
 800a3e2:	6823      	ldr	r3, [r4, #0]
 800a3e4:	6922      	ldr	r2, [r4, #16]
 800a3e6:	f003 0306 	and.w	r3, r3, #6
 800a3ea:	2b04      	cmp	r3, #4
 800a3ec:	bf02      	ittt	eq
 800a3ee:	68e5      	ldreq	r5, [r4, #12]
 800a3f0:	6833      	ldreq	r3, [r6, #0]
 800a3f2:	1aed      	subeq	r5, r5, r3
 800a3f4:	68a3      	ldr	r3, [r4, #8]
 800a3f6:	bf0c      	ite	eq
 800a3f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a3fc:	2500      	movne	r5, #0
 800a3fe:	4293      	cmp	r3, r2
 800a400:	bfc4      	itt	gt
 800a402:	1a9b      	subgt	r3, r3, r2
 800a404:	18ed      	addgt	r5, r5, r3
 800a406:	2600      	movs	r6, #0
 800a408:	341a      	adds	r4, #26
 800a40a:	42b5      	cmp	r5, r6
 800a40c:	d11a      	bne.n	800a444 <_printf_common+0xc8>
 800a40e:	2000      	movs	r0, #0
 800a410:	e008      	b.n	800a424 <_printf_common+0xa8>
 800a412:	2301      	movs	r3, #1
 800a414:	4652      	mov	r2, sl
 800a416:	4641      	mov	r1, r8
 800a418:	4638      	mov	r0, r7
 800a41a:	47c8      	blx	r9
 800a41c:	3001      	adds	r0, #1
 800a41e:	d103      	bne.n	800a428 <_printf_common+0xac>
 800a420:	f04f 30ff 	mov.w	r0, #4294967295
 800a424:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a428:	3501      	adds	r5, #1
 800a42a:	e7c6      	b.n	800a3ba <_printf_common+0x3e>
 800a42c:	18e1      	adds	r1, r4, r3
 800a42e:	1c5a      	adds	r2, r3, #1
 800a430:	2030      	movs	r0, #48	@ 0x30
 800a432:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a436:	4422      	add	r2, r4
 800a438:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a43c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a440:	3302      	adds	r3, #2
 800a442:	e7c7      	b.n	800a3d4 <_printf_common+0x58>
 800a444:	2301      	movs	r3, #1
 800a446:	4622      	mov	r2, r4
 800a448:	4641      	mov	r1, r8
 800a44a:	4638      	mov	r0, r7
 800a44c:	47c8      	blx	r9
 800a44e:	3001      	adds	r0, #1
 800a450:	d0e6      	beq.n	800a420 <_printf_common+0xa4>
 800a452:	3601      	adds	r6, #1
 800a454:	e7d9      	b.n	800a40a <_printf_common+0x8e>
	...

0800a458 <_printf_i>:
 800a458:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a45c:	7e0f      	ldrb	r7, [r1, #24]
 800a45e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a460:	2f78      	cmp	r7, #120	@ 0x78
 800a462:	4691      	mov	r9, r2
 800a464:	4680      	mov	r8, r0
 800a466:	460c      	mov	r4, r1
 800a468:	469a      	mov	sl, r3
 800a46a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a46e:	d807      	bhi.n	800a480 <_printf_i+0x28>
 800a470:	2f62      	cmp	r7, #98	@ 0x62
 800a472:	d80a      	bhi.n	800a48a <_printf_i+0x32>
 800a474:	2f00      	cmp	r7, #0
 800a476:	f000 80d1 	beq.w	800a61c <_printf_i+0x1c4>
 800a47a:	2f58      	cmp	r7, #88	@ 0x58
 800a47c:	f000 80b8 	beq.w	800a5f0 <_printf_i+0x198>
 800a480:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a484:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a488:	e03a      	b.n	800a500 <_printf_i+0xa8>
 800a48a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a48e:	2b15      	cmp	r3, #21
 800a490:	d8f6      	bhi.n	800a480 <_printf_i+0x28>
 800a492:	a101      	add	r1, pc, #4	@ (adr r1, 800a498 <_printf_i+0x40>)
 800a494:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a498:	0800a4f1 	.word	0x0800a4f1
 800a49c:	0800a505 	.word	0x0800a505
 800a4a0:	0800a481 	.word	0x0800a481
 800a4a4:	0800a481 	.word	0x0800a481
 800a4a8:	0800a481 	.word	0x0800a481
 800a4ac:	0800a481 	.word	0x0800a481
 800a4b0:	0800a505 	.word	0x0800a505
 800a4b4:	0800a481 	.word	0x0800a481
 800a4b8:	0800a481 	.word	0x0800a481
 800a4bc:	0800a481 	.word	0x0800a481
 800a4c0:	0800a481 	.word	0x0800a481
 800a4c4:	0800a603 	.word	0x0800a603
 800a4c8:	0800a52f 	.word	0x0800a52f
 800a4cc:	0800a5bd 	.word	0x0800a5bd
 800a4d0:	0800a481 	.word	0x0800a481
 800a4d4:	0800a481 	.word	0x0800a481
 800a4d8:	0800a625 	.word	0x0800a625
 800a4dc:	0800a481 	.word	0x0800a481
 800a4e0:	0800a52f 	.word	0x0800a52f
 800a4e4:	0800a481 	.word	0x0800a481
 800a4e8:	0800a481 	.word	0x0800a481
 800a4ec:	0800a5c5 	.word	0x0800a5c5
 800a4f0:	6833      	ldr	r3, [r6, #0]
 800a4f2:	1d1a      	adds	r2, r3, #4
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	6032      	str	r2, [r6, #0]
 800a4f8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a4fc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a500:	2301      	movs	r3, #1
 800a502:	e09c      	b.n	800a63e <_printf_i+0x1e6>
 800a504:	6833      	ldr	r3, [r6, #0]
 800a506:	6820      	ldr	r0, [r4, #0]
 800a508:	1d19      	adds	r1, r3, #4
 800a50a:	6031      	str	r1, [r6, #0]
 800a50c:	0606      	lsls	r6, r0, #24
 800a50e:	d501      	bpl.n	800a514 <_printf_i+0xbc>
 800a510:	681d      	ldr	r5, [r3, #0]
 800a512:	e003      	b.n	800a51c <_printf_i+0xc4>
 800a514:	0645      	lsls	r5, r0, #25
 800a516:	d5fb      	bpl.n	800a510 <_printf_i+0xb8>
 800a518:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a51c:	2d00      	cmp	r5, #0
 800a51e:	da03      	bge.n	800a528 <_printf_i+0xd0>
 800a520:	232d      	movs	r3, #45	@ 0x2d
 800a522:	426d      	negs	r5, r5
 800a524:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a528:	4858      	ldr	r0, [pc, #352]	@ (800a68c <_printf_i+0x234>)
 800a52a:	230a      	movs	r3, #10
 800a52c:	e011      	b.n	800a552 <_printf_i+0xfa>
 800a52e:	6821      	ldr	r1, [r4, #0]
 800a530:	6833      	ldr	r3, [r6, #0]
 800a532:	0608      	lsls	r0, r1, #24
 800a534:	f853 5b04 	ldr.w	r5, [r3], #4
 800a538:	d402      	bmi.n	800a540 <_printf_i+0xe8>
 800a53a:	0649      	lsls	r1, r1, #25
 800a53c:	bf48      	it	mi
 800a53e:	b2ad      	uxthmi	r5, r5
 800a540:	2f6f      	cmp	r7, #111	@ 0x6f
 800a542:	4852      	ldr	r0, [pc, #328]	@ (800a68c <_printf_i+0x234>)
 800a544:	6033      	str	r3, [r6, #0]
 800a546:	bf14      	ite	ne
 800a548:	230a      	movne	r3, #10
 800a54a:	2308      	moveq	r3, #8
 800a54c:	2100      	movs	r1, #0
 800a54e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a552:	6866      	ldr	r6, [r4, #4]
 800a554:	60a6      	str	r6, [r4, #8]
 800a556:	2e00      	cmp	r6, #0
 800a558:	db05      	blt.n	800a566 <_printf_i+0x10e>
 800a55a:	6821      	ldr	r1, [r4, #0]
 800a55c:	432e      	orrs	r6, r5
 800a55e:	f021 0104 	bic.w	r1, r1, #4
 800a562:	6021      	str	r1, [r4, #0]
 800a564:	d04b      	beq.n	800a5fe <_printf_i+0x1a6>
 800a566:	4616      	mov	r6, r2
 800a568:	fbb5 f1f3 	udiv	r1, r5, r3
 800a56c:	fb03 5711 	mls	r7, r3, r1, r5
 800a570:	5dc7      	ldrb	r7, [r0, r7]
 800a572:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a576:	462f      	mov	r7, r5
 800a578:	42bb      	cmp	r3, r7
 800a57a:	460d      	mov	r5, r1
 800a57c:	d9f4      	bls.n	800a568 <_printf_i+0x110>
 800a57e:	2b08      	cmp	r3, #8
 800a580:	d10b      	bne.n	800a59a <_printf_i+0x142>
 800a582:	6823      	ldr	r3, [r4, #0]
 800a584:	07df      	lsls	r7, r3, #31
 800a586:	d508      	bpl.n	800a59a <_printf_i+0x142>
 800a588:	6923      	ldr	r3, [r4, #16]
 800a58a:	6861      	ldr	r1, [r4, #4]
 800a58c:	4299      	cmp	r1, r3
 800a58e:	bfde      	ittt	le
 800a590:	2330      	movle	r3, #48	@ 0x30
 800a592:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a596:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a59a:	1b92      	subs	r2, r2, r6
 800a59c:	6122      	str	r2, [r4, #16]
 800a59e:	f8cd a000 	str.w	sl, [sp]
 800a5a2:	464b      	mov	r3, r9
 800a5a4:	aa03      	add	r2, sp, #12
 800a5a6:	4621      	mov	r1, r4
 800a5a8:	4640      	mov	r0, r8
 800a5aa:	f7ff fee7 	bl	800a37c <_printf_common>
 800a5ae:	3001      	adds	r0, #1
 800a5b0:	d14a      	bne.n	800a648 <_printf_i+0x1f0>
 800a5b2:	f04f 30ff 	mov.w	r0, #4294967295
 800a5b6:	b004      	add	sp, #16
 800a5b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a5bc:	6823      	ldr	r3, [r4, #0]
 800a5be:	f043 0320 	orr.w	r3, r3, #32
 800a5c2:	6023      	str	r3, [r4, #0]
 800a5c4:	4832      	ldr	r0, [pc, #200]	@ (800a690 <_printf_i+0x238>)
 800a5c6:	2778      	movs	r7, #120	@ 0x78
 800a5c8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a5cc:	6823      	ldr	r3, [r4, #0]
 800a5ce:	6831      	ldr	r1, [r6, #0]
 800a5d0:	061f      	lsls	r7, r3, #24
 800a5d2:	f851 5b04 	ldr.w	r5, [r1], #4
 800a5d6:	d402      	bmi.n	800a5de <_printf_i+0x186>
 800a5d8:	065f      	lsls	r7, r3, #25
 800a5da:	bf48      	it	mi
 800a5dc:	b2ad      	uxthmi	r5, r5
 800a5de:	6031      	str	r1, [r6, #0]
 800a5e0:	07d9      	lsls	r1, r3, #31
 800a5e2:	bf44      	itt	mi
 800a5e4:	f043 0320 	orrmi.w	r3, r3, #32
 800a5e8:	6023      	strmi	r3, [r4, #0]
 800a5ea:	b11d      	cbz	r5, 800a5f4 <_printf_i+0x19c>
 800a5ec:	2310      	movs	r3, #16
 800a5ee:	e7ad      	b.n	800a54c <_printf_i+0xf4>
 800a5f0:	4826      	ldr	r0, [pc, #152]	@ (800a68c <_printf_i+0x234>)
 800a5f2:	e7e9      	b.n	800a5c8 <_printf_i+0x170>
 800a5f4:	6823      	ldr	r3, [r4, #0]
 800a5f6:	f023 0320 	bic.w	r3, r3, #32
 800a5fa:	6023      	str	r3, [r4, #0]
 800a5fc:	e7f6      	b.n	800a5ec <_printf_i+0x194>
 800a5fe:	4616      	mov	r6, r2
 800a600:	e7bd      	b.n	800a57e <_printf_i+0x126>
 800a602:	6833      	ldr	r3, [r6, #0]
 800a604:	6825      	ldr	r5, [r4, #0]
 800a606:	6961      	ldr	r1, [r4, #20]
 800a608:	1d18      	adds	r0, r3, #4
 800a60a:	6030      	str	r0, [r6, #0]
 800a60c:	062e      	lsls	r6, r5, #24
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	d501      	bpl.n	800a616 <_printf_i+0x1be>
 800a612:	6019      	str	r1, [r3, #0]
 800a614:	e002      	b.n	800a61c <_printf_i+0x1c4>
 800a616:	0668      	lsls	r0, r5, #25
 800a618:	d5fb      	bpl.n	800a612 <_printf_i+0x1ba>
 800a61a:	8019      	strh	r1, [r3, #0]
 800a61c:	2300      	movs	r3, #0
 800a61e:	6123      	str	r3, [r4, #16]
 800a620:	4616      	mov	r6, r2
 800a622:	e7bc      	b.n	800a59e <_printf_i+0x146>
 800a624:	6833      	ldr	r3, [r6, #0]
 800a626:	1d1a      	adds	r2, r3, #4
 800a628:	6032      	str	r2, [r6, #0]
 800a62a:	681e      	ldr	r6, [r3, #0]
 800a62c:	6862      	ldr	r2, [r4, #4]
 800a62e:	2100      	movs	r1, #0
 800a630:	4630      	mov	r0, r6
 800a632:	f7f5 fddd 	bl	80001f0 <memchr>
 800a636:	b108      	cbz	r0, 800a63c <_printf_i+0x1e4>
 800a638:	1b80      	subs	r0, r0, r6
 800a63a:	6060      	str	r0, [r4, #4]
 800a63c:	6863      	ldr	r3, [r4, #4]
 800a63e:	6123      	str	r3, [r4, #16]
 800a640:	2300      	movs	r3, #0
 800a642:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a646:	e7aa      	b.n	800a59e <_printf_i+0x146>
 800a648:	6923      	ldr	r3, [r4, #16]
 800a64a:	4632      	mov	r2, r6
 800a64c:	4649      	mov	r1, r9
 800a64e:	4640      	mov	r0, r8
 800a650:	47d0      	blx	sl
 800a652:	3001      	adds	r0, #1
 800a654:	d0ad      	beq.n	800a5b2 <_printf_i+0x15a>
 800a656:	6823      	ldr	r3, [r4, #0]
 800a658:	079b      	lsls	r3, r3, #30
 800a65a:	d413      	bmi.n	800a684 <_printf_i+0x22c>
 800a65c:	68e0      	ldr	r0, [r4, #12]
 800a65e:	9b03      	ldr	r3, [sp, #12]
 800a660:	4298      	cmp	r0, r3
 800a662:	bfb8      	it	lt
 800a664:	4618      	movlt	r0, r3
 800a666:	e7a6      	b.n	800a5b6 <_printf_i+0x15e>
 800a668:	2301      	movs	r3, #1
 800a66a:	4632      	mov	r2, r6
 800a66c:	4649      	mov	r1, r9
 800a66e:	4640      	mov	r0, r8
 800a670:	47d0      	blx	sl
 800a672:	3001      	adds	r0, #1
 800a674:	d09d      	beq.n	800a5b2 <_printf_i+0x15a>
 800a676:	3501      	adds	r5, #1
 800a678:	68e3      	ldr	r3, [r4, #12]
 800a67a:	9903      	ldr	r1, [sp, #12]
 800a67c:	1a5b      	subs	r3, r3, r1
 800a67e:	42ab      	cmp	r3, r5
 800a680:	dcf2      	bgt.n	800a668 <_printf_i+0x210>
 800a682:	e7eb      	b.n	800a65c <_printf_i+0x204>
 800a684:	2500      	movs	r5, #0
 800a686:	f104 0619 	add.w	r6, r4, #25
 800a68a:	e7f5      	b.n	800a678 <_printf_i+0x220>
 800a68c:	0800d55e 	.word	0x0800d55e
 800a690:	0800d56f 	.word	0x0800d56f

0800a694 <std>:
 800a694:	2300      	movs	r3, #0
 800a696:	b510      	push	{r4, lr}
 800a698:	4604      	mov	r4, r0
 800a69a:	e9c0 3300 	strd	r3, r3, [r0]
 800a69e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a6a2:	6083      	str	r3, [r0, #8]
 800a6a4:	8181      	strh	r1, [r0, #12]
 800a6a6:	6643      	str	r3, [r0, #100]	@ 0x64
 800a6a8:	81c2      	strh	r2, [r0, #14]
 800a6aa:	6183      	str	r3, [r0, #24]
 800a6ac:	4619      	mov	r1, r3
 800a6ae:	2208      	movs	r2, #8
 800a6b0:	305c      	adds	r0, #92	@ 0x5c
 800a6b2:	f000 f916 	bl	800a8e2 <memset>
 800a6b6:	4b0d      	ldr	r3, [pc, #52]	@ (800a6ec <std+0x58>)
 800a6b8:	6263      	str	r3, [r4, #36]	@ 0x24
 800a6ba:	4b0d      	ldr	r3, [pc, #52]	@ (800a6f0 <std+0x5c>)
 800a6bc:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a6be:	4b0d      	ldr	r3, [pc, #52]	@ (800a6f4 <std+0x60>)
 800a6c0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a6c2:	4b0d      	ldr	r3, [pc, #52]	@ (800a6f8 <std+0x64>)
 800a6c4:	6323      	str	r3, [r4, #48]	@ 0x30
 800a6c6:	4b0d      	ldr	r3, [pc, #52]	@ (800a6fc <std+0x68>)
 800a6c8:	6224      	str	r4, [r4, #32]
 800a6ca:	429c      	cmp	r4, r3
 800a6cc:	d006      	beq.n	800a6dc <std+0x48>
 800a6ce:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800a6d2:	4294      	cmp	r4, r2
 800a6d4:	d002      	beq.n	800a6dc <std+0x48>
 800a6d6:	33d0      	adds	r3, #208	@ 0xd0
 800a6d8:	429c      	cmp	r4, r3
 800a6da:	d105      	bne.n	800a6e8 <std+0x54>
 800a6dc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800a6e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a6e4:	f000 b97a 	b.w	800a9dc <__retarget_lock_init_recursive>
 800a6e8:	bd10      	pop	{r4, pc}
 800a6ea:	bf00      	nop
 800a6ec:	0800a85d 	.word	0x0800a85d
 800a6f0:	0800a87f 	.word	0x0800a87f
 800a6f4:	0800a8b7 	.word	0x0800a8b7
 800a6f8:	0800a8db 	.word	0x0800a8db
 800a6fc:	20000eb4 	.word	0x20000eb4

0800a700 <stdio_exit_handler>:
 800a700:	4a02      	ldr	r2, [pc, #8]	@ (800a70c <stdio_exit_handler+0xc>)
 800a702:	4903      	ldr	r1, [pc, #12]	@ (800a710 <stdio_exit_handler+0x10>)
 800a704:	4803      	ldr	r0, [pc, #12]	@ (800a714 <stdio_exit_handler+0x14>)
 800a706:	f000 b869 	b.w	800a7dc <_fwalk_sglue>
 800a70a:	bf00      	nop
 800a70c:	20000120 	.word	0x20000120
 800a710:	0800c345 	.word	0x0800c345
 800a714:	20000130 	.word	0x20000130

0800a718 <cleanup_stdio>:
 800a718:	6841      	ldr	r1, [r0, #4]
 800a71a:	4b0c      	ldr	r3, [pc, #48]	@ (800a74c <cleanup_stdio+0x34>)
 800a71c:	4299      	cmp	r1, r3
 800a71e:	b510      	push	{r4, lr}
 800a720:	4604      	mov	r4, r0
 800a722:	d001      	beq.n	800a728 <cleanup_stdio+0x10>
 800a724:	f001 fe0e 	bl	800c344 <_fflush_r>
 800a728:	68a1      	ldr	r1, [r4, #8]
 800a72a:	4b09      	ldr	r3, [pc, #36]	@ (800a750 <cleanup_stdio+0x38>)
 800a72c:	4299      	cmp	r1, r3
 800a72e:	d002      	beq.n	800a736 <cleanup_stdio+0x1e>
 800a730:	4620      	mov	r0, r4
 800a732:	f001 fe07 	bl	800c344 <_fflush_r>
 800a736:	68e1      	ldr	r1, [r4, #12]
 800a738:	4b06      	ldr	r3, [pc, #24]	@ (800a754 <cleanup_stdio+0x3c>)
 800a73a:	4299      	cmp	r1, r3
 800a73c:	d004      	beq.n	800a748 <cleanup_stdio+0x30>
 800a73e:	4620      	mov	r0, r4
 800a740:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a744:	f001 bdfe 	b.w	800c344 <_fflush_r>
 800a748:	bd10      	pop	{r4, pc}
 800a74a:	bf00      	nop
 800a74c:	20000eb4 	.word	0x20000eb4
 800a750:	20000f1c 	.word	0x20000f1c
 800a754:	20000f84 	.word	0x20000f84

0800a758 <global_stdio_init.part.0>:
 800a758:	b510      	push	{r4, lr}
 800a75a:	4b0b      	ldr	r3, [pc, #44]	@ (800a788 <global_stdio_init.part.0+0x30>)
 800a75c:	4c0b      	ldr	r4, [pc, #44]	@ (800a78c <global_stdio_init.part.0+0x34>)
 800a75e:	4a0c      	ldr	r2, [pc, #48]	@ (800a790 <global_stdio_init.part.0+0x38>)
 800a760:	601a      	str	r2, [r3, #0]
 800a762:	4620      	mov	r0, r4
 800a764:	2200      	movs	r2, #0
 800a766:	2104      	movs	r1, #4
 800a768:	f7ff ff94 	bl	800a694 <std>
 800a76c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800a770:	2201      	movs	r2, #1
 800a772:	2109      	movs	r1, #9
 800a774:	f7ff ff8e 	bl	800a694 <std>
 800a778:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800a77c:	2202      	movs	r2, #2
 800a77e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a782:	2112      	movs	r1, #18
 800a784:	f7ff bf86 	b.w	800a694 <std>
 800a788:	20000fec 	.word	0x20000fec
 800a78c:	20000eb4 	.word	0x20000eb4
 800a790:	0800a701 	.word	0x0800a701

0800a794 <__sfp_lock_acquire>:
 800a794:	4801      	ldr	r0, [pc, #4]	@ (800a79c <__sfp_lock_acquire+0x8>)
 800a796:	f000 b922 	b.w	800a9de <__retarget_lock_acquire_recursive>
 800a79a:	bf00      	nop
 800a79c:	20000ff5 	.word	0x20000ff5

0800a7a0 <__sfp_lock_release>:
 800a7a0:	4801      	ldr	r0, [pc, #4]	@ (800a7a8 <__sfp_lock_release+0x8>)
 800a7a2:	f000 b91d 	b.w	800a9e0 <__retarget_lock_release_recursive>
 800a7a6:	bf00      	nop
 800a7a8:	20000ff5 	.word	0x20000ff5

0800a7ac <__sinit>:
 800a7ac:	b510      	push	{r4, lr}
 800a7ae:	4604      	mov	r4, r0
 800a7b0:	f7ff fff0 	bl	800a794 <__sfp_lock_acquire>
 800a7b4:	6a23      	ldr	r3, [r4, #32]
 800a7b6:	b11b      	cbz	r3, 800a7c0 <__sinit+0x14>
 800a7b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a7bc:	f7ff bff0 	b.w	800a7a0 <__sfp_lock_release>
 800a7c0:	4b04      	ldr	r3, [pc, #16]	@ (800a7d4 <__sinit+0x28>)
 800a7c2:	6223      	str	r3, [r4, #32]
 800a7c4:	4b04      	ldr	r3, [pc, #16]	@ (800a7d8 <__sinit+0x2c>)
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d1f5      	bne.n	800a7b8 <__sinit+0xc>
 800a7cc:	f7ff ffc4 	bl	800a758 <global_stdio_init.part.0>
 800a7d0:	e7f2      	b.n	800a7b8 <__sinit+0xc>
 800a7d2:	bf00      	nop
 800a7d4:	0800a719 	.word	0x0800a719
 800a7d8:	20000fec 	.word	0x20000fec

0800a7dc <_fwalk_sglue>:
 800a7dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a7e0:	4607      	mov	r7, r0
 800a7e2:	4688      	mov	r8, r1
 800a7e4:	4614      	mov	r4, r2
 800a7e6:	2600      	movs	r6, #0
 800a7e8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a7ec:	f1b9 0901 	subs.w	r9, r9, #1
 800a7f0:	d505      	bpl.n	800a7fe <_fwalk_sglue+0x22>
 800a7f2:	6824      	ldr	r4, [r4, #0]
 800a7f4:	2c00      	cmp	r4, #0
 800a7f6:	d1f7      	bne.n	800a7e8 <_fwalk_sglue+0xc>
 800a7f8:	4630      	mov	r0, r6
 800a7fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a7fe:	89ab      	ldrh	r3, [r5, #12]
 800a800:	2b01      	cmp	r3, #1
 800a802:	d907      	bls.n	800a814 <_fwalk_sglue+0x38>
 800a804:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a808:	3301      	adds	r3, #1
 800a80a:	d003      	beq.n	800a814 <_fwalk_sglue+0x38>
 800a80c:	4629      	mov	r1, r5
 800a80e:	4638      	mov	r0, r7
 800a810:	47c0      	blx	r8
 800a812:	4306      	orrs	r6, r0
 800a814:	3568      	adds	r5, #104	@ 0x68
 800a816:	e7e9      	b.n	800a7ec <_fwalk_sglue+0x10>

0800a818 <siprintf>:
 800a818:	b40e      	push	{r1, r2, r3}
 800a81a:	b510      	push	{r4, lr}
 800a81c:	b09d      	sub	sp, #116	@ 0x74
 800a81e:	ab1f      	add	r3, sp, #124	@ 0x7c
 800a820:	9002      	str	r0, [sp, #8]
 800a822:	9006      	str	r0, [sp, #24]
 800a824:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800a828:	480a      	ldr	r0, [pc, #40]	@ (800a854 <siprintf+0x3c>)
 800a82a:	9107      	str	r1, [sp, #28]
 800a82c:	9104      	str	r1, [sp, #16]
 800a82e:	490a      	ldr	r1, [pc, #40]	@ (800a858 <siprintf+0x40>)
 800a830:	f853 2b04 	ldr.w	r2, [r3], #4
 800a834:	9105      	str	r1, [sp, #20]
 800a836:	2400      	movs	r4, #0
 800a838:	a902      	add	r1, sp, #8
 800a83a:	6800      	ldr	r0, [r0, #0]
 800a83c:	9301      	str	r3, [sp, #4]
 800a83e:	941b      	str	r4, [sp, #108]	@ 0x6c
 800a840:	f001 fc00 	bl	800c044 <_svfiprintf_r>
 800a844:	9b02      	ldr	r3, [sp, #8]
 800a846:	701c      	strb	r4, [r3, #0]
 800a848:	b01d      	add	sp, #116	@ 0x74
 800a84a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a84e:	b003      	add	sp, #12
 800a850:	4770      	bx	lr
 800a852:	bf00      	nop
 800a854:	2000012c 	.word	0x2000012c
 800a858:	ffff0208 	.word	0xffff0208

0800a85c <__sread>:
 800a85c:	b510      	push	{r4, lr}
 800a85e:	460c      	mov	r4, r1
 800a860:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a864:	f000 f86c 	bl	800a940 <_read_r>
 800a868:	2800      	cmp	r0, #0
 800a86a:	bfab      	itete	ge
 800a86c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800a86e:	89a3      	ldrhlt	r3, [r4, #12]
 800a870:	181b      	addge	r3, r3, r0
 800a872:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800a876:	bfac      	ite	ge
 800a878:	6563      	strge	r3, [r4, #84]	@ 0x54
 800a87a:	81a3      	strhlt	r3, [r4, #12]
 800a87c:	bd10      	pop	{r4, pc}

0800a87e <__swrite>:
 800a87e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a882:	461f      	mov	r7, r3
 800a884:	898b      	ldrh	r3, [r1, #12]
 800a886:	05db      	lsls	r3, r3, #23
 800a888:	4605      	mov	r5, r0
 800a88a:	460c      	mov	r4, r1
 800a88c:	4616      	mov	r6, r2
 800a88e:	d505      	bpl.n	800a89c <__swrite+0x1e>
 800a890:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a894:	2302      	movs	r3, #2
 800a896:	2200      	movs	r2, #0
 800a898:	f000 f840 	bl	800a91c <_lseek_r>
 800a89c:	89a3      	ldrh	r3, [r4, #12]
 800a89e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a8a2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a8a6:	81a3      	strh	r3, [r4, #12]
 800a8a8:	4632      	mov	r2, r6
 800a8aa:	463b      	mov	r3, r7
 800a8ac:	4628      	mov	r0, r5
 800a8ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a8b2:	f000 b857 	b.w	800a964 <_write_r>

0800a8b6 <__sseek>:
 800a8b6:	b510      	push	{r4, lr}
 800a8b8:	460c      	mov	r4, r1
 800a8ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a8be:	f000 f82d 	bl	800a91c <_lseek_r>
 800a8c2:	1c43      	adds	r3, r0, #1
 800a8c4:	89a3      	ldrh	r3, [r4, #12]
 800a8c6:	bf15      	itete	ne
 800a8c8:	6560      	strne	r0, [r4, #84]	@ 0x54
 800a8ca:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800a8ce:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800a8d2:	81a3      	strheq	r3, [r4, #12]
 800a8d4:	bf18      	it	ne
 800a8d6:	81a3      	strhne	r3, [r4, #12]
 800a8d8:	bd10      	pop	{r4, pc}

0800a8da <__sclose>:
 800a8da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a8de:	f000 b80d 	b.w	800a8fc <_close_r>

0800a8e2 <memset>:
 800a8e2:	4402      	add	r2, r0
 800a8e4:	4603      	mov	r3, r0
 800a8e6:	4293      	cmp	r3, r2
 800a8e8:	d100      	bne.n	800a8ec <memset+0xa>
 800a8ea:	4770      	bx	lr
 800a8ec:	f803 1b01 	strb.w	r1, [r3], #1
 800a8f0:	e7f9      	b.n	800a8e6 <memset+0x4>
	...

0800a8f4 <_localeconv_r>:
 800a8f4:	4800      	ldr	r0, [pc, #0]	@ (800a8f8 <_localeconv_r+0x4>)
 800a8f6:	4770      	bx	lr
 800a8f8:	2000026c 	.word	0x2000026c

0800a8fc <_close_r>:
 800a8fc:	b538      	push	{r3, r4, r5, lr}
 800a8fe:	4d06      	ldr	r5, [pc, #24]	@ (800a918 <_close_r+0x1c>)
 800a900:	2300      	movs	r3, #0
 800a902:	4604      	mov	r4, r0
 800a904:	4608      	mov	r0, r1
 800a906:	602b      	str	r3, [r5, #0]
 800a908:	f7f7 fdf0 	bl	80024ec <_close>
 800a90c:	1c43      	adds	r3, r0, #1
 800a90e:	d102      	bne.n	800a916 <_close_r+0x1a>
 800a910:	682b      	ldr	r3, [r5, #0]
 800a912:	b103      	cbz	r3, 800a916 <_close_r+0x1a>
 800a914:	6023      	str	r3, [r4, #0]
 800a916:	bd38      	pop	{r3, r4, r5, pc}
 800a918:	20000ff0 	.word	0x20000ff0

0800a91c <_lseek_r>:
 800a91c:	b538      	push	{r3, r4, r5, lr}
 800a91e:	4d07      	ldr	r5, [pc, #28]	@ (800a93c <_lseek_r+0x20>)
 800a920:	4604      	mov	r4, r0
 800a922:	4608      	mov	r0, r1
 800a924:	4611      	mov	r1, r2
 800a926:	2200      	movs	r2, #0
 800a928:	602a      	str	r2, [r5, #0]
 800a92a:	461a      	mov	r2, r3
 800a92c:	f7f7 fe05 	bl	800253a <_lseek>
 800a930:	1c43      	adds	r3, r0, #1
 800a932:	d102      	bne.n	800a93a <_lseek_r+0x1e>
 800a934:	682b      	ldr	r3, [r5, #0]
 800a936:	b103      	cbz	r3, 800a93a <_lseek_r+0x1e>
 800a938:	6023      	str	r3, [r4, #0]
 800a93a:	bd38      	pop	{r3, r4, r5, pc}
 800a93c:	20000ff0 	.word	0x20000ff0

0800a940 <_read_r>:
 800a940:	b538      	push	{r3, r4, r5, lr}
 800a942:	4d07      	ldr	r5, [pc, #28]	@ (800a960 <_read_r+0x20>)
 800a944:	4604      	mov	r4, r0
 800a946:	4608      	mov	r0, r1
 800a948:	4611      	mov	r1, r2
 800a94a:	2200      	movs	r2, #0
 800a94c:	602a      	str	r2, [r5, #0]
 800a94e:	461a      	mov	r2, r3
 800a950:	f7f7 fd93 	bl	800247a <_read>
 800a954:	1c43      	adds	r3, r0, #1
 800a956:	d102      	bne.n	800a95e <_read_r+0x1e>
 800a958:	682b      	ldr	r3, [r5, #0]
 800a95a:	b103      	cbz	r3, 800a95e <_read_r+0x1e>
 800a95c:	6023      	str	r3, [r4, #0]
 800a95e:	bd38      	pop	{r3, r4, r5, pc}
 800a960:	20000ff0 	.word	0x20000ff0

0800a964 <_write_r>:
 800a964:	b538      	push	{r3, r4, r5, lr}
 800a966:	4d07      	ldr	r5, [pc, #28]	@ (800a984 <_write_r+0x20>)
 800a968:	4604      	mov	r4, r0
 800a96a:	4608      	mov	r0, r1
 800a96c:	4611      	mov	r1, r2
 800a96e:	2200      	movs	r2, #0
 800a970:	602a      	str	r2, [r5, #0]
 800a972:	461a      	mov	r2, r3
 800a974:	f7f7 fd9e 	bl	80024b4 <_write>
 800a978:	1c43      	adds	r3, r0, #1
 800a97a:	d102      	bne.n	800a982 <_write_r+0x1e>
 800a97c:	682b      	ldr	r3, [r5, #0]
 800a97e:	b103      	cbz	r3, 800a982 <_write_r+0x1e>
 800a980:	6023      	str	r3, [r4, #0]
 800a982:	bd38      	pop	{r3, r4, r5, pc}
 800a984:	20000ff0 	.word	0x20000ff0

0800a988 <__errno>:
 800a988:	4b01      	ldr	r3, [pc, #4]	@ (800a990 <__errno+0x8>)
 800a98a:	6818      	ldr	r0, [r3, #0]
 800a98c:	4770      	bx	lr
 800a98e:	bf00      	nop
 800a990:	2000012c 	.word	0x2000012c

0800a994 <__libc_init_array>:
 800a994:	b570      	push	{r4, r5, r6, lr}
 800a996:	4d0d      	ldr	r5, [pc, #52]	@ (800a9cc <__libc_init_array+0x38>)
 800a998:	4c0d      	ldr	r4, [pc, #52]	@ (800a9d0 <__libc_init_array+0x3c>)
 800a99a:	1b64      	subs	r4, r4, r5
 800a99c:	10a4      	asrs	r4, r4, #2
 800a99e:	2600      	movs	r6, #0
 800a9a0:	42a6      	cmp	r6, r4
 800a9a2:	d109      	bne.n	800a9b8 <__libc_init_array+0x24>
 800a9a4:	4d0b      	ldr	r5, [pc, #44]	@ (800a9d4 <__libc_init_array+0x40>)
 800a9a6:	4c0c      	ldr	r4, [pc, #48]	@ (800a9d8 <__libc_init_array+0x44>)
 800a9a8:	f002 fbd8 	bl	800d15c <_init>
 800a9ac:	1b64      	subs	r4, r4, r5
 800a9ae:	10a4      	asrs	r4, r4, #2
 800a9b0:	2600      	movs	r6, #0
 800a9b2:	42a6      	cmp	r6, r4
 800a9b4:	d105      	bne.n	800a9c2 <__libc_init_array+0x2e>
 800a9b6:	bd70      	pop	{r4, r5, r6, pc}
 800a9b8:	f855 3b04 	ldr.w	r3, [r5], #4
 800a9bc:	4798      	blx	r3
 800a9be:	3601      	adds	r6, #1
 800a9c0:	e7ee      	b.n	800a9a0 <__libc_init_array+0xc>
 800a9c2:	f855 3b04 	ldr.w	r3, [r5], #4
 800a9c6:	4798      	blx	r3
 800a9c8:	3601      	adds	r6, #1
 800a9ca:	e7f2      	b.n	800a9b2 <__libc_init_array+0x1e>
 800a9cc:	0800d950 	.word	0x0800d950
 800a9d0:	0800d950 	.word	0x0800d950
 800a9d4:	0800d950 	.word	0x0800d950
 800a9d8:	0800d954 	.word	0x0800d954

0800a9dc <__retarget_lock_init_recursive>:
 800a9dc:	4770      	bx	lr

0800a9de <__retarget_lock_acquire_recursive>:
 800a9de:	4770      	bx	lr

0800a9e0 <__retarget_lock_release_recursive>:
 800a9e0:	4770      	bx	lr

0800a9e2 <quorem>:
 800a9e2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9e6:	6903      	ldr	r3, [r0, #16]
 800a9e8:	690c      	ldr	r4, [r1, #16]
 800a9ea:	42a3      	cmp	r3, r4
 800a9ec:	4607      	mov	r7, r0
 800a9ee:	db7e      	blt.n	800aaee <quorem+0x10c>
 800a9f0:	3c01      	subs	r4, #1
 800a9f2:	f101 0814 	add.w	r8, r1, #20
 800a9f6:	00a3      	lsls	r3, r4, #2
 800a9f8:	f100 0514 	add.w	r5, r0, #20
 800a9fc:	9300      	str	r3, [sp, #0]
 800a9fe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800aa02:	9301      	str	r3, [sp, #4]
 800aa04:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800aa08:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800aa0c:	3301      	adds	r3, #1
 800aa0e:	429a      	cmp	r2, r3
 800aa10:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800aa14:	fbb2 f6f3 	udiv	r6, r2, r3
 800aa18:	d32e      	bcc.n	800aa78 <quorem+0x96>
 800aa1a:	f04f 0a00 	mov.w	sl, #0
 800aa1e:	46c4      	mov	ip, r8
 800aa20:	46ae      	mov	lr, r5
 800aa22:	46d3      	mov	fp, sl
 800aa24:	f85c 3b04 	ldr.w	r3, [ip], #4
 800aa28:	b298      	uxth	r0, r3
 800aa2a:	fb06 a000 	mla	r0, r6, r0, sl
 800aa2e:	0c02      	lsrs	r2, r0, #16
 800aa30:	0c1b      	lsrs	r3, r3, #16
 800aa32:	fb06 2303 	mla	r3, r6, r3, r2
 800aa36:	f8de 2000 	ldr.w	r2, [lr]
 800aa3a:	b280      	uxth	r0, r0
 800aa3c:	b292      	uxth	r2, r2
 800aa3e:	1a12      	subs	r2, r2, r0
 800aa40:	445a      	add	r2, fp
 800aa42:	f8de 0000 	ldr.w	r0, [lr]
 800aa46:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800aa4a:	b29b      	uxth	r3, r3
 800aa4c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800aa50:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800aa54:	b292      	uxth	r2, r2
 800aa56:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800aa5a:	45e1      	cmp	r9, ip
 800aa5c:	f84e 2b04 	str.w	r2, [lr], #4
 800aa60:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800aa64:	d2de      	bcs.n	800aa24 <quorem+0x42>
 800aa66:	9b00      	ldr	r3, [sp, #0]
 800aa68:	58eb      	ldr	r3, [r5, r3]
 800aa6a:	b92b      	cbnz	r3, 800aa78 <quorem+0x96>
 800aa6c:	9b01      	ldr	r3, [sp, #4]
 800aa6e:	3b04      	subs	r3, #4
 800aa70:	429d      	cmp	r5, r3
 800aa72:	461a      	mov	r2, r3
 800aa74:	d32f      	bcc.n	800aad6 <quorem+0xf4>
 800aa76:	613c      	str	r4, [r7, #16]
 800aa78:	4638      	mov	r0, r7
 800aa7a:	f001 f97f 	bl	800bd7c <__mcmp>
 800aa7e:	2800      	cmp	r0, #0
 800aa80:	db25      	blt.n	800aace <quorem+0xec>
 800aa82:	4629      	mov	r1, r5
 800aa84:	2000      	movs	r0, #0
 800aa86:	f858 2b04 	ldr.w	r2, [r8], #4
 800aa8a:	f8d1 c000 	ldr.w	ip, [r1]
 800aa8e:	fa1f fe82 	uxth.w	lr, r2
 800aa92:	fa1f f38c 	uxth.w	r3, ip
 800aa96:	eba3 030e 	sub.w	r3, r3, lr
 800aa9a:	4403      	add	r3, r0
 800aa9c:	0c12      	lsrs	r2, r2, #16
 800aa9e:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800aaa2:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800aaa6:	b29b      	uxth	r3, r3
 800aaa8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800aaac:	45c1      	cmp	r9, r8
 800aaae:	f841 3b04 	str.w	r3, [r1], #4
 800aab2:	ea4f 4022 	mov.w	r0, r2, asr #16
 800aab6:	d2e6      	bcs.n	800aa86 <quorem+0xa4>
 800aab8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800aabc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800aac0:	b922      	cbnz	r2, 800aacc <quorem+0xea>
 800aac2:	3b04      	subs	r3, #4
 800aac4:	429d      	cmp	r5, r3
 800aac6:	461a      	mov	r2, r3
 800aac8:	d30b      	bcc.n	800aae2 <quorem+0x100>
 800aaca:	613c      	str	r4, [r7, #16]
 800aacc:	3601      	adds	r6, #1
 800aace:	4630      	mov	r0, r6
 800aad0:	b003      	add	sp, #12
 800aad2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aad6:	6812      	ldr	r2, [r2, #0]
 800aad8:	3b04      	subs	r3, #4
 800aada:	2a00      	cmp	r2, #0
 800aadc:	d1cb      	bne.n	800aa76 <quorem+0x94>
 800aade:	3c01      	subs	r4, #1
 800aae0:	e7c6      	b.n	800aa70 <quorem+0x8e>
 800aae2:	6812      	ldr	r2, [r2, #0]
 800aae4:	3b04      	subs	r3, #4
 800aae6:	2a00      	cmp	r2, #0
 800aae8:	d1ef      	bne.n	800aaca <quorem+0xe8>
 800aaea:	3c01      	subs	r4, #1
 800aaec:	e7ea      	b.n	800aac4 <quorem+0xe2>
 800aaee:	2000      	movs	r0, #0
 800aaf0:	e7ee      	b.n	800aad0 <quorem+0xee>
 800aaf2:	0000      	movs	r0, r0
 800aaf4:	0000      	movs	r0, r0
	...

0800aaf8 <_dtoa_r>:
 800aaf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aafc:	69c7      	ldr	r7, [r0, #28]
 800aafe:	b097      	sub	sp, #92	@ 0x5c
 800ab00:	ed8d 0b04 	vstr	d0, [sp, #16]
 800ab04:	ec55 4b10 	vmov	r4, r5, d0
 800ab08:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800ab0a:	9107      	str	r1, [sp, #28]
 800ab0c:	4681      	mov	r9, r0
 800ab0e:	920c      	str	r2, [sp, #48]	@ 0x30
 800ab10:	9311      	str	r3, [sp, #68]	@ 0x44
 800ab12:	b97f      	cbnz	r7, 800ab34 <_dtoa_r+0x3c>
 800ab14:	2010      	movs	r0, #16
 800ab16:	f000 fe09 	bl	800b72c <malloc>
 800ab1a:	4602      	mov	r2, r0
 800ab1c:	f8c9 001c 	str.w	r0, [r9, #28]
 800ab20:	b920      	cbnz	r0, 800ab2c <_dtoa_r+0x34>
 800ab22:	4ba9      	ldr	r3, [pc, #676]	@ (800adc8 <_dtoa_r+0x2d0>)
 800ab24:	21ef      	movs	r1, #239	@ 0xef
 800ab26:	48a9      	ldr	r0, [pc, #676]	@ (800adcc <_dtoa_r+0x2d4>)
 800ab28:	f001 fc6c 	bl	800c404 <__assert_func>
 800ab2c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800ab30:	6007      	str	r7, [r0, #0]
 800ab32:	60c7      	str	r7, [r0, #12]
 800ab34:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800ab38:	6819      	ldr	r1, [r3, #0]
 800ab3a:	b159      	cbz	r1, 800ab54 <_dtoa_r+0x5c>
 800ab3c:	685a      	ldr	r2, [r3, #4]
 800ab3e:	604a      	str	r2, [r1, #4]
 800ab40:	2301      	movs	r3, #1
 800ab42:	4093      	lsls	r3, r2
 800ab44:	608b      	str	r3, [r1, #8]
 800ab46:	4648      	mov	r0, r9
 800ab48:	f000 fee6 	bl	800b918 <_Bfree>
 800ab4c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800ab50:	2200      	movs	r2, #0
 800ab52:	601a      	str	r2, [r3, #0]
 800ab54:	1e2b      	subs	r3, r5, #0
 800ab56:	bfb9      	ittee	lt
 800ab58:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800ab5c:	9305      	strlt	r3, [sp, #20]
 800ab5e:	2300      	movge	r3, #0
 800ab60:	6033      	strge	r3, [r6, #0]
 800ab62:	9f05      	ldr	r7, [sp, #20]
 800ab64:	4b9a      	ldr	r3, [pc, #616]	@ (800add0 <_dtoa_r+0x2d8>)
 800ab66:	bfbc      	itt	lt
 800ab68:	2201      	movlt	r2, #1
 800ab6a:	6032      	strlt	r2, [r6, #0]
 800ab6c:	43bb      	bics	r3, r7
 800ab6e:	d112      	bne.n	800ab96 <_dtoa_r+0x9e>
 800ab70:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800ab72:	f242 730f 	movw	r3, #9999	@ 0x270f
 800ab76:	6013      	str	r3, [r2, #0]
 800ab78:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800ab7c:	4323      	orrs	r3, r4
 800ab7e:	f000 855a 	beq.w	800b636 <_dtoa_r+0xb3e>
 800ab82:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800ab84:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800ade4 <_dtoa_r+0x2ec>
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	f000 855c 	beq.w	800b646 <_dtoa_r+0xb4e>
 800ab8e:	f10a 0303 	add.w	r3, sl, #3
 800ab92:	f000 bd56 	b.w	800b642 <_dtoa_r+0xb4a>
 800ab96:	ed9d 7b04 	vldr	d7, [sp, #16]
 800ab9a:	2200      	movs	r2, #0
 800ab9c:	ec51 0b17 	vmov	r0, r1, d7
 800aba0:	2300      	movs	r3, #0
 800aba2:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800aba6:	f7f5 ff9f 	bl	8000ae8 <__aeabi_dcmpeq>
 800abaa:	4680      	mov	r8, r0
 800abac:	b158      	cbz	r0, 800abc6 <_dtoa_r+0xce>
 800abae:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800abb0:	2301      	movs	r3, #1
 800abb2:	6013      	str	r3, [r2, #0]
 800abb4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800abb6:	b113      	cbz	r3, 800abbe <_dtoa_r+0xc6>
 800abb8:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800abba:	4b86      	ldr	r3, [pc, #536]	@ (800add4 <_dtoa_r+0x2dc>)
 800abbc:	6013      	str	r3, [r2, #0]
 800abbe:	f8df a228 	ldr.w	sl, [pc, #552]	@ 800ade8 <_dtoa_r+0x2f0>
 800abc2:	f000 bd40 	b.w	800b646 <_dtoa_r+0xb4e>
 800abc6:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800abca:	aa14      	add	r2, sp, #80	@ 0x50
 800abcc:	a915      	add	r1, sp, #84	@ 0x54
 800abce:	4648      	mov	r0, r9
 800abd0:	f001 f984 	bl	800bedc <__d2b>
 800abd4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800abd8:	9002      	str	r0, [sp, #8]
 800abda:	2e00      	cmp	r6, #0
 800abdc:	d078      	beq.n	800acd0 <_dtoa_r+0x1d8>
 800abde:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800abe0:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800abe4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800abe8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800abec:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800abf0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800abf4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800abf8:	4619      	mov	r1, r3
 800abfa:	2200      	movs	r2, #0
 800abfc:	4b76      	ldr	r3, [pc, #472]	@ (800add8 <_dtoa_r+0x2e0>)
 800abfe:	f7f5 fb53 	bl	80002a8 <__aeabi_dsub>
 800ac02:	a36b      	add	r3, pc, #428	@ (adr r3, 800adb0 <_dtoa_r+0x2b8>)
 800ac04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac08:	f7f5 fd06 	bl	8000618 <__aeabi_dmul>
 800ac0c:	a36a      	add	r3, pc, #424	@ (adr r3, 800adb8 <_dtoa_r+0x2c0>)
 800ac0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac12:	f7f5 fb4b 	bl	80002ac <__adddf3>
 800ac16:	4604      	mov	r4, r0
 800ac18:	4630      	mov	r0, r6
 800ac1a:	460d      	mov	r5, r1
 800ac1c:	f7f5 fc92 	bl	8000544 <__aeabi_i2d>
 800ac20:	a367      	add	r3, pc, #412	@ (adr r3, 800adc0 <_dtoa_r+0x2c8>)
 800ac22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac26:	f7f5 fcf7 	bl	8000618 <__aeabi_dmul>
 800ac2a:	4602      	mov	r2, r0
 800ac2c:	460b      	mov	r3, r1
 800ac2e:	4620      	mov	r0, r4
 800ac30:	4629      	mov	r1, r5
 800ac32:	f7f5 fb3b 	bl	80002ac <__adddf3>
 800ac36:	4604      	mov	r4, r0
 800ac38:	460d      	mov	r5, r1
 800ac3a:	f7f5 ff9d 	bl	8000b78 <__aeabi_d2iz>
 800ac3e:	2200      	movs	r2, #0
 800ac40:	4607      	mov	r7, r0
 800ac42:	2300      	movs	r3, #0
 800ac44:	4620      	mov	r0, r4
 800ac46:	4629      	mov	r1, r5
 800ac48:	f7f5 ff58 	bl	8000afc <__aeabi_dcmplt>
 800ac4c:	b140      	cbz	r0, 800ac60 <_dtoa_r+0x168>
 800ac4e:	4638      	mov	r0, r7
 800ac50:	f7f5 fc78 	bl	8000544 <__aeabi_i2d>
 800ac54:	4622      	mov	r2, r4
 800ac56:	462b      	mov	r3, r5
 800ac58:	f7f5 ff46 	bl	8000ae8 <__aeabi_dcmpeq>
 800ac5c:	b900      	cbnz	r0, 800ac60 <_dtoa_r+0x168>
 800ac5e:	3f01      	subs	r7, #1
 800ac60:	2f16      	cmp	r7, #22
 800ac62:	d852      	bhi.n	800ad0a <_dtoa_r+0x212>
 800ac64:	4b5d      	ldr	r3, [pc, #372]	@ (800addc <_dtoa_r+0x2e4>)
 800ac66:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800ac6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac6e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800ac72:	f7f5 ff43 	bl	8000afc <__aeabi_dcmplt>
 800ac76:	2800      	cmp	r0, #0
 800ac78:	d049      	beq.n	800ad0e <_dtoa_r+0x216>
 800ac7a:	3f01      	subs	r7, #1
 800ac7c:	2300      	movs	r3, #0
 800ac7e:	9310      	str	r3, [sp, #64]	@ 0x40
 800ac80:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800ac82:	1b9b      	subs	r3, r3, r6
 800ac84:	1e5a      	subs	r2, r3, #1
 800ac86:	bf45      	ittet	mi
 800ac88:	f1c3 0301 	rsbmi	r3, r3, #1
 800ac8c:	9300      	strmi	r3, [sp, #0]
 800ac8e:	2300      	movpl	r3, #0
 800ac90:	2300      	movmi	r3, #0
 800ac92:	9206      	str	r2, [sp, #24]
 800ac94:	bf54      	ite	pl
 800ac96:	9300      	strpl	r3, [sp, #0]
 800ac98:	9306      	strmi	r3, [sp, #24]
 800ac9a:	2f00      	cmp	r7, #0
 800ac9c:	db39      	blt.n	800ad12 <_dtoa_r+0x21a>
 800ac9e:	9b06      	ldr	r3, [sp, #24]
 800aca0:	970d      	str	r7, [sp, #52]	@ 0x34
 800aca2:	443b      	add	r3, r7
 800aca4:	9306      	str	r3, [sp, #24]
 800aca6:	2300      	movs	r3, #0
 800aca8:	9308      	str	r3, [sp, #32]
 800acaa:	9b07      	ldr	r3, [sp, #28]
 800acac:	2b09      	cmp	r3, #9
 800acae:	d863      	bhi.n	800ad78 <_dtoa_r+0x280>
 800acb0:	2b05      	cmp	r3, #5
 800acb2:	bfc4      	itt	gt
 800acb4:	3b04      	subgt	r3, #4
 800acb6:	9307      	strgt	r3, [sp, #28]
 800acb8:	9b07      	ldr	r3, [sp, #28]
 800acba:	f1a3 0302 	sub.w	r3, r3, #2
 800acbe:	bfcc      	ite	gt
 800acc0:	2400      	movgt	r4, #0
 800acc2:	2401      	movle	r4, #1
 800acc4:	2b03      	cmp	r3, #3
 800acc6:	d863      	bhi.n	800ad90 <_dtoa_r+0x298>
 800acc8:	e8df f003 	tbb	[pc, r3]
 800accc:	2b375452 	.word	0x2b375452
 800acd0:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800acd4:	441e      	add	r6, r3
 800acd6:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800acda:	2b20      	cmp	r3, #32
 800acdc:	bfc1      	itttt	gt
 800acde:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800ace2:	409f      	lslgt	r7, r3
 800ace4:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800ace8:	fa24 f303 	lsrgt.w	r3, r4, r3
 800acec:	bfd6      	itet	le
 800acee:	f1c3 0320 	rsble	r3, r3, #32
 800acf2:	ea47 0003 	orrgt.w	r0, r7, r3
 800acf6:	fa04 f003 	lslle.w	r0, r4, r3
 800acfa:	f7f5 fc13 	bl	8000524 <__aeabi_ui2d>
 800acfe:	2201      	movs	r2, #1
 800ad00:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800ad04:	3e01      	subs	r6, #1
 800ad06:	9212      	str	r2, [sp, #72]	@ 0x48
 800ad08:	e776      	b.n	800abf8 <_dtoa_r+0x100>
 800ad0a:	2301      	movs	r3, #1
 800ad0c:	e7b7      	b.n	800ac7e <_dtoa_r+0x186>
 800ad0e:	9010      	str	r0, [sp, #64]	@ 0x40
 800ad10:	e7b6      	b.n	800ac80 <_dtoa_r+0x188>
 800ad12:	9b00      	ldr	r3, [sp, #0]
 800ad14:	1bdb      	subs	r3, r3, r7
 800ad16:	9300      	str	r3, [sp, #0]
 800ad18:	427b      	negs	r3, r7
 800ad1a:	9308      	str	r3, [sp, #32]
 800ad1c:	2300      	movs	r3, #0
 800ad1e:	930d      	str	r3, [sp, #52]	@ 0x34
 800ad20:	e7c3      	b.n	800acaa <_dtoa_r+0x1b2>
 800ad22:	2301      	movs	r3, #1
 800ad24:	9309      	str	r3, [sp, #36]	@ 0x24
 800ad26:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ad28:	eb07 0b03 	add.w	fp, r7, r3
 800ad2c:	f10b 0301 	add.w	r3, fp, #1
 800ad30:	2b01      	cmp	r3, #1
 800ad32:	9303      	str	r3, [sp, #12]
 800ad34:	bfb8      	it	lt
 800ad36:	2301      	movlt	r3, #1
 800ad38:	e006      	b.n	800ad48 <_dtoa_r+0x250>
 800ad3a:	2301      	movs	r3, #1
 800ad3c:	9309      	str	r3, [sp, #36]	@ 0x24
 800ad3e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	dd28      	ble.n	800ad96 <_dtoa_r+0x29e>
 800ad44:	469b      	mov	fp, r3
 800ad46:	9303      	str	r3, [sp, #12]
 800ad48:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800ad4c:	2100      	movs	r1, #0
 800ad4e:	2204      	movs	r2, #4
 800ad50:	f102 0514 	add.w	r5, r2, #20
 800ad54:	429d      	cmp	r5, r3
 800ad56:	d926      	bls.n	800ada6 <_dtoa_r+0x2ae>
 800ad58:	6041      	str	r1, [r0, #4]
 800ad5a:	4648      	mov	r0, r9
 800ad5c:	f000 fd9c 	bl	800b898 <_Balloc>
 800ad60:	4682      	mov	sl, r0
 800ad62:	2800      	cmp	r0, #0
 800ad64:	d142      	bne.n	800adec <_dtoa_r+0x2f4>
 800ad66:	4b1e      	ldr	r3, [pc, #120]	@ (800ade0 <_dtoa_r+0x2e8>)
 800ad68:	4602      	mov	r2, r0
 800ad6a:	f240 11af 	movw	r1, #431	@ 0x1af
 800ad6e:	e6da      	b.n	800ab26 <_dtoa_r+0x2e>
 800ad70:	2300      	movs	r3, #0
 800ad72:	e7e3      	b.n	800ad3c <_dtoa_r+0x244>
 800ad74:	2300      	movs	r3, #0
 800ad76:	e7d5      	b.n	800ad24 <_dtoa_r+0x22c>
 800ad78:	2401      	movs	r4, #1
 800ad7a:	2300      	movs	r3, #0
 800ad7c:	9307      	str	r3, [sp, #28]
 800ad7e:	9409      	str	r4, [sp, #36]	@ 0x24
 800ad80:	f04f 3bff 	mov.w	fp, #4294967295
 800ad84:	2200      	movs	r2, #0
 800ad86:	f8cd b00c 	str.w	fp, [sp, #12]
 800ad8a:	2312      	movs	r3, #18
 800ad8c:	920c      	str	r2, [sp, #48]	@ 0x30
 800ad8e:	e7db      	b.n	800ad48 <_dtoa_r+0x250>
 800ad90:	2301      	movs	r3, #1
 800ad92:	9309      	str	r3, [sp, #36]	@ 0x24
 800ad94:	e7f4      	b.n	800ad80 <_dtoa_r+0x288>
 800ad96:	f04f 0b01 	mov.w	fp, #1
 800ad9a:	f8cd b00c 	str.w	fp, [sp, #12]
 800ad9e:	465b      	mov	r3, fp
 800ada0:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800ada4:	e7d0      	b.n	800ad48 <_dtoa_r+0x250>
 800ada6:	3101      	adds	r1, #1
 800ada8:	0052      	lsls	r2, r2, #1
 800adaa:	e7d1      	b.n	800ad50 <_dtoa_r+0x258>
 800adac:	f3af 8000 	nop.w
 800adb0:	636f4361 	.word	0x636f4361
 800adb4:	3fd287a7 	.word	0x3fd287a7
 800adb8:	8b60c8b3 	.word	0x8b60c8b3
 800adbc:	3fc68a28 	.word	0x3fc68a28
 800adc0:	509f79fb 	.word	0x509f79fb
 800adc4:	3fd34413 	.word	0x3fd34413
 800adc8:	0800d58d 	.word	0x0800d58d
 800adcc:	0800d5a4 	.word	0x0800d5a4
 800add0:	7ff00000 	.word	0x7ff00000
 800add4:	0800d55d 	.word	0x0800d55d
 800add8:	3ff80000 	.word	0x3ff80000
 800addc:	0800d6f8 	.word	0x0800d6f8
 800ade0:	0800d5fc 	.word	0x0800d5fc
 800ade4:	0800d589 	.word	0x0800d589
 800ade8:	0800d55c 	.word	0x0800d55c
 800adec:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800adf0:	6018      	str	r0, [r3, #0]
 800adf2:	9b03      	ldr	r3, [sp, #12]
 800adf4:	2b0e      	cmp	r3, #14
 800adf6:	f200 80a1 	bhi.w	800af3c <_dtoa_r+0x444>
 800adfa:	2c00      	cmp	r4, #0
 800adfc:	f000 809e 	beq.w	800af3c <_dtoa_r+0x444>
 800ae00:	2f00      	cmp	r7, #0
 800ae02:	dd33      	ble.n	800ae6c <_dtoa_r+0x374>
 800ae04:	4b9c      	ldr	r3, [pc, #624]	@ (800b078 <_dtoa_r+0x580>)
 800ae06:	f007 020f 	and.w	r2, r7, #15
 800ae0a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ae0e:	ed93 7b00 	vldr	d7, [r3]
 800ae12:	05f8      	lsls	r0, r7, #23
 800ae14:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800ae18:	ea4f 1427 	mov.w	r4, r7, asr #4
 800ae1c:	d516      	bpl.n	800ae4c <_dtoa_r+0x354>
 800ae1e:	4b97      	ldr	r3, [pc, #604]	@ (800b07c <_dtoa_r+0x584>)
 800ae20:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800ae24:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ae28:	f7f5 fd20 	bl	800086c <__aeabi_ddiv>
 800ae2c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ae30:	f004 040f 	and.w	r4, r4, #15
 800ae34:	2603      	movs	r6, #3
 800ae36:	4d91      	ldr	r5, [pc, #580]	@ (800b07c <_dtoa_r+0x584>)
 800ae38:	b954      	cbnz	r4, 800ae50 <_dtoa_r+0x358>
 800ae3a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800ae3e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ae42:	f7f5 fd13 	bl	800086c <__aeabi_ddiv>
 800ae46:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ae4a:	e028      	b.n	800ae9e <_dtoa_r+0x3a6>
 800ae4c:	2602      	movs	r6, #2
 800ae4e:	e7f2      	b.n	800ae36 <_dtoa_r+0x33e>
 800ae50:	07e1      	lsls	r1, r4, #31
 800ae52:	d508      	bpl.n	800ae66 <_dtoa_r+0x36e>
 800ae54:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800ae58:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ae5c:	f7f5 fbdc 	bl	8000618 <__aeabi_dmul>
 800ae60:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800ae64:	3601      	adds	r6, #1
 800ae66:	1064      	asrs	r4, r4, #1
 800ae68:	3508      	adds	r5, #8
 800ae6a:	e7e5      	b.n	800ae38 <_dtoa_r+0x340>
 800ae6c:	f000 80af 	beq.w	800afce <_dtoa_r+0x4d6>
 800ae70:	427c      	negs	r4, r7
 800ae72:	4b81      	ldr	r3, [pc, #516]	@ (800b078 <_dtoa_r+0x580>)
 800ae74:	4d81      	ldr	r5, [pc, #516]	@ (800b07c <_dtoa_r+0x584>)
 800ae76:	f004 020f 	and.w	r2, r4, #15
 800ae7a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ae7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae82:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800ae86:	f7f5 fbc7 	bl	8000618 <__aeabi_dmul>
 800ae8a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ae8e:	1124      	asrs	r4, r4, #4
 800ae90:	2300      	movs	r3, #0
 800ae92:	2602      	movs	r6, #2
 800ae94:	2c00      	cmp	r4, #0
 800ae96:	f040 808f 	bne.w	800afb8 <_dtoa_r+0x4c0>
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	d1d3      	bne.n	800ae46 <_dtoa_r+0x34e>
 800ae9e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800aea0:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	f000 8094 	beq.w	800afd2 <_dtoa_r+0x4da>
 800aeaa:	4b75      	ldr	r3, [pc, #468]	@ (800b080 <_dtoa_r+0x588>)
 800aeac:	2200      	movs	r2, #0
 800aeae:	4620      	mov	r0, r4
 800aeb0:	4629      	mov	r1, r5
 800aeb2:	f7f5 fe23 	bl	8000afc <__aeabi_dcmplt>
 800aeb6:	2800      	cmp	r0, #0
 800aeb8:	f000 808b 	beq.w	800afd2 <_dtoa_r+0x4da>
 800aebc:	9b03      	ldr	r3, [sp, #12]
 800aebe:	2b00      	cmp	r3, #0
 800aec0:	f000 8087 	beq.w	800afd2 <_dtoa_r+0x4da>
 800aec4:	f1bb 0f00 	cmp.w	fp, #0
 800aec8:	dd34      	ble.n	800af34 <_dtoa_r+0x43c>
 800aeca:	4620      	mov	r0, r4
 800aecc:	4b6d      	ldr	r3, [pc, #436]	@ (800b084 <_dtoa_r+0x58c>)
 800aece:	2200      	movs	r2, #0
 800aed0:	4629      	mov	r1, r5
 800aed2:	f7f5 fba1 	bl	8000618 <__aeabi_dmul>
 800aed6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800aeda:	f107 38ff 	add.w	r8, r7, #4294967295
 800aede:	3601      	adds	r6, #1
 800aee0:	465c      	mov	r4, fp
 800aee2:	4630      	mov	r0, r6
 800aee4:	f7f5 fb2e 	bl	8000544 <__aeabi_i2d>
 800aee8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800aeec:	f7f5 fb94 	bl	8000618 <__aeabi_dmul>
 800aef0:	4b65      	ldr	r3, [pc, #404]	@ (800b088 <_dtoa_r+0x590>)
 800aef2:	2200      	movs	r2, #0
 800aef4:	f7f5 f9da 	bl	80002ac <__adddf3>
 800aef8:	4605      	mov	r5, r0
 800aefa:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800aefe:	2c00      	cmp	r4, #0
 800af00:	d16a      	bne.n	800afd8 <_dtoa_r+0x4e0>
 800af02:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800af06:	4b61      	ldr	r3, [pc, #388]	@ (800b08c <_dtoa_r+0x594>)
 800af08:	2200      	movs	r2, #0
 800af0a:	f7f5 f9cd 	bl	80002a8 <__aeabi_dsub>
 800af0e:	4602      	mov	r2, r0
 800af10:	460b      	mov	r3, r1
 800af12:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800af16:	462a      	mov	r2, r5
 800af18:	4633      	mov	r3, r6
 800af1a:	f7f5 fe0d 	bl	8000b38 <__aeabi_dcmpgt>
 800af1e:	2800      	cmp	r0, #0
 800af20:	f040 8298 	bne.w	800b454 <_dtoa_r+0x95c>
 800af24:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800af28:	462a      	mov	r2, r5
 800af2a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800af2e:	f7f5 fde5 	bl	8000afc <__aeabi_dcmplt>
 800af32:	bb38      	cbnz	r0, 800af84 <_dtoa_r+0x48c>
 800af34:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800af38:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800af3c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800af3e:	2b00      	cmp	r3, #0
 800af40:	f2c0 8157 	blt.w	800b1f2 <_dtoa_r+0x6fa>
 800af44:	2f0e      	cmp	r7, #14
 800af46:	f300 8154 	bgt.w	800b1f2 <_dtoa_r+0x6fa>
 800af4a:	4b4b      	ldr	r3, [pc, #300]	@ (800b078 <_dtoa_r+0x580>)
 800af4c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800af50:	ed93 7b00 	vldr	d7, [r3]
 800af54:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800af56:	2b00      	cmp	r3, #0
 800af58:	ed8d 7b00 	vstr	d7, [sp]
 800af5c:	f280 80e5 	bge.w	800b12a <_dtoa_r+0x632>
 800af60:	9b03      	ldr	r3, [sp, #12]
 800af62:	2b00      	cmp	r3, #0
 800af64:	f300 80e1 	bgt.w	800b12a <_dtoa_r+0x632>
 800af68:	d10c      	bne.n	800af84 <_dtoa_r+0x48c>
 800af6a:	4b48      	ldr	r3, [pc, #288]	@ (800b08c <_dtoa_r+0x594>)
 800af6c:	2200      	movs	r2, #0
 800af6e:	ec51 0b17 	vmov	r0, r1, d7
 800af72:	f7f5 fb51 	bl	8000618 <__aeabi_dmul>
 800af76:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800af7a:	f7f5 fdd3 	bl	8000b24 <__aeabi_dcmpge>
 800af7e:	2800      	cmp	r0, #0
 800af80:	f000 8266 	beq.w	800b450 <_dtoa_r+0x958>
 800af84:	2400      	movs	r4, #0
 800af86:	4625      	mov	r5, r4
 800af88:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800af8a:	4656      	mov	r6, sl
 800af8c:	ea6f 0803 	mvn.w	r8, r3
 800af90:	2700      	movs	r7, #0
 800af92:	4621      	mov	r1, r4
 800af94:	4648      	mov	r0, r9
 800af96:	f000 fcbf 	bl	800b918 <_Bfree>
 800af9a:	2d00      	cmp	r5, #0
 800af9c:	f000 80bd 	beq.w	800b11a <_dtoa_r+0x622>
 800afa0:	b12f      	cbz	r7, 800afae <_dtoa_r+0x4b6>
 800afa2:	42af      	cmp	r7, r5
 800afa4:	d003      	beq.n	800afae <_dtoa_r+0x4b6>
 800afa6:	4639      	mov	r1, r7
 800afa8:	4648      	mov	r0, r9
 800afaa:	f000 fcb5 	bl	800b918 <_Bfree>
 800afae:	4629      	mov	r1, r5
 800afb0:	4648      	mov	r0, r9
 800afb2:	f000 fcb1 	bl	800b918 <_Bfree>
 800afb6:	e0b0      	b.n	800b11a <_dtoa_r+0x622>
 800afb8:	07e2      	lsls	r2, r4, #31
 800afba:	d505      	bpl.n	800afc8 <_dtoa_r+0x4d0>
 800afbc:	e9d5 2300 	ldrd	r2, r3, [r5]
 800afc0:	f7f5 fb2a 	bl	8000618 <__aeabi_dmul>
 800afc4:	3601      	adds	r6, #1
 800afc6:	2301      	movs	r3, #1
 800afc8:	1064      	asrs	r4, r4, #1
 800afca:	3508      	adds	r5, #8
 800afcc:	e762      	b.n	800ae94 <_dtoa_r+0x39c>
 800afce:	2602      	movs	r6, #2
 800afd0:	e765      	b.n	800ae9e <_dtoa_r+0x3a6>
 800afd2:	9c03      	ldr	r4, [sp, #12]
 800afd4:	46b8      	mov	r8, r7
 800afd6:	e784      	b.n	800aee2 <_dtoa_r+0x3ea>
 800afd8:	4b27      	ldr	r3, [pc, #156]	@ (800b078 <_dtoa_r+0x580>)
 800afda:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800afdc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800afe0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800afe4:	4454      	add	r4, sl
 800afe6:	2900      	cmp	r1, #0
 800afe8:	d054      	beq.n	800b094 <_dtoa_r+0x59c>
 800afea:	4929      	ldr	r1, [pc, #164]	@ (800b090 <_dtoa_r+0x598>)
 800afec:	2000      	movs	r0, #0
 800afee:	f7f5 fc3d 	bl	800086c <__aeabi_ddiv>
 800aff2:	4633      	mov	r3, r6
 800aff4:	462a      	mov	r2, r5
 800aff6:	f7f5 f957 	bl	80002a8 <__aeabi_dsub>
 800affa:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800affe:	4656      	mov	r6, sl
 800b000:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b004:	f7f5 fdb8 	bl	8000b78 <__aeabi_d2iz>
 800b008:	4605      	mov	r5, r0
 800b00a:	f7f5 fa9b 	bl	8000544 <__aeabi_i2d>
 800b00e:	4602      	mov	r2, r0
 800b010:	460b      	mov	r3, r1
 800b012:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b016:	f7f5 f947 	bl	80002a8 <__aeabi_dsub>
 800b01a:	3530      	adds	r5, #48	@ 0x30
 800b01c:	4602      	mov	r2, r0
 800b01e:	460b      	mov	r3, r1
 800b020:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b024:	f806 5b01 	strb.w	r5, [r6], #1
 800b028:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800b02c:	f7f5 fd66 	bl	8000afc <__aeabi_dcmplt>
 800b030:	2800      	cmp	r0, #0
 800b032:	d172      	bne.n	800b11a <_dtoa_r+0x622>
 800b034:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b038:	4911      	ldr	r1, [pc, #68]	@ (800b080 <_dtoa_r+0x588>)
 800b03a:	2000      	movs	r0, #0
 800b03c:	f7f5 f934 	bl	80002a8 <__aeabi_dsub>
 800b040:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800b044:	f7f5 fd5a 	bl	8000afc <__aeabi_dcmplt>
 800b048:	2800      	cmp	r0, #0
 800b04a:	f040 80b4 	bne.w	800b1b6 <_dtoa_r+0x6be>
 800b04e:	42a6      	cmp	r6, r4
 800b050:	f43f af70 	beq.w	800af34 <_dtoa_r+0x43c>
 800b054:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800b058:	4b0a      	ldr	r3, [pc, #40]	@ (800b084 <_dtoa_r+0x58c>)
 800b05a:	2200      	movs	r2, #0
 800b05c:	f7f5 fadc 	bl	8000618 <__aeabi_dmul>
 800b060:	4b08      	ldr	r3, [pc, #32]	@ (800b084 <_dtoa_r+0x58c>)
 800b062:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800b066:	2200      	movs	r2, #0
 800b068:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b06c:	f7f5 fad4 	bl	8000618 <__aeabi_dmul>
 800b070:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b074:	e7c4      	b.n	800b000 <_dtoa_r+0x508>
 800b076:	bf00      	nop
 800b078:	0800d6f8 	.word	0x0800d6f8
 800b07c:	0800d6d0 	.word	0x0800d6d0
 800b080:	3ff00000 	.word	0x3ff00000
 800b084:	40240000 	.word	0x40240000
 800b088:	401c0000 	.word	0x401c0000
 800b08c:	40140000 	.word	0x40140000
 800b090:	3fe00000 	.word	0x3fe00000
 800b094:	4631      	mov	r1, r6
 800b096:	4628      	mov	r0, r5
 800b098:	f7f5 fabe 	bl	8000618 <__aeabi_dmul>
 800b09c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800b0a0:	9413      	str	r4, [sp, #76]	@ 0x4c
 800b0a2:	4656      	mov	r6, sl
 800b0a4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b0a8:	f7f5 fd66 	bl	8000b78 <__aeabi_d2iz>
 800b0ac:	4605      	mov	r5, r0
 800b0ae:	f7f5 fa49 	bl	8000544 <__aeabi_i2d>
 800b0b2:	4602      	mov	r2, r0
 800b0b4:	460b      	mov	r3, r1
 800b0b6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b0ba:	f7f5 f8f5 	bl	80002a8 <__aeabi_dsub>
 800b0be:	3530      	adds	r5, #48	@ 0x30
 800b0c0:	f806 5b01 	strb.w	r5, [r6], #1
 800b0c4:	4602      	mov	r2, r0
 800b0c6:	460b      	mov	r3, r1
 800b0c8:	42a6      	cmp	r6, r4
 800b0ca:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b0ce:	f04f 0200 	mov.w	r2, #0
 800b0d2:	d124      	bne.n	800b11e <_dtoa_r+0x626>
 800b0d4:	4baf      	ldr	r3, [pc, #700]	@ (800b394 <_dtoa_r+0x89c>)
 800b0d6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800b0da:	f7f5 f8e7 	bl	80002ac <__adddf3>
 800b0de:	4602      	mov	r2, r0
 800b0e0:	460b      	mov	r3, r1
 800b0e2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b0e6:	f7f5 fd27 	bl	8000b38 <__aeabi_dcmpgt>
 800b0ea:	2800      	cmp	r0, #0
 800b0ec:	d163      	bne.n	800b1b6 <_dtoa_r+0x6be>
 800b0ee:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800b0f2:	49a8      	ldr	r1, [pc, #672]	@ (800b394 <_dtoa_r+0x89c>)
 800b0f4:	2000      	movs	r0, #0
 800b0f6:	f7f5 f8d7 	bl	80002a8 <__aeabi_dsub>
 800b0fa:	4602      	mov	r2, r0
 800b0fc:	460b      	mov	r3, r1
 800b0fe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b102:	f7f5 fcfb 	bl	8000afc <__aeabi_dcmplt>
 800b106:	2800      	cmp	r0, #0
 800b108:	f43f af14 	beq.w	800af34 <_dtoa_r+0x43c>
 800b10c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800b10e:	1e73      	subs	r3, r6, #1
 800b110:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b112:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b116:	2b30      	cmp	r3, #48	@ 0x30
 800b118:	d0f8      	beq.n	800b10c <_dtoa_r+0x614>
 800b11a:	4647      	mov	r7, r8
 800b11c:	e03b      	b.n	800b196 <_dtoa_r+0x69e>
 800b11e:	4b9e      	ldr	r3, [pc, #632]	@ (800b398 <_dtoa_r+0x8a0>)
 800b120:	f7f5 fa7a 	bl	8000618 <__aeabi_dmul>
 800b124:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b128:	e7bc      	b.n	800b0a4 <_dtoa_r+0x5ac>
 800b12a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800b12e:	4656      	mov	r6, sl
 800b130:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b134:	4620      	mov	r0, r4
 800b136:	4629      	mov	r1, r5
 800b138:	f7f5 fb98 	bl	800086c <__aeabi_ddiv>
 800b13c:	f7f5 fd1c 	bl	8000b78 <__aeabi_d2iz>
 800b140:	4680      	mov	r8, r0
 800b142:	f7f5 f9ff 	bl	8000544 <__aeabi_i2d>
 800b146:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b14a:	f7f5 fa65 	bl	8000618 <__aeabi_dmul>
 800b14e:	4602      	mov	r2, r0
 800b150:	460b      	mov	r3, r1
 800b152:	4620      	mov	r0, r4
 800b154:	4629      	mov	r1, r5
 800b156:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800b15a:	f7f5 f8a5 	bl	80002a8 <__aeabi_dsub>
 800b15e:	f806 4b01 	strb.w	r4, [r6], #1
 800b162:	9d03      	ldr	r5, [sp, #12]
 800b164:	eba6 040a 	sub.w	r4, r6, sl
 800b168:	42a5      	cmp	r5, r4
 800b16a:	4602      	mov	r2, r0
 800b16c:	460b      	mov	r3, r1
 800b16e:	d133      	bne.n	800b1d8 <_dtoa_r+0x6e0>
 800b170:	f7f5 f89c 	bl	80002ac <__adddf3>
 800b174:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b178:	4604      	mov	r4, r0
 800b17a:	460d      	mov	r5, r1
 800b17c:	f7f5 fcdc 	bl	8000b38 <__aeabi_dcmpgt>
 800b180:	b9c0      	cbnz	r0, 800b1b4 <_dtoa_r+0x6bc>
 800b182:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b186:	4620      	mov	r0, r4
 800b188:	4629      	mov	r1, r5
 800b18a:	f7f5 fcad 	bl	8000ae8 <__aeabi_dcmpeq>
 800b18e:	b110      	cbz	r0, 800b196 <_dtoa_r+0x69e>
 800b190:	f018 0f01 	tst.w	r8, #1
 800b194:	d10e      	bne.n	800b1b4 <_dtoa_r+0x6bc>
 800b196:	9902      	ldr	r1, [sp, #8]
 800b198:	4648      	mov	r0, r9
 800b19a:	f000 fbbd 	bl	800b918 <_Bfree>
 800b19e:	2300      	movs	r3, #0
 800b1a0:	7033      	strb	r3, [r6, #0]
 800b1a2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800b1a4:	3701      	adds	r7, #1
 800b1a6:	601f      	str	r7, [r3, #0]
 800b1a8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	f000 824b 	beq.w	800b646 <_dtoa_r+0xb4e>
 800b1b0:	601e      	str	r6, [r3, #0]
 800b1b2:	e248      	b.n	800b646 <_dtoa_r+0xb4e>
 800b1b4:	46b8      	mov	r8, r7
 800b1b6:	4633      	mov	r3, r6
 800b1b8:	461e      	mov	r6, r3
 800b1ba:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b1be:	2a39      	cmp	r2, #57	@ 0x39
 800b1c0:	d106      	bne.n	800b1d0 <_dtoa_r+0x6d8>
 800b1c2:	459a      	cmp	sl, r3
 800b1c4:	d1f8      	bne.n	800b1b8 <_dtoa_r+0x6c0>
 800b1c6:	2230      	movs	r2, #48	@ 0x30
 800b1c8:	f108 0801 	add.w	r8, r8, #1
 800b1cc:	f88a 2000 	strb.w	r2, [sl]
 800b1d0:	781a      	ldrb	r2, [r3, #0]
 800b1d2:	3201      	adds	r2, #1
 800b1d4:	701a      	strb	r2, [r3, #0]
 800b1d6:	e7a0      	b.n	800b11a <_dtoa_r+0x622>
 800b1d8:	4b6f      	ldr	r3, [pc, #444]	@ (800b398 <_dtoa_r+0x8a0>)
 800b1da:	2200      	movs	r2, #0
 800b1dc:	f7f5 fa1c 	bl	8000618 <__aeabi_dmul>
 800b1e0:	2200      	movs	r2, #0
 800b1e2:	2300      	movs	r3, #0
 800b1e4:	4604      	mov	r4, r0
 800b1e6:	460d      	mov	r5, r1
 800b1e8:	f7f5 fc7e 	bl	8000ae8 <__aeabi_dcmpeq>
 800b1ec:	2800      	cmp	r0, #0
 800b1ee:	d09f      	beq.n	800b130 <_dtoa_r+0x638>
 800b1f0:	e7d1      	b.n	800b196 <_dtoa_r+0x69e>
 800b1f2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b1f4:	2a00      	cmp	r2, #0
 800b1f6:	f000 80ea 	beq.w	800b3ce <_dtoa_r+0x8d6>
 800b1fa:	9a07      	ldr	r2, [sp, #28]
 800b1fc:	2a01      	cmp	r2, #1
 800b1fe:	f300 80cd 	bgt.w	800b39c <_dtoa_r+0x8a4>
 800b202:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800b204:	2a00      	cmp	r2, #0
 800b206:	f000 80c1 	beq.w	800b38c <_dtoa_r+0x894>
 800b20a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800b20e:	9c08      	ldr	r4, [sp, #32]
 800b210:	9e00      	ldr	r6, [sp, #0]
 800b212:	9a00      	ldr	r2, [sp, #0]
 800b214:	441a      	add	r2, r3
 800b216:	9200      	str	r2, [sp, #0]
 800b218:	9a06      	ldr	r2, [sp, #24]
 800b21a:	2101      	movs	r1, #1
 800b21c:	441a      	add	r2, r3
 800b21e:	4648      	mov	r0, r9
 800b220:	9206      	str	r2, [sp, #24]
 800b222:	f000 fc2d 	bl	800ba80 <__i2b>
 800b226:	4605      	mov	r5, r0
 800b228:	b166      	cbz	r6, 800b244 <_dtoa_r+0x74c>
 800b22a:	9b06      	ldr	r3, [sp, #24]
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	dd09      	ble.n	800b244 <_dtoa_r+0x74c>
 800b230:	42b3      	cmp	r3, r6
 800b232:	9a00      	ldr	r2, [sp, #0]
 800b234:	bfa8      	it	ge
 800b236:	4633      	movge	r3, r6
 800b238:	1ad2      	subs	r2, r2, r3
 800b23a:	9200      	str	r2, [sp, #0]
 800b23c:	9a06      	ldr	r2, [sp, #24]
 800b23e:	1af6      	subs	r6, r6, r3
 800b240:	1ad3      	subs	r3, r2, r3
 800b242:	9306      	str	r3, [sp, #24]
 800b244:	9b08      	ldr	r3, [sp, #32]
 800b246:	b30b      	cbz	r3, 800b28c <_dtoa_r+0x794>
 800b248:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	f000 80c6 	beq.w	800b3dc <_dtoa_r+0x8e4>
 800b250:	2c00      	cmp	r4, #0
 800b252:	f000 80c0 	beq.w	800b3d6 <_dtoa_r+0x8de>
 800b256:	4629      	mov	r1, r5
 800b258:	4622      	mov	r2, r4
 800b25a:	4648      	mov	r0, r9
 800b25c:	f000 fcc8 	bl	800bbf0 <__pow5mult>
 800b260:	9a02      	ldr	r2, [sp, #8]
 800b262:	4601      	mov	r1, r0
 800b264:	4605      	mov	r5, r0
 800b266:	4648      	mov	r0, r9
 800b268:	f000 fc20 	bl	800baac <__multiply>
 800b26c:	9902      	ldr	r1, [sp, #8]
 800b26e:	4680      	mov	r8, r0
 800b270:	4648      	mov	r0, r9
 800b272:	f000 fb51 	bl	800b918 <_Bfree>
 800b276:	9b08      	ldr	r3, [sp, #32]
 800b278:	1b1b      	subs	r3, r3, r4
 800b27a:	9308      	str	r3, [sp, #32]
 800b27c:	f000 80b1 	beq.w	800b3e2 <_dtoa_r+0x8ea>
 800b280:	9a08      	ldr	r2, [sp, #32]
 800b282:	4641      	mov	r1, r8
 800b284:	4648      	mov	r0, r9
 800b286:	f000 fcb3 	bl	800bbf0 <__pow5mult>
 800b28a:	9002      	str	r0, [sp, #8]
 800b28c:	2101      	movs	r1, #1
 800b28e:	4648      	mov	r0, r9
 800b290:	f000 fbf6 	bl	800ba80 <__i2b>
 800b294:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b296:	4604      	mov	r4, r0
 800b298:	2b00      	cmp	r3, #0
 800b29a:	f000 81d8 	beq.w	800b64e <_dtoa_r+0xb56>
 800b29e:	461a      	mov	r2, r3
 800b2a0:	4601      	mov	r1, r0
 800b2a2:	4648      	mov	r0, r9
 800b2a4:	f000 fca4 	bl	800bbf0 <__pow5mult>
 800b2a8:	9b07      	ldr	r3, [sp, #28]
 800b2aa:	2b01      	cmp	r3, #1
 800b2ac:	4604      	mov	r4, r0
 800b2ae:	f300 809f 	bgt.w	800b3f0 <_dtoa_r+0x8f8>
 800b2b2:	9b04      	ldr	r3, [sp, #16]
 800b2b4:	2b00      	cmp	r3, #0
 800b2b6:	f040 8097 	bne.w	800b3e8 <_dtoa_r+0x8f0>
 800b2ba:	9b05      	ldr	r3, [sp, #20]
 800b2bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	f040 8093 	bne.w	800b3ec <_dtoa_r+0x8f4>
 800b2c6:	9b05      	ldr	r3, [sp, #20]
 800b2c8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b2cc:	0d1b      	lsrs	r3, r3, #20
 800b2ce:	051b      	lsls	r3, r3, #20
 800b2d0:	b133      	cbz	r3, 800b2e0 <_dtoa_r+0x7e8>
 800b2d2:	9b00      	ldr	r3, [sp, #0]
 800b2d4:	3301      	adds	r3, #1
 800b2d6:	9300      	str	r3, [sp, #0]
 800b2d8:	9b06      	ldr	r3, [sp, #24]
 800b2da:	3301      	adds	r3, #1
 800b2dc:	9306      	str	r3, [sp, #24]
 800b2de:	2301      	movs	r3, #1
 800b2e0:	9308      	str	r3, [sp, #32]
 800b2e2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	f000 81b8 	beq.w	800b65a <_dtoa_r+0xb62>
 800b2ea:	6923      	ldr	r3, [r4, #16]
 800b2ec:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b2f0:	6918      	ldr	r0, [r3, #16]
 800b2f2:	f000 fb79 	bl	800b9e8 <__hi0bits>
 800b2f6:	f1c0 0020 	rsb	r0, r0, #32
 800b2fa:	9b06      	ldr	r3, [sp, #24]
 800b2fc:	4418      	add	r0, r3
 800b2fe:	f010 001f 	ands.w	r0, r0, #31
 800b302:	f000 8082 	beq.w	800b40a <_dtoa_r+0x912>
 800b306:	f1c0 0320 	rsb	r3, r0, #32
 800b30a:	2b04      	cmp	r3, #4
 800b30c:	dd73      	ble.n	800b3f6 <_dtoa_r+0x8fe>
 800b30e:	9b00      	ldr	r3, [sp, #0]
 800b310:	f1c0 001c 	rsb	r0, r0, #28
 800b314:	4403      	add	r3, r0
 800b316:	9300      	str	r3, [sp, #0]
 800b318:	9b06      	ldr	r3, [sp, #24]
 800b31a:	4403      	add	r3, r0
 800b31c:	4406      	add	r6, r0
 800b31e:	9306      	str	r3, [sp, #24]
 800b320:	9b00      	ldr	r3, [sp, #0]
 800b322:	2b00      	cmp	r3, #0
 800b324:	dd05      	ble.n	800b332 <_dtoa_r+0x83a>
 800b326:	9902      	ldr	r1, [sp, #8]
 800b328:	461a      	mov	r2, r3
 800b32a:	4648      	mov	r0, r9
 800b32c:	f000 fcba 	bl	800bca4 <__lshift>
 800b330:	9002      	str	r0, [sp, #8]
 800b332:	9b06      	ldr	r3, [sp, #24]
 800b334:	2b00      	cmp	r3, #0
 800b336:	dd05      	ble.n	800b344 <_dtoa_r+0x84c>
 800b338:	4621      	mov	r1, r4
 800b33a:	461a      	mov	r2, r3
 800b33c:	4648      	mov	r0, r9
 800b33e:	f000 fcb1 	bl	800bca4 <__lshift>
 800b342:	4604      	mov	r4, r0
 800b344:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800b346:	2b00      	cmp	r3, #0
 800b348:	d061      	beq.n	800b40e <_dtoa_r+0x916>
 800b34a:	9802      	ldr	r0, [sp, #8]
 800b34c:	4621      	mov	r1, r4
 800b34e:	f000 fd15 	bl	800bd7c <__mcmp>
 800b352:	2800      	cmp	r0, #0
 800b354:	da5b      	bge.n	800b40e <_dtoa_r+0x916>
 800b356:	2300      	movs	r3, #0
 800b358:	9902      	ldr	r1, [sp, #8]
 800b35a:	220a      	movs	r2, #10
 800b35c:	4648      	mov	r0, r9
 800b35e:	f000 fafd 	bl	800b95c <__multadd>
 800b362:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b364:	9002      	str	r0, [sp, #8]
 800b366:	f107 38ff 	add.w	r8, r7, #4294967295
 800b36a:	2b00      	cmp	r3, #0
 800b36c:	f000 8177 	beq.w	800b65e <_dtoa_r+0xb66>
 800b370:	4629      	mov	r1, r5
 800b372:	2300      	movs	r3, #0
 800b374:	220a      	movs	r2, #10
 800b376:	4648      	mov	r0, r9
 800b378:	f000 faf0 	bl	800b95c <__multadd>
 800b37c:	f1bb 0f00 	cmp.w	fp, #0
 800b380:	4605      	mov	r5, r0
 800b382:	dc6f      	bgt.n	800b464 <_dtoa_r+0x96c>
 800b384:	9b07      	ldr	r3, [sp, #28]
 800b386:	2b02      	cmp	r3, #2
 800b388:	dc49      	bgt.n	800b41e <_dtoa_r+0x926>
 800b38a:	e06b      	b.n	800b464 <_dtoa_r+0x96c>
 800b38c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800b38e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800b392:	e73c      	b.n	800b20e <_dtoa_r+0x716>
 800b394:	3fe00000 	.word	0x3fe00000
 800b398:	40240000 	.word	0x40240000
 800b39c:	9b03      	ldr	r3, [sp, #12]
 800b39e:	1e5c      	subs	r4, r3, #1
 800b3a0:	9b08      	ldr	r3, [sp, #32]
 800b3a2:	42a3      	cmp	r3, r4
 800b3a4:	db09      	blt.n	800b3ba <_dtoa_r+0x8c2>
 800b3a6:	1b1c      	subs	r4, r3, r4
 800b3a8:	9b03      	ldr	r3, [sp, #12]
 800b3aa:	2b00      	cmp	r3, #0
 800b3ac:	f6bf af30 	bge.w	800b210 <_dtoa_r+0x718>
 800b3b0:	9b00      	ldr	r3, [sp, #0]
 800b3b2:	9a03      	ldr	r2, [sp, #12]
 800b3b4:	1a9e      	subs	r6, r3, r2
 800b3b6:	2300      	movs	r3, #0
 800b3b8:	e72b      	b.n	800b212 <_dtoa_r+0x71a>
 800b3ba:	9b08      	ldr	r3, [sp, #32]
 800b3bc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800b3be:	9408      	str	r4, [sp, #32]
 800b3c0:	1ae3      	subs	r3, r4, r3
 800b3c2:	441a      	add	r2, r3
 800b3c4:	9e00      	ldr	r6, [sp, #0]
 800b3c6:	9b03      	ldr	r3, [sp, #12]
 800b3c8:	920d      	str	r2, [sp, #52]	@ 0x34
 800b3ca:	2400      	movs	r4, #0
 800b3cc:	e721      	b.n	800b212 <_dtoa_r+0x71a>
 800b3ce:	9c08      	ldr	r4, [sp, #32]
 800b3d0:	9e00      	ldr	r6, [sp, #0]
 800b3d2:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800b3d4:	e728      	b.n	800b228 <_dtoa_r+0x730>
 800b3d6:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800b3da:	e751      	b.n	800b280 <_dtoa_r+0x788>
 800b3dc:	9a08      	ldr	r2, [sp, #32]
 800b3de:	9902      	ldr	r1, [sp, #8]
 800b3e0:	e750      	b.n	800b284 <_dtoa_r+0x78c>
 800b3e2:	f8cd 8008 	str.w	r8, [sp, #8]
 800b3e6:	e751      	b.n	800b28c <_dtoa_r+0x794>
 800b3e8:	2300      	movs	r3, #0
 800b3ea:	e779      	b.n	800b2e0 <_dtoa_r+0x7e8>
 800b3ec:	9b04      	ldr	r3, [sp, #16]
 800b3ee:	e777      	b.n	800b2e0 <_dtoa_r+0x7e8>
 800b3f0:	2300      	movs	r3, #0
 800b3f2:	9308      	str	r3, [sp, #32]
 800b3f4:	e779      	b.n	800b2ea <_dtoa_r+0x7f2>
 800b3f6:	d093      	beq.n	800b320 <_dtoa_r+0x828>
 800b3f8:	9a00      	ldr	r2, [sp, #0]
 800b3fa:	331c      	adds	r3, #28
 800b3fc:	441a      	add	r2, r3
 800b3fe:	9200      	str	r2, [sp, #0]
 800b400:	9a06      	ldr	r2, [sp, #24]
 800b402:	441a      	add	r2, r3
 800b404:	441e      	add	r6, r3
 800b406:	9206      	str	r2, [sp, #24]
 800b408:	e78a      	b.n	800b320 <_dtoa_r+0x828>
 800b40a:	4603      	mov	r3, r0
 800b40c:	e7f4      	b.n	800b3f8 <_dtoa_r+0x900>
 800b40e:	9b03      	ldr	r3, [sp, #12]
 800b410:	2b00      	cmp	r3, #0
 800b412:	46b8      	mov	r8, r7
 800b414:	dc20      	bgt.n	800b458 <_dtoa_r+0x960>
 800b416:	469b      	mov	fp, r3
 800b418:	9b07      	ldr	r3, [sp, #28]
 800b41a:	2b02      	cmp	r3, #2
 800b41c:	dd1e      	ble.n	800b45c <_dtoa_r+0x964>
 800b41e:	f1bb 0f00 	cmp.w	fp, #0
 800b422:	f47f adb1 	bne.w	800af88 <_dtoa_r+0x490>
 800b426:	4621      	mov	r1, r4
 800b428:	465b      	mov	r3, fp
 800b42a:	2205      	movs	r2, #5
 800b42c:	4648      	mov	r0, r9
 800b42e:	f000 fa95 	bl	800b95c <__multadd>
 800b432:	4601      	mov	r1, r0
 800b434:	4604      	mov	r4, r0
 800b436:	9802      	ldr	r0, [sp, #8]
 800b438:	f000 fca0 	bl	800bd7c <__mcmp>
 800b43c:	2800      	cmp	r0, #0
 800b43e:	f77f ada3 	ble.w	800af88 <_dtoa_r+0x490>
 800b442:	4656      	mov	r6, sl
 800b444:	2331      	movs	r3, #49	@ 0x31
 800b446:	f806 3b01 	strb.w	r3, [r6], #1
 800b44a:	f108 0801 	add.w	r8, r8, #1
 800b44e:	e59f      	b.n	800af90 <_dtoa_r+0x498>
 800b450:	9c03      	ldr	r4, [sp, #12]
 800b452:	46b8      	mov	r8, r7
 800b454:	4625      	mov	r5, r4
 800b456:	e7f4      	b.n	800b442 <_dtoa_r+0x94a>
 800b458:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800b45c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b45e:	2b00      	cmp	r3, #0
 800b460:	f000 8101 	beq.w	800b666 <_dtoa_r+0xb6e>
 800b464:	2e00      	cmp	r6, #0
 800b466:	dd05      	ble.n	800b474 <_dtoa_r+0x97c>
 800b468:	4629      	mov	r1, r5
 800b46a:	4632      	mov	r2, r6
 800b46c:	4648      	mov	r0, r9
 800b46e:	f000 fc19 	bl	800bca4 <__lshift>
 800b472:	4605      	mov	r5, r0
 800b474:	9b08      	ldr	r3, [sp, #32]
 800b476:	2b00      	cmp	r3, #0
 800b478:	d05c      	beq.n	800b534 <_dtoa_r+0xa3c>
 800b47a:	6869      	ldr	r1, [r5, #4]
 800b47c:	4648      	mov	r0, r9
 800b47e:	f000 fa0b 	bl	800b898 <_Balloc>
 800b482:	4606      	mov	r6, r0
 800b484:	b928      	cbnz	r0, 800b492 <_dtoa_r+0x99a>
 800b486:	4b82      	ldr	r3, [pc, #520]	@ (800b690 <_dtoa_r+0xb98>)
 800b488:	4602      	mov	r2, r0
 800b48a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800b48e:	f7ff bb4a 	b.w	800ab26 <_dtoa_r+0x2e>
 800b492:	692a      	ldr	r2, [r5, #16]
 800b494:	3202      	adds	r2, #2
 800b496:	0092      	lsls	r2, r2, #2
 800b498:	f105 010c 	add.w	r1, r5, #12
 800b49c:	300c      	adds	r0, #12
 800b49e:	f000 ffa3 	bl	800c3e8 <memcpy>
 800b4a2:	2201      	movs	r2, #1
 800b4a4:	4631      	mov	r1, r6
 800b4a6:	4648      	mov	r0, r9
 800b4a8:	f000 fbfc 	bl	800bca4 <__lshift>
 800b4ac:	f10a 0301 	add.w	r3, sl, #1
 800b4b0:	9300      	str	r3, [sp, #0]
 800b4b2:	eb0a 030b 	add.w	r3, sl, fp
 800b4b6:	9308      	str	r3, [sp, #32]
 800b4b8:	9b04      	ldr	r3, [sp, #16]
 800b4ba:	f003 0301 	and.w	r3, r3, #1
 800b4be:	462f      	mov	r7, r5
 800b4c0:	9306      	str	r3, [sp, #24]
 800b4c2:	4605      	mov	r5, r0
 800b4c4:	9b00      	ldr	r3, [sp, #0]
 800b4c6:	9802      	ldr	r0, [sp, #8]
 800b4c8:	4621      	mov	r1, r4
 800b4ca:	f103 3bff 	add.w	fp, r3, #4294967295
 800b4ce:	f7ff fa88 	bl	800a9e2 <quorem>
 800b4d2:	4603      	mov	r3, r0
 800b4d4:	3330      	adds	r3, #48	@ 0x30
 800b4d6:	9003      	str	r0, [sp, #12]
 800b4d8:	4639      	mov	r1, r7
 800b4da:	9802      	ldr	r0, [sp, #8]
 800b4dc:	9309      	str	r3, [sp, #36]	@ 0x24
 800b4de:	f000 fc4d 	bl	800bd7c <__mcmp>
 800b4e2:	462a      	mov	r2, r5
 800b4e4:	9004      	str	r0, [sp, #16]
 800b4e6:	4621      	mov	r1, r4
 800b4e8:	4648      	mov	r0, r9
 800b4ea:	f000 fc63 	bl	800bdb4 <__mdiff>
 800b4ee:	68c2      	ldr	r2, [r0, #12]
 800b4f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b4f2:	4606      	mov	r6, r0
 800b4f4:	bb02      	cbnz	r2, 800b538 <_dtoa_r+0xa40>
 800b4f6:	4601      	mov	r1, r0
 800b4f8:	9802      	ldr	r0, [sp, #8]
 800b4fa:	f000 fc3f 	bl	800bd7c <__mcmp>
 800b4fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b500:	4602      	mov	r2, r0
 800b502:	4631      	mov	r1, r6
 800b504:	4648      	mov	r0, r9
 800b506:	920c      	str	r2, [sp, #48]	@ 0x30
 800b508:	9309      	str	r3, [sp, #36]	@ 0x24
 800b50a:	f000 fa05 	bl	800b918 <_Bfree>
 800b50e:	9b07      	ldr	r3, [sp, #28]
 800b510:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800b512:	9e00      	ldr	r6, [sp, #0]
 800b514:	ea42 0103 	orr.w	r1, r2, r3
 800b518:	9b06      	ldr	r3, [sp, #24]
 800b51a:	4319      	orrs	r1, r3
 800b51c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b51e:	d10d      	bne.n	800b53c <_dtoa_r+0xa44>
 800b520:	2b39      	cmp	r3, #57	@ 0x39
 800b522:	d027      	beq.n	800b574 <_dtoa_r+0xa7c>
 800b524:	9a04      	ldr	r2, [sp, #16]
 800b526:	2a00      	cmp	r2, #0
 800b528:	dd01      	ble.n	800b52e <_dtoa_r+0xa36>
 800b52a:	9b03      	ldr	r3, [sp, #12]
 800b52c:	3331      	adds	r3, #49	@ 0x31
 800b52e:	f88b 3000 	strb.w	r3, [fp]
 800b532:	e52e      	b.n	800af92 <_dtoa_r+0x49a>
 800b534:	4628      	mov	r0, r5
 800b536:	e7b9      	b.n	800b4ac <_dtoa_r+0x9b4>
 800b538:	2201      	movs	r2, #1
 800b53a:	e7e2      	b.n	800b502 <_dtoa_r+0xa0a>
 800b53c:	9904      	ldr	r1, [sp, #16]
 800b53e:	2900      	cmp	r1, #0
 800b540:	db04      	blt.n	800b54c <_dtoa_r+0xa54>
 800b542:	9807      	ldr	r0, [sp, #28]
 800b544:	4301      	orrs	r1, r0
 800b546:	9806      	ldr	r0, [sp, #24]
 800b548:	4301      	orrs	r1, r0
 800b54a:	d120      	bne.n	800b58e <_dtoa_r+0xa96>
 800b54c:	2a00      	cmp	r2, #0
 800b54e:	ddee      	ble.n	800b52e <_dtoa_r+0xa36>
 800b550:	9902      	ldr	r1, [sp, #8]
 800b552:	9300      	str	r3, [sp, #0]
 800b554:	2201      	movs	r2, #1
 800b556:	4648      	mov	r0, r9
 800b558:	f000 fba4 	bl	800bca4 <__lshift>
 800b55c:	4621      	mov	r1, r4
 800b55e:	9002      	str	r0, [sp, #8]
 800b560:	f000 fc0c 	bl	800bd7c <__mcmp>
 800b564:	2800      	cmp	r0, #0
 800b566:	9b00      	ldr	r3, [sp, #0]
 800b568:	dc02      	bgt.n	800b570 <_dtoa_r+0xa78>
 800b56a:	d1e0      	bne.n	800b52e <_dtoa_r+0xa36>
 800b56c:	07da      	lsls	r2, r3, #31
 800b56e:	d5de      	bpl.n	800b52e <_dtoa_r+0xa36>
 800b570:	2b39      	cmp	r3, #57	@ 0x39
 800b572:	d1da      	bne.n	800b52a <_dtoa_r+0xa32>
 800b574:	2339      	movs	r3, #57	@ 0x39
 800b576:	f88b 3000 	strb.w	r3, [fp]
 800b57a:	4633      	mov	r3, r6
 800b57c:	461e      	mov	r6, r3
 800b57e:	3b01      	subs	r3, #1
 800b580:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800b584:	2a39      	cmp	r2, #57	@ 0x39
 800b586:	d04e      	beq.n	800b626 <_dtoa_r+0xb2e>
 800b588:	3201      	adds	r2, #1
 800b58a:	701a      	strb	r2, [r3, #0]
 800b58c:	e501      	b.n	800af92 <_dtoa_r+0x49a>
 800b58e:	2a00      	cmp	r2, #0
 800b590:	dd03      	ble.n	800b59a <_dtoa_r+0xaa2>
 800b592:	2b39      	cmp	r3, #57	@ 0x39
 800b594:	d0ee      	beq.n	800b574 <_dtoa_r+0xa7c>
 800b596:	3301      	adds	r3, #1
 800b598:	e7c9      	b.n	800b52e <_dtoa_r+0xa36>
 800b59a:	9a00      	ldr	r2, [sp, #0]
 800b59c:	9908      	ldr	r1, [sp, #32]
 800b59e:	f802 3c01 	strb.w	r3, [r2, #-1]
 800b5a2:	428a      	cmp	r2, r1
 800b5a4:	d028      	beq.n	800b5f8 <_dtoa_r+0xb00>
 800b5a6:	9902      	ldr	r1, [sp, #8]
 800b5a8:	2300      	movs	r3, #0
 800b5aa:	220a      	movs	r2, #10
 800b5ac:	4648      	mov	r0, r9
 800b5ae:	f000 f9d5 	bl	800b95c <__multadd>
 800b5b2:	42af      	cmp	r7, r5
 800b5b4:	9002      	str	r0, [sp, #8]
 800b5b6:	f04f 0300 	mov.w	r3, #0
 800b5ba:	f04f 020a 	mov.w	r2, #10
 800b5be:	4639      	mov	r1, r7
 800b5c0:	4648      	mov	r0, r9
 800b5c2:	d107      	bne.n	800b5d4 <_dtoa_r+0xadc>
 800b5c4:	f000 f9ca 	bl	800b95c <__multadd>
 800b5c8:	4607      	mov	r7, r0
 800b5ca:	4605      	mov	r5, r0
 800b5cc:	9b00      	ldr	r3, [sp, #0]
 800b5ce:	3301      	adds	r3, #1
 800b5d0:	9300      	str	r3, [sp, #0]
 800b5d2:	e777      	b.n	800b4c4 <_dtoa_r+0x9cc>
 800b5d4:	f000 f9c2 	bl	800b95c <__multadd>
 800b5d8:	4629      	mov	r1, r5
 800b5da:	4607      	mov	r7, r0
 800b5dc:	2300      	movs	r3, #0
 800b5de:	220a      	movs	r2, #10
 800b5e0:	4648      	mov	r0, r9
 800b5e2:	f000 f9bb 	bl	800b95c <__multadd>
 800b5e6:	4605      	mov	r5, r0
 800b5e8:	e7f0      	b.n	800b5cc <_dtoa_r+0xad4>
 800b5ea:	f1bb 0f00 	cmp.w	fp, #0
 800b5ee:	bfcc      	ite	gt
 800b5f0:	465e      	movgt	r6, fp
 800b5f2:	2601      	movle	r6, #1
 800b5f4:	4456      	add	r6, sl
 800b5f6:	2700      	movs	r7, #0
 800b5f8:	9902      	ldr	r1, [sp, #8]
 800b5fa:	9300      	str	r3, [sp, #0]
 800b5fc:	2201      	movs	r2, #1
 800b5fe:	4648      	mov	r0, r9
 800b600:	f000 fb50 	bl	800bca4 <__lshift>
 800b604:	4621      	mov	r1, r4
 800b606:	9002      	str	r0, [sp, #8]
 800b608:	f000 fbb8 	bl	800bd7c <__mcmp>
 800b60c:	2800      	cmp	r0, #0
 800b60e:	dcb4      	bgt.n	800b57a <_dtoa_r+0xa82>
 800b610:	d102      	bne.n	800b618 <_dtoa_r+0xb20>
 800b612:	9b00      	ldr	r3, [sp, #0]
 800b614:	07db      	lsls	r3, r3, #31
 800b616:	d4b0      	bmi.n	800b57a <_dtoa_r+0xa82>
 800b618:	4633      	mov	r3, r6
 800b61a:	461e      	mov	r6, r3
 800b61c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b620:	2a30      	cmp	r2, #48	@ 0x30
 800b622:	d0fa      	beq.n	800b61a <_dtoa_r+0xb22>
 800b624:	e4b5      	b.n	800af92 <_dtoa_r+0x49a>
 800b626:	459a      	cmp	sl, r3
 800b628:	d1a8      	bne.n	800b57c <_dtoa_r+0xa84>
 800b62a:	2331      	movs	r3, #49	@ 0x31
 800b62c:	f108 0801 	add.w	r8, r8, #1
 800b630:	f88a 3000 	strb.w	r3, [sl]
 800b634:	e4ad      	b.n	800af92 <_dtoa_r+0x49a>
 800b636:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800b638:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800b694 <_dtoa_r+0xb9c>
 800b63c:	b11b      	cbz	r3, 800b646 <_dtoa_r+0xb4e>
 800b63e:	f10a 0308 	add.w	r3, sl, #8
 800b642:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800b644:	6013      	str	r3, [r2, #0]
 800b646:	4650      	mov	r0, sl
 800b648:	b017      	add	sp, #92	@ 0x5c
 800b64a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b64e:	9b07      	ldr	r3, [sp, #28]
 800b650:	2b01      	cmp	r3, #1
 800b652:	f77f ae2e 	ble.w	800b2b2 <_dtoa_r+0x7ba>
 800b656:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b658:	9308      	str	r3, [sp, #32]
 800b65a:	2001      	movs	r0, #1
 800b65c:	e64d      	b.n	800b2fa <_dtoa_r+0x802>
 800b65e:	f1bb 0f00 	cmp.w	fp, #0
 800b662:	f77f aed9 	ble.w	800b418 <_dtoa_r+0x920>
 800b666:	4656      	mov	r6, sl
 800b668:	9802      	ldr	r0, [sp, #8]
 800b66a:	4621      	mov	r1, r4
 800b66c:	f7ff f9b9 	bl	800a9e2 <quorem>
 800b670:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800b674:	f806 3b01 	strb.w	r3, [r6], #1
 800b678:	eba6 020a 	sub.w	r2, r6, sl
 800b67c:	4593      	cmp	fp, r2
 800b67e:	ddb4      	ble.n	800b5ea <_dtoa_r+0xaf2>
 800b680:	9902      	ldr	r1, [sp, #8]
 800b682:	2300      	movs	r3, #0
 800b684:	220a      	movs	r2, #10
 800b686:	4648      	mov	r0, r9
 800b688:	f000 f968 	bl	800b95c <__multadd>
 800b68c:	9002      	str	r0, [sp, #8]
 800b68e:	e7eb      	b.n	800b668 <_dtoa_r+0xb70>
 800b690:	0800d5fc 	.word	0x0800d5fc
 800b694:	0800d580 	.word	0x0800d580

0800b698 <_free_r>:
 800b698:	b538      	push	{r3, r4, r5, lr}
 800b69a:	4605      	mov	r5, r0
 800b69c:	2900      	cmp	r1, #0
 800b69e:	d041      	beq.n	800b724 <_free_r+0x8c>
 800b6a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b6a4:	1f0c      	subs	r4, r1, #4
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	bfb8      	it	lt
 800b6aa:	18e4      	addlt	r4, r4, r3
 800b6ac:	f000 f8e8 	bl	800b880 <__malloc_lock>
 800b6b0:	4a1d      	ldr	r2, [pc, #116]	@ (800b728 <_free_r+0x90>)
 800b6b2:	6813      	ldr	r3, [r2, #0]
 800b6b4:	b933      	cbnz	r3, 800b6c4 <_free_r+0x2c>
 800b6b6:	6063      	str	r3, [r4, #4]
 800b6b8:	6014      	str	r4, [r2, #0]
 800b6ba:	4628      	mov	r0, r5
 800b6bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b6c0:	f000 b8e4 	b.w	800b88c <__malloc_unlock>
 800b6c4:	42a3      	cmp	r3, r4
 800b6c6:	d908      	bls.n	800b6da <_free_r+0x42>
 800b6c8:	6820      	ldr	r0, [r4, #0]
 800b6ca:	1821      	adds	r1, r4, r0
 800b6cc:	428b      	cmp	r3, r1
 800b6ce:	bf01      	itttt	eq
 800b6d0:	6819      	ldreq	r1, [r3, #0]
 800b6d2:	685b      	ldreq	r3, [r3, #4]
 800b6d4:	1809      	addeq	r1, r1, r0
 800b6d6:	6021      	streq	r1, [r4, #0]
 800b6d8:	e7ed      	b.n	800b6b6 <_free_r+0x1e>
 800b6da:	461a      	mov	r2, r3
 800b6dc:	685b      	ldr	r3, [r3, #4]
 800b6de:	b10b      	cbz	r3, 800b6e4 <_free_r+0x4c>
 800b6e0:	42a3      	cmp	r3, r4
 800b6e2:	d9fa      	bls.n	800b6da <_free_r+0x42>
 800b6e4:	6811      	ldr	r1, [r2, #0]
 800b6e6:	1850      	adds	r0, r2, r1
 800b6e8:	42a0      	cmp	r0, r4
 800b6ea:	d10b      	bne.n	800b704 <_free_r+0x6c>
 800b6ec:	6820      	ldr	r0, [r4, #0]
 800b6ee:	4401      	add	r1, r0
 800b6f0:	1850      	adds	r0, r2, r1
 800b6f2:	4283      	cmp	r3, r0
 800b6f4:	6011      	str	r1, [r2, #0]
 800b6f6:	d1e0      	bne.n	800b6ba <_free_r+0x22>
 800b6f8:	6818      	ldr	r0, [r3, #0]
 800b6fa:	685b      	ldr	r3, [r3, #4]
 800b6fc:	6053      	str	r3, [r2, #4]
 800b6fe:	4408      	add	r0, r1
 800b700:	6010      	str	r0, [r2, #0]
 800b702:	e7da      	b.n	800b6ba <_free_r+0x22>
 800b704:	d902      	bls.n	800b70c <_free_r+0x74>
 800b706:	230c      	movs	r3, #12
 800b708:	602b      	str	r3, [r5, #0]
 800b70a:	e7d6      	b.n	800b6ba <_free_r+0x22>
 800b70c:	6820      	ldr	r0, [r4, #0]
 800b70e:	1821      	adds	r1, r4, r0
 800b710:	428b      	cmp	r3, r1
 800b712:	bf04      	itt	eq
 800b714:	6819      	ldreq	r1, [r3, #0]
 800b716:	685b      	ldreq	r3, [r3, #4]
 800b718:	6063      	str	r3, [r4, #4]
 800b71a:	bf04      	itt	eq
 800b71c:	1809      	addeq	r1, r1, r0
 800b71e:	6021      	streq	r1, [r4, #0]
 800b720:	6054      	str	r4, [r2, #4]
 800b722:	e7ca      	b.n	800b6ba <_free_r+0x22>
 800b724:	bd38      	pop	{r3, r4, r5, pc}
 800b726:	bf00      	nop
 800b728:	20000ffc 	.word	0x20000ffc

0800b72c <malloc>:
 800b72c:	4b02      	ldr	r3, [pc, #8]	@ (800b738 <malloc+0xc>)
 800b72e:	4601      	mov	r1, r0
 800b730:	6818      	ldr	r0, [r3, #0]
 800b732:	f000 b825 	b.w	800b780 <_malloc_r>
 800b736:	bf00      	nop
 800b738:	2000012c 	.word	0x2000012c

0800b73c <sbrk_aligned>:
 800b73c:	b570      	push	{r4, r5, r6, lr}
 800b73e:	4e0f      	ldr	r6, [pc, #60]	@ (800b77c <sbrk_aligned+0x40>)
 800b740:	460c      	mov	r4, r1
 800b742:	6831      	ldr	r1, [r6, #0]
 800b744:	4605      	mov	r5, r0
 800b746:	b911      	cbnz	r1, 800b74e <sbrk_aligned+0x12>
 800b748:	f000 fe3e 	bl	800c3c8 <_sbrk_r>
 800b74c:	6030      	str	r0, [r6, #0]
 800b74e:	4621      	mov	r1, r4
 800b750:	4628      	mov	r0, r5
 800b752:	f000 fe39 	bl	800c3c8 <_sbrk_r>
 800b756:	1c43      	adds	r3, r0, #1
 800b758:	d103      	bne.n	800b762 <sbrk_aligned+0x26>
 800b75a:	f04f 34ff 	mov.w	r4, #4294967295
 800b75e:	4620      	mov	r0, r4
 800b760:	bd70      	pop	{r4, r5, r6, pc}
 800b762:	1cc4      	adds	r4, r0, #3
 800b764:	f024 0403 	bic.w	r4, r4, #3
 800b768:	42a0      	cmp	r0, r4
 800b76a:	d0f8      	beq.n	800b75e <sbrk_aligned+0x22>
 800b76c:	1a21      	subs	r1, r4, r0
 800b76e:	4628      	mov	r0, r5
 800b770:	f000 fe2a 	bl	800c3c8 <_sbrk_r>
 800b774:	3001      	adds	r0, #1
 800b776:	d1f2      	bne.n	800b75e <sbrk_aligned+0x22>
 800b778:	e7ef      	b.n	800b75a <sbrk_aligned+0x1e>
 800b77a:	bf00      	nop
 800b77c:	20000ff8 	.word	0x20000ff8

0800b780 <_malloc_r>:
 800b780:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b784:	1ccd      	adds	r5, r1, #3
 800b786:	f025 0503 	bic.w	r5, r5, #3
 800b78a:	3508      	adds	r5, #8
 800b78c:	2d0c      	cmp	r5, #12
 800b78e:	bf38      	it	cc
 800b790:	250c      	movcc	r5, #12
 800b792:	2d00      	cmp	r5, #0
 800b794:	4606      	mov	r6, r0
 800b796:	db01      	blt.n	800b79c <_malloc_r+0x1c>
 800b798:	42a9      	cmp	r1, r5
 800b79a:	d904      	bls.n	800b7a6 <_malloc_r+0x26>
 800b79c:	230c      	movs	r3, #12
 800b79e:	6033      	str	r3, [r6, #0]
 800b7a0:	2000      	movs	r0, #0
 800b7a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b7a6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b87c <_malloc_r+0xfc>
 800b7aa:	f000 f869 	bl	800b880 <__malloc_lock>
 800b7ae:	f8d8 3000 	ldr.w	r3, [r8]
 800b7b2:	461c      	mov	r4, r3
 800b7b4:	bb44      	cbnz	r4, 800b808 <_malloc_r+0x88>
 800b7b6:	4629      	mov	r1, r5
 800b7b8:	4630      	mov	r0, r6
 800b7ba:	f7ff ffbf 	bl	800b73c <sbrk_aligned>
 800b7be:	1c43      	adds	r3, r0, #1
 800b7c0:	4604      	mov	r4, r0
 800b7c2:	d158      	bne.n	800b876 <_malloc_r+0xf6>
 800b7c4:	f8d8 4000 	ldr.w	r4, [r8]
 800b7c8:	4627      	mov	r7, r4
 800b7ca:	2f00      	cmp	r7, #0
 800b7cc:	d143      	bne.n	800b856 <_malloc_r+0xd6>
 800b7ce:	2c00      	cmp	r4, #0
 800b7d0:	d04b      	beq.n	800b86a <_malloc_r+0xea>
 800b7d2:	6823      	ldr	r3, [r4, #0]
 800b7d4:	4639      	mov	r1, r7
 800b7d6:	4630      	mov	r0, r6
 800b7d8:	eb04 0903 	add.w	r9, r4, r3
 800b7dc:	f000 fdf4 	bl	800c3c8 <_sbrk_r>
 800b7e0:	4581      	cmp	r9, r0
 800b7e2:	d142      	bne.n	800b86a <_malloc_r+0xea>
 800b7e4:	6821      	ldr	r1, [r4, #0]
 800b7e6:	1a6d      	subs	r5, r5, r1
 800b7e8:	4629      	mov	r1, r5
 800b7ea:	4630      	mov	r0, r6
 800b7ec:	f7ff ffa6 	bl	800b73c <sbrk_aligned>
 800b7f0:	3001      	adds	r0, #1
 800b7f2:	d03a      	beq.n	800b86a <_malloc_r+0xea>
 800b7f4:	6823      	ldr	r3, [r4, #0]
 800b7f6:	442b      	add	r3, r5
 800b7f8:	6023      	str	r3, [r4, #0]
 800b7fa:	f8d8 3000 	ldr.w	r3, [r8]
 800b7fe:	685a      	ldr	r2, [r3, #4]
 800b800:	bb62      	cbnz	r2, 800b85c <_malloc_r+0xdc>
 800b802:	f8c8 7000 	str.w	r7, [r8]
 800b806:	e00f      	b.n	800b828 <_malloc_r+0xa8>
 800b808:	6822      	ldr	r2, [r4, #0]
 800b80a:	1b52      	subs	r2, r2, r5
 800b80c:	d420      	bmi.n	800b850 <_malloc_r+0xd0>
 800b80e:	2a0b      	cmp	r2, #11
 800b810:	d917      	bls.n	800b842 <_malloc_r+0xc2>
 800b812:	1961      	adds	r1, r4, r5
 800b814:	42a3      	cmp	r3, r4
 800b816:	6025      	str	r5, [r4, #0]
 800b818:	bf18      	it	ne
 800b81a:	6059      	strne	r1, [r3, #4]
 800b81c:	6863      	ldr	r3, [r4, #4]
 800b81e:	bf08      	it	eq
 800b820:	f8c8 1000 	streq.w	r1, [r8]
 800b824:	5162      	str	r2, [r4, r5]
 800b826:	604b      	str	r3, [r1, #4]
 800b828:	4630      	mov	r0, r6
 800b82a:	f000 f82f 	bl	800b88c <__malloc_unlock>
 800b82e:	f104 000b 	add.w	r0, r4, #11
 800b832:	1d23      	adds	r3, r4, #4
 800b834:	f020 0007 	bic.w	r0, r0, #7
 800b838:	1ac2      	subs	r2, r0, r3
 800b83a:	bf1c      	itt	ne
 800b83c:	1a1b      	subne	r3, r3, r0
 800b83e:	50a3      	strne	r3, [r4, r2]
 800b840:	e7af      	b.n	800b7a2 <_malloc_r+0x22>
 800b842:	6862      	ldr	r2, [r4, #4]
 800b844:	42a3      	cmp	r3, r4
 800b846:	bf0c      	ite	eq
 800b848:	f8c8 2000 	streq.w	r2, [r8]
 800b84c:	605a      	strne	r2, [r3, #4]
 800b84e:	e7eb      	b.n	800b828 <_malloc_r+0xa8>
 800b850:	4623      	mov	r3, r4
 800b852:	6864      	ldr	r4, [r4, #4]
 800b854:	e7ae      	b.n	800b7b4 <_malloc_r+0x34>
 800b856:	463c      	mov	r4, r7
 800b858:	687f      	ldr	r7, [r7, #4]
 800b85a:	e7b6      	b.n	800b7ca <_malloc_r+0x4a>
 800b85c:	461a      	mov	r2, r3
 800b85e:	685b      	ldr	r3, [r3, #4]
 800b860:	42a3      	cmp	r3, r4
 800b862:	d1fb      	bne.n	800b85c <_malloc_r+0xdc>
 800b864:	2300      	movs	r3, #0
 800b866:	6053      	str	r3, [r2, #4]
 800b868:	e7de      	b.n	800b828 <_malloc_r+0xa8>
 800b86a:	230c      	movs	r3, #12
 800b86c:	6033      	str	r3, [r6, #0]
 800b86e:	4630      	mov	r0, r6
 800b870:	f000 f80c 	bl	800b88c <__malloc_unlock>
 800b874:	e794      	b.n	800b7a0 <_malloc_r+0x20>
 800b876:	6005      	str	r5, [r0, #0]
 800b878:	e7d6      	b.n	800b828 <_malloc_r+0xa8>
 800b87a:	bf00      	nop
 800b87c:	20000ffc 	.word	0x20000ffc

0800b880 <__malloc_lock>:
 800b880:	4801      	ldr	r0, [pc, #4]	@ (800b888 <__malloc_lock+0x8>)
 800b882:	f7ff b8ac 	b.w	800a9de <__retarget_lock_acquire_recursive>
 800b886:	bf00      	nop
 800b888:	20000ff4 	.word	0x20000ff4

0800b88c <__malloc_unlock>:
 800b88c:	4801      	ldr	r0, [pc, #4]	@ (800b894 <__malloc_unlock+0x8>)
 800b88e:	f7ff b8a7 	b.w	800a9e0 <__retarget_lock_release_recursive>
 800b892:	bf00      	nop
 800b894:	20000ff4 	.word	0x20000ff4

0800b898 <_Balloc>:
 800b898:	b570      	push	{r4, r5, r6, lr}
 800b89a:	69c6      	ldr	r6, [r0, #28]
 800b89c:	4604      	mov	r4, r0
 800b89e:	460d      	mov	r5, r1
 800b8a0:	b976      	cbnz	r6, 800b8c0 <_Balloc+0x28>
 800b8a2:	2010      	movs	r0, #16
 800b8a4:	f7ff ff42 	bl	800b72c <malloc>
 800b8a8:	4602      	mov	r2, r0
 800b8aa:	61e0      	str	r0, [r4, #28]
 800b8ac:	b920      	cbnz	r0, 800b8b8 <_Balloc+0x20>
 800b8ae:	4b18      	ldr	r3, [pc, #96]	@ (800b910 <_Balloc+0x78>)
 800b8b0:	4818      	ldr	r0, [pc, #96]	@ (800b914 <_Balloc+0x7c>)
 800b8b2:	216b      	movs	r1, #107	@ 0x6b
 800b8b4:	f000 fda6 	bl	800c404 <__assert_func>
 800b8b8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b8bc:	6006      	str	r6, [r0, #0]
 800b8be:	60c6      	str	r6, [r0, #12]
 800b8c0:	69e6      	ldr	r6, [r4, #28]
 800b8c2:	68f3      	ldr	r3, [r6, #12]
 800b8c4:	b183      	cbz	r3, 800b8e8 <_Balloc+0x50>
 800b8c6:	69e3      	ldr	r3, [r4, #28]
 800b8c8:	68db      	ldr	r3, [r3, #12]
 800b8ca:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b8ce:	b9b8      	cbnz	r0, 800b900 <_Balloc+0x68>
 800b8d0:	2101      	movs	r1, #1
 800b8d2:	fa01 f605 	lsl.w	r6, r1, r5
 800b8d6:	1d72      	adds	r2, r6, #5
 800b8d8:	0092      	lsls	r2, r2, #2
 800b8da:	4620      	mov	r0, r4
 800b8dc:	f000 fdb0 	bl	800c440 <_calloc_r>
 800b8e0:	b160      	cbz	r0, 800b8fc <_Balloc+0x64>
 800b8e2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b8e6:	e00e      	b.n	800b906 <_Balloc+0x6e>
 800b8e8:	2221      	movs	r2, #33	@ 0x21
 800b8ea:	2104      	movs	r1, #4
 800b8ec:	4620      	mov	r0, r4
 800b8ee:	f000 fda7 	bl	800c440 <_calloc_r>
 800b8f2:	69e3      	ldr	r3, [r4, #28]
 800b8f4:	60f0      	str	r0, [r6, #12]
 800b8f6:	68db      	ldr	r3, [r3, #12]
 800b8f8:	2b00      	cmp	r3, #0
 800b8fa:	d1e4      	bne.n	800b8c6 <_Balloc+0x2e>
 800b8fc:	2000      	movs	r0, #0
 800b8fe:	bd70      	pop	{r4, r5, r6, pc}
 800b900:	6802      	ldr	r2, [r0, #0]
 800b902:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b906:	2300      	movs	r3, #0
 800b908:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b90c:	e7f7      	b.n	800b8fe <_Balloc+0x66>
 800b90e:	bf00      	nop
 800b910:	0800d58d 	.word	0x0800d58d
 800b914:	0800d60d 	.word	0x0800d60d

0800b918 <_Bfree>:
 800b918:	b570      	push	{r4, r5, r6, lr}
 800b91a:	69c6      	ldr	r6, [r0, #28]
 800b91c:	4605      	mov	r5, r0
 800b91e:	460c      	mov	r4, r1
 800b920:	b976      	cbnz	r6, 800b940 <_Bfree+0x28>
 800b922:	2010      	movs	r0, #16
 800b924:	f7ff ff02 	bl	800b72c <malloc>
 800b928:	4602      	mov	r2, r0
 800b92a:	61e8      	str	r0, [r5, #28]
 800b92c:	b920      	cbnz	r0, 800b938 <_Bfree+0x20>
 800b92e:	4b09      	ldr	r3, [pc, #36]	@ (800b954 <_Bfree+0x3c>)
 800b930:	4809      	ldr	r0, [pc, #36]	@ (800b958 <_Bfree+0x40>)
 800b932:	218f      	movs	r1, #143	@ 0x8f
 800b934:	f000 fd66 	bl	800c404 <__assert_func>
 800b938:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b93c:	6006      	str	r6, [r0, #0]
 800b93e:	60c6      	str	r6, [r0, #12]
 800b940:	b13c      	cbz	r4, 800b952 <_Bfree+0x3a>
 800b942:	69eb      	ldr	r3, [r5, #28]
 800b944:	6862      	ldr	r2, [r4, #4]
 800b946:	68db      	ldr	r3, [r3, #12]
 800b948:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b94c:	6021      	str	r1, [r4, #0]
 800b94e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b952:	bd70      	pop	{r4, r5, r6, pc}
 800b954:	0800d58d 	.word	0x0800d58d
 800b958:	0800d60d 	.word	0x0800d60d

0800b95c <__multadd>:
 800b95c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b960:	690d      	ldr	r5, [r1, #16]
 800b962:	4607      	mov	r7, r0
 800b964:	460c      	mov	r4, r1
 800b966:	461e      	mov	r6, r3
 800b968:	f101 0c14 	add.w	ip, r1, #20
 800b96c:	2000      	movs	r0, #0
 800b96e:	f8dc 3000 	ldr.w	r3, [ip]
 800b972:	b299      	uxth	r1, r3
 800b974:	fb02 6101 	mla	r1, r2, r1, r6
 800b978:	0c1e      	lsrs	r6, r3, #16
 800b97a:	0c0b      	lsrs	r3, r1, #16
 800b97c:	fb02 3306 	mla	r3, r2, r6, r3
 800b980:	b289      	uxth	r1, r1
 800b982:	3001      	adds	r0, #1
 800b984:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b988:	4285      	cmp	r5, r0
 800b98a:	f84c 1b04 	str.w	r1, [ip], #4
 800b98e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b992:	dcec      	bgt.n	800b96e <__multadd+0x12>
 800b994:	b30e      	cbz	r6, 800b9da <__multadd+0x7e>
 800b996:	68a3      	ldr	r3, [r4, #8]
 800b998:	42ab      	cmp	r3, r5
 800b99a:	dc19      	bgt.n	800b9d0 <__multadd+0x74>
 800b99c:	6861      	ldr	r1, [r4, #4]
 800b99e:	4638      	mov	r0, r7
 800b9a0:	3101      	adds	r1, #1
 800b9a2:	f7ff ff79 	bl	800b898 <_Balloc>
 800b9a6:	4680      	mov	r8, r0
 800b9a8:	b928      	cbnz	r0, 800b9b6 <__multadd+0x5a>
 800b9aa:	4602      	mov	r2, r0
 800b9ac:	4b0c      	ldr	r3, [pc, #48]	@ (800b9e0 <__multadd+0x84>)
 800b9ae:	480d      	ldr	r0, [pc, #52]	@ (800b9e4 <__multadd+0x88>)
 800b9b0:	21ba      	movs	r1, #186	@ 0xba
 800b9b2:	f000 fd27 	bl	800c404 <__assert_func>
 800b9b6:	6922      	ldr	r2, [r4, #16]
 800b9b8:	3202      	adds	r2, #2
 800b9ba:	f104 010c 	add.w	r1, r4, #12
 800b9be:	0092      	lsls	r2, r2, #2
 800b9c0:	300c      	adds	r0, #12
 800b9c2:	f000 fd11 	bl	800c3e8 <memcpy>
 800b9c6:	4621      	mov	r1, r4
 800b9c8:	4638      	mov	r0, r7
 800b9ca:	f7ff ffa5 	bl	800b918 <_Bfree>
 800b9ce:	4644      	mov	r4, r8
 800b9d0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b9d4:	3501      	adds	r5, #1
 800b9d6:	615e      	str	r6, [r3, #20]
 800b9d8:	6125      	str	r5, [r4, #16]
 800b9da:	4620      	mov	r0, r4
 800b9dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b9e0:	0800d5fc 	.word	0x0800d5fc
 800b9e4:	0800d60d 	.word	0x0800d60d

0800b9e8 <__hi0bits>:
 800b9e8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800b9ec:	4603      	mov	r3, r0
 800b9ee:	bf36      	itet	cc
 800b9f0:	0403      	lslcc	r3, r0, #16
 800b9f2:	2000      	movcs	r0, #0
 800b9f4:	2010      	movcc	r0, #16
 800b9f6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b9fa:	bf3c      	itt	cc
 800b9fc:	021b      	lslcc	r3, r3, #8
 800b9fe:	3008      	addcc	r0, #8
 800ba00:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ba04:	bf3c      	itt	cc
 800ba06:	011b      	lslcc	r3, r3, #4
 800ba08:	3004      	addcc	r0, #4
 800ba0a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ba0e:	bf3c      	itt	cc
 800ba10:	009b      	lslcc	r3, r3, #2
 800ba12:	3002      	addcc	r0, #2
 800ba14:	2b00      	cmp	r3, #0
 800ba16:	db05      	blt.n	800ba24 <__hi0bits+0x3c>
 800ba18:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800ba1c:	f100 0001 	add.w	r0, r0, #1
 800ba20:	bf08      	it	eq
 800ba22:	2020      	moveq	r0, #32
 800ba24:	4770      	bx	lr

0800ba26 <__lo0bits>:
 800ba26:	6803      	ldr	r3, [r0, #0]
 800ba28:	4602      	mov	r2, r0
 800ba2a:	f013 0007 	ands.w	r0, r3, #7
 800ba2e:	d00b      	beq.n	800ba48 <__lo0bits+0x22>
 800ba30:	07d9      	lsls	r1, r3, #31
 800ba32:	d421      	bmi.n	800ba78 <__lo0bits+0x52>
 800ba34:	0798      	lsls	r0, r3, #30
 800ba36:	bf49      	itett	mi
 800ba38:	085b      	lsrmi	r3, r3, #1
 800ba3a:	089b      	lsrpl	r3, r3, #2
 800ba3c:	2001      	movmi	r0, #1
 800ba3e:	6013      	strmi	r3, [r2, #0]
 800ba40:	bf5c      	itt	pl
 800ba42:	6013      	strpl	r3, [r2, #0]
 800ba44:	2002      	movpl	r0, #2
 800ba46:	4770      	bx	lr
 800ba48:	b299      	uxth	r1, r3
 800ba4a:	b909      	cbnz	r1, 800ba50 <__lo0bits+0x2a>
 800ba4c:	0c1b      	lsrs	r3, r3, #16
 800ba4e:	2010      	movs	r0, #16
 800ba50:	b2d9      	uxtb	r1, r3
 800ba52:	b909      	cbnz	r1, 800ba58 <__lo0bits+0x32>
 800ba54:	3008      	adds	r0, #8
 800ba56:	0a1b      	lsrs	r3, r3, #8
 800ba58:	0719      	lsls	r1, r3, #28
 800ba5a:	bf04      	itt	eq
 800ba5c:	091b      	lsreq	r3, r3, #4
 800ba5e:	3004      	addeq	r0, #4
 800ba60:	0799      	lsls	r1, r3, #30
 800ba62:	bf04      	itt	eq
 800ba64:	089b      	lsreq	r3, r3, #2
 800ba66:	3002      	addeq	r0, #2
 800ba68:	07d9      	lsls	r1, r3, #31
 800ba6a:	d403      	bmi.n	800ba74 <__lo0bits+0x4e>
 800ba6c:	085b      	lsrs	r3, r3, #1
 800ba6e:	f100 0001 	add.w	r0, r0, #1
 800ba72:	d003      	beq.n	800ba7c <__lo0bits+0x56>
 800ba74:	6013      	str	r3, [r2, #0]
 800ba76:	4770      	bx	lr
 800ba78:	2000      	movs	r0, #0
 800ba7a:	4770      	bx	lr
 800ba7c:	2020      	movs	r0, #32
 800ba7e:	4770      	bx	lr

0800ba80 <__i2b>:
 800ba80:	b510      	push	{r4, lr}
 800ba82:	460c      	mov	r4, r1
 800ba84:	2101      	movs	r1, #1
 800ba86:	f7ff ff07 	bl	800b898 <_Balloc>
 800ba8a:	4602      	mov	r2, r0
 800ba8c:	b928      	cbnz	r0, 800ba9a <__i2b+0x1a>
 800ba8e:	4b05      	ldr	r3, [pc, #20]	@ (800baa4 <__i2b+0x24>)
 800ba90:	4805      	ldr	r0, [pc, #20]	@ (800baa8 <__i2b+0x28>)
 800ba92:	f240 1145 	movw	r1, #325	@ 0x145
 800ba96:	f000 fcb5 	bl	800c404 <__assert_func>
 800ba9a:	2301      	movs	r3, #1
 800ba9c:	6144      	str	r4, [r0, #20]
 800ba9e:	6103      	str	r3, [r0, #16]
 800baa0:	bd10      	pop	{r4, pc}
 800baa2:	bf00      	nop
 800baa4:	0800d5fc 	.word	0x0800d5fc
 800baa8:	0800d60d 	.word	0x0800d60d

0800baac <__multiply>:
 800baac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bab0:	4617      	mov	r7, r2
 800bab2:	690a      	ldr	r2, [r1, #16]
 800bab4:	693b      	ldr	r3, [r7, #16]
 800bab6:	429a      	cmp	r2, r3
 800bab8:	bfa8      	it	ge
 800baba:	463b      	movge	r3, r7
 800babc:	4689      	mov	r9, r1
 800babe:	bfa4      	itt	ge
 800bac0:	460f      	movge	r7, r1
 800bac2:	4699      	movge	r9, r3
 800bac4:	693d      	ldr	r5, [r7, #16]
 800bac6:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800baca:	68bb      	ldr	r3, [r7, #8]
 800bacc:	6879      	ldr	r1, [r7, #4]
 800bace:	eb05 060a 	add.w	r6, r5, sl
 800bad2:	42b3      	cmp	r3, r6
 800bad4:	b085      	sub	sp, #20
 800bad6:	bfb8      	it	lt
 800bad8:	3101      	addlt	r1, #1
 800bada:	f7ff fedd 	bl	800b898 <_Balloc>
 800bade:	b930      	cbnz	r0, 800baee <__multiply+0x42>
 800bae0:	4602      	mov	r2, r0
 800bae2:	4b41      	ldr	r3, [pc, #260]	@ (800bbe8 <__multiply+0x13c>)
 800bae4:	4841      	ldr	r0, [pc, #260]	@ (800bbec <__multiply+0x140>)
 800bae6:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800baea:	f000 fc8b 	bl	800c404 <__assert_func>
 800baee:	f100 0414 	add.w	r4, r0, #20
 800baf2:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800baf6:	4623      	mov	r3, r4
 800baf8:	2200      	movs	r2, #0
 800bafa:	4573      	cmp	r3, lr
 800bafc:	d320      	bcc.n	800bb40 <__multiply+0x94>
 800bafe:	f107 0814 	add.w	r8, r7, #20
 800bb02:	f109 0114 	add.w	r1, r9, #20
 800bb06:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800bb0a:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800bb0e:	9302      	str	r3, [sp, #8]
 800bb10:	1beb      	subs	r3, r5, r7
 800bb12:	3b15      	subs	r3, #21
 800bb14:	f023 0303 	bic.w	r3, r3, #3
 800bb18:	3304      	adds	r3, #4
 800bb1a:	3715      	adds	r7, #21
 800bb1c:	42bd      	cmp	r5, r7
 800bb1e:	bf38      	it	cc
 800bb20:	2304      	movcc	r3, #4
 800bb22:	9301      	str	r3, [sp, #4]
 800bb24:	9b02      	ldr	r3, [sp, #8]
 800bb26:	9103      	str	r1, [sp, #12]
 800bb28:	428b      	cmp	r3, r1
 800bb2a:	d80c      	bhi.n	800bb46 <__multiply+0x9a>
 800bb2c:	2e00      	cmp	r6, #0
 800bb2e:	dd03      	ble.n	800bb38 <__multiply+0x8c>
 800bb30:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800bb34:	2b00      	cmp	r3, #0
 800bb36:	d055      	beq.n	800bbe4 <__multiply+0x138>
 800bb38:	6106      	str	r6, [r0, #16]
 800bb3a:	b005      	add	sp, #20
 800bb3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb40:	f843 2b04 	str.w	r2, [r3], #4
 800bb44:	e7d9      	b.n	800bafa <__multiply+0x4e>
 800bb46:	f8b1 a000 	ldrh.w	sl, [r1]
 800bb4a:	f1ba 0f00 	cmp.w	sl, #0
 800bb4e:	d01f      	beq.n	800bb90 <__multiply+0xe4>
 800bb50:	46c4      	mov	ip, r8
 800bb52:	46a1      	mov	r9, r4
 800bb54:	2700      	movs	r7, #0
 800bb56:	f85c 2b04 	ldr.w	r2, [ip], #4
 800bb5a:	f8d9 3000 	ldr.w	r3, [r9]
 800bb5e:	fa1f fb82 	uxth.w	fp, r2
 800bb62:	b29b      	uxth	r3, r3
 800bb64:	fb0a 330b 	mla	r3, sl, fp, r3
 800bb68:	443b      	add	r3, r7
 800bb6a:	f8d9 7000 	ldr.w	r7, [r9]
 800bb6e:	0c12      	lsrs	r2, r2, #16
 800bb70:	0c3f      	lsrs	r7, r7, #16
 800bb72:	fb0a 7202 	mla	r2, sl, r2, r7
 800bb76:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800bb7a:	b29b      	uxth	r3, r3
 800bb7c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bb80:	4565      	cmp	r5, ip
 800bb82:	f849 3b04 	str.w	r3, [r9], #4
 800bb86:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800bb8a:	d8e4      	bhi.n	800bb56 <__multiply+0xaa>
 800bb8c:	9b01      	ldr	r3, [sp, #4]
 800bb8e:	50e7      	str	r7, [r4, r3]
 800bb90:	9b03      	ldr	r3, [sp, #12]
 800bb92:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800bb96:	3104      	adds	r1, #4
 800bb98:	f1b9 0f00 	cmp.w	r9, #0
 800bb9c:	d020      	beq.n	800bbe0 <__multiply+0x134>
 800bb9e:	6823      	ldr	r3, [r4, #0]
 800bba0:	4647      	mov	r7, r8
 800bba2:	46a4      	mov	ip, r4
 800bba4:	f04f 0a00 	mov.w	sl, #0
 800bba8:	f8b7 b000 	ldrh.w	fp, [r7]
 800bbac:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800bbb0:	fb09 220b 	mla	r2, r9, fp, r2
 800bbb4:	4452      	add	r2, sl
 800bbb6:	b29b      	uxth	r3, r3
 800bbb8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bbbc:	f84c 3b04 	str.w	r3, [ip], #4
 800bbc0:	f857 3b04 	ldr.w	r3, [r7], #4
 800bbc4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800bbc8:	f8bc 3000 	ldrh.w	r3, [ip]
 800bbcc:	fb09 330a 	mla	r3, r9, sl, r3
 800bbd0:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800bbd4:	42bd      	cmp	r5, r7
 800bbd6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800bbda:	d8e5      	bhi.n	800bba8 <__multiply+0xfc>
 800bbdc:	9a01      	ldr	r2, [sp, #4]
 800bbde:	50a3      	str	r3, [r4, r2]
 800bbe0:	3404      	adds	r4, #4
 800bbe2:	e79f      	b.n	800bb24 <__multiply+0x78>
 800bbe4:	3e01      	subs	r6, #1
 800bbe6:	e7a1      	b.n	800bb2c <__multiply+0x80>
 800bbe8:	0800d5fc 	.word	0x0800d5fc
 800bbec:	0800d60d 	.word	0x0800d60d

0800bbf0 <__pow5mult>:
 800bbf0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bbf4:	4615      	mov	r5, r2
 800bbf6:	f012 0203 	ands.w	r2, r2, #3
 800bbfa:	4607      	mov	r7, r0
 800bbfc:	460e      	mov	r6, r1
 800bbfe:	d007      	beq.n	800bc10 <__pow5mult+0x20>
 800bc00:	4c25      	ldr	r4, [pc, #148]	@ (800bc98 <__pow5mult+0xa8>)
 800bc02:	3a01      	subs	r2, #1
 800bc04:	2300      	movs	r3, #0
 800bc06:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800bc0a:	f7ff fea7 	bl	800b95c <__multadd>
 800bc0e:	4606      	mov	r6, r0
 800bc10:	10ad      	asrs	r5, r5, #2
 800bc12:	d03d      	beq.n	800bc90 <__pow5mult+0xa0>
 800bc14:	69fc      	ldr	r4, [r7, #28]
 800bc16:	b97c      	cbnz	r4, 800bc38 <__pow5mult+0x48>
 800bc18:	2010      	movs	r0, #16
 800bc1a:	f7ff fd87 	bl	800b72c <malloc>
 800bc1e:	4602      	mov	r2, r0
 800bc20:	61f8      	str	r0, [r7, #28]
 800bc22:	b928      	cbnz	r0, 800bc30 <__pow5mult+0x40>
 800bc24:	4b1d      	ldr	r3, [pc, #116]	@ (800bc9c <__pow5mult+0xac>)
 800bc26:	481e      	ldr	r0, [pc, #120]	@ (800bca0 <__pow5mult+0xb0>)
 800bc28:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800bc2c:	f000 fbea 	bl	800c404 <__assert_func>
 800bc30:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800bc34:	6004      	str	r4, [r0, #0]
 800bc36:	60c4      	str	r4, [r0, #12]
 800bc38:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800bc3c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800bc40:	b94c      	cbnz	r4, 800bc56 <__pow5mult+0x66>
 800bc42:	f240 2171 	movw	r1, #625	@ 0x271
 800bc46:	4638      	mov	r0, r7
 800bc48:	f7ff ff1a 	bl	800ba80 <__i2b>
 800bc4c:	2300      	movs	r3, #0
 800bc4e:	f8c8 0008 	str.w	r0, [r8, #8]
 800bc52:	4604      	mov	r4, r0
 800bc54:	6003      	str	r3, [r0, #0]
 800bc56:	f04f 0900 	mov.w	r9, #0
 800bc5a:	07eb      	lsls	r3, r5, #31
 800bc5c:	d50a      	bpl.n	800bc74 <__pow5mult+0x84>
 800bc5e:	4631      	mov	r1, r6
 800bc60:	4622      	mov	r2, r4
 800bc62:	4638      	mov	r0, r7
 800bc64:	f7ff ff22 	bl	800baac <__multiply>
 800bc68:	4631      	mov	r1, r6
 800bc6a:	4680      	mov	r8, r0
 800bc6c:	4638      	mov	r0, r7
 800bc6e:	f7ff fe53 	bl	800b918 <_Bfree>
 800bc72:	4646      	mov	r6, r8
 800bc74:	106d      	asrs	r5, r5, #1
 800bc76:	d00b      	beq.n	800bc90 <__pow5mult+0xa0>
 800bc78:	6820      	ldr	r0, [r4, #0]
 800bc7a:	b938      	cbnz	r0, 800bc8c <__pow5mult+0x9c>
 800bc7c:	4622      	mov	r2, r4
 800bc7e:	4621      	mov	r1, r4
 800bc80:	4638      	mov	r0, r7
 800bc82:	f7ff ff13 	bl	800baac <__multiply>
 800bc86:	6020      	str	r0, [r4, #0]
 800bc88:	f8c0 9000 	str.w	r9, [r0]
 800bc8c:	4604      	mov	r4, r0
 800bc8e:	e7e4      	b.n	800bc5a <__pow5mult+0x6a>
 800bc90:	4630      	mov	r0, r6
 800bc92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bc96:	bf00      	nop
 800bc98:	0800d6c0 	.word	0x0800d6c0
 800bc9c:	0800d58d 	.word	0x0800d58d
 800bca0:	0800d60d 	.word	0x0800d60d

0800bca4 <__lshift>:
 800bca4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bca8:	460c      	mov	r4, r1
 800bcaa:	6849      	ldr	r1, [r1, #4]
 800bcac:	6923      	ldr	r3, [r4, #16]
 800bcae:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800bcb2:	68a3      	ldr	r3, [r4, #8]
 800bcb4:	4607      	mov	r7, r0
 800bcb6:	4691      	mov	r9, r2
 800bcb8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800bcbc:	f108 0601 	add.w	r6, r8, #1
 800bcc0:	42b3      	cmp	r3, r6
 800bcc2:	db0b      	blt.n	800bcdc <__lshift+0x38>
 800bcc4:	4638      	mov	r0, r7
 800bcc6:	f7ff fde7 	bl	800b898 <_Balloc>
 800bcca:	4605      	mov	r5, r0
 800bccc:	b948      	cbnz	r0, 800bce2 <__lshift+0x3e>
 800bcce:	4602      	mov	r2, r0
 800bcd0:	4b28      	ldr	r3, [pc, #160]	@ (800bd74 <__lshift+0xd0>)
 800bcd2:	4829      	ldr	r0, [pc, #164]	@ (800bd78 <__lshift+0xd4>)
 800bcd4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800bcd8:	f000 fb94 	bl	800c404 <__assert_func>
 800bcdc:	3101      	adds	r1, #1
 800bcde:	005b      	lsls	r3, r3, #1
 800bce0:	e7ee      	b.n	800bcc0 <__lshift+0x1c>
 800bce2:	2300      	movs	r3, #0
 800bce4:	f100 0114 	add.w	r1, r0, #20
 800bce8:	f100 0210 	add.w	r2, r0, #16
 800bcec:	4618      	mov	r0, r3
 800bcee:	4553      	cmp	r3, sl
 800bcf0:	db33      	blt.n	800bd5a <__lshift+0xb6>
 800bcf2:	6920      	ldr	r0, [r4, #16]
 800bcf4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800bcf8:	f104 0314 	add.w	r3, r4, #20
 800bcfc:	f019 091f 	ands.w	r9, r9, #31
 800bd00:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800bd04:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800bd08:	d02b      	beq.n	800bd62 <__lshift+0xbe>
 800bd0a:	f1c9 0e20 	rsb	lr, r9, #32
 800bd0e:	468a      	mov	sl, r1
 800bd10:	2200      	movs	r2, #0
 800bd12:	6818      	ldr	r0, [r3, #0]
 800bd14:	fa00 f009 	lsl.w	r0, r0, r9
 800bd18:	4310      	orrs	r0, r2
 800bd1a:	f84a 0b04 	str.w	r0, [sl], #4
 800bd1e:	f853 2b04 	ldr.w	r2, [r3], #4
 800bd22:	459c      	cmp	ip, r3
 800bd24:	fa22 f20e 	lsr.w	r2, r2, lr
 800bd28:	d8f3      	bhi.n	800bd12 <__lshift+0x6e>
 800bd2a:	ebac 0304 	sub.w	r3, ip, r4
 800bd2e:	3b15      	subs	r3, #21
 800bd30:	f023 0303 	bic.w	r3, r3, #3
 800bd34:	3304      	adds	r3, #4
 800bd36:	f104 0015 	add.w	r0, r4, #21
 800bd3a:	4560      	cmp	r0, ip
 800bd3c:	bf88      	it	hi
 800bd3e:	2304      	movhi	r3, #4
 800bd40:	50ca      	str	r2, [r1, r3]
 800bd42:	b10a      	cbz	r2, 800bd48 <__lshift+0xa4>
 800bd44:	f108 0602 	add.w	r6, r8, #2
 800bd48:	3e01      	subs	r6, #1
 800bd4a:	4638      	mov	r0, r7
 800bd4c:	612e      	str	r6, [r5, #16]
 800bd4e:	4621      	mov	r1, r4
 800bd50:	f7ff fde2 	bl	800b918 <_Bfree>
 800bd54:	4628      	mov	r0, r5
 800bd56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bd5a:	f842 0f04 	str.w	r0, [r2, #4]!
 800bd5e:	3301      	adds	r3, #1
 800bd60:	e7c5      	b.n	800bcee <__lshift+0x4a>
 800bd62:	3904      	subs	r1, #4
 800bd64:	f853 2b04 	ldr.w	r2, [r3], #4
 800bd68:	f841 2f04 	str.w	r2, [r1, #4]!
 800bd6c:	459c      	cmp	ip, r3
 800bd6e:	d8f9      	bhi.n	800bd64 <__lshift+0xc0>
 800bd70:	e7ea      	b.n	800bd48 <__lshift+0xa4>
 800bd72:	bf00      	nop
 800bd74:	0800d5fc 	.word	0x0800d5fc
 800bd78:	0800d60d 	.word	0x0800d60d

0800bd7c <__mcmp>:
 800bd7c:	690a      	ldr	r2, [r1, #16]
 800bd7e:	4603      	mov	r3, r0
 800bd80:	6900      	ldr	r0, [r0, #16]
 800bd82:	1a80      	subs	r0, r0, r2
 800bd84:	b530      	push	{r4, r5, lr}
 800bd86:	d10e      	bne.n	800bda6 <__mcmp+0x2a>
 800bd88:	3314      	adds	r3, #20
 800bd8a:	3114      	adds	r1, #20
 800bd8c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800bd90:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800bd94:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800bd98:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800bd9c:	4295      	cmp	r5, r2
 800bd9e:	d003      	beq.n	800bda8 <__mcmp+0x2c>
 800bda0:	d205      	bcs.n	800bdae <__mcmp+0x32>
 800bda2:	f04f 30ff 	mov.w	r0, #4294967295
 800bda6:	bd30      	pop	{r4, r5, pc}
 800bda8:	42a3      	cmp	r3, r4
 800bdaa:	d3f3      	bcc.n	800bd94 <__mcmp+0x18>
 800bdac:	e7fb      	b.n	800bda6 <__mcmp+0x2a>
 800bdae:	2001      	movs	r0, #1
 800bdb0:	e7f9      	b.n	800bda6 <__mcmp+0x2a>
	...

0800bdb4 <__mdiff>:
 800bdb4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bdb8:	4689      	mov	r9, r1
 800bdba:	4606      	mov	r6, r0
 800bdbc:	4611      	mov	r1, r2
 800bdbe:	4648      	mov	r0, r9
 800bdc0:	4614      	mov	r4, r2
 800bdc2:	f7ff ffdb 	bl	800bd7c <__mcmp>
 800bdc6:	1e05      	subs	r5, r0, #0
 800bdc8:	d112      	bne.n	800bdf0 <__mdiff+0x3c>
 800bdca:	4629      	mov	r1, r5
 800bdcc:	4630      	mov	r0, r6
 800bdce:	f7ff fd63 	bl	800b898 <_Balloc>
 800bdd2:	4602      	mov	r2, r0
 800bdd4:	b928      	cbnz	r0, 800bde2 <__mdiff+0x2e>
 800bdd6:	4b3f      	ldr	r3, [pc, #252]	@ (800bed4 <__mdiff+0x120>)
 800bdd8:	f240 2137 	movw	r1, #567	@ 0x237
 800bddc:	483e      	ldr	r0, [pc, #248]	@ (800bed8 <__mdiff+0x124>)
 800bdde:	f000 fb11 	bl	800c404 <__assert_func>
 800bde2:	2301      	movs	r3, #1
 800bde4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800bde8:	4610      	mov	r0, r2
 800bdea:	b003      	add	sp, #12
 800bdec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bdf0:	bfbc      	itt	lt
 800bdf2:	464b      	movlt	r3, r9
 800bdf4:	46a1      	movlt	r9, r4
 800bdf6:	4630      	mov	r0, r6
 800bdf8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800bdfc:	bfba      	itte	lt
 800bdfe:	461c      	movlt	r4, r3
 800be00:	2501      	movlt	r5, #1
 800be02:	2500      	movge	r5, #0
 800be04:	f7ff fd48 	bl	800b898 <_Balloc>
 800be08:	4602      	mov	r2, r0
 800be0a:	b918      	cbnz	r0, 800be14 <__mdiff+0x60>
 800be0c:	4b31      	ldr	r3, [pc, #196]	@ (800bed4 <__mdiff+0x120>)
 800be0e:	f240 2145 	movw	r1, #581	@ 0x245
 800be12:	e7e3      	b.n	800bddc <__mdiff+0x28>
 800be14:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800be18:	6926      	ldr	r6, [r4, #16]
 800be1a:	60c5      	str	r5, [r0, #12]
 800be1c:	f109 0310 	add.w	r3, r9, #16
 800be20:	f109 0514 	add.w	r5, r9, #20
 800be24:	f104 0e14 	add.w	lr, r4, #20
 800be28:	f100 0b14 	add.w	fp, r0, #20
 800be2c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800be30:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800be34:	9301      	str	r3, [sp, #4]
 800be36:	46d9      	mov	r9, fp
 800be38:	f04f 0c00 	mov.w	ip, #0
 800be3c:	9b01      	ldr	r3, [sp, #4]
 800be3e:	f85e 0b04 	ldr.w	r0, [lr], #4
 800be42:	f853 af04 	ldr.w	sl, [r3, #4]!
 800be46:	9301      	str	r3, [sp, #4]
 800be48:	fa1f f38a 	uxth.w	r3, sl
 800be4c:	4619      	mov	r1, r3
 800be4e:	b283      	uxth	r3, r0
 800be50:	1acb      	subs	r3, r1, r3
 800be52:	0c00      	lsrs	r0, r0, #16
 800be54:	4463      	add	r3, ip
 800be56:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800be5a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800be5e:	b29b      	uxth	r3, r3
 800be60:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800be64:	4576      	cmp	r6, lr
 800be66:	f849 3b04 	str.w	r3, [r9], #4
 800be6a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800be6e:	d8e5      	bhi.n	800be3c <__mdiff+0x88>
 800be70:	1b33      	subs	r3, r6, r4
 800be72:	3b15      	subs	r3, #21
 800be74:	f023 0303 	bic.w	r3, r3, #3
 800be78:	3415      	adds	r4, #21
 800be7a:	3304      	adds	r3, #4
 800be7c:	42a6      	cmp	r6, r4
 800be7e:	bf38      	it	cc
 800be80:	2304      	movcc	r3, #4
 800be82:	441d      	add	r5, r3
 800be84:	445b      	add	r3, fp
 800be86:	461e      	mov	r6, r3
 800be88:	462c      	mov	r4, r5
 800be8a:	4544      	cmp	r4, r8
 800be8c:	d30e      	bcc.n	800beac <__mdiff+0xf8>
 800be8e:	f108 0103 	add.w	r1, r8, #3
 800be92:	1b49      	subs	r1, r1, r5
 800be94:	f021 0103 	bic.w	r1, r1, #3
 800be98:	3d03      	subs	r5, #3
 800be9a:	45a8      	cmp	r8, r5
 800be9c:	bf38      	it	cc
 800be9e:	2100      	movcc	r1, #0
 800bea0:	440b      	add	r3, r1
 800bea2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800bea6:	b191      	cbz	r1, 800bece <__mdiff+0x11a>
 800bea8:	6117      	str	r7, [r2, #16]
 800beaa:	e79d      	b.n	800bde8 <__mdiff+0x34>
 800beac:	f854 1b04 	ldr.w	r1, [r4], #4
 800beb0:	46e6      	mov	lr, ip
 800beb2:	0c08      	lsrs	r0, r1, #16
 800beb4:	fa1c fc81 	uxtah	ip, ip, r1
 800beb8:	4471      	add	r1, lr
 800beba:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800bebe:	b289      	uxth	r1, r1
 800bec0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800bec4:	f846 1b04 	str.w	r1, [r6], #4
 800bec8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800becc:	e7dd      	b.n	800be8a <__mdiff+0xd6>
 800bece:	3f01      	subs	r7, #1
 800bed0:	e7e7      	b.n	800bea2 <__mdiff+0xee>
 800bed2:	bf00      	nop
 800bed4:	0800d5fc 	.word	0x0800d5fc
 800bed8:	0800d60d 	.word	0x0800d60d

0800bedc <__d2b>:
 800bedc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800bee0:	460f      	mov	r7, r1
 800bee2:	2101      	movs	r1, #1
 800bee4:	ec59 8b10 	vmov	r8, r9, d0
 800bee8:	4616      	mov	r6, r2
 800beea:	f7ff fcd5 	bl	800b898 <_Balloc>
 800beee:	4604      	mov	r4, r0
 800bef0:	b930      	cbnz	r0, 800bf00 <__d2b+0x24>
 800bef2:	4602      	mov	r2, r0
 800bef4:	4b23      	ldr	r3, [pc, #140]	@ (800bf84 <__d2b+0xa8>)
 800bef6:	4824      	ldr	r0, [pc, #144]	@ (800bf88 <__d2b+0xac>)
 800bef8:	f240 310f 	movw	r1, #783	@ 0x30f
 800befc:	f000 fa82 	bl	800c404 <__assert_func>
 800bf00:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800bf04:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800bf08:	b10d      	cbz	r5, 800bf0e <__d2b+0x32>
 800bf0a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800bf0e:	9301      	str	r3, [sp, #4]
 800bf10:	f1b8 0300 	subs.w	r3, r8, #0
 800bf14:	d023      	beq.n	800bf5e <__d2b+0x82>
 800bf16:	4668      	mov	r0, sp
 800bf18:	9300      	str	r3, [sp, #0]
 800bf1a:	f7ff fd84 	bl	800ba26 <__lo0bits>
 800bf1e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800bf22:	b1d0      	cbz	r0, 800bf5a <__d2b+0x7e>
 800bf24:	f1c0 0320 	rsb	r3, r0, #32
 800bf28:	fa02 f303 	lsl.w	r3, r2, r3
 800bf2c:	430b      	orrs	r3, r1
 800bf2e:	40c2      	lsrs	r2, r0
 800bf30:	6163      	str	r3, [r4, #20]
 800bf32:	9201      	str	r2, [sp, #4]
 800bf34:	9b01      	ldr	r3, [sp, #4]
 800bf36:	61a3      	str	r3, [r4, #24]
 800bf38:	2b00      	cmp	r3, #0
 800bf3a:	bf0c      	ite	eq
 800bf3c:	2201      	moveq	r2, #1
 800bf3e:	2202      	movne	r2, #2
 800bf40:	6122      	str	r2, [r4, #16]
 800bf42:	b1a5      	cbz	r5, 800bf6e <__d2b+0x92>
 800bf44:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800bf48:	4405      	add	r5, r0
 800bf4a:	603d      	str	r5, [r7, #0]
 800bf4c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800bf50:	6030      	str	r0, [r6, #0]
 800bf52:	4620      	mov	r0, r4
 800bf54:	b003      	add	sp, #12
 800bf56:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bf5a:	6161      	str	r1, [r4, #20]
 800bf5c:	e7ea      	b.n	800bf34 <__d2b+0x58>
 800bf5e:	a801      	add	r0, sp, #4
 800bf60:	f7ff fd61 	bl	800ba26 <__lo0bits>
 800bf64:	9b01      	ldr	r3, [sp, #4]
 800bf66:	6163      	str	r3, [r4, #20]
 800bf68:	3020      	adds	r0, #32
 800bf6a:	2201      	movs	r2, #1
 800bf6c:	e7e8      	b.n	800bf40 <__d2b+0x64>
 800bf6e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800bf72:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800bf76:	6038      	str	r0, [r7, #0]
 800bf78:	6918      	ldr	r0, [r3, #16]
 800bf7a:	f7ff fd35 	bl	800b9e8 <__hi0bits>
 800bf7e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800bf82:	e7e5      	b.n	800bf50 <__d2b+0x74>
 800bf84:	0800d5fc 	.word	0x0800d5fc
 800bf88:	0800d60d 	.word	0x0800d60d

0800bf8c <__ssputs_r>:
 800bf8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bf90:	688e      	ldr	r6, [r1, #8]
 800bf92:	461f      	mov	r7, r3
 800bf94:	42be      	cmp	r6, r7
 800bf96:	680b      	ldr	r3, [r1, #0]
 800bf98:	4682      	mov	sl, r0
 800bf9a:	460c      	mov	r4, r1
 800bf9c:	4690      	mov	r8, r2
 800bf9e:	d82d      	bhi.n	800bffc <__ssputs_r+0x70>
 800bfa0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800bfa4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800bfa8:	d026      	beq.n	800bff8 <__ssputs_r+0x6c>
 800bfaa:	6965      	ldr	r5, [r4, #20]
 800bfac:	6909      	ldr	r1, [r1, #16]
 800bfae:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bfb2:	eba3 0901 	sub.w	r9, r3, r1
 800bfb6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800bfba:	1c7b      	adds	r3, r7, #1
 800bfbc:	444b      	add	r3, r9
 800bfbe:	106d      	asrs	r5, r5, #1
 800bfc0:	429d      	cmp	r5, r3
 800bfc2:	bf38      	it	cc
 800bfc4:	461d      	movcc	r5, r3
 800bfc6:	0553      	lsls	r3, r2, #21
 800bfc8:	d527      	bpl.n	800c01a <__ssputs_r+0x8e>
 800bfca:	4629      	mov	r1, r5
 800bfcc:	f7ff fbd8 	bl	800b780 <_malloc_r>
 800bfd0:	4606      	mov	r6, r0
 800bfd2:	b360      	cbz	r0, 800c02e <__ssputs_r+0xa2>
 800bfd4:	6921      	ldr	r1, [r4, #16]
 800bfd6:	464a      	mov	r2, r9
 800bfd8:	f000 fa06 	bl	800c3e8 <memcpy>
 800bfdc:	89a3      	ldrh	r3, [r4, #12]
 800bfde:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800bfe2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bfe6:	81a3      	strh	r3, [r4, #12]
 800bfe8:	6126      	str	r6, [r4, #16]
 800bfea:	6165      	str	r5, [r4, #20]
 800bfec:	444e      	add	r6, r9
 800bfee:	eba5 0509 	sub.w	r5, r5, r9
 800bff2:	6026      	str	r6, [r4, #0]
 800bff4:	60a5      	str	r5, [r4, #8]
 800bff6:	463e      	mov	r6, r7
 800bff8:	42be      	cmp	r6, r7
 800bffa:	d900      	bls.n	800bffe <__ssputs_r+0x72>
 800bffc:	463e      	mov	r6, r7
 800bffe:	6820      	ldr	r0, [r4, #0]
 800c000:	4632      	mov	r2, r6
 800c002:	4641      	mov	r1, r8
 800c004:	f000 f9c6 	bl	800c394 <memmove>
 800c008:	68a3      	ldr	r3, [r4, #8]
 800c00a:	1b9b      	subs	r3, r3, r6
 800c00c:	60a3      	str	r3, [r4, #8]
 800c00e:	6823      	ldr	r3, [r4, #0]
 800c010:	4433      	add	r3, r6
 800c012:	6023      	str	r3, [r4, #0]
 800c014:	2000      	movs	r0, #0
 800c016:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c01a:	462a      	mov	r2, r5
 800c01c:	f000 fa36 	bl	800c48c <_realloc_r>
 800c020:	4606      	mov	r6, r0
 800c022:	2800      	cmp	r0, #0
 800c024:	d1e0      	bne.n	800bfe8 <__ssputs_r+0x5c>
 800c026:	6921      	ldr	r1, [r4, #16]
 800c028:	4650      	mov	r0, sl
 800c02a:	f7ff fb35 	bl	800b698 <_free_r>
 800c02e:	230c      	movs	r3, #12
 800c030:	f8ca 3000 	str.w	r3, [sl]
 800c034:	89a3      	ldrh	r3, [r4, #12]
 800c036:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c03a:	81a3      	strh	r3, [r4, #12]
 800c03c:	f04f 30ff 	mov.w	r0, #4294967295
 800c040:	e7e9      	b.n	800c016 <__ssputs_r+0x8a>
	...

0800c044 <_svfiprintf_r>:
 800c044:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c048:	4698      	mov	r8, r3
 800c04a:	898b      	ldrh	r3, [r1, #12]
 800c04c:	061b      	lsls	r3, r3, #24
 800c04e:	b09d      	sub	sp, #116	@ 0x74
 800c050:	4607      	mov	r7, r0
 800c052:	460d      	mov	r5, r1
 800c054:	4614      	mov	r4, r2
 800c056:	d510      	bpl.n	800c07a <_svfiprintf_r+0x36>
 800c058:	690b      	ldr	r3, [r1, #16]
 800c05a:	b973      	cbnz	r3, 800c07a <_svfiprintf_r+0x36>
 800c05c:	2140      	movs	r1, #64	@ 0x40
 800c05e:	f7ff fb8f 	bl	800b780 <_malloc_r>
 800c062:	6028      	str	r0, [r5, #0]
 800c064:	6128      	str	r0, [r5, #16]
 800c066:	b930      	cbnz	r0, 800c076 <_svfiprintf_r+0x32>
 800c068:	230c      	movs	r3, #12
 800c06a:	603b      	str	r3, [r7, #0]
 800c06c:	f04f 30ff 	mov.w	r0, #4294967295
 800c070:	b01d      	add	sp, #116	@ 0x74
 800c072:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c076:	2340      	movs	r3, #64	@ 0x40
 800c078:	616b      	str	r3, [r5, #20]
 800c07a:	2300      	movs	r3, #0
 800c07c:	9309      	str	r3, [sp, #36]	@ 0x24
 800c07e:	2320      	movs	r3, #32
 800c080:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c084:	f8cd 800c 	str.w	r8, [sp, #12]
 800c088:	2330      	movs	r3, #48	@ 0x30
 800c08a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800c228 <_svfiprintf_r+0x1e4>
 800c08e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c092:	f04f 0901 	mov.w	r9, #1
 800c096:	4623      	mov	r3, r4
 800c098:	469a      	mov	sl, r3
 800c09a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c09e:	b10a      	cbz	r2, 800c0a4 <_svfiprintf_r+0x60>
 800c0a0:	2a25      	cmp	r2, #37	@ 0x25
 800c0a2:	d1f9      	bne.n	800c098 <_svfiprintf_r+0x54>
 800c0a4:	ebba 0b04 	subs.w	fp, sl, r4
 800c0a8:	d00b      	beq.n	800c0c2 <_svfiprintf_r+0x7e>
 800c0aa:	465b      	mov	r3, fp
 800c0ac:	4622      	mov	r2, r4
 800c0ae:	4629      	mov	r1, r5
 800c0b0:	4638      	mov	r0, r7
 800c0b2:	f7ff ff6b 	bl	800bf8c <__ssputs_r>
 800c0b6:	3001      	adds	r0, #1
 800c0b8:	f000 80a7 	beq.w	800c20a <_svfiprintf_r+0x1c6>
 800c0bc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c0be:	445a      	add	r2, fp
 800c0c0:	9209      	str	r2, [sp, #36]	@ 0x24
 800c0c2:	f89a 3000 	ldrb.w	r3, [sl]
 800c0c6:	2b00      	cmp	r3, #0
 800c0c8:	f000 809f 	beq.w	800c20a <_svfiprintf_r+0x1c6>
 800c0cc:	2300      	movs	r3, #0
 800c0ce:	f04f 32ff 	mov.w	r2, #4294967295
 800c0d2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c0d6:	f10a 0a01 	add.w	sl, sl, #1
 800c0da:	9304      	str	r3, [sp, #16]
 800c0dc:	9307      	str	r3, [sp, #28]
 800c0de:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c0e2:	931a      	str	r3, [sp, #104]	@ 0x68
 800c0e4:	4654      	mov	r4, sl
 800c0e6:	2205      	movs	r2, #5
 800c0e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c0ec:	484e      	ldr	r0, [pc, #312]	@ (800c228 <_svfiprintf_r+0x1e4>)
 800c0ee:	f7f4 f87f 	bl	80001f0 <memchr>
 800c0f2:	9a04      	ldr	r2, [sp, #16]
 800c0f4:	b9d8      	cbnz	r0, 800c12e <_svfiprintf_r+0xea>
 800c0f6:	06d0      	lsls	r0, r2, #27
 800c0f8:	bf44      	itt	mi
 800c0fa:	2320      	movmi	r3, #32
 800c0fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c100:	0711      	lsls	r1, r2, #28
 800c102:	bf44      	itt	mi
 800c104:	232b      	movmi	r3, #43	@ 0x2b
 800c106:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c10a:	f89a 3000 	ldrb.w	r3, [sl]
 800c10e:	2b2a      	cmp	r3, #42	@ 0x2a
 800c110:	d015      	beq.n	800c13e <_svfiprintf_r+0xfa>
 800c112:	9a07      	ldr	r2, [sp, #28]
 800c114:	4654      	mov	r4, sl
 800c116:	2000      	movs	r0, #0
 800c118:	f04f 0c0a 	mov.w	ip, #10
 800c11c:	4621      	mov	r1, r4
 800c11e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c122:	3b30      	subs	r3, #48	@ 0x30
 800c124:	2b09      	cmp	r3, #9
 800c126:	d94b      	bls.n	800c1c0 <_svfiprintf_r+0x17c>
 800c128:	b1b0      	cbz	r0, 800c158 <_svfiprintf_r+0x114>
 800c12a:	9207      	str	r2, [sp, #28]
 800c12c:	e014      	b.n	800c158 <_svfiprintf_r+0x114>
 800c12e:	eba0 0308 	sub.w	r3, r0, r8
 800c132:	fa09 f303 	lsl.w	r3, r9, r3
 800c136:	4313      	orrs	r3, r2
 800c138:	9304      	str	r3, [sp, #16]
 800c13a:	46a2      	mov	sl, r4
 800c13c:	e7d2      	b.n	800c0e4 <_svfiprintf_r+0xa0>
 800c13e:	9b03      	ldr	r3, [sp, #12]
 800c140:	1d19      	adds	r1, r3, #4
 800c142:	681b      	ldr	r3, [r3, #0]
 800c144:	9103      	str	r1, [sp, #12]
 800c146:	2b00      	cmp	r3, #0
 800c148:	bfbb      	ittet	lt
 800c14a:	425b      	neglt	r3, r3
 800c14c:	f042 0202 	orrlt.w	r2, r2, #2
 800c150:	9307      	strge	r3, [sp, #28]
 800c152:	9307      	strlt	r3, [sp, #28]
 800c154:	bfb8      	it	lt
 800c156:	9204      	strlt	r2, [sp, #16]
 800c158:	7823      	ldrb	r3, [r4, #0]
 800c15a:	2b2e      	cmp	r3, #46	@ 0x2e
 800c15c:	d10a      	bne.n	800c174 <_svfiprintf_r+0x130>
 800c15e:	7863      	ldrb	r3, [r4, #1]
 800c160:	2b2a      	cmp	r3, #42	@ 0x2a
 800c162:	d132      	bne.n	800c1ca <_svfiprintf_r+0x186>
 800c164:	9b03      	ldr	r3, [sp, #12]
 800c166:	1d1a      	adds	r2, r3, #4
 800c168:	681b      	ldr	r3, [r3, #0]
 800c16a:	9203      	str	r2, [sp, #12]
 800c16c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c170:	3402      	adds	r4, #2
 800c172:	9305      	str	r3, [sp, #20]
 800c174:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800c238 <_svfiprintf_r+0x1f4>
 800c178:	7821      	ldrb	r1, [r4, #0]
 800c17a:	2203      	movs	r2, #3
 800c17c:	4650      	mov	r0, sl
 800c17e:	f7f4 f837 	bl	80001f0 <memchr>
 800c182:	b138      	cbz	r0, 800c194 <_svfiprintf_r+0x150>
 800c184:	9b04      	ldr	r3, [sp, #16]
 800c186:	eba0 000a 	sub.w	r0, r0, sl
 800c18a:	2240      	movs	r2, #64	@ 0x40
 800c18c:	4082      	lsls	r2, r0
 800c18e:	4313      	orrs	r3, r2
 800c190:	3401      	adds	r4, #1
 800c192:	9304      	str	r3, [sp, #16]
 800c194:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c198:	4824      	ldr	r0, [pc, #144]	@ (800c22c <_svfiprintf_r+0x1e8>)
 800c19a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c19e:	2206      	movs	r2, #6
 800c1a0:	f7f4 f826 	bl	80001f0 <memchr>
 800c1a4:	2800      	cmp	r0, #0
 800c1a6:	d036      	beq.n	800c216 <_svfiprintf_r+0x1d2>
 800c1a8:	4b21      	ldr	r3, [pc, #132]	@ (800c230 <_svfiprintf_r+0x1ec>)
 800c1aa:	bb1b      	cbnz	r3, 800c1f4 <_svfiprintf_r+0x1b0>
 800c1ac:	9b03      	ldr	r3, [sp, #12]
 800c1ae:	3307      	adds	r3, #7
 800c1b0:	f023 0307 	bic.w	r3, r3, #7
 800c1b4:	3308      	adds	r3, #8
 800c1b6:	9303      	str	r3, [sp, #12]
 800c1b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c1ba:	4433      	add	r3, r6
 800c1bc:	9309      	str	r3, [sp, #36]	@ 0x24
 800c1be:	e76a      	b.n	800c096 <_svfiprintf_r+0x52>
 800c1c0:	fb0c 3202 	mla	r2, ip, r2, r3
 800c1c4:	460c      	mov	r4, r1
 800c1c6:	2001      	movs	r0, #1
 800c1c8:	e7a8      	b.n	800c11c <_svfiprintf_r+0xd8>
 800c1ca:	2300      	movs	r3, #0
 800c1cc:	3401      	adds	r4, #1
 800c1ce:	9305      	str	r3, [sp, #20]
 800c1d0:	4619      	mov	r1, r3
 800c1d2:	f04f 0c0a 	mov.w	ip, #10
 800c1d6:	4620      	mov	r0, r4
 800c1d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c1dc:	3a30      	subs	r2, #48	@ 0x30
 800c1de:	2a09      	cmp	r2, #9
 800c1e0:	d903      	bls.n	800c1ea <_svfiprintf_r+0x1a6>
 800c1e2:	2b00      	cmp	r3, #0
 800c1e4:	d0c6      	beq.n	800c174 <_svfiprintf_r+0x130>
 800c1e6:	9105      	str	r1, [sp, #20]
 800c1e8:	e7c4      	b.n	800c174 <_svfiprintf_r+0x130>
 800c1ea:	fb0c 2101 	mla	r1, ip, r1, r2
 800c1ee:	4604      	mov	r4, r0
 800c1f0:	2301      	movs	r3, #1
 800c1f2:	e7f0      	b.n	800c1d6 <_svfiprintf_r+0x192>
 800c1f4:	ab03      	add	r3, sp, #12
 800c1f6:	9300      	str	r3, [sp, #0]
 800c1f8:	462a      	mov	r2, r5
 800c1fa:	4b0e      	ldr	r3, [pc, #56]	@ (800c234 <_svfiprintf_r+0x1f0>)
 800c1fc:	a904      	add	r1, sp, #16
 800c1fe:	4638      	mov	r0, r7
 800c200:	f7fd fe92 	bl	8009f28 <_printf_float>
 800c204:	1c42      	adds	r2, r0, #1
 800c206:	4606      	mov	r6, r0
 800c208:	d1d6      	bne.n	800c1b8 <_svfiprintf_r+0x174>
 800c20a:	89ab      	ldrh	r3, [r5, #12]
 800c20c:	065b      	lsls	r3, r3, #25
 800c20e:	f53f af2d 	bmi.w	800c06c <_svfiprintf_r+0x28>
 800c212:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c214:	e72c      	b.n	800c070 <_svfiprintf_r+0x2c>
 800c216:	ab03      	add	r3, sp, #12
 800c218:	9300      	str	r3, [sp, #0]
 800c21a:	462a      	mov	r2, r5
 800c21c:	4b05      	ldr	r3, [pc, #20]	@ (800c234 <_svfiprintf_r+0x1f0>)
 800c21e:	a904      	add	r1, sp, #16
 800c220:	4638      	mov	r0, r7
 800c222:	f7fe f919 	bl	800a458 <_printf_i>
 800c226:	e7ed      	b.n	800c204 <_svfiprintf_r+0x1c0>
 800c228:	0800d666 	.word	0x0800d666
 800c22c:	0800d670 	.word	0x0800d670
 800c230:	08009f29 	.word	0x08009f29
 800c234:	0800bf8d 	.word	0x0800bf8d
 800c238:	0800d66c 	.word	0x0800d66c

0800c23c <__sflush_r>:
 800c23c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c240:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c244:	0716      	lsls	r6, r2, #28
 800c246:	4605      	mov	r5, r0
 800c248:	460c      	mov	r4, r1
 800c24a:	d454      	bmi.n	800c2f6 <__sflush_r+0xba>
 800c24c:	684b      	ldr	r3, [r1, #4]
 800c24e:	2b00      	cmp	r3, #0
 800c250:	dc02      	bgt.n	800c258 <__sflush_r+0x1c>
 800c252:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800c254:	2b00      	cmp	r3, #0
 800c256:	dd48      	ble.n	800c2ea <__sflush_r+0xae>
 800c258:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c25a:	2e00      	cmp	r6, #0
 800c25c:	d045      	beq.n	800c2ea <__sflush_r+0xae>
 800c25e:	2300      	movs	r3, #0
 800c260:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800c264:	682f      	ldr	r7, [r5, #0]
 800c266:	6a21      	ldr	r1, [r4, #32]
 800c268:	602b      	str	r3, [r5, #0]
 800c26a:	d030      	beq.n	800c2ce <__sflush_r+0x92>
 800c26c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800c26e:	89a3      	ldrh	r3, [r4, #12]
 800c270:	0759      	lsls	r1, r3, #29
 800c272:	d505      	bpl.n	800c280 <__sflush_r+0x44>
 800c274:	6863      	ldr	r3, [r4, #4]
 800c276:	1ad2      	subs	r2, r2, r3
 800c278:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800c27a:	b10b      	cbz	r3, 800c280 <__sflush_r+0x44>
 800c27c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c27e:	1ad2      	subs	r2, r2, r3
 800c280:	2300      	movs	r3, #0
 800c282:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c284:	6a21      	ldr	r1, [r4, #32]
 800c286:	4628      	mov	r0, r5
 800c288:	47b0      	blx	r6
 800c28a:	1c43      	adds	r3, r0, #1
 800c28c:	89a3      	ldrh	r3, [r4, #12]
 800c28e:	d106      	bne.n	800c29e <__sflush_r+0x62>
 800c290:	6829      	ldr	r1, [r5, #0]
 800c292:	291d      	cmp	r1, #29
 800c294:	d82b      	bhi.n	800c2ee <__sflush_r+0xb2>
 800c296:	4a2a      	ldr	r2, [pc, #168]	@ (800c340 <__sflush_r+0x104>)
 800c298:	40ca      	lsrs	r2, r1
 800c29a:	07d6      	lsls	r6, r2, #31
 800c29c:	d527      	bpl.n	800c2ee <__sflush_r+0xb2>
 800c29e:	2200      	movs	r2, #0
 800c2a0:	6062      	str	r2, [r4, #4]
 800c2a2:	04d9      	lsls	r1, r3, #19
 800c2a4:	6922      	ldr	r2, [r4, #16]
 800c2a6:	6022      	str	r2, [r4, #0]
 800c2a8:	d504      	bpl.n	800c2b4 <__sflush_r+0x78>
 800c2aa:	1c42      	adds	r2, r0, #1
 800c2ac:	d101      	bne.n	800c2b2 <__sflush_r+0x76>
 800c2ae:	682b      	ldr	r3, [r5, #0]
 800c2b0:	b903      	cbnz	r3, 800c2b4 <__sflush_r+0x78>
 800c2b2:	6560      	str	r0, [r4, #84]	@ 0x54
 800c2b4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c2b6:	602f      	str	r7, [r5, #0]
 800c2b8:	b1b9      	cbz	r1, 800c2ea <__sflush_r+0xae>
 800c2ba:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c2be:	4299      	cmp	r1, r3
 800c2c0:	d002      	beq.n	800c2c8 <__sflush_r+0x8c>
 800c2c2:	4628      	mov	r0, r5
 800c2c4:	f7ff f9e8 	bl	800b698 <_free_r>
 800c2c8:	2300      	movs	r3, #0
 800c2ca:	6363      	str	r3, [r4, #52]	@ 0x34
 800c2cc:	e00d      	b.n	800c2ea <__sflush_r+0xae>
 800c2ce:	2301      	movs	r3, #1
 800c2d0:	4628      	mov	r0, r5
 800c2d2:	47b0      	blx	r6
 800c2d4:	4602      	mov	r2, r0
 800c2d6:	1c50      	adds	r0, r2, #1
 800c2d8:	d1c9      	bne.n	800c26e <__sflush_r+0x32>
 800c2da:	682b      	ldr	r3, [r5, #0]
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	d0c6      	beq.n	800c26e <__sflush_r+0x32>
 800c2e0:	2b1d      	cmp	r3, #29
 800c2e2:	d001      	beq.n	800c2e8 <__sflush_r+0xac>
 800c2e4:	2b16      	cmp	r3, #22
 800c2e6:	d11e      	bne.n	800c326 <__sflush_r+0xea>
 800c2e8:	602f      	str	r7, [r5, #0]
 800c2ea:	2000      	movs	r0, #0
 800c2ec:	e022      	b.n	800c334 <__sflush_r+0xf8>
 800c2ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c2f2:	b21b      	sxth	r3, r3
 800c2f4:	e01b      	b.n	800c32e <__sflush_r+0xf2>
 800c2f6:	690f      	ldr	r7, [r1, #16]
 800c2f8:	2f00      	cmp	r7, #0
 800c2fa:	d0f6      	beq.n	800c2ea <__sflush_r+0xae>
 800c2fc:	0793      	lsls	r3, r2, #30
 800c2fe:	680e      	ldr	r6, [r1, #0]
 800c300:	bf08      	it	eq
 800c302:	694b      	ldreq	r3, [r1, #20]
 800c304:	600f      	str	r7, [r1, #0]
 800c306:	bf18      	it	ne
 800c308:	2300      	movne	r3, #0
 800c30a:	eba6 0807 	sub.w	r8, r6, r7
 800c30e:	608b      	str	r3, [r1, #8]
 800c310:	f1b8 0f00 	cmp.w	r8, #0
 800c314:	dde9      	ble.n	800c2ea <__sflush_r+0xae>
 800c316:	6a21      	ldr	r1, [r4, #32]
 800c318:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800c31a:	4643      	mov	r3, r8
 800c31c:	463a      	mov	r2, r7
 800c31e:	4628      	mov	r0, r5
 800c320:	47b0      	blx	r6
 800c322:	2800      	cmp	r0, #0
 800c324:	dc08      	bgt.n	800c338 <__sflush_r+0xfc>
 800c326:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c32a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c32e:	81a3      	strh	r3, [r4, #12]
 800c330:	f04f 30ff 	mov.w	r0, #4294967295
 800c334:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c338:	4407      	add	r7, r0
 800c33a:	eba8 0800 	sub.w	r8, r8, r0
 800c33e:	e7e7      	b.n	800c310 <__sflush_r+0xd4>
 800c340:	20400001 	.word	0x20400001

0800c344 <_fflush_r>:
 800c344:	b538      	push	{r3, r4, r5, lr}
 800c346:	690b      	ldr	r3, [r1, #16]
 800c348:	4605      	mov	r5, r0
 800c34a:	460c      	mov	r4, r1
 800c34c:	b913      	cbnz	r3, 800c354 <_fflush_r+0x10>
 800c34e:	2500      	movs	r5, #0
 800c350:	4628      	mov	r0, r5
 800c352:	bd38      	pop	{r3, r4, r5, pc}
 800c354:	b118      	cbz	r0, 800c35e <_fflush_r+0x1a>
 800c356:	6a03      	ldr	r3, [r0, #32]
 800c358:	b90b      	cbnz	r3, 800c35e <_fflush_r+0x1a>
 800c35a:	f7fe fa27 	bl	800a7ac <__sinit>
 800c35e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c362:	2b00      	cmp	r3, #0
 800c364:	d0f3      	beq.n	800c34e <_fflush_r+0xa>
 800c366:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800c368:	07d0      	lsls	r0, r2, #31
 800c36a:	d404      	bmi.n	800c376 <_fflush_r+0x32>
 800c36c:	0599      	lsls	r1, r3, #22
 800c36e:	d402      	bmi.n	800c376 <_fflush_r+0x32>
 800c370:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c372:	f7fe fb34 	bl	800a9de <__retarget_lock_acquire_recursive>
 800c376:	4628      	mov	r0, r5
 800c378:	4621      	mov	r1, r4
 800c37a:	f7ff ff5f 	bl	800c23c <__sflush_r>
 800c37e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c380:	07da      	lsls	r2, r3, #31
 800c382:	4605      	mov	r5, r0
 800c384:	d4e4      	bmi.n	800c350 <_fflush_r+0xc>
 800c386:	89a3      	ldrh	r3, [r4, #12]
 800c388:	059b      	lsls	r3, r3, #22
 800c38a:	d4e1      	bmi.n	800c350 <_fflush_r+0xc>
 800c38c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c38e:	f7fe fb27 	bl	800a9e0 <__retarget_lock_release_recursive>
 800c392:	e7dd      	b.n	800c350 <_fflush_r+0xc>

0800c394 <memmove>:
 800c394:	4288      	cmp	r0, r1
 800c396:	b510      	push	{r4, lr}
 800c398:	eb01 0402 	add.w	r4, r1, r2
 800c39c:	d902      	bls.n	800c3a4 <memmove+0x10>
 800c39e:	4284      	cmp	r4, r0
 800c3a0:	4623      	mov	r3, r4
 800c3a2:	d807      	bhi.n	800c3b4 <memmove+0x20>
 800c3a4:	1e43      	subs	r3, r0, #1
 800c3a6:	42a1      	cmp	r1, r4
 800c3a8:	d008      	beq.n	800c3bc <memmove+0x28>
 800c3aa:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c3ae:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c3b2:	e7f8      	b.n	800c3a6 <memmove+0x12>
 800c3b4:	4402      	add	r2, r0
 800c3b6:	4601      	mov	r1, r0
 800c3b8:	428a      	cmp	r2, r1
 800c3ba:	d100      	bne.n	800c3be <memmove+0x2a>
 800c3bc:	bd10      	pop	{r4, pc}
 800c3be:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c3c2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c3c6:	e7f7      	b.n	800c3b8 <memmove+0x24>

0800c3c8 <_sbrk_r>:
 800c3c8:	b538      	push	{r3, r4, r5, lr}
 800c3ca:	4d06      	ldr	r5, [pc, #24]	@ (800c3e4 <_sbrk_r+0x1c>)
 800c3cc:	2300      	movs	r3, #0
 800c3ce:	4604      	mov	r4, r0
 800c3d0:	4608      	mov	r0, r1
 800c3d2:	602b      	str	r3, [r5, #0]
 800c3d4:	f7f6 f8be 	bl	8002554 <_sbrk>
 800c3d8:	1c43      	adds	r3, r0, #1
 800c3da:	d102      	bne.n	800c3e2 <_sbrk_r+0x1a>
 800c3dc:	682b      	ldr	r3, [r5, #0]
 800c3de:	b103      	cbz	r3, 800c3e2 <_sbrk_r+0x1a>
 800c3e0:	6023      	str	r3, [r4, #0]
 800c3e2:	bd38      	pop	{r3, r4, r5, pc}
 800c3e4:	20000ff0 	.word	0x20000ff0

0800c3e8 <memcpy>:
 800c3e8:	440a      	add	r2, r1
 800c3ea:	4291      	cmp	r1, r2
 800c3ec:	f100 33ff 	add.w	r3, r0, #4294967295
 800c3f0:	d100      	bne.n	800c3f4 <memcpy+0xc>
 800c3f2:	4770      	bx	lr
 800c3f4:	b510      	push	{r4, lr}
 800c3f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c3fa:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c3fe:	4291      	cmp	r1, r2
 800c400:	d1f9      	bne.n	800c3f6 <memcpy+0xe>
 800c402:	bd10      	pop	{r4, pc}

0800c404 <__assert_func>:
 800c404:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c406:	4614      	mov	r4, r2
 800c408:	461a      	mov	r2, r3
 800c40a:	4b09      	ldr	r3, [pc, #36]	@ (800c430 <__assert_func+0x2c>)
 800c40c:	681b      	ldr	r3, [r3, #0]
 800c40e:	4605      	mov	r5, r0
 800c410:	68d8      	ldr	r0, [r3, #12]
 800c412:	b14c      	cbz	r4, 800c428 <__assert_func+0x24>
 800c414:	4b07      	ldr	r3, [pc, #28]	@ (800c434 <__assert_func+0x30>)
 800c416:	9100      	str	r1, [sp, #0]
 800c418:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c41c:	4906      	ldr	r1, [pc, #24]	@ (800c438 <__assert_func+0x34>)
 800c41e:	462b      	mov	r3, r5
 800c420:	f000 f870 	bl	800c504 <fiprintf>
 800c424:	f000 f880 	bl	800c528 <abort>
 800c428:	4b04      	ldr	r3, [pc, #16]	@ (800c43c <__assert_func+0x38>)
 800c42a:	461c      	mov	r4, r3
 800c42c:	e7f3      	b.n	800c416 <__assert_func+0x12>
 800c42e:	bf00      	nop
 800c430:	2000012c 	.word	0x2000012c
 800c434:	0800d681 	.word	0x0800d681
 800c438:	0800d68e 	.word	0x0800d68e
 800c43c:	0800d6bc 	.word	0x0800d6bc

0800c440 <_calloc_r>:
 800c440:	b570      	push	{r4, r5, r6, lr}
 800c442:	fba1 5402 	umull	r5, r4, r1, r2
 800c446:	b934      	cbnz	r4, 800c456 <_calloc_r+0x16>
 800c448:	4629      	mov	r1, r5
 800c44a:	f7ff f999 	bl	800b780 <_malloc_r>
 800c44e:	4606      	mov	r6, r0
 800c450:	b928      	cbnz	r0, 800c45e <_calloc_r+0x1e>
 800c452:	4630      	mov	r0, r6
 800c454:	bd70      	pop	{r4, r5, r6, pc}
 800c456:	220c      	movs	r2, #12
 800c458:	6002      	str	r2, [r0, #0]
 800c45a:	2600      	movs	r6, #0
 800c45c:	e7f9      	b.n	800c452 <_calloc_r+0x12>
 800c45e:	462a      	mov	r2, r5
 800c460:	4621      	mov	r1, r4
 800c462:	f7fe fa3e 	bl	800a8e2 <memset>
 800c466:	e7f4      	b.n	800c452 <_calloc_r+0x12>

0800c468 <__ascii_mbtowc>:
 800c468:	b082      	sub	sp, #8
 800c46a:	b901      	cbnz	r1, 800c46e <__ascii_mbtowc+0x6>
 800c46c:	a901      	add	r1, sp, #4
 800c46e:	b142      	cbz	r2, 800c482 <__ascii_mbtowc+0x1a>
 800c470:	b14b      	cbz	r3, 800c486 <__ascii_mbtowc+0x1e>
 800c472:	7813      	ldrb	r3, [r2, #0]
 800c474:	600b      	str	r3, [r1, #0]
 800c476:	7812      	ldrb	r2, [r2, #0]
 800c478:	1e10      	subs	r0, r2, #0
 800c47a:	bf18      	it	ne
 800c47c:	2001      	movne	r0, #1
 800c47e:	b002      	add	sp, #8
 800c480:	4770      	bx	lr
 800c482:	4610      	mov	r0, r2
 800c484:	e7fb      	b.n	800c47e <__ascii_mbtowc+0x16>
 800c486:	f06f 0001 	mvn.w	r0, #1
 800c48a:	e7f8      	b.n	800c47e <__ascii_mbtowc+0x16>

0800c48c <_realloc_r>:
 800c48c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c490:	4607      	mov	r7, r0
 800c492:	4614      	mov	r4, r2
 800c494:	460d      	mov	r5, r1
 800c496:	b921      	cbnz	r1, 800c4a2 <_realloc_r+0x16>
 800c498:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c49c:	4611      	mov	r1, r2
 800c49e:	f7ff b96f 	b.w	800b780 <_malloc_r>
 800c4a2:	b92a      	cbnz	r2, 800c4b0 <_realloc_r+0x24>
 800c4a4:	f7ff f8f8 	bl	800b698 <_free_r>
 800c4a8:	4625      	mov	r5, r4
 800c4aa:	4628      	mov	r0, r5
 800c4ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c4b0:	f000 f841 	bl	800c536 <_malloc_usable_size_r>
 800c4b4:	4284      	cmp	r4, r0
 800c4b6:	4606      	mov	r6, r0
 800c4b8:	d802      	bhi.n	800c4c0 <_realloc_r+0x34>
 800c4ba:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c4be:	d8f4      	bhi.n	800c4aa <_realloc_r+0x1e>
 800c4c0:	4621      	mov	r1, r4
 800c4c2:	4638      	mov	r0, r7
 800c4c4:	f7ff f95c 	bl	800b780 <_malloc_r>
 800c4c8:	4680      	mov	r8, r0
 800c4ca:	b908      	cbnz	r0, 800c4d0 <_realloc_r+0x44>
 800c4cc:	4645      	mov	r5, r8
 800c4ce:	e7ec      	b.n	800c4aa <_realloc_r+0x1e>
 800c4d0:	42b4      	cmp	r4, r6
 800c4d2:	4622      	mov	r2, r4
 800c4d4:	4629      	mov	r1, r5
 800c4d6:	bf28      	it	cs
 800c4d8:	4632      	movcs	r2, r6
 800c4da:	f7ff ff85 	bl	800c3e8 <memcpy>
 800c4de:	4629      	mov	r1, r5
 800c4e0:	4638      	mov	r0, r7
 800c4e2:	f7ff f8d9 	bl	800b698 <_free_r>
 800c4e6:	e7f1      	b.n	800c4cc <_realloc_r+0x40>

0800c4e8 <__ascii_wctomb>:
 800c4e8:	4603      	mov	r3, r0
 800c4ea:	4608      	mov	r0, r1
 800c4ec:	b141      	cbz	r1, 800c500 <__ascii_wctomb+0x18>
 800c4ee:	2aff      	cmp	r2, #255	@ 0xff
 800c4f0:	d904      	bls.n	800c4fc <__ascii_wctomb+0x14>
 800c4f2:	228a      	movs	r2, #138	@ 0x8a
 800c4f4:	601a      	str	r2, [r3, #0]
 800c4f6:	f04f 30ff 	mov.w	r0, #4294967295
 800c4fa:	4770      	bx	lr
 800c4fc:	700a      	strb	r2, [r1, #0]
 800c4fe:	2001      	movs	r0, #1
 800c500:	4770      	bx	lr
	...

0800c504 <fiprintf>:
 800c504:	b40e      	push	{r1, r2, r3}
 800c506:	b503      	push	{r0, r1, lr}
 800c508:	4601      	mov	r1, r0
 800c50a:	ab03      	add	r3, sp, #12
 800c50c:	4805      	ldr	r0, [pc, #20]	@ (800c524 <fiprintf+0x20>)
 800c50e:	f853 2b04 	ldr.w	r2, [r3], #4
 800c512:	6800      	ldr	r0, [r0, #0]
 800c514:	9301      	str	r3, [sp, #4]
 800c516:	f000 f83f 	bl	800c598 <_vfiprintf_r>
 800c51a:	b002      	add	sp, #8
 800c51c:	f85d eb04 	ldr.w	lr, [sp], #4
 800c520:	b003      	add	sp, #12
 800c522:	4770      	bx	lr
 800c524:	2000012c 	.word	0x2000012c

0800c528 <abort>:
 800c528:	b508      	push	{r3, lr}
 800c52a:	2006      	movs	r0, #6
 800c52c:	f000 fa08 	bl	800c940 <raise>
 800c530:	2001      	movs	r0, #1
 800c532:	f7f5 ff97 	bl	8002464 <_exit>

0800c536 <_malloc_usable_size_r>:
 800c536:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c53a:	1f18      	subs	r0, r3, #4
 800c53c:	2b00      	cmp	r3, #0
 800c53e:	bfbc      	itt	lt
 800c540:	580b      	ldrlt	r3, [r1, r0]
 800c542:	18c0      	addlt	r0, r0, r3
 800c544:	4770      	bx	lr

0800c546 <__sfputc_r>:
 800c546:	6893      	ldr	r3, [r2, #8]
 800c548:	3b01      	subs	r3, #1
 800c54a:	2b00      	cmp	r3, #0
 800c54c:	b410      	push	{r4}
 800c54e:	6093      	str	r3, [r2, #8]
 800c550:	da08      	bge.n	800c564 <__sfputc_r+0x1e>
 800c552:	6994      	ldr	r4, [r2, #24]
 800c554:	42a3      	cmp	r3, r4
 800c556:	db01      	blt.n	800c55c <__sfputc_r+0x16>
 800c558:	290a      	cmp	r1, #10
 800c55a:	d103      	bne.n	800c564 <__sfputc_r+0x1e>
 800c55c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c560:	f000 b932 	b.w	800c7c8 <__swbuf_r>
 800c564:	6813      	ldr	r3, [r2, #0]
 800c566:	1c58      	adds	r0, r3, #1
 800c568:	6010      	str	r0, [r2, #0]
 800c56a:	7019      	strb	r1, [r3, #0]
 800c56c:	4608      	mov	r0, r1
 800c56e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c572:	4770      	bx	lr

0800c574 <__sfputs_r>:
 800c574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c576:	4606      	mov	r6, r0
 800c578:	460f      	mov	r7, r1
 800c57a:	4614      	mov	r4, r2
 800c57c:	18d5      	adds	r5, r2, r3
 800c57e:	42ac      	cmp	r4, r5
 800c580:	d101      	bne.n	800c586 <__sfputs_r+0x12>
 800c582:	2000      	movs	r0, #0
 800c584:	e007      	b.n	800c596 <__sfputs_r+0x22>
 800c586:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c58a:	463a      	mov	r2, r7
 800c58c:	4630      	mov	r0, r6
 800c58e:	f7ff ffda 	bl	800c546 <__sfputc_r>
 800c592:	1c43      	adds	r3, r0, #1
 800c594:	d1f3      	bne.n	800c57e <__sfputs_r+0xa>
 800c596:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c598 <_vfiprintf_r>:
 800c598:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c59c:	460d      	mov	r5, r1
 800c59e:	b09d      	sub	sp, #116	@ 0x74
 800c5a0:	4614      	mov	r4, r2
 800c5a2:	4698      	mov	r8, r3
 800c5a4:	4606      	mov	r6, r0
 800c5a6:	b118      	cbz	r0, 800c5b0 <_vfiprintf_r+0x18>
 800c5a8:	6a03      	ldr	r3, [r0, #32]
 800c5aa:	b90b      	cbnz	r3, 800c5b0 <_vfiprintf_r+0x18>
 800c5ac:	f7fe f8fe 	bl	800a7ac <__sinit>
 800c5b0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c5b2:	07d9      	lsls	r1, r3, #31
 800c5b4:	d405      	bmi.n	800c5c2 <_vfiprintf_r+0x2a>
 800c5b6:	89ab      	ldrh	r3, [r5, #12]
 800c5b8:	059a      	lsls	r2, r3, #22
 800c5ba:	d402      	bmi.n	800c5c2 <_vfiprintf_r+0x2a>
 800c5bc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c5be:	f7fe fa0e 	bl	800a9de <__retarget_lock_acquire_recursive>
 800c5c2:	89ab      	ldrh	r3, [r5, #12]
 800c5c4:	071b      	lsls	r3, r3, #28
 800c5c6:	d501      	bpl.n	800c5cc <_vfiprintf_r+0x34>
 800c5c8:	692b      	ldr	r3, [r5, #16]
 800c5ca:	b99b      	cbnz	r3, 800c5f4 <_vfiprintf_r+0x5c>
 800c5cc:	4629      	mov	r1, r5
 800c5ce:	4630      	mov	r0, r6
 800c5d0:	f000 f938 	bl	800c844 <__swsetup_r>
 800c5d4:	b170      	cbz	r0, 800c5f4 <_vfiprintf_r+0x5c>
 800c5d6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c5d8:	07dc      	lsls	r4, r3, #31
 800c5da:	d504      	bpl.n	800c5e6 <_vfiprintf_r+0x4e>
 800c5dc:	f04f 30ff 	mov.w	r0, #4294967295
 800c5e0:	b01d      	add	sp, #116	@ 0x74
 800c5e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c5e6:	89ab      	ldrh	r3, [r5, #12]
 800c5e8:	0598      	lsls	r0, r3, #22
 800c5ea:	d4f7      	bmi.n	800c5dc <_vfiprintf_r+0x44>
 800c5ec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c5ee:	f7fe f9f7 	bl	800a9e0 <__retarget_lock_release_recursive>
 800c5f2:	e7f3      	b.n	800c5dc <_vfiprintf_r+0x44>
 800c5f4:	2300      	movs	r3, #0
 800c5f6:	9309      	str	r3, [sp, #36]	@ 0x24
 800c5f8:	2320      	movs	r3, #32
 800c5fa:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c5fe:	f8cd 800c 	str.w	r8, [sp, #12]
 800c602:	2330      	movs	r3, #48	@ 0x30
 800c604:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800c7b4 <_vfiprintf_r+0x21c>
 800c608:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c60c:	f04f 0901 	mov.w	r9, #1
 800c610:	4623      	mov	r3, r4
 800c612:	469a      	mov	sl, r3
 800c614:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c618:	b10a      	cbz	r2, 800c61e <_vfiprintf_r+0x86>
 800c61a:	2a25      	cmp	r2, #37	@ 0x25
 800c61c:	d1f9      	bne.n	800c612 <_vfiprintf_r+0x7a>
 800c61e:	ebba 0b04 	subs.w	fp, sl, r4
 800c622:	d00b      	beq.n	800c63c <_vfiprintf_r+0xa4>
 800c624:	465b      	mov	r3, fp
 800c626:	4622      	mov	r2, r4
 800c628:	4629      	mov	r1, r5
 800c62a:	4630      	mov	r0, r6
 800c62c:	f7ff ffa2 	bl	800c574 <__sfputs_r>
 800c630:	3001      	adds	r0, #1
 800c632:	f000 80a7 	beq.w	800c784 <_vfiprintf_r+0x1ec>
 800c636:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c638:	445a      	add	r2, fp
 800c63a:	9209      	str	r2, [sp, #36]	@ 0x24
 800c63c:	f89a 3000 	ldrb.w	r3, [sl]
 800c640:	2b00      	cmp	r3, #0
 800c642:	f000 809f 	beq.w	800c784 <_vfiprintf_r+0x1ec>
 800c646:	2300      	movs	r3, #0
 800c648:	f04f 32ff 	mov.w	r2, #4294967295
 800c64c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c650:	f10a 0a01 	add.w	sl, sl, #1
 800c654:	9304      	str	r3, [sp, #16]
 800c656:	9307      	str	r3, [sp, #28]
 800c658:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c65c:	931a      	str	r3, [sp, #104]	@ 0x68
 800c65e:	4654      	mov	r4, sl
 800c660:	2205      	movs	r2, #5
 800c662:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c666:	4853      	ldr	r0, [pc, #332]	@ (800c7b4 <_vfiprintf_r+0x21c>)
 800c668:	f7f3 fdc2 	bl	80001f0 <memchr>
 800c66c:	9a04      	ldr	r2, [sp, #16]
 800c66e:	b9d8      	cbnz	r0, 800c6a8 <_vfiprintf_r+0x110>
 800c670:	06d1      	lsls	r1, r2, #27
 800c672:	bf44      	itt	mi
 800c674:	2320      	movmi	r3, #32
 800c676:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c67a:	0713      	lsls	r3, r2, #28
 800c67c:	bf44      	itt	mi
 800c67e:	232b      	movmi	r3, #43	@ 0x2b
 800c680:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c684:	f89a 3000 	ldrb.w	r3, [sl]
 800c688:	2b2a      	cmp	r3, #42	@ 0x2a
 800c68a:	d015      	beq.n	800c6b8 <_vfiprintf_r+0x120>
 800c68c:	9a07      	ldr	r2, [sp, #28]
 800c68e:	4654      	mov	r4, sl
 800c690:	2000      	movs	r0, #0
 800c692:	f04f 0c0a 	mov.w	ip, #10
 800c696:	4621      	mov	r1, r4
 800c698:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c69c:	3b30      	subs	r3, #48	@ 0x30
 800c69e:	2b09      	cmp	r3, #9
 800c6a0:	d94b      	bls.n	800c73a <_vfiprintf_r+0x1a2>
 800c6a2:	b1b0      	cbz	r0, 800c6d2 <_vfiprintf_r+0x13a>
 800c6a4:	9207      	str	r2, [sp, #28]
 800c6a6:	e014      	b.n	800c6d2 <_vfiprintf_r+0x13a>
 800c6a8:	eba0 0308 	sub.w	r3, r0, r8
 800c6ac:	fa09 f303 	lsl.w	r3, r9, r3
 800c6b0:	4313      	orrs	r3, r2
 800c6b2:	9304      	str	r3, [sp, #16]
 800c6b4:	46a2      	mov	sl, r4
 800c6b6:	e7d2      	b.n	800c65e <_vfiprintf_r+0xc6>
 800c6b8:	9b03      	ldr	r3, [sp, #12]
 800c6ba:	1d19      	adds	r1, r3, #4
 800c6bc:	681b      	ldr	r3, [r3, #0]
 800c6be:	9103      	str	r1, [sp, #12]
 800c6c0:	2b00      	cmp	r3, #0
 800c6c2:	bfbb      	ittet	lt
 800c6c4:	425b      	neglt	r3, r3
 800c6c6:	f042 0202 	orrlt.w	r2, r2, #2
 800c6ca:	9307      	strge	r3, [sp, #28]
 800c6cc:	9307      	strlt	r3, [sp, #28]
 800c6ce:	bfb8      	it	lt
 800c6d0:	9204      	strlt	r2, [sp, #16]
 800c6d2:	7823      	ldrb	r3, [r4, #0]
 800c6d4:	2b2e      	cmp	r3, #46	@ 0x2e
 800c6d6:	d10a      	bne.n	800c6ee <_vfiprintf_r+0x156>
 800c6d8:	7863      	ldrb	r3, [r4, #1]
 800c6da:	2b2a      	cmp	r3, #42	@ 0x2a
 800c6dc:	d132      	bne.n	800c744 <_vfiprintf_r+0x1ac>
 800c6de:	9b03      	ldr	r3, [sp, #12]
 800c6e0:	1d1a      	adds	r2, r3, #4
 800c6e2:	681b      	ldr	r3, [r3, #0]
 800c6e4:	9203      	str	r2, [sp, #12]
 800c6e6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c6ea:	3402      	adds	r4, #2
 800c6ec:	9305      	str	r3, [sp, #20]
 800c6ee:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800c7c4 <_vfiprintf_r+0x22c>
 800c6f2:	7821      	ldrb	r1, [r4, #0]
 800c6f4:	2203      	movs	r2, #3
 800c6f6:	4650      	mov	r0, sl
 800c6f8:	f7f3 fd7a 	bl	80001f0 <memchr>
 800c6fc:	b138      	cbz	r0, 800c70e <_vfiprintf_r+0x176>
 800c6fe:	9b04      	ldr	r3, [sp, #16]
 800c700:	eba0 000a 	sub.w	r0, r0, sl
 800c704:	2240      	movs	r2, #64	@ 0x40
 800c706:	4082      	lsls	r2, r0
 800c708:	4313      	orrs	r3, r2
 800c70a:	3401      	adds	r4, #1
 800c70c:	9304      	str	r3, [sp, #16]
 800c70e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c712:	4829      	ldr	r0, [pc, #164]	@ (800c7b8 <_vfiprintf_r+0x220>)
 800c714:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c718:	2206      	movs	r2, #6
 800c71a:	f7f3 fd69 	bl	80001f0 <memchr>
 800c71e:	2800      	cmp	r0, #0
 800c720:	d03f      	beq.n	800c7a2 <_vfiprintf_r+0x20a>
 800c722:	4b26      	ldr	r3, [pc, #152]	@ (800c7bc <_vfiprintf_r+0x224>)
 800c724:	bb1b      	cbnz	r3, 800c76e <_vfiprintf_r+0x1d6>
 800c726:	9b03      	ldr	r3, [sp, #12]
 800c728:	3307      	adds	r3, #7
 800c72a:	f023 0307 	bic.w	r3, r3, #7
 800c72e:	3308      	adds	r3, #8
 800c730:	9303      	str	r3, [sp, #12]
 800c732:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c734:	443b      	add	r3, r7
 800c736:	9309      	str	r3, [sp, #36]	@ 0x24
 800c738:	e76a      	b.n	800c610 <_vfiprintf_r+0x78>
 800c73a:	fb0c 3202 	mla	r2, ip, r2, r3
 800c73e:	460c      	mov	r4, r1
 800c740:	2001      	movs	r0, #1
 800c742:	e7a8      	b.n	800c696 <_vfiprintf_r+0xfe>
 800c744:	2300      	movs	r3, #0
 800c746:	3401      	adds	r4, #1
 800c748:	9305      	str	r3, [sp, #20]
 800c74a:	4619      	mov	r1, r3
 800c74c:	f04f 0c0a 	mov.w	ip, #10
 800c750:	4620      	mov	r0, r4
 800c752:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c756:	3a30      	subs	r2, #48	@ 0x30
 800c758:	2a09      	cmp	r2, #9
 800c75a:	d903      	bls.n	800c764 <_vfiprintf_r+0x1cc>
 800c75c:	2b00      	cmp	r3, #0
 800c75e:	d0c6      	beq.n	800c6ee <_vfiprintf_r+0x156>
 800c760:	9105      	str	r1, [sp, #20]
 800c762:	e7c4      	b.n	800c6ee <_vfiprintf_r+0x156>
 800c764:	fb0c 2101 	mla	r1, ip, r1, r2
 800c768:	4604      	mov	r4, r0
 800c76a:	2301      	movs	r3, #1
 800c76c:	e7f0      	b.n	800c750 <_vfiprintf_r+0x1b8>
 800c76e:	ab03      	add	r3, sp, #12
 800c770:	9300      	str	r3, [sp, #0]
 800c772:	462a      	mov	r2, r5
 800c774:	4b12      	ldr	r3, [pc, #72]	@ (800c7c0 <_vfiprintf_r+0x228>)
 800c776:	a904      	add	r1, sp, #16
 800c778:	4630      	mov	r0, r6
 800c77a:	f7fd fbd5 	bl	8009f28 <_printf_float>
 800c77e:	4607      	mov	r7, r0
 800c780:	1c78      	adds	r0, r7, #1
 800c782:	d1d6      	bne.n	800c732 <_vfiprintf_r+0x19a>
 800c784:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c786:	07d9      	lsls	r1, r3, #31
 800c788:	d405      	bmi.n	800c796 <_vfiprintf_r+0x1fe>
 800c78a:	89ab      	ldrh	r3, [r5, #12]
 800c78c:	059a      	lsls	r2, r3, #22
 800c78e:	d402      	bmi.n	800c796 <_vfiprintf_r+0x1fe>
 800c790:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c792:	f7fe f925 	bl	800a9e0 <__retarget_lock_release_recursive>
 800c796:	89ab      	ldrh	r3, [r5, #12]
 800c798:	065b      	lsls	r3, r3, #25
 800c79a:	f53f af1f 	bmi.w	800c5dc <_vfiprintf_r+0x44>
 800c79e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c7a0:	e71e      	b.n	800c5e0 <_vfiprintf_r+0x48>
 800c7a2:	ab03      	add	r3, sp, #12
 800c7a4:	9300      	str	r3, [sp, #0]
 800c7a6:	462a      	mov	r2, r5
 800c7a8:	4b05      	ldr	r3, [pc, #20]	@ (800c7c0 <_vfiprintf_r+0x228>)
 800c7aa:	a904      	add	r1, sp, #16
 800c7ac:	4630      	mov	r0, r6
 800c7ae:	f7fd fe53 	bl	800a458 <_printf_i>
 800c7b2:	e7e4      	b.n	800c77e <_vfiprintf_r+0x1e6>
 800c7b4:	0800d666 	.word	0x0800d666
 800c7b8:	0800d670 	.word	0x0800d670
 800c7bc:	08009f29 	.word	0x08009f29
 800c7c0:	0800c575 	.word	0x0800c575
 800c7c4:	0800d66c 	.word	0x0800d66c

0800c7c8 <__swbuf_r>:
 800c7c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c7ca:	460e      	mov	r6, r1
 800c7cc:	4614      	mov	r4, r2
 800c7ce:	4605      	mov	r5, r0
 800c7d0:	b118      	cbz	r0, 800c7da <__swbuf_r+0x12>
 800c7d2:	6a03      	ldr	r3, [r0, #32]
 800c7d4:	b90b      	cbnz	r3, 800c7da <__swbuf_r+0x12>
 800c7d6:	f7fd ffe9 	bl	800a7ac <__sinit>
 800c7da:	69a3      	ldr	r3, [r4, #24]
 800c7dc:	60a3      	str	r3, [r4, #8]
 800c7de:	89a3      	ldrh	r3, [r4, #12]
 800c7e0:	071a      	lsls	r2, r3, #28
 800c7e2:	d501      	bpl.n	800c7e8 <__swbuf_r+0x20>
 800c7e4:	6923      	ldr	r3, [r4, #16]
 800c7e6:	b943      	cbnz	r3, 800c7fa <__swbuf_r+0x32>
 800c7e8:	4621      	mov	r1, r4
 800c7ea:	4628      	mov	r0, r5
 800c7ec:	f000 f82a 	bl	800c844 <__swsetup_r>
 800c7f0:	b118      	cbz	r0, 800c7fa <__swbuf_r+0x32>
 800c7f2:	f04f 37ff 	mov.w	r7, #4294967295
 800c7f6:	4638      	mov	r0, r7
 800c7f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c7fa:	6823      	ldr	r3, [r4, #0]
 800c7fc:	6922      	ldr	r2, [r4, #16]
 800c7fe:	1a98      	subs	r0, r3, r2
 800c800:	6963      	ldr	r3, [r4, #20]
 800c802:	b2f6      	uxtb	r6, r6
 800c804:	4283      	cmp	r3, r0
 800c806:	4637      	mov	r7, r6
 800c808:	dc05      	bgt.n	800c816 <__swbuf_r+0x4e>
 800c80a:	4621      	mov	r1, r4
 800c80c:	4628      	mov	r0, r5
 800c80e:	f7ff fd99 	bl	800c344 <_fflush_r>
 800c812:	2800      	cmp	r0, #0
 800c814:	d1ed      	bne.n	800c7f2 <__swbuf_r+0x2a>
 800c816:	68a3      	ldr	r3, [r4, #8]
 800c818:	3b01      	subs	r3, #1
 800c81a:	60a3      	str	r3, [r4, #8]
 800c81c:	6823      	ldr	r3, [r4, #0]
 800c81e:	1c5a      	adds	r2, r3, #1
 800c820:	6022      	str	r2, [r4, #0]
 800c822:	701e      	strb	r6, [r3, #0]
 800c824:	6962      	ldr	r2, [r4, #20]
 800c826:	1c43      	adds	r3, r0, #1
 800c828:	429a      	cmp	r2, r3
 800c82a:	d004      	beq.n	800c836 <__swbuf_r+0x6e>
 800c82c:	89a3      	ldrh	r3, [r4, #12]
 800c82e:	07db      	lsls	r3, r3, #31
 800c830:	d5e1      	bpl.n	800c7f6 <__swbuf_r+0x2e>
 800c832:	2e0a      	cmp	r6, #10
 800c834:	d1df      	bne.n	800c7f6 <__swbuf_r+0x2e>
 800c836:	4621      	mov	r1, r4
 800c838:	4628      	mov	r0, r5
 800c83a:	f7ff fd83 	bl	800c344 <_fflush_r>
 800c83e:	2800      	cmp	r0, #0
 800c840:	d0d9      	beq.n	800c7f6 <__swbuf_r+0x2e>
 800c842:	e7d6      	b.n	800c7f2 <__swbuf_r+0x2a>

0800c844 <__swsetup_r>:
 800c844:	b538      	push	{r3, r4, r5, lr}
 800c846:	4b29      	ldr	r3, [pc, #164]	@ (800c8ec <__swsetup_r+0xa8>)
 800c848:	4605      	mov	r5, r0
 800c84a:	6818      	ldr	r0, [r3, #0]
 800c84c:	460c      	mov	r4, r1
 800c84e:	b118      	cbz	r0, 800c858 <__swsetup_r+0x14>
 800c850:	6a03      	ldr	r3, [r0, #32]
 800c852:	b90b      	cbnz	r3, 800c858 <__swsetup_r+0x14>
 800c854:	f7fd ffaa 	bl	800a7ac <__sinit>
 800c858:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c85c:	0719      	lsls	r1, r3, #28
 800c85e:	d422      	bmi.n	800c8a6 <__swsetup_r+0x62>
 800c860:	06da      	lsls	r2, r3, #27
 800c862:	d407      	bmi.n	800c874 <__swsetup_r+0x30>
 800c864:	2209      	movs	r2, #9
 800c866:	602a      	str	r2, [r5, #0]
 800c868:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c86c:	81a3      	strh	r3, [r4, #12]
 800c86e:	f04f 30ff 	mov.w	r0, #4294967295
 800c872:	e033      	b.n	800c8dc <__swsetup_r+0x98>
 800c874:	0758      	lsls	r0, r3, #29
 800c876:	d512      	bpl.n	800c89e <__swsetup_r+0x5a>
 800c878:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c87a:	b141      	cbz	r1, 800c88e <__swsetup_r+0x4a>
 800c87c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c880:	4299      	cmp	r1, r3
 800c882:	d002      	beq.n	800c88a <__swsetup_r+0x46>
 800c884:	4628      	mov	r0, r5
 800c886:	f7fe ff07 	bl	800b698 <_free_r>
 800c88a:	2300      	movs	r3, #0
 800c88c:	6363      	str	r3, [r4, #52]	@ 0x34
 800c88e:	89a3      	ldrh	r3, [r4, #12]
 800c890:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800c894:	81a3      	strh	r3, [r4, #12]
 800c896:	2300      	movs	r3, #0
 800c898:	6063      	str	r3, [r4, #4]
 800c89a:	6923      	ldr	r3, [r4, #16]
 800c89c:	6023      	str	r3, [r4, #0]
 800c89e:	89a3      	ldrh	r3, [r4, #12]
 800c8a0:	f043 0308 	orr.w	r3, r3, #8
 800c8a4:	81a3      	strh	r3, [r4, #12]
 800c8a6:	6923      	ldr	r3, [r4, #16]
 800c8a8:	b94b      	cbnz	r3, 800c8be <__swsetup_r+0x7a>
 800c8aa:	89a3      	ldrh	r3, [r4, #12]
 800c8ac:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800c8b0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c8b4:	d003      	beq.n	800c8be <__swsetup_r+0x7a>
 800c8b6:	4621      	mov	r1, r4
 800c8b8:	4628      	mov	r0, r5
 800c8ba:	f000 f883 	bl	800c9c4 <__smakebuf_r>
 800c8be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c8c2:	f013 0201 	ands.w	r2, r3, #1
 800c8c6:	d00a      	beq.n	800c8de <__swsetup_r+0x9a>
 800c8c8:	2200      	movs	r2, #0
 800c8ca:	60a2      	str	r2, [r4, #8]
 800c8cc:	6962      	ldr	r2, [r4, #20]
 800c8ce:	4252      	negs	r2, r2
 800c8d0:	61a2      	str	r2, [r4, #24]
 800c8d2:	6922      	ldr	r2, [r4, #16]
 800c8d4:	b942      	cbnz	r2, 800c8e8 <__swsetup_r+0xa4>
 800c8d6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800c8da:	d1c5      	bne.n	800c868 <__swsetup_r+0x24>
 800c8dc:	bd38      	pop	{r3, r4, r5, pc}
 800c8de:	0799      	lsls	r1, r3, #30
 800c8e0:	bf58      	it	pl
 800c8e2:	6962      	ldrpl	r2, [r4, #20]
 800c8e4:	60a2      	str	r2, [r4, #8]
 800c8e6:	e7f4      	b.n	800c8d2 <__swsetup_r+0x8e>
 800c8e8:	2000      	movs	r0, #0
 800c8ea:	e7f7      	b.n	800c8dc <__swsetup_r+0x98>
 800c8ec:	2000012c 	.word	0x2000012c

0800c8f0 <_raise_r>:
 800c8f0:	291f      	cmp	r1, #31
 800c8f2:	b538      	push	{r3, r4, r5, lr}
 800c8f4:	4605      	mov	r5, r0
 800c8f6:	460c      	mov	r4, r1
 800c8f8:	d904      	bls.n	800c904 <_raise_r+0x14>
 800c8fa:	2316      	movs	r3, #22
 800c8fc:	6003      	str	r3, [r0, #0]
 800c8fe:	f04f 30ff 	mov.w	r0, #4294967295
 800c902:	bd38      	pop	{r3, r4, r5, pc}
 800c904:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800c906:	b112      	cbz	r2, 800c90e <_raise_r+0x1e>
 800c908:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c90c:	b94b      	cbnz	r3, 800c922 <_raise_r+0x32>
 800c90e:	4628      	mov	r0, r5
 800c910:	f000 f830 	bl	800c974 <_getpid_r>
 800c914:	4622      	mov	r2, r4
 800c916:	4601      	mov	r1, r0
 800c918:	4628      	mov	r0, r5
 800c91a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c91e:	f000 b817 	b.w	800c950 <_kill_r>
 800c922:	2b01      	cmp	r3, #1
 800c924:	d00a      	beq.n	800c93c <_raise_r+0x4c>
 800c926:	1c59      	adds	r1, r3, #1
 800c928:	d103      	bne.n	800c932 <_raise_r+0x42>
 800c92a:	2316      	movs	r3, #22
 800c92c:	6003      	str	r3, [r0, #0]
 800c92e:	2001      	movs	r0, #1
 800c930:	e7e7      	b.n	800c902 <_raise_r+0x12>
 800c932:	2100      	movs	r1, #0
 800c934:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800c938:	4620      	mov	r0, r4
 800c93a:	4798      	blx	r3
 800c93c:	2000      	movs	r0, #0
 800c93e:	e7e0      	b.n	800c902 <_raise_r+0x12>

0800c940 <raise>:
 800c940:	4b02      	ldr	r3, [pc, #8]	@ (800c94c <raise+0xc>)
 800c942:	4601      	mov	r1, r0
 800c944:	6818      	ldr	r0, [r3, #0]
 800c946:	f7ff bfd3 	b.w	800c8f0 <_raise_r>
 800c94a:	bf00      	nop
 800c94c:	2000012c 	.word	0x2000012c

0800c950 <_kill_r>:
 800c950:	b538      	push	{r3, r4, r5, lr}
 800c952:	4d07      	ldr	r5, [pc, #28]	@ (800c970 <_kill_r+0x20>)
 800c954:	2300      	movs	r3, #0
 800c956:	4604      	mov	r4, r0
 800c958:	4608      	mov	r0, r1
 800c95a:	4611      	mov	r1, r2
 800c95c:	602b      	str	r3, [r5, #0]
 800c95e:	f7f5 fd71 	bl	8002444 <_kill>
 800c962:	1c43      	adds	r3, r0, #1
 800c964:	d102      	bne.n	800c96c <_kill_r+0x1c>
 800c966:	682b      	ldr	r3, [r5, #0]
 800c968:	b103      	cbz	r3, 800c96c <_kill_r+0x1c>
 800c96a:	6023      	str	r3, [r4, #0]
 800c96c:	bd38      	pop	{r3, r4, r5, pc}
 800c96e:	bf00      	nop
 800c970:	20000ff0 	.word	0x20000ff0

0800c974 <_getpid_r>:
 800c974:	f7f5 bd5e 	b.w	8002434 <_getpid>

0800c978 <__swhatbuf_r>:
 800c978:	b570      	push	{r4, r5, r6, lr}
 800c97a:	460c      	mov	r4, r1
 800c97c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c980:	2900      	cmp	r1, #0
 800c982:	b096      	sub	sp, #88	@ 0x58
 800c984:	4615      	mov	r5, r2
 800c986:	461e      	mov	r6, r3
 800c988:	da0d      	bge.n	800c9a6 <__swhatbuf_r+0x2e>
 800c98a:	89a3      	ldrh	r3, [r4, #12]
 800c98c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800c990:	f04f 0100 	mov.w	r1, #0
 800c994:	bf14      	ite	ne
 800c996:	2340      	movne	r3, #64	@ 0x40
 800c998:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800c99c:	2000      	movs	r0, #0
 800c99e:	6031      	str	r1, [r6, #0]
 800c9a0:	602b      	str	r3, [r5, #0]
 800c9a2:	b016      	add	sp, #88	@ 0x58
 800c9a4:	bd70      	pop	{r4, r5, r6, pc}
 800c9a6:	466a      	mov	r2, sp
 800c9a8:	f000 f848 	bl	800ca3c <_fstat_r>
 800c9ac:	2800      	cmp	r0, #0
 800c9ae:	dbec      	blt.n	800c98a <__swhatbuf_r+0x12>
 800c9b0:	9901      	ldr	r1, [sp, #4]
 800c9b2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800c9b6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800c9ba:	4259      	negs	r1, r3
 800c9bc:	4159      	adcs	r1, r3
 800c9be:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c9c2:	e7eb      	b.n	800c99c <__swhatbuf_r+0x24>

0800c9c4 <__smakebuf_r>:
 800c9c4:	898b      	ldrh	r3, [r1, #12]
 800c9c6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c9c8:	079d      	lsls	r5, r3, #30
 800c9ca:	4606      	mov	r6, r0
 800c9cc:	460c      	mov	r4, r1
 800c9ce:	d507      	bpl.n	800c9e0 <__smakebuf_r+0x1c>
 800c9d0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800c9d4:	6023      	str	r3, [r4, #0]
 800c9d6:	6123      	str	r3, [r4, #16]
 800c9d8:	2301      	movs	r3, #1
 800c9da:	6163      	str	r3, [r4, #20]
 800c9dc:	b003      	add	sp, #12
 800c9de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c9e0:	ab01      	add	r3, sp, #4
 800c9e2:	466a      	mov	r2, sp
 800c9e4:	f7ff ffc8 	bl	800c978 <__swhatbuf_r>
 800c9e8:	9f00      	ldr	r7, [sp, #0]
 800c9ea:	4605      	mov	r5, r0
 800c9ec:	4639      	mov	r1, r7
 800c9ee:	4630      	mov	r0, r6
 800c9f0:	f7fe fec6 	bl	800b780 <_malloc_r>
 800c9f4:	b948      	cbnz	r0, 800ca0a <__smakebuf_r+0x46>
 800c9f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c9fa:	059a      	lsls	r2, r3, #22
 800c9fc:	d4ee      	bmi.n	800c9dc <__smakebuf_r+0x18>
 800c9fe:	f023 0303 	bic.w	r3, r3, #3
 800ca02:	f043 0302 	orr.w	r3, r3, #2
 800ca06:	81a3      	strh	r3, [r4, #12]
 800ca08:	e7e2      	b.n	800c9d0 <__smakebuf_r+0xc>
 800ca0a:	89a3      	ldrh	r3, [r4, #12]
 800ca0c:	6020      	str	r0, [r4, #0]
 800ca0e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ca12:	81a3      	strh	r3, [r4, #12]
 800ca14:	9b01      	ldr	r3, [sp, #4]
 800ca16:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800ca1a:	b15b      	cbz	r3, 800ca34 <__smakebuf_r+0x70>
 800ca1c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ca20:	4630      	mov	r0, r6
 800ca22:	f000 f81d 	bl	800ca60 <_isatty_r>
 800ca26:	b128      	cbz	r0, 800ca34 <__smakebuf_r+0x70>
 800ca28:	89a3      	ldrh	r3, [r4, #12]
 800ca2a:	f023 0303 	bic.w	r3, r3, #3
 800ca2e:	f043 0301 	orr.w	r3, r3, #1
 800ca32:	81a3      	strh	r3, [r4, #12]
 800ca34:	89a3      	ldrh	r3, [r4, #12]
 800ca36:	431d      	orrs	r5, r3
 800ca38:	81a5      	strh	r5, [r4, #12]
 800ca3a:	e7cf      	b.n	800c9dc <__smakebuf_r+0x18>

0800ca3c <_fstat_r>:
 800ca3c:	b538      	push	{r3, r4, r5, lr}
 800ca3e:	4d07      	ldr	r5, [pc, #28]	@ (800ca5c <_fstat_r+0x20>)
 800ca40:	2300      	movs	r3, #0
 800ca42:	4604      	mov	r4, r0
 800ca44:	4608      	mov	r0, r1
 800ca46:	4611      	mov	r1, r2
 800ca48:	602b      	str	r3, [r5, #0]
 800ca4a:	f7f5 fd5b 	bl	8002504 <_fstat>
 800ca4e:	1c43      	adds	r3, r0, #1
 800ca50:	d102      	bne.n	800ca58 <_fstat_r+0x1c>
 800ca52:	682b      	ldr	r3, [r5, #0]
 800ca54:	b103      	cbz	r3, 800ca58 <_fstat_r+0x1c>
 800ca56:	6023      	str	r3, [r4, #0]
 800ca58:	bd38      	pop	{r3, r4, r5, pc}
 800ca5a:	bf00      	nop
 800ca5c:	20000ff0 	.word	0x20000ff0

0800ca60 <_isatty_r>:
 800ca60:	b538      	push	{r3, r4, r5, lr}
 800ca62:	4d06      	ldr	r5, [pc, #24]	@ (800ca7c <_isatty_r+0x1c>)
 800ca64:	2300      	movs	r3, #0
 800ca66:	4604      	mov	r4, r0
 800ca68:	4608      	mov	r0, r1
 800ca6a:	602b      	str	r3, [r5, #0]
 800ca6c:	f7f5 fd5a 	bl	8002524 <_isatty>
 800ca70:	1c43      	adds	r3, r0, #1
 800ca72:	d102      	bne.n	800ca7a <_isatty_r+0x1a>
 800ca74:	682b      	ldr	r3, [r5, #0]
 800ca76:	b103      	cbz	r3, 800ca7a <_isatty_r+0x1a>
 800ca78:	6023      	str	r3, [r4, #0]
 800ca7a:	bd38      	pop	{r3, r4, r5, pc}
 800ca7c:	20000ff0 	.word	0x20000ff0

0800ca80 <atan2>:
 800ca80:	f000 baa6 	b.w	800cfd0 <__ieee754_atan2>

0800ca84 <sqrt>:
 800ca84:	b538      	push	{r3, r4, r5, lr}
 800ca86:	ed2d 8b02 	vpush	{d8}
 800ca8a:	ec55 4b10 	vmov	r4, r5, d0
 800ca8e:	f000 f9c7 	bl	800ce20 <__ieee754_sqrt>
 800ca92:	4622      	mov	r2, r4
 800ca94:	462b      	mov	r3, r5
 800ca96:	4620      	mov	r0, r4
 800ca98:	4629      	mov	r1, r5
 800ca9a:	eeb0 8a40 	vmov.f32	s16, s0
 800ca9e:	eef0 8a60 	vmov.f32	s17, s1
 800caa2:	f7f4 f853 	bl	8000b4c <__aeabi_dcmpun>
 800caa6:	b990      	cbnz	r0, 800cace <sqrt+0x4a>
 800caa8:	2200      	movs	r2, #0
 800caaa:	2300      	movs	r3, #0
 800caac:	4620      	mov	r0, r4
 800caae:	4629      	mov	r1, r5
 800cab0:	f7f4 f824 	bl	8000afc <__aeabi_dcmplt>
 800cab4:	b158      	cbz	r0, 800cace <sqrt+0x4a>
 800cab6:	f7fd ff67 	bl	800a988 <__errno>
 800caba:	2321      	movs	r3, #33	@ 0x21
 800cabc:	6003      	str	r3, [r0, #0]
 800cabe:	2200      	movs	r2, #0
 800cac0:	2300      	movs	r3, #0
 800cac2:	4610      	mov	r0, r2
 800cac4:	4619      	mov	r1, r3
 800cac6:	f7f3 fed1 	bl	800086c <__aeabi_ddiv>
 800caca:	ec41 0b18 	vmov	d8, r0, r1
 800cace:	eeb0 0a48 	vmov.f32	s0, s16
 800cad2:	eef0 0a68 	vmov.f32	s1, s17
 800cad6:	ecbd 8b02 	vpop	{d8}
 800cada:	bd38      	pop	{r3, r4, r5, pc}
 800cadc:	0000      	movs	r0, r0
	...

0800cae0 <atan>:
 800cae0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cae4:	ec55 4b10 	vmov	r4, r5, d0
 800cae8:	4bbf      	ldr	r3, [pc, #764]	@ (800cde8 <atan+0x308>)
 800caea:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 800caee:	429e      	cmp	r6, r3
 800caf0:	46ab      	mov	fp, r5
 800caf2:	d918      	bls.n	800cb26 <atan+0x46>
 800caf4:	4bbd      	ldr	r3, [pc, #756]	@ (800cdec <atan+0x30c>)
 800caf6:	429e      	cmp	r6, r3
 800caf8:	d801      	bhi.n	800cafe <atan+0x1e>
 800cafa:	d109      	bne.n	800cb10 <atan+0x30>
 800cafc:	b144      	cbz	r4, 800cb10 <atan+0x30>
 800cafe:	4622      	mov	r2, r4
 800cb00:	462b      	mov	r3, r5
 800cb02:	4620      	mov	r0, r4
 800cb04:	4629      	mov	r1, r5
 800cb06:	f7f3 fbd1 	bl	80002ac <__adddf3>
 800cb0a:	4604      	mov	r4, r0
 800cb0c:	460d      	mov	r5, r1
 800cb0e:	e006      	b.n	800cb1e <atan+0x3e>
 800cb10:	f1bb 0f00 	cmp.w	fp, #0
 800cb14:	f340 812b 	ble.w	800cd6e <atan+0x28e>
 800cb18:	a597      	add	r5, pc, #604	@ (adr r5, 800cd78 <atan+0x298>)
 800cb1a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800cb1e:	ec45 4b10 	vmov	d0, r4, r5
 800cb22:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb26:	4bb2      	ldr	r3, [pc, #712]	@ (800cdf0 <atan+0x310>)
 800cb28:	429e      	cmp	r6, r3
 800cb2a:	d813      	bhi.n	800cb54 <atan+0x74>
 800cb2c:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 800cb30:	429e      	cmp	r6, r3
 800cb32:	d80c      	bhi.n	800cb4e <atan+0x6e>
 800cb34:	a392      	add	r3, pc, #584	@ (adr r3, 800cd80 <atan+0x2a0>)
 800cb36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb3a:	4620      	mov	r0, r4
 800cb3c:	4629      	mov	r1, r5
 800cb3e:	f7f3 fbb5 	bl	80002ac <__adddf3>
 800cb42:	4bac      	ldr	r3, [pc, #688]	@ (800cdf4 <atan+0x314>)
 800cb44:	2200      	movs	r2, #0
 800cb46:	f7f3 fff7 	bl	8000b38 <__aeabi_dcmpgt>
 800cb4a:	2800      	cmp	r0, #0
 800cb4c:	d1e7      	bne.n	800cb1e <atan+0x3e>
 800cb4e:	f04f 3aff 	mov.w	sl, #4294967295
 800cb52:	e029      	b.n	800cba8 <atan+0xc8>
 800cb54:	f000 f95c 	bl	800ce10 <fabs>
 800cb58:	4ba7      	ldr	r3, [pc, #668]	@ (800cdf8 <atan+0x318>)
 800cb5a:	429e      	cmp	r6, r3
 800cb5c:	ec55 4b10 	vmov	r4, r5, d0
 800cb60:	f200 80bc 	bhi.w	800ccdc <atan+0x1fc>
 800cb64:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 800cb68:	429e      	cmp	r6, r3
 800cb6a:	f200 809e 	bhi.w	800ccaa <atan+0x1ca>
 800cb6e:	4622      	mov	r2, r4
 800cb70:	462b      	mov	r3, r5
 800cb72:	4620      	mov	r0, r4
 800cb74:	4629      	mov	r1, r5
 800cb76:	f7f3 fb99 	bl	80002ac <__adddf3>
 800cb7a:	4b9e      	ldr	r3, [pc, #632]	@ (800cdf4 <atan+0x314>)
 800cb7c:	2200      	movs	r2, #0
 800cb7e:	f7f3 fb93 	bl	80002a8 <__aeabi_dsub>
 800cb82:	2200      	movs	r2, #0
 800cb84:	4606      	mov	r6, r0
 800cb86:	460f      	mov	r7, r1
 800cb88:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800cb8c:	4620      	mov	r0, r4
 800cb8e:	4629      	mov	r1, r5
 800cb90:	f7f3 fb8c 	bl	80002ac <__adddf3>
 800cb94:	4602      	mov	r2, r0
 800cb96:	460b      	mov	r3, r1
 800cb98:	4630      	mov	r0, r6
 800cb9a:	4639      	mov	r1, r7
 800cb9c:	f7f3 fe66 	bl	800086c <__aeabi_ddiv>
 800cba0:	f04f 0a00 	mov.w	sl, #0
 800cba4:	4604      	mov	r4, r0
 800cba6:	460d      	mov	r5, r1
 800cba8:	4622      	mov	r2, r4
 800cbaa:	462b      	mov	r3, r5
 800cbac:	4620      	mov	r0, r4
 800cbae:	4629      	mov	r1, r5
 800cbb0:	f7f3 fd32 	bl	8000618 <__aeabi_dmul>
 800cbb4:	4602      	mov	r2, r0
 800cbb6:	460b      	mov	r3, r1
 800cbb8:	4680      	mov	r8, r0
 800cbba:	4689      	mov	r9, r1
 800cbbc:	f7f3 fd2c 	bl	8000618 <__aeabi_dmul>
 800cbc0:	a371      	add	r3, pc, #452	@ (adr r3, 800cd88 <atan+0x2a8>)
 800cbc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbc6:	4606      	mov	r6, r0
 800cbc8:	460f      	mov	r7, r1
 800cbca:	f7f3 fd25 	bl	8000618 <__aeabi_dmul>
 800cbce:	a370      	add	r3, pc, #448	@ (adr r3, 800cd90 <atan+0x2b0>)
 800cbd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbd4:	f7f3 fb6a 	bl	80002ac <__adddf3>
 800cbd8:	4632      	mov	r2, r6
 800cbda:	463b      	mov	r3, r7
 800cbdc:	f7f3 fd1c 	bl	8000618 <__aeabi_dmul>
 800cbe0:	a36d      	add	r3, pc, #436	@ (adr r3, 800cd98 <atan+0x2b8>)
 800cbe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbe6:	f7f3 fb61 	bl	80002ac <__adddf3>
 800cbea:	4632      	mov	r2, r6
 800cbec:	463b      	mov	r3, r7
 800cbee:	f7f3 fd13 	bl	8000618 <__aeabi_dmul>
 800cbf2:	a36b      	add	r3, pc, #428	@ (adr r3, 800cda0 <atan+0x2c0>)
 800cbf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbf8:	f7f3 fb58 	bl	80002ac <__adddf3>
 800cbfc:	4632      	mov	r2, r6
 800cbfe:	463b      	mov	r3, r7
 800cc00:	f7f3 fd0a 	bl	8000618 <__aeabi_dmul>
 800cc04:	a368      	add	r3, pc, #416	@ (adr r3, 800cda8 <atan+0x2c8>)
 800cc06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc0a:	f7f3 fb4f 	bl	80002ac <__adddf3>
 800cc0e:	4632      	mov	r2, r6
 800cc10:	463b      	mov	r3, r7
 800cc12:	f7f3 fd01 	bl	8000618 <__aeabi_dmul>
 800cc16:	a366      	add	r3, pc, #408	@ (adr r3, 800cdb0 <atan+0x2d0>)
 800cc18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc1c:	f7f3 fb46 	bl	80002ac <__adddf3>
 800cc20:	4642      	mov	r2, r8
 800cc22:	464b      	mov	r3, r9
 800cc24:	f7f3 fcf8 	bl	8000618 <__aeabi_dmul>
 800cc28:	a363      	add	r3, pc, #396	@ (adr r3, 800cdb8 <atan+0x2d8>)
 800cc2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc2e:	4680      	mov	r8, r0
 800cc30:	4689      	mov	r9, r1
 800cc32:	4630      	mov	r0, r6
 800cc34:	4639      	mov	r1, r7
 800cc36:	f7f3 fcef 	bl	8000618 <__aeabi_dmul>
 800cc3a:	a361      	add	r3, pc, #388	@ (adr r3, 800cdc0 <atan+0x2e0>)
 800cc3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc40:	f7f3 fb32 	bl	80002a8 <__aeabi_dsub>
 800cc44:	4632      	mov	r2, r6
 800cc46:	463b      	mov	r3, r7
 800cc48:	f7f3 fce6 	bl	8000618 <__aeabi_dmul>
 800cc4c:	a35e      	add	r3, pc, #376	@ (adr r3, 800cdc8 <atan+0x2e8>)
 800cc4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc52:	f7f3 fb29 	bl	80002a8 <__aeabi_dsub>
 800cc56:	4632      	mov	r2, r6
 800cc58:	463b      	mov	r3, r7
 800cc5a:	f7f3 fcdd 	bl	8000618 <__aeabi_dmul>
 800cc5e:	a35c      	add	r3, pc, #368	@ (adr r3, 800cdd0 <atan+0x2f0>)
 800cc60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc64:	f7f3 fb20 	bl	80002a8 <__aeabi_dsub>
 800cc68:	4632      	mov	r2, r6
 800cc6a:	463b      	mov	r3, r7
 800cc6c:	f7f3 fcd4 	bl	8000618 <__aeabi_dmul>
 800cc70:	a359      	add	r3, pc, #356	@ (adr r3, 800cdd8 <atan+0x2f8>)
 800cc72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc76:	f7f3 fb17 	bl	80002a8 <__aeabi_dsub>
 800cc7a:	4632      	mov	r2, r6
 800cc7c:	463b      	mov	r3, r7
 800cc7e:	f7f3 fccb 	bl	8000618 <__aeabi_dmul>
 800cc82:	4602      	mov	r2, r0
 800cc84:	460b      	mov	r3, r1
 800cc86:	4640      	mov	r0, r8
 800cc88:	4649      	mov	r1, r9
 800cc8a:	f7f3 fb0f 	bl	80002ac <__adddf3>
 800cc8e:	4622      	mov	r2, r4
 800cc90:	462b      	mov	r3, r5
 800cc92:	f7f3 fcc1 	bl	8000618 <__aeabi_dmul>
 800cc96:	f1ba 3fff 	cmp.w	sl, #4294967295
 800cc9a:	4602      	mov	r2, r0
 800cc9c:	460b      	mov	r3, r1
 800cc9e:	d148      	bne.n	800cd32 <atan+0x252>
 800cca0:	4620      	mov	r0, r4
 800cca2:	4629      	mov	r1, r5
 800cca4:	f7f3 fb00 	bl	80002a8 <__aeabi_dsub>
 800cca8:	e72f      	b.n	800cb0a <atan+0x2a>
 800ccaa:	4b52      	ldr	r3, [pc, #328]	@ (800cdf4 <atan+0x314>)
 800ccac:	2200      	movs	r2, #0
 800ccae:	4620      	mov	r0, r4
 800ccb0:	4629      	mov	r1, r5
 800ccb2:	f7f3 faf9 	bl	80002a8 <__aeabi_dsub>
 800ccb6:	4b4f      	ldr	r3, [pc, #316]	@ (800cdf4 <atan+0x314>)
 800ccb8:	4606      	mov	r6, r0
 800ccba:	460f      	mov	r7, r1
 800ccbc:	2200      	movs	r2, #0
 800ccbe:	4620      	mov	r0, r4
 800ccc0:	4629      	mov	r1, r5
 800ccc2:	f7f3 faf3 	bl	80002ac <__adddf3>
 800ccc6:	4602      	mov	r2, r0
 800ccc8:	460b      	mov	r3, r1
 800ccca:	4630      	mov	r0, r6
 800cccc:	4639      	mov	r1, r7
 800ccce:	f7f3 fdcd 	bl	800086c <__aeabi_ddiv>
 800ccd2:	f04f 0a01 	mov.w	sl, #1
 800ccd6:	4604      	mov	r4, r0
 800ccd8:	460d      	mov	r5, r1
 800ccda:	e765      	b.n	800cba8 <atan+0xc8>
 800ccdc:	4b47      	ldr	r3, [pc, #284]	@ (800cdfc <atan+0x31c>)
 800ccde:	429e      	cmp	r6, r3
 800cce0:	d21c      	bcs.n	800cd1c <atan+0x23c>
 800cce2:	4b47      	ldr	r3, [pc, #284]	@ (800ce00 <atan+0x320>)
 800cce4:	2200      	movs	r2, #0
 800cce6:	4620      	mov	r0, r4
 800cce8:	4629      	mov	r1, r5
 800ccea:	f7f3 fadd 	bl	80002a8 <__aeabi_dsub>
 800ccee:	4b44      	ldr	r3, [pc, #272]	@ (800ce00 <atan+0x320>)
 800ccf0:	4606      	mov	r6, r0
 800ccf2:	460f      	mov	r7, r1
 800ccf4:	2200      	movs	r2, #0
 800ccf6:	4620      	mov	r0, r4
 800ccf8:	4629      	mov	r1, r5
 800ccfa:	f7f3 fc8d 	bl	8000618 <__aeabi_dmul>
 800ccfe:	4b3d      	ldr	r3, [pc, #244]	@ (800cdf4 <atan+0x314>)
 800cd00:	2200      	movs	r2, #0
 800cd02:	f7f3 fad3 	bl	80002ac <__adddf3>
 800cd06:	4602      	mov	r2, r0
 800cd08:	460b      	mov	r3, r1
 800cd0a:	4630      	mov	r0, r6
 800cd0c:	4639      	mov	r1, r7
 800cd0e:	f7f3 fdad 	bl	800086c <__aeabi_ddiv>
 800cd12:	f04f 0a02 	mov.w	sl, #2
 800cd16:	4604      	mov	r4, r0
 800cd18:	460d      	mov	r5, r1
 800cd1a:	e745      	b.n	800cba8 <atan+0xc8>
 800cd1c:	4622      	mov	r2, r4
 800cd1e:	462b      	mov	r3, r5
 800cd20:	4938      	ldr	r1, [pc, #224]	@ (800ce04 <atan+0x324>)
 800cd22:	2000      	movs	r0, #0
 800cd24:	f7f3 fda2 	bl	800086c <__aeabi_ddiv>
 800cd28:	f04f 0a03 	mov.w	sl, #3
 800cd2c:	4604      	mov	r4, r0
 800cd2e:	460d      	mov	r5, r1
 800cd30:	e73a      	b.n	800cba8 <atan+0xc8>
 800cd32:	4b35      	ldr	r3, [pc, #212]	@ (800ce08 <atan+0x328>)
 800cd34:	4e35      	ldr	r6, [pc, #212]	@ (800ce0c <atan+0x32c>)
 800cd36:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800cd3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd3e:	f7f3 fab3 	bl	80002a8 <__aeabi_dsub>
 800cd42:	4622      	mov	r2, r4
 800cd44:	462b      	mov	r3, r5
 800cd46:	f7f3 faaf 	bl	80002a8 <__aeabi_dsub>
 800cd4a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800cd4e:	4602      	mov	r2, r0
 800cd50:	460b      	mov	r3, r1
 800cd52:	e9d6 0100 	ldrd	r0, r1, [r6]
 800cd56:	f7f3 faa7 	bl	80002a8 <__aeabi_dsub>
 800cd5a:	f1bb 0f00 	cmp.w	fp, #0
 800cd5e:	4604      	mov	r4, r0
 800cd60:	460d      	mov	r5, r1
 800cd62:	f6bf aedc 	bge.w	800cb1e <atan+0x3e>
 800cd66:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800cd6a:	461d      	mov	r5, r3
 800cd6c:	e6d7      	b.n	800cb1e <atan+0x3e>
 800cd6e:	a51c      	add	r5, pc, #112	@ (adr r5, 800cde0 <atan+0x300>)
 800cd70:	e9d5 4500 	ldrd	r4, r5, [r5]
 800cd74:	e6d3      	b.n	800cb1e <atan+0x3e>
 800cd76:	bf00      	nop
 800cd78:	54442d18 	.word	0x54442d18
 800cd7c:	3ff921fb 	.word	0x3ff921fb
 800cd80:	8800759c 	.word	0x8800759c
 800cd84:	7e37e43c 	.word	0x7e37e43c
 800cd88:	e322da11 	.word	0xe322da11
 800cd8c:	3f90ad3a 	.word	0x3f90ad3a
 800cd90:	24760deb 	.word	0x24760deb
 800cd94:	3fa97b4b 	.word	0x3fa97b4b
 800cd98:	a0d03d51 	.word	0xa0d03d51
 800cd9c:	3fb10d66 	.word	0x3fb10d66
 800cda0:	c54c206e 	.word	0xc54c206e
 800cda4:	3fb745cd 	.word	0x3fb745cd
 800cda8:	920083ff 	.word	0x920083ff
 800cdac:	3fc24924 	.word	0x3fc24924
 800cdb0:	5555550d 	.word	0x5555550d
 800cdb4:	3fd55555 	.word	0x3fd55555
 800cdb8:	2c6a6c2f 	.word	0x2c6a6c2f
 800cdbc:	bfa2b444 	.word	0xbfa2b444
 800cdc0:	52defd9a 	.word	0x52defd9a
 800cdc4:	3fadde2d 	.word	0x3fadde2d
 800cdc8:	af749a6d 	.word	0xaf749a6d
 800cdcc:	3fb3b0f2 	.word	0x3fb3b0f2
 800cdd0:	fe231671 	.word	0xfe231671
 800cdd4:	3fbc71c6 	.word	0x3fbc71c6
 800cdd8:	9998ebc4 	.word	0x9998ebc4
 800cddc:	3fc99999 	.word	0x3fc99999
 800cde0:	54442d18 	.word	0x54442d18
 800cde4:	bff921fb 	.word	0xbff921fb
 800cde8:	440fffff 	.word	0x440fffff
 800cdec:	7ff00000 	.word	0x7ff00000
 800cdf0:	3fdbffff 	.word	0x3fdbffff
 800cdf4:	3ff00000 	.word	0x3ff00000
 800cdf8:	3ff2ffff 	.word	0x3ff2ffff
 800cdfc:	40038000 	.word	0x40038000
 800ce00:	3ff80000 	.word	0x3ff80000
 800ce04:	bff00000 	.word	0xbff00000
 800ce08:	0800d8c8 	.word	0x0800d8c8
 800ce0c:	0800d8e8 	.word	0x0800d8e8

0800ce10 <fabs>:
 800ce10:	ec51 0b10 	vmov	r0, r1, d0
 800ce14:	4602      	mov	r2, r0
 800ce16:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800ce1a:	ec43 2b10 	vmov	d0, r2, r3
 800ce1e:	4770      	bx	lr

0800ce20 <__ieee754_sqrt>:
 800ce20:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce24:	4a66      	ldr	r2, [pc, #408]	@ (800cfc0 <__ieee754_sqrt+0x1a0>)
 800ce26:	ec55 4b10 	vmov	r4, r5, d0
 800ce2a:	43aa      	bics	r2, r5
 800ce2c:	462b      	mov	r3, r5
 800ce2e:	4621      	mov	r1, r4
 800ce30:	d110      	bne.n	800ce54 <__ieee754_sqrt+0x34>
 800ce32:	4622      	mov	r2, r4
 800ce34:	4620      	mov	r0, r4
 800ce36:	4629      	mov	r1, r5
 800ce38:	f7f3 fbee 	bl	8000618 <__aeabi_dmul>
 800ce3c:	4602      	mov	r2, r0
 800ce3e:	460b      	mov	r3, r1
 800ce40:	4620      	mov	r0, r4
 800ce42:	4629      	mov	r1, r5
 800ce44:	f7f3 fa32 	bl	80002ac <__adddf3>
 800ce48:	4604      	mov	r4, r0
 800ce4a:	460d      	mov	r5, r1
 800ce4c:	ec45 4b10 	vmov	d0, r4, r5
 800ce50:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce54:	2d00      	cmp	r5, #0
 800ce56:	dc0e      	bgt.n	800ce76 <__ieee754_sqrt+0x56>
 800ce58:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800ce5c:	4322      	orrs	r2, r4
 800ce5e:	d0f5      	beq.n	800ce4c <__ieee754_sqrt+0x2c>
 800ce60:	b19d      	cbz	r5, 800ce8a <__ieee754_sqrt+0x6a>
 800ce62:	4622      	mov	r2, r4
 800ce64:	4620      	mov	r0, r4
 800ce66:	4629      	mov	r1, r5
 800ce68:	f7f3 fa1e 	bl	80002a8 <__aeabi_dsub>
 800ce6c:	4602      	mov	r2, r0
 800ce6e:	460b      	mov	r3, r1
 800ce70:	f7f3 fcfc 	bl	800086c <__aeabi_ddiv>
 800ce74:	e7e8      	b.n	800ce48 <__ieee754_sqrt+0x28>
 800ce76:	152a      	asrs	r2, r5, #20
 800ce78:	d115      	bne.n	800cea6 <__ieee754_sqrt+0x86>
 800ce7a:	2000      	movs	r0, #0
 800ce7c:	e009      	b.n	800ce92 <__ieee754_sqrt+0x72>
 800ce7e:	0acb      	lsrs	r3, r1, #11
 800ce80:	3a15      	subs	r2, #21
 800ce82:	0549      	lsls	r1, r1, #21
 800ce84:	2b00      	cmp	r3, #0
 800ce86:	d0fa      	beq.n	800ce7e <__ieee754_sqrt+0x5e>
 800ce88:	e7f7      	b.n	800ce7a <__ieee754_sqrt+0x5a>
 800ce8a:	462a      	mov	r2, r5
 800ce8c:	e7fa      	b.n	800ce84 <__ieee754_sqrt+0x64>
 800ce8e:	005b      	lsls	r3, r3, #1
 800ce90:	3001      	adds	r0, #1
 800ce92:	02dc      	lsls	r4, r3, #11
 800ce94:	d5fb      	bpl.n	800ce8e <__ieee754_sqrt+0x6e>
 800ce96:	1e44      	subs	r4, r0, #1
 800ce98:	1b12      	subs	r2, r2, r4
 800ce9a:	f1c0 0420 	rsb	r4, r0, #32
 800ce9e:	fa21 f404 	lsr.w	r4, r1, r4
 800cea2:	4323      	orrs	r3, r4
 800cea4:	4081      	lsls	r1, r0
 800cea6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ceaa:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 800ceae:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800ceb2:	07d2      	lsls	r2, r2, #31
 800ceb4:	bf5c      	itt	pl
 800ceb6:	005b      	lslpl	r3, r3, #1
 800ceb8:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800cebc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800cec0:	bf58      	it	pl
 800cec2:	0049      	lslpl	r1, r1, #1
 800cec4:	2600      	movs	r6, #0
 800cec6:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800ceca:	107f      	asrs	r7, r7, #1
 800cecc:	0049      	lsls	r1, r1, #1
 800cece:	2016      	movs	r0, #22
 800ced0:	4632      	mov	r2, r6
 800ced2:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800ced6:	1915      	adds	r5, r2, r4
 800ced8:	429d      	cmp	r5, r3
 800ceda:	bfde      	ittt	le
 800cedc:	192a      	addle	r2, r5, r4
 800cede:	1b5b      	suble	r3, r3, r5
 800cee0:	1936      	addle	r6, r6, r4
 800cee2:	0fcd      	lsrs	r5, r1, #31
 800cee4:	3801      	subs	r0, #1
 800cee6:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 800ceea:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800ceee:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800cef2:	d1f0      	bne.n	800ced6 <__ieee754_sqrt+0xb6>
 800cef4:	4605      	mov	r5, r0
 800cef6:	2420      	movs	r4, #32
 800cef8:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800cefc:	4293      	cmp	r3, r2
 800cefe:	eb0c 0e00 	add.w	lr, ip, r0
 800cf02:	dc02      	bgt.n	800cf0a <__ieee754_sqrt+0xea>
 800cf04:	d113      	bne.n	800cf2e <__ieee754_sqrt+0x10e>
 800cf06:	458e      	cmp	lr, r1
 800cf08:	d811      	bhi.n	800cf2e <__ieee754_sqrt+0x10e>
 800cf0a:	f1be 0f00 	cmp.w	lr, #0
 800cf0e:	eb0e 000c 	add.w	r0, lr, ip
 800cf12:	da3f      	bge.n	800cf94 <__ieee754_sqrt+0x174>
 800cf14:	2800      	cmp	r0, #0
 800cf16:	db3d      	blt.n	800cf94 <__ieee754_sqrt+0x174>
 800cf18:	f102 0801 	add.w	r8, r2, #1
 800cf1c:	1a9b      	subs	r3, r3, r2
 800cf1e:	458e      	cmp	lr, r1
 800cf20:	bf88      	it	hi
 800cf22:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800cf26:	eba1 010e 	sub.w	r1, r1, lr
 800cf2a:	4465      	add	r5, ip
 800cf2c:	4642      	mov	r2, r8
 800cf2e:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800cf32:	3c01      	subs	r4, #1
 800cf34:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800cf38:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800cf3c:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800cf40:	d1dc      	bne.n	800cefc <__ieee754_sqrt+0xdc>
 800cf42:	4319      	orrs	r1, r3
 800cf44:	d01b      	beq.n	800cf7e <__ieee754_sqrt+0x15e>
 800cf46:	f8df a07c 	ldr.w	sl, [pc, #124]	@ 800cfc4 <__ieee754_sqrt+0x1a4>
 800cf4a:	f8df b07c 	ldr.w	fp, [pc, #124]	@ 800cfc8 <__ieee754_sqrt+0x1a8>
 800cf4e:	e9da 0100 	ldrd	r0, r1, [sl]
 800cf52:	e9db 2300 	ldrd	r2, r3, [fp]
 800cf56:	f7f3 f9a7 	bl	80002a8 <__aeabi_dsub>
 800cf5a:	e9da 8900 	ldrd	r8, r9, [sl]
 800cf5e:	4602      	mov	r2, r0
 800cf60:	460b      	mov	r3, r1
 800cf62:	4640      	mov	r0, r8
 800cf64:	4649      	mov	r1, r9
 800cf66:	f7f3 fdd3 	bl	8000b10 <__aeabi_dcmple>
 800cf6a:	b140      	cbz	r0, 800cf7e <__ieee754_sqrt+0x15e>
 800cf6c:	f1b5 3fff 	cmp.w	r5, #4294967295
 800cf70:	e9da 0100 	ldrd	r0, r1, [sl]
 800cf74:	e9db 2300 	ldrd	r2, r3, [fp]
 800cf78:	d10e      	bne.n	800cf98 <__ieee754_sqrt+0x178>
 800cf7a:	3601      	adds	r6, #1
 800cf7c:	4625      	mov	r5, r4
 800cf7e:	1073      	asrs	r3, r6, #1
 800cf80:	f103 537f 	add.w	r3, r3, #1069547520	@ 0x3fc00000
 800cf84:	f503 1300 	add.w	r3, r3, #2097152	@ 0x200000
 800cf88:	eb03 5107 	add.w	r1, r3, r7, lsl #20
 800cf8c:	086b      	lsrs	r3, r5, #1
 800cf8e:	ea43 70c6 	orr.w	r0, r3, r6, lsl #31
 800cf92:	e759      	b.n	800ce48 <__ieee754_sqrt+0x28>
 800cf94:	4690      	mov	r8, r2
 800cf96:	e7c1      	b.n	800cf1c <__ieee754_sqrt+0xfc>
 800cf98:	f7f3 f988 	bl	80002ac <__adddf3>
 800cf9c:	e9da 8900 	ldrd	r8, r9, [sl]
 800cfa0:	4602      	mov	r2, r0
 800cfa2:	460b      	mov	r3, r1
 800cfa4:	4640      	mov	r0, r8
 800cfa6:	4649      	mov	r1, r9
 800cfa8:	f7f3 fda8 	bl	8000afc <__aeabi_dcmplt>
 800cfac:	b120      	cbz	r0, 800cfb8 <__ieee754_sqrt+0x198>
 800cfae:	1cab      	adds	r3, r5, #2
 800cfb0:	bf08      	it	eq
 800cfb2:	3601      	addeq	r6, #1
 800cfb4:	3502      	adds	r5, #2
 800cfb6:	e7e2      	b.n	800cf7e <__ieee754_sqrt+0x15e>
 800cfb8:	1c6b      	adds	r3, r5, #1
 800cfba:	f023 0501 	bic.w	r5, r3, #1
 800cfbe:	e7de      	b.n	800cf7e <__ieee754_sqrt+0x15e>
 800cfc0:	7ff00000 	.word	0x7ff00000
 800cfc4:	0800d910 	.word	0x0800d910
 800cfc8:	0800d908 	.word	0x0800d908
 800cfcc:	00000000 	.word	0x00000000

0800cfd0 <__ieee754_atan2>:
 800cfd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cfd4:	ec57 6b11 	vmov	r6, r7, d1
 800cfd8:	4273      	negs	r3, r6
 800cfda:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 800d158 <__ieee754_atan2+0x188>
 800cfde:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 800cfe2:	4333      	orrs	r3, r6
 800cfe4:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800cfe8:	4543      	cmp	r3, r8
 800cfea:	ec51 0b10 	vmov	r0, r1, d0
 800cfee:	4635      	mov	r5, r6
 800cff0:	d809      	bhi.n	800d006 <__ieee754_atan2+0x36>
 800cff2:	4244      	negs	r4, r0
 800cff4:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800cff8:	4304      	orrs	r4, r0
 800cffa:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800cffe:	4544      	cmp	r4, r8
 800d000:	468e      	mov	lr, r1
 800d002:	4681      	mov	r9, r0
 800d004:	d907      	bls.n	800d016 <__ieee754_atan2+0x46>
 800d006:	4632      	mov	r2, r6
 800d008:	463b      	mov	r3, r7
 800d00a:	f7f3 f94f 	bl	80002ac <__adddf3>
 800d00e:	ec41 0b10 	vmov	d0, r0, r1
 800d012:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d016:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 800d01a:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 800d01e:	4334      	orrs	r4, r6
 800d020:	d103      	bne.n	800d02a <__ieee754_atan2+0x5a>
 800d022:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d026:	f7ff bd5b 	b.w	800cae0 <atan>
 800d02a:	17bc      	asrs	r4, r7, #30
 800d02c:	f004 0402 	and.w	r4, r4, #2
 800d030:	ea53 0909 	orrs.w	r9, r3, r9
 800d034:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800d038:	d107      	bne.n	800d04a <__ieee754_atan2+0x7a>
 800d03a:	2c02      	cmp	r4, #2
 800d03c:	d05f      	beq.n	800d0fe <__ieee754_atan2+0x12e>
 800d03e:	2c03      	cmp	r4, #3
 800d040:	d1e5      	bne.n	800d00e <__ieee754_atan2+0x3e>
 800d042:	a143      	add	r1, pc, #268	@ (adr r1, 800d150 <__ieee754_atan2+0x180>)
 800d044:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d048:	e7e1      	b.n	800d00e <__ieee754_atan2+0x3e>
 800d04a:	4315      	orrs	r5, r2
 800d04c:	d106      	bne.n	800d05c <__ieee754_atan2+0x8c>
 800d04e:	f1be 0f00 	cmp.w	lr, #0
 800d052:	db5f      	blt.n	800d114 <__ieee754_atan2+0x144>
 800d054:	a136      	add	r1, pc, #216	@ (adr r1, 800d130 <__ieee754_atan2+0x160>)
 800d056:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d05a:	e7d8      	b.n	800d00e <__ieee754_atan2+0x3e>
 800d05c:	4542      	cmp	r2, r8
 800d05e:	d10f      	bne.n	800d080 <__ieee754_atan2+0xb0>
 800d060:	4293      	cmp	r3, r2
 800d062:	f104 34ff 	add.w	r4, r4, #4294967295
 800d066:	d107      	bne.n	800d078 <__ieee754_atan2+0xa8>
 800d068:	2c02      	cmp	r4, #2
 800d06a:	d84c      	bhi.n	800d106 <__ieee754_atan2+0x136>
 800d06c:	4b36      	ldr	r3, [pc, #216]	@ (800d148 <__ieee754_atan2+0x178>)
 800d06e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d072:	e9d3 0100 	ldrd	r0, r1, [r3]
 800d076:	e7ca      	b.n	800d00e <__ieee754_atan2+0x3e>
 800d078:	2c02      	cmp	r4, #2
 800d07a:	d848      	bhi.n	800d10e <__ieee754_atan2+0x13e>
 800d07c:	4b33      	ldr	r3, [pc, #204]	@ (800d14c <__ieee754_atan2+0x17c>)
 800d07e:	e7f6      	b.n	800d06e <__ieee754_atan2+0x9e>
 800d080:	4543      	cmp	r3, r8
 800d082:	d0e4      	beq.n	800d04e <__ieee754_atan2+0x7e>
 800d084:	1a9b      	subs	r3, r3, r2
 800d086:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 800d08a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800d08e:	da1e      	bge.n	800d0ce <__ieee754_atan2+0xfe>
 800d090:	2f00      	cmp	r7, #0
 800d092:	da01      	bge.n	800d098 <__ieee754_atan2+0xc8>
 800d094:	323c      	adds	r2, #60	@ 0x3c
 800d096:	db1e      	blt.n	800d0d6 <__ieee754_atan2+0x106>
 800d098:	4632      	mov	r2, r6
 800d09a:	463b      	mov	r3, r7
 800d09c:	f7f3 fbe6 	bl	800086c <__aeabi_ddiv>
 800d0a0:	ec41 0b10 	vmov	d0, r0, r1
 800d0a4:	f7ff feb4 	bl	800ce10 <fabs>
 800d0a8:	f7ff fd1a 	bl	800cae0 <atan>
 800d0ac:	ec51 0b10 	vmov	r0, r1, d0
 800d0b0:	2c01      	cmp	r4, #1
 800d0b2:	d013      	beq.n	800d0dc <__ieee754_atan2+0x10c>
 800d0b4:	2c02      	cmp	r4, #2
 800d0b6:	d015      	beq.n	800d0e4 <__ieee754_atan2+0x114>
 800d0b8:	2c00      	cmp	r4, #0
 800d0ba:	d0a8      	beq.n	800d00e <__ieee754_atan2+0x3e>
 800d0bc:	a318      	add	r3, pc, #96	@ (adr r3, 800d120 <__ieee754_atan2+0x150>)
 800d0be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0c2:	f7f3 f8f1 	bl	80002a8 <__aeabi_dsub>
 800d0c6:	a318      	add	r3, pc, #96	@ (adr r3, 800d128 <__ieee754_atan2+0x158>)
 800d0c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0cc:	e014      	b.n	800d0f8 <__ieee754_atan2+0x128>
 800d0ce:	a118      	add	r1, pc, #96	@ (adr r1, 800d130 <__ieee754_atan2+0x160>)
 800d0d0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d0d4:	e7ec      	b.n	800d0b0 <__ieee754_atan2+0xe0>
 800d0d6:	2000      	movs	r0, #0
 800d0d8:	2100      	movs	r1, #0
 800d0da:	e7e9      	b.n	800d0b0 <__ieee754_atan2+0xe0>
 800d0dc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800d0e0:	4619      	mov	r1, r3
 800d0e2:	e794      	b.n	800d00e <__ieee754_atan2+0x3e>
 800d0e4:	a30e      	add	r3, pc, #56	@ (adr r3, 800d120 <__ieee754_atan2+0x150>)
 800d0e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0ea:	f7f3 f8dd 	bl	80002a8 <__aeabi_dsub>
 800d0ee:	4602      	mov	r2, r0
 800d0f0:	460b      	mov	r3, r1
 800d0f2:	a10d      	add	r1, pc, #52	@ (adr r1, 800d128 <__ieee754_atan2+0x158>)
 800d0f4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d0f8:	f7f3 f8d6 	bl	80002a8 <__aeabi_dsub>
 800d0fc:	e787      	b.n	800d00e <__ieee754_atan2+0x3e>
 800d0fe:	a10a      	add	r1, pc, #40	@ (adr r1, 800d128 <__ieee754_atan2+0x158>)
 800d100:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d104:	e783      	b.n	800d00e <__ieee754_atan2+0x3e>
 800d106:	a10c      	add	r1, pc, #48	@ (adr r1, 800d138 <__ieee754_atan2+0x168>)
 800d108:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d10c:	e77f      	b.n	800d00e <__ieee754_atan2+0x3e>
 800d10e:	2000      	movs	r0, #0
 800d110:	2100      	movs	r1, #0
 800d112:	e77c      	b.n	800d00e <__ieee754_atan2+0x3e>
 800d114:	a10a      	add	r1, pc, #40	@ (adr r1, 800d140 <__ieee754_atan2+0x170>)
 800d116:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d11a:	e778      	b.n	800d00e <__ieee754_atan2+0x3e>
 800d11c:	f3af 8000 	nop.w
 800d120:	33145c07 	.word	0x33145c07
 800d124:	3ca1a626 	.word	0x3ca1a626
 800d128:	54442d18 	.word	0x54442d18
 800d12c:	400921fb 	.word	0x400921fb
 800d130:	54442d18 	.word	0x54442d18
 800d134:	3ff921fb 	.word	0x3ff921fb
 800d138:	54442d18 	.word	0x54442d18
 800d13c:	3fe921fb 	.word	0x3fe921fb
 800d140:	54442d18 	.word	0x54442d18
 800d144:	bff921fb 	.word	0xbff921fb
 800d148:	0800d930 	.word	0x0800d930
 800d14c:	0800d918 	.word	0x0800d918
 800d150:	54442d18 	.word	0x54442d18
 800d154:	c00921fb 	.word	0xc00921fb
 800d158:	7ff00000 	.word	0x7ff00000

0800d15c <_init>:
 800d15c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d15e:	bf00      	nop
 800d160:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d162:	bc08      	pop	{r3}
 800d164:	469e      	mov	lr, r3
 800d166:	4770      	bx	lr

0800d168 <_fini>:
 800d168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d16a:	bf00      	nop
 800d16c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d16e:	bc08      	pop	{r3}
 800d170:	469e      	mov	lr, r3
 800d172:	4770      	bx	lr
