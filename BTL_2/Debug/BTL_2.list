
BTL_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c6b8  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000074c  0800c868  0800c868  0000d868  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cfb4  0800cfb4  0000e2e8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800cfb4  0800cfb4  0000dfb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cfbc  0800cfbc  0000e2e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cfbc  0800cfbc  0000dfbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800cfc0  0800cfc0  0000dfc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002e8  20000000  0800cfc4  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000e2e8  2**0
                  CONTENTS
 10 .bss          00000d10  200002e8  200002e8  0000e2e8  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20000ff8  20000ff8  0000e2e8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000e2e8  2**0
                  CONTENTS, READONLY
 13 .debug_info   000145b1  00000000  00000000  0000e318  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000335d  00000000  00000000  000228c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001128  00000000  00000000  00025c28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d23  00000000  00000000  00026d50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026cd2  00000000  00000000  00027a73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000174d4  00000000  00000000  0004e745  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000da9d9  00000000  00000000  00065c19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001405f2  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005898  00000000  00000000  00140638  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000003d  00000000  00000000  00145ed0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200002e8 	.word	0x200002e8
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800c850 	.word	0x0800c850

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200002ec 	.word	0x200002ec
 80001ec:	0800c850 	.word	0x0800c850

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2f>:
 8000bc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bcc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bd0:	bf24      	itt	cs
 8000bd2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bd6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bda:	d90d      	bls.n	8000bf8 <__aeabi_d2f+0x30>
 8000bdc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000be0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000be4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000be8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bf0:	bf08      	it	eq
 8000bf2:	f020 0001 	biceq.w	r0, r0, #1
 8000bf6:	4770      	bx	lr
 8000bf8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bfc:	d121      	bne.n	8000c42 <__aeabi_d2f+0x7a>
 8000bfe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c02:	bfbc      	itt	lt
 8000c04:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c08:	4770      	bxlt	lr
 8000c0a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c12:	f1c2 0218 	rsb	r2, r2, #24
 8000c16:	f1c2 0c20 	rsb	ip, r2, #32
 8000c1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c22:	bf18      	it	ne
 8000c24:	f040 0001 	orrne.w	r0, r0, #1
 8000c28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c34:	ea40 000c 	orr.w	r0, r0, ip
 8000c38:	fa23 f302 	lsr.w	r3, r3, r2
 8000c3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c40:	e7cc      	b.n	8000bdc <__aeabi_d2f+0x14>
 8000c42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c46:	d107      	bne.n	8000c58 <__aeabi_d2f+0x90>
 8000c48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c4c:	bf1e      	ittt	ne
 8000c4e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c52:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c56:	4770      	bxne	lr
 8000c58:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c5c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c60:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop

08000c68 <__aeabi_uldivmod>:
 8000c68:	b953      	cbnz	r3, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6a:	b94a      	cbnz	r2, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6c:	2900      	cmp	r1, #0
 8000c6e:	bf08      	it	eq
 8000c70:	2800      	cmpeq	r0, #0
 8000c72:	bf1c      	itt	ne
 8000c74:	f04f 31ff 	movne.w	r1, #4294967295
 8000c78:	f04f 30ff 	movne.w	r0, #4294967295
 8000c7c:	f000 b988 	b.w	8000f90 <__aeabi_idiv0>
 8000c80:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c84:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c88:	f000 f806 	bl	8000c98 <__udivmoddi4>
 8000c8c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c94:	b004      	add	sp, #16
 8000c96:	4770      	bx	lr

08000c98 <__udivmoddi4>:
 8000c98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c9c:	9d08      	ldr	r5, [sp, #32]
 8000c9e:	468e      	mov	lr, r1
 8000ca0:	4604      	mov	r4, r0
 8000ca2:	4688      	mov	r8, r1
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d14a      	bne.n	8000d3e <__udivmoddi4+0xa6>
 8000ca8:	428a      	cmp	r2, r1
 8000caa:	4617      	mov	r7, r2
 8000cac:	d962      	bls.n	8000d74 <__udivmoddi4+0xdc>
 8000cae:	fab2 f682 	clz	r6, r2
 8000cb2:	b14e      	cbz	r6, 8000cc8 <__udivmoddi4+0x30>
 8000cb4:	f1c6 0320 	rsb	r3, r6, #32
 8000cb8:	fa01 f806 	lsl.w	r8, r1, r6
 8000cbc:	fa20 f303 	lsr.w	r3, r0, r3
 8000cc0:	40b7      	lsls	r7, r6
 8000cc2:	ea43 0808 	orr.w	r8, r3, r8
 8000cc6:	40b4      	lsls	r4, r6
 8000cc8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ccc:	fa1f fc87 	uxth.w	ip, r7
 8000cd0:	fbb8 f1fe 	udiv	r1, r8, lr
 8000cd4:	0c23      	lsrs	r3, r4, #16
 8000cd6:	fb0e 8811 	mls	r8, lr, r1, r8
 8000cda:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cde:	fb01 f20c 	mul.w	r2, r1, ip
 8000ce2:	429a      	cmp	r2, r3
 8000ce4:	d909      	bls.n	8000cfa <__udivmoddi4+0x62>
 8000ce6:	18fb      	adds	r3, r7, r3
 8000ce8:	f101 30ff 	add.w	r0, r1, #4294967295
 8000cec:	f080 80ea 	bcs.w	8000ec4 <__udivmoddi4+0x22c>
 8000cf0:	429a      	cmp	r2, r3
 8000cf2:	f240 80e7 	bls.w	8000ec4 <__udivmoddi4+0x22c>
 8000cf6:	3902      	subs	r1, #2
 8000cf8:	443b      	add	r3, r7
 8000cfa:	1a9a      	subs	r2, r3, r2
 8000cfc:	b2a3      	uxth	r3, r4
 8000cfe:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d02:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d06:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d0a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d0e:	459c      	cmp	ip, r3
 8000d10:	d909      	bls.n	8000d26 <__udivmoddi4+0x8e>
 8000d12:	18fb      	adds	r3, r7, r3
 8000d14:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d18:	f080 80d6 	bcs.w	8000ec8 <__udivmoddi4+0x230>
 8000d1c:	459c      	cmp	ip, r3
 8000d1e:	f240 80d3 	bls.w	8000ec8 <__udivmoddi4+0x230>
 8000d22:	443b      	add	r3, r7
 8000d24:	3802      	subs	r0, #2
 8000d26:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d2a:	eba3 030c 	sub.w	r3, r3, ip
 8000d2e:	2100      	movs	r1, #0
 8000d30:	b11d      	cbz	r5, 8000d3a <__udivmoddi4+0xa2>
 8000d32:	40f3      	lsrs	r3, r6
 8000d34:	2200      	movs	r2, #0
 8000d36:	e9c5 3200 	strd	r3, r2, [r5]
 8000d3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d3e:	428b      	cmp	r3, r1
 8000d40:	d905      	bls.n	8000d4e <__udivmoddi4+0xb6>
 8000d42:	b10d      	cbz	r5, 8000d48 <__udivmoddi4+0xb0>
 8000d44:	e9c5 0100 	strd	r0, r1, [r5]
 8000d48:	2100      	movs	r1, #0
 8000d4a:	4608      	mov	r0, r1
 8000d4c:	e7f5      	b.n	8000d3a <__udivmoddi4+0xa2>
 8000d4e:	fab3 f183 	clz	r1, r3
 8000d52:	2900      	cmp	r1, #0
 8000d54:	d146      	bne.n	8000de4 <__udivmoddi4+0x14c>
 8000d56:	4573      	cmp	r3, lr
 8000d58:	d302      	bcc.n	8000d60 <__udivmoddi4+0xc8>
 8000d5a:	4282      	cmp	r2, r0
 8000d5c:	f200 8105 	bhi.w	8000f6a <__udivmoddi4+0x2d2>
 8000d60:	1a84      	subs	r4, r0, r2
 8000d62:	eb6e 0203 	sbc.w	r2, lr, r3
 8000d66:	2001      	movs	r0, #1
 8000d68:	4690      	mov	r8, r2
 8000d6a:	2d00      	cmp	r5, #0
 8000d6c:	d0e5      	beq.n	8000d3a <__udivmoddi4+0xa2>
 8000d6e:	e9c5 4800 	strd	r4, r8, [r5]
 8000d72:	e7e2      	b.n	8000d3a <__udivmoddi4+0xa2>
 8000d74:	2a00      	cmp	r2, #0
 8000d76:	f000 8090 	beq.w	8000e9a <__udivmoddi4+0x202>
 8000d7a:	fab2 f682 	clz	r6, r2
 8000d7e:	2e00      	cmp	r6, #0
 8000d80:	f040 80a4 	bne.w	8000ecc <__udivmoddi4+0x234>
 8000d84:	1a8a      	subs	r2, r1, r2
 8000d86:	0c03      	lsrs	r3, r0, #16
 8000d88:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d8c:	b280      	uxth	r0, r0
 8000d8e:	b2bc      	uxth	r4, r7
 8000d90:	2101      	movs	r1, #1
 8000d92:	fbb2 fcfe 	udiv	ip, r2, lr
 8000d96:	fb0e 221c 	mls	r2, lr, ip, r2
 8000d9a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d9e:	fb04 f20c 	mul.w	r2, r4, ip
 8000da2:	429a      	cmp	r2, r3
 8000da4:	d907      	bls.n	8000db6 <__udivmoddi4+0x11e>
 8000da6:	18fb      	adds	r3, r7, r3
 8000da8:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000dac:	d202      	bcs.n	8000db4 <__udivmoddi4+0x11c>
 8000dae:	429a      	cmp	r2, r3
 8000db0:	f200 80e0 	bhi.w	8000f74 <__udivmoddi4+0x2dc>
 8000db4:	46c4      	mov	ip, r8
 8000db6:	1a9b      	subs	r3, r3, r2
 8000db8:	fbb3 f2fe 	udiv	r2, r3, lr
 8000dbc:	fb0e 3312 	mls	r3, lr, r2, r3
 8000dc0:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000dc4:	fb02 f404 	mul.w	r4, r2, r4
 8000dc8:	429c      	cmp	r4, r3
 8000dca:	d907      	bls.n	8000ddc <__udivmoddi4+0x144>
 8000dcc:	18fb      	adds	r3, r7, r3
 8000dce:	f102 30ff 	add.w	r0, r2, #4294967295
 8000dd2:	d202      	bcs.n	8000dda <__udivmoddi4+0x142>
 8000dd4:	429c      	cmp	r4, r3
 8000dd6:	f200 80ca 	bhi.w	8000f6e <__udivmoddi4+0x2d6>
 8000dda:	4602      	mov	r2, r0
 8000ddc:	1b1b      	subs	r3, r3, r4
 8000dde:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000de2:	e7a5      	b.n	8000d30 <__udivmoddi4+0x98>
 8000de4:	f1c1 0620 	rsb	r6, r1, #32
 8000de8:	408b      	lsls	r3, r1
 8000dea:	fa22 f706 	lsr.w	r7, r2, r6
 8000dee:	431f      	orrs	r7, r3
 8000df0:	fa0e f401 	lsl.w	r4, lr, r1
 8000df4:	fa20 f306 	lsr.w	r3, r0, r6
 8000df8:	fa2e fe06 	lsr.w	lr, lr, r6
 8000dfc:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000e00:	4323      	orrs	r3, r4
 8000e02:	fa00 f801 	lsl.w	r8, r0, r1
 8000e06:	fa1f fc87 	uxth.w	ip, r7
 8000e0a:	fbbe f0f9 	udiv	r0, lr, r9
 8000e0e:	0c1c      	lsrs	r4, r3, #16
 8000e10:	fb09 ee10 	mls	lr, r9, r0, lr
 8000e14:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000e18:	fb00 fe0c 	mul.w	lr, r0, ip
 8000e1c:	45a6      	cmp	lr, r4
 8000e1e:	fa02 f201 	lsl.w	r2, r2, r1
 8000e22:	d909      	bls.n	8000e38 <__udivmoddi4+0x1a0>
 8000e24:	193c      	adds	r4, r7, r4
 8000e26:	f100 3aff 	add.w	sl, r0, #4294967295
 8000e2a:	f080 809c 	bcs.w	8000f66 <__udivmoddi4+0x2ce>
 8000e2e:	45a6      	cmp	lr, r4
 8000e30:	f240 8099 	bls.w	8000f66 <__udivmoddi4+0x2ce>
 8000e34:	3802      	subs	r0, #2
 8000e36:	443c      	add	r4, r7
 8000e38:	eba4 040e 	sub.w	r4, r4, lr
 8000e3c:	fa1f fe83 	uxth.w	lr, r3
 8000e40:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e44:	fb09 4413 	mls	r4, r9, r3, r4
 8000e48:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000e4c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e50:	45a4      	cmp	ip, r4
 8000e52:	d908      	bls.n	8000e66 <__udivmoddi4+0x1ce>
 8000e54:	193c      	adds	r4, r7, r4
 8000e56:	f103 3eff 	add.w	lr, r3, #4294967295
 8000e5a:	f080 8082 	bcs.w	8000f62 <__udivmoddi4+0x2ca>
 8000e5e:	45a4      	cmp	ip, r4
 8000e60:	d97f      	bls.n	8000f62 <__udivmoddi4+0x2ca>
 8000e62:	3b02      	subs	r3, #2
 8000e64:	443c      	add	r4, r7
 8000e66:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000e6a:	eba4 040c 	sub.w	r4, r4, ip
 8000e6e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000e72:	4564      	cmp	r4, ip
 8000e74:	4673      	mov	r3, lr
 8000e76:	46e1      	mov	r9, ip
 8000e78:	d362      	bcc.n	8000f40 <__udivmoddi4+0x2a8>
 8000e7a:	d05f      	beq.n	8000f3c <__udivmoddi4+0x2a4>
 8000e7c:	b15d      	cbz	r5, 8000e96 <__udivmoddi4+0x1fe>
 8000e7e:	ebb8 0203 	subs.w	r2, r8, r3
 8000e82:	eb64 0409 	sbc.w	r4, r4, r9
 8000e86:	fa04 f606 	lsl.w	r6, r4, r6
 8000e8a:	fa22 f301 	lsr.w	r3, r2, r1
 8000e8e:	431e      	orrs	r6, r3
 8000e90:	40cc      	lsrs	r4, r1
 8000e92:	e9c5 6400 	strd	r6, r4, [r5]
 8000e96:	2100      	movs	r1, #0
 8000e98:	e74f      	b.n	8000d3a <__udivmoddi4+0xa2>
 8000e9a:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e9e:	0c01      	lsrs	r1, r0, #16
 8000ea0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000ea4:	b280      	uxth	r0, r0
 8000ea6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000eaa:	463b      	mov	r3, r7
 8000eac:	4638      	mov	r0, r7
 8000eae:	463c      	mov	r4, r7
 8000eb0:	46b8      	mov	r8, r7
 8000eb2:	46be      	mov	lr, r7
 8000eb4:	2620      	movs	r6, #32
 8000eb6:	fbb1 f1f7 	udiv	r1, r1, r7
 8000eba:	eba2 0208 	sub.w	r2, r2, r8
 8000ebe:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000ec2:	e766      	b.n	8000d92 <__udivmoddi4+0xfa>
 8000ec4:	4601      	mov	r1, r0
 8000ec6:	e718      	b.n	8000cfa <__udivmoddi4+0x62>
 8000ec8:	4610      	mov	r0, r2
 8000eca:	e72c      	b.n	8000d26 <__udivmoddi4+0x8e>
 8000ecc:	f1c6 0220 	rsb	r2, r6, #32
 8000ed0:	fa2e f302 	lsr.w	r3, lr, r2
 8000ed4:	40b7      	lsls	r7, r6
 8000ed6:	40b1      	lsls	r1, r6
 8000ed8:	fa20 f202 	lsr.w	r2, r0, r2
 8000edc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ee0:	430a      	orrs	r2, r1
 8000ee2:	fbb3 f8fe 	udiv	r8, r3, lr
 8000ee6:	b2bc      	uxth	r4, r7
 8000ee8:	fb0e 3318 	mls	r3, lr, r8, r3
 8000eec:	0c11      	lsrs	r1, r2, #16
 8000eee:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef2:	fb08 f904 	mul.w	r9, r8, r4
 8000ef6:	40b0      	lsls	r0, r6
 8000ef8:	4589      	cmp	r9, r1
 8000efa:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000efe:	b280      	uxth	r0, r0
 8000f00:	d93e      	bls.n	8000f80 <__udivmoddi4+0x2e8>
 8000f02:	1879      	adds	r1, r7, r1
 8000f04:	f108 3cff 	add.w	ip, r8, #4294967295
 8000f08:	d201      	bcs.n	8000f0e <__udivmoddi4+0x276>
 8000f0a:	4589      	cmp	r9, r1
 8000f0c:	d81f      	bhi.n	8000f4e <__udivmoddi4+0x2b6>
 8000f0e:	eba1 0109 	sub.w	r1, r1, r9
 8000f12:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f16:	fb09 f804 	mul.w	r8, r9, r4
 8000f1a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f1e:	b292      	uxth	r2, r2
 8000f20:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f24:	4542      	cmp	r2, r8
 8000f26:	d229      	bcs.n	8000f7c <__udivmoddi4+0x2e4>
 8000f28:	18ba      	adds	r2, r7, r2
 8000f2a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000f2e:	d2c4      	bcs.n	8000eba <__udivmoddi4+0x222>
 8000f30:	4542      	cmp	r2, r8
 8000f32:	d2c2      	bcs.n	8000eba <__udivmoddi4+0x222>
 8000f34:	f1a9 0102 	sub.w	r1, r9, #2
 8000f38:	443a      	add	r2, r7
 8000f3a:	e7be      	b.n	8000eba <__udivmoddi4+0x222>
 8000f3c:	45f0      	cmp	r8, lr
 8000f3e:	d29d      	bcs.n	8000e7c <__udivmoddi4+0x1e4>
 8000f40:	ebbe 0302 	subs.w	r3, lr, r2
 8000f44:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000f48:	3801      	subs	r0, #1
 8000f4a:	46e1      	mov	r9, ip
 8000f4c:	e796      	b.n	8000e7c <__udivmoddi4+0x1e4>
 8000f4e:	eba7 0909 	sub.w	r9, r7, r9
 8000f52:	4449      	add	r1, r9
 8000f54:	f1a8 0c02 	sub.w	ip, r8, #2
 8000f58:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f5c:	fb09 f804 	mul.w	r8, r9, r4
 8000f60:	e7db      	b.n	8000f1a <__udivmoddi4+0x282>
 8000f62:	4673      	mov	r3, lr
 8000f64:	e77f      	b.n	8000e66 <__udivmoddi4+0x1ce>
 8000f66:	4650      	mov	r0, sl
 8000f68:	e766      	b.n	8000e38 <__udivmoddi4+0x1a0>
 8000f6a:	4608      	mov	r0, r1
 8000f6c:	e6fd      	b.n	8000d6a <__udivmoddi4+0xd2>
 8000f6e:	443b      	add	r3, r7
 8000f70:	3a02      	subs	r2, #2
 8000f72:	e733      	b.n	8000ddc <__udivmoddi4+0x144>
 8000f74:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f78:	443b      	add	r3, r7
 8000f7a:	e71c      	b.n	8000db6 <__udivmoddi4+0x11e>
 8000f7c:	4649      	mov	r1, r9
 8000f7e:	e79c      	b.n	8000eba <__udivmoddi4+0x222>
 8000f80:	eba1 0109 	sub.w	r1, r1, r9
 8000f84:	46c4      	mov	ip, r8
 8000f86:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f8a:	fb09 f804 	mul.w	r8, r9, r4
 8000f8e:	e7c4      	b.n	8000f1a <__udivmoddi4+0x282>

08000f90 <__aeabi_idiv0>:
 8000f90:	4770      	bx	lr
 8000f92:	bf00      	nop

08000f94 <KalmanFilter_Init>:

#include "kalman.h"
#include "math.h"
#include "main.h"

void KalmanFilter_Init(KalmanFilter_t* kalman, double Q_angle, double Q_bias, double R_measure) {
 8000f94:	b480      	push	{r7}
 8000f96:	b089      	sub	sp, #36	@ 0x24
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	61f8      	str	r0, [r7, #28]
 8000f9c:	ed87 0b04 	vstr	d0, [r7, #16]
 8000fa0:	ed87 1b02 	vstr	d1, [r7, #8]
 8000fa4:	ed87 2b00 	vstr	d2, [r7]
	kalman->Q_angle = Q_angle;
 8000fa8:	69f9      	ldr	r1, [r7, #28]
 8000faa:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000fae:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
	kalman->Q_bias = Q_bias;
 8000fb2:	69f9      	ldr	r1, [r7, #28]
 8000fb4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000fb8:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40
	kalman->R_measure = R_measure;
 8000fbc:	69f9      	ldr	r1, [r7, #28]
 8000fbe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000fc2:	e9c1 2312 	strd	r2, r3, [r1, #72]	@ 0x48

	// Khởi tạo các giá trị mặc định
	kalman->angle = 0.0;
 8000fc6:	69f9      	ldr	r1, [r7, #28]
 8000fc8:	f04f 0200 	mov.w	r2, #0
 8000fcc:	f04f 0300 	mov.w	r3, #0
 8000fd0:	e9c1 2300 	strd	r2, r3, [r1]
	kalman->bias = 0.0;
 8000fd4:	69f9      	ldr	r1, [r7, #28]
 8000fd6:	f04f 0200 	mov.w	r2, #0
 8000fda:	f04f 0300 	mov.w	r3, #0
 8000fde:	e9c1 2302 	strd	r2, r3, [r1, #8]
	kalman->rate = 0.0;
 8000fe2:	69f9      	ldr	r1, [r7, #28]
 8000fe4:	f04f 0200 	mov.w	r2, #0
 8000fe8:	f04f 0300 	mov.w	r3, #0
 8000fec:	e9c1 2304 	strd	r2, r3, [r1, #16]

	// Khởi tạo ma trận hiệp phương sai
	kalman->P[0][0] = 0.0;
 8000ff0:	69f9      	ldr	r1, [r7, #28]
 8000ff2:	f04f 0200 	mov.w	r2, #0
 8000ff6:	f04f 0300 	mov.w	r3, #0
 8000ffa:	e9c1 2306 	strd	r2, r3, [r1, #24]
	kalman->P[0][1] = 0.0;
 8000ffe:	69f9      	ldr	r1, [r7, #28]
 8001000:	f04f 0200 	mov.w	r2, #0
 8001004:	f04f 0300 	mov.w	r3, #0
 8001008:	e9c1 2308 	strd	r2, r3, [r1, #32]
	kalman->P[1][0] = 0.0;
 800100c:	69f9      	ldr	r1, [r7, #28]
 800100e:	f04f 0200 	mov.w	r2, #0
 8001012:	f04f 0300 	mov.w	r3, #0
 8001016:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
	kalman->P[1][1] = 0.0;
 800101a:	69f9      	ldr	r1, [r7, #28]
 800101c:	f04f 0200 	mov.w	r2, #0
 8001020:	f04f 0300 	mov.w	r3, #0
 8001024:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
}
 8001028:	bf00      	nop
 800102a:	3724      	adds	r7, #36	@ 0x24
 800102c:	46bd      	mov	sp, r7
 800102e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001032:	4770      	bx	lr

08001034 <KalmanFilter_Update>:

double KalmanFilter_Update(KalmanFilter_t* kalman, double newAngle, double newRate, double dt) {
 8001034:	b5b0      	push	{r4, r5, r7, lr}
 8001036:	b094      	sub	sp, #80	@ 0x50
 8001038:	af00      	add	r7, sp, #0
 800103a:	61f8      	str	r0, [r7, #28]
 800103c:	ed87 0b04 	vstr	d0, [r7, #16]
 8001040:	ed87 1b02 	vstr	d1, [r7, #8]
 8001044:	ed87 2b00 	vstr	d2, [r7]
	// Bước 1: Dự đoán
	// Cập nhật góc dựa trên tốc độ góc
	kalman->angle += dt * (newRate - kalman->bias);
 8001048:	69fb      	ldr	r3, [r7, #28]
 800104a:	e9d3 4500 	ldrd	r4, r5, [r3]
 800104e:	69fb      	ldr	r3, [r7, #28]
 8001050:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001054:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001058:	f7ff f926 	bl	80002a8 <__aeabi_dsub>
 800105c:	4602      	mov	r2, r0
 800105e:	460b      	mov	r3, r1
 8001060:	4610      	mov	r0, r2
 8001062:	4619      	mov	r1, r3
 8001064:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001068:	f7ff fad6 	bl	8000618 <__aeabi_dmul>
 800106c:	4602      	mov	r2, r0
 800106e:	460b      	mov	r3, r1
 8001070:	4620      	mov	r0, r4
 8001072:	4629      	mov	r1, r5
 8001074:	f7ff f91a 	bl	80002ac <__adddf3>
 8001078:	4602      	mov	r2, r0
 800107a:	460b      	mov	r3, r1
 800107c:	69f9      	ldr	r1, [r7, #28]
 800107e:	e9c1 2300 	strd	r2, r3, [r1]

	// Cập nhật ma trận hiệp phương sai
	kalman->P[0][0] += dt * (dt * kalman->P[1][1] - kalman->P[0][1] - kalman->P[1][0] + kalman->Q_angle);
 8001082:	69fb      	ldr	r3, [r7, #28]
 8001084:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8001088:	69fb      	ldr	r3, [r7, #28]
 800108a:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 800108e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001092:	f7ff fac1 	bl	8000618 <__aeabi_dmul>
 8001096:	4602      	mov	r2, r0
 8001098:	460b      	mov	r3, r1
 800109a:	4610      	mov	r0, r2
 800109c:	4619      	mov	r1, r3
 800109e:	69fb      	ldr	r3, [r7, #28]
 80010a0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80010a4:	f7ff f900 	bl	80002a8 <__aeabi_dsub>
 80010a8:	4602      	mov	r2, r0
 80010aa:	460b      	mov	r3, r1
 80010ac:	4610      	mov	r0, r2
 80010ae:	4619      	mov	r1, r3
 80010b0:	69fb      	ldr	r3, [r7, #28]
 80010b2:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 80010b6:	f7ff f8f7 	bl	80002a8 <__aeabi_dsub>
 80010ba:	4602      	mov	r2, r0
 80010bc:	460b      	mov	r3, r1
 80010be:	4610      	mov	r0, r2
 80010c0:	4619      	mov	r1, r3
 80010c2:	69fb      	ldr	r3, [r7, #28]
 80010c4:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 80010c8:	f7ff f8f0 	bl	80002ac <__adddf3>
 80010cc:	4602      	mov	r2, r0
 80010ce:	460b      	mov	r3, r1
 80010d0:	4610      	mov	r0, r2
 80010d2:	4619      	mov	r1, r3
 80010d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80010d8:	f7ff fa9e 	bl	8000618 <__aeabi_dmul>
 80010dc:	4602      	mov	r2, r0
 80010de:	460b      	mov	r3, r1
 80010e0:	4620      	mov	r0, r4
 80010e2:	4629      	mov	r1, r5
 80010e4:	f7ff f8e2 	bl	80002ac <__adddf3>
 80010e8:	4602      	mov	r2, r0
 80010ea:	460b      	mov	r3, r1
 80010ec:	69f9      	ldr	r1, [r7, #28]
 80010ee:	e9c1 2306 	strd	r2, r3, [r1, #24]
	kalman->P[0][1] -= dt * kalman->P[1][1];
 80010f2:	69fb      	ldr	r3, [r7, #28]
 80010f4:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 80010f8:	69fb      	ldr	r3, [r7, #28]
 80010fa:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 80010fe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001102:	f7ff fa89 	bl	8000618 <__aeabi_dmul>
 8001106:	4602      	mov	r2, r0
 8001108:	460b      	mov	r3, r1
 800110a:	4620      	mov	r0, r4
 800110c:	4629      	mov	r1, r5
 800110e:	f7ff f8cb 	bl	80002a8 <__aeabi_dsub>
 8001112:	4602      	mov	r2, r0
 8001114:	460b      	mov	r3, r1
 8001116:	69f9      	ldr	r1, [r7, #28]
 8001118:	e9c1 2308 	strd	r2, r3, [r1, #32]
	kalman->P[1][0] -= dt * kalman->P[1][1];
 800111c:	69fb      	ldr	r3, [r7, #28]
 800111e:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	@ 0x28
 8001122:	69fb      	ldr	r3, [r7, #28]
 8001124:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 8001128:	e9d7 2300 	ldrd	r2, r3, [r7]
 800112c:	f7ff fa74 	bl	8000618 <__aeabi_dmul>
 8001130:	4602      	mov	r2, r0
 8001132:	460b      	mov	r3, r1
 8001134:	4620      	mov	r0, r4
 8001136:	4629      	mov	r1, r5
 8001138:	f7ff f8b6 	bl	80002a8 <__aeabi_dsub>
 800113c:	4602      	mov	r2, r0
 800113e:	460b      	mov	r3, r1
 8001140:	69f9      	ldr	r1, [r7, #28]
 8001142:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
	kalman->P[1][1] += kalman->Q_bias * dt;
 8001146:	69fb      	ldr	r3, [r7, #28]
 8001148:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	@ 0x30
 800114c:	69fb      	ldr	r3, [r7, #28]
 800114e:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 8001152:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001156:	f7ff fa5f 	bl	8000618 <__aeabi_dmul>
 800115a:	4602      	mov	r2, r0
 800115c:	460b      	mov	r3, r1
 800115e:	4620      	mov	r0, r4
 8001160:	4629      	mov	r1, r5
 8001162:	f7ff f8a3 	bl	80002ac <__adddf3>
 8001166:	4602      	mov	r2, r0
 8001168:	460b      	mov	r3, r1
 800116a:	69f9      	ldr	r1, [r7, #28]
 800116c:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30

	// Bước 2: Cập nhật
	// Tính độ lệch giữa góc đo được và góc dự đoán
	double S = kalman->P[0][0] + kalman->R_measure;
 8001170:	69fb      	ldr	r3, [r7, #28]
 8001172:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8001176:	69fb      	ldr	r3, [r7, #28]
 8001178:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	@ 0x48
 800117c:	f7ff f896 	bl	80002ac <__adddf3>
 8001180:	4602      	mov	r2, r0
 8001182:	460b      	mov	r3, r1
 8001184:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48

	// Tính Kalman gain
	double K[2];
	K[0] = kalman->P[0][0] / S;
 8001188:	69fb      	ldr	r3, [r7, #28]
 800118a:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 800118e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001192:	f7ff fb6b 	bl	800086c <__aeabi_ddiv>
 8001196:	4602      	mov	r2, r0
 8001198:	460b      	mov	r3, r1
 800119a:	e9c7 2308 	strd	r2, r3, [r7, #32]
	K[1] = kalman->P[1][0] / S;
 800119e:	69fb      	ldr	r3, [r7, #28]
 80011a0:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 80011a4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80011a8:	f7ff fb60 	bl	800086c <__aeabi_ddiv>
 80011ac:	4602      	mov	r2, r0
 80011ae:	460b      	mov	r3, r1
 80011b0:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28

	// Cập nhật góc và độ lệch
	double y = newAngle - kalman->angle;
 80011b4:	69fb      	ldr	r3, [r7, #28]
 80011b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011ba:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80011be:	f7ff f873 	bl	80002a8 <__aeabi_dsub>
 80011c2:	4602      	mov	r2, r0
 80011c4:	460b      	mov	r3, r1
 80011c6:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
	kalman->angle += K[0] * y;
 80011ca:	69fb      	ldr	r3, [r7, #28]
 80011cc:	e9d3 4500 	ldrd	r4, r5, [r3]
 80011d0:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80011d4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80011d8:	f7ff fa1e 	bl	8000618 <__aeabi_dmul>
 80011dc:	4602      	mov	r2, r0
 80011de:	460b      	mov	r3, r1
 80011e0:	4620      	mov	r0, r4
 80011e2:	4629      	mov	r1, r5
 80011e4:	f7ff f862 	bl	80002ac <__adddf3>
 80011e8:	4602      	mov	r2, r0
 80011ea:	460b      	mov	r3, r1
 80011ec:	69f9      	ldr	r1, [r7, #28]
 80011ee:	e9c1 2300 	strd	r2, r3, [r1]
	kalman->bias += K[1] * y;
 80011f2:	69fb      	ldr	r3, [r7, #28]
 80011f4:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 80011f8:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80011fc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8001200:	f7ff fa0a 	bl	8000618 <__aeabi_dmul>
 8001204:	4602      	mov	r2, r0
 8001206:	460b      	mov	r3, r1
 8001208:	4620      	mov	r0, r4
 800120a:	4629      	mov	r1, r5
 800120c:	f7ff f84e 	bl	80002ac <__adddf3>
 8001210:	4602      	mov	r2, r0
 8001212:	460b      	mov	r3, r1
 8001214:	69f9      	ldr	r1, [r7, #28]
 8001216:	e9c1 2302 	strd	r2, r3, [r1, #8]

	// Cập nhật ma trận hiệp phương sai
	double P00_temp = kalman->P[0][0];
 800121a:	69fb      	ldr	r3, [r7, #28]
 800121c:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001220:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
	double P01_temp = kalman->P[0][1];
 8001224:	69fb      	ldr	r3, [r7, #28]
 8001226:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800122a:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

	kalman->P[0][0] -= K[0] * P00_temp;
 800122e:	69fb      	ldr	r3, [r7, #28]
 8001230:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8001234:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001238:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800123c:	f7ff f9ec 	bl	8000618 <__aeabi_dmul>
 8001240:	4602      	mov	r2, r0
 8001242:	460b      	mov	r3, r1
 8001244:	4620      	mov	r0, r4
 8001246:	4629      	mov	r1, r5
 8001248:	f7ff f82e 	bl	80002a8 <__aeabi_dsub>
 800124c:	4602      	mov	r2, r0
 800124e:	460b      	mov	r3, r1
 8001250:	69f9      	ldr	r1, [r7, #28]
 8001252:	e9c1 2306 	strd	r2, r3, [r1, #24]
	kalman->P[0][1] -= K[0] * P01_temp;
 8001256:	69fb      	ldr	r3, [r7, #28]
 8001258:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 800125c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001260:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001264:	f7ff f9d8 	bl	8000618 <__aeabi_dmul>
 8001268:	4602      	mov	r2, r0
 800126a:	460b      	mov	r3, r1
 800126c:	4620      	mov	r0, r4
 800126e:	4629      	mov	r1, r5
 8001270:	f7ff f81a 	bl	80002a8 <__aeabi_dsub>
 8001274:	4602      	mov	r2, r0
 8001276:	460b      	mov	r3, r1
 8001278:	69f9      	ldr	r1, [r7, #28]
 800127a:	e9c1 2308 	strd	r2, r3, [r1, #32]
	kalman->P[1][0] -= K[1] * P00_temp;
 800127e:	69fb      	ldr	r3, [r7, #28]
 8001280:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	@ 0x28
 8001284:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001288:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800128c:	f7ff f9c4 	bl	8000618 <__aeabi_dmul>
 8001290:	4602      	mov	r2, r0
 8001292:	460b      	mov	r3, r1
 8001294:	4620      	mov	r0, r4
 8001296:	4629      	mov	r1, r5
 8001298:	f7ff f806 	bl	80002a8 <__aeabi_dsub>
 800129c:	4602      	mov	r2, r0
 800129e:	460b      	mov	r3, r1
 80012a0:	69f9      	ldr	r1, [r7, #28]
 80012a2:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
	kalman->P[1][1] -= K[1] * P01_temp;
 80012a6:	69fb      	ldr	r3, [r7, #28]
 80012a8:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	@ 0x30
 80012ac:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80012b0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80012b4:	f7ff f9b0 	bl	8000618 <__aeabi_dmul>
 80012b8:	4602      	mov	r2, r0
 80012ba:	460b      	mov	r3, r1
 80012bc:	4620      	mov	r0, r4
 80012be:	4629      	mov	r1, r5
 80012c0:	f7fe fff2 	bl	80002a8 <__aeabi_dsub>
 80012c4:	4602      	mov	r2, r0
 80012c6:	460b      	mov	r3, r1
 80012c8:	69f9      	ldr	r1, [r7, #28]
 80012ca:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30

	// Lưu tốc độ góc đã được lọc
	kalman->rate = newRate - kalman->bias;
 80012ce:	69fb      	ldr	r3, [r7, #28]
 80012d0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80012d4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80012d8:	f7fe ffe6 	bl	80002a8 <__aeabi_dsub>
 80012dc:	4602      	mov	r2, r0
 80012de:	460b      	mov	r3, r1
 80012e0:	69f9      	ldr	r1, [r7, #28]
 80012e2:	e9c1 2304 	strd	r2, r3, [r1, #16]

	return kalman->angle;
 80012e6:	69fb      	ldr	r3, [r7, #28]
 80012e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012ec:	ec43 2b17 	vmov	d7, r2, r3
}
 80012f0:	eeb0 0a47 	vmov.f32	s0, s14
 80012f4:	eef0 0a67 	vmov.f32	s1, s15
 80012f8:	3750      	adds	r7, #80	@ 0x50
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bdb0      	pop	{r4, r5, r7, pc}
	...

08001300 <MPU6050_Init>:
/**
  * @brief  Khởi tạo MPU6050 gyroscope
  * @retval None
  */
void MPU6050_Init(void)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b086      	sub	sp, #24
 8001304:	af04      	add	r7, sp, #16
    uint8_t data;
    
    // Wake up MPU6050
    data = 0x00;
 8001306:	2300      	movs	r3, #0
 8001308:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, MPU6050_PWR_MGMT_1, 1, &data, 1, HAL_MAX_DELAY);
 800130a:	f04f 33ff 	mov.w	r3, #4294967295
 800130e:	9302      	str	r3, [sp, #8]
 8001310:	2301      	movs	r3, #1
 8001312:	9301      	str	r3, [sp, #4]
 8001314:	1dfb      	adds	r3, r7, #7
 8001316:	9300      	str	r3, [sp, #0]
 8001318:	2301      	movs	r3, #1
 800131a:	226b      	movs	r2, #107	@ 0x6b
 800131c:	21d0      	movs	r1, #208	@ 0xd0
 800131e:	4823      	ldr	r0, [pc, #140]	@ (80013ac <MPU6050_Init+0xac>)
 8001320:	f001 fd22 	bl	8002d68 <HAL_I2C_Mem_Write>
    
    // Set sample rate to 1kHz  
    data = 0x07;
 8001324:	2307      	movs	r3, #7
 8001326:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, MPU6050_SMPLRT_DIV, 1, &data, 1, HAL_MAX_DELAY);
 8001328:	f04f 33ff 	mov.w	r3, #4294967295
 800132c:	9302      	str	r3, [sp, #8]
 800132e:	2301      	movs	r3, #1
 8001330:	9301      	str	r3, [sp, #4]
 8001332:	1dfb      	adds	r3, r7, #7
 8001334:	9300      	str	r3, [sp, #0]
 8001336:	2301      	movs	r3, #1
 8001338:	2219      	movs	r2, #25
 800133a:	21d0      	movs	r1, #208	@ 0xd0
 800133c:	481b      	ldr	r0, [pc, #108]	@ (80013ac <MPU6050_Init+0xac>)
 800133e:	f001 fd13 	bl	8002d68 <HAL_I2C_Mem_Write>
    
    // Set DLPF to 44Hz
    data = 0x03;
 8001342:	2303      	movs	r3, #3
 8001344:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, MPU6050_CONFIG, 1, &data, 1, HAL_MAX_DELAY);
 8001346:	f04f 33ff 	mov.w	r3, #4294967295
 800134a:	9302      	str	r3, [sp, #8]
 800134c:	2301      	movs	r3, #1
 800134e:	9301      	str	r3, [sp, #4]
 8001350:	1dfb      	adds	r3, r7, #7
 8001352:	9300      	str	r3, [sp, #0]
 8001354:	2301      	movs	r3, #1
 8001356:	221a      	movs	r2, #26
 8001358:	21d0      	movs	r1, #208	@ 0xd0
 800135a:	4814      	ldr	r0, [pc, #80]	@ (80013ac <MPU6050_Init+0xac>)
 800135c:	f001 fd04 	bl	8002d68 <HAL_I2C_Mem_Write>
    
    // Set gyro range to ±2000°/s
    data = 0x18;
 8001360:	2318      	movs	r3, #24
 8001362:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, MPU6050_GYRO_CONFIG, 1, &data, 1, HAL_MAX_DELAY);
 8001364:	f04f 33ff 	mov.w	r3, #4294967295
 8001368:	9302      	str	r3, [sp, #8]
 800136a:	2301      	movs	r3, #1
 800136c:	9301      	str	r3, [sp, #4]
 800136e:	1dfb      	adds	r3, r7, #7
 8001370:	9300      	str	r3, [sp, #0]
 8001372:	2301      	movs	r3, #1
 8001374:	221b      	movs	r2, #27
 8001376:	21d0      	movs	r1, #208	@ 0xd0
 8001378:	480c      	ldr	r0, [pc, #48]	@ (80013ac <MPU6050_Init+0xac>)
 800137a:	f001 fcf5 	bl	8002d68 <HAL_I2C_Mem_Write>
    
    // Set accelerometer range to ±8g  
    data = 0x10;
 800137e:	2310      	movs	r3, #16
 8001380:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, MPU6050_ACCEL_CONFIG, 1, &data, 1, HAL_MAX_DELAY);
 8001382:	f04f 33ff 	mov.w	r3, #4294967295
 8001386:	9302      	str	r3, [sp, #8]
 8001388:	2301      	movs	r3, #1
 800138a:	9301      	str	r3, [sp, #4]
 800138c:	1dfb      	adds	r3, r7, #7
 800138e:	9300      	str	r3, [sp, #0]
 8001390:	2301      	movs	r3, #1
 8001392:	221c      	movs	r2, #28
 8001394:	21d0      	movs	r1, #208	@ 0xd0
 8001396:	4805      	ldr	r0, [pc, #20]	@ (80013ac <MPU6050_Init+0xac>)
 8001398:	f001 fce6 	bl	8002d68 <HAL_I2C_Mem_Write>
    
    HAL_Delay(100);
 800139c:	2064      	movs	r0, #100	@ 0x64
 800139e:	f001 f8a5 	bl	80024ec <HAL_Delay>
}
 80013a2:	bf00      	nop
 80013a4:	3708      	adds	r7, #8
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	20000304 	.word	0x20000304

080013b0 <Gyro_Calibrate>:
/**
  * @brief  Calibrate gyroscope để tìm offset
  * @retval None
  */
void Gyro_Calibrate(void)
{
 80013b0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80013b4:	b0a4      	sub	sp, #144	@ 0x90
 80013b6:	af04      	add	r7, sp, #16
    char buffer[100];
    float sum_x = 0, sum_y = 0, sum_z = 0;
 80013b8:	f04f 0300 	mov.w	r3, #0
 80013bc:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80013be:	f04f 0300 	mov.w	r3, #0
 80013c2:	67bb      	str	r3, [r7, #120]	@ 0x78
 80013c4:	f04f 0300 	mov.w	r3, #0
 80013c8:	677b      	str	r3, [r7, #116]	@ 0x74
    
    sprintf(buffer, "🔧 Calibrating gyroscope... Keep still!\r\n");
 80013ca:	1d3b      	adds	r3, r7, #4
 80013cc:	4963      	ldr	r1, [pc, #396]	@ (800155c <Gyro_Calibrate+0x1ac>)
 80013ce:	4618      	mov	r0, r3
 80013d0:	f009 f90a 	bl	800a5e8 <siprintf>
    HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 80013d4:	1d3b      	adds	r3, r7, #4
 80013d6:	4618      	mov	r0, r3
 80013d8:	f7fe ff5a 	bl	8000290 <strlen>
 80013dc:	4603      	mov	r3, r0
 80013de:	b29a      	uxth	r2, r3
 80013e0:	1d39      	adds	r1, r7, #4
 80013e2:	f04f 33ff 	mov.w	r3, #4294967295
 80013e6:	485e      	ldr	r0, [pc, #376]	@ (8001560 <Gyro_Calibrate+0x1b0>)
 80013e8:	f004 fb3c 	bl	8005a64 <HAL_UART_Transmit>
    
    for(int i = 0; i < CALIBRATION_SAMPLES; i++)
 80013ec:	2300      	movs	r3, #0
 80013ee:	673b      	str	r3, [r7, #112]	@ 0x70
 80013f0:	e066      	b.n	80014c0 <Gyro_Calibrate+0x110>
    {
        if(HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, MPU6050_GYRO_XOUT_H, 1, gyro_data, 6, HAL_MAX_DELAY) == HAL_OK)
 80013f2:	f04f 33ff 	mov.w	r3, #4294967295
 80013f6:	9302      	str	r3, [sp, #8]
 80013f8:	2306      	movs	r3, #6
 80013fa:	9301      	str	r3, [sp, #4]
 80013fc:	4b59      	ldr	r3, [pc, #356]	@ (8001564 <Gyro_Calibrate+0x1b4>)
 80013fe:	9300      	str	r3, [sp, #0]
 8001400:	2301      	movs	r3, #1
 8001402:	2243      	movs	r2, #67	@ 0x43
 8001404:	21d0      	movs	r1, #208	@ 0xd0
 8001406:	4858      	ldr	r0, [pc, #352]	@ (8001568 <Gyro_Calibrate+0x1b8>)
 8001408:	f001 fda8 	bl	8002f5c <HAL_I2C_Mem_Read>
 800140c:	4603      	mov	r3, r0
 800140e:	2b00      	cmp	r3, #0
 8001410:	d150      	bne.n	80014b4 <Gyro_Calibrate+0x104>
        {
            int16_t raw_x = (int16_t)(gyro_data[0] << 8 | gyro_data[1]);
 8001412:	4b54      	ldr	r3, [pc, #336]	@ (8001564 <Gyro_Calibrate+0x1b4>)
 8001414:	781b      	ldrb	r3, [r3, #0]
 8001416:	b21b      	sxth	r3, r3
 8001418:	021b      	lsls	r3, r3, #8
 800141a:	b21a      	sxth	r2, r3
 800141c:	4b51      	ldr	r3, [pc, #324]	@ (8001564 <Gyro_Calibrate+0x1b4>)
 800141e:	785b      	ldrb	r3, [r3, #1]
 8001420:	b21b      	sxth	r3, r3
 8001422:	4313      	orrs	r3, r2
 8001424:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
            int16_t raw_y = (int16_t)(gyro_data[2] << 8 | gyro_data[3]);
 8001428:	4b4e      	ldr	r3, [pc, #312]	@ (8001564 <Gyro_Calibrate+0x1b4>)
 800142a:	789b      	ldrb	r3, [r3, #2]
 800142c:	b21b      	sxth	r3, r3
 800142e:	021b      	lsls	r3, r3, #8
 8001430:	b21a      	sxth	r2, r3
 8001432:	4b4c      	ldr	r3, [pc, #304]	@ (8001564 <Gyro_Calibrate+0x1b4>)
 8001434:	78db      	ldrb	r3, [r3, #3]
 8001436:	b21b      	sxth	r3, r3
 8001438:	4313      	orrs	r3, r2
 800143a:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
            int16_t raw_z = (int16_t)(gyro_data[4] << 8 | gyro_data[5]);
 800143e:	4b49      	ldr	r3, [pc, #292]	@ (8001564 <Gyro_Calibrate+0x1b4>)
 8001440:	791b      	ldrb	r3, [r3, #4]
 8001442:	b21b      	sxth	r3, r3
 8001444:	021b      	lsls	r3, r3, #8
 8001446:	b21a      	sxth	r2, r3
 8001448:	4b46      	ldr	r3, [pc, #280]	@ (8001564 <Gyro_Calibrate+0x1b4>)
 800144a:	795b      	ldrb	r3, [r3, #5]
 800144c:	b21b      	sxth	r3, r3
 800144e:	4313      	orrs	r3, r2
 8001450:	f8a7 306a 	strh.w	r3, [r7, #106]	@ 0x6a
            
            // ±2000°/s range, scale factor is 16.4 LSB/°/s
            sum_x += (float)raw_x / 16.4f;
 8001454:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	@ 0x6e
 8001458:	ee07 3a90 	vmov	s15, r3
 800145c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001460:	eddf 6a42 	vldr	s13, [pc, #264]	@ 800156c <Gyro_Calibrate+0x1bc>
 8001464:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001468:	ed97 7a1f 	vldr	s14, [r7, #124]	@ 0x7c
 800146c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001470:	edc7 7a1f 	vstr	s15, [r7, #124]	@ 0x7c
            sum_y += (float)raw_y / 16.4f;
 8001474:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	@ 0x6c
 8001478:	ee07 3a90 	vmov	s15, r3
 800147c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001480:	eddf 6a3a 	vldr	s13, [pc, #232]	@ 800156c <Gyro_Calibrate+0x1bc>
 8001484:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001488:	ed97 7a1e 	vldr	s14, [r7, #120]	@ 0x78
 800148c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001490:	edc7 7a1e 	vstr	s15, [r7, #120]	@ 0x78
            sum_z += (float)raw_z / 16.4f;
 8001494:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	@ 0x6a
 8001498:	ee07 3a90 	vmov	s15, r3
 800149c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80014a0:	eddf 6a32 	vldr	s13, [pc, #200]	@ 800156c <Gyro_Calibrate+0x1bc>
 80014a4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014a8:	ed97 7a1d 	vldr	s14, [r7, #116]	@ 0x74
 80014ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014b0:	edc7 7a1d 	vstr	s15, [r7, #116]	@ 0x74
        }
        HAL_Delay(5);
 80014b4:	2005      	movs	r0, #5
 80014b6:	f001 f819 	bl	80024ec <HAL_Delay>
    for(int i = 0; i < CALIBRATION_SAMPLES; i++)
 80014ba:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80014bc:	3301      	adds	r3, #1
 80014be:	673b      	str	r3, [r7, #112]	@ 0x70
 80014c0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80014c2:	2bc7      	cmp	r3, #199	@ 0xc7
 80014c4:	dd95      	ble.n	80013f2 <Gyro_Calibrate+0x42>
    }
    
    gyro_offset_x = sum_x / CALIBRATION_SAMPLES;
 80014c6:	ed97 7a1f 	vldr	s14, [r7, #124]	@ 0x7c
 80014ca:	eddf 6a29 	vldr	s13, [pc, #164]	@ 8001570 <Gyro_Calibrate+0x1c0>
 80014ce:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014d2:	4b28      	ldr	r3, [pc, #160]	@ (8001574 <Gyro_Calibrate+0x1c4>)
 80014d4:	edc3 7a00 	vstr	s15, [r3]
    gyro_offset_y = sum_y / CALIBRATION_SAMPLES;
 80014d8:	ed97 7a1e 	vldr	s14, [r7, #120]	@ 0x78
 80014dc:	eddf 6a24 	vldr	s13, [pc, #144]	@ 8001570 <Gyro_Calibrate+0x1c0>
 80014e0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014e4:	4b24      	ldr	r3, [pc, #144]	@ (8001578 <Gyro_Calibrate+0x1c8>)
 80014e6:	edc3 7a00 	vstr	s15, [r3]
    gyro_offset_z = sum_z / CALIBRATION_SAMPLES;
 80014ea:	ed97 7a1d 	vldr	s14, [r7, #116]	@ 0x74
 80014ee:	eddf 6a20 	vldr	s13, [pc, #128]	@ 8001570 <Gyro_Calibrate+0x1c0>
 80014f2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014f6:	4b21      	ldr	r3, [pc, #132]	@ (800157c <Gyro_Calibrate+0x1cc>)
 80014f8:	edc3 7a00 	vstr	s15, [r3]
    
    sprintf(buffer, "✅ Gyro calibrated! Offsets: X=%.1f Y=%.1f Z=%.1f\r\n", 
 80014fc:	4b1d      	ldr	r3, [pc, #116]	@ (8001574 <Gyro_Calibrate+0x1c4>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	4618      	mov	r0, r3
 8001502:	f7ff f831 	bl	8000568 <__aeabi_f2d>
 8001506:	4680      	mov	r8, r0
 8001508:	4689      	mov	r9, r1
 800150a:	4b1b      	ldr	r3, [pc, #108]	@ (8001578 <Gyro_Calibrate+0x1c8>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	4618      	mov	r0, r3
 8001510:	f7ff f82a 	bl	8000568 <__aeabi_f2d>
 8001514:	4604      	mov	r4, r0
 8001516:	460d      	mov	r5, r1
 8001518:	4b18      	ldr	r3, [pc, #96]	@ (800157c <Gyro_Calibrate+0x1cc>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	4618      	mov	r0, r3
 800151e:	f7ff f823 	bl	8000568 <__aeabi_f2d>
 8001522:	4602      	mov	r2, r0
 8001524:	460b      	mov	r3, r1
 8001526:	1d38      	adds	r0, r7, #4
 8001528:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800152c:	e9cd 4500 	strd	r4, r5, [sp]
 8001530:	4642      	mov	r2, r8
 8001532:	464b      	mov	r3, r9
 8001534:	4912      	ldr	r1, [pc, #72]	@ (8001580 <Gyro_Calibrate+0x1d0>)
 8001536:	f009 f857 	bl	800a5e8 <siprintf>
            gyro_offset_x, gyro_offset_y, gyro_offset_z);
    HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 800153a:	1d3b      	adds	r3, r7, #4
 800153c:	4618      	mov	r0, r3
 800153e:	f7fe fea7 	bl	8000290 <strlen>
 8001542:	4603      	mov	r3, r0
 8001544:	b29a      	uxth	r2, r3
 8001546:	1d39      	adds	r1, r7, #4
 8001548:	f04f 33ff 	mov.w	r3, #4294967295
 800154c:	4804      	ldr	r0, [pc, #16]	@ (8001560 <Gyro_Calibrate+0x1b0>)
 800154e:	f004 fa89 	bl	8005a64 <HAL_UART_Transmit>
}
 8001552:	bf00      	nop
 8001554:	3780      	adds	r7, #128	@ 0x80
 8001556:	46bd      	mov	sp, r7
 8001558:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800155c:	0800c868 	.word	0x0800c868
 8001560:	20000358 	.word	0x20000358
 8001564:	20000490 	.word	0x20000490
 8001568:	20000304 	.word	0x20000304
 800156c:	41833333 	.word	0x41833333
 8001570:	43480000 	.word	0x43480000
 8001574:	200004a8 	.word	0x200004a8
 8001578:	200004ac 	.word	0x200004ac
 800157c:	200004b0 	.word	0x200004b0
 8001580:	0800c894 	.word	0x0800c894

08001584 <Send_Mouse_HID>:
  * @param  dy: Delta Y (-127 to 127) 
  * @param  buttons: Button state (bit 0: left, bit 1: right)
  * @retval None
  */
void Send_Mouse_HID(int8_t dx, int8_t dy, uint8_t buttons)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b09c      	sub	sp, #112	@ 0x70
 8001588:	af02      	add	r7, sp, #8
 800158a:	4603      	mov	r3, r0
 800158c:	71fb      	strb	r3, [r7, #7]
 800158e:	460b      	mov	r3, r1
 8001590:	71bb      	strb	r3, [r7, #6]
 8001592:	4613      	mov	r3, r2
 8001594:	717b      	strb	r3, [r7, #5]
    static uint32_t busy_count = 0;
    
    // Kiểm tra USB đã sẵn sàng chưa
    if(!usb_ready) {
 8001596:	4b54      	ldr	r3, [pc, #336]	@ (80016e8 <Send_Mouse_HID+0x164>)
 8001598:	781b      	ldrb	r3, [r3, #0]
 800159a:	2b00      	cmp	r3, #0
 800159c:	f000 809d 	beq.w	80016da <Send_Mouse_HID+0x156>
        return; // Không spam debug message
    }
    
    // Rate limiting: gửi mỗi 8ms (125Hz) - tần số ổn định cho USB HS
    uint32_t current_time = HAL_GetTick();
 80015a0:	f000 ff98 	bl	80024d4 <HAL_GetTick>
 80015a4:	6678      	str	r0, [r7, #100]	@ 0x64
    if(current_time - last_hid_time < 8) {
 80015a6:	4b51      	ldr	r3, [pc, #324]	@ (80016ec <Send_Mouse_HID+0x168>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80015ac:	1ad3      	subs	r3, r2, r3
 80015ae:	2b07      	cmp	r3, #7
 80015b0:	f240 8095 	bls.w	80016de <Send_Mouse_HID+0x15a>
        return; // Quá sớm, skip report này
    }
    last_hid_time = current_time;
 80015b4:	4a4d      	ldr	r2, [pc, #308]	@ (80016ec <Send_Mouse_HID+0x168>)
 80015b6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80015b8:	6013      	str	r3, [r2, #0]
    mouseHID mousehid = {0};
 80015ba:	2300      	movs	r3, #0
 80015bc:	65fb      	str	r3, [r7, #92]	@ 0x5c
    
    // Tạo HID report theo standard mouse format
    mousehid.buttons = buttons;
 80015be:	797b      	ldrb	r3, [r7, #5]
 80015c0:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
    mousehid.dx = dx;
 80015c4:	79fb      	ldrb	r3, [r7, #7]
 80015c6:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
    mousehid.dy = dy;
 80015ca:	79bb      	ldrb	r3, [r7, #6]
 80015cc:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
    mousehid.wheel = 0;
 80015d0:	2300      	movs	r3, #0
 80015d2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
    
    USBD_StatusTypeDef result = USBD_HID_SendReport(&hUsbDeviceHS, (uint8_t*)&mousehid, sizeof(mousehid));
 80015d6:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80015da:	2204      	movs	r2, #4
 80015dc:	4619      	mov	r1, r3
 80015de:	4844      	ldr	r0, [pc, #272]	@ (80016f0 <Send_Mouse_HID+0x16c>)
 80015e0:	f006 fb00 	bl	8007be4 <USBD_HID_SendReport>
 80015e4:	4603      	mov	r3, r0
 80015e6:	f887 3063 	strb.w	r3, [r7, #99]	@ 0x63
    
    if(result == USBD_OK) {
 80015ea:	f897 3063 	ldrb.w	r3, [r7, #99]	@ 0x63
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d12f      	bne.n	8001652 <Send_Mouse_HID+0xce>
        mouse_packets_sent++;
 80015f2:	4b40      	ldr	r3, [pc, #256]	@ (80016f4 <Send_Mouse_HID+0x170>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	3301      	adds	r3, #1
 80015f8:	4a3e      	ldr	r2, [pc, #248]	@ (80016f4 <Send_Mouse_HID+0x170>)
 80015fa:	6013      	str	r3, [r2, #0]
        busy_count = 0; // Reset busy counter khi thành công
 80015fc:	4b3e      	ldr	r3, [pc, #248]	@ (80016f8 <Send_Mouse_HID+0x174>)
 80015fe:	2200      	movs	r2, #0
 8001600:	601a      	str	r2, [r3, #0]
        
        // Debug thành công (hiện ít thôi để không spam)
        if(mouse_packets_sent % 200 == 1) {
 8001602:	4b3c      	ldr	r3, [pc, #240]	@ (80016f4 <Send_Mouse_HID+0x170>)
 8001604:	681a      	ldr	r2, [r3, #0]
 8001606:	4b3d      	ldr	r3, [pc, #244]	@ (80016fc <Send_Mouse_HID+0x178>)
 8001608:	fba3 1302 	umull	r1, r3, r3, r2
 800160c:	099b      	lsrs	r3, r3, #6
 800160e:	21c8      	movs	r1, #200	@ 0xc8
 8001610:	fb01 f303 	mul.w	r3, r1, r3
 8001614:	1ad3      	subs	r3, r2, r3
 8001616:	2b01      	cmp	r3, #1
 8001618:	d162      	bne.n	80016e0 <Send_Mouse_HID+0x15c>
            char debug_msg[80];
            sprintf(debug_msg, "✅ USB OK: #%lu (dx=%d, dy=%d)\r\n", 
 800161a:	4b36      	ldr	r3, [pc, #216]	@ (80016f4 <Send_Mouse_HID+0x170>)
 800161c:	681a      	ldr	r2, [r3, #0]
 800161e:	f997 1007 	ldrsb.w	r1, [r7, #7]
 8001622:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001626:	f107 000c 	add.w	r0, r7, #12
 800162a:	9300      	str	r3, [sp, #0]
 800162c:	460b      	mov	r3, r1
 800162e:	4934      	ldr	r1, [pc, #208]	@ (8001700 <Send_Mouse_HID+0x17c>)
 8001630:	f008 ffda 	bl	800a5e8 <siprintf>
                    mouse_packets_sent, dx, dy);
            HAL_UART_Transmit(&huart1, (uint8_t*)debug_msg, strlen(debug_msg), HAL_MAX_DELAY);
 8001634:	f107 030c 	add.w	r3, r7, #12
 8001638:	4618      	mov	r0, r3
 800163a:	f7fe fe29 	bl	8000290 <strlen>
 800163e:	4603      	mov	r3, r0
 8001640:	b29a      	uxth	r2, r3
 8001642:	f107 010c 	add.w	r1, r7, #12
 8001646:	f04f 33ff 	mov.w	r3, #4294967295
 800164a:	482e      	ldr	r0, [pc, #184]	@ (8001704 <Send_Mouse_HID+0x180>)
 800164c:	f004 fa0a 	bl	8005a64 <HAL_UART_Transmit>
 8001650:	e046      	b.n	80016e0 <Send_Mouse_HID+0x15c>
        }
    }
    else if(result == 3) { // USBD_BUSY
 8001652:	f897 3063 	ldrb.w	r3, [r7, #99]	@ 0x63
 8001656:	2b03      	cmp	r3, #3
 8001658:	d11c      	bne.n	8001694 <Send_Mouse_HID+0x110>
        busy_count++;
 800165a:	4b27      	ldr	r3, [pc, #156]	@ (80016f8 <Send_Mouse_HID+0x174>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	3301      	adds	r3, #1
 8001660:	4a25      	ldr	r2, [pc, #148]	@ (80016f8 <Send_Mouse_HID+0x174>)
 8001662:	6013      	str	r3, [r2, #0]
        // Tự động điều chỉnh tần số gửi khi busy
        if(busy_count >= 20) {
 8001664:	4b24      	ldr	r3, [pc, #144]	@ (80016f8 <Send_Mouse_HID+0x174>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	2b13      	cmp	r3, #19
 800166a:	d939      	bls.n	80016e0 <Send_Mouse_HID+0x15c>
            last_hid_time += 10; // Tăng delay để giảm tần số
 800166c:	4b1f      	ldr	r3, [pc, #124]	@ (80016ec <Send_Mouse_HID+0x168>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	330a      	adds	r3, #10
 8001672:	4a1e      	ldr	r2, [pc, #120]	@ (80016ec <Send_Mouse_HID+0x168>)
 8001674:	6013      	str	r3, [r2, #0]
            if(busy_count >= 50) {
 8001676:	4b20      	ldr	r3, [pc, #128]	@ (80016f8 <Send_Mouse_HID+0x174>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	2b31      	cmp	r3, #49	@ 0x31
 800167c:	d930      	bls.n	80016e0 <Send_Mouse_HID+0x15c>
                HAL_UART_Transmit(&huart1, (uint8_t*)"⚠️  USB busy (auto-adjusting rate)\r\n", 37, HAL_MAX_DELAY);
 800167e:	f04f 33ff 	mov.w	r3, #4294967295
 8001682:	2225      	movs	r2, #37	@ 0x25
 8001684:	4920      	ldr	r1, [pc, #128]	@ (8001708 <Send_Mouse_HID+0x184>)
 8001686:	481f      	ldr	r0, [pc, #124]	@ (8001704 <Send_Mouse_HID+0x180>)
 8001688:	f004 f9ec 	bl	8005a64 <HAL_UART_Transmit>
                busy_count = 0; // Reset để không spam
 800168c:	4b1a      	ldr	r3, [pc, #104]	@ (80016f8 <Send_Mouse_HID+0x174>)
 800168e:	2200      	movs	r2, #0
 8001690:	601a      	str	r2, [r3, #0]
 8001692:	e025      	b.n	80016e0 <Send_Mouse_HID+0x15c>
            }
        }
    }
    else {
        // Lỗi khác
        if(debug_counter % 100 == 0) { // Hiện ít thôi
 8001694:	4b1d      	ldr	r3, [pc, #116]	@ (800170c <Send_Mouse_HID+0x188>)
 8001696:	681a      	ldr	r2, [r3, #0]
 8001698:	4b18      	ldr	r3, [pc, #96]	@ (80016fc <Send_Mouse_HID+0x178>)
 800169a:	fba3 1302 	umull	r1, r3, r3, r2
 800169e:	095b      	lsrs	r3, r3, #5
 80016a0:	2164      	movs	r1, #100	@ 0x64
 80016a2:	fb01 f303 	mul.w	r3, r1, r3
 80016a6:	1ad3      	subs	r3, r2, r3
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d119      	bne.n	80016e0 <Send_Mouse_HID+0x15c>
            char debug_msg[60];
            sprintf(debug_msg, "❌ USB Error: %d\r\n", result);
 80016ac:	f897 2063 	ldrb.w	r2, [r7, #99]	@ 0x63
 80016b0:	f107 030c 	add.w	r3, r7, #12
 80016b4:	4916      	ldr	r1, [pc, #88]	@ (8001710 <Send_Mouse_HID+0x18c>)
 80016b6:	4618      	mov	r0, r3
 80016b8:	f008 ff96 	bl	800a5e8 <siprintf>
            HAL_UART_Transmit(&huart1, (uint8_t*)debug_msg, strlen(debug_msg), HAL_MAX_DELAY);
 80016bc:	f107 030c 	add.w	r3, r7, #12
 80016c0:	4618      	mov	r0, r3
 80016c2:	f7fe fde5 	bl	8000290 <strlen>
 80016c6:	4603      	mov	r3, r0
 80016c8:	b29a      	uxth	r2, r3
 80016ca:	f107 010c 	add.w	r1, r7, #12
 80016ce:	f04f 33ff 	mov.w	r3, #4294967295
 80016d2:	480c      	ldr	r0, [pc, #48]	@ (8001704 <Send_Mouse_HID+0x180>)
 80016d4:	f004 f9c6 	bl	8005a64 <HAL_UART_Transmit>
 80016d8:	e002      	b.n	80016e0 <Send_Mouse_HID+0x15c>
        return; // Không spam debug message
 80016da:	bf00      	nop
 80016dc:	e000      	b.n	80016e0 <Send_Mouse_HID+0x15c>
        return; // Quá sớm, skip report này
 80016de:	bf00      	nop
        }
    }
}
 80016e0:	3768      	adds	r7, #104	@ 0x68
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	200004bc 	.word	0x200004bc
 80016ec:	200004c0 	.word	0x200004c0
 80016f0:	200004d8 	.word	0x200004d8
 80016f4:	200004b8 	.word	0x200004b8
 80016f8:	200004c4 	.word	0x200004c4
 80016fc:	51eb851f 	.word	0x51eb851f
 8001700:	0800c8cc 	.word	0x0800c8cc
 8001704:	20000358 	.word	0x20000358
 8001708:	0800c8f0 	.word	0x0800c8f0
 800170c:	200004b4 	.word	0x200004b4
 8001710:	0800c91c 	.word	0x0800c91c
 8001714:	00000000 	.word	0x00000000

08001718 <Process_Gyro_Mouse>:
/**
  * @brief  Xử lý gyroscope data và điều khiển chuột
  * @retval None
  */
void Process_Gyro_Mouse(void)
{
 8001718:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800171c:	b0aa      	sub	sp, #168	@ 0xa8
 800171e:	af06      	add	r7, sp, #24
    if(!mouse_enabled) return;
 8001720:	4bc5      	ldr	r3, [pc, #788]	@ (8001a38 <Process_Gyro_Mouse+0x320>)
 8001722:	781b      	ldrb	r3, [r3, #0]
 8001724:	2b00      	cmp	r3, #0
 8001726:	f000 81af 	beq.w	8001a88 <Process_Gyro_Mouse+0x370>
    
    // Đọc dữ liệu gyroscope từ MPU6050
    if(HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, MPU6050_GYRO_XOUT_H, 1, gyro_data, 6, HAL_MAX_DELAY) == HAL_OK)
 800172a:	f04f 33ff 	mov.w	r3, #4294967295
 800172e:	9302      	str	r3, [sp, #8]
 8001730:	2306      	movs	r3, #6
 8001732:	9301      	str	r3, [sp, #4]
 8001734:	4bc1      	ldr	r3, [pc, #772]	@ (8001a3c <Process_Gyro_Mouse+0x324>)
 8001736:	9300      	str	r3, [sp, #0]
 8001738:	2301      	movs	r3, #1
 800173a:	2243      	movs	r2, #67	@ 0x43
 800173c:	21d0      	movs	r1, #208	@ 0xd0
 800173e:	48c0      	ldr	r0, [pc, #768]	@ (8001a40 <Process_Gyro_Mouse+0x328>)
 8001740:	f001 fc0c 	bl	8002f5c <HAL_I2C_Mem_Read>
 8001744:	4603      	mov	r3, r0
 8001746:	2b00      	cmp	r3, #0
 8001748:	f040 819f 	bne.w	8001a8a <Process_Gyro_Mouse+0x372>
    {
        raw_gyro_x = (int16_t)(gyro_data[0] << 8 | gyro_data[1]);
 800174c:	4bbb      	ldr	r3, [pc, #748]	@ (8001a3c <Process_Gyro_Mouse+0x324>)
 800174e:	781b      	ldrb	r3, [r3, #0]
 8001750:	b21b      	sxth	r3, r3
 8001752:	021b      	lsls	r3, r3, #8
 8001754:	b21a      	sxth	r2, r3
 8001756:	4bb9      	ldr	r3, [pc, #740]	@ (8001a3c <Process_Gyro_Mouse+0x324>)
 8001758:	785b      	ldrb	r3, [r3, #1]
 800175a:	b21b      	sxth	r3, r3
 800175c:	4313      	orrs	r3, r2
 800175e:	b21a      	sxth	r2, r3
 8001760:	4bb8      	ldr	r3, [pc, #736]	@ (8001a44 <Process_Gyro_Mouse+0x32c>)
 8001762:	801a      	strh	r2, [r3, #0]
        raw_gyro_y = (int16_t)(gyro_data[2] << 8 | gyro_data[3]);
 8001764:	4bb5      	ldr	r3, [pc, #724]	@ (8001a3c <Process_Gyro_Mouse+0x324>)
 8001766:	789b      	ldrb	r3, [r3, #2]
 8001768:	b21b      	sxth	r3, r3
 800176a:	021b      	lsls	r3, r3, #8
 800176c:	b21a      	sxth	r2, r3
 800176e:	4bb3      	ldr	r3, [pc, #716]	@ (8001a3c <Process_Gyro_Mouse+0x324>)
 8001770:	78db      	ldrb	r3, [r3, #3]
 8001772:	b21b      	sxth	r3, r3
 8001774:	4313      	orrs	r3, r2
 8001776:	b21a      	sxth	r2, r3
 8001778:	4bb3      	ldr	r3, [pc, #716]	@ (8001a48 <Process_Gyro_Mouse+0x330>)
 800177a:	801a      	strh	r2, [r3, #0]
        raw_gyro_z = (int16_t)(gyro_data[4] << 8 | gyro_data[5]);
 800177c:	4baf      	ldr	r3, [pc, #700]	@ (8001a3c <Process_Gyro_Mouse+0x324>)
 800177e:	791b      	ldrb	r3, [r3, #4]
 8001780:	b21b      	sxth	r3, r3
 8001782:	021b      	lsls	r3, r3, #8
 8001784:	b21a      	sxth	r2, r3
 8001786:	4bad      	ldr	r3, [pc, #692]	@ (8001a3c <Process_Gyro_Mouse+0x324>)
 8001788:	795b      	ldrb	r3, [r3, #5]
 800178a:	b21b      	sxth	r3, r3
 800178c:	4313      	orrs	r3, r2
 800178e:	b21a      	sxth	r2, r3
 8001790:	4bae      	ldr	r3, [pc, #696]	@ (8001a4c <Process_Gyro_Mouse+0x334>)
 8001792:	801a      	strh	r2, [r3, #0]
        
        // Chuyển đổi sang °/s và trừ offset
        float gyro_x_raw = ((float)raw_gyro_x / 16.4f) - gyro_offset_x;
 8001794:	4bab      	ldr	r3, [pc, #684]	@ (8001a44 <Process_Gyro_Mouse+0x32c>)
 8001796:	f9b3 3000 	ldrsh.w	r3, [r3]
 800179a:	ee07 3a90 	vmov	s15, r3
 800179e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017a2:	eddf 6aab 	vldr	s13, [pc, #684]	@ 8001a50 <Process_Gyro_Mouse+0x338>
 80017a6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80017aa:	4baa      	ldr	r3, [pc, #680]	@ (8001a54 <Process_Gyro_Mouse+0x33c>)
 80017ac:	edd3 7a00 	vldr	s15, [r3]
 80017b0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017b4:	edc7 7a22 	vstr	s15, [r7, #136]	@ 0x88
        float gyro_y_raw = ((float)raw_gyro_y / 16.4f) - gyro_offset_y;
 80017b8:	4ba3      	ldr	r3, [pc, #652]	@ (8001a48 <Process_Gyro_Mouse+0x330>)
 80017ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017be:	ee07 3a90 	vmov	s15, r3
 80017c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017c6:	eddf 6aa2 	vldr	s13, [pc, #648]	@ 8001a50 <Process_Gyro_Mouse+0x338>
 80017ca:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80017ce:	4ba2      	ldr	r3, [pc, #648]	@ (8001a58 <Process_Gyro_Mouse+0x340>)
 80017d0:	edd3 7a00 	vldr	s15, [r3]
 80017d4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017d8:	edc7 7a21 	vstr	s15, [r7, #132]	@ 0x84
        float gyro_z_raw = ((float)raw_gyro_z / 16.4f) - gyro_offset_z;
 80017dc:	4b9b      	ldr	r3, [pc, #620]	@ (8001a4c <Process_Gyro_Mouse+0x334>)
 80017de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017e2:	ee07 3a90 	vmov	s15, r3
 80017e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017ea:	eddf 6a99 	vldr	s13, [pc, #612]	@ 8001a50 <Process_Gyro_Mouse+0x338>
 80017ee:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80017f2:	4b9a      	ldr	r3, [pc, #616]	@ (8001a5c <Process_Gyro_Mouse+0x344>)
 80017f4:	edd3 7a00 	vldr	s15, [r3]
 80017f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017fc:	edc7 7a20 	vstr	s15, [r7, #128]	@ 0x80
        
        // Áp dụng Kalman filter để làm mượn
        gyro_x = KalmanFilter_Update(&kalman_gyro_x, gyro_x_raw, 0, 0.01f);
 8001800:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 8001804:	f7fe feb0 	bl	8000568 <__aeabi_f2d>
 8001808:	4602      	mov	r2, r0
 800180a:	460b      	mov	r3, r1
 800180c:	ed9f 2b86 	vldr	d2, [pc, #536]	@ 8001a28 <Process_Gyro_Mouse+0x310>
 8001810:	ed9f 1b87 	vldr	d1, [pc, #540]	@ 8001a30 <Process_Gyro_Mouse+0x318>
 8001814:	ec43 2b10 	vmov	d0, r2, r3
 8001818:	4891      	ldr	r0, [pc, #580]	@ (8001a60 <Process_Gyro_Mouse+0x348>)
 800181a:	f7ff fc0b 	bl	8001034 <KalmanFilter_Update>
 800181e:	ec53 2b10 	vmov	r2, r3, d0
 8001822:	4610      	mov	r0, r2
 8001824:	4619      	mov	r1, r3
 8001826:	f7ff f9cf 	bl	8000bc8 <__aeabi_d2f>
 800182a:	4603      	mov	r3, r0
 800182c:	4a8d      	ldr	r2, [pc, #564]	@ (8001a64 <Process_Gyro_Mouse+0x34c>)
 800182e:	6013      	str	r3, [r2, #0]
        gyro_y = KalmanFilter_Update(&kalman_gyro_y, gyro_y_raw, 0, 0.01f);
 8001830:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 8001834:	f7fe fe98 	bl	8000568 <__aeabi_f2d>
 8001838:	4602      	mov	r2, r0
 800183a:	460b      	mov	r3, r1
 800183c:	ed9f 2b7a 	vldr	d2, [pc, #488]	@ 8001a28 <Process_Gyro_Mouse+0x310>
 8001840:	ed9f 1b7b 	vldr	d1, [pc, #492]	@ 8001a30 <Process_Gyro_Mouse+0x318>
 8001844:	ec43 2b10 	vmov	d0, r2, r3
 8001848:	4887      	ldr	r0, [pc, #540]	@ (8001a68 <Process_Gyro_Mouse+0x350>)
 800184a:	f7ff fbf3 	bl	8001034 <KalmanFilter_Update>
 800184e:	ec53 2b10 	vmov	r2, r3, d0
 8001852:	4610      	mov	r0, r2
 8001854:	4619      	mov	r1, r3
 8001856:	f7ff f9b7 	bl	8000bc8 <__aeabi_d2f>
 800185a:	4603      	mov	r3, r0
 800185c:	4a83      	ldr	r2, [pc, #524]	@ (8001a6c <Process_Gyro_Mouse+0x354>)
 800185e:	6013      	str	r3, [r2, #0]
        gyro_z = KalmanFilter_Update(&kalman_gyro_z, gyro_z_raw, 0, 0.01f);
 8001860:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 8001864:	f7fe fe80 	bl	8000568 <__aeabi_f2d>
 8001868:	4602      	mov	r2, r0
 800186a:	460b      	mov	r3, r1
 800186c:	ed9f 2b6e 	vldr	d2, [pc, #440]	@ 8001a28 <Process_Gyro_Mouse+0x310>
 8001870:	ed9f 1b6f 	vldr	d1, [pc, #444]	@ 8001a30 <Process_Gyro_Mouse+0x318>
 8001874:	ec43 2b10 	vmov	d0, r2, r3
 8001878:	487d      	ldr	r0, [pc, #500]	@ (8001a70 <Process_Gyro_Mouse+0x358>)
 800187a:	f7ff fbdb 	bl	8001034 <KalmanFilter_Update>
 800187e:	ec53 2b10 	vmov	r2, r3, d0
 8001882:	4610      	mov	r0, r2
 8001884:	4619      	mov	r1, r3
 8001886:	f7ff f99f 	bl	8000bc8 <__aeabi_d2f>
 800188a:	4603      	mov	r3, r0
 800188c:	4a79      	ldr	r2, [pc, #484]	@ (8001a74 <Process_Gyro_Mouse+0x35c>)
 800188e:	6013      	str	r3, [r2, #0]
        
        // Calculate mouse movement
        int8_t mouse_dx = 0, mouse_dy = 0;
 8001890:	2300      	movs	r3, #0
 8001892:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
 8001896:	2300      	movs	r3, #0
 8001898:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
        
        // Apply deadzone và calculate movement
        if(abs((int)gyro_x) > GYRO_DEADZONE)
 800189c:	4b71      	ldr	r3, [pc, #452]	@ (8001a64 <Process_Gyro_Mouse+0x34c>)
 800189e:	edd3 7a00 	vldr	s15, [r3]
 80018a2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80018a6:	ee17 3a90 	vmov	r3, s15
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	bfb8      	it	lt
 80018ae:	425b      	neglt	r3, r3
 80018b0:	2b03      	cmp	r3, #3
 80018b2:	dd0f      	ble.n	80018d4 <Process_Gyro_Mouse+0x1bc>
        {
            mouse_dx = (int8_t)(-gyro_x / MOUSE_SENSITIVITY_X); // Invert X for natural movement
 80018b4:	4b6b      	ldr	r3, [pc, #428]	@ (8001a64 <Process_Gyro_Mouse+0x34c>)
 80018b6:	edd3 7a00 	vldr	s15, [r3]
 80018ba:	eeb1 7a67 	vneg.f32	s14, s15
 80018be:	eef1 6a04 	vmov.f32	s13, #20	@ 0x40a00000  5.0
 80018c2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80018c6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80018ca:	edc7 7a01 	vstr	s15, [r7, #4]
 80018ce:	793b      	ldrb	r3, [r7, #4]
 80018d0:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
        }
        
        if(abs((int)gyro_y) > GYRO_DEADZONE)  
 80018d4:	4b65      	ldr	r3, [pc, #404]	@ (8001a6c <Process_Gyro_Mouse+0x354>)
 80018d6:	edd3 7a00 	vldr	s15, [r3]
 80018da:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80018de:	ee17 3a90 	vmov	r3, s15
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	bfb8      	it	lt
 80018e6:	425b      	neglt	r3, r3
 80018e8:	2b03      	cmp	r3, #3
 80018ea:	dd0d      	ble.n	8001908 <Process_Gyro_Mouse+0x1f0>
        {
            mouse_dy = (int8_t)(gyro_y / MOUSE_SENSITIVITY_Y);
 80018ec:	4b5f      	ldr	r3, [pc, #380]	@ (8001a6c <Process_Gyro_Mouse+0x354>)
 80018ee:	ed93 7a00 	vldr	s14, [r3]
 80018f2:	eef1 6a04 	vmov.f32	s13, #20	@ 0x40a00000  5.0
 80018f6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80018fa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80018fe:	edc7 7a01 	vstr	s15, [r7, #4]
 8001902:	793b      	ldrb	r3, [r7, #4]
 8001904:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
        }
        
        // Limit movement
        if(mouse_dx > MAX_MOUSE_MOVE) mouse_dx = MAX_MOUSE_MOVE;
 8001908:	f997 308f 	ldrsb.w	r3, [r7, #143]	@ 0x8f
 800190c:	2b4b      	cmp	r3, #75	@ 0x4b
 800190e:	dd02      	ble.n	8001916 <Process_Gyro_Mouse+0x1fe>
 8001910:	234b      	movs	r3, #75	@ 0x4b
 8001912:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
        if(mouse_dx < -MAX_MOUSE_MOVE) mouse_dx = -MAX_MOUSE_MOVE;
 8001916:	f997 308f 	ldrsb.w	r3, [r7, #143]	@ 0x8f
 800191a:	f113 0f4b 	cmn.w	r3, #75	@ 0x4b
 800191e:	da02      	bge.n	8001926 <Process_Gyro_Mouse+0x20e>
 8001920:	23b5      	movs	r3, #181	@ 0xb5
 8001922:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
        if(mouse_dy > MAX_MOUSE_MOVE) mouse_dy = MAX_MOUSE_MOVE;
 8001926:	f997 308e 	ldrsb.w	r3, [r7, #142]	@ 0x8e
 800192a:	2b4b      	cmp	r3, #75	@ 0x4b
 800192c:	dd02      	ble.n	8001934 <Process_Gyro_Mouse+0x21c>
 800192e:	234b      	movs	r3, #75	@ 0x4b
 8001930:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
        if(mouse_dy < -MAX_MOUSE_MOVE) mouse_dy = -MAX_MOUSE_MOVE;
 8001934:	f997 308e 	ldrsb.w	r3, [r7, #142]	@ 0x8e
 8001938:	f113 0f4b 	cmn.w	r3, #75	@ 0x4b
 800193c:	da02      	bge.n	8001944 <Process_Gyro_Mouse+0x22c>
 800193e:	23b5      	movs	r3, #181	@ 0xb5
 8001940:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
        
        // Đọc trạng thái buttons (nếu có GPIO setup)
        uint8_t buttons = 0;
 8001944:	2300      	movs	r3, #0
 8001946:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
        if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2) == GPIO_PIN_SET) buttons |= 0x01; // Left click (PA2)
 800194a:	2104      	movs	r1, #4
 800194c:	484a      	ldr	r0, [pc, #296]	@ (8001a78 <Process_Gyro_Mouse+0x360>)
 800194e:	f001 f8af 	bl	8002ab0 <HAL_GPIO_ReadPin>
 8001952:	4603      	mov	r3, r0
 8001954:	2b01      	cmp	r3, #1
 8001956:	d105      	bne.n	8001964 <Process_Gyro_Mouse+0x24c>
 8001958:	f897 308d 	ldrb.w	r3, [r7, #141]	@ 0x8d
 800195c:	f043 0301 	orr.w	r3, r3, #1
 8001960:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
        if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3) == GPIO_PIN_SET) buttons |= 0x02; // Right click (PA3)
 8001964:	2108      	movs	r1, #8
 8001966:	4844      	ldr	r0, [pc, #272]	@ (8001a78 <Process_Gyro_Mouse+0x360>)
 8001968:	f001 f8a2 	bl	8002ab0 <HAL_GPIO_ReadPin>
 800196c:	4603      	mov	r3, r0
 800196e:	2b01      	cmp	r3, #1
 8001970:	d105      	bne.n	800197e <Process_Gyro_Mouse+0x266>
 8001972:	f897 308d 	ldrb.w	r3, [r7, #141]	@ 0x8d
 8001976:	f043 0302 	orr.w	r3, r3, #2
 800197a:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
        
        // Gửi mouse movement qua USB HID nếu có movement hoặc button press
        if(mouse_dx != 0 || mouse_dy != 0 || buttons != 0)
 800197e:	f997 308f 	ldrsb.w	r3, [r7, #143]	@ 0x8f
 8001982:	2b00      	cmp	r3, #0
 8001984:	d107      	bne.n	8001996 <Process_Gyro_Mouse+0x27e>
 8001986:	f997 308e 	ldrsb.w	r3, [r7, #142]	@ 0x8e
 800198a:	2b00      	cmp	r3, #0
 800198c:	d103      	bne.n	8001996 <Process_Gyro_Mouse+0x27e>
 800198e:	f897 308d 	ldrb.w	r3, [r7, #141]	@ 0x8d
 8001992:	2b00      	cmp	r3, #0
 8001994:	d079      	beq.n	8001a8a <Process_Gyro_Mouse+0x372>
        {
            Send_Mouse_HID(mouse_dx, mouse_dy, buttons);
 8001996:	f897 208d 	ldrb.w	r2, [r7, #141]	@ 0x8d
 800199a:	f997 108e 	ldrsb.w	r1, [r7, #142]	@ 0x8e
 800199e:	f997 308f 	ldrsb.w	r3, [r7, #143]	@ 0x8f
 80019a2:	4618      	mov	r0, r3
 80019a4:	f7ff fdee 	bl	8001584 <Send_Mouse_HID>
            
            // Debug output cho movement (hiện mọi movement để debug)
            if(abs(mouse_dx) >= 1 || abs(mouse_dy) >= 1 || buttons != 0) {
 80019a8:	f997 308f 	ldrsb.w	r3, [r7, #143]	@ 0x8f
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	bfb8      	it	lt
 80019b0:	425b      	neglt	r3, r3
 80019b2:	b2db      	uxtb	r3, r3
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d10b      	bne.n	80019d0 <Process_Gyro_Mouse+0x2b8>
 80019b8:	f997 308e 	ldrsb.w	r3, [r7, #142]	@ 0x8e
 80019bc:	2b00      	cmp	r3, #0
 80019be:	bfb8      	it	lt
 80019c0:	425b      	neglt	r3, r3
 80019c2:	b2db      	uxtb	r3, r3
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d103      	bne.n	80019d0 <Process_Gyro_Mouse+0x2b8>
 80019c8:	f897 308d 	ldrb.w	r3, [r7, #141]	@ 0x8d
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d05c      	beq.n	8001a8a <Process_Gyro_Mouse+0x372>
                char debug_buffer[120];
                sprintf(debug_buffer, "🖱️  Move: dx=%d dy=%d | Gyro: gx=%.1f gy=%.1f | Btn=%d\r\n", 
 80019d0:	f997 608f 	ldrsb.w	r6, [r7, #143]	@ 0x8f
 80019d4:	f997 808e 	ldrsb.w	r8, [r7, #142]	@ 0x8e
 80019d8:	4b22      	ldr	r3, [pc, #136]	@ (8001a64 <Process_Gyro_Mouse+0x34c>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4618      	mov	r0, r3
 80019de:	f7fe fdc3 	bl	8000568 <__aeabi_f2d>
 80019e2:	4604      	mov	r4, r0
 80019e4:	460d      	mov	r5, r1
 80019e6:	4b21      	ldr	r3, [pc, #132]	@ (8001a6c <Process_Gyro_Mouse+0x354>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4618      	mov	r0, r3
 80019ec:	f7fe fdbc 	bl	8000568 <__aeabi_f2d>
 80019f0:	4602      	mov	r2, r0
 80019f2:	460b      	mov	r3, r1
 80019f4:	f897 108d 	ldrb.w	r1, [r7, #141]	@ 0x8d
 80019f8:	f107 0008 	add.w	r0, r7, #8
 80019fc:	9104      	str	r1, [sp, #16]
 80019fe:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001a02:	e9cd 4500 	strd	r4, r5, [sp]
 8001a06:	4643      	mov	r3, r8
 8001a08:	4632      	mov	r2, r6
 8001a0a:	491c      	ldr	r1, [pc, #112]	@ (8001a7c <Process_Gyro_Mouse+0x364>)
 8001a0c:	f008 fdec 	bl	800a5e8 <siprintf>
                        mouse_dx, mouse_dy, gyro_x, gyro_y, buttons);
                HAL_UART_Transmit(&huart1, (uint8_t*)debug_buffer, strlen(debug_buffer), HAL_MAX_DELAY);
 8001a10:	f107 0308 	add.w	r3, r7, #8
 8001a14:	4618      	mov	r0, r3
 8001a16:	f7fe fc3b 	bl	8000290 <strlen>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	b29a      	uxth	r2, r3
 8001a1e:	f107 0108 	add.w	r1, r7, #8
 8001a22:	f04f 33ff 	mov.w	r3, #4294967295
 8001a26:	e02b      	b.n	8001a80 <Process_Gyro_Mouse+0x368>
 8001a28:	40000000 	.word	0x40000000
 8001a2c:	3f847ae1 	.word	0x3f847ae1
	...
 8001a38:	20000000 	.word	0x20000000
 8001a3c:	20000490 	.word	0x20000490
 8001a40:	20000304 	.word	0x20000304
 8001a44:	20000496 	.word	0x20000496
 8001a48:	20000498 	.word	0x20000498
 8001a4c:	2000049a 	.word	0x2000049a
 8001a50:	41833333 	.word	0x41833333
 8001a54:	200004a8 	.word	0x200004a8
 8001a58:	200004ac 	.word	0x200004ac
 8001a5c:	200004b0 	.word	0x200004b0
 8001a60:	200003a0 	.word	0x200003a0
 8001a64:	2000049c 	.word	0x2000049c
 8001a68:	200003f0 	.word	0x200003f0
 8001a6c:	200004a0 	.word	0x200004a0
 8001a70:	20000440 	.word	0x20000440
 8001a74:	200004a4 	.word	0x200004a4
 8001a78:	40020000 	.word	0x40020000
 8001a7c:	0800c930 	.word	0x0800c930
 8001a80:	4804      	ldr	r0, [pc, #16]	@ (8001a94 <Process_Gyro_Mouse+0x37c>)
 8001a82:	f003 ffef 	bl	8005a64 <HAL_UART_Transmit>
 8001a86:	e000      	b.n	8001a8a <Process_Gyro_Mouse+0x372>
    if(!mouse_enabled) return;
 8001a88:	bf00      	nop
            }
        }
    }
}
 8001a8a:	3790      	adds	r7, #144	@ 0x90
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001a92:	bf00      	nop
 8001a94:	20000358 	.word	0x20000358

08001a98 <Debug_Print_Status>:
/**
  * @brief  In debug status mỗi 5 giây
  * @retval None
  */
void Debug_Print_Status(void)
{
 8001a98:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001a9c:	b0b1      	sub	sp, #196	@ 0xc4
 8001a9e:	af08      	add	r7, sp, #32
    char status_buffer[150];
    debug_counter++;
 8001aa0:	4b24      	ldr	r3, [pc, #144]	@ (8001b34 <Debug_Print_Status+0x9c>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	3301      	adds	r3, #1
 8001aa6:	4a23      	ldr	r2, [pc, #140]	@ (8001b34 <Debug_Print_Status+0x9c>)
 8001aa8:	6013      	str	r3, [r2, #0]
    
    sprintf(status_buffer, "📊 Status #%lu: Mouse %s | Packets: %lu | Offsets: X=%.1f Y=%.1f Z=%.1f\r\n", 
 8001aaa:	4b22      	ldr	r3, [pc, #136]	@ (8001b34 <Debug_Print_Status+0x9c>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	603b      	str	r3, [r7, #0]
            debug_counter, 
            mouse_enabled ? "ON" : "OFF",
 8001ab0:	4b21      	ldr	r3, [pc, #132]	@ (8001b38 <Debug_Print_Status+0xa0>)
 8001ab2:	781b      	ldrb	r3, [r3, #0]
    sprintf(status_buffer, "📊 Status #%lu: Mouse %s | Packets: %lu | Offsets: X=%.1f Y=%.1f Z=%.1f\r\n", 
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d002      	beq.n	8001abe <Debug_Print_Status+0x26>
 8001ab8:	4b20      	ldr	r3, [pc, #128]	@ (8001b3c <Debug_Print_Status+0xa4>)
 8001aba:	607b      	str	r3, [r7, #4]
 8001abc:	e001      	b.n	8001ac2 <Debug_Print_Status+0x2a>
 8001abe:	4b20      	ldr	r3, [pc, #128]	@ (8001b40 <Debug_Print_Status+0xa8>)
 8001ac0:	607b      	str	r3, [r7, #4]
 8001ac2:	4b20      	ldr	r3, [pc, #128]	@ (8001b44 <Debug_Print_Status+0xac>)
 8001ac4:	681e      	ldr	r6, [r3, #0]
 8001ac6:	4b20      	ldr	r3, [pc, #128]	@ (8001b48 <Debug_Print_Status+0xb0>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4618      	mov	r0, r3
 8001acc:	f7fe fd4c 	bl	8000568 <__aeabi_f2d>
 8001ad0:	4604      	mov	r4, r0
 8001ad2:	460d      	mov	r5, r1
 8001ad4:	4b1d      	ldr	r3, [pc, #116]	@ (8001b4c <Debug_Print_Status+0xb4>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4618      	mov	r0, r3
 8001ada:	f7fe fd45 	bl	8000568 <__aeabi_f2d>
 8001ade:	4680      	mov	r8, r0
 8001ae0:	4689      	mov	r9, r1
 8001ae2:	4b1b      	ldr	r3, [pc, #108]	@ (8001b50 <Debug_Print_Status+0xb8>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f7fe fd3e 	bl	8000568 <__aeabi_f2d>
 8001aec:	4602      	mov	r2, r0
 8001aee:	460b      	mov	r3, r1
 8001af0:	f107 0008 	add.w	r0, r7, #8
 8001af4:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8001af8:	e9cd 8904 	strd	r8, r9, [sp, #16]
 8001afc:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8001b00:	9600      	str	r6, [sp, #0]
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	683a      	ldr	r2, [r7, #0]
 8001b06:	4913      	ldr	r1, [pc, #76]	@ (8001b54 <Debug_Print_Status+0xbc>)
 8001b08:	f008 fd6e 	bl	800a5e8 <siprintf>
            mouse_packets_sent,
            gyro_offset_x, gyro_offset_y, gyro_offset_z);
    HAL_UART_Transmit(&huart1, (uint8_t*)status_buffer, strlen(status_buffer), HAL_MAX_DELAY);
 8001b0c:	f107 0308 	add.w	r3, r7, #8
 8001b10:	4618      	mov	r0, r3
 8001b12:	f7fe fbbd 	bl	8000290 <strlen>
 8001b16:	4603      	mov	r3, r0
 8001b18:	b29a      	uxth	r2, r3
 8001b1a:	f107 0108 	add.w	r1, r7, #8
 8001b1e:	f04f 33ff 	mov.w	r3, #4294967295
 8001b22:	480d      	ldr	r0, [pc, #52]	@ (8001b58 <Debug_Print_Status+0xc0>)
 8001b24:	f003 ff9e 	bl	8005a64 <HAL_UART_Transmit>
}
 8001b28:	bf00      	nop
 8001b2a:	37a4      	adds	r7, #164	@ 0xa4
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001b32:	bf00      	nop
 8001b34:	200004b4 	.word	0x200004b4
 8001b38:	20000000 	.word	0x20000000
 8001b3c:	0800c970 	.word	0x0800c970
 8001b40:	0800c974 	.word	0x0800c974
 8001b44:	200004b8 	.word	0x200004b8
 8001b48:	200004a8 	.word	0x200004a8
 8001b4c:	200004ac 	.word	0x200004ac
 8001b50:	200004b0 	.word	0x200004b0
 8001b54:	0800c978 	.word	0x0800c978
 8001b58:	20000358 	.word	0x20000358

08001b5c <Test_Mouse_Movement>:
/**
  * @brief  Test mouse movement để verify USB HID
  * @retval None
  */
void Test_Mouse_Movement(void)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	af00      	add	r7, sp, #0
    HAL_UART_Transmit(&huart1, (uint8_t*)"🧪 Testing USB HID mouse...\r\n", 30, HAL_MAX_DELAY);
 8001b60:	f04f 33ff 	mov.w	r3, #4294967295
 8001b64:	221e      	movs	r2, #30
 8001b66:	4919      	ldr	r1, [pc, #100]	@ (8001bcc <Test_Mouse_Movement+0x70>)
 8001b68:	4819      	ldr	r0, [pc, #100]	@ (8001bd0 <Test_Mouse_Movement+0x74>)
 8001b6a:	f003 ff7b 	bl	8005a64 <HAL_UART_Transmit>
    
    // Test với timing tốt hơn cho USB HID
    HAL_Delay(100); // Wait trước khi test
 8001b6e:	2064      	movs	r0, #100	@ 0x64
 8001b70:	f000 fcbc 	bl	80024ec <HAL_Delay>
    Send_Mouse_HID(5, 0, 0);   // Right (nhỏ hơn)
 8001b74:	2200      	movs	r2, #0
 8001b76:	2100      	movs	r1, #0
 8001b78:	2005      	movs	r0, #5
 8001b7a:	f7ff fd03 	bl	8001584 <Send_Mouse_HID>
    HAL_Delay(50);
 8001b7e:	2032      	movs	r0, #50	@ 0x32
 8001b80:	f000 fcb4 	bl	80024ec <HAL_Delay>
    Send_Mouse_HID(0, 5, 0);   // Down
 8001b84:	2200      	movs	r2, #0
 8001b86:	2105      	movs	r1, #5
 8001b88:	2000      	movs	r0, #0
 8001b8a:	f7ff fcfb 	bl	8001584 <Send_Mouse_HID>
    HAL_Delay(50);
 8001b8e:	2032      	movs	r0, #50	@ 0x32
 8001b90:	f000 fcac 	bl	80024ec <HAL_Delay>
    Send_Mouse_HID(-5, 0, 0);  // Left
 8001b94:	2200      	movs	r2, #0
 8001b96:	2100      	movs	r1, #0
 8001b98:	f06f 0004 	mvn.w	r0, #4
 8001b9c:	f7ff fcf2 	bl	8001584 <Send_Mouse_HID>
    HAL_Delay(50);
 8001ba0:	2032      	movs	r0, #50	@ 0x32
 8001ba2:	f000 fca3 	bl	80024ec <HAL_Delay>
    Send_Mouse_HID(0, -5, 0);  // Up
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	f06f 0104 	mvn.w	r1, #4
 8001bac:	2000      	movs	r0, #0
 8001bae:	f7ff fce9 	bl	8001584 <Send_Mouse_HID>
    HAL_Delay(50);
 8001bb2:	2032      	movs	r0, #50	@ 0x32
 8001bb4:	f000 fc9a 	bl	80024ec <HAL_Delay>
    
    HAL_UART_Transmit(&huart1, (uint8_t*)"✅ Mouse test completed!\r\n", 27, HAL_MAX_DELAY);
 8001bb8:	f04f 33ff 	mov.w	r3, #4294967295
 8001bbc:	221b      	movs	r2, #27
 8001bbe:	4905      	ldr	r1, [pc, #20]	@ (8001bd4 <Test_Mouse_Movement+0x78>)
 8001bc0:	4803      	ldr	r0, [pc, #12]	@ (8001bd0 <Test_Mouse_Movement+0x74>)
 8001bc2:	f003 ff4f 	bl	8005a64 <HAL_UART_Transmit>
}
 8001bc6:	bf00      	nop
 8001bc8:	bd80      	pop	{r7, pc}
 8001bca:	bf00      	nop
 8001bcc:	0800c9c4 	.word	0x0800c9c4
 8001bd0:	20000358 	.word	0x20000358
 8001bd4:	0800c9e4 	.word	0x0800c9e4

08001bd8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b092      	sub	sp, #72	@ 0x48
 8001bdc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001bde:	f000 fc13 	bl	8002408 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001be2:	f000 f8f9 	bl	8001dd8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001be6:	f000 f9cb 	bl	8001f80 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001bea:	f000 f95f 	bl	8001eac <MX_I2C1_Init>
  MX_USB_DEVICE_Init();
 8001bee:	f007 fb9b 	bl	8009328 <MX_USB_DEVICE_Init>
  MX_USART1_UART_Init();
 8001bf2:	f000 f99b 	bl	8001f2c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  
  // Khởi động thông báo
  HAL_UART_Transmit(&huart1, (uint8_t*)"🚀 STM32 Gyroscope Mouse Started\r\n", 35, HAL_MAX_DELAY);
 8001bf6:	f04f 33ff 	mov.w	r3, #4294967295
 8001bfa:	2223      	movs	r2, #35	@ 0x23
 8001bfc:	4962      	ldr	r1, [pc, #392]	@ (8001d88 <main+0x1b0>)
 8001bfe:	4863      	ldr	r0, [pc, #396]	@ (8001d8c <main+0x1b4>)
 8001c00:	f003 ff30 	bl	8005a64 <HAL_UART_Transmit>
  HAL_Delay(1000);
 8001c04:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001c08:	f000 fc70 	bl	80024ec <HAL_Delay>
  
  // Khởi tạo MPU6050
  HAL_UART_Transmit(&huart1, (uint8_t*)"🔧 Initializing MPU6050...\r\n", 29, HAL_MAX_DELAY);
 8001c0c:	f04f 33ff 	mov.w	r3, #4294967295
 8001c10:	221d      	movs	r2, #29
 8001c12:	495f      	ldr	r1, [pc, #380]	@ (8001d90 <main+0x1b8>)
 8001c14:	485d      	ldr	r0, [pc, #372]	@ (8001d8c <main+0x1b4>)
 8001c16:	f003 ff25 	bl	8005a64 <HAL_UART_Transmit>
  MPU6050_Init();
 8001c1a:	f7ff fb71 	bl	8001300 <MPU6050_Init>
  HAL_UART_Transmit(&huart1, (uint8_t*)"✅ MPU6050 initialized!\r\n", 26, HAL_MAX_DELAY);
 8001c1e:	f04f 33ff 	mov.w	r3, #4294967295
 8001c22:	221a      	movs	r2, #26
 8001c24:	495b      	ldr	r1, [pc, #364]	@ (8001d94 <main+0x1bc>)
 8001c26:	4859      	ldr	r0, [pc, #356]	@ (8001d8c <main+0x1b4>)
 8001c28:	f003 ff1c 	bl	8005a64 <HAL_UART_Transmit>
  HAL_Delay(1000);
 8001c2c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001c30:	f000 fc5c 	bl	80024ec <HAL_Delay>
  
  // Khởi tạo Kalman filters
  HAL_UART_Transmit(&huart1, (uint8_t*)"🔧 Initializing Kalman filters...\r\n", 36, HAL_MAX_DELAY);
 8001c34:	f04f 33ff 	mov.w	r3, #4294967295
 8001c38:	2224      	movs	r2, #36	@ 0x24
 8001c3a:	4957      	ldr	r1, [pc, #348]	@ (8001d98 <main+0x1c0>)
 8001c3c:	4853      	ldr	r0, [pc, #332]	@ (8001d8c <main+0x1b4>)
 8001c3e:	f003 ff11 	bl	8005a64 <HAL_UART_Transmit>
  KalmanFilter_Init(&kalman_gyro_x, 0.001, 0.003, 0.03);
 8001c42:	ed9f 2b4b 	vldr	d2, [pc, #300]	@ 8001d70 <main+0x198>
 8001c46:	ed9f 1b4c 	vldr	d1, [pc, #304]	@ 8001d78 <main+0x1a0>
 8001c4a:	ed9f 0b4d 	vldr	d0, [pc, #308]	@ 8001d80 <main+0x1a8>
 8001c4e:	4853      	ldr	r0, [pc, #332]	@ (8001d9c <main+0x1c4>)
 8001c50:	f7ff f9a0 	bl	8000f94 <KalmanFilter_Init>
  KalmanFilter_Init(&kalman_gyro_y, 0.001, 0.003, 0.03);
 8001c54:	ed9f 2b46 	vldr	d2, [pc, #280]	@ 8001d70 <main+0x198>
 8001c58:	ed9f 1b47 	vldr	d1, [pc, #284]	@ 8001d78 <main+0x1a0>
 8001c5c:	ed9f 0b48 	vldr	d0, [pc, #288]	@ 8001d80 <main+0x1a8>
 8001c60:	484f      	ldr	r0, [pc, #316]	@ (8001da0 <main+0x1c8>)
 8001c62:	f7ff f997 	bl	8000f94 <KalmanFilter_Init>
  KalmanFilter_Init(&kalman_gyro_z, 0.001, 0.003, 0.03);
 8001c66:	ed9f 2b42 	vldr	d2, [pc, #264]	@ 8001d70 <main+0x198>
 8001c6a:	ed9f 1b43 	vldr	d1, [pc, #268]	@ 8001d78 <main+0x1a0>
 8001c6e:	ed9f 0b44 	vldr	d0, [pc, #272]	@ 8001d80 <main+0x1a8>
 8001c72:	484c      	ldr	r0, [pc, #304]	@ (8001da4 <main+0x1cc>)
 8001c74:	f7ff f98e 	bl	8000f94 <KalmanFilter_Init>
  HAL_UART_Transmit(&huart1, (uint8_t*)"✅ Kalman filters ready!\r\n", 27, HAL_MAX_DELAY);
 8001c78:	f04f 33ff 	mov.w	r3, #4294967295
 8001c7c:	221b      	movs	r2, #27
 8001c7e:	494a      	ldr	r1, [pc, #296]	@ (8001da8 <main+0x1d0>)
 8001c80:	4842      	ldr	r0, [pc, #264]	@ (8001d8c <main+0x1b4>)
 8001c82:	f003 feef 	bl	8005a64 <HAL_UART_Transmit>
  
  // Gyroscope calibration
  Gyro_Calibrate();
 8001c86:	f7ff fb93 	bl	80013b0 <Gyro_Calibrate>
  
  // Final setup
  HAL_Delay(1000);
 8001c8a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001c8e:	f000 fc2d 	bl	80024ec <HAL_Delay>
  HAL_UART_Transmit(&huart1, (uint8_t*)"🖱️  Gyroscope Mouse READY! Tilt to move cursor.\r\n", 51, HAL_MAX_DELAY);
 8001c92:	f04f 33ff 	mov.w	r3, #4294967295
 8001c96:	2233      	movs	r2, #51	@ 0x33
 8001c98:	4944      	ldr	r1, [pc, #272]	@ (8001dac <main+0x1d4>)
 8001c9a:	483c      	ldr	r0, [pc, #240]	@ (8001d8c <main+0x1b4>)
 8001c9c:	f003 fee2 	bl	8005a64 <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart1, (uint8_t*)"📌 PA2=Left Click, PA3=Right Click\r\n", 37, HAL_MAX_DELAY);
 8001ca0:	f04f 33ff 	mov.w	r3, #4294967295
 8001ca4:	2225      	movs	r2, #37	@ 0x25
 8001ca6:	4942      	ldr	r1, [pc, #264]	@ (8001db0 <main+0x1d8>)
 8001ca8:	4838      	ldr	r0, [pc, #224]	@ (8001d8c <main+0x1b4>)
 8001caa:	f003 fedb 	bl	8005a64 <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart1, (uint8_t*)"═══════════════════════════════════\r\n", 37, HAL_MAX_DELAY);
 8001cae:	f04f 33ff 	mov.w	r3, #4294967295
 8001cb2:	2225      	movs	r2, #37	@ 0x25
 8001cb4:	493f      	ldr	r1, [pc, #252]	@ (8001db4 <main+0x1dc>)
 8001cb6:	4835      	ldr	r0, [pc, #212]	@ (8001d8c <main+0x1b4>)
 8001cb8:	f003 fed4 	bl	8005a64 <HAL_UART_Transmit>
  
  // Wait for USB HS enumeration (important cho USB HS)
  HAL_UART_Transmit(&huart1, (uint8_t*)"⏳ Waiting for USB HS enumeration...\r\n", 39, HAL_MAX_DELAY);
 8001cbc:	f04f 33ff 	mov.w	r3, #4294967295
 8001cc0:	2227      	movs	r2, #39	@ 0x27
 8001cc2:	493d      	ldr	r1, [pc, #244]	@ (8001db8 <main+0x1e0>)
 8001cc4:	4831      	ldr	r0, [pc, #196]	@ (8001d8c <main+0x1b4>)
 8001cc6:	f003 fecd 	bl	8005a64 <HAL_UART_Transmit>
  HAL_Delay(3000);  // USB HS cần thời gian dài hơn để enumerate
 8001cca:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8001cce:	f000 fc0d 	bl	80024ec <HAL_Delay>
  
  // Enable USB mouse function
  usb_ready = 1;
 8001cd2:	4b3a      	ldr	r3, [pc, #232]	@ (8001dbc <main+0x1e4>)
 8001cd4:	2201      	movs	r2, #1
 8001cd6:	701a      	strb	r2, [r3, #0]
  HAL_UART_Transmit(&huart1, (uint8_t*)"🔌 USB HID Mouse enabled!\r\n", 28, HAL_MAX_DELAY);
 8001cd8:	f04f 33ff 	mov.w	r3, #4294967295
 8001cdc:	221c      	movs	r2, #28
 8001cde:	4938      	ldr	r1, [pc, #224]	@ (8001dc0 <main+0x1e8>)
 8001ce0:	482a      	ldr	r0, [pc, #168]	@ (8001d8c <main+0x1b4>)
 8001ce2:	f003 febf 	bl	8005a64 <HAL_UART_Transmit>
  
  // Test USB HID mouse movement
  Test_Mouse_Movement();
 8001ce6:	f7ff ff39 	bl	8001b5c <Test_Mouse_Movement>
  
  // Hiện thông tin debug đầu tiên
  Debug_Print_Status();
 8001cea:	f7ff fed5 	bl	8001a98 <Debug_Print_Status>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

    // Đọc trạng thái PA2 và PA3 và in ra UART
    GPIO_PinState pa2_state = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2);
 8001cee:	2104      	movs	r1, #4
 8001cf0:	4834      	ldr	r0, [pc, #208]	@ (8001dc4 <main+0x1ec>)
 8001cf2:	f000 fedd 	bl	8002ab0 <HAL_GPIO_ReadPin>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    GPIO_PinState pa3_state = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3);
 8001cfc:	2108      	movs	r1, #8
 8001cfe:	4831      	ldr	r0, [pc, #196]	@ (8001dc4 <main+0x1ec>)
 8001d00:	f000 fed6 	bl	8002ab0 <HAL_GPIO_ReadPin>
 8001d04:	4603      	mov	r3, r0
 8001d06:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46

    char pa_status_msg[64];
    sprintf(pa_status_msg, "PA2: %s | PA3: %s\r\n", 
 8001d0a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8001d0e:	2b01      	cmp	r3, #1
 8001d10:	d101      	bne.n	8001d16 <main+0x13e>
 8001d12:	4a2d      	ldr	r2, [pc, #180]	@ (8001dc8 <main+0x1f0>)
 8001d14:	e000      	b.n	8001d18 <main+0x140>
 8001d16:	4a2d      	ldr	r2, [pc, #180]	@ (8001dcc <main+0x1f4>)
 8001d18:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8001d1c:	2b01      	cmp	r3, #1
 8001d1e:	d101      	bne.n	8001d24 <main+0x14c>
 8001d20:	4b29      	ldr	r3, [pc, #164]	@ (8001dc8 <main+0x1f0>)
 8001d22:	e000      	b.n	8001d26 <main+0x14e>
 8001d24:	4b29      	ldr	r3, [pc, #164]	@ (8001dcc <main+0x1f4>)
 8001d26:	1d38      	adds	r0, r7, #4
 8001d28:	4929      	ldr	r1, [pc, #164]	@ (8001dd0 <main+0x1f8>)
 8001d2a:	f008 fc5d 	bl	800a5e8 <siprintf>
            (pa2_state == GPIO_PIN_SET) ? "HIGH" : "LOW",
            (pa3_state == GPIO_PIN_SET) ? "HIGH" : "LOW");
    HAL_UART_Transmit(&huart1, (uint8_t*)pa_status_msg, strlen(pa_status_msg), HAL_MAX_DELAY);
 8001d2e:	1d3b      	adds	r3, r7, #4
 8001d30:	4618      	mov	r0, r3
 8001d32:	f7fe faad 	bl	8000290 <strlen>
 8001d36:	4603      	mov	r3, r0
 8001d38:	b29a      	uxth	r2, r3
 8001d3a:	1d39      	adds	r1, r7, #4
 8001d3c:	f04f 33ff 	mov.w	r3, #4294967295
 8001d40:	4812      	ldr	r0, [pc, #72]	@ (8001d8c <main+0x1b4>)
 8001d42:	f003 fe8f 	bl	8005a64 <HAL_UART_Transmit>

    Process_Gyro_Mouse();
 8001d46:	f7ff fce7 	bl	8001718 <Process_Gyro_Mouse>

    //Debug status mỗi 5 giây
   static uint32_t last_debug_time = 0;
   if(HAL_GetTick() - last_debug_time > 5000) {
 8001d4a:	f000 fbc3 	bl	80024d4 <HAL_GetTick>
 8001d4e:	4602      	mov	r2, r0
 8001d50:	4b20      	ldr	r3, [pc, #128]	@ (8001dd4 <main+0x1fc>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	1ad3      	subs	r3, r2, r3
 8001d56:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d9c7      	bls.n	8001cee <main+0x116>
       last_debug_time = HAL_GetTick();
 8001d5e:	f000 fbb9 	bl	80024d4 <HAL_GetTick>
 8001d62:	4603      	mov	r3, r0
 8001d64:	4a1b      	ldr	r2, [pc, #108]	@ (8001dd4 <main+0x1fc>)
 8001d66:	6013      	str	r3, [r2, #0]
       Debug_Print_Status();
 8001d68:	f7ff fe96 	bl	8001a98 <Debug_Print_Status>
  {
 8001d6c:	e7bf      	b.n	8001cee <main+0x116>
 8001d6e:	bf00      	nop
 8001d70:	eb851eb8 	.word	0xeb851eb8
 8001d74:	3f9eb851 	.word	0x3f9eb851
 8001d78:	bc6a7efa 	.word	0xbc6a7efa
 8001d7c:	3f689374 	.word	0x3f689374
 8001d80:	d2f1a9fc 	.word	0xd2f1a9fc
 8001d84:	3f50624d 	.word	0x3f50624d
 8001d88:	0800ca00 	.word	0x0800ca00
 8001d8c:	20000358 	.word	0x20000358
 8001d90:	0800ca28 	.word	0x0800ca28
 8001d94:	0800ca48 	.word	0x0800ca48
 8001d98:	0800ca64 	.word	0x0800ca64
 8001d9c:	200003a0 	.word	0x200003a0
 8001da0:	200003f0 	.word	0x200003f0
 8001da4:	20000440 	.word	0x20000440
 8001da8:	0800ca8c 	.word	0x0800ca8c
 8001dac:	0800caa8 	.word	0x0800caa8
 8001db0:	0800cae0 	.word	0x0800cae0
 8001db4:	0800cb08 	.word	0x0800cb08
 8001db8:	0800cb74 	.word	0x0800cb74
 8001dbc:	200004bc 	.word	0x200004bc
 8001dc0:	0800cb9c 	.word	0x0800cb9c
 8001dc4:	40020000 	.word	0x40020000
 8001dc8:	0800cbbc 	.word	0x0800cbbc
 8001dcc:	0800cbc4 	.word	0x0800cbc4
 8001dd0:	0800cbc8 	.word	0x0800cbc8
 8001dd4:	200004c8 	.word	0x200004c8

08001dd8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b094      	sub	sp, #80	@ 0x50
 8001ddc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001dde:	f107 0320 	add.w	r3, r7, #32
 8001de2:	2230      	movs	r2, #48	@ 0x30
 8001de4:	2100      	movs	r1, #0
 8001de6:	4618      	mov	r0, r3
 8001de8:	f008 fc63 	bl	800a6b2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001dec:	f107 030c 	add.w	r3, r7, #12
 8001df0:	2200      	movs	r2, #0
 8001df2:	601a      	str	r2, [r3, #0]
 8001df4:	605a      	str	r2, [r3, #4]
 8001df6:	609a      	str	r2, [r3, #8]
 8001df8:	60da      	str	r2, [r3, #12]
 8001dfa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	60bb      	str	r3, [r7, #8]
 8001e00:	4b28      	ldr	r3, [pc, #160]	@ (8001ea4 <SystemClock_Config+0xcc>)
 8001e02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e04:	4a27      	ldr	r2, [pc, #156]	@ (8001ea4 <SystemClock_Config+0xcc>)
 8001e06:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e0a:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e0c:	4b25      	ldr	r3, [pc, #148]	@ (8001ea4 <SystemClock_Config+0xcc>)
 8001e0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e10:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e14:	60bb      	str	r3, [r7, #8]
 8001e16:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001e18:	2300      	movs	r3, #0
 8001e1a:	607b      	str	r3, [r7, #4]
 8001e1c:	4b22      	ldr	r3, [pc, #136]	@ (8001ea8 <SystemClock_Config+0xd0>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4a21      	ldr	r2, [pc, #132]	@ (8001ea8 <SystemClock_Config+0xd0>)
 8001e22:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001e26:	6013      	str	r3, [r2, #0]
 8001e28:	4b1f      	ldr	r3, [pc, #124]	@ (8001ea8 <SystemClock_Config+0xd0>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001e30:	607b      	str	r3, [r7, #4]
 8001e32:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001e34:	2301      	movs	r3, #1
 8001e36:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001e38:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001e3c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e3e:	2302      	movs	r3, #2
 8001e40:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001e42:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001e46:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001e48:	2304      	movs	r3, #4
 8001e4a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001e4c:	23a8      	movs	r3, #168	@ 0xa8
 8001e4e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001e50:	2302      	movs	r3, #2
 8001e52:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001e54:	2307      	movs	r3, #7
 8001e56:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e58:	f107 0320 	add.w	r3, r7, #32
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	f003 f919 	bl	8005094 <HAL_RCC_OscConfig>
 8001e62:	4603      	mov	r3, r0
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d001      	beq.n	8001e6c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001e68:	f000 f8d4 	bl	8002014 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e6c:	230f      	movs	r3, #15
 8001e6e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e70:	2302      	movs	r3, #2
 8001e72:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e74:	2300      	movs	r3, #0
 8001e76:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001e78:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001e7c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001e7e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001e82:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001e84:	f107 030c 	add.w	r3, r7, #12
 8001e88:	2105      	movs	r1, #5
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	f003 fb7a 	bl	8005584 <HAL_RCC_ClockConfig>
 8001e90:	4603      	mov	r3, r0
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d001      	beq.n	8001e9a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001e96:	f000 f8bd 	bl	8002014 <Error_Handler>
  }
}
 8001e9a:	bf00      	nop
 8001e9c:	3750      	adds	r7, #80	@ 0x50
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}
 8001ea2:	bf00      	nop
 8001ea4:	40023800 	.word	0x40023800
 8001ea8:	40007000 	.word	0x40007000

08001eac <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001eb0:	4b1b      	ldr	r3, [pc, #108]	@ (8001f20 <MX_I2C1_Init+0x74>)
 8001eb2:	4a1c      	ldr	r2, [pc, #112]	@ (8001f24 <MX_I2C1_Init+0x78>)
 8001eb4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001eb6:	4b1a      	ldr	r3, [pc, #104]	@ (8001f20 <MX_I2C1_Init+0x74>)
 8001eb8:	4a1b      	ldr	r2, [pc, #108]	@ (8001f28 <MX_I2C1_Init+0x7c>)
 8001eba:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001ebc:	4b18      	ldr	r3, [pc, #96]	@ (8001f20 <MX_I2C1_Init+0x74>)
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001ec2:	4b17      	ldr	r3, [pc, #92]	@ (8001f20 <MX_I2C1_Init+0x74>)
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001ec8:	4b15      	ldr	r3, [pc, #84]	@ (8001f20 <MX_I2C1_Init+0x74>)
 8001eca:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001ece:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001ed0:	4b13      	ldr	r3, [pc, #76]	@ (8001f20 <MX_I2C1_Init+0x74>)
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001ed6:	4b12      	ldr	r3, [pc, #72]	@ (8001f20 <MX_I2C1_Init+0x74>)
 8001ed8:	2200      	movs	r2, #0
 8001eda:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001edc:	4b10      	ldr	r3, [pc, #64]	@ (8001f20 <MX_I2C1_Init+0x74>)
 8001ede:	2200      	movs	r2, #0
 8001ee0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001ee2:	4b0f      	ldr	r3, [pc, #60]	@ (8001f20 <MX_I2C1_Init+0x74>)
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001ee8:	480d      	ldr	r0, [pc, #52]	@ (8001f20 <MX_I2C1_Init+0x74>)
 8001eea:	f000 fdf9 	bl	8002ae0 <HAL_I2C_Init>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d001      	beq.n	8001ef8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001ef4:	f000 f88e 	bl	8002014 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001ef8:	2100      	movs	r1, #0
 8001efa:	4809      	ldr	r0, [pc, #36]	@ (8001f20 <MX_I2C1_Init+0x74>)
 8001efc:	f001 fe14 	bl	8003b28 <HAL_I2CEx_ConfigAnalogFilter>
 8001f00:	4603      	mov	r3, r0
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d001      	beq.n	8001f0a <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8001f06:	f000 f885 	bl	8002014 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001f0a:	2100      	movs	r1, #0
 8001f0c:	4804      	ldr	r0, [pc, #16]	@ (8001f20 <MX_I2C1_Init+0x74>)
 8001f0e:	f001 fe47 	bl	8003ba0 <HAL_I2CEx_ConfigDigitalFilter>
 8001f12:	4603      	mov	r3, r0
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d001      	beq.n	8001f1c <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8001f18:	f000 f87c 	bl	8002014 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001f1c:	bf00      	nop
 8001f1e:	bd80      	pop	{r7, pc}
 8001f20:	20000304 	.word	0x20000304
 8001f24:	40005400 	.word	0x40005400
 8001f28:	000186a0 	.word	0x000186a0

08001f2c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001f30:	4b11      	ldr	r3, [pc, #68]	@ (8001f78 <MX_USART1_UART_Init+0x4c>)
 8001f32:	4a12      	ldr	r2, [pc, #72]	@ (8001f7c <MX_USART1_UART_Init+0x50>)
 8001f34:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001f36:	4b10      	ldr	r3, [pc, #64]	@ (8001f78 <MX_USART1_UART_Init+0x4c>)
 8001f38:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001f3c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001f3e:	4b0e      	ldr	r3, [pc, #56]	@ (8001f78 <MX_USART1_UART_Init+0x4c>)
 8001f40:	2200      	movs	r2, #0
 8001f42:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001f44:	4b0c      	ldr	r3, [pc, #48]	@ (8001f78 <MX_USART1_UART_Init+0x4c>)
 8001f46:	2200      	movs	r2, #0
 8001f48:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001f4a:	4b0b      	ldr	r3, [pc, #44]	@ (8001f78 <MX_USART1_UART_Init+0x4c>)
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001f50:	4b09      	ldr	r3, [pc, #36]	@ (8001f78 <MX_USART1_UART_Init+0x4c>)
 8001f52:	220c      	movs	r2, #12
 8001f54:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f56:	4b08      	ldr	r3, [pc, #32]	@ (8001f78 <MX_USART1_UART_Init+0x4c>)
 8001f58:	2200      	movs	r2, #0
 8001f5a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f5c:	4b06      	ldr	r3, [pc, #24]	@ (8001f78 <MX_USART1_UART_Init+0x4c>)
 8001f5e:	2200      	movs	r2, #0
 8001f60:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001f62:	4805      	ldr	r0, [pc, #20]	@ (8001f78 <MX_USART1_UART_Init+0x4c>)
 8001f64:	f003 fd2e 	bl	80059c4 <HAL_UART_Init>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d001      	beq.n	8001f72 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001f6e:	f000 f851 	bl	8002014 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001f72:	bf00      	nop
 8001f74:	bd80      	pop	{r7, pc}
 8001f76:	bf00      	nop
 8001f78:	20000358 	.word	0x20000358
 8001f7c:	40011000 	.word	0x40011000

08001f80 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b088      	sub	sp, #32
 8001f84:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f86:	f107 030c 	add.w	r3, r7, #12
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	601a      	str	r2, [r3, #0]
 8001f8e:	605a      	str	r2, [r3, #4]
 8001f90:	609a      	str	r2, [r3, #8]
 8001f92:	60da      	str	r2, [r3, #12]
 8001f94:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001f96:	2300      	movs	r3, #0
 8001f98:	60bb      	str	r3, [r7, #8]
 8001f9a:	4b1c      	ldr	r3, [pc, #112]	@ (800200c <MX_GPIO_Init+0x8c>)
 8001f9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f9e:	4a1b      	ldr	r2, [pc, #108]	@ (800200c <MX_GPIO_Init+0x8c>)
 8001fa0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001fa4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fa6:	4b19      	ldr	r3, [pc, #100]	@ (800200c <MX_GPIO_Init+0x8c>)
 8001fa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001faa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001fae:	60bb      	str	r3, [r7, #8]
 8001fb0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	607b      	str	r3, [r7, #4]
 8001fb6:	4b15      	ldr	r3, [pc, #84]	@ (800200c <MX_GPIO_Init+0x8c>)
 8001fb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fba:	4a14      	ldr	r2, [pc, #80]	@ (800200c <MX_GPIO_Init+0x8c>)
 8001fbc:	f043 0301 	orr.w	r3, r3, #1
 8001fc0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fc2:	4b12      	ldr	r3, [pc, #72]	@ (800200c <MX_GPIO_Init+0x8c>)
 8001fc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fc6:	f003 0301 	and.w	r3, r3, #1
 8001fca:	607b      	str	r3, [r7, #4]
 8001fcc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fce:	2300      	movs	r3, #0
 8001fd0:	603b      	str	r3, [r7, #0]
 8001fd2:	4b0e      	ldr	r3, [pc, #56]	@ (800200c <MX_GPIO_Init+0x8c>)
 8001fd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fd6:	4a0d      	ldr	r2, [pc, #52]	@ (800200c <MX_GPIO_Init+0x8c>)
 8001fd8:	f043 0302 	orr.w	r3, r3, #2
 8001fdc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fde:	4b0b      	ldr	r3, [pc, #44]	@ (800200c <MX_GPIO_Init+0x8c>)
 8001fe0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fe2:	f003 0302 	and.w	r3, r3, #2
 8001fe6:	603b      	str	r3, [r7, #0]
 8001fe8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : PA0 PA1 PA2 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001fea:	230f      	movs	r3, #15
 8001fec:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001ff2:	2302      	movs	r3, #2
 8001ff4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ff6:	f107 030c 	add.w	r3, r7, #12
 8001ffa:	4619      	mov	r1, r3
 8001ffc:	4804      	ldr	r0, [pc, #16]	@ (8002010 <MX_GPIO_Init+0x90>)
 8001ffe:	f000 fbab 	bl	8002758 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8002002:	bf00      	nop
 8002004:	3720      	adds	r7, #32
 8002006:	46bd      	mov	sp, r7
 8002008:	bd80      	pop	{r7, pc}
 800200a:	bf00      	nop
 800200c:	40023800 	.word	0x40023800
 8002010:	40020000 	.word	0x40020000

08002014 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002014:	b480      	push	{r7}
 8002016:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002018:	b672      	cpsid	i
}
 800201a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800201c:	bf00      	nop
 800201e:	e7fd      	b.n	800201c <Error_Handler+0x8>

08002020 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002020:	b480      	push	{r7}
 8002022:	b083      	sub	sp, #12
 8002024:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002026:	2300      	movs	r3, #0
 8002028:	607b      	str	r3, [r7, #4]
 800202a:	4b10      	ldr	r3, [pc, #64]	@ (800206c <HAL_MspInit+0x4c>)
 800202c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800202e:	4a0f      	ldr	r2, [pc, #60]	@ (800206c <HAL_MspInit+0x4c>)
 8002030:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002034:	6453      	str	r3, [r2, #68]	@ 0x44
 8002036:	4b0d      	ldr	r3, [pc, #52]	@ (800206c <HAL_MspInit+0x4c>)
 8002038:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800203a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800203e:	607b      	str	r3, [r7, #4]
 8002040:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002042:	2300      	movs	r3, #0
 8002044:	603b      	str	r3, [r7, #0]
 8002046:	4b09      	ldr	r3, [pc, #36]	@ (800206c <HAL_MspInit+0x4c>)
 8002048:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800204a:	4a08      	ldr	r2, [pc, #32]	@ (800206c <HAL_MspInit+0x4c>)
 800204c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002050:	6413      	str	r3, [r2, #64]	@ 0x40
 8002052:	4b06      	ldr	r3, [pc, #24]	@ (800206c <HAL_MspInit+0x4c>)
 8002054:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002056:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800205a:	603b      	str	r3, [r7, #0]
 800205c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800205e:	bf00      	nop
 8002060:	370c      	adds	r7, #12
 8002062:	46bd      	mov	sp, r7
 8002064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002068:	4770      	bx	lr
 800206a:	bf00      	nop
 800206c:	40023800 	.word	0x40023800

08002070 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b08a      	sub	sp, #40	@ 0x28
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002078:	f107 0314 	add.w	r3, r7, #20
 800207c:	2200      	movs	r2, #0
 800207e:	601a      	str	r2, [r3, #0]
 8002080:	605a      	str	r2, [r3, #4]
 8002082:	609a      	str	r2, [r3, #8]
 8002084:	60da      	str	r2, [r3, #12]
 8002086:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4a19      	ldr	r2, [pc, #100]	@ (80020f4 <HAL_I2C_MspInit+0x84>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d12b      	bne.n	80020ea <HAL_I2C_MspInit+0x7a>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002092:	2300      	movs	r3, #0
 8002094:	613b      	str	r3, [r7, #16]
 8002096:	4b18      	ldr	r3, [pc, #96]	@ (80020f8 <HAL_I2C_MspInit+0x88>)
 8002098:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800209a:	4a17      	ldr	r2, [pc, #92]	@ (80020f8 <HAL_I2C_MspInit+0x88>)
 800209c:	f043 0302 	orr.w	r3, r3, #2
 80020a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80020a2:	4b15      	ldr	r3, [pc, #84]	@ (80020f8 <HAL_I2C_MspInit+0x88>)
 80020a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020a6:	f003 0302 	and.w	r3, r3, #2
 80020aa:	613b      	str	r3, [r7, #16]
 80020ac:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80020ae:	23c0      	movs	r3, #192	@ 0xc0
 80020b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80020b2:	2312      	movs	r3, #18
 80020b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020b6:	2300      	movs	r3, #0
 80020b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020ba:	2303      	movs	r3, #3
 80020bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80020be:	2304      	movs	r3, #4
 80020c0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020c2:	f107 0314 	add.w	r3, r7, #20
 80020c6:	4619      	mov	r1, r3
 80020c8:	480c      	ldr	r0, [pc, #48]	@ (80020fc <HAL_I2C_MspInit+0x8c>)
 80020ca:	f000 fb45 	bl	8002758 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80020ce:	2300      	movs	r3, #0
 80020d0:	60fb      	str	r3, [r7, #12]
 80020d2:	4b09      	ldr	r3, [pc, #36]	@ (80020f8 <HAL_I2C_MspInit+0x88>)
 80020d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020d6:	4a08      	ldr	r2, [pc, #32]	@ (80020f8 <HAL_I2C_MspInit+0x88>)
 80020d8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80020dc:	6413      	str	r3, [r2, #64]	@ 0x40
 80020de:	4b06      	ldr	r3, [pc, #24]	@ (80020f8 <HAL_I2C_MspInit+0x88>)
 80020e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020e2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80020e6:	60fb      	str	r3, [r7, #12]
 80020e8:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 80020ea:	bf00      	nop
 80020ec:	3728      	adds	r7, #40	@ 0x28
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd80      	pop	{r7, pc}
 80020f2:	bf00      	nop
 80020f4:	40005400 	.word	0x40005400
 80020f8:	40023800 	.word	0x40023800
 80020fc:	40020400 	.word	0x40020400

08002100 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b08a      	sub	sp, #40	@ 0x28
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002108:	f107 0314 	add.w	r3, r7, #20
 800210c:	2200      	movs	r2, #0
 800210e:	601a      	str	r2, [r3, #0]
 8002110:	605a      	str	r2, [r3, #4]
 8002112:	609a      	str	r2, [r3, #8]
 8002114:	60da      	str	r2, [r3, #12]
 8002116:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4a19      	ldr	r2, [pc, #100]	@ (8002184 <HAL_UART_MspInit+0x84>)
 800211e:	4293      	cmp	r3, r2
 8002120:	d12c      	bne.n	800217c <HAL_UART_MspInit+0x7c>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002122:	2300      	movs	r3, #0
 8002124:	613b      	str	r3, [r7, #16]
 8002126:	4b18      	ldr	r3, [pc, #96]	@ (8002188 <HAL_UART_MspInit+0x88>)
 8002128:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800212a:	4a17      	ldr	r2, [pc, #92]	@ (8002188 <HAL_UART_MspInit+0x88>)
 800212c:	f043 0310 	orr.w	r3, r3, #16
 8002130:	6453      	str	r3, [r2, #68]	@ 0x44
 8002132:	4b15      	ldr	r3, [pc, #84]	@ (8002188 <HAL_UART_MspInit+0x88>)
 8002134:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002136:	f003 0310 	and.w	r3, r3, #16
 800213a:	613b      	str	r3, [r7, #16]
 800213c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800213e:	2300      	movs	r3, #0
 8002140:	60fb      	str	r3, [r7, #12]
 8002142:	4b11      	ldr	r3, [pc, #68]	@ (8002188 <HAL_UART_MspInit+0x88>)
 8002144:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002146:	4a10      	ldr	r2, [pc, #64]	@ (8002188 <HAL_UART_MspInit+0x88>)
 8002148:	f043 0301 	orr.w	r3, r3, #1
 800214c:	6313      	str	r3, [r2, #48]	@ 0x30
 800214e:	4b0e      	ldr	r3, [pc, #56]	@ (8002188 <HAL_UART_MspInit+0x88>)
 8002150:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002152:	f003 0301 	and.w	r3, r3, #1
 8002156:	60fb      	str	r3, [r7, #12]
 8002158:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800215a:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800215e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002160:	2302      	movs	r3, #2
 8002162:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002164:	2300      	movs	r3, #0
 8002166:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002168:	2303      	movs	r3, #3
 800216a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800216c:	2307      	movs	r3, #7
 800216e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002170:	f107 0314 	add.w	r3, r7, #20
 8002174:	4619      	mov	r1, r3
 8002176:	4805      	ldr	r0, [pc, #20]	@ (800218c <HAL_UART_MspInit+0x8c>)
 8002178:	f000 faee 	bl	8002758 <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 800217c:	bf00      	nop
 800217e:	3728      	adds	r7, #40	@ 0x28
 8002180:	46bd      	mov	sp, r7
 8002182:	bd80      	pop	{r7, pc}
 8002184:	40011000 	.word	0x40011000
 8002188:	40023800 	.word	0x40023800
 800218c:	40020000 	.word	0x40020000

08002190 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002190:	b480      	push	{r7}
 8002192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002194:	bf00      	nop
 8002196:	e7fd      	b.n	8002194 <NMI_Handler+0x4>

08002198 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002198:	b480      	push	{r7}
 800219a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800219c:	bf00      	nop
 800219e:	e7fd      	b.n	800219c <HardFault_Handler+0x4>

080021a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80021a0:	b480      	push	{r7}
 80021a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80021a4:	bf00      	nop
 80021a6:	e7fd      	b.n	80021a4 <MemManage_Handler+0x4>

080021a8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80021a8:	b480      	push	{r7}
 80021aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80021ac:	bf00      	nop
 80021ae:	e7fd      	b.n	80021ac <BusFault_Handler+0x4>

080021b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80021b0:	b480      	push	{r7}
 80021b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80021b4:	bf00      	nop
 80021b6:	e7fd      	b.n	80021b4 <UsageFault_Handler+0x4>

080021b8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80021b8:	b480      	push	{r7}
 80021ba:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80021bc:	bf00      	nop
 80021be:	46bd      	mov	sp, r7
 80021c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c4:	4770      	bx	lr

080021c6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80021c6:	b480      	push	{r7}
 80021c8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80021ca:	bf00      	nop
 80021cc:	46bd      	mov	sp, r7
 80021ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d2:	4770      	bx	lr

080021d4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80021d4:	b480      	push	{r7}
 80021d6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80021d8:	bf00      	nop
 80021da:	46bd      	mov	sp, r7
 80021dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e0:	4770      	bx	lr

080021e2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80021e2:	b580      	push	{r7, lr}
 80021e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80021e6:	f000 f961 	bl	80024ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80021ea:	bf00      	nop
 80021ec:	bd80      	pop	{r7, pc}
	...

080021f0 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 80021f4:	4802      	ldr	r0, [pc, #8]	@ (8002200 <OTG_HS_IRQHandler+0x10>)
 80021f6:	f001 fe56 	bl	8003ea6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 80021fa:	bf00      	nop
 80021fc:	bd80      	pop	{r7, pc}
 80021fe:	bf00      	nop
 8002200:	200009b4 	.word	0x200009b4

08002204 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002204:	b480      	push	{r7}
 8002206:	af00      	add	r7, sp, #0
  return 1;
 8002208:	2301      	movs	r3, #1
}
 800220a:	4618      	mov	r0, r3
 800220c:	46bd      	mov	sp, r7
 800220e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002212:	4770      	bx	lr

08002214 <_kill>:

int _kill(int pid, int sig)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b082      	sub	sp, #8
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
 800221c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800221e:	f008 fa9b 	bl	800a758 <__errno>
 8002222:	4603      	mov	r3, r0
 8002224:	2216      	movs	r2, #22
 8002226:	601a      	str	r2, [r3, #0]
  return -1;
 8002228:	f04f 33ff 	mov.w	r3, #4294967295
}
 800222c:	4618      	mov	r0, r3
 800222e:	3708      	adds	r7, #8
 8002230:	46bd      	mov	sp, r7
 8002232:	bd80      	pop	{r7, pc}

08002234 <_exit>:

void _exit (int status)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b082      	sub	sp, #8
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800223c:	f04f 31ff 	mov.w	r1, #4294967295
 8002240:	6878      	ldr	r0, [r7, #4]
 8002242:	f7ff ffe7 	bl	8002214 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002246:	bf00      	nop
 8002248:	e7fd      	b.n	8002246 <_exit+0x12>

0800224a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800224a:	b580      	push	{r7, lr}
 800224c:	b086      	sub	sp, #24
 800224e:	af00      	add	r7, sp, #0
 8002250:	60f8      	str	r0, [r7, #12]
 8002252:	60b9      	str	r1, [r7, #8]
 8002254:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002256:	2300      	movs	r3, #0
 8002258:	617b      	str	r3, [r7, #20]
 800225a:	e00a      	b.n	8002272 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800225c:	f3af 8000 	nop.w
 8002260:	4601      	mov	r1, r0
 8002262:	68bb      	ldr	r3, [r7, #8]
 8002264:	1c5a      	adds	r2, r3, #1
 8002266:	60ba      	str	r2, [r7, #8]
 8002268:	b2ca      	uxtb	r2, r1
 800226a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800226c:	697b      	ldr	r3, [r7, #20]
 800226e:	3301      	adds	r3, #1
 8002270:	617b      	str	r3, [r7, #20]
 8002272:	697a      	ldr	r2, [r7, #20]
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	429a      	cmp	r2, r3
 8002278:	dbf0      	blt.n	800225c <_read+0x12>
  }

  return len;
 800227a:	687b      	ldr	r3, [r7, #4]
}
 800227c:	4618      	mov	r0, r3
 800227e:	3718      	adds	r7, #24
 8002280:	46bd      	mov	sp, r7
 8002282:	bd80      	pop	{r7, pc}

08002284 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b086      	sub	sp, #24
 8002288:	af00      	add	r7, sp, #0
 800228a:	60f8      	str	r0, [r7, #12]
 800228c:	60b9      	str	r1, [r7, #8]
 800228e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002290:	2300      	movs	r3, #0
 8002292:	617b      	str	r3, [r7, #20]
 8002294:	e009      	b.n	80022aa <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002296:	68bb      	ldr	r3, [r7, #8]
 8002298:	1c5a      	adds	r2, r3, #1
 800229a:	60ba      	str	r2, [r7, #8]
 800229c:	781b      	ldrb	r3, [r3, #0]
 800229e:	4618      	mov	r0, r3
 80022a0:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022a4:	697b      	ldr	r3, [r7, #20]
 80022a6:	3301      	adds	r3, #1
 80022a8:	617b      	str	r3, [r7, #20]
 80022aa:	697a      	ldr	r2, [r7, #20]
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	429a      	cmp	r2, r3
 80022b0:	dbf1      	blt.n	8002296 <_write+0x12>
  }
  return len;
 80022b2:	687b      	ldr	r3, [r7, #4]
}
 80022b4:	4618      	mov	r0, r3
 80022b6:	3718      	adds	r7, #24
 80022b8:	46bd      	mov	sp, r7
 80022ba:	bd80      	pop	{r7, pc}

080022bc <_close>:

int _close(int file)
{
 80022bc:	b480      	push	{r7}
 80022be:	b083      	sub	sp, #12
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80022c4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80022c8:	4618      	mov	r0, r3
 80022ca:	370c      	adds	r7, #12
 80022cc:	46bd      	mov	sp, r7
 80022ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d2:	4770      	bx	lr

080022d4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80022d4:	b480      	push	{r7}
 80022d6:	b083      	sub	sp, #12
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
 80022dc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80022e4:	605a      	str	r2, [r3, #4]
  return 0;
 80022e6:	2300      	movs	r3, #0
}
 80022e8:	4618      	mov	r0, r3
 80022ea:	370c      	adds	r7, #12
 80022ec:	46bd      	mov	sp, r7
 80022ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f2:	4770      	bx	lr

080022f4 <_isatty>:

int _isatty(int file)
{
 80022f4:	b480      	push	{r7}
 80022f6:	b083      	sub	sp, #12
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80022fc:	2301      	movs	r3, #1
}
 80022fe:	4618      	mov	r0, r3
 8002300:	370c      	adds	r7, #12
 8002302:	46bd      	mov	sp, r7
 8002304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002308:	4770      	bx	lr

0800230a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800230a:	b480      	push	{r7}
 800230c:	b085      	sub	sp, #20
 800230e:	af00      	add	r7, sp, #0
 8002310:	60f8      	str	r0, [r7, #12]
 8002312:	60b9      	str	r1, [r7, #8]
 8002314:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002316:	2300      	movs	r3, #0
}
 8002318:	4618      	mov	r0, r3
 800231a:	3714      	adds	r7, #20
 800231c:	46bd      	mov	sp, r7
 800231e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002322:	4770      	bx	lr

08002324 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b086      	sub	sp, #24
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800232c:	4a14      	ldr	r2, [pc, #80]	@ (8002380 <_sbrk+0x5c>)
 800232e:	4b15      	ldr	r3, [pc, #84]	@ (8002384 <_sbrk+0x60>)
 8002330:	1ad3      	subs	r3, r2, r3
 8002332:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002334:	697b      	ldr	r3, [r7, #20]
 8002336:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002338:	4b13      	ldr	r3, [pc, #76]	@ (8002388 <_sbrk+0x64>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d102      	bne.n	8002346 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002340:	4b11      	ldr	r3, [pc, #68]	@ (8002388 <_sbrk+0x64>)
 8002342:	4a12      	ldr	r2, [pc, #72]	@ (800238c <_sbrk+0x68>)
 8002344:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002346:	4b10      	ldr	r3, [pc, #64]	@ (8002388 <_sbrk+0x64>)
 8002348:	681a      	ldr	r2, [r3, #0]
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	4413      	add	r3, r2
 800234e:	693a      	ldr	r2, [r7, #16]
 8002350:	429a      	cmp	r2, r3
 8002352:	d207      	bcs.n	8002364 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002354:	f008 fa00 	bl	800a758 <__errno>
 8002358:	4603      	mov	r3, r0
 800235a:	220c      	movs	r2, #12
 800235c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800235e:	f04f 33ff 	mov.w	r3, #4294967295
 8002362:	e009      	b.n	8002378 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002364:	4b08      	ldr	r3, [pc, #32]	@ (8002388 <_sbrk+0x64>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800236a:	4b07      	ldr	r3, [pc, #28]	@ (8002388 <_sbrk+0x64>)
 800236c:	681a      	ldr	r2, [r3, #0]
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	4413      	add	r3, r2
 8002372:	4a05      	ldr	r2, [pc, #20]	@ (8002388 <_sbrk+0x64>)
 8002374:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002376:	68fb      	ldr	r3, [r7, #12]
}
 8002378:	4618      	mov	r0, r3
 800237a:	3718      	adds	r7, #24
 800237c:	46bd      	mov	sp, r7
 800237e:	bd80      	pop	{r7, pc}
 8002380:	20030000 	.word	0x20030000
 8002384:	00000400 	.word	0x00000400
 8002388:	200004cc 	.word	0x200004cc
 800238c:	20000ff8 	.word	0x20000ff8

08002390 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002390:	b480      	push	{r7}
 8002392:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002394:	4b06      	ldr	r3, [pc, #24]	@ (80023b0 <SystemInit+0x20>)
 8002396:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800239a:	4a05      	ldr	r2, [pc, #20]	@ (80023b0 <SystemInit+0x20>)
 800239c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80023a0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80023a4:	bf00      	nop
 80023a6:	46bd      	mov	sp, r7
 80023a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ac:	4770      	bx	lr
 80023ae:	bf00      	nop
 80023b0:	e000ed00 	.word	0xe000ed00

080023b4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80023b4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80023ec <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80023b8:	f7ff ffea 	bl	8002390 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80023bc:	480c      	ldr	r0, [pc, #48]	@ (80023f0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80023be:	490d      	ldr	r1, [pc, #52]	@ (80023f4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80023c0:	4a0d      	ldr	r2, [pc, #52]	@ (80023f8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80023c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80023c4:	e002      	b.n	80023cc <LoopCopyDataInit>

080023c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80023c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80023c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80023ca:	3304      	adds	r3, #4

080023cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80023cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80023ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80023d0:	d3f9      	bcc.n	80023c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80023d2:	4a0a      	ldr	r2, [pc, #40]	@ (80023fc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80023d4:	4c0a      	ldr	r4, [pc, #40]	@ (8002400 <LoopFillZerobss+0x22>)
  movs r3, #0
 80023d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80023d8:	e001      	b.n	80023de <LoopFillZerobss>

080023da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80023da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80023dc:	3204      	adds	r2, #4

080023de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80023de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80023e0:	d3fb      	bcc.n	80023da <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80023e2:	f008 f9bf 	bl	800a764 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80023e6:	f7ff fbf7 	bl	8001bd8 <main>
  bx  lr    
 80023ea:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80023ec:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80023f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80023f4:	200002e8 	.word	0x200002e8
  ldr r2, =_sidata
 80023f8:	0800cfc4 	.word	0x0800cfc4
  ldr r2, =_sbss
 80023fc:	200002e8 	.word	0x200002e8
  ldr r4, =_ebss
 8002400:	20000ff8 	.word	0x20000ff8

08002404 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002404:	e7fe      	b.n	8002404 <ADC_IRQHandler>
	...

08002408 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800240c:	4b0e      	ldr	r3, [pc, #56]	@ (8002448 <HAL_Init+0x40>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4a0d      	ldr	r2, [pc, #52]	@ (8002448 <HAL_Init+0x40>)
 8002412:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002416:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002418:	4b0b      	ldr	r3, [pc, #44]	@ (8002448 <HAL_Init+0x40>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4a0a      	ldr	r2, [pc, #40]	@ (8002448 <HAL_Init+0x40>)
 800241e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002422:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002424:	4b08      	ldr	r3, [pc, #32]	@ (8002448 <HAL_Init+0x40>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4a07      	ldr	r2, [pc, #28]	@ (8002448 <HAL_Init+0x40>)
 800242a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800242e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002430:	2003      	movs	r0, #3
 8002432:	f000 f94f 	bl	80026d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002436:	200f      	movs	r0, #15
 8002438:	f000 f808 	bl	800244c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800243c:	f7ff fdf0 	bl	8002020 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002440:	2300      	movs	r3, #0
}
 8002442:	4618      	mov	r0, r3
 8002444:	bd80      	pop	{r7, pc}
 8002446:	bf00      	nop
 8002448:	40023c00 	.word	0x40023c00

0800244c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b082      	sub	sp, #8
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002454:	4b12      	ldr	r3, [pc, #72]	@ (80024a0 <HAL_InitTick+0x54>)
 8002456:	681a      	ldr	r2, [r3, #0]
 8002458:	4b12      	ldr	r3, [pc, #72]	@ (80024a4 <HAL_InitTick+0x58>)
 800245a:	781b      	ldrb	r3, [r3, #0]
 800245c:	4619      	mov	r1, r3
 800245e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002462:	fbb3 f3f1 	udiv	r3, r3, r1
 8002466:	fbb2 f3f3 	udiv	r3, r2, r3
 800246a:	4618      	mov	r0, r3
 800246c:	f000 f967 	bl	800273e <HAL_SYSTICK_Config>
 8002470:	4603      	mov	r3, r0
 8002472:	2b00      	cmp	r3, #0
 8002474:	d001      	beq.n	800247a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002476:	2301      	movs	r3, #1
 8002478:	e00e      	b.n	8002498 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2b0f      	cmp	r3, #15
 800247e:	d80a      	bhi.n	8002496 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002480:	2200      	movs	r2, #0
 8002482:	6879      	ldr	r1, [r7, #4]
 8002484:	f04f 30ff 	mov.w	r0, #4294967295
 8002488:	f000 f92f 	bl	80026ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800248c:	4a06      	ldr	r2, [pc, #24]	@ (80024a8 <HAL_InitTick+0x5c>)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002492:	2300      	movs	r3, #0
 8002494:	e000      	b.n	8002498 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002496:	2301      	movs	r3, #1
}
 8002498:	4618      	mov	r0, r3
 800249a:	3708      	adds	r7, #8
 800249c:	46bd      	mov	sp, r7
 800249e:	bd80      	pop	{r7, pc}
 80024a0:	20000004 	.word	0x20000004
 80024a4:	2000000c 	.word	0x2000000c
 80024a8:	20000008 	.word	0x20000008

080024ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024ac:	b480      	push	{r7}
 80024ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80024b0:	4b06      	ldr	r3, [pc, #24]	@ (80024cc <HAL_IncTick+0x20>)
 80024b2:	781b      	ldrb	r3, [r3, #0]
 80024b4:	461a      	mov	r2, r3
 80024b6:	4b06      	ldr	r3, [pc, #24]	@ (80024d0 <HAL_IncTick+0x24>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	4413      	add	r3, r2
 80024bc:	4a04      	ldr	r2, [pc, #16]	@ (80024d0 <HAL_IncTick+0x24>)
 80024be:	6013      	str	r3, [r2, #0]
}
 80024c0:	bf00      	nop
 80024c2:	46bd      	mov	sp, r7
 80024c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c8:	4770      	bx	lr
 80024ca:	bf00      	nop
 80024cc:	2000000c 	.word	0x2000000c
 80024d0:	200004d0 	.word	0x200004d0

080024d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80024d4:	b480      	push	{r7}
 80024d6:	af00      	add	r7, sp, #0
  return uwTick;
 80024d8:	4b03      	ldr	r3, [pc, #12]	@ (80024e8 <HAL_GetTick+0x14>)
 80024da:	681b      	ldr	r3, [r3, #0]
}
 80024dc:	4618      	mov	r0, r3
 80024de:	46bd      	mov	sp, r7
 80024e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e4:	4770      	bx	lr
 80024e6:	bf00      	nop
 80024e8:	200004d0 	.word	0x200004d0

080024ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b084      	sub	sp, #16
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80024f4:	f7ff ffee 	bl	80024d4 <HAL_GetTick>
 80024f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002504:	d005      	beq.n	8002512 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002506:	4b0a      	ldr	r3, [pc, #40]	@ (8002530 <HAL_Delay+0x44>)
 8002508:	781b      	ldrb	r3, [r3, #0]
 800250a:	461a      	mov	r2, r3
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	4413      	add	r3, r2
 8002510:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002512:	bf00      	nop
 8002514:	f7ff ffde 	bl	80024d4 <HAL_GetTick>
 8002518:	4602      	mov	r2, r0
 800251a:	68bb      	ldr	r3, [r7, #8]
 800251c:	1ad3      	subs	r3, r2, r3
 800251e:	68fa      	ldr	r2, [r7, #12]
 8002520:	429a      	cmp	r2, r3
 8002522:	d8f7      	bhi.n	8002514 <HAL_Delay+0x28>
  {
  }
}
 8002524:	bf00      	nop
 8002526:	bf00      	nop
 8002528:	3710      	adds	r7, #16
 800252a:	46bd      	mov	sp, r7
 800252c:	bd80      	pop	{r7, pc}
 800252e:	bf00      	nop
 8002530:	2000000c 	.word	0x2000000c

08002534 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002534:	b480      	push	{r7}
 8002536:	b085      	sub	sp, #20
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	f003 0307 	and.w	r3, r3, #7
 8002542:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002544:	4b0c      	ldr	r3, [pc, #48]	@ (8002578 <__NVIC_SetPriorityGrouping+0x44>)
 8002546:	68db      	ldr	r3, [r3, #12]
 8002548:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800254a:	68ba      	ldr	r2, [r7, #8]
 800254c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002550:	4013      	ands	r3, r2
 8002552:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002558:	68bb      	ldr	r3, [r7, #8]
 800255a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800255c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002560:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002564:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002566:	4a04      	ldr	r2, [pc, #16]	@ (8002578 <__NVIC_SetPriorityGrouping+0x44>)
 8002568:	68bb      	ldr	r3, [r7, #8]
 800256a:	60d3      	str	r3, [r2, #12]
}
 800256c:	bf00      	nop
 800256e:	3714      	adds	r7, #20
 8002570:	46bd      	mov	sp, r7
 8002572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002576:	4770      	bx	lr
 8002578:	e000ed00 	.word	0xe000ed00

0800257c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800257c:	b480      	push	{r7}
 800257e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002580:	4b04      	ldr	r3, [pc, #16]	@ (8002594 <__NVIC_GetPriorityGrouping+0x18>)
 8002582:	68db      	ldr	r3, [r3, #12]
 8002584:	0a1b      	lsrs	r3, r3, #8
 8002586:	f003 0307 	and.w	r3, r3, #7
}
 800258a:	4618      	mov	r0, r3
 800258c:	46bd      	mov	sp, r7
 800258e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002592:	4770      	bx	lr
 8002594:	e000ed00 	.word	0xe000ed00

08002598 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002598:	b480      	push	{r7}
 800259a:	b083      	sub	sp, #12
 800259c:	af00      	add	r7, sp, #0
 800259e:	4603      	mov	r3, r0
 80025a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	db0b      	blt.n	80025c2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025aa:	79fb      	ldrb	r3, [r7, #7]
 80025ac:	f003 021f 	and.w	r2, r3, #31
 80025b0:	4907      	ldr	r1, [pc, #28]	@ (80025d0 <__NVIC_EnableIRQ+0x38>)
 80025b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025b6:	095b      	lsrs	r3, r3, #5
 80025b8:	2001      	movs	r0, #1
 80025ba:	fa00 f202 	lsl.w	r2, r0, r2
 80025be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80025c2:	bf00      	nop
 80025c4:	370c      	adds	r7, #12
 80025c6:	46bd      	mov	sp, r7
 80025c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025cc:	4770      	bx	lr
 80025ce:	bf00      	nop
 80025d0:	e000e100 	.word	0xe000e100

080025d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025d4:	b480      	push	{r7}
 80025d6:	b083      	sub	sp, #12
 80025d8:	af00      	add	r7, sp, #0
 80025da:	4603      	mov	r3, r0
 80025dc:	6039      	str	r1, [r7, #0]
 80025de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	db0a      	blt.n	80025fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	b2da      	uxtb	r2, r3
 80025ec:	490c      	ldr	r1, [pc, #48]	@ (8002620 <__NVIC_SetPriority+0x4c>)
 80025ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025f2:	0112      	lsls	r2, r2, #4
 80025f4:	b2d2      	uxtb	r2, r2
 80025f6:	440b      	add	r3, r1
 80025f8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80025fc:	e00a      	b.n	8002614 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	b2da      	uxtb	r2, r3
 8002602:	4908      	ldr	r1, [pc, #32]	@ (8002624 <__NVIC_SetPriority+0x50>)
 8002604:	79fb      	ldrb	r3, [r7, #7]
 8002606:	f003 030f 	and.w	r3, r3, #15
 800260a:	3b04      	subs	r3, #4
 800260c:	0112      	lsls	r2, r2, #4
 800260e:	b2d2      	uxtb	r2, r2
 8002610:	440b      	add	r3, r1
 8002612:	761a      	strb	r2, [r3, #24]
}
 8002614:	bf00      	nop
 8002616:	370c      	adds	r7, #12
 8002618:	46bd      	mov	sp, r7
 800261a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261e:	4770      	bx	lr
 8002620:	e000e100 	.word	0xe000e100
 8002624:	e000ed00 	.word	0xe000ed00

08002628 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002628:	b480      	push	{r7}
 800262a:	b089      	sub	sp, #36	@ 0x24
 800262c:	af00      	add	r7, sp, #0
 800262e:	60f8      	str	r0, [r7, #12]
 8002630:	60b9      	str	r1, [r7, #8]
 8002632:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	f003 0307 	and.w	r3, r3, #7
 800263a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800263c:	69fb      	ldr	r3, [r7, #28]
 800263e:	f1c3 0307 	rsb	r3, r3, #7
 8002642:	2b04      	cmp	r3, #4
 8002644:	bf28      	it	cs
 8002646:	2304      	movcs	r3, #4
 8002648:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800264a:	69fb      	ldr	r3, [r7, #28]
 800264c:	3304      	adds	r3, #4
 800264e:	2b06      	cmp	r3, #6
 8002650:	d902      	bls.n	8002658 <NVIC_EncodePriority+0x30>
 8002652:	69fb      	ldr	r3, [r7, #28]
 8002654:	3b03      	subs	r3, #3
 8002656:	e000      	b.n	800265a <NVIC_EncodePriority+0x32>
 8002658:	2300      	movs	r3, #0
 800265a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800265c:	f04f 32ff 	mov.w	r2, #4294967295
 8002660:	69bb      	ldr	r3, [r7, #24]
 8002662:	fa02 f303 	lsl.w	r3, r2, r3
 8002666:	43da      	mvns	r2, r3
 8002668:	68bb      	ldr	r3, [r7, #8]
 800266a:	401a      	ands	r2, r3
 800266c:	697b      	ldr	r3, [r7, #20]
 800266e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002670:	f04f 31ff 	mov.w	r1, #4294967295
 8002674:	697b      	ldr	r3, [r7, #20]
 8002676:	fa01 f303 	lsl.w	r3, r1, r3
 800267a:	43d9      	mvns	r1, r3
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002680:	4313      	orrs	r3, r2
         );
}
 8002682:	4618      	mov	r0, r3
 8002684:	3724      	adds	r7, #36	@ 0x24
 8002686:	46bd      	mov	sp, r7
 8002688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268c:	4770      	bx	lr
	...

08002690 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b082      	sub	sp, #8
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	3b01      	subs	r3, #1
 800269c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80026a0:	d301      	bcc.n	80026a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80026a2:	2301      	movs	r3, #1
 80026a4:	e00f      	b.n	80026c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80026a6:	4a0a      	ldr	r2, [pc, #40]	@ (80026d0 <SysTick_Config+0x40>)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	3b01      	subs	r3, #1
 80026ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80026ae:	210f      	movs	r1, #15
 80026b0:	f04f 30ff 	mov.w	r0, #4294967295
 80026b4:	f7ff ff8e 	bl	80025d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80026b8:	4b05      	ldr	r3, [pc, #20]	@ (80026d0 <SysTick_Config+0x40>)
 80026ba:	2200      	movs	r2, #0
 80026bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80026be:	4b04      	ldr	r3, [pc, #16]	@ (80026d0 <SysTick_Config+0x40>)
 80026c0:	2207      	movs	r2, #7
 80026c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80026c4:	2300      	movs	r3, #0
}
 80026c6:	4618      	mov	r0, r3
 80026c8:	3708      	adds	r7, #8
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bd80      	pop	{r7, pc}
 80026ce:	bf00      	nop
 80026d0:	e000e010 	.word	0xe000e010

080026d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b082      	sub	sp, #8
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80026dc:	6878      	ldr	r0, [r7, #4]
 80026de:	f7ff ff29 	bl	8002534 <__NVIC_SetPriorityGrouping>
}
 80026e2:	bf00      	nop
 80026e4:	3708      	adds	r7, #8
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd80      	pop	{r7, pc}

080026ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80026ea:	b580      	push	{r7, lr}
 80026ec:	b086      	sub	sp, #24
 80026ee:	af00      	add	r7, sp, #0
 80026f0:	4603      	mov	r3, r0
 80026f2:	60b9      	str	r1, [r7, #8]
 80026f4:	607a      	str	r2, [r7, #4]
 80026f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80026f8:	2300      	movs	r3, #0
 80026fa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80026fc:	f7ff ff3e 	bl	800257c <__NVIC_GetPriorityGrouping>
 8002700:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002702:	687a      	ldr	r2, [r7, #4]
 8002704:	68b9      	ldr	r1, [r7, #8]
 8002706:	6978      	ldr	r0, [r7, #20]
 8002708:	f7ff ff8e 	bl	8002628 <NVIC_EncodePriority>
 800270c:	4602      	mov	r2, r0
 800270e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002712:	4611      	mov	r1, r2
 8002714:	4618      	mov	r0, r3
 8002716:	f7ff ff5d 	bl	80025d4 <__NVIC_SetPriority>
}
 800271a:	bf00      	nop
 800271c:	3718      	adds	r7, #24
 800271e:	46bd      	mov	sp, r7
 8002720:	bd80      	pop	{r7, pc}

08002722 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002722:	b580      	push	{r7, lr}
 8002724:	b082      	sub	sp, #8
 8002726:	af00      	add	r7, sp, #0
 8002728:	4603      	mov	r3, r0
 800272a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800272c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002730:	4618      	mov	r0, r3
 8002732:	f7ff ff31 	bl	8002598 <__NVIC_EnableIRQ>
}
 8002736:	bf00      	nop
 8002738:	3708      	adds	r7, #8
 800273a:	46bd      	mov	sp, r7
 800273c:	bd80      	pop	{r7, pc}

0800273e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800273e:	b580      	push	{r7, lr}
 8002740:	b082      	sub	sp, #8
 8002742:	af00      	add	r7, sp, #0
 8002744:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002746:	6878      	ldr	r0, [r7, #4]
 8002748:	f7ff ffa2 	bl	8002690 <SysTick_Config>
 800274c:	4603      	mov	r3, r0
}
 800274e:	4618      	mov	r0, r3
 8002750:	3708      	adds	r7, #8
 8002752:	46bd      	mov	sp, r7
 8002754:	bd80      	pop	{r7, pc}
	...

08002758 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002758:	b480      	push	{r7}
 800275a:	b089      	sub	sp, #36	@ 0x24
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
 8002760:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002762:	2300      	movs	r3, #0
 8002764:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002766:	2300      	movs	r3, #0
 8002768:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800276a:	2300      	movs	r3, #0
 800276c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800276e:	2300      	movs	r3, #0
 8002770:	61fb      	str	r3, [r7, #28]
 8002772:	e177      	b.n	8002a64 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002774:	2201      	movs	r2, #1
 8002776:	69fb      	ldr	r3, [r7, #28]
 8002778:	fa02 f303 	lsl.w	r3, r2, r3
 800277c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	697a      	ldr	r2, [r7, #20]
 8002784:	4013      	ands	r3, r2
 8002786:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002788:	693a      	ldr	r2, [r7, #16]
 800278a:	697b      	ldr	r3, [r7, #20]
 800278c:	429a      	cmp	r2, r3
 800278e:	f040 8166 	bne.w	8002a5e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	f003 0303 	and.w	r3, r3, #3
 800279a:	2b01      	cmp	r3, #1
 800279c:	d005      	beq.n	80027aa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80027a6:	2b02      	cmp	r3, #2
 80027a8:	d130      	bne.n	800280c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	689b      	ldr	r3, [r3, #8]
 80027ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80027b0:	69fb      	ldr	r3, [r7, #28]
 80027b2:	005b      	lsls	r3, r3, #1
 80027b4:	2203      	movs	r2, #3
 80027b6:	fa02 f303 	lsl.w	r3, r2, r3
 80027ba:	43db      	mvns	r3, r3
 80027bc:	69ba      	ldr	r2, [r7, #24]
 80027be:	4013      	ands	r3, r2
 80027c0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	68da      	ldr	r2, [r3, #12]
 80027c6:	69fb      	ldr	r3, [r7, #28]
 80027c8:	005b      	lsls	r3, r3, #1
 80027ca:	fa02 f303 	lsl.w	r3, r2, r3
 80027ce:	69ba      	ldr	r2, [r7, #24]
 80027d0:	4313      	orrs	r3, r2
 80027d2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	69ba      	ldr	r2, [r7, #24]
 80027d8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80027e0:	2201      	movs	r2, #1
 80027e2:	69fb      	ldr	r3, [r7, #28]
 80027e4:	fa02 f303 	lsl.w	r3, r2, r3
 80027e8:	43db      	mvns	r3, r3
 80027ea:	69ba      	ldr	r2, [r7, #24]
 80027ec:	4013      	ands	r3, r2
 80027ee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	091b      	lsrs	r3, r3, #4
 80027f6:	f003 0201 	and.w	r2, r3, #1
 80027fa:	69fb      	ldr	r3, [r7, #28]
 80027fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002800:	69ba      	ldr	r2, [r7, #24]
 8002802:	4313      	orrs	r3, r2
 8002804:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	69ba      	ldr	r2, [r7, #24]
 800280a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	f003 0303 	and.w	r3, r3, #3
 8002814:	2b03      	cmp	r3, #3
 8002816:	d017      	beq.n	8002848 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	68db      	ldr	r3, [r3, #12]
 800281c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800281e:	69fb      	ldr	r3, [r7, #28]
 8002820:	005b      	lsls	r3, r3, #1
 8002822:	2203      	movs	r2, #3
 8002824:	fa02 f303 	lsl.w	r3, r2, r3
 8002828:	43db      	mvns	r3, r3
 800282a:	69ba      	ldr	r2, [r7, #24]
 800282c:	4013      	ands	r3, r2
 800282e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	689a      	ldr	r2, [r3, #8]
 8002834:	69fb      	ldr	r3, [r7, #28]
 8002836:	005b      	lsls	r3, r3, #1
 8002838:	fa02 f303 	lsl.w	r3, r2, r3
 800283c:	69ba      	ldr	r2, [r7, #24]
 800283e:	4313      	orrs	r3, r2
 8002840:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	69ba      	ldr	r2, [r7, #24]
 8002846:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	f003 0303 	and.w	r3, r3, #3
 8002850:	2b02      	cmp	r3, #2
 8002852:	d123      	bne.n	800289c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002854:	69fb      	ldr	r3, [r7, #28]
 8002856:	08da      	lsrs	r2, r3, #3
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	3208      	adds	r2, #8
 800285c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002860:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002862:	69fb      	ldr	r3, [r7, #28]
 8002864:	f003 0307 	and.w	r3, r3, #7
 8002868:	009b      	lsls	r3, r3, #2
 800286a:	220f      	movs	r2, #15
 800286c:	fa02 f303 	lsl.w	r3, r2, r3
 8002870:	43db      	mvns	r3, r3
 8002872:	69ba      	ldr	r2, [r7, #24]
 8002874:	4013      	ands	r3, r2
 8002876:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	691a      	ldr	r2, [r3, #16]
 800287c:	69fb      	ldr	r3, [r7, #28]
 800287e:	f003 0307 	and.w	r3, r3, #7
 8002882:	009b      	lsls	r3, r3, #2
 8002884:	fa02 f303 	lsl.w	r3, r2, r3
 8002888:	69ba      	ldr	r2, [r7, #24]
 800288a:	4313      	orrs	r3, r2
 800288c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800288e:	69fb      	ldr	r3, [r7, #28]
 8002890:	08da      	lsrs	r2, r3, #3
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	3208      	adds	r2, #8
 8002896:	69b9      	ldr	r1, [r7, #24]
 8002898:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80028a2:	69fb      	ldr	r3, [r7, #28]
 80028a4:	005b      	lsls	r3, r3, #1
 80028a6:	2203      	movs	r2, #3
 80028a8:	fa02 f303 	lsl.w	r3, r2, r3
 80028ac:	43db      	mvns	r3, r3
 80028ae:	69ba      	ldr	r2, [r7, #24]
 80028b0:	4013      	ands	r3, r2
 80028b2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	f003 0203 	and.w	r2, r3, #3
 80028bc:	69fb      	ldr	r3, [r7, #28]
 80028be:	005b      	lsls	r3, r3, #1
 80028c0:	fa02 f303 	lsl.w	r3, r2, r3
 80028c4:	69ba      	ldr	r2, [r7, #24]
 80028c6:	4313      	orrs	r3, r2
 80028c8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	69ba      	ldr	r2, [r7, #24]
 80028ce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80028d8:	2b00      	cmp	r3, #0
 80028da:	f000 80c0 	beq.w	8002a5e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028de:	2300      	movs	r3, #0
 80028e0:	60fb      	str	r3, [r7, #12]
 80028e2:	4b66      	ldr	r3, [pc, #408]	@ (8002a7c <HAL_GPIO_Init+0x324>)
 80028e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028e6:	4a65      	ldr	r2, [pc, #404]	@ (8002a7c <HAL_GPIO_Init+0x324>)
 80028e8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80028ec:	6453      	str	r3, [r2, #68]	@ 0x44
 80028ee:	4b63      	ldr	r3, [pc, #396]	@ (8002a7c <HAL_GPIO_Init+0x324>)
 80028f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028f2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80028f6:	60fb      	str	r3, [r7, #12]
 80028f8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80028fa:	4a61      	ldr	r2, [pc, #388]	@ (8002a80 <HAL_GPIO_Init+0x328>)
 80028fc:	69fb      	ldr	r3, [r7, #28]
 80028fe:	089b      	lsrs	r3, r3, #2
 8002900:	3302      	adds	r3, #2
 8002902:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002906:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002908:	69fb      	ldr	r3, [r7, #28]
 800290a:	f003 0303 	and.w	r3, r3, #3
 800290e:	009b      	lsls	r3, r3, #2
 8002910:	220f      	movs	r2, #15
 8002912:	fa02 f303 	lsl.w	r3, r2, r3
 8002916:	43db      	mvns	r3, r3
 8002918:	69ba      	ldr	r2, [r7, #24]
 800291a:	4013      	ands	r3, r2
 800291c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	4a58      	ldr	r2, [pc, #352]	@ (8002a84 <HAL_GPIO_Init+0x32c>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d037      	beq.n	8002996 <HAL_GPIO_Init+0x23e>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	4a57      	ldr	r2, [pc, #348]	@ (8002a88 <HAL_GPIO_Init+0x330>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d031      	beq.n	8002992 <HAL_GPIO_Init+0x23a>
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	4a56      	ldr	r2, [pc, #344]	@ (8002a8c <HAL_GPIO_Init+0x334>)
 8002932:	4293      	cmp	r3, r2
 8002934:	d02b      	beq.n	800298e <HAL_GPIO_Init+0x236>
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	4a55      	ldr	r2, [pc, #340]	@ (8002a90 <HAL_GPIO_Init+0x338>)
 800293a:	4293      	cmp	r3, r2
 800293c:	d025      	beq.n	800298a <HAL_GPIO_Init+0x232>
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	4a54      	ldr	r2, [pc, #336]	@ (8002a94 <HAL_GPIO_Init+0x33c>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d01f      	beq.n	8002986 <HAL_GPIO_Init+0x22e>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	4a53      	ldr	r2, [pc, #332]	@ (8002a98 <HAL_GPIO_Init+0x340>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d019      	beq.n	8002982 <HAL_GPIO_Init+0x22a>
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	4a52      	ldr	r2, [pc, #328]	@ (8002a9c <HAL_GPIO_Init+0x344>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d013      	beq.n	800297e <HAL_GPIO_Init+0x226>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	4a51      	ldr	r2, [pc, #324]	@ (8002aa0 <HAL_GPIO_Init+0x348>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d00d      	beq.n	800297a <HAL_GPIO_Init+0x222>
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	4a50      	ldr	r2, [pc, #320]	@ (8002aa4 <HAL_GPIO_Init+0x34c>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d007      	beq.n	8002976 <HAL_GPIO_Init+0x21e>
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	4a4f      	ldr	r2, [pc, #316]	@ (8002aa8 <HAL_GPIO_Init+0x350>)
 800296a:	4293      	cmp	r3, r2
 800296c:	d101      	bne.n	8002972 <HAL_GPIO_Init+0x21a>
 800296e:	2309      	movs	r3, #9
 8002970:	e012      	b.n	8002998 <HAL_GPIO_Init+0x240>
 8002972:	230a      	movs	r3, #10
 8002974:	e010      	b.n	8002998 <HAL_GPIO_Init+0x240>
 8002976:	2308      	movs	r3, #8
 8002978:	e00e      	b.n	8002998 <HAL_GPIO_Init+0x240>
 800297a:	2307      	movs	r3, #7
 800297c:	e00c      	b.n	8002998 <HAL_GPIO_Init+0x240>
 800297e:	2306      	movs	r3, #6
 8002980:	e00a      	b.n	8002998 <HAL_GPIO_Init+0x240>
 8002982:	2305      	movs	r3, #5
 8002984:	e008      	b.n	8002998 <HAL_GPIO_Init+0x240>
 8002986:	2304      	movs	r3, #4
 8002988:	e006      	b.n	8002998 <HAL_GPIO_Init+0x240>
 800298a:	2303      	movs	r3, #3
 800298c:	e004      	b.n	8002998 <HAL_GPIO_Init+0x240>
 800298e:	2302      	movs	r3, #2
 8002990:	e002      	b.n	8002998 <HAL_GPIO_Init+0x240>
 8002992:	2301      	movs	r3, #1
 8002994:	e000      	b.n	8002998 <HAL_GPIO_Init+0x240>
 8002996:	2300      	movs	r3, #0
 8002998:	69fa      	ldr	r2, [r7, #28]
 800299a:	f002 0203 	and.w	r2, r2, #3
 800299e:	0092      	lsls	r2, r2, #2
 80029a0:	4093      	lsls	r3, r2
 80029a2:	69ba      	ldr	r2, [r7, #24]
 80029a4:	4313      	orrs	r3, r2
 80029a6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80029a8:	4935      	ldr	r1, [pc, #212]	@ (8002a80 <HAL_GPIO_Init+0x328>)
 80029aa:	69fb      	ldr	r3, [r7, #28]
 80029ac:	089b      	lsrs	r3, r3, #2
 80029ae:	3302      	adds	r3, #2
 80029b0:	69ba      	ldr	r2, [r7, #24]
 80029b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80029b6:	4b3d      	ldr	r3, [pc, #244]	@ (8002aac <HAL_GPIO_Init+0x354>)
 80029b8:	689b      	ldr	r3, [r3, #8]
 80029ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029bc:	693b      	ldr	r3, [r7, #16]
 80029be:	43db      	mvns	r3, r3
 80029c0:	69ba      	ldr	r2, [r7, #24]
 80029c2:	4013      	ands	r3, r2
 80029c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d003      	beq.n	80029da <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80029d2:	69ba      	ldr	r2, [r7, #24]
 80029d4:	693b      	ldr	r3, [r7, #16]
 80029d6:	4313      	orrs	r3, r2
 80029d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80029da:	4a34      	ldr	r2, [pc, #208]	@ (8002aac <HAL_GPIO_Init+0x354>)
 80029dc:	69bb      	ldr	r3, [r7, #24]
 80029de:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80029e0:	4b32      	ldr	r3, [pc, #200]	@ (8002aac <HAL_GPIO_Init+0x354>)
 80029e2:	68db      	ldr	r3, [r3, #12]
 80029e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029e6:	693b      	ldr	r3, [r7, #16]
 80029e8:	43db      	mvns	r3, r3
 80029ea:	69ba      	ldr	r2, [r7, #24]
 80029ec:	4013      	ands	r3, r2
 80029ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d003      	beq.n	8002a04 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80029fc:	69ba      	ldr	r2, [r7, #24]
 80029fe:	693b      	ldr	r3, [r7, #16]
 8002a00:	4313      	orrs	r3, r2
 8002a02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002a04:	4a29      	ldr	r2, [pc, #164]	@ (8002aac <HAL_GPIO_Init+0x354>)
 8002a06:	69bb      	ldr	r3, [r7, #24]
 8002a08:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002a0a:	4b28      	ldr	r3, [pc, #160]	@ (8002aac <HAL_GPIO_Init+0x354>)
 8002a0c:	685b      	ldr	r3, [r3, #4]
 8002a0e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a10:	693b      	ldr	r3, [r7, #16]
 8002a12:	43db      	mvns	r3, r3
 8002a14:	69ba      	ldr	r2, [r7, #24]
 8002a16:	4013      	ands	r3, r2
 8002a18:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	685b      	ldr	r3, [r3, #4]
 8002a1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d003      	beq.n	8002a2e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002a26:	69ba      	ldr	r2, [r7, #24]
 8002a28:	693b      	ldr	r3, [r7, #16]
 8002a2a:	4313      	orrs	r3, r2
 8002a2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002a2e:	4a1f      	ldr	r2, [pc, #124]	@ (8002aac <HAL_GPIO_Init+0x354>)
 8002a30:	69bb      	ldr	r3, [r7, #24]
 8002a32:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a34:	4b1d      	ldr	r3, [pc, #116]	@ (8002aac <HAL_GPIO_Init+0x354>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a3a:	693b      	ldr	r3, [r7, #16]
 8002a3c:	43db      	mvns	r3, r3
 8002a3e:	69ba      	ldr	r2, [r7, #24]
 8002a40:	4013      	ands	r3, r2
 8002a42:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	685b      	ldr	r3, [r3, #4]
 8002a48:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d003      	beq.n	8002a58 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002a50:	69ba      	ldr	r2, [r7, #24]
 8002a52:	693b      	ldr	r3, [r7, #16]
 8002a54:	4313      	orrs	r3, r2
 8002a56:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002a58:	4a14      	ldr	r2, [pc, #80]	@ (8002aac <HAL_GPIO_Init+0x354>)
 8002a5a:	69bb      	ldr	r3, [r7, #24]
 8002a5c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a5e:	69fb      	ldr	r3, [r7, #28]
 8002a60:	3301      	adds	r3, #1
 8002a62:	61fb      	str	r3, [r7, #28]
 8002a64:	69fb      	ldr	r3, [r7, #28]
 8002a66:	2b0f      	cmp	r3, #15
 8002a68:	f67f ae84 	bls.w	8002774 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002a6c:	bf00      	nop
 8002a6e:	bf00      	nop
 8002a70:	3724      	adds	r7, #36	@ 0x24
 8002a72:	46bd      	mov	sp, r7
 8002a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a78:	4770      	bx	lr
 8002a7a:	bf00      	nop
 8002a7c:	40023800 	.word	0x40023800
 8002a80:	40013800 	.word	0x40013800
 8002a84:	40020000 	.word	0x40020000
 8002a88:	40020400 	.word	0x40020400
 8002a8c:	40020800 	.word	0x40020800
 8002a90:	40020c00 	.word	0x40020c00
 8002a94:	40021000 	.word	0x40021000
 8002a98:	40021400 	.word	0x40021400
 8002a9c:	40021800 	.word	0x40021800
 8002aa0:	40021c00 	.word	0x40021c00
 8002aa4:	40022000 	.word	0x40022000
 8002aa8:	40022400 	.word	0x40022400
 8002aac:	40013c00 	.word	0x40013c00

08002ab0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	b085      	sub	sp, #20
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
 8002ab8:	460b      	mov	r3, r1
 8002aba:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	691a      	ldr	r2, [r3, #16]
 8002ac0:	887b      	ldrh	r3, [r7, #2]
 8002ac2:	4013      	ands	r3, r2
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d002      	beq.n	8002ace <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002ac8:	2301      	movs	r3, #1
 8002aca:	73fb      	strb	r3, [r7, #15]
 8002acc:	e001      	b.n	8002ad2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002ace:	2300      	movs	r3, #0
 8002ad0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002ad2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	3714      	adds	r7, #20
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ade:	4770      	bx	lr

08002ae0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b084      	sub	sp, #16
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d101      	bne.n	8002af2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002aee:	2301      	movs	r3, #1
 8002af0:	e12b      	b.n	8002d4a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002af8:	b2db      	uxtb	r3, r3
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d106      	bne.n	8002b0c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2200      	movs	r2, #0
 8002b02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002b06:	6878      	ldr	r0, [r7, #4]
 8002b08:	f7ff fab2 	bl	8002070 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2224      	movs	r2, #36	@ 0x24
 8002b10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	681a      	ldr	r2, [r3, #0]
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f022 0201 	bic.w	r2, r2, #1
 8002b22:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	681a      	ldr	r2, [r3, #0]
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002b32:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	681a      	ldr	r2, [r3, #0]
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002b42:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002b44:	f002 ff16 	bl	8005974 <HAL_RCC_GetPCLK1Freq>
 8002b48:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	685b      	ldr	r3, [r3, #4]
 8002b4e:	4a81      	ldr	r2, [pc, #516]	@ (8002d54 <HAL_I2C_Init+0x274>)
 8002b50:	4293      	cmp	r3, r2
 8002b52:	d807      	bhi.n	8002b64 <HAL_I2C_Init+0x84>
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	4a80      	ldr	r2, [pc, #512]	@ (8002d58 <HAL_I2C_Init+0x278>)
 8002b58:	4293      	cmp	r3, r2
 8002b5a:	bf94      	ite	ls
 8002b5c:	2301      	movls	r3, #1
 8002b5e:	2300      	movhi	r3, #0
 8002b60:	b2db      	uxtb	r3, r3
 8002b62:	e006      	b.n	8002b72 <HAL_I2C_Init+0x92>
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	4a7d      	ldr	r2, [pc, #500]	@ (8002d5c <HAL_I2C_Init+0x27c>)
 8002b68:	4293      	cmp	r3, r2
 8002b6a:	bf94      	ite	ls
 8002b6c:	2301      	movls	r3, #1
 8002b6e:	2300      	movhi	r3, #0
 8002b70:	b2db      	uxtb	r3, r3
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d001      	beq.n	8002b7a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002b76:	2301      	movs	r3, #1
 8002b78:	e0e7      	b.n	8002d4a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	4a78      	ldr	r2, [pc, #480]	@ (8002d60 <HAL_I2C_Init+0x280>)
 8002b7e:	fba2 2303 	umull	r2, r3, r2, r3
 8002b82:	0c9b      	lsrs	r3, r3, #18
 8002b84:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	685b      	ldr	r3, [r3, #4]
 8002b8c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	68ba      	ldr	r2, [r7, #8]
 8002b96:	430a      	orrs	r2, r1
 8002b98:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	6a1b      	ldr	r3, [r3, #32]
 8002ba0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	685b      	ldr	r3, [r3, #4]
 8002ba8:	4a6a      	ldr	r2, [pc, #424]	@ (8002d54 <HAL_I2C_Init+0x274>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d802      	bhi.n	8002bb4 <HAL_I2C_Init+0xd4>
 8002bae:	68bb      	ldr	r3, [r7, #8]
 8002bb0:	3301      	adds	r3, #1
 8002bb2:	e009      	b.n	8002bc8 <HAL_I2C_Init+0xe8>
 8002bb4:	68bb      	ldr	r3, [r7, #8]
 8002bb6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002bba:	fb02 f303 	mul.w	r3, r2, r3
 8002bbe:	4a69      	ldr	r2, [pc, #420]	@ (8002d64 <HAL_I2C_Init+0x284>)
 8002bc0:	fba2 2303 	umull	r2, r3, r2, r3
 8002bc4:	099b      	lsrs	r3, r3, #6
 8002bc6:	3301      	adds	r3, #1
 8002bc8:	687a      	ldr	r2, [r7, #4]
 8002bca:	6812      	ldr	r2, [r2, #0]
 8002bcc:	430b      	orrs	r3, r1
 8002bce:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	69db      	ldr	r3, [r3, #28]
 8002bd6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002bda:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	495c      	ldr	r1, [pc, #368]	@ (8002d54 <HAL_I2C_Init+0x274>)
 8002be4:	428b      	cmp	r3, r1
 8002be6:	d819      	bhi.n	8002c1c <HAL_I2C_Init+0x13c>
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	1e59      	subs	r1, r3, #1
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	005b      	lsls	r3, r3, #1
 8002bf2:	fbb1 f3f3 	udiv	r3, r1, r3
 8002bf6:	1c59      	adds	r1, r3, #1
 8002bf8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002bfc:	400b      	ands	r3, r1
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d00a      	beq.n	8002c18 <HAL_I2C_Init+0x138>
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	1e59      	subs	r1, r3, #1
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	005b      	lsls	r3, r3, #1
 8002c0c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002c10:	3301      	adds	r3, #1
 8002c12:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c16:	e051      	b.n	8002cbc <HAL_I2C_Init+0x1dc>
 8002c18:	2304      	movs	r3, #4
 8002c1a:	e04f      	b.n	8002cbc <HAL_I2C_Init+0x1dc>
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	689b      	ldr	r3, [r3, #8]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d111      	bne.n	8002c48 <HAL_I2C_Init+0x168>
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	1e58      	subs	r0, r3, #1
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6859      	ldr	r1, [r3, #4]
 8002c2c:	460b      	mov	r3, r1
 8002c2e:	005b      	lsls	r3, r3, #1
 8002c30:	440b      	add	r3, r1
 8002c32:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c36:	3301      	adds	r3, #1
 8002c38:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	bf0c      	ite	eq
 8002c40:	2301      	moveq	r3, #1
 8002c42:	2300      	movne	r3, #0
 8002c44:	b2db      	uxtb	r3, r3
 8002c46:	e012      	b.n	8002c6e <HAL_I2C_Init+0x18e>
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	1e58      	subs	r0, r3, #1
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6859      	ldr	r1, [r3, #4]
 8002c50:	460b      	mov	r3, r1
 8002c52:	009b      	lsls	r3, r3, #2
 8002c54:	440b      	add	r3, r1
 8002c56:	0099      	lsls	r1, r3, #2
 8002c58:	440b      	add	r3, r1
 8002c5a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c5e:	3301      	adds	r3, #1
 8002c60:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	bf0c      	ite	eq
 8002c68:	2301      	moveq	r3, #1
 8002c6a:	2300      	movne	r3, #0
 8002c6c:	b2db      	uxtb	r3, r3
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d001      	beq.n	8002c76 <HAL_I2C_Init+0x196>
 8002c72:	2301      	movs	r3, #1
 8002c74:	e022      	b.n	8002cbc <HAL_I2C_Init+0x1dc>
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	689b      	ldr	r3, [r3, #8]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d10e      	bne.n	8002c9c <HAL_I2C_Init+0x1bc>
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	1e58      	subs	r0, r3, #1
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6859      	ldr	r1, [r3, #4]
 8002c86:	460b      	mov	r3, r1
 8002c88:	005b      	lsls	r3, r3, #1
 8002c8a:	440b      	add	r3, r1
 8002c8c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c90:	3301      	adds	r3, #1
 8002c92:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c96:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002c9a:	e00f      	b.n	8002cbc <HAL_I2C_Init+0x1dc>
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	1e58      	subs	r0, r3, #1
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6859      	ldr	r1, [r3, #4]
 8002ca4:	460b      	mov	r3, r1
 8002ca6:	009b      	lsls	r3, r3, #2
 8002ca8:	440b      	add	r3, r1
 8002caa:	0099      	lsls	r1, r3, #2
 8002cac:	440b      	add	r3, r1
 8002cae:	fbb0 f3f3 	udiv	r3, r0, r3
 8002cb2:	3301      	adds	r3, #1
 8002cb4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cb8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002cbc:	6879      	ldr	r1, [r7, #4]
 8002cbe:	6809      	ldr	r1, [r1, #0]
 8002cc0:	4313      	orrs	r3, r2
 8002cc2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	69da      	ldr	r2, [r3, #28]
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6a1b      	ldr	r3, [r3, #32]
 8002cd6:	431a      	orrs	r2, r3
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	430a      	orrs	r2, r1
 8002cde:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	689b      	ldr	r3, [r3, #8]
 8002ce6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002cea:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002cee:	687a      	ldr	r2, [r7, #4]
 8002cf0:	6911      	ldr	r1, [r2, #16]
 8002cf2:	687a      	ldr	r2, [r7, #4]
 8002cf4:	68d2      	ldr	r2, [r2, #12]
 8002cf6:	4311      	orrs	r1, r2
 8002cf8:	687a      	ldr	r2, [r7, #4]
 8002cfa:	6812      	ldr	r2, [r2, #0]
 8002cfc:	430b      	orrs	r3, r1
 8002cfe:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	68db      	ldr	r3, [r3, #12]
 8002d06:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	695a      	ldr	r2, [r3, #20]
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	699b      	ldr	r3, [r3, #24]
 8002d12:	431a      	orrs	r2, r3
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	430a      	orrs	r2, r1
 8002d1a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	681a      	ldr	r2, [r3, #0]
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f042 0201 	orr.w	r2, r2, #1
 8002d2a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2200      	movs	r2, #0
 8002d30:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2220      	movs	r2, #32
 8002d36:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2200      	movs	r2, #0
 8002d44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002d48:	2300      	movs	r3, #0
}
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	3710      	adds	r7, #16
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bd80      	pop	{r7, pc}
 8002d52:	bf00      	nop
 8002d54:	000186a0 	.word	0x000186a0
 8002d58:	001e847f 	.word	0x001e847f
 8002d5c:	003d08ff 	.word	0x003d08ff
 8002d60:	431bde83 	.word	0x431bde83
 8002d64:	10624dd3 	.word	0x10624dd3

08002d68 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b088      	sub	sp, #32
 8002d6c:	af02      	add	r7, sp, #8
 8002d6e:	60f8      	str	r0, [r7, #12]
 8002d70:	4608      	mov	r0, r1
 8002d72:	4611      	mov	r1, r2
 8002d74:	461a      	mov	r2, r3
 8002d76:	4603      	mov	r3, r0
 8002d78:	817b      	strh	r3, [r7, #10]
 8002d7a:	460b      	mov	r3, r1
 8002d7c:	813b      	strh	r3, [r7, #8]
 8002d7e:	4613      	mov	r3, r2
 8002d80:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002d82:	f7ff fba7 	bl	80024d4 <HAL_GetTick>
 8002d86:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002d8e:	b2db      	uxtb	r3, r3
 8002d90:	2b20      	cmp	r3, #32
 8002d92:	f040 80d9 	bne.w	8002f48 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002d96:	697b      	ldr	r3, [r7, #20]
 8002d98:	9300      	str	r3, [sp, #0]
 8002d9a:	2319      	movs	r3, #25
 8002d9c:	2201      	movs	r2, #1
 8002d9e:	496d      	ldr	r1, [pc, #436]	@ (8002f54 <HAL_I2C_Mem_Write+0x1ec>)
 8002da0:	68f8      	ldr	r0, [r7, #12]
 8002da2:	f000 fc8b 	bl	80036bc <I2C_WaitOnFlagUntilTimeout>
 8002da6:	4603      	mov	r3, r0
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d001      	beq.n	8002db0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002dac:	2302      	movs	r3, #2
 8002dae:	e0cc      	b.n	8002f4a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002db6:	2b01      	cmp	r3, #1
 8002db8:	d101      	bne.n	8002dbe <HAL_I2C_Mem_Write+0x56>
 8002dba:	2302      	movs	r3, #2
 8002dbc:	e0c5      	b.n	8002f4a <HAL_I2C_Mem_Write+0x1e2>
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	2201      	movs	r2, #1
 8002dc2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f003 0301 	and.w	r3, r3, #1
 8002dd0:	2b01      	cmp	r3, #1
 8002dd2:	d007      	beq.n	8002de4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	681a      	ldr	r2, [r3, #0]
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f042 0201 	orr.w	r2, r2, #1
 8002de2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	681a      	ldr	r2, [r3, #0]
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002df2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	2221      	movs	r2, #33	@ 0x21
 8002df8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	2240      	movs	r2, #64	@ 0x40
 8002e00:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	2200      	movs	r2, #0
 8002e08:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	6a3a      	ldr	r2, [r7, #32]
 8002e0e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002e14:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e1a:	b29a      	uxth	r2, r3
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	4a4d      	ldr	r2, [pc, #308]	@ (8002f58 <HAL_I2C_Mem_Write+0x1f0>)
 8002e24:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002e26:	88f8      	ldrh	r0, [r7, #6]
 8002e28:	893a      	ldrh	r2, [r7, #8]
 8002e2a:	8979      	ldrh	r1, [r7, #10]
 8002e2c:	697b      	ldr	r3, [r7, #20]
 8002e2e:	9301      	str	r3, [sp, #4]
 8002e30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e32:	9300      	str	r3, [sp, #0]
 8002e34:	4603      	mov	r3, r0
 8002e36:	68f8      	ldr	r0, [r7, #12]
 8002e38:	f000 fac2 	bl	80033c0 <I2C_RequestMemoryWrite>
 8002e3c:	4603      	mov	r3, r0
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d052      	beq.n	8002ee8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002e42:	2301      	movs	r3, #1
 8002e44:	e081      	b.n	8002f4a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e46:	697a      	ldr	r2, [r7, #20]
 8002e48:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002e4a:	68f8      	ldr	r0, [r7, #12]
 8002e4c:	f000 fd50 	bl	80038f0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002e50:	4603      	mov	r3, r0
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d00d      	beq.n	8002e72 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e5a:	2b04      	cmp	r3, #4
 8002e5c:	d107      	bne.n	8002e6e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	681a      	ldr	r2, [r3, #0]
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e6c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002e6e:	2301      	movs	r3, #1
 8002e70:	e06b      	b.n	8002f4a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e76:	781a      	ldrb	r2, [r3, #0]
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e82:	1c5a      	adds	r2, r3, #1
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e8c:	3b01      	subs	r3, #1
 8002e8e:	b29a      	uxth	r2, r3
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e98:	b29b      	uxth	r3, r3
 8002e9a:	3b01      	subs	r3, #1
 8002e9c:	b29a      	uxth	r2, r3
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	695b      	ldr	r3, [r3, #20]
 8002ea8:	f003 0304 	and.w	r3, r3, #4
 8002eac:	2b04      	cmp	r3, #4
 8002eae:	d11b      	bne.n	8002ee8 <HAL_I2C_Mem_Write+0x180>
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d017      	beq.n	8002ee8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ebc:	781a      	ldrb	r2, [r3, #0]
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ec8:	1c5a      	adds	r2, r3, #1
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ed2:	3b01      	subs	r3, #1
 8002ed4:	b29a      	uxth	r2, r3
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ede:	b29b      	uxth	r3, r3
 8002ee0:	3b01      	subs	r3, #1
 8002ee2:	b29a      	uxth	r2, r3
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d1aa      	bne.n	8002e46 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ef0:	697a      	ldr	r2, [r7, #20]
 8002ef2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002ef4:	68f8      	ldr	r0, [r7, #12]
 8002ef6:	f000 fd43 	bl	8003980 <I2C_WaitOnBTFFlagUntilTimeout>
 8002efa:	4603      	mov	r3, r0
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d00d      	beq.n	8002f1c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f04:	2b04      	cmp	r3, #4
 8002f06:	d107      	bne.n	8002f18 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	681a      	ldr	r2, [r3, #0]
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f16:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002f18:	2301      	movs	r3, #1
 8002f1a:	e016      	b.n	8002f4a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	681a      	ldr	r2, [r3, #0]
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f2a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	2220      	movs	r2, #32
 8002f30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	2200      	movs	r2, #0
 8002f38:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	2200      	movs	r2, #0
 8002f40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002f44:	2300      	movs	r3, #0
 8002f46:	e000      	b.n	8002f4a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002f48:	2302      	movs	r3, #2
  }
}
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	3718      	adds	r7, #24
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bd80      	pop	{r7, pc}
 8002f52:	bf00      	nop
 8002f54:	00100002 	.word	0x00100002
 8002f58:	ffff0000 	.word	0xffff0000

08002f5c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b08c      	sub	sp, #48	@ 0x30
 8002f60:	af02      	add	r7, sp, #8
 8002f62:	60f8      	str	r0, [r7, #12]
 8002f64:	4608      	mov	r0, r1
 8002f66:	4611      	mov	r1, r2
 8002f68:	461a      	mov	r2, r3
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	817b      	strh	r3, [r7, #10]
 8002f6e:	460b      	mov	r3, r1
 8002f70:	813b      	strh	r3, [r7, #8]
 8002f72:	4613      	mov	r3, r2
 8002f74:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002f76:	f7ff faad 	bl	80024d4 <HAL_GetTick>
 8002f7a:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f82:	b2db      	uxtb	r3, r3
 8002f84:	2b20      	cmp	r3, #32
 8002f86:	f040 8214 	bne.w	80033b2 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002f8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f8c:	9300      	str	r3, [sp, #0]
 8002f8e:	2319      	movs	r3, #25
 8002f90:	2201      	movs	r2, #1
 8002f92:	497b      	ldr	r1, [pc, #492]	@ (8003180 <HAL_I2C_Mem_Read+0x224>)
 8002f94:	68f8      	ldr	r0, [r7, #12]
 8002f96:	f000 fb91 	bl	80036bc <I2C_WaitOnFlagUntilTimeout>
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d001      	beq.n	8002fa4 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002fa0:	2302      	movs	r3, #2
 8002fa2:	e207      	b.n	80033b4 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002faa:	2b01      	cmp	r3, #1
 8002fac:	d101      	bne.n	8002fb2 <HAL_I2C_Mem_Read+0x56>
 8002fae:	2302      	movs	r3, #2
 8002fb0:	e200      	b.n	80033b4 <HAL_I2C_Mem_Read+0x458>
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	2201      	movs	r2, #1
 8002fb6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f003 0301 	and.w	r3, r3, #1
 8002fc4:	2b01      	cmp	r3, #1
 8002fc6:	d007      	beq.n	8002fd8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	681a      	ldr	r2, [r3, #0]
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f042 0201 	orr.w	r2, r2, #1
 8002fd6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	681a      	ldr	r2, [r3, #0]
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002fe6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	2222      	movs	r2, #34	@ 0x22
 8002fec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	2240      	movs	r2, #64	@ 0x40
 8002ff4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003002:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8003008:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800300e:	b29a      	uxth	r2, r3
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	4a5b      	ldr	r2, [pc, #364]	@ (8003184 <HAL_I2C_Mem_Read+0x228>)
 8003018:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800301a:	88f8      	ldrh	r0, [r7, #6]
 800301c:	893a      	ldrh	r2, [r7, #8]
 800301e:	8979      	ldrh	r1, [r7, #10]
 8003020:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003022:	9301      	str	r3, [sp, #4]
 8003024:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003026:	9300      	str	r3, [sp, #0]
 8003028:	4603      	mov	r3, r0
 800302a:	68f8      	ldr	r0, [r7, #12]
 800302c:	f000 fa5e 	bl	80034ec <I2C_RequestMemoryRead>
 8003030:	4603      	mov	r3, r0
 8003032:	2b00      	cmp	r3, #0
 8003034:	d001      	beq.n	800303a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003036:	2301      	movs	r3, #1
 8003038:	e1bc      	b.n	80033b4 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800303e:	2b00      	cmp	r3, #0
 8003040:	d113      	bne.n	800306a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003042:	2300      	movs	r3, #0
 8003044:	623b      	str	r3, [r7, #32]
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	695b      	ldr	r3, [r3, #20]
 800304c:	623b      	str	r3, [r7, #32]
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	699b      	ldr	r3, [r3, #24]
 8003054:	623b      	str	r3, [r7, #32]
 8003056:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	681a      	ldr	r2, [r3, #0]
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003066:	601a      	str	r2, [r3, #0]
 8003068:	e190      	b.n	800338c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800306e:	2b01      	cmp	r3, #1
 8003070:	d11b      	bne.n	80030aa <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	681a      	ldr	r2, [r3, #0]
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003080:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003082:	2300      	movs	r3, #0
 8003084:	61fb      	str	r3, [r7, #28]
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	695b      	ldr	r3, [r3, #20]
 800308c:	61fb      	str	r3, [r7, #28]
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	699b      	ldr	r3, [r3, #24]
 8003094:	61fb      	str	r3, [r7, #28]
 8003096:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	681a      	ldr	r2, [r3, #0]
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80030a6:	601a      	str	r2, [r3, #0]
 80030a8:	e170      	b.n	800338c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030ae:	2b02      	cmp	r3, #2
 80030b0:	d11b      	bne.n	80030ea <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	681a      	ldr	r2, [r3, #0]
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80030c0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	681a      	ldr	r2, [r3, #0]
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80030d0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80030d2:	2300      	movs	r3, #0
 80030d4:	61bb      	str	r3, [r7, #24]
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	695b      	ldr	r3, [r3, #20]
 80030dc:	61bb      	str	r3, [r7, #24]
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	699b      	ldr	r3, [r3, #24]
 80030e4:	61bb      	str	r3, [r7, #24]
 80030e6:	69bb      	ldr	r3, [r7, #24]
 80030e8:	e150      	b.n	800338c <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80030ea:	2300      	movs	r3, #0
 80030ec:	617b      	str	r3, [r7, #20]
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	695b      	ldr	r3, [r3, #20]
 80030f4:	617b      	str	r3, [r7, #20]
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	699b      	ldr	r3, [r3, #24]
 80030fc:	617b      	str	r3, [r7, #20]
 80030fe:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003100:	e144      	b.n	800338c <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003106:	2b03      	cmp	r3, #3
 8003108:	f200 80f1 	bhi.w	80032ee <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003110:	2b01      	cmp	r3, #1
 8003112:	d123      	bne.n	800315c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003114:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003116:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003118:	68f8      	ldr	r0, [r7, #12]
 800311a:	f000 fc79 	bl	8003a10 <I2C_WaitOnRXNEFlagUntilTimeout>
 800311e:	4603      	mov	r3, r0
 8003120:	2b00      	cmp	r3, #0
 8003122:	d001      	beq.n	8003128 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003124:	2301      	movs	r3, #1
 8003126:	e145      	b.n	80033b4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	691a      	ldr	r2, [r3, #16]
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003132:	b2d2      	uxtb	r2, r2
 8003134:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800313a:	1c5a      	adds	r2, r3, #1
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003144:	3b01      	subs	r3, #1
 8003146:	b29a      	uxth	r2, r3
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003150:	b29b      	uxth	r3, r3
 8003152:	3b01      	subs	r3, #1
 8003154:	b29a      	uxth	r2, r3
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800315a:	e117      	b.n	800338c <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003160:	2b02      	cmp	r3, #2
 8003162:	d14e      	bne.n	8003202 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003164:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003166:	9300      	str	r3, [sp, #0]
 8003168:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800316a:	2200      	movs	r2, #0
 800316c:	4906      	ldr	r1, [pc, #24]	@ (8003188 <HAL_I2C_Mem_Read+0x22c>)
 800316e:	68f8      	ldr	r0, [r7, #12]
 8003170:	f000 faa4 	bl	80036bc <I2C_WaitOnFlagUntilTimeout>
 8003174:	4603      	mov	r3, r0
 8003176:	2b00      	cmp	r3, #0
 8003178:	d008      	beq.n	800318c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800317a:	2301      	movs	r3, #1
 800317c:	e11a      	b.n	80033b4 <HAL_I2C_Mem_Read+0x458>
 800317e:	bf00      	nop
 8003180:	00100002 	.word	0x00100002
 8003184:	ffff0000 	.word	0xffff0000
 8003188:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	681a      	ldr	r2, [r3, #0]
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800319a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	691a      	ldr	r2, [r3, #16]
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031a6:	b2d2      	uxtb	r2, r2
 80031a8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031ae:	1c5a      	adds	r2, r3, #1
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031b8:	3b01      	subs	r3, #1
 80031ba:	b29a      	uxth	r2, r3
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031c4:	b29b      	uxth	r3, r3
 80031c6:	3b01      	subs	r3, #1
 80031c8:	b29a      	uxth	r2, r3
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	691a      	ldr	r2, [r3, #16]
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031d8:	b2d2      	uxtb	r2, r2
 80031da:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031e0:	1c5a      	adds	r2, r3, #1
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031ea:	3b01      	subs	r3, #1
 80031ec:	b29a      	uxth	r2, r3
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031f6:	b29b      	uxth	r3, r3
 80031f8:	3b01      	subs	r3, #1
 80031fa:	b29a      	uxth	r2, r3
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003200:	e0c4      	b.n	800338c <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003202:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003204:	9300      	str	r3, [sp, #0]
 8003206:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003208:	2200      	movs	r2, #0
 800320a:	496c      	ldr	r1, [pc, #432]	@ (80033bc <HAL_I2C_Mem_Read+0x460>)
 800320c:	68f8      	ldr	r0, [r7, #12]
 800320e:	f000 fa55 	bl	80036bc <I2C_WaitOnFlagUntilTimeout>
 8003212:	4603      	mov	r3, r0
 8003214:	2b00      	cmp	r3, #0
 8003216:	d001      	beq.n	800321c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003218:	2301      	movs	r3, #1
 800321a:	e0cb      	b.n	80033b4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	681a      	ldr	r2, [r3, #0]
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800322a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	691a      	ldr	r2, [r3, #16]
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003236:	b2d2      	uxtb	r2, r2
 8003238:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800323e:	1c5a      	adds	r2, r3, #1
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003248:	3b01      	subs	r3, #1
 800324a:	b29a      	uxth	r2, r3
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003254:	b29b      	uxth	r3, r3
 8003256:	3b01      	subs	r3, #1
 8003258:	b29a      	uxth	r2, r3
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800325e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003260:	9300      	str	r3, [sp, #0]
 8003262:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003264:	2200      	movs	r2, #0
 8003266:	4955      	ldr	r1, [pc, #340]	@ (80033bc <HAL_I2C_Mem_Read+0x460>)
 8003268:	68f8      	ldr	r0, [r7, #12]
 800326a:	f000 fa27 	bl	80036bc <I2C_WaitOnFlagUntilTimeout>
 800326e:	4603      	mov	r3, r0
 8003270:	2b00      	cmp	r3, #0
 8003272:	d001      	beq.n	8003278 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003274:	2301      	movs	r3, #1
 8003276:	e09d      	b.n	80033b4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	681a      	ldr	r2, [r3, #0]
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003286:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	691a      	ldr	r2, [r3, #16]
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003292:	b2d2      	uxtb	r2, r2
 8003294:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800329a:	1c5a      	adds	r2, r3, #1
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032a4:	3b01      	subs	r3, #1
 80032a6:	b29a      	uxth	r2, r3
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032b0:	b29b      	uxth	r3, r3
 80032b2:	3b01      	subs	r3, #1
 80032b4:	b29a      	uxth	r2, r3
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	691a      	ldr	r2, [r3, #16]
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032c4:	b2d2      	uxtb	r2, r2
 80032c6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032cc:	1c5a      	adds	r2, r3, #1
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032d6:	3b01      	subs	r3, #1
 80032d8:	b29a      	uxth	r2, r3
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032e2:	b29b      	uxth	r3, r3
 80032e4:	3b01      	subs	r3, #1
 80032e6:	b29a      	uxth	r2, r3
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80032ec:	e04e      	b.n	800338c <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80032ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80032f0:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80032f2:	68f8      	ldr	r0, [r7, #12]
 80032f4:	f000 fb8c 	bl	8003a10 <I2C_WaitOnRXNEFlagUntilTimeout>
 80032f8:	4603      	mov	r3, r0
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d001      	beq.n	8003302 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80032fe:	2301      	movs	r3, #1
 8003300:	e058      	b.n	80033b4 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	691a      	ldr	r2, [r3, #16]
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800330c:	b2d2      	uxtb	r2, r2
 800330e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003314:	1c5a      	adds	r2, r3, #1
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800331e:	3b01      	subs	r3, #1
 8003320:	b29a      	uxth	r2, r3
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800332a:	b29b      	uxth	r3, r3
 800332c:	3b01      	subs	r3, #1
 800332e:	b29a      	uxth	r2, r3
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	695b      	ldr	r3, [r3, #20]
 800333a:	f003 0304 	and.w	r3, r3, #4
 800333e:	2b04      	cmp	r3, #4
 8003340:	d124      	bne.n	800338c <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003346:	2b03      	cmp	r3, #3
 8003348:	d107      	bne.n	800335a <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	681a      	ldr	r2, [r3, #0]
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003358:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	691a      	ldr	r2, [r3, #16]
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003364:	b2d2      	uxtb	r2, r2
 8003366:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800336c:	1c5a      	adds	r2, r3, #1
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003376:	3b01      	subs	r3, #1
 8003378:	b29a      	uxth	r2, r3
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003382:	b29b      	uxth	r3, r3
 8003384:	3b01      	subs	r3, #1
 8003386:	b29a      	uxth	r2, r3
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003390:	2b00      	cmp	r3, #0
 8003392:	f47f aeb6 	bne.w	8003102 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	2220      	movs	r2, #32
 800339a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	2200      	movs	r2, #0
 80033a2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	2200      	movs	r2, #0
 80033aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80033ae:	2300      	movs	r3, #0
 80033b0:	e000      	b.n	80033b4 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 80033b2:	2302      	movs	r3, #2
  }
}
 80033b4:	4618      	mov	r0, r3
 80033b6:	3728      	adds	r7, #40	@ 0x28
 80033b8:	46bd      	mov	sp, r7
 80033ba:	bd80      	pop	{r7, pc}
 80033bc:	00010004 	.word	0x00010004

080033c0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b088      	sub	sp, #32
 80033c4:	af02      	add	r7, sp, #8
 80033c6:	60f8      	str	r0, [r7, #12]
 80033c8:	4608      	mov	r0, r1
 80033ca:	4611      	mov	r1, r2
 80033cc:	461a      	mov	r2, r3
 80033ce:	4603      	mov	r3, r0
 80033d0:	817b      	strh	r3, [r7, #10]
 80033d2:	460b      	mov	r3, r1
 80033d4:	813b      	strh	r3, [r7, #8]
 80033d6:	4613      	mov	r3, r2
 80033d8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	681a      	ldr	r2, [r3, #0]
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80033e8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80033ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033ec:	9300      	str	r3, [sp, #0]
 80033ee:	6a3b      	ldr	r3, [r7, #32]
 80033f0:	2200      	movs	r2, #0
 80033f2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80033f6:	68f8      	ldr	r0, [r7, #12]
 80033f8:	f000 f960 	bl	80036bc <I2C_WaitOnFlagUntilTimeout>
 80033fc:	4603      	mov	r3, r0
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d00d      	beq.n	800341e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800340c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003410:	d103      	bne.n	800341a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003418:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800341a:	2303      	movs	r3, #3
 800341c:	e05f      	b.n	80034de <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800341e:	897b      	ldrh	r3, [r7, #10]
 8003420:	b2db      	uxtb	r3, r3
 8003422:	461a      	mov	r2, r3
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800342c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800342e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003430:	6a3a      	ldr	r2, [r7, #32]
 8003432:	492d      	ldr	r1, [pc, #180]	@ (80034e8 <I2C_RequestMemoryWrite+0x128>)
 8003434:	68f8      	ldr	r0, [r7, #12]
 8003436:	f000 f9bb 	bl	80037b0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800343a:	4603      	mov	r3, r0
 800343c:	2b00      	cmp	r3, #0
 800343e:	d001      	beq.n	8003444 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003440:	2301      	movs	r3, #1
 8003442:	e04c      	b.n	80034de <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003444:	2300      	movs	r3, #0
 8003446:	617b      	str	r3, [r7, #20]
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	695b      	ldr	r3, [r3, #20]
 800344e:	617b      	str	r3, [r7, #20]
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	699b      	ldr	r3, [r3, #24]
 8003456:	617b      	str	r3, [r7, #20]
 8003458:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800345a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800345c:	6a39      	ldr	r1, [r7, #32]
 800345e:	68f8      	ldr	r0, [r7, #12]
 8003460:	f000 fa46 	bl	80038f0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003464:	4603      	mov	r3, r0
 8003466:	2b00      	cmp	r3, #0
 8003468:	d00d      	beq.n	8003486 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800346e:	2b04      	cmp	r3, #4
 8003470:	d107      	bne.n	8003482 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	681a      	ldr	r2, [r3, #0]
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003480:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003482:	2301      	movs	r3, #1
 8003484:	e02b      	b.n	80034de <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003486:	88fb      	ldrh	r3, [r7, #6]
 8003488:	2b01      	cmp	r3, #1
 800348a:	d105      	bne.n	8003498 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800348c:	893b      	ldrh	r3, [r7, #8]
 800348e:	b2da      	uxtb	r2, r3
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	611a      	str	r2, [r3, #16]
 8003496:	e021      	b.n	80034dc <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003498:	893b      	ldrh	r3, [r7, #8]
 800349a:	0a1b      	lsrs	r3, r3, #8
 800349c:	b29b      	uxth	r3, r3
 800349e:	b2da      	uxtb	r2, r3
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80034a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80034a8:	6a39      	ldr	r1, [r7, #32]
 80034aa:	68f8      	ldr	r0, [r7, #12]
 80034ac:	f000 fa20 	bl	80038f0 <I2C_WaitOnTXEFlagUntilTimeout>
 80034b0:	4603      	mov	r3, r0
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d00d      	beq.n	80034d2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034ba:	2b04      	cmp	r3, #4
 80034bc:	d107      	bne.n	80034ce <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	681a      	ldr	r2, [r3, #0]
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80034cc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80034ce:	2301      	movs	r3, #1
 80034d0:	e005      	b.n	80034de <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80034d2:	893b      	ldrh	r3, [r7, #8]
 80034d4:	b2da      	uxtb	r2, r3
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80034dc:	2300      	movs	r3, #0
}
 80034de:	4618      	mov	r0, r3
 80034e0:	3718      	adds	r7, #24
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bd80      	pop	{r7, pc}
 80034e6:	bf00      	nop
 80034e8:	00010002 	.word	0x00010002

080034ec <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b088      	sub	sp, #32
 80034f0:	af02      	add	r7, sp, #8
 80034f2:	60f8      	str	r0, [r7, #12]
 80034f4:	4608      	mov	r0, r1
 80034f6:	4611      	mov	r1, r2
 80034f8:	461a      	mov	r2, r3
 80034fa:	4603      	mov	r3, r0
 80034fc:	817b      	strh	r3, [r7, #10]
 80034fe:	460b      	mov	r3, r1
 8003500:	813b      	strh	r3, [r7, #8]
 8003502:	4613      	mov	r3, r2
 8003504:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	681a      	ldr	r2, [r3, #0]
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003514:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	681a      	ldr	r2, [r3, #0]
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003524:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003526:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003528:	9300      	str	r3, [sp, #0]
 800352a:	6a3b      	ldr	r3, [r7, #32]
 800352c:	2200      	movs	r2, #0
 800352e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003532:	68f8      	ldr	r0, [r7, #12]
 8003534:	f000 f8c2 	bl	80036bc <I2C_WaitOnFlagUntilTimeout>
 8003538:	4603      	mov	r3, r0
 800353a:	2b00      	cmp	r3, #0
 800353c:	d00d      	beq.n	800355a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003548:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800354c:	d103      	bne.n	8003556 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003554:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003556:	2303      	movs	r3, #3
 8003558:	e0aa      	b.n	80036b0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800355a:	897b      	ldrh	r3, [r7, #10]
 800355c:	b2db      	uxtb	r3, r3
 800355e:	461a      	mov	r2, r3
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003568:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800356a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800356c:	6a3a      	ldr	r2, [r7, #32]
 800356e:	4952      	ldr	r1, [pc, #328]	@ (80036b8 <I2C_RequestMemoryRead+0x1cc>)
 8003570:	68f8      	ldr	r0, [r7, #12]
 8003572:	f000 f91d 	bl	80037b0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003576:	4603      	mov	r3, r0
 8003578:	2b00      	cmp	r3, #0
 800357a:	d001      	beq.n	8003580 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800357c:	2301      	movs	r3, #1
 800357e:	e097      	b.n	80036b0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003580:	2300      	movs	r3, #0
 8003582:	617b      	str	r3, [r7, #20]
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	695b      	ldr	r3, [r3, #20]
 800358a:	617b      	str	r3, [r7, #20]
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	699b      	ldr	r3, [r3, #24]
 8003592:	617b      	str	r3, [r7, #20]
 8003594:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003596:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003598:	6a39      	ldr	r1, [r7, #32]
 800359a:	68f8      	ldr	r0, [r7, #12]
 800359c:	f000 f9a8 	bl	80038f0 <I2C_WaitOnTXEFlagUntilTimeout>
 80035a0:	4603      	mov	r3, r0
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d00d      	beq.n	80035c2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035aa:	2b04      	cmp	r3, #4
 80035ac:	d107      	bne.n	80035be <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	681a      	ldr	r2, [r3, #0]
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80035bc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80035be:	2301      	movs	r3, #1
 80035c0:	e076      	b.n	80036b0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80035c2:	88fb      	ldrh	r3, [r7, #6]
 80035c4:	2b01      	cmp	r3, #1
 80035c6:	d105      	bne.n	80035d4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80035c8:	893b      	ldrh	r3, [r7, #8]
 80035ca:	b2da      	uxtb	r2, r3
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	611a      	str	r2, [r3, #16]
 80035d2:	e021      	b.n	8003618 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80035d4:	893b      	ldrh	r3, [r7, #8]
 80035d6:	0a1b      	lsrs	r3, r3, #8
 80035d8:	b29b      	uxth	r3, r3
 80035da:	b2da      	uxtb	r2, r3
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80035e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80035e4:	6a39      	ldr	r1, [r7, #32]
 80035e6:	68f8      	ldr	r0, [r7, #12]
 80035e8:	f000 f982 	bl	80038f0 <I2C_WaitOnTXEFlagUntilTimeout>
 80035ec:	4603      	mov	r3, r0
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d00d      	beq.n	800360e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035f6:	2b04      	cmp	r3, #4
 80035f8:	d107      	bne.n	800360a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	681a      	ldr	r2, [r3, #0]
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003608:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800360a:	2301      	movs	r3, #1
 800360c:	e050      	b.n	80036b0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800360e:	893b      	ldrh	r3, [r7, #8]
 8003610:	b2da      	uxtb	r2, r3
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003618:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800361a:	6a39      	ldr	r1, [r7, #32]
 800361c:	68f8      	ldr	r0, [r7, #12]
 800361e:	f000 f967 	bl	80038f0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003622:	4603      	mov	r3, r0
 8003624:	2b00      	cmp	r3, #0
 8003626:	d00d      	beq.n	8003644 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800362c:	2b04      	cmp	r3, #4
 800362e:	d107      	bne.n	8003640 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	681a      	ldr	r2, [r3, #0]
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800363e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003640:	2301      	movs	r3, #1
 8003642:	e035      	b.n	80036b0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	681a      	ldr	r2, [r3, #0]
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003652:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003654:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003656:	9300      	str	r3, [sp, #0]
 8003658:	6a3b      	ldr	r3, [r7, #32]
 800365a:	2200      	movs	r2, #0
 800365c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003660:	68f8      	ldr	r0, [r7, #12]
 8003662:	f000 f82b 	bl	80036bc <I2C_WaitOnFlagUntilTimeout>
 8003666:	4603      	mov	r3, r0
 8003668:	2b00      	cmp	r3, #0
 800366a:	d00d      	beq.n	8003688 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003676:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800367a:	d103      	bne.n	8003684 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003682:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003684:	2303      	movs	r3, #3
 8003686:	e013      	b.n	80036b0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003688:	897b      	ldrh	r3, [r7, #10]
 800368a:	b2db      	uxtb	r3, r3
 800368c:	f043 0301 	orr.w	r3, r3, #1
 8003690:	b2da      	uxtb	r2, r3
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003698:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800369a:	6a3a      	ldr	r2, [r7, #32]
 800369c:	4906      	ldr	r1, [pc, #24]	@ (80036b8 <I2C_RequestMemoryRead+0x1cc>)
 800369e:	68f8      	ldr	r0, [r7, #12]
 80036a0:	f000 f886 	bl	80037b0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80036a4:	4603      	mov	r3, r0
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d001      	beq.n	80036ae <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80036aa:	2301      	movs	r3, #1
 80036ac:	e000      	b.n	80036b0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80036ae:	2300      	movs	r3, #0
}
 80036b0:	4618      	mov	r0, r3
 80036b2:	3718      	adds	r7, #24
 80036b4:	46bd      	mov	sp, r7
 80036b6:	bd80      	pop	{r7, pc}
 80036b8:	00010002 	.word	0x00010002

080036bc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b084      	sub	sp, #16
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	60f8      	str	r0, [r7, #12]
 80036c4:	60b9      	str	r1, [r7, #8]
 80036c6:	603b      	str	r3, [r7, #0]
 80036c8:	4613      	mov	r3, r2
 80036ca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80036cc:	e048      	b.n	8003760 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036d4:	d044      	beq.n	8003760 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036d6:	f7fe fefd 	bl	80024d4 <HAL_GetTick>
 80036da:	4602      	mov	r2, r0
 80036dc:	69bb      	ldr	r3, [r7, #24]
 80036de:	1ad3      	subs	r3, r2, r3
 80036e0:	683a      	ldr	r2, [r7, #0]
 80036e2:	429a      	cmp	r2, r3
 80036e4:	d302      	bcc.n	80036ec <I2C_WaitOnFlagUntilTimeout+0x30>
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d139      	bne.n	8003760 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80036ec:	68bb      	ldr	r3, [r7, #8]
 80036ee:	0c1b      	lsrs	r3, r3, #16
 80036f0:	b2db      	uxtb	r3, r3
 80036f2:	2b01      	cmp	r3, #1
 80036f4:	d10d      	bne.n	8003712 <I2C_WaitOnFlagUntilTimeout+0x56>
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	695b      	ldr	r3, [r3, #20]
 80036fc:	43da      	mvns	r2, r3
 80036fe:	68bb      	ldr	r3, [r7, #8]
 8003700:	4013      	ands	r3, r2
 8003702:	b29b      	uxth	r3, r3
 8003704:	2b00      	cmp	r3, #0
 8003706:	bf0c      	ite	eq
 8003708:	2301      	moveq	r3, #1
 800370a:	2300      	movne	r3, #0
 800370c:	b2db      	uxtb	r3, r3
 800370e:	461a      	mov	r2, r3
 8003710:	e00c      	b.n	800372c <I2C_WaitOnFlagUntilTimeout+0x70>
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	699b      	ldr	r3, [r3, #24]
 8003718:	43da      	mvns	r2, r3
 800371a:	68bb      	ldr	r3, [r7, #8]
 800371c:	4013      	ands	r3, r2
 800371e:	b29b      	uxth	r3, r3
 8003720:	2b00      	cmp	r3, #0
 8003722:	bf0c      	ite	eq
 8003724:	2301      	moveq	r3, #1
 8003726:	2300      	movne	r3, #0
 8003728:	b2db      	uxtb	r3, r3
 800372a:	461a      	mov	r2, r3
 800372c:	79fb      	ldrb	r3, [r7, #7]
 800372e:	429a      	cmp	r2, r3
 8003730:	d116      	bne.n	8003760 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	2200      	movs	r2, #0
 8003736:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	2220      	movs	r2, #32
 800373c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	2200      	movs	r2, #0
 8003744:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800374c:	f043 0220 	orr.w	r2, r3, #32
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	2200      	movs	r2, #0
 8003758:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800375c:	2301      	movs	r3, #1
 800375e:	e023      	b.n	80037a8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003760:	68bb      	ldr	r3, [r7, #8]
 8003762:	0c1b      	lsrs	r3, r3, #16
 8003764:	b2db      	uxtb	r3, r3
 8003766:	2b01      	cmp	r3, #1
 8003768:	d10d      	bne.n	8003786 <I2C_WaitOnFlagUntilTimeout+0xca>
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	695b      	ldr	r3, [r3, #20]
 8003770:	43da      	mvns	r2, r3
 8003772:	68bb      	ldr	r3, [r7, #8]
 8003774:	4013      	ands	r3, r2
 8003776:	b29b      	uxth	r3, r3
 8003778:	2b00      	cmp	r3, #0
 800377a:	bf0c      	ite	eq
 800377c:	2301      	moveq	r3, #1
 800377e:	2300      	movne	r3, #0
 8003780:	b2db      	uxtb	r3, r3
 8003782:	461a      	mov	r2, r3
 8003784:	e00c      	b.n	80037a0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	699b      	ldr	r3, [r3, #24]
 800378c:	43da      	mvns	r2, r3
 800378e:	68bb      	ldr	r3, [r7, #8]
 8003790:	4013      	ands	r3, r2
 8003792:	b29b      	uxth	r3, r3
 8003794:	2b00      	cmp	r3, #0
 8003796:	bf0c      	ite	eq
 8003798:	2301      	moveq	r3, #1
 800379a:	2300      	movne	r3, #0
 800379c:	b2db      	uxtb	r3, r3
 800379e:	461a      	mov	r2, r3
 80037a0:	79fb      	ldrb	r3, [r7, #7]
 80037a2:	429a      	cmp	r2, r3
 80037a4:	d093      	beq.n	80036ce <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80037a6:	2300      	movs	r3, #0
}
 80037a8:	4618      	mov	r0, r3
 80037aa:	3710      	adds	r7, #16
 80037ac:	46bd      	mov	sp, r7
 80037ae:	bd80      	pop	{r7, pc}

080037b0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b084      	sub	sp, #16
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	60f8      	str	r0, [r7, #12]
 80037b8:	60b9      	str	r1, [r7, #8]
 80037ba:	607a      	str	r2, [r7, #4]
 80037bc:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80037be:	e071      	b.n	80038a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	695b      	ldr	r3, [r3, #20]
 80037c6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80037ca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80037ce:	d123      	bne.n	8003818 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	681a      	ldr	r2, [r3, #0]
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80037de:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80037e8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	2200      	movs	r2, #0
 80037ee:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	2220      	movs	r2, #32
 80037f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	2200      	movs	r2, #0
 80037fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003804:	f043 0204 	orr.w	r2, r3, #4
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	2200      	movs	r2, #0
 8003810:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003814:	2301      	movs	r3, #1
 8003816:	e067      	b.n	80038e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800381e:	d041      	beq.n	80038a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003820:	f7fe fe58 	bl	80024d4 <HAL_GetTick>
 8003824:	4602      	mov	r2, r0
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	1ad3      	subs	r3, r2, r3
 800382a:	687a      	ldr	r2, [r7, #4]
 800382c:	429a      	cmp	r2, r3
 800382e:	d302      	bcc.n	8003836 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d136      	bne.n	80038a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003836:	68bb      	ldr	r3, [r7, #8]
 8003838:	0c1b      	lsrs	r3, r3, #16
 800383a:	b2db      	uxtb	r3, r3
 800383c:	2b01      	cmp	r3, #1
 800383e:	d10c      	bne.n	800385a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	695b      	ldr	r3, [r3, #20]
 8003846:	43da      	mvns	r2, r3
 8003848:	68bb      	ldr	r3, [r7, #8]
 800384a:	4013      	ands	r3, r2
 800384c:	b29b      	uxth	r3, r3
 800384e:	2b00      	cmp	r3, #0
 8003850:	bf14      	ite	ne
 8003852:	2301      	movne	r3, #1
 8003854:	2300      	moveq	r3, #0
 8003856:	b2db      	uxtb	r3, r3
 8003858:	e00b      	b.n	8003872 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	699b      	ldr	r3, [r3, #24]
 8003860:	43da      	mvns	r2, r3
 8003862:	68bb      	ldr	r3, [r7, #8]
 8003864:	4013      	ands	r3, r2
 8003866:	b29b      	uxth	r3, r3
 8003868:	2b00      	cmp	r3, #0
 800386a:	bf14      	ite	ne
 800386c:	2301      	movne	r3, #1
 800386e:	2300      	moveq	r3, #0
 8003870:	b2db      	uxtb	r3, r3
 8003872:	2b00      	cmp	r3, #0
 8003874:	d016      	beq.n	80038a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	2200      	movs	r2, #0
 800387a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	2220      	movs	r2, #32
 8003880:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	2200      	movs	r2, #0
 8003888:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003890:	f043 0220 	orr.w	r2, r3, #32
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	2200      	movs	r2, #0
 800389c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80038a0:	2301      	movs	r3, #1
 80038a2:	e021      	b.n	80038e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80038a4:	68bb      	ldr	r3, [r7, #8]
 80038a6:	0c1b      	lsrs	r3, r3, #16
 80038a8:	b2db      	uxtb	r3, r3
 80038aa:	2b01      	cmp	r3, #1
 80038ac:	d10c      	bne.n	80038c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	695b      	ldr	r3, [r3, #20]
 80038b4:	43da      	mvns	r2, r3
 80038b6:	68bb      	ldr	r3, [r7, #8]
 80038b8:	4013      	ands	r3, r2
 80038ba:	b29b      	uxth	r3, r3
 80038bc:	2b00      	cmp	r3, #0
 80038be:	bf14      	ite	ne
 80038c0:	2301      	movne	r3, #1
 80038c2:	2300      	moveq	r3, #0
 80038c4:	b2db      	uxtb	r3, r3
 80038c6:	e00b      	b.n	80038e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	699b      	ldr	r3, [r3, #24]
 80038ce:	43da      	mvns	r2, r3
 80038d0:	68bb      	ldr	r3, [r7, #8]
 80038d2:	4013      	ands	r3, r2
 80038d4:	b29b      	uxth	r3, r3
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	bf14      	ite	ne
 80038da:	2301      	movne	r3, #1
 80038dc:	2300      	moveq	r3, #0
 80038de:	b2db      	uxtb	r3, r3
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	f47f af6d 	bne.w	80037c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80038e6:	2300      	movs	r3, #0
}
 80038e8:	4618      	mov	r0, r3
 80038ea:	3710      	adds	r7, #16
 80038ec:	46bd      	mov	sp, r7
 80038ee:	bd80      	pop	{r7, pc}

080038f0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b084      	sub	sp, #16
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	60f8      	str	r0, [r7, #12]
 80038f8:	60b9      	str	r1, [r7, #8]
 80038fa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80038fc:	e034      	b.n	8003968 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80038fe:	68f8      	ldr	r0, [r7, #12]
 8003900:	f000 f8e3 	bl	8003aca <I2C_IsAcknowledgeFailed>
 8003904:	4603      	mov	r3, r0
 8003906:	2b00      	cmp	r3, #0
 8003908:	d001      	beq.n	800390e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800390a:	2301      	movs	r3, #1
 800390c:	e034      	b.n	8003978 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800390e:	68bb      	ldr	r3, [r7, #8]
 8003910:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003914:	d028      	beq.n	8003968 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003916:	f7fe fddd 	bl	80024d4 <HAL_GetTick>
 800391a:	4602      	mov	r2, r0
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	1ad3      	subs	r3, r2, r3
 8003920:	68ba      	ldr	r2, [r7, #8]
 8003922:	429a      	cmp	r2, r3
 8003924:	d302      	bcc.n	800392c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003926:	68bb      	ldr	r3, [r7, #8]
 8003928:	2b00      	cmp	r3, #0
 800392a:	d11d      	bne.n	8003968 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	695b      	ldr	r3, [r3, #20]
 8003932:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003936:	2b80      	cmp	r3, #128	@ 0x80
 8003938:	d016      	beq.n	8003968 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	2200      	movs	r2, #0
 800393e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	2220      	movs	r2, #32
 8003944:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	2200      	movs	r2, #0
 800394c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003954:	f043 0220 	orr.w	r2, r3, #32
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	2200      	movs	r2, #0
 8003960:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003964:	2301      	movs	r3, #1
 8003966:	e007      	b.n	8003978 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	695b      	ldr	r3, [r3, #20]
 800396e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003972:	2b80      	cmp	r3, #128	@ 0x80
 8003974:	d1c3      	bne.n	80038fe <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003976:	2300      	movs	r3, #0
}
 8003978:	4618      	mov	r0, r3
 800397a:	3710      	adds	r7, #16
 800397c:	46bd      	mov	sp, r7
 800397e:	bd80      	pop	{r7, pc}

08003980 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b084      	sub	sp, #16
 8003984:	af00      	add	r7, sp, #0
 8003986:	60f8      	str	r0, [r7, #12]
 8003988:	60b9      	str	r1, [r7, #8]
 800398a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800398c:	e034      	b.n	80039f8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800398e:	68f8      	ldr	r0, [r7, #12]
 8003990:	f000 f89b 	bl	8003aca <I2C_IsAcknowledgeFailed>
 8003994:	4603      	mov	r3, r0
 8003996:	2b00      	cmp	r3, #0
 8003998:	d001      	beq.n	800399e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800399a:	2301      	movs	r3, #1
 800399c:	e034      	b.n	8003a08 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800399e:	68bb      	ldr	r3, [r7, #8]
 80039a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039a4:	d028      	beq.n	80039f8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039a6:	f7fe fd95 	bl	80024d4 <HAL_GetTick>
 80039aa:	4602      	mov	r2, r0
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	1ad3      	subs	r3, r2, r3
 80039b0:	68ba      	ldr	r2, [r7, #8]
 80039b2:	429a      	cmp	r2, r3
 80039b4:	d302      	bcc.n	80039bc <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80039b6:	68bb      	ldr	r3, [r7, #8]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d11d      	bne.n	80039f8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	695b      	ldr	r3, [r3, #20]
 80039c2:	f003 0304 	and.w	r3, r3, #4
 80039c6:	2b04      	cmp	r3, #4
 80039c8:	d016      	beq.n	80039f8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	2200      	movs	r2, #0
 80039ce:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	2220      	movs	r2, #32
 80039d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	2200      	movs	r2, #0
 80039dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039e4:	f043 0220 	orr.w	r2, r3, #32
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	2200      	movs	r2, #0
 80039f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80039f4:	2301      	movs	r3, #1
 80039f6:	e007      	b.n	8003a08 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	695b      	ldr	r3, [r3, #20]
 80039fe:	f003 0304 	and.w	r3, r3, #4
 8003a02:	2b04      	cmp	r3, #4
 8003a04:	d1c3      	bne.n	800398e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003a06:	2300      	movs	r3, #0
}
 8003a08:	4618      	mov	r0, r3
 8003a0a:	3710      	adds	r7, #16
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	bd80      	pop	{r7, pc}

08003a10 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b084      	sub	sp, #16
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	60f8      	str	r0, [r7, #12]
 8003a18:	60b9      	str	r1, [r7, #8]
 8003a1a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003a1c:	e049      	b.n	8003ab2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	695b      	ldr	r3, [r3, #20]
 8003a24:	f003 0310 	and.w	r3, r3, #16
 8003a28:	2b10      	cmp	r3, #16
 8003a2a:	d119      	bne.n	8003a60 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f06f 0210 	mvn.w	r2, #16
 8003a34:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	2200      	movs	r2, #0
 8003a3a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	2220      	movs	r2, #32
 8003a40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	2200      	movs	r2, #0
 8003a48:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	2200      	movs	r2, #0
 8003a58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003a5c:	2301      	movs	r3, #1
 8003a5e:	e030      	b.n	8003ac2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a60:	f7fe fd38 	bl	80024d4 <HAL_GetTick>
 8003a64:	4602      	mov	r2, r0
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	1ad3      	subs	r3, r2, r3
 8003a6a:	68ba      	ldr	r2, [r7, #8]
 8003a6c:	429a      	cmp	r2, r3
 8003a6e:	d302      	bcc.n	8003a76 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003a70:	68bb      	ldr	r3, [r7, #8]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d11d      	bne.n	8003ab2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	695b      	ldr	r3, [r3, #20]
 8003a7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a80:	2b40      	cmp	r3, #64	@ 0x40
 8003a82:	d016      	beq.n	8003ab2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	2200      	movs	r2, #0
 8003a88:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	2220      	movs	r2, #32
 8003a8e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	2200      	movs	r2, #0
 8003a96:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a9e:	f043 0220 	orr.w	r2, r3, #32
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003aae:	2301      	movs	r3, #1
 8003ab0:	e007      	b.n	8003ac2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	695b      	ldr	r3, [r3, #20]
 8003ab8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003abc:	2b40      	cmp	r3, #64	@ 0x40
 8003abe:	d1ae      	bne.n	8003a1e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003ac0:	2300      	movs	r3, #0
}
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	3710      	adds	r7, #16
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	bd80      	pop	{r7, pc}

08003aca <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003aca:	b480      	push	{r7}
 8003acc:	b083      	sub	sp, #12
 8003ace:	af00      	add	r7, sp, #0
 8003ad0:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	695b      	ldr	r3, [r3, #20]
 8003ad8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003adc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003ae0:	d11b      	bne.n	8003b1a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003aea:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2200      	movs	r2, #0
 8003af0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2220      	movs	r2, #32
 8003af6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	2200      	movs	r2, #0
 8003afe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b06:	f043 0204 	orr.w	r2, r3, #4
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2200      	movs	r2, #0
 8003b12:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003b16:	2301      	movs	r3, #1
 8003b18:	e000      	b.n	8003b1c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003b1a:	2300      	movs	r3, #0
}
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	370c      	adds	r7, #12
 8003b20:	46bd      	mov	sp, r7
 8003b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b26:	4770      	bx	lr

08003b28 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003b28:	b480      	push	{r7}
 8003b2a:	b083      	sub	sp, #12
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
 8003b30:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b38:	b2db      	uxtb	r3, r3
 8003b3a:	2b20      	cmp	r3, #32
 8003b3c:	d129      	bne.n	8003b92 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2224      	movs	r2, #36	@ 0x24
 8003b42:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	681a      	ldr	r2, [r3, #0]
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f022 0201 	bic.w	r2, r2, #1
 8003b54:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f022 0210 	bic.w	r2, r2, #16
 8003b64:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	683a      	ldr	r2, [r7, #0]
 8003b72:	430a      	orrs	r2, r1
 8003b74:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	681a      	ldr	r2, [r3, #0]
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f042 0201 	orr.w	r2, r2, #1
 8003b84:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2220      	movs	r2, #32
 8003b8a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8003b8e:	2300      	movs	r3, #0
 8003b90:	e000      	b.n	8003b94 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8003b92:	2302      	movs	r3, #2
  }
}
 8003b94:	4618      	mov	r0, r3
 8003b96:	370c      	adds	r7, #12
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9e:	4770      	bx	lr

08003ba0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003ba0:	b480      	push	{r7}
 8003ba2:	b085      	sub	sp, #20
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
 8003ba8:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8003baa:	2300      	movs	r3, #0
 8003bac:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003bb4:	b2db      	uxtb	r3, r3
 8003bb6:	2b20      	cmp	r3, #32
 8003bb8:	d12a      	bne.n	8003c10 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2224      	movs	r2, #36	@ 0x24
 8003bbe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	681a      	ldr	r2, [r3, #0]
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f022 0201 	bic.w	r2, r2, #1
 8003bd0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bd8:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8003bda:	89fb      	ldrh	r3, [r7, #14]
 8003bdc:	f023 030f 	bic.w	r3, r3, #15
 8003be0:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	b29a      	uxth	r2, r3
 8003be6:	89fb      	ldrh	r3, [r7, #14]
 8003be8:	4313      	orrs	r3, r2
 8003bea:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	89fa      	ldrh	r2, [r7, #14]
 8003bf2:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	681a      	ldr	r2, [r3, #0]
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f042 0201 	orr.w	r2, r2, #1
 8003c02:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2220      	movs	r2, #32
 8003c08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	e000      	b.n	8003c12 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8003c10:	2302      	movs	r3, #2
  }
}
 8003c12:	4618      	mov	r0, r3
 8003c14:	3714      	adds	r7, #20
 8003c16:	46bd      	mov	sp, r7
 8003c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1c:	4770      	bx	lr

08003c1e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003c1e:	b580      	push	{r7, lr}
 8003c20:	b086      	sub	sp, #24
 8003c22:	af02      	add	r7, sp, #8
 8003c24:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d101      	bne.n	8003c30 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003c2c:	2301      	movs	r3, #1
 8003c2e:	e101      	b.n	8003e34 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8003c3c:	b2db      	uxtb	r3, r3
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d106      	bne.n	8003c50 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2200      	movs	r2, #0
 8003c46:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003c4a:	6878      	ldr	r0, [r7, #4]
 8003c4c:	f005 fca2 	bl	8009594 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2203      	movs	r2, #3
 8003c54:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8003c58:	68bb      	ldr	r3, [r7, #8]
 8003c5a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003c5e:	d102      	bne.n	8003c66 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2200      	movs	r2, #0
 8003c64:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	f002 fbcd 	bl	800640a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6818      	ldr	r0, [r3, #0]
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	7c1a      	ldrb	r2, [r3, #16]
 8003c78:	f88d 2000 	strb.w	r2, [sp]
 8003c7c:	3304      	adds	r3, #4
 8003c7e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003c80:	f002 faac 	bl	80061dc <USB_CoreInit>
 8003c84:	4603      	mov	r3, r0
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d005      	beq.n	8003c96 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2202      	movs	r2, #2
 8003c8e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003c92:	2301      	movs	r3, #1
 8003c94:	e0ce      	b.n	8003e34 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	2100      	movs	r1, #0
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	f002 fbc5 	bl	800642c <USB_SetCurrentMode>
 8003ca2:	4603      	mov	r3, r0
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d005      	beq.n	8003cb4 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2202      	movs	r2, #2
 8003cac:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003cb0:	2301      	movs	r3, #1
 8003cb2:	e0bf      	b.n	8003e34 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	73fb      	strb	r3, [r7, #15]
 8003cb8:	e04a      	b.n	8003d50 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003cba:	7bfa      	ldrb	r2, [r7, #15]
 8003cbc:	6879      	ldr	r1, [r7, #4]
 8003cbe:	4613      	mov	r3, r2
 8003cc0:	00db      	lsls	r3, r3, #3
 8003cc2:	4413      	add	r3, r2
 8003cc4:	009b      	lsls	r3, r3, #2
 8003cc6:	440b      	add	r3, r1
 8003cc8:	3315      	adds	r3, #21
 8003cca:	2201      	movs	r2, #1
 8003ccc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003cce:	7bfa      	ldrb	r2, [r7, #15]
 8003cd0:	6879      	ldr	r1, [r7, #4]
 8003cd2:	4613      	mov	r3, r2
 8003cd4:	00db      	lsls	r3, r3, #3
 8003cd6:	4413      	add	r3, r2
 8003cd8:	009b      	lsls	r3, r3, #2
 8003cda:	440b      	add	r3, r1
 8003cdc:	3314      	adds	r3, #20
 8003cde:	7bfa      	ldrb	r2, [r7, #15]
 8003ce0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003ce2:	7bfa      	ldrb	r2, [r7, #15]
 8003ce4:	7bfb      	ldrb	r3, [r7, #15]
 8003ce6:	b298      	uxth	r0, r3
 8003ce8:	6879      	ldr	r1, [r7, #4]
 8003cea:	4613      	mov	r3, r2
 8003cec:	00db      	lsls	r3, r3, #3
 8003cee:	4413      	add	r3, r2
 8003cf0:	009b      	lsls	r3, r3, #2
 8003cf2:	440b      	add	r3, r1
 8003cf4:	332e      	adds	r3, #46	@ 0x2e
 8003cf6:	4602      	mov	r2, r0
 8003cf8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003cfa:	7bfa      	ldrb	r2, [r7, #15]
 8003cfc:	6879      	ldr	r1, [r7, #4]
 8003cfe:	4613      	mov	r3, r2
 8003d00:	00db      	lsls	r3, r3, #3
 8003d02:	4413      	add	r3, r2
 8003d04:	009b      	lsls	r3, r3, #2
 8003d06:	440b      	add	r3, r1
 8003d08:	3318      	adds	r3, #24
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003d0e:	7bfa      	ldrb	r2, [r7, #15]
 8003d10:	6879      	ldr	r1, [r7, #4]
 8003d12:	4613      	mov	r3, r2
 8003d14:	00db      	lsls	r3, r3, #3
 8003d16:	4413      	add	r3, r2
 8003d18:	009b      	lsls	r3, r3, #2
 8003d1a:	440b      	add	r3, r1
 8003d1c:	331c      	adds	r3, #28
 8003d1e:	2200      	movs	r2, #0
 8003d20:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003d22:	7bfa      	ldrb	r2, [r7, #15]
 8003d24:	6879      	ldr	r1, [r7, #4]
 8003d26:	4613      	mov	r3, r2
 8003d28:	00db      	lsls	r3, r3, #3
 8003d2a:	4413      	add	r3, r2
 8003d2c:	009b      	lsls	r3, r3, #2
 8003d2e:	440b      	add	r3, r1
 8003d30:	3320      	adds	r3, #32
 8003d32:	2200      	movs	r2, #0
 8003d34:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003d36:	7bfa      	ldrb	r2, [r7, #15]
 8003d38:	6879      	ldr	r1, [r7, #4]
 8003d3a:	4613      	mov	r3, r2
 8003d3c:	00db      	lsls	r3, r3, #3
 8003d3e:	4413      	add	r3, r2
 8003d40:	009b      	lsls	r3, r3, #2
 8003d42:	440b      	add	r3, r1
 8003d44:	3324      	adds	r3, #36	@ 0x24
 8003d46:	2200      	movs	r2, #0
 8003d48:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003d4a:	7bfb      	ldrb	r3, [r7, #15]
 8003d4c:	3301      	adds	r3, #1
 8003d4e:	73fb      	strb	r3, [r7, #15]
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	791b      	ldrb	r3, [r3, #4]
 8003d54:	7bfa      	ldrb	r2, [r7, #15]
 8003d56:	429a      	cmp	r2, r3
 8003d58:	d3af      	bcc.n	8003cba <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	73fb      	strb	r3, [r7, #15]
 8003d5e:	e044      	b.n	8003dea <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003d60:	7bfa      	ldrb	r2, [r7, #15]
 8003d62:	6879      	ldr	r1, [r7, #4]
 8003d64:	4613      	mov	r3, r2
 8003d66:	00db      	lsls	r3, r3, #3
 8003d68:	4413      	add	r3, r2
 8003d6a:	009b      	lsls	r3, r3, #2
 8003d6c:	440b      	add	r3, r1
 8003d6e:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8003d72:	2200      	movs	r2, #0
 8003d74:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003d76:	7bfa      	ldrb	r2, [r7, #15]
 8003d78:	6879      	ldr	r1, [r7, #4]
 8003d7a:	4613      	mov	r3, r2
 8003d7c:	00db      	lsls	r3, r3, #3
 8003d7e:	4413      	add	r3, r2
 8003d80:	009b      	lsls	r3, r3, #2
 8003d82:	440b      	add	r3, r1
 8003d84:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8003d88:	7bfa      	ldrb	r2, [r7, #15]
 8003d8a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003d8c:	7bfa      	ldrb	r2, [r7, #15]
 8003d8e:	6879      	ldr	r1, [r7, #4]
 8003d90:	4613      	mov	r3, r2
 8003d92:	00db      	lsls	r3, r3, #3
 8003d94:	4413      	add	r3, r2
 8003d96:	009b      	lsls	r3, r3, #2
 8003d98:	440b      	add	r3, r1
 8003d9a:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003d9e:	2200      	movs	r2, #0
 8003da0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003da2:	7bfa      	ldrb	r2, [r7, #15]
 8003da4:	6879      	ldr	r1, [r7, #4]
 8003da6:	4613      	mov	r3, r2
 8003da8:	00db      	lsls	r3, r3, #3
 8003daa:	4413      	add	r3, r2
 8003dac:	009b      	lsls	r3, r3, #2
 8003dae:	440b      	add	r3, r1
 8003db0:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8003db4:	2200      	movs	r2, #0
 8003db6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003db8:	7bfa      	ldrb	r2, [r7, #15]
 8003dba:	6879      	ldr	r1, [r7, #4]
 8003dbc:	4613      	mov	r3, r2
 8003dbe:	00db      	lsls	r3, r3, #3
 8003dc0:	4413      	add	r3, r2
 8003dc2:	009b      	lsls	r3, r3, #2
 8003dc4:	440b      	add	r3, r1
 8003dc6:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8003dca:	2200      	movs	r2, #0
 8003dcc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003dce:	7bfa      	ldrb	r2, [r7, #15]
 8003dd0:	6879      	ldr	r1, [r7, #4]
 8003dd2:	4613      	mov	r3, r2
 8003dd4:	00db      	lsls	r3, r3, #3
 8003dd6:	4413      	add	r3, r2
 8003dd8:	009b      	lsls	r3, r3, #2
 8003dda:	440b      	add	r3, r1
 8003ddc:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8003de0:	2200      	movs	r2, #0
 8003de2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003de4:	7bfb      	ldrb	r3, [r7, #15]
 8003de6:	3301      	adds	r3, #1
 8003de8:	73fb      	strb	r3, [r7, #15]
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	791b      	ldrb	r3, [r3, #4]
 8003dee:	7bfa      	ldrb	r2, [r7, #15]
 8003df0:	429a      	cmp	r2, r3
 8003df2:	d3b5      	bcc.n	8003d60 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6818      	ldr	r0, [r3, #0]
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	7c1a      	ldrb	r2, [r3, #16]
 8003dfc:	f88d 2000 	strb.w	r2, [sp]
 8003e00:	3304      	adds	r3, #4
 8003e02:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003e04:	f002 fb5e 	bl	80064c4 <USB_DevInit>
 8003e08:	4603      	mov	r3, r0
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d005      	beq.n	8003e1a <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	2202      	movs	r2, #2
 8003e12:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003e16:	2301      	movs	r3, #1
 8003e18:	e00c      	b.n	8003e34 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2201      	movs	r2, #1
 8003e24:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	f003 fba8 	bl	8007582 <USB_DevDisconnect>

  return HAL_OK;
 8003e32:	2300      	movs	r3, #0
}
 8003e34:	4618      	mov	r0, r3
 8003e36:	3710      	adds	r7, #16
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	bd80      	pop	{r7, pc}

08003e3c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b084      	sub	sp, #16
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003e50:	2b01      	cmp	r3, #1
 8003e52:	d101      	bne.n	8003e58 <HAL_PCD_Start+0x1c>
 8003e54:	2302      	movs	r3, #2
 8003e56:	e022      	b.n	8003e9e <HAL_PCD_Start+0x62>
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2201      	movs	r2, #1
 8003e5c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	68db      	ldr	r3, [r3, #12]
 8003e64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d009      	beq.n	8003e80 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8003e70:	2b01      	cmp	r3, #1
 8003e72:	d105      	bne.n	8003e80 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e78:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	4618      	mov	r0, r3
 8003e86:	f002 faaf 	bl	80063e8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	4618      	mov	r0, r3
 8003e90:	f003 fb56 	bl	8007540 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2200      	movs	r2, #0
 8003e98:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003e9c:	2300      	movs	r3, #0
}
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	3710      	adds	r7, #16
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	bd80      	pop	{r7, pc}

08003ea6 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003ea6:	b590      	push	{r4, r7, lr}
 8003ea8:	b08d      	sub	sp, #52	@ 0x34
 8003eaa:	af00      	add	r7, sp, #0
 8003eac:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003eb4:	6a3b      	ldr	r3, [r7, #32]
 8003eb6:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	f003 fc14 	bl	80076ea <USB_GetMode>
 8003ec2:	4603      	mov	r3, r0
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	f040 848c 	bne.w	80047e2 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4618      	mov	r0, r3
 8003ed0:	f003 fb78 	bl	80075c4 <USB_ReadInterrupts>
 8003ed4:	4603      	mov	r3, r0
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	f000 8482 	beq.w	80047e0 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8003edc:	69fb      	ldr	r3, [r7, #28]
 8003ede:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003ee2:	689b      	ldr	r3, [r3, #8]
 8003ee4:	0a1b      	lsrs	r3, r3, #8
 8003ee6:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	f003 fb65 	bl	80075c4 <USB_ReadInterrupts>
 8003efa:	4603      	mov	r3, r0
 8003efc:	f003 0302 	and.w	r3, r3, #2
 8003f00:	2b02      	cmp	r3, #2
 8003f02:	d107      	bne.n	8003f14 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	695a      	ldr	r2, [r3, #20]
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f002 0202 	and.w	r2, r2, #2
 8003f12:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	4618      	mov	r0, r3
 8003f1a:	f003 fb53 	bl	80075c4 <USB_ReadInterrupts>
 8003f1e:	4603      	mov	r3, r0
 8003f20:	f003 0310 	and.w	r3, r3, #16
 8003f24:	2b10      	cmp	r3, #16
 8003f26:	d161      	bne.n	8003fec <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	699a      	ldr	r2, [r3, #24]
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f022 0210 	bic.w	r2, r2, #16
 8003f36:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8003f38:	6a3b      	ldr	r3, [r7, #32]
 8003f3a:	6a1b      	ldr	r3, [r3, #32]
 8003f3c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8003f3e:	69bb      	ldr	r3, [r7, #24]
 8003f40:	f003 020f 	and.w	r2, r3, #15
 8003f44:	4613      	mov	r3, r2
 8003f46:	00db      	lsls	r3, r3, #3
 8003f48:	4413      	add	r3, r2
 8003f4a:	009b      	lsls	r3, r3, #2
 8003f4c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003f50:	687a      	ldr	r2, [r7, #4]
 8003f52:	4413      	add	r3, r2
 8003f54:	3304      	adds	r3, #4
 8003f56:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003f58:	69bb      	ldr	r3, [r7, #24]
 8003f5a:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8003f5e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003f62:	d124      	bne.n	8003fae <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003f64:	69ba      	ldr	r2, [r7, #24]
 8003f66:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8003f6a:	4013      	ands	r3, r2
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d035      	beq.n	8003fdc <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003f70:	697b      	ldr	r3, [r7, #20]
 8003f72:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003f74:	69bb      	ldr	r3, [r7, #24]
 8003f76:	091b      	lsrs	r3, r3, #4
 8003f78:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003f7a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003f7e:	b29b      	uxth	r3, r3
 8003f80:	461a      	mov	r2, r3
 8003f82:	6a38      	ldr	r0, [r7, #32]
 8003f84:	f003 f98a 	bl	800729c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003f88:	697b      	ldr	r3, [r7, #20]
 8003f8a:	68da      	ldr	r2, [r3, #12]
 8003f8c:	69bb      	ldr	r3, [r7, #24]
 8003f8e:	091b      	lsrs	r3, r3, #4
 8003f90:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003f94:	441a      	add	r2, r3
 8003f96:	697b      	ldr	r3, [r7, #20]
 8003f98:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003f9a:	697b      	ldr	r3, [r7, #20]
 8003f9c:	695a      	ldr	r2, [r3, #20]
 8003f9e:	69bb      	ldr	r3, [r7, #24]
 8003fa0:	091b      	lsrs	r3, r3, #4
 8003fa2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003fa6:	441a      	add	r2, r3
 8003fa8:	697b      	ldr	r3, [r7, #20]
 8003faa:	615a      	str	r2, [r3, #20]
 8003fac:	e016      	b.n	8003fdc <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8003fae:	69bb      	ldr	r3, [r7, #24]
 8003fb0:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8003fb4:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003fb8:	d110      	bne.n	8003fdc <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003fc0:	2208      	movs	r2, #8
 8003fc2:	4619      	mov	r1, r3
 8003fc4:	6a38      	ldr	r0, [r7, #32]
 8003fc6:	f003 f969 	bl	800729c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003fca:	697b      	ldr	r3, [r7, #20]
 8003fcc:	695a      	ldr	r2, [r3, #20]
 8003fce:	69bb      	ldr	r3, [r7, #24]
 8003fd0:	091b      	lsrs	r3, r3, #4
 8003fd2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003fd6:	441a      	add	r2, r3
 8003fd8:	697b      	ldr	r3, [r7, #20]
 8003fda:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	699a      	ldr	r2, [r3, #24]
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f042 0210 	orr.w	r2, r2, #16
 8003fea:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	f003 fae7 	bl	80075c4 <USB_ReadInterrupts>
 8003ff6:	4603      	mov	r3, r0
 8003ff8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003ffc:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004000:	f040 80a7 	bne.w	8004152 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8004004:	2300      	movs	r3, #0
 8004006:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	4618      	mov	r0, r3
 800400e:	f003 faec 	bl	80075ea <USB_ReadDevAllOutEpInterrupt>
 8004012:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8004014:	e099      	b.n	800414a <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8004016:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004018:	f003 0301 	and.w	r3, r3, #1
 800401c:	2b00      	cmp	r3, #0
 800401e:	f000 808e 	beq.w	800413e <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004028:	b2d2      	uxtb	r2, r2
 800402a:	4611      	mov	r1, r2
 800402c:	4618      	mov	r0, r3
 800402e:	f003 fb10 	bl	8007652 <USB_ReadDevOutEPInterrupt>
 8004032:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8004034:	693b      	ldr	r3, [r7, #16]
 8004036:	f003 0301 	and.w	r3, r3, #1
 800403a:	2b00      	cmp	r3, #0
 800403c:	d00c      	beq.n	8004058 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800403e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004040:	015a      	lsls	r2, r3, #5
 8004042:	69fb      	ldr	r3, [r7, #28]
 8004044:	4413      	add	r3, r2
 8004046:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800404a:	461a      	mov	r2, r3
 800404c:	2301      	movs	r3, #1
 800404e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8004050:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004052:	6878      	ldr	r0, [r7, #4]
 8004054:	f000 fe8c 	bl	8004d70 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8004058:	693b      	ldr	r3, [r7, #16]
 800405a:	f003 0308 	and.w	r3, r3, #8
 800405e:	2b00      	cmp	r3, #0
 8004060:	d00c      	beq.n	800407c <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8004062:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004064:	015a      	lsls	r2, r3, #5
 8004066:	69fb      	ldr	r3, [r7, #28]
 8004068:	4413      	add	r3, r2
 800406a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800406e:	461a      	mov	r2, r3
 8004070:	2308      	movs	r3, #8
 8004072:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8004074:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004076:	6878      	ldr	r0, [r7, #4]
 8004078:	f000 ff62 	bl	8004f40 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800407c:	693b      	ldr	r3, [r7, #16]
 800407e:	f003 0310 	and.w	r3, r3, #16
 8004082:	2b00      	cmp	r3, #0
 8004084:	d008      	beq.n	8004098 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8004086:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004088:	015a      	lsls	r2, r3, #5
 800408a:	69fb      	ldr	r3, [r7, #28]
 800408c:	4413      	add	r3, r2
 800408e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004092:	461a      	mov	r2, r3
 8004094:	2310      	movs	r3, #16
 8004096:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8004098:	693b      	ldr	r3, [r7, #16]
 800409a:	f003 0302 	and.w	r3, r3, #2
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d030      	beq.n	8004104 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80040a2:	6a3b      	ldr	r3, [r7, #32]
 80040a4:	695b      	ldr	r3, [r3, #20]
 80040a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040aa:	2b80      	cmp	r3, #128	@ 0x80
 80040ac:	d109      	bne.n	80040c2 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80040ae:	69fb      	ldr	r3, [r7, #28]
 80040b0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80040b4:	685b      	ldr	r3, [r3, #4]
 80040b6:	69fa      	ldr	r2, [r7, #28]
 80040b8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80040bc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80040c0:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80040c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80040c4:	4613      	mov	r3, r2
 80040c6:	00db      	lsls	r3, r3, #3
 80040c8:	4413      	add	r3, r2
 80040ca:	009b      	lsls	r3, r3, #2
 80040cc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80040d0:	687a      	ldr	r2, [r7, #4]
 80040d2:	4413      	add	r3, r2
 80040d4:	3304      	adds	r3, #4
 80040d6:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80040d8:	697b      	ldr	r3, [r7, #20]
 80040da:	78db      	ldrb	r3, [r3, #3]
 80040dc:	2b01      	cmp	r3, #1
 80040de:	d108      	bne.n	80040f2 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80040e0:	697b      	ldr	r3, [r7, #20]
 80040e2:	2200      	movs	r2, #0
 80040e4:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80040e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040e8:	b2db      	uxtb	r3, r3
 80040ea:	4619      	mov	r1, r3
 80040ec:	6878      	ldr	r0, [r7, #4]
 80040ee:	f005 fb61 	bl	80097b4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80040f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040f4:	015a      	lsls	r2, r3, #5
 80040f6:	69fb      	ldr	r3, [r7, #28]
 80040f8:	4413      	add	r3, r2
 80040fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80040fe:	461a      	mov	r2, r3
 8004100:	2302      	movs	r3, #2
 8004102:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004104:	693b      	ldr	r3, [r7, #16]
 8004106:	f003 0320 	and.w	r3, r3, #32
 800410a:	2b00      	cmp	r3, #0
 800410c:	d008      	beq.n	8004120 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800410e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004110:	015a      	lsls	r2, r3, #5
 8004112:	69fb      	ldr	r3, [r7, #28]
 8004114:	4413      	add	r3, r2
 8004116:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800411a:	461a      	mov	r2, r3
 800411c:	2320      	movs	r3, #32
 800411e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8004120:	693b      	ldr	r3, [r7, #16]
 8004122:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004126:	2b00      	cmp	r3, #0
 8004128:	d009      	beq.n	800413e <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800412a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800412c:	015a      	lsls	r2, r3, #5
 800412e:	69fb      	ldr	r3, [r7, #28]
 8004130:	4413      	add	r3, r2
 8004132:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004136:	461a      	mov	r2, r3
 8004138:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800413c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800413e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004140:	3301      	adds	r3, #1
 8004142:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8004144:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004146:	085b      	lsrs	r3, r3, #1
 8004148:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800414a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800414c:	2b00      	cmp	r3, #0
 800414e:	f47f af62 	bne.w	8004016 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	4618      	mov	r0, r3
 8004158:	f003 fa34 	bl	80075c4 <USB_ReadInterrupts>
 800415c:	4603      	mov	r3, r0
 800415e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004162:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004166:	f040 80db 	bne.w	8004320 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	4618      	mov	r0, r3
 8004170:	f003 fa55 	bl	800761e <USB_ReadDevAllInEpInterrupt>
 8004174:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8004176:	2300      	movs	r3, #0
 8004178:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 800417a:	e0cd      	b.n	8004318 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800417c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800417e:	f003 0301 	and.w	r3, r3, #1
 8004182:	2b00      	cmp	r3, #0
 8004184:	f000 80c2 	beq.w	800430c <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800418e:	b2d2      	uxtb	r2, r2
 8004190:	4611      	mov	r1, r2
 8004192:	4618      	mov	r0, r3
 8004194:	f003 fa7b 	bl	800768e <USB_ReadDevInEPInterrupt>
 8004198:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800419a:	693b      	ldr	r3, [r7, #16]
 800419c:	f003 0301 	and.w	r3, r3, #1
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d057      	beq.n	8004254 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80041a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041a6:	f003 030f 	and.w	r3, r3, #15
 80041aa:	2201      	movs	r2, #1
 80041ac:	fa02 f303 	lsl.w	r3, r2, r3
 80041b0:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80041b2:	69fb      	ldr	r3, [r7, #28]
 80041b4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80041b8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	43db      	mvns	r3, r3
 80041be:	69f9      	ldr	r1, [r7, #28]
 80041c0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80041c4:	4013      	ands	r3, r2
 80041c6:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80041c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041ca:	015a      	lsls	r2, r3, #5
 80041cc:	69fb      	ldr	r3, [r7, #28]
 80041ce:	4413      	add	r3, r2
 80041d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80041d4:	461a      	mov	r2, r3
 80041d6:	2301      	movs	r3, #1
 80041d8:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	799b      	ldrb	r3, [r3, #6]
 80041de:	2b01      	cmp	r3, #1
 80041e0:	d132      	bne.n	8004248 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80041e2:	6879      	ldr	r1, [r7, #4]
 80041e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80041e6:	4613      	mov	r3, r2
 80041e8:	00db      	lsls	r3, r3, #3
 80041ea:	4413      	add	r3, r2
 80041ec:	009b      	lsls	r3, r3, #2
 80041ee:	440b      	add	r3, r1
 80041f0:	3320      	adds	r3, #32
 80041f2:	6819      	ldr	r1, [r3, #0]
 80041f4:	6878      	ldr	r0, [r7, #4]
 80041f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80041f8:	4613      	mov	r3, r2
 80041fa:	00db      	lsls	r3, r3, #3
 80041fc:	4413      	add	r3, r2
 80041fe:	009b      	lsls	r3, r3, #2
 8004200:	4403      	add	r3, r0
 8004202:	331c      	adds	r3, #28
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	4419      	add	r1, r3
 8004208:	6878      	ldr	r0, [r7, #4]
 800420a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800420c:	4613      	mov	r3, r2
 800420e:	00db      	lsls	r3, r3, #3
 8004210:	4413      	add	r3, r2
 8004212:	009b      	lsls	r3, r3, #2
 8004214:	4403      	add	r3, r0
 8004216:	3320      	adds	r3, #32
 8004218:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800421a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800421c:	2b00      	cmp	r3, #0
 800421e:	d113      	bne.n	8004248 <HAL_PCD_IRQHandler+0x3a2>
 8004220:	6879      	ldr	r1, [r7, #4]
 8004222:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004224:	4613      	mov	r3, r2
 8004226:	00db      	lsls	r3, r3, #3
 8004228:	4413      	add	r3, r2
 800422a:	009b      	lsls	r3, r3, #2
 800422c:	440b      	add	r3, r1
 800422e:	3324      	adds	r3, #36	@ 0x24
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d108      	bne.n	8004248 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6818      	ldr	r0, [r3, #0]
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004240:	461a      	mov	r2, r3
 8004242:	2101      	movs	r1, #1
 8004244:	f003 fa82 	bl	800774c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8004248:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800424a:	b2db      	uxtb	r3, r3
 800424c:	4619      	mov	r1, r3
 800424e:	6878      	ldr	r0, [r7, #4]
 8004250:	f005 fa2b 	bl	80096aa <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8004254:	693b      	ldr	r3, [r7, #16]
 8004256:	f003 0308 	and.w	r3, r3, #8
 800425a:	2b00      	cmp	r3, #0
 800425c:	d008      	beq.n	8004270 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800425e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004260:	015a      	lsls	r2, r3, #5
 8004262:	69fb      	ldr	r3, [r7, #28]
 8004264:	4413      	add	r3, r2
 8004266:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800426a:	461a      	mov	r2, r3
 800426c:	2308      	movs	r3, #8
 800426e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8004270:	693b      	ldr	r3, [r7, #16]
 8004272:	f003 0310 	and.w	r3, r3, #16
 8004276:	2b00      	cmp	r3, #0
 8004278:	d008      	beq.n	800428c <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800427a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800427c:	015a      	lsls	r2, r3, #5
 800427e:	69fb      	ldr	r3, [r7, #28]
 8004280:	4413      	add	r3, r2
 8004282:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004286:	461a      	mov	r2, r3
 8004288:	2310      	movs	r3, #16
 800428a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800428c:	693b      	ldr	r3, [r7, #16]
 800428e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004292:	2b00      	cmp	r3, #0
 8004294:	d008      	beq.n	80042a8 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8004296:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004298:	015a      	lsls	r2, r3, #5
 800429a:	69fb      	ldr	r3, [r7, #28]
 800429c:	4413      	add	r3, r2
 800429e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80042a2:	461a      	mov	r2, r3
 80042a4:	2340      	movs	r3, #64	@ 0x40
 80042a6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80042a8:	693b      	ldr	r3, [r7, #16]
 80042aa:	f003 0302 	and.w	r3, r3, #2
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d023      	beq.n	80042fa <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80042b2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80042b4:	6a38      	ldr	r0, [r7, #32]
 80042b6:	f002 fa69 	bl	800678c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80042ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80042bc:	4613      	mov	r3, r2
 80042be:	00db      	lsls	r3, r3, #3
 80042c0:	4413      	add	r3, r2
 80042c2:	009b      	lsls	r3, r3, #2
 80042c4:	3310      	adds	r3, #16
 80042c6:	687a      	ldr	r2, [r7, #4]
 80042c8:	4413      	add	r3, r2
 80042ca:	3304      	adds	r3, #4
 80042cc:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80042ce:	697b      	ldr	r3, [r7, #20]
 80042d0:	78db      	ldrb	r3, [r3, #3]
 80042d2:	2b01      	cmp	r3, #1
 80042d4:	d108      	bne.n	80042e8 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80042d6:	697b      	ldr	r3, [r7, #20]
 80042d8:	2200      	movs	r2, #0
 80042da:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80042dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042de:	b2db      	uxtb	r3, r3
 80042e0:	4619      	mov	r1, r3
 80042e2:	6878      	ldr	r0, [r7, #4]
 80042e4:	f005 fa78 	bl	80097d8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80042e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042ea:	015a      	lsls	r2, r3, #5
 80042ec:	69fb      	ldr	r3, [r7, #28]
 80042ee:	4413      	add	r3, r2
 80042f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80042f4:	461a      	mov	r2, r3
 80042f6:	2302      	movs	r3, #2
 80042f8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80042fa:	693b      	ldr	r3, [r7, #16]
 80042fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004300:	2b00      	cmp	r3, #0
 8004302:	d003      	beq.n	800430c <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8004304:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004306:	6878      	ldr	r0, [r7, #4]
 8004308:	f000 fca5 	bl	8004c56 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800430c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800430e:	3301      	adds	r3, #1
 8004310:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8004312:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004314:	085b      	lsrs	r3, r3, #1
 8004316:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8004318:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800431a:	2b00      	cmp	r3, #0
 800431c:	f47f af2e 	bne.w	800417c <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	4618      	mov	r0, r3
 8004326:	f003 f94d 	bl	80075c4 <USB_ReadInterrupts>
 800432a:	4603      	mov	r3, r0
 800432c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004330:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004334:	d122      	bne.n	800437c <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004336:	69fb      	ldr	r3, [r7, #28]
 8004338:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800433c:	685b      	ldr	r3, [r3, #4]
 800433e:	69fa      	ldr	r2, [r7, #28]
 8004340:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004344:	f023 0301 	bic.w	r3, r3, #1
 8004348:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8004350:	2b01      	cmp	r3, #1
 8004352:	d108      	bne.n	8004366 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2200      	movs	r2, #0
 8004358:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800435c:	2100      	movs	r1, #0
 800435e:	6878      	ldr	r0, [r7, #4]
 8004360:	f000 fe8c 	bl	800507c <HAL_PCDEx_LPM_Callback>
 8004364:	e002      	b.n	800436c <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8004366:	6878      	ldr	r0, [r7, #4]
 8004368:	f005 fa16 	bl	8009798 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	695a      	ldr	r2, [r3, #20]
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 800437a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	4618      	mov	r0, r3
 8004382:	f003 f91f 	bl	80075c4 <USB_ReadInterrupts>
 8004386:	4603      	mov	r3, r0
 8004388:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800438c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004390:	d112      	bne.n	80043b8 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8004392:	69fb      	ldr	r3, [r7, #28]
 8004394:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004398:	689b      	ldr	r3, [r3, #8]
 800439a:	f003 0301 	and.w	r3, r3, #1
 800439e:	2b01      	cmp	r3, #1
 80043a0:	d102      	bne.n	80043a8 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80043a2:	6878      	ldr	r0, [r7, #4]
 80043a4:	f005 f9d2 	bl	800974c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	695a      	ldr	r2, [r3, #20]
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 80043b6:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	4618      	mov	r0, r3
 80043be:	f003 f901 	bl	80075c4 <USB_ReadInterrupts>
 80043c2:	4603      	mov	r3, r0
 80043c4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80043c8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80043cc:	f040 80b7 	bne.w	800453e <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80043d0:	69fb      	ldr	r3, [r7, #28]
 80043d2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80043d6:	685b      	ldr	r3, [r3, #4]
 80043d8:	69fa      	ldr	r2, [r7, #28]
 80043da:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80043de:	f023 0301 	bic.w	r3, r3, #1
 80043e2:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	2110      	movs	r1, #16
 80043ea:	4618      	mov	r0, r3
 80043ec:	f002 f9ce 	bl	800678c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80043f0:	2300      	movs	r3, #0
 80043f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80043f4:	e046      	b.n	8004484 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80043f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043f8:	015a      	lsls	r2, r3, #5
 80043fa:	69fb      	ldr	r3, [r7, #28]
 80043fc:	4413      	add	r3, r2
 80043fe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004402:	461a      	mov	r2, r3
 8004404:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004408:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800440a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800440c:	015a      	lsls	r2, r3, #5
 800440e:	69fb      	ldr	r3, [r7, #28]
 8004410:	4413      	add	r3, r2
 8004412:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800441a:	0151      	lsls	r1, r2, #5
 800441c:	69fa      	ldr	r2, [r7, #28]
 800441e:	440a      	add	r2, r1
 8004420:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004424:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004428:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800442a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800442c:	015a      	lsls	r2, r3, #5
 800442e:	69fb      	ldr	r3, [r7, #28]
 8004430:	4413      	add	r3, r2
 8004432:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004436:	461a      	mov	r2, r3
 8004438:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800443c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800443e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004440:	015a      	lsls	r2, r3, #5
 8004442:	69fb      	ldr	r3, [r7, #28]
 8004444:	4413      	add	r3, r2
 8004446:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800444e:	0151      	lsls	r1, r2, #5
 8004450:	69fa      	ldr	r2, [r7, #28]
 8004452:	440a      	add	r2, r1
 8004454:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004458:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800445c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800445e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004460:	015a      	lsls	r2, r3, #5
 8004462:	69fb      	ldr	r3, [r7, #28]
 8004464:	4413      	add	r3, r2
 8004466:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800446e:	0151      	lsls	r1, r2, #5
 8004470:	69fa      	ldr	r2, [r7, #28]
 8004472:	440a      	add	r2, r1
 8004474:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004478:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800447c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800447e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004480:	3301      	adds	r3, #1
 8004482:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	791b      	ldrb	r3, [r3, #4]
 8004488:	461a      	mov	r2, r3
 800448a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800448c:	4293      	cmp	r3, r2
 800448e:	d3b2      	bcc.n	80043f6 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8004490:	69fb      	ldr	r3, [r7, #28]
 8004492:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004496:	69db      	ldr	r3, [r3, #28]
 8004498:	69fa      	ldr	r2, [r7, #28]
 800449a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800449e:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 80044a2:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	7bdb      	ldrb	r3, [r3, #15]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d016      	beq.n	80044da <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80044ac:	69fb      	ldr	r3, [r7, #28]
 80044ae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80044b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80044b6:	69fa      	ldr	r2, [r7, #28]
 80044b8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80044bc:	f043 030b 	orr.w	r3, r3, #11
 80044c0:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80044c4:	69fb      	ldr	r3, [r7, #28]
 80044c6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80044ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044cc:	69fa      	ldr	r2, [r7, #28]
 80044ce:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80044d2:	f043 030b 	orr.w	r3, r3, #11
 80044d6:	6453      	str	r3, [r2, #68]	@ 0x44
 80044d8:	e015      	b.n	8004506 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80044da:	69fb      	ldr	r3, [r7, #28]
 80044dc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80044e0:	695b      	ldr	r3, [r3, #20]
 80044e2:	69fa      	ldr	r2, [r7, #28]
 80044e4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80044e8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80044ec:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 80044f0:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80044f2:	69fb      	ldr	r3, [r7, #28]
 80044f4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80044f8:	691b      	ldr	r3, [r3, #16]
 80044fa:	69fa      	ldr	r2, [r7, #28]
 80044fc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004500:	f043 030b 	orr.w	r3, r3, #11
 8004504:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8004506:	69fb      	ldr	r3, [r7, #28]
 8004508:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	69fa      	ldr	r2, [r7, #28]
 8004510:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004514:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8004518:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6818      	ldr	r0, [r3, #0]
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004528:	461a      	mov	r2, r3
 800452a:	f003 f90f 	bl	800774c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	695a      	ldr	r2, [r3, #20]
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 800453c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	4618      	mov	r0, r3
 8004544:	f003 f83e 	bl	80075c4 <USB_ReadInterrupts>
 8004548:	4603      	mov	r3, r0
 800454a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800454e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004552:	d123      	bne.n	800459c <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	4618      	mov	r0, r3
 800455a:	f003 f8d4 	bl	8007706 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	4618      	mov	r0, r3
 8004564:	f002 f98b 	bl	800687e <USB_GetDevSpeed>
 8004568:	4603      	mov	r3, r0
 800456a:	461a      	mov	r2, r3
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681c      	ldr	r4, [r3, #0]
 8004574:	f001 f9f2 	bl	800595c <HAL_RCC_GetHCLKFreq>
 8004578:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800457e:	461a      	mov	r2, r3
 8004580:	4620      	mov	r0, r4
 8004582:	f001 fe8f 	bl	80062a4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8004586:	6878      	ldr	r0, [r7, #4]
 8004588:	f005 f8b7 	bl	80096fa <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	695a      	ldr	r2, [r3, #20]
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 800459a:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	4618      	mov	r0, r3
 80045a2:	f003 f80f 	bl	80075c4 <USB_ReadInterrupts>
 80045a6:	4603      	mov	r3, r0
 80045a8:	f003 0308 	and.w	r3, r3, #8
 80045ac:	2b08      	cmp	r3, #8
 80045ae:	d10a      	bne.n	80045c6 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80045b0:	6878      	ldr	r0, [r7, #4]
 80045b2:	f005 f894 	bl	80096de <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	695a      	ldr	r2, [r3, #20]
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f002 0208 	and.w	r2, r2, #8
 80045c4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	4618      	mov	r0, r3
 80045cc:	f002 fffa 	bl	80075c4 <USB_ReadInterrupts>
 80045d0:	4603      	mov	r3, r0
 80045d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80045d6:	2b80      	cmp	r3, #128	@ 0x80
 80045d8:	d123      	bne.n	8004622 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80045da:	6a3b      	ldr	r3, [r7, #32]
 80045dc:	699b      	ldr	r3, [r3, #24]
 80045de:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80045e2:	6a3b      	ldr	r3, [r7, #32]
 80045e4:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80045e6:	2301      	movs	r3, #1
 80045e8:	627b      	str	r3, [r7, #36]	@ 0x24
 80045ea:	e014      	b.n	8004616 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80045ec:	6879      	ldr	r1, [r7, #4]
 80045ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80045f0:	4613      	mov	r3, r2
 80045f2:	00db      	lsls	r3, r3, #3
 80045f4:	4413      	add	r3, r2
 80045f6:	009b      	lsls	r3, r3, #2
 80045f8:	440b      	add	r3, r1
 80045fa:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80045fe:	781b      	ldrb	r3, [r3, #0]
 8004600:	2b01      	cmp	r3, #1
 8004602:	d105      	bne.n	8004610 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8004604:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004606:	b2db      	uxtb	r3, r3
 8004608:	4619      	mov	r1, r3
 800460a:	6878      	ldr	r0, [r7, #4]
 800460c:	f000 faf2 	bl	8004bf4 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004610:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004612:	3301      	adds	r3, #1
 8004614:	627b      	str	r3, [r7, #36]	@ 0x24
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	791b      	ldrb	r3, [r3, #4]
 800461a:	461a      	mov	r2, r3
 800461c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800461e:	4293      	cmp	r3, r2
 8004620:	d3e4      	bcc.n	80045ec <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	4618      	mov	r0, r3
 8004628:	f002 ffcc 	bl	80075c4 <USB_ReadInterrupts>
 800462c:	4603      	mov	r3, r0
 800462e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004632:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004636:	d13c      	bne.n	80046b2 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004638:	2301      	movs	r3, #1
 800463a:	627b      	str	r3, [r7, #36]	@ 0x24
 800463c:	e02b      	b.n	8004696 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800463e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004640:	015a      	lsls	r2, r3, #5
 8004642:	69fb      	ldr	r3, [r7, #28]
 8004644:	4413      	add	r3, r2
 8004646:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800464e:	6879      	ldr	r1, [r7, #4]
 8004650:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004652:	4613      	mov	r3, r2
 8004654:	00db      	lsls	r3, r3, #3
 8004656:	4413      	add	r3, r2
 8004658:	009b      	lsls	r3, r3, #2
 800465a:	440b      	add	r3, r1
 800465c:	3318      	adds	r3, #24
 800465e:	781b      	ldrb	r3, [r3, #0]
 8004660:	2b01      	cmp	r3, #1
 8004662:	d115      	bne.n	8004690 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8004664:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004666:	2b00      	cmp	r3, #0
 8004668:	da12      	bge.n	8004690 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800466a:	6879      	ldr	r1, [r7, #4]
 800466c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800466e:	4613      	mov	r3, r2
 8004670:	00db      	lsls	r3, r3, #3
 8004672:	4413      	add	r3, r2
 8004674:	009b      	lsls	r3, r3, #2
 8004676:	440b      	add	r3, r1
 8004678:	3317      	adds	r3, #23
 800467a:	2201      	movs	r2, #1
 800467c:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800467e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004680:	b2db      	uxtb	r3, r3
 8004682:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004686:	b2db      	uxtb	r3, r3
 8004688:	4619      	mov	r1, r3
 800468a:	6878      	ldr	r0, [r7, #4]
 800468c:	f000 fab2 	bl	8004bf4 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004690:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004692:	3301      	adds	r3, #1
 8004694:	627b      	str	r3, [r7, #36]	@ 0x24
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	791b      	ldrb	r3, [r3, #4]
 800469a:	461a      	mov	r2, r3
 800469c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800469e:	4293      	cmp	r3, r2
 80046a0:	d3cd      	bcc.n	800463e <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	695a      	ldr	r2, [r3, #20]
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 80046b0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	4618      	mov	r0, r3
 80046b8:	f002 ff84 	bl	80075c4 <USB_ReadInterrupts>
 80046bc:	4603      	mov	r3, r0
 80046be:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80046c2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80046c6:	d156      	bne.n	8004776 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80046c8:	2301      	movs	r3, #1
 80046ca:	627b      	str	r3, [r7, #36]	@ 0x24
 80046cc:	e045      	b.n	800475a <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80046ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046d0:	015a      	lsls	r2, r3, #5
 80046d2:	69fb      	ldr	r3, [r7, #28]
 80046d4:	4413      	add	r3, r2
 80046d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80046de:	6879      	ldr	r1, [r7, #4]
 80046e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80046e2:	4613      	mov	r3, r2
 80046e4:	00db      	lsls	r3, r3, #3
 80046e6:	4413      	add	r3, r2
 80046e8:	009b      	lsls	r3, r3, #2
 80046ea:	440b      	add	r3, r1
 80046ec:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80046f0:	781b      	ldrb	r3, [r3, #0]
 80046f2:	2b01      	cmp	r3, #1
 80046f4:	d12e      	bne.n	8004754 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80046f6:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	da2b      	bge.n	8004754 <HAL_PCD_IRQHandler+0x8ae>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 80046fc:	69bb      	ldr	r3, [r7, #24]
 80046fe:	0c1a      	lsrs	r2, r3, #16
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8004706:	4053      	eors	r3, r2
 8004708:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800470c:	2b00      	cmp	r3, #0
 800470e:	d121      	bne.n	8004754 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8004710:	6879      	ldr	r1, [r7, #4]
 8004712:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004714:	4613      	mov	r3, r2
 8004716:	00db      	lsls	r3, r3, #3
 8004718:	4413      	add	r3, r2
 800471a:	009b      	lsls	r3, r3, #2
 800471c:	440b      	add	r3, r1
 800471e:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8004722:	2201      	movs	r2, #1
 8004724:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8004726:	6a3b      	ldr	r3, [r7, #32]
 8004728:	699b      	ldr	r3, [r3, #24]
 800472a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800472e:	6a3b      	ldr	r3, [r7, #32]
 8004730:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8004732:	6a3b      	ldr	r3, [r7, #32]
 8004734:	695b      	ldr	r3, [r3, #20]
 8004736:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800473a:	2b00      	cmp	r3, #0
 800473c:	d10a      	bne.n	8004754 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800473e:	69fb      	ldr	r3, [r7, #28]
 8004740:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004744:	685b      	ldr	r3, [r3, #4]
 8004746:	69fa      	ldr	r2, [r7, #28]
 8004748:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800474c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004750:	6053      	str	r3, [r2, #4]
            break;
 8004752:	e008      	b.n	8004766 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004754:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004756:	3301      	adds	r3, #1
 8004758:	627b      	str	r3, [r7, #36]	@ 0x24
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	791b      	ldrb	r3, [r3, #4]
 800475e:	461a      	mov	r2, r3
 8004760:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004762:	4293      	cmp	r3, r2
 8004764:	d3b3      	bcc.n	80046ce <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	695a      	ldr	r2, [r3, #20]
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8004774:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	4618      	mov	r0, r3
 800477c:	f002 ff22 	bl	80075c4 <USB_ReadInterrupts>
 8004780:	4603      	mov	r3, r0
 8004782:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8004786:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800478a:	d10a      	bne.n	80047a2 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800478c:	6878      	ldr	r0, [r7, #4]
 800478e:	f005 f835 	bl	80097fc <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	695a      	ldr	r2, [r3, #20]
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80047a0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	4618      	mov	r0, r3
 80047a8:	f002 ff0c 	bl	80075c4 <USB_ReadInterrupts>
 80047ac:	4603      	mov	r3, r0
 80047ae:	f003 0304 	and.w	r3, r3, #4
 80047b2:	2b04      	cmp	r3, #4
 80047b4:	d115      	bne.n	80047e2 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	685b      	ldr	r3, [r3, #4]
 80047bc:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80047be:	69bb      	ldr	r3, [r7, #24]
 80047c0:	f003 0304 	and.w	r3, r3, #4
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d002      	beq.n	80047ce <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80047c8:	6878      	ldr	r0, [r7, #4]
 80047ca:	f005 f825 	bl	8009818 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	6859      	ldr	r1, [r3, #4]
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	69ba      	ldr	r2, [r7, #24]
 80047da:	430a      	orrs	r2, r1
 80047dc:	605a      	str	r2, [r3, #4]
 80047de:	e000      	b.n	80047e2 <HAL_PCD_IRQHandler+0x93c>
      return;
 80047e0:	bf00      	nop
    }
  }
}
 80047e2:	3734      	adds	r7, #52	@ 0x34
 80047e4:	46bd      	mov	sp, r7
 80047e6:	bd90      	pop	{r4, r7, pc}

080047e8 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b082      	sub	sp, #8
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
 80047f0:	460b      	mov	r3, r1
 80047f2:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80047fa:	2b01      	cmp	r3, #1
 80047fc:	d101      	bne.n	8004802 <HAL_PCD_SetAddress+0x1a>
 80047fe:	2302      	movs	r3, #2
 8004800:	e012      	b.n	8004828 <HAL_PCD_SetAddress+0x40>
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	2201      	movs	r2, #1
 8004806:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	78fa      	ldrb	r2, [r7, #3]
 800480e:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	78fa      	ldrb	r2, [r7, #3]
 8004816:	4611      	mov	r1, r2
 8004818:	4618      	mov	r0, r3
 800481a:	f002 fe6b 	bl	80074f4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	2200      	movs	r2, #0
 8004822:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004826:	2300      	movs	r3, #0
}
 8004828:	4618      	mov	r0, r3
 800482a:	3708      	adds	r7, #8
 800482c:	46bd      	mov	sp, r7
 800482e:	bd80      	pop	{r7, pc}

08004830 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004830:	b580      	push	{r7, lr}
 8004832:	b084      	sub	sp, #16
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
 8004838:	4608      	mov	r0, r1
 800483a:	4611      	mov	r1, r2
 800483c:	461a      	mov	r2, r3
 800483e:	4603      	mov	r3, r0
 8004840:	70fb      	strb	r3, [r7, #3]
 8004842:	460b      	mov	r3, r1
 8004844:	803b      	strh	r3, [r7, #0]
 8004846:	4613      	mov	r3, r2
 8004848:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 800484a:	2300      	movs	r3, #0
 800484c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800484e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004852:	2b00      	cmp	r3, #0
 8004854:	da0f      	bge.n	8004876 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004856:	78fb      	ldrb	r3, [r7, #3]
 8004858:	f003 020f 	and.w	r2, r3, #15
 800485c:	4613      	mov	r3, r2
 800485e:	00db      	lsls	r3, r3, #3
 8004860:	4413      	add	r3, r2
 8004862:	009b      	lsls	r3, r3, #2
 8004864:	3310      	adds	r3, #16
 8004866:	687a      	ldr	r2, [r7, #4]
 8004868:	4413      	add	r3, r2
 800486a:	3304      	adds	r3, #4
 800486c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	2201      	movs	r2, #1
 8004872:	705a      	strb	r2, [r3, #1]
 8004874:	e00f      	b.n	8004896 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004876:	78fb      	ldrb	r3, [r7, #3]
 8004878:	f003 020f 	and.w	r2, r3, #15
 800487c:	4613      	mov	r3, r2
 800487e:	00db      	lsls	r3, r3, #3
 8004880:	4413      	add	r3, r2
 8004882:	009b      	lsls	r3, r3, #2
 8004884:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004888:	687a      	ldr	r2, [r7, #4]
 800488a:	4413      	add	r3, r2
 800488c:	3304      	adds	r3, #4
 800488e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	2200      	movs	r2, #0
 8004894:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004896:	78fb      	ldrb	r3, [r7, #3]
 8004898:	f003 030f 	and.w	r3, r3, #15
 800489c:	b2da      	uxtb	r2, r3
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 80048a2:	883b      	ldrh	r3, [r7, #0]
 80048a4:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	78ba      	ldrb	r2, [r7, #2]
 80048b0:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	785b      	ldrb	r3, [r3, #1]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d004      	beq.n	80048c4 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	781b      	ldrb	r3, [r3, #0]
 80048be:	461a      	mov	r2, r3
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80048c4:	78bb      	ldrb	r3, [r7, #2]
 80048c6:	2b02      	cmp	r3, #2
 80048c8:	d102      	bne.n	80048d0 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	2200      	movs	r2, #0
 80048ce:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80048d6:	2b01      	cmp	r3, #1
 80048d8:	d101      	bne.n	80048de <HAL_PCD_EP_Open+0xae>
 80048da:	2302      	movs	r3, #2
 80048dc:	e00e      	b.n	80048fc <HAL_PCD_EP_Open+0xcc>
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	2201      	movs	r2, #1
 80048e2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	68f9      	ldr	r1, [r7, #12]
 80048ec:	4618      	mov	r0, r3
 80048ee:	f001 ffeb 	bl	80068c8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	2200      	movs	r2, #0
 80048f6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 80048fa:	7afb      	ldrb	r3, [r7, #11]
}
 80048fc:	4618      	mov	r0, r3
 80048fe:	3710      	adds	r7, #16
 8004900:	46bd      	mov	sp, r7
 8004902:	bd80      	pop	{r7, pc}

08004904 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004904:	b580      	push	{r7, lr}
 8004906:	b084      	sub	sp, #16
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
 800490c:	460b      	mov	r3, r1
 800490e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004910:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004914:	2b00      	cmp	r3, #0
 8004916:	da0f      	bge.n	8004938 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004918:	78fb      	ldrb	r3, [r7, #3]
 800491a:	f003 020f 	and.w	r2, r3, #15
 800491e:	4613      	mov	r3, r2
 8004920:	00db      	lsls	r3, r3, #3
 8004922:	4413      	add	r3, r2
 8004924:	009b      	lsls	r3, r3, #2
 8004926:	3310      	adds	r3, #16
 8004928:	687a      	ldr	r2, [r7, #4]
 800492a:	4413      	add	r3, r2
 800492c:	3304      	adds	r3, #4
 800492e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	2201      	movs	r2, #1
 8004934:	705a      	strb	r2, [r3, #1]
 8004936:	e00f      	b.n	8004958 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004938:	78fb      	ldrb	r3, [r7, #3]
 800493a:	f003 020f 	and.w	r2, r3, #15
 800493e:	4613      	mov	r3, r2
 8004940:	00db      	lsls	r3, r3, #3
 8004942:	4413      	add	r3, r2
 8004944:	009b      	lsls	r3, r3, #2
 8004946:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800494a:	687a      	ldr	r2, [r7, #4]
 800494c:	4413      	add	r3, r2
 800494e:	3304      	adds	r3, #4
 8004950:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	2200      	movs	r2, #0
 8004956:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8004958:	78fb      	ldrb	r3, [r7, #3]
 800495a:	f003 030f 	and.w	r3, r3, #15
 800495e:	b2da      	uxtb	r2, r3
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800496a:	2b01      	cmp	r3, #1
 800496c:	d101      	bne.n	8004972 <HAL_PCD_EP_Close+0x6e>
 800496e:	2302      	movs	r3, #2
 8004970:	e00e      	b.n	8004990 <HAL_PCD_EP_Close+0x8c>
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	2201      	movs	r2, #1
 8004976:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	68f9      	ldr	r1, [r7, #12]
 8004980:	4618      	mov	r0, r3
 8004982:	f002 f829 	bl	80069d8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	2200      	movs	r2, #0
 800498a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 800498e:	2300      	movs	r3, #0
}
 8004990:	4618      	mov	r0, r3
 8004992:	3710      	adds	r7, #16
 8004994:	46bd      	mov	sp, r7
 8004996:	bd80      	pop	{r7, pc}

08004998 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004998:	b580      	push	{r7, lr}
 800499a:	b086      	sub	sp, #24
 800499c:	af00      	add	r7, sp, #0
 800499e:	60f8      	str	r0, [r7, #12]
 80049a0:	607a      	str	r2, [r7, #4]
 80049a2:	603b      	str	r3, [r7, #0]
 80049a4:	460b      	mov	r3, r1
 80049a6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80049a8:	7afb      	ldrb	r3, [r7, #11]
 80049aa:	f003 020f 	and.w	r2, r3, #15
 80049ae:	4613      	mov	r3, r2
 80049b0:	00db      	lsls	r3, r3, #3
 80049b2:	4413      	add	r3, r2
 80049b4:	009b      	lsls	r3, r3, #2
 80049b6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80049ba:	68fa      	ldr	r2, [r7, #12]
 80049bc:	4413      	add	r3, r2
 80049be:	3304      	adds	r3, #4
 80049c0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80049c2:	697b      	ldr	r3, [r7, #20]
 80049c4:	687a      	ldr	r2, [r7, #4]
 80049c6:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80049c8:	697b      	ldr	r3, [r7, #20]
 80049ca:	683a      	ldr	r2, [r7, #0]
 80049cc:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80049ce:	697b      	ldr	r3, [r7, #20]
 80049d0:	2200      	movs	r2, #0
 80049d2:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80049d4:	697b      	ldr	r3, [r7, #20]
 80049d6:	2200      	movs	r2, #0
 80049d8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80049da:	7afb      	ldrb	r3, [r7, #11]
 80049dc:	f003 030f 	and.w	r3, r3, #15
 80049e0:	b2da      	uxtb	r2, r3
 80049e2:	697b      	ldr	r3, [r7, #20]
 80049e4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	799b      	ldrb	r3, [r3, #6]
 80049ea:	2b01      	cmp	r3, #1
 80049ec:	d102      	bne.n	80049f4 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80049ee:	687a      	ldr	r2, [r7, #4]
 80049f0:	697b      	ldr	r3, [r7, #20]
 80049f2:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	6818      	ldr	r0, [r3, #0]
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	799b      	ldrb	r3, [r3, #6]
 80049fc:	461a      	mov	r2, r3
 80049fe:	6979      	ldr	r1, [r7, #20]
 8004a00:	f002 f8c6 	bl	8006b90 <USB_EPStartXfer>

  return HAL_OK;
 8004a04:	2300      	movs	r3, #0
}
 8004a06:	4618      	mov	r0, r3
 8004a08:	3718      	adds	r7, #24
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	bd80      	pop	{r7, pc}

08004a0e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004a0e:	b580      	push	{r7, lr}
 8004a10:	b086      	sub	sp, #24
 8004a12:	af00      	add	r7, sp, #0
 8004a14:	60f8      	str	r0, [r7, #12]
 8004a16:	607a      	str	r2, [r7, #4]
 8004a18:	603b      	str	r3, [r7, #0]
 8004a1a:	460b      	mov	r3, r1
 8004a1c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004a1e:	7afb      	ldrb	r3, [r7, #11]
 8004a20:	f003 020f 	and.w	r2, r3, #15
 8004a24:	4613      	mov	r3, r2
 8004a26:	00db      	lsls	r3, r3, #3
 8004a28:	4413      	add	r3, r2
 8004a2a:	009b      	lsls	r3, r3, #2
 8004a2c:	3310      	adds	r3, #16
 8004a2e:	68fa      	ldr	r2, [r7, #12]
 8004a30:	4413      	add	r3, r2
 8004a32:	3304      	adds	r3, #4
 8004a34:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004a36:	697b      	ldr	r3, [r7, #20]
 8004a38:	687a      	ldr	r2, [r7, #4]
 8004a3a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004a3c:	697b      	ldr	r3, [r7, #20]
 8004a3e:	683a      	ldr	r2, [r7, #0]
 8004a40:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8004a42:	697b      	ldr	r3, [r7, #20]
 8004a44:	2200      	movs	r2, #0
 8004a46:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8004a48:	697b      	ldr	r3, [r7, #20]
 8004a4a:	2201      	movs	r2, #1
 8004a4c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004a4e:	7afb      	ldrb	r3, [r7, #11]
 8004a50:	f003 030f 	and.w	r3, r3, #15
 8004a54:	b2da      	uxtb	r2, r3
 8004a56:	697b      	ldr	r3, [r7, #20]
 8004a58:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	799b      	ldrb	r3, [r3, #6]
 8004a5e:	2b01      	cmp	r3, #1
 8004a60:	d102      	bne.n	8004a68 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004a62:	687a      	ldr	r2, [r7, #4]
 8004a64:	697b      	ldr	r3, [r7, #20]
 8004a66:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	6818      	ldr	r0, [r3, #0]
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	799b      	ldrb	r3, [r3, #6]
 8004a70:	461a      	mov	r2, r3
 8004a72:	6979      	ldr	r1, [r7, #20]
 8004a74:	f002 f88c 	bl	8006b90 <USB_EPStartXfer>

  return HAL_OK;
 8004a78:	2300      	movs	r3, #0
}
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	3718      	adds	r7, #24
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	bd80      	pop	{r7, pc}

08004a82 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004a82:	b580      	push	{r7, lr}
 8004a84:	b084      	sub	sp, #16
 8004a86:	af00      	add	r7, sp, #0
 8004a88:	6078      	str	r0, [r7, #4]
 8004a8a:	460b      	mov	r3, r1
 8004a8c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004a8e:	78fb      	ldrb	r3, [r7, #3]
 8004a90:	f003 030f 	and.w	r3, r3, #15
 8004a94:	687a      	ldr	r2, [r7, #4]
 8004a96:	7912      	ldrb	r2, [r2, #4]
 8004a98:	4293      	cmp	r3, r2
 8004a9a:	d901      	bls.n	8004aa0 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004a9c:	2301      	movs	r3, #1
 8004a9e:	e04f      	b.n	8004b40 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004aa0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	da0f      	bge.n	8004ac8 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004aa8:	78fb      	ldrb	r3, [r7, #3]
 8004aaa:	f003 020f 	and.w	r2, r3, #15
 8004aae:	4613      	mov	r3, r2
 8004ab0:	00db      	lsls	r3, r3, #3
 8004ab2:	4413      	add	r3, r2
 8004ab4:	009b      	lsls	r3, r3, #2
 8004ab6:	3310      	adds	r3, #16
 8004ab8:	687a      	ldr	r2, [r7, #4]
 8004aba:	4413      	add	r3, r2
 8004abc:	3304      	adds	r3, #4
 8004abe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	2201      	movs	r2, #1
 8004ac4:	705a      	strb	r2, [r3, #1]
 8004ac6:	e00d      	b.n	8004ae4 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004ac8:	78fa      	ldrb	r2, [r7, #3]
 8004aca:	4613      	mov	r3, r2
 8004acc:	00db      	lsls	r3, r3, #3
 8004ace:	4413      	add	r3, r2
 8004ad0:	009b      	lsls	r3, r3, #2
 8004ad2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004ad6:	687a      	ldr	r2, [r7, #4]
 8004ad8:	4413      	add	r3, r2
 8004ada:	3304      	adds	r3, #4
 8004adc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	2201      	movs	r2, #1
 8004ae8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004aea:	78fb      	ldrb	r3, [r7, #3]
 8004aec:	f003 030f 	and.w	r3, r3, #15
 8004af0:	b2da      	uxtb	r2, r3
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004afc:	2b01      	cmp	r3, #1
 8004afe:	d101      	bne.n	8004b04 <HAL_PCD_EP_SetStall+0x82>
 8004b00:	2302      	movs	r3, #2
 8004b02:	e01d      	b.n	8004b40 <HAL_PCD_EP_SetStall+0xbe>
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2201      	movs	r2, #1
 8004b08:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	68f9      	ldr	r1, [r7, #12]
 8004b12:	4618      	mov	r0, r3
 8004b14:	f002 fc1a 	bl	800734c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004b18:	78fb      	ldrb	r3, [r7, #3]
 8004b1a:	f003 030f 	and.w	r3, r3, #15
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d109      	bne.n	8004b36 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6818      	ldr	r0, [r3, #0]
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	7999      	ldrb	r1, [r3, #6]
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004b30:	461a      	mov	r2, r3
 8004b32:	f002 fe0b 	bl	800774c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	2200      	movs	r2, #0
 8004b3a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004b3e:	2300      	movs	r3, #0
}
 8004b40:	4618      	mov	r0, r3
 8004b42:	3710      	adds	r7, #16
 8004b44:	46bd      	mov	sp, r7
 8004b46:	bd80      	pop	{r7, pc}

08004b48 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	b084      	sub	sp, #16
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
 8004b50:	460b      	mov	r3, r1
 8004b52:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004b54:	78fb      	ldrb	r3, [r7, #3]
 8004b56:	f003 030f 	and.w	r3, r3, #15
 8004b5a:	687a      	ldr	r2, [r7, #4]
 8004b5c:	7912      	ldrb	r2, [r2, #4]
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	d901      	bls.n	8004b66 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004b62:	2301      	movs	r3, #1
 8004b64:	e042      	b.n	8004bec <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004b66:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	da0f      	bge.n	8004b8e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004b6e:	78fb      	ldrb	r3, [r7, #3]
 8004b70:	f003 020f 	and.w	r2, r3, #15
 8004b74:	4613      	mov	r3, r2
 8004b76:	00db      	lsls	r3, r3, #3
 8004b78:	4413      	add	r3, r2
 8004b7a:	009b      	lsls	r3, r3, #2
 8004b7c:	3310      	adds	r3, #16
 8004b7e:	687a      	ldr	r2, [r7, #4]
 8004b80:	4413      	add	r3, r2
 8004b82:	3304      	adds	r3, #4
 8004b84:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	2201      	movs	r2, #1
 8004b8a:	705a      	strb	r2, [r3, #1]
 8004b8c:	e00f      	b.n	8004bae <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004b8e:	78fb      	ldrb	r3, [r7, #3]
 8004b90:	f003 020f 	and.w	r2, r3, #15
 8004b94:	4613      	mov	r3, r2
 8004b96:	00db      	lsls	r3, r3, #3
 8004b98:	4413      	add	r3, r2
 8004b9a:	009b      	lsls	r3, r3, #2
 8004b9c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004ba0:	687a      	ldr	r2, [r7, #4]
 8004ba2:	4413      	add	r3, r2
 8004ba4:	3304      	adds	r3, #4
 8004ba6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	2200      	movs	r2, #0
 8004bac:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004bb4:	78fb      	ldrb	r3, [r7, #3]
 8004bb6:	f003 030f 	and.w	r3, r3, #15
 8004bba:	b2da      	uxtb	r2, r3
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004bc6:	2b01      	cmp	r3, #1
 8004bc8:	d101      	bne.n	8004bce <HAL_PCD_EP_ClrStall+0x86>
 8004bca:	2302      	movs	r3, #2
 8004bcc:	e00e      	b.n	8004bec <HAL_PCD_EP_ClrStall+0xa4>
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	2201      	movs	r2, #1
 8004bd2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	68f9      	ldr	r1, [r7, #12]
 8004bdc:	4618      	mov	r0, r3
 8004bde:	f002 fc23 	bl	8007428 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	2200      	movs	r2, #0
 8004be6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004bea:	2300      	movs	r3, #0
}
 8004bec:	4618      	mov	r0, r3
 8004bee:	3710      	adds	r7, #16
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	bd80      	pop	{r7, pc}

08004bf4 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b084      	sub	sp, #16
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
 8004bfc:	460b      	mov	r3, r1
 8004bfe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8004c00:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	da0c      	bge.n	8004c22 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004c08:	78fb      	ldrb	r3, [r7, #3]
 8004c0a:	f003 020f 	and.w	r2, r3, #15
 8004c0e:	4613      	mov	r3, r2
 8004c10:	00db      	lsls	r3, r3, #3
 8004c12:	4413      	add	r3, r2
 8004c14:	009b      	lsls	r3, r3, #2
 8004c16:	3310      	adds	r3, #16
 8004c18:	687a      	ldr	r2, [r7, #4]
 8004c1a:	4413      	add	r3, r2
 8004c1c:	3304      	adds	r3, #4
 8004c1e:	60fb      	str	r3, [r7, #12]
 8004c20:	e00c      	b.n	8004c3c <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004c22:	78fb      	ldrb	r3, [r7, #3]
 8004c24:	f003 020f 	and.w	r2, r3, #15
 8004c28:	4613      	mov	r3, r2
 8004c2a:	00db      	lsls	r3, r3, #3
 8004c2c:	4413      	add	r3, r2
 8004c2e:	009b      	lsls	r3, r3, #2
 8004c30:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004c34:	687a      	ldr	r2, [r7, #4]
 8004c36:	4413      	add	r3, r2
 8004c38:	3304      	adds	r3, #4
 8004c3a:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	68f9      	ldr	r1, [r7, #12]
 8004c42:	4618      	mov	r0, r3
 8004c44:	f002 fa42 	bl	80070cc <USB_EPStopXfer>
 8004c48:	4603      	mov	r3, r0
 8004c4a:	72fb      	strb	r3, [r7, #11]

  return ret;
 8004c4c:	7afb      	ldrb	r3, [r7, #11]
}
 8004c4e:	4618      	mov	r0, r3
 8004c50:	3710      	adds	r7, #16
 8004c52:	46bd      	mov	sp, r7
 8004c54:	bd80      	pop	{r7, pc}

08004c56 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004c56:	b580      	push	{r7, lr}
 8004c58:	b08a      	sub	sp, #40	@ 0x28
 8004c5a:	af02      	add	r7, sp, #8
 8004c5c:	6078      	str	r0, [r7, #4]
 8004c5e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c66:	697b      	ldr	r3, [r7, #20]
 8004c68:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004c6a:	683a      	ldr	r2, [r7, #0]
 8004c6c:	4613      	mov	r3, r2
 8004c6e:	00db      	lsls	r3, r3, #3
 8004c70:	4413      	add	r3, r2
 8004c72:	009b      	lsls	r3, r3, #2
 8004c74:	3310      	adds	r3, #16
 8004c76:	687a      	ldr	r2, [r7, #4]
 8004c78:	4413      	add	r3, r2
 8004c7a:	3304      	adds	r3, #4
 8004c7c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	695a      	ldr	r2, [r3, #20]
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	691b      	ldr	r3, [r3, #16]
 8004c86:	429a      	cmp	r2, r3
 8004c88:	d901      	bls.n	8004c8e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004c8a:	2301      	movs	r3, #1
 8004c8c:	e06b      	b.n	8004d66 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	691a      	ldr	r2, [r3, #16]
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	695b      	ldr	r3, [r3, #20]
 8004c96:	1ad3      	subs	r3, r2, r3
 8004c98:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	689b      	ldr	r3, [r3, #8]
 8004c9e:	69fa      	ldr	r2, [r7, #28]
 8004ca0:	429a      	cmp	r2, r3
 8004ca2:	d902      	bls.n	8004caa <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	689b      	ldr	r3, [r3, #8]
 8004ca8:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004caa:	69fb      	ldr	r3, [r7, #28]
 8004cac:	3303      	adds	r3, #3
 8004cae:	089b      	lsrs	r3, r3, #2
 8004cb0:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004cb2:	e02a      	b.n	8004d0a <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	691a      	ldr	r2, [r3, #16]
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	695b      	ldr	r3, [r3, #20]
 8004cbc:	1ad3      	subs	r3, r2, r3
 8004cbe:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	689b      	ldr	r3, [r3, #8]
 8004cc4:	69fa      	ldr	r2, [r7, #28]
 8004cc6:	429a      	cmp	r2, r3
 8004cc8:	d902      	bls.n	8004cd0 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	689b      	ldr	r3, [r3, #8]
 8004cce:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004cd0:	69fb      	ldr	r3, [r7, #28]
 8004cd2:	3303      	adds	r3, #3
 8004cd4:	089b      	lsrs	r3, r3, #2
 8004cd6:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	68d9      	ldr	r1, [r3, #12]
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	b2da      	uxtb	r2, r3
 8004ce0:	69fb      	ldr	r3, [r7, #28]
 8004ce2:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004ce8:	9300      	str	r3, [sp, #0]
 8004cea:	4603      	mov	r3, r0
 8004cec:	6978      	ldr	r0, [r7, #20]
 8004cee:	f002 fa97 	bl	8007220 <USB_WritePacket>

    ep->xfer_buff  += len;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	68da      	ldr	r2, [r3, #12]
 8004cf6:	69fb      	ldr	r3, [r7, #28]
 8004cf8:	441a      	add	r2, r3
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	695a      	ldr	r2, [r3, #20]
 8004d02:	69fb      	ldr	r3, [r7, #28]
 8004d04:	441a      	add	r2, r3
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	015a      	lsls	r2, r3, #5
 8004d0e:	693b      	ldr	r3, [r7, #16]
 8004d10:	4413      	add	r3, r2
 8004d12:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004d16:	699b      	ldr	r3, [r3, #24]
 8004d18:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004d1a:	69ba      	ldr	r2, [r7, #24]
 8004d1c:	429a      	cmp	r2, r3
 8004d1e:	d809      	bhi.n	8004d34 <PCD_WriteEmptyTxFifo+0xde>
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	695a      	ldr	r2, [r3, #20]
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004d28:	429a      	cmp	r2, r3
 8004d2a:	d203      	bcs.n	8004d34 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	691b      	ldr	r3, [r3, #16]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d1bf      	bne.n	8004cb4 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	691a      	ldr	r2, [r3, #16]
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	695b      	ldr	r3, [r3, #20]
 8004d3c:	429a      	cmp	r2, r3
 8004d3e:	d811      	bhi.n	8004d64 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004d40:	683b      	ldr	r3, [r7, #0]
 8004d42:	f003 030f 	and.w	r3, r3, #15
 8004d46:	2201      	movs	r2, #1
 8004d48:	fa02 f303 	lsl.w	r3, r2, r3
 8004d4c:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004d4e:	693b      	ldr	r3, [r7, #16]
 8004d50:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004d54:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004d56:	68bb      	ldr	r3, [r7, #8]
 8004d58:	43db      	mvns	r3, r3
 8004d5a:	6939      	ldr	r1, [r7, #16]
 8004d5c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004d60:	4013      	ands	r3, r2
 8004d62:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8004d64:	2300      	movs	r3, #0
}
 8004d66:	4618      	mov	r0, r3
 8004d68:	3720      	adds	r7, #32
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	bd80      	pop	{r7, pc}
	...

08004d70 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004d70:	b580      	push	{r7, lr}
 8004d72:	b088      	sub	sp, #32
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
 8004d78:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d80:	69fb      	ldr	r3, [r7, #28]
 8004d82:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004d84:	69fb      	ldr	r3, [r7, #28]
 8004d86:	333c      	adds	r3, #60	@ 0x3c
 8004d88:	3304      	adds	r3, #4
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	015a      	lsls	r2, r3, #5
 8004d92:	69bb      	ldr	r3, [r7, #24]
 8004d94:	4413      	add	r3, r2
 8004d96:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d9a:	689b      	ldr	r3, [r3, #8]
 8004d9c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	799b      	ldrb	r3, [r3, #6]
 8004da2:	2b01      	cmp	r3, #1
 8004da4:	d17b      	bne.n	8004e9e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004da6:	693b      	ldr	r3, [r7, #16]
 8004da8:	f003 0308 	and.w	r3, r3, #8
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d015      	beq.n	8004ddc <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004db0:	697b      	ldr	r3, [r7, #20]
 8004db2:	4a61      	ldr	r2, [pc, #388]	@ (8004f38 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004db4:	4293      	cmp	r3, r2
 8004db6:	f240 80b9 	bls.w	8004f2c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004dba:	693b      	ldr	r3, [r7, #16]
 8004dbc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	f000 80b3 	beq.w	8004f2c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	015a      	lsls	r2, r3, #5
 8004dca:	69bb      	ldr	r3, [r7, #24]
 8004dcc:	4413      	add	r3, r2
 8004dce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004dd2:	461a      	mov	r2, r3
 8004dd4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004dd8:	6093      	str	r3, [r2, #8]
 8004dda:	e0a7      	b.n	8004f2c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004ddc:	693b      	ldr	r3, [r7, #16]
 8004dde:	f003 0320 	and.w	r3, r3, #32
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d009      	beq.n	8004dfa <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	015a      	lsls	r2, r3, #5
 8004dea:	69bb      	ldr	r3, [r7, #24]
 8004dec:	4413      	add	r3, r2
 8004dee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004df2:	461a      	mov	r2, r3
 8004df4:	2320      	movs	r3, #32
 8004df6:	6093      	str	r3, [r2, #8]
 8004df8:	e098      	b.n	8004f2c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004dfa:	693b      	ldr	r3, [r7, #16]
 8004dfc:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	f040 8093 	bne.w	8004f2c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004e06:	697b      	ldr	r3, [r7, #20]
 8004e08:	4a4b      	ldr	r2, [pc, #300]	@ (8004f38 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004e0a:	4293      	cmp	r3, r2
 8004e0c:	d90f      	bls.n	8004e2e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004e0e:	693b      	ldr	r3, [r7, #16]
 8004e10:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d00a      	beq.n	8004e2e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	015a      	lsls	r2, r3, #5
 8004e1c:	69bb      	ldr	r3, [r7, #24]
 8004e1e:	4413      	add	r3, r2
 8004e20:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004e24:	461a      	mov	r2, r3
 8004e26:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004e2a:	6093      	str	r3, [r2, #8]
 8004e2c:	e07e      	b.n	8004f2c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8004e2e:	683a      	ldr	r2, [r7, #0]
 8004e30:	4613      	mov	r3, r2
 8004e32:	00db      	lsls	r3, r3, #3
 8004e34:	4413      	add	r3, r2
 8004e36:	009b      	lsls	r3, r3, #2
 8004e38:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004e3c:	687a      	ldr	r2, [r7, #4]
 8004e3e:	4413      	add	r3, r2
 8004e40:	3304      	adds	r3, #4
 8004e42:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	6a1a      	ldr	r2, [r3, #32]
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	0159      	lsls	r1, r3, #5
 8004e4c:	69bb      	ldr	r3, [r7, #24]
 8004e4e:	440b      	add	r3, r1
 8004e50:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004e54:	691b      	ldr	r3, [r3, #16]
 8004e56:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e5a:	1ad2      	subs	r2, r2, r3
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d114      	bne.n	8004e90 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	691b      	ldr	r3, [r3, #16]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d109      	bne.n	8004e82 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6818      	ldr	r0, [r3, #0]
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004e78:	461a      	mov	r2, r3
 8004e7a:	2101      	movs	r1, #1
 8004e7c:	f002 fc66 	bl	800774c <USB_EP0_OutStart>
 8004e80:	e006      	b.n	8004e90 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	68da      	ldr	r2, [r3, #12]
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	695b      	ldr	r3, [r3, #20]
 8004e8a:	441a      	add	r2, r3
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	b2db      	uxtb	r3, r3
 8004e94:	4619      	mov	r1, r3
 8004e96:	6878      	ldr	r0, [r7, #4]
 8004e98:	f004 fbec 	bl	8009674 <HAL_PCD_DataOutStageCallback>
 8004e9c:	e046      	b.n	8004f2c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004e9e:	697b      	ldr	r3, [r7, #20]
 8004ea0:	4a26      	ldr	r2, [pc, #152]	@ (8004f3c <PCD_EP_OutXfrComplete_int+0x1cc>)
 8004ea2:	4293      	cmp	r3, r2
 8004ea4:	d124      	bne.n	8004ef0 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004ea6:	693b      	ldr	r3, [r7, #16]
 8004ea8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d00a      	beq.n	8004ec6 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	015a      	lsls	r2, r3, #5
 8004eb4:	69bb      	ldr	r3, [r7, #24]
 8004eb6:	4413      	add	r3, r2
 8004eb8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ebc:	461a      	mov	r2, r3
 8004ebe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004ec2:	6093      	str	r3, [r2, #8]
 8004ec4:	e032      	b.n	8004f2c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004ec6:	693b      	ldr	r3, [r7, #16]
 8004ec8:	f003 0320 	and.w	r3, r3, #32
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d008      	beq.n	8004ee2 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004ed0:	683b      	ldr	r3, [r7, #0]
 8004ed2:	015a      	lsls	r2, r3, #5
 8004ed4:	69bb      	ldr	r3, [r7, #24]
 8004ed6:	4413      	add	r3, r2
 8004ed8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004edc:	461a      	mov	r2, r3
 8004ede:	2320      	movs	r3, #32
 8004ee0:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004ee2:	683b      	ldr	r3, [r7, #0]
 8004ee4:	b2db      	uxtb	r3, r3
 8004ee6:	4619      	mov	r1, r3
 8004ee8:	6878      	ldr	r0, [r7, #4]
 8004eea:	f004 fbc3 	bl	8009674 <HAL_PCD_DataOutStageCallback>
 8004eee:	e01d      	b.n	8004f2c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d114      	bne.n	8004f20 <PCD_EP_OutXfrComplete_int+0x1b0>
 8004ef6:	6879      	ldr	r1, [r7, #4]
 8004ef8:	683a      	ldr	r2, [r7, #0]
 8004efa:	4613      	mov	r3, r2
 8004efc:	00db      	lsls	r3, r3, #3
 8004efe:	4413      	add	r3, r2
 8004f00:	009b      	lsls	r3, r3, #2
 8004f02:	440b      	add	r3, r1
 8004f04:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d108      	bne.n	8004f20 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6818      	ldr	r0, [r3, #0]
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004f18:	461a      	mov	r2, r3
 8004f1a:	2100      	movs	r1, #0
 8004f1c:	f002 fc16 	bl	800774c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	b2db      	uxtb	r3, r3
 8004f24:	4619      	mov	r1, r3
 8004f26:	6878      	ldr	r0, [r7, #4]
 8004f28:	f004 fba4 	bl	8009674 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004f2c:	2300      	movs	r3, #0
}
 8004f2e:	4618      	mov	r0, r3
 8004f30:	3720      	adds	r7, #32
 8004f32:	46bd      	mov	sp, r7
 8004f34:	bd80      	pop	{r7, pc}
 8004f36:	bf00      	nop
 8004f38:	4f54300a 	.word	0x4f54300a
 8004f3c:	4f54310a 	.word	0x4f54310a

08004f40 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004f40:	b580      	push	{r7, lr}
 8004f42:	b086      	sub	sp, #24
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
 8004f48:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f50:	697b      	ldr	r3, [r7, #20]
 8004f52:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004f54:	697b      	ldr	r3, [r7, #20]
 8004f56:	333c      	adds	r3, #60	@ 0x3c
 8004f58:	3304      	adds	r3, #4
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004f5e:	683b      	ldr	r3, [r7, #0]
 8004f60:	015a      	lsls	r2, r3, #5
 8004f62:	693b      	ldr	r3, [r7, #16]
 8004f64:	4413      	add	r3, r2
 8004f66:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f6a:	689b      	ldr	r3, [r3, #8]
 8004f6c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	4a15      	ldr	r2, [pc, #84]	@ (8004fc8 <PCD_EP_OutSetupPacket_int+0x88>)
 8004f72:	4293      	cmp	r3, r2
 8004f74:	d90e      	bls.n	8004f94 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004f76:	68bb      	ldr	r3, [r7, #8]
 8004f78:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d009      	beq.n	8004f94 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	015a      	lsls	r2, r3, #5
 8004f84:	693b      	ldr	r3, [r7, #16]
 8004f86:	4413      	add	r3, r2
 8004f88:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f8c:	461a      	mov	r2, r3
 8004f8e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004f92:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004f94:	6878      	ldr	r0, [r7, #4]
 8004f96:	f004 fb5b 	bl	8009650 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	4a0a      	ldr	r2, [pc, #40]	@ (8004fc8 <PCD_EP_OutSetupPacket_int+0x88>)
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	d90c      	bls.n	8004fbc <PCD_EP_OutSetupPacket_int+0x7c>
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	799b      	ldrb	r3, [r3, #6]
 8004fa6:	2b01      	cmp	r3, #1
 8004fa8:	d108      	bne.n	8004fbc <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	6818      	ldr	r0, [r3, #0]
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004fb4:	461a      	mov	r2, r3
 8004fb6:	2101      	movs	r1, #1
 8004fb8:	f002 fbc8 	bl	800774c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004fbc:	2300      	movs	r3, #0
}
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	3718      	adds	r7, #24
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	bd80      	pop	{r7, pc}
 8004fc6:	bf00      	nop
 8004fc8:	4f54300a 	.word	0x4f54300a

08004fcc <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004fcc:	b480      	push	{r7}
 8004fce:	b085      	sub	sp, #20
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
 8004fd4:	460b      	mov	r3, r1
 8004fd6:	70fb      	strb	r3, [r7, #3]
 8004fd8:	4613      	mov	r3, r2
 8004fda:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fe2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004fe4:	78fb      	ldrb	r3, [r7, #3]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d107      	bne.n	8004ffa <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004fea:	883b      	ldrh	r3, [r7, #0]
 8004fec:	0419      	lsls	r1, r3, #16
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	68ba      	ldr	r2, [r7, #8]
 8004ff4:	430a      	orrs	r2, r1
 8004ff6:	629a      	str	r2, [r3, #40]	@ 0x28
 8004ff8:	e028      	b.n	800504c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005000:	0c1b      	lsrs	r3, r3, #16
 8005002:	68ba      	ldr	r2, [r7, #8]
 8005004:	4413      	add	r3, r2
 8005006:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005008:	2300      	movs	r3, #0
 800500a:	73fb      	strb	r3, [r7, #15]
 800500c:	e00d      	b.n	800502a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681a      	ldr	r2, [r3, #0]
 8005012:	7bfb      	ldrb	r3, [r7, #15]
 8005014:	3340      	adds	r3, #64	@ 0x40
 8005016:	009b      	lsls	r3, r3, #2
 8005018:	4413      	add	r3, r2
 800501a:	685b      	ldr	r3, [r3, #4]
 800501c:	0c1b      	lsrs	r3, r3, #16
 800501e:	68ba      	ldr	r2, [r7, #8]
 8005020:	4413      	add	r3, r2
 8005022:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005024:	7bfb      	ldrb	r3, [r7, #15]
 8005026:	3301      	adds	r3, #1
 8005028:	73fb      	strb	r3, [r7, #15]
 800502a:	7bfa      	ldrb	r2, [r7, #15]
 800502c:	78fb      	ldrb	r3, [r7, #3]
 800502e:	3b01      	subs	r3, #1
 8005030:	429a      	cmp	r2, r3
 8005032:	d3ec      	bcc.n	800500e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8005034:	883b      	ldrh	r3, [r7, #0]
 8005036:	0418      	lsls	r0, r3, #16
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	6819      	ldr	r1, [r3, #0]
 800503c:	78fb      	ldrb	r3, [r7, #3]
 800503e:	3b01      	subs	r3, #1
 8005040:	68ba      	ldr	r2, [r7, #8]
 8005042:	4302      	orrs	r2, r0
 8005044:	3340      	adds	r3, #64	@ 0x40
 8005046:	009b      	lsls	r3, r3, #2
 8005048:	440b      	add	r3, r1
 800504a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800504c:	2300      	movs	r3, #0
}
 800504e:	4618      	mov	r0, r3
 8005050:	3714      	adds	r7, #20
 8005052:	46bd      	mov	sp, r7
 8005054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005058:	4770      	bx	lr

0800505a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800505a:	b480      	push	{r7}
 800505c:	b083      	sub	sp, #12
 800505e:	af00      	add	r7, sp, #0
 8005060:	6078      	str	r0, [r7, #4]
 8005062:	460b      	mov	r3, r1
 8005064:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	887a      	ldrh	r2, [r7, #2]
 800506c:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800506e:	2300      	movs	r3, #0
}
 8005070:	4618      	mov	r0, r3
 8005072:	370c      	adds	r7, #12
 8005074:	46bd      	mov	sp, r7
 8005076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507a:	4770      	bx	lr

0800507c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800507c:	b480      	push	{r7}
 800507e:	b083      	sub	sp, #12
 8005080:	af00      	add	r7, sp, #0
 8005082:	6078      	str	r0, [r7, #4]
 8005084:	460b      	mov	r3, r1
 8005086:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8005088:	bf00      	nop
 800508a:	370c      	adds	r7, #12
 800508c:	46bd      	mov	sp, r7
 800508e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005092:	4770      	bx	lr

08005094 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005094:	b580      	push	{r7, lr}
 8005096:	b086      	sub	sp, #24
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d101      	bne.n	80050a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80050a2:	2301      	movs	r3, #1
 80050a4:	e267      	b.n	8005576 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f003 0301 	and.w	r3, r3, #1
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d075      	beq.n	800519e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80050b2:	4b88      	ldr	r3, [pc, #544]	@ (80052d4 <HAL_RCC_OscConfig+0x240>)
 80050b4:	689b      	ldr	r3, [r3, #8]
 80050b6:	f003 030c 	and.w	r3, r3, #12
 80050ba:	2b04      	cmp	r3, #4
 80050bc:	d00c      	beq.n	80050d8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80050be:	4b85      	ldr	r3, [pc, #532]	@ (80052d4 <HAL_RCC_OscConfig+0x240>)
 80050c0:	689b      	ldr	r3, [r3, #8]
 80050c2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80050c6:	2b08      	cmp	r3, #8
 80050c8:	d112      	bne.n	80050f0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80050ca:	4b82      	ldr	r3, [pc, #520]	@ (80052d4 <HAL_RCC_OscConfig+0x240>)
 80050cc:	685b      	ldr	r3, [r3, #4]
 80050ce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80050d2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80050d6:	d10b      	bne.n	80050f0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80050d8:	4b7e      	ldr	r3, [pc, #504]	@ (80052d4 <HAL_RCC_OscConfig+0x240>)
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d05b      	beq.n	800519c <HAL_RCC_OscConfig+0x108>
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	685b      	ldr	r3, [r3, #4]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d157      	bne.n	800519c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80050ec:	2301      	movs	r3, #1
 80050ee:	e242      	b.n	8005576 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	685b      	ldr	r3, [r3, #4]
 80050f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80050f8:	d106      	bne.n	8005108 <HAL_RCC_OscConfig+0x74>
 80050fa:	4b76      	ldr	r3, [pc, #472]	@ (80052d4 <HAL_RCC_OscConfig+0x240>)
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	4a75      	ldr	r2, [pc, #468]	@ (80052d4 <HAL_RCC_OscConfig+0x240>)
 8005100:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005104:	6013      	str	r3, [r2, #0]
 8005106:	e01d      	b.n	8005144 <HAL_RCC_OscConfig+0xb0>
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	685b      	ldr	r3, [r3, #4]
 800510c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005110:	d10c      	bne.n	800512c <HAL_RCC_OscConfig+0x98>
 8005112:	4b70      	ldr	r3, [pc, #448]	@ (80052d4 <HAL_RCC_OscConfig+0x240>)
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	4a6f      	ldr	r2, [pc, #444]	@ (80052d4 <HAL_RCC_OscConfig+0x240>)
 8005118:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800511c:	6013      	str	r3, [r2, #0]
 800511e:	4b6d      	ldr	r3, [pc, #436]	@ (80052d4 <HAL_RCC_OscConfig+0x240>)
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	4a6c      	ldr	r2, [pc, #432]	@ (80052d4 <HAL_RCC_OscConfig+0x240>)
 8005124:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005128:	6013      	str	r3, [r2, #0]
 800512a:	e00b      	b.n	8005144 <HAL_RCC_OscConfig+0xb0>
 800512c:	4b69      	ldr	r3, [pc, #420]	@ (80052d4 <HAL_RCC_OscConfig+0x240>)
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	4a68      	ldr	r2, [pc, #416]	@ (80052d4 <HAL_RCC_OscConfig+0x240>)
 8005132:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005136:	6013      	str	r3, [r2, #0]
 8005138:	4b66      	ldr	r3, [pc, #408]	@ (80052d4 <HAL_RCC_OscConfig+0x240>)
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	4a65      	ldr	r2, [pc, #404]	@ (80052d4 <HAL_RCC_OscConfig+0x240>)
 800513e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005142:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	685b      	ldr	r3, [r3, #4]
 8005148:	2b00      	cmp	r3, #0
 800514a:	d013      	beq.n	8005174 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800514c:	f7fd f9c2 	bl	80024d4 <HAL_GetTick>
 8005150:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005152:	e008      	b.n	8005166 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005154:	f7fd f9be 	bl	80024d4 <HAL_GetTick>
 8005158:	4602      	mov	r2, r0
 800515a:	693b      	ldr	r3, [r7, #16]
 800515c:	1ad3      	subs	r3, r2, r3
 800515e:	2b64      	cmp	r3, #100	@ 0x64
 8005160:	d901      	bls.n	8005166 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005162:	2303      	movs	r3, #3
 8005164:	e207      	b.n	8005576 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005166:	4b5b      	ldr	r3, [pc, #364]	@ (80052d4 <HAL_RCC_OscConfig+0x240>)
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800516e:	2b00      	cmp	r3, #0
 8005170:	d0f0      	beq.n	8005154 <HAL_RCC_OscConfig+0xc0>
 8005172:	e014      	b.n	800519e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005174:	f7fd f9ae 	bl	80024d4 <HAL_GetTick>
 8005178:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800517a:	e008      	b.n	800518e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800517c:	f7fd f9aa 	bl	80024d4 <HAL_GetTick>
 8005180:	4602      	mov	r2, r0
 8005182:	693b      	ldr	r3, [r7, #16]
 8005184:	1ad3      	subs	r3, r2, r3
 8005186:	2b64      	cmp	r3, #100	@ 0x64
 8005188:	d901      	bls.n	800518e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800518a:	2303      	movs	r3, #3
 800518c:	e1f3      	b.n	8005576 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800518e:	4b51      	ldr	r3, [pc, #324]	@ (80052d4 <HAL_RCC_OscConfig+0x240>)
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005196:	2b00      	cmp	r3, #0
 8005198:	d1f0      	bne.n	800517c <HAL_RCC_OscConfig+0xe8>
 800519a:	e000      	b.n	800519e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800519c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f003 0302 	and.w	r3, r3, #2
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d063      	beq.n	8005272 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80051aa:	4b4a      	ldr	r3, [pc, #296]	@ (80052d4 <HAL_RCC_OscConfig+0x240>)
 80051ac:	689b      	ldr	r3, [r3, #8]
 80051ae:	f003 030c 	and.w	r3, r3, #12
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d00b      	beq.n	80051ce <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80051b6:	4b47      	ldr	r3, [pc, #284]	@ (80052d4 <HAL_RCC_OscConfig+0x240>)
 80051b8:	689b      	ldr	r3, [r3, #8]
 80051ba:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80051be:	2b08      	cmp	r3, #8
 80051c0:	d11c      	bne.n	80051fc <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80051c2:	4b44      	ldr	r3, [pc, #272]	@ (80052d4 <HAL_RCC_OscConfig+0x240>)
 80051c4:	685b      	ldr	r3, [r3, #4]
 80051c6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d116      	bne.n	80051fc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80051ce:	4b41      	ldr	r3, [pc, #260]	@ (80052d4 <HAL_RCC_OscConfig+0x240>)
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f003 0302 	and.w	r3, r3, #2
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d005      	beq.n	80051e6 <HAL_RCC_OscConfig+0x152>
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	68db      	ldr	r3, [r3, #12]
 80051de:	2b01      	cmp	r3, #1
 80051e0:	d001      	beq.n	80051e6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80051e2:	2301      	movs	r3, #1
 80051e4:	e1c7      	b.n	8005576 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80051e6:	4b3b      	ldr	r3, [pc, #236]	@ (80052d4 <HAL_RCC_OscConfig+0x240>)
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	691b      	ldr	r3, [r3, #16]
 80051f2:	00db      	lsls	r3, r3, #3
 80051f4:	4937      	ldr	r1, [pc, #220]	@ (80052d4 <HAL_RCC_OscConfig+0x240>)
 80051f6:	4313      	orrs	r3, r2
 80051f8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80051fa:	e03a      	b.n	8005272 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	68db      	ldr	r3, [r3, #12]
 8005200:	2b00      	cmp	r3, #0
 8005202:	d020      	beq.n	8005246 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005204:	4b34      	ldr	r3, [pc, #208]	@ (80052d8 <HAL_RCC_OscConfig+0x244>)
 8005206:	2201      	movs	r2, #1
 8005208:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800520a:	f7fd f963 	bl	80024d4 <HAL_GetTick>
 800520e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005210:	e008      	b.n	8005224 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005212:	f7fd f95f 	bl	80024d4 <HAL_GetTick>
 8005216:	4602      	mov	r2, r0
 8005218:	693b      	ldr	r3, [r7, #16]
 800521a:	1ad3      	subs	r3, r2, r3
 800521c:	2b02      	cmp	r3, #2
 800521e:	d901      	bls.n	8005224 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005220:	2303      	movs	r3, #3
 8005222:	e1a8      	b.n	8005576 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005224:	4b2b      	ldr	r3, [pc, #172]	@ (80052d4 <HAL_RCC_OscConfig+0x240>)
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f003 0302 	and.w	r3, r3, #2
 800522c:	2b00      	cmp	r3, #0
 800522e:	d0f0      	beq.n	8005212 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005230:	4b28      	ldr	r3, [pc, #160]	@ (80052d4 <HAL_RCC_OscConfig+0x240>)
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	691b      	ldr	r3, [r3, #16]
 800523c:	00db      	lsls	r3, r3, #3
 800523e:	4925      	ldr	r1, [pc, #148]	@ (80052d4 <HAL_RCC_OscConfig+0x240>)
 8005240:	4313      	orrs	r3, r2
 8005242:	600b      	str	r3, [r1, #0]
 8005244:	e015      	b.n	8005272 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005246:	4b24      	ldr	r3, [pc, #144]	@ (80052d8 <HAL_RCC_OscConfig+0x244>)
 8005248:	2200      	movs	r2, #0
 800524a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800524c:	f7fd f942 	bl	80024d4 <HAL_GetTick>
 8005250:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005252:	e008      	b.n	8005266 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005254:	f7fd f93e 	bl	80024d4 <HAL_GetTick>
 8005258:	4602      	mov	r2, r0
 800525a:	693b      	ldr	r3, [r7, #16]
 800525c:	1ad3      	subs	r3, r2, r3
 800525e:	2b02      	cmp	r3, #2
 8005260:	d901      	bls.n	8005266 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005262:	2303      	movs	r3, #3
 8005264:	e187      	b.n	8005576 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005266:	4b1b      	ldr	r3, [pc, #108]	@ (80052d4 <HAL_RCC_OscConfig+0x240>)
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f003 0302 	and.w	r3, r3, #2
 800526e:	2b00      	cmp	r3, #0
 8005270:	d1f0      	bne.n	8005254 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f003 0308 	and.w	r3, r3, #8
 800527a:	2b00      	cmp	r3, #0
 800527c:	d036      	beq.n	80052ec <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	695b      	ldr	r3, [r3, #20]
 8005282:	2b00      	cmp	r3, #0
 8005284:	d016      	beq.n	80052b4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005286:	4b15      	ldr	r3, [pc, #84]	@ (80052dc <HAL_RCC_OscConfig+0x248>)
 8005288:	2201      	movs	r2, #1
 800528a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800528c:	f7fd f922 	bl	80024d4 <HAL_GetTick>
 8005290:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005292:	e008      	b.n	80052a6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005294:	f7fd f91e 	bl	80024d4 <HAL_GetTick>
 8005298:	4602      	mov	r2, r0
 800529a:	693b      	ldr	r3, [r7, #16]
 800529c:	1ad3      	subs	r3, r2, r3
 800529e:	2b02      	cmp	r3, #2
 80052a0:	d901      	bls.n	80052a6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80052a2:	2303      	movs	r3, #3
 80052a4:	e167      	b.n	8005576 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80052a6:	4b0b      	ldr	r3, [pc, #44]	@ (80052d4 <HAL_RCC_OscConfig+0x240>)
 80052a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80052aa:	f003 0302 	and.w	r3, r3, #2
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d0f0      	beq.n	8005294 <HAL_RCC_OscConfig+0x200>
 80052b2:	e01b      	b.n	80052ec <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80052b4:	4b09      	ldr	r3, [pc, #36]	@ (80052dc <HAL_RCC_OscConfig+0x248>)
 80052b6:	2200      	movs	r2, #0
 80052b8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80052ba:	f7fd f90b 	bl	80024d4 <HAL_GetTick>
 80052be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80052c0:	e00e      	b.n	80052e0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80052c2:	f7fd f907 	bl	80024d4 <HAL_GetTick>
 80052c6:	4602      	mov	r2, r0
 80052c8:	693b      	ldr	r3, [r7, #16]
 80052ca:	1ad3      	subs	r3, r2, r3
 80052cc:	2b02      	cmp	r3, #2
 80052ce:	d907      	bls.n	80052e0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80052d0:	2303      	movs	r3, #3
 80052d2:	e150      	b.n	8005576 <HAL_RCC_OscConfig+0x4e2>
 80052d4:	40023800 	.word	0x40023800
 80052d8:	42470000 	.word	0x42470000
 80052dc:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80052e0:	4b88      	ldr	r3, [pc, #544]	@ (8005504 <HAL_RCC_OscConfig+0x470>)
 80052e2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80052e4:	f003 0302 	and.w	r3, r3, #2
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d1ea      	bne.n	80052c2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f003 0304 	and.w	r3, r3, #4
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	f000 8097 	beq.w	8005428 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80052fa:	2300      	movs	r3, #0
 80052fc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80052fe:	4b81      	ldr	r3, [pc, #516]	@ (8005504 <HAL_RCC_OscConfig+0x470>)
 8005300:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005302:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005306:	2b00      	cmp	r3, #0
 8005308:	d10f      	bne.n	800532a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800530a:	2300      	movs	r3, #0
 800530c:	60bb      	str	r3, [r7, #8]
 800530e:	4b7d      	ldr	r3, [pc, #500]	@ (8005504 <HAL_RCC_OscConfig+0x470>)
 8005310:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005312:	4a7c      	ldr	r2, [pc, #496]	@ (8005504 <HAL_RCC_OscConfig+0x470>)
 8005314:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005318:	6413      	str	r3, [r2, #64]	@ 0x40
 800531a:	4b7a      	ldr	r3, [pc, #488]	@ (8005504 <HAL_RCC_OscConfig+0x470>)
 800531c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800531e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005322:	60bb      	str	r3, [r7, #8]
 8005324:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005326:	2301      	movs	r3, #1
 8005328:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800532a:	4b77      	ldr	r3, [pc, #476]	@ (8005508 <HAL_RCC_OscConfig+0x474>)
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005332:	2b00      	cmp	r3, #0
 8005334:	d118      	bne.n	8005368 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005336:	4b74      	ldr	r3, [pc, #464]	@ (8005508 <HAL_RCC_OscConfig+0x474>)
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	4a73      	ldr	r2, [pc, #460]	@ (8005508 <HAL_RCC_OscConfig+0x474>)
 800533c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005340:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005342:	f7fd f8c7 	bl	80024d4 <HAL_GetTick>
 8005346:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005348:	e008      	b.n	800535c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800534a:	f7fd f8c3 	bl	80024d4 <HAL_GetTick>
 800534e:	4602      	mov	r2, r0
 8005350:	693b      	ldr	r3, [r7, #16]
 8005352:	1ad3      	subs	r3, r2, r3
 8005354:	2b02      	cmp	r3, #2
 8005356:	d901      	bls.n	800535c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005358:	2303      	movs	r3, #3
 800535a:	e10c      	b.n	8005576 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800535c:	4b6a      	ldr	r3, [pc, #424]	@ (8005508 <HAL_RCC_OscConfig+0x474>)
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005364:	2b00      	cmp	r3, #0
 8005366:	d0f0      	beq.n	800534a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	689b      	ldr	r3, [r3, #8]
 800536c:	2b01      	cmp	r3, #1
 800536e:	d106      	bne.n	800537e <HAL_RCC_OscConfig+0x2ea>
 8005370:	4b64      	ldr	r3, [pc, #400]	@ (8005504 <HAL_RCC_OscConfig+0x470>)
 8005372:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005374:	4a63      	ldr	r2, [pc, #396]	@ (8005504 <HAL_RCC_OscConfig+0x470>)
 8005376:	f043 0301 	orr.w	r3, r3, #1
 800537a:	6713      	str	r3, [r2, #112]	@ 0x70
 800537c:	e01c      	b.n	80053b8 <HAL_RCC_OscConfig+0x324>
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	689b      	ldr	r3, [r3, #8]
 8005382:	2b05      	cmp	r3, #5
 8005384:	d10c      	bne.n	80053a0 <HAL_RCC_OscConfig+0x30c>
 8005386:	4b5f      	ldr	r3, [pc, #380]	@ (8005504 <HAL_RCC_OscConfig+0x470>)
 8005388:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800538a:	4a5e      	ldr	r2, [pc, #376]	@ (8005504 <HAL_RCC_OscConfig+0x470>)
 800538c:	f043 0304 	orr.w	r3, r3, #4
 8005390:	6713      	str	r3, [r2, #112]	@ 0x70
 8005392:	4b5c      	ldr	r3, [pc, #368]	@ (8005504 <HAL_RCC_OscConfig+0x470>)
 8005394:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005396:	4a5b      	ldr	r2, [pc, #364]	@ (8005504 <HAL_RCC_OscConfig+0x470>)
 8005398:	f043 0301 	orr.w	r3, r3, #1
 800539c:	6713      	str	r3, [r2, #112]	@ 0x70
 800539e:	e00b      	b.n	80053b8 <HAL_RCC_OscConfig+0x324>
 80053a0:	4b58      	ldr	r3, [pc, #352]	@ (8005504 <HAL_RCC_OscConfig+0x470>)
 80053a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053a4:	4a57      	ldr	r2, [pc, #348]	@ (8005504 <HAL_RCC_OscConfig+0x470>)
 80053a6:	f023 0301 	bic.w	r3, r3, #1
 80053aa:	6713      	str	r3, [r2, #112]	@ 0x70
 80053ac:	4b55      	ldr	r3, [pc, #340]	@ (8005504 <HAL_RCC_OscConfig+0x470>)
 80053ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053b0:	4a54      	ldr	r2, [pc, #336]	@ (8005504 <HAL_RCC_OscConfig+0x470>)
 80053b2:	f023 0304 	bic.w	r3, r3, #4
 80053b6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	689b      	ldr	r3, [r3, #8]
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d015      	beq.n	80053ec <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053c0:	f7fd f888 	bl	80024d4 <HAL_GetTick>
 80053c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80053c6:	e00a      	b.n	80053de <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80053c8:	f7fd f884 	bl	80024d4 <HAL_GetTick>
 80053cc:	4602      	mov	r2, r0
 80053ce:	693b      	ldr	r3, [r7, #16]
 80053d0:	1ad3      	subs	r3, r2, r3
 80053d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80053d6:	4293      	cmp	r3, r2
 80053d8:	d901      	bls.n	80053de <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80053da:	2303      	movs	r3, #3
 80053dc:	e0cb      	b.n	8005576 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80053de:	4b49      	ldr	r3, [pc, #292]	@ (8005504 <HAL_RCC_OscConfig+0x470>)
 80053e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053e2:	f003 0302 	and.w	r3, r3, #2
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d0ee      	beq.n	80053c8 <HAL_RCC_OscConfig+0x334>
 80053ea:	e014      	b.n	8005416 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80053ec:	f7fd f872 	bl	80024d4 <HAL_GetTick>
 80053f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80053f2:	e00a      	b.n	800540a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80053f4:	f7fd f86e 	bl	80024d4 <HAL_GetTick>
 80053f8:	4602      	mov	r2, r0
 80053fa:	693b      	ldr	r3, [r7, #16]
 80053fc:	1ad3      	subs	r3, r2, r3
 80053fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005402:	4293      	cmp	r3, r2
 8005404:	d901      	bls.n	800540a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005406:	2303      	movs	r3, #3
 8005408:	e0b5      	b.n	8005576 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800540a:	4b3e      	ldr	r3, [pc, #248]	@ (8005504 <HAL_RCC_OscConfig+0x470>)
 800540c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800540e:	f003 0302 	and.w	r3, r3, #2
 8005412:	2b00      	cmp	r3, #0
 8005414:	d1ee      	bne.n	80053f4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005416:	7dfb      	ldrb	r3, [r7, #23]
 8005418:	2b01      	cmp	r3, #1
 800541a:	d105      	bne.n	8005428 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800541c:	4b39      	ldr	r3, [pc, #228]	@ (8005504 <HAL_RCC_OscConfig+0x470>)
 800541e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005420:	4a38      	ldr	r2, [pc, #224]	@ (8005504 <HAL_RCC_OscConfig+0x470>)
 8005422:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005426:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	699b      	ldr	r3, [r3, #24]
 800542c:	2b00      	cmp	r3, #0
 800542e:	f000 80a1 	beq.w	8005574 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005432:	4b34      	ldr	r3, [pc, #208]	@ (8005504 <HAL_RCC_OscConfig+0x470>)
 8005434:	689b      	ldr	r3, [r3, #8]
 8005436:	f003 030c 	and.w	r3, r3, #12
 800543a:	2b08      	cmp	r3, #8
 800543c:	d05c      	beq.n	80054f8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	699b      	ldr	r3, [r3, #24]
 8005442:	2b02      	cmp	r3, #2
 8005444:	d141      	bne.n	80054ca <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005446:	4b31      	ldr	r3, [pc, #196]	@ (800550c <HAL_RCC_OscConfig+0x478>)
 8005448:	2200      	movs	r2, #0
 800544a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800544c:	f7fd f842 	bl	80024d4 <HAL_GetTick>
 8005450:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005452:	e008      	b.n	8005466 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005454:	f7fd f83e 	bl	80024d4 <HAL_GetTick>
 8005458:	4602      	mov	r2, r0
 800545a:	693b      	ldr	r3, [r7, #16]
 800545c:	1ad3      	subs	r3, r2, r3
 800545e:	2b02      	cmp	r3, #2
 8005460:	d901      	bls.n	8005466 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005462:	2303      	movs	r3, #3
 8005464:	e087      	b.n	8005576 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005466:	4b27      	ldr	r3, [pc, #156]	@ (8005504 <HAL_RCC_OscConfig+0x470>)
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800546e:	2b00      	cmp	r3, #0
 8005470:	d1f0      	bne.n	8005454 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	69da      	ldr	r2, [r3, #28]
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	6a1b      	ldr	r3, [r3, #32]
 800547a:	431a      	orrs	r2, r3
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005480:	019b      	lsls	r3, r3, #6
 8005482:	431a      	orrs	r2, r3
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005488:	085b      	lsrs	r3, r3, #1
 800548a:	3b01      	subs	r3, #1
 800548c:	041b      	lsls	r3, r3, #16
 800548e:	431a      	orrs	r2, r3
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005494:	061b      	lsls	r3, r3, #24
 8005496:	491b      	ldr	r1, [pc, #108]	@ (8005504 <HAL_RCC_OscConfig+0x470>)
 8005498:	4313      	orrs	r3, r2
 800549a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800549c:	4b1b      	ldr	r3, [pc, #108]	@ (800550c <HAL_RCC_OscConfig+0x478>)
 800549e:	2201      	movs	r2, #1
 80054a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054a2:	f7fd f817 	bl	80024d4 <HAL_GetTick>
 80054a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80054a8:	e008      	b.n	80054bc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80054aa:	f7fd f813 	bl	80024d4 <HAL_GetTick>
 80054ae:	4602      	mov	r2, r0
 80054b0:	693b      	ldr	r3, [r7, #16]
 80054b2:	1ad3      	subs	r3, r2, r3
 80054b4:	2b02      	cmp	r3, #2
 80054b6:	d901      	bls.n	80054bc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80054b8:	2303      	movs	r3, #3
 80054ba:	e05c      	b.n	8005576 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80054bc:	4b11      	ldr	r3, [pc, #68]	@ (8005504 <HAL_RCC_OscConfig+0x470>)
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d0f0      	beq.n	80054aa <HAL_RCC_OscConfig+0x416>
 80054c8:	e054      	b.n	8005574 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80054ca:	4b10      	ldr	r3, [pc, #64]	@ (800550c <HAL_RCC_OscConfig+0x478>)
 80054cc:	2200      	movs	r2, #0
 80054ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054d0:	f7fd f800 	bl	80024d4 <HAL_GetTick>
 80054d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80054d6:	e008      	b.n	80054ea <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80054d8:	f7fc fffc 	bl	80024d4 <HAL_GetTick>
 80054dc:	4602      	mov	r2, r0
 80054de:	693b      	ldr	r3, [r7, #16]
 80054e0:	1ad3      	subs	r3, r2, r3
 80054e2:	2b02      	cmp	r3, #2
 80054e4:	d901      	bls.n	80054ea <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80054e6:	2303      	movs	r3, #3
 80054e8:	e045      	b.n	8005576 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80054ea:	4b06      	ldr	r3, [pc, #24]	@ (8005504 <HAL_RCC_OscConfig+0x470>)
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d1f0      	bne.n	80054d8 <HAL_RCC_OscConfig+0x444>
 80054f6:	e03d      	b.n	8005574 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	699b      	ldr	r3, [r3, #24]
 80054fc:	2b01      	cmp	r3, #1
 80054fe:	d107      	bne.n	8005510 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005500:	2301      	movs	r3, #1
 8005502:	e038      	b.n	8005576 <HAL_RCC_OscConfig+0x4e2>
 8005504:	40023800 	.word	0x40023800
 8005508:	40007000 	.word	0x40007000
 800550c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005510:	4b1b      	ldr	r3, [pc, #108]	@ (8005580 <HAL_RCC_OscConfig+0x4ec>)
 8005512:	685b      	ldr	r3, [r3, #4]
 8005514:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	699b      	ldr	r3, [r3, #24]
 800551a:	2b01      	cmp	r3, #1
 800551c:	d028      	beq.n	8005570 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005528:	429a      	cmp	r2, r3
 800552a:	d121      	bne.n	8005570 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005536:	429a      	cmp	r2, r3
 8005538:	d11a      	bne.n	8005570 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800553a:	68fa      	ldr	r2, [r7, #12]
 800553c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005540:	4013      	ands	r3, r2
 8005542:	687a      	ldr	r2, [r7, #4]
 8005544:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005546:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005548:	4293      	cmp	r3, r2
 800554a:	d111      	bne.n	8005570 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005556:	085b      	lsrs	r3, r3, #1
 8005558:	3b01      	subs	r3, #1
 800555a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800555c:	429a      	cmp	r2, r3
 800555e:	d107      	bne.n	8005570 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800556a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800556c:	429a      	cmp	r2, r3
 800556e:	d001      	beq.n	8005574 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8005570:	2301      	movs	r3, #1
 8005572:	e000      	b.n	8005576 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005574:	2300      	movs	r3, #0
}
 8005576:	4618      	mov	r0, r3
 8005578:	3718      	adds	r7, #24
 800557a:	46bd      	mov	sp, r7
 800557c:	bd80      	pop	{r7, pc}
 800557e:	bf00      	nop
 8005580:	40023800 	.word	0x40023800

08005584 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005584:	b580      	push	{r7, lr}
 8005586:	b084      	sub	sp, #16
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
 800558c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	2b00      	cmp	r3, #0
 8005592:	d101      	bne.n	8005598 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005594:	2301      	movs	r3, #1
 8005596:	e0cc      	b.n	8005732 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005598:	4b68      	ldr	r3, [pc, #416]	@ (800573c <HAL_RCC_ClockConfig+0x1b8>)
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f003 030f 	and.w	r3, r3, #15
 80055a0:	683a      	ldr	r2, [r7, #0]
 80055a2:	429a      	cmp	r2, r3
 80055a4:	d90c      	bls.n	80055c0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80055a6:	4b65      	ldr	r3, [pc, #404]	@ (800573c <HAL_RCC_ClockConfig+0x1b8>)
 80055a8:	683a      	ldr	r2, [r7, #0]
 80055aa:	b2d2      	uxtb	r2, r2
 80055ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80055ae:	4b63      	ldr	r3, [pc, #396]	@ (800573c <HAL_RCC_ClockConfig+0x1b8>)
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f003 030f 	and.w	r3, r3, #15
 80055b6:	683a      	ldr	r2, [r7, #0]
 80055b8:	429a      	cmp	r2, r3
 80055ba:	d001      	beq.n	80055c0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80055bc:	2301      	movs	r3, #1
 80055be:	e0b8      	b.n	8005732 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f003 0302 	and.w	r3, r3, #2
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d020      	beq.n	800560e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f003 0304 	and.w	r3, r3, #4
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d005      	beq.n	80055e4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80055d8:	4b59      	ldr	r3, [pc, #356]	@ (8005740 <HAL_RCC_ClockConfig+0x1bc>)
 80055da:	689b      	ldr	r3, [r3, #8]
 80055dc:	4a58      	ldr	r2, [pc, #352]	@ (8005740 <HAL_RCC_ClockConfig+0x1bc>)
 80055de:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80055e2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f003 0308 	and.w	r3, r3, #8
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d005      	beq.n	80055fc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80055f0:	4b53      	ldr	r3, [pc, #332]	@ (8005740 <HAL_RCC_ClockConfig+0x1bc>)
 80055f2:	689b      	ldr	r3, [r3, #8]
 80055f4:	4a52      	ldr	r2, [pc, #328]	@ (8005740 <HAL_RCC_ClockConfig+0x1bc>)
 80055f6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80055fa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80055fc:	4b50      	ldr	r3, [pc, #320]	@ (8005740 <HAL_RCC_ClockConfig+0x1bc>)
 80055fe:	689b      	ldr	r3, [r3, #8]
 8005600:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	689b      	ldr	r3, [r3, #8]
 8005608:	494d      	ldr	r1, [pc, #308]	@ (8005740 <HAL_RCC_ClockConfig+0x1bc>)
 800560a:	4313      	orrs	r3, r2
 800560c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f003 0301 	and.w	r3, r3, #1
 8005616:	2b00      	cmp	r3, #0
 8005618:	d044      	beq.n	80056a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	685b      	ldr	r3, [r3, #4]
 800561e:	2b01      	cmp	r3, #1
 8005620:	d107      	bne.n	8005632 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005622:	4b47      	ldr	r3, [pc, #284]	@ (8005740 <HAL_RCC_ClockConfig+0x1bc>)
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800562a:	2b00      	cmp	r3, #0
 800562c:	d119      	bne.n	8005662 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800562e:	2301      	movs	r3, #1
 8005630:	e07f      	b.n	8005732 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	685b      	ldr	r3, [r3, #4]
 8005636:	2b02      	cmp	r3, #2
 8005638:	d003      	beq.n	8005642 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800563e:	2b03      	cmp	r3, #3
 8005640:	d107      	bne.n	8005652 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005642:	4b3f      	ldr	r3, [pc, #252]	@ (8005740 <HAL_RCC_ClockConfig+0x1bc>)
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800564a:	2b00      	cmp	r3, #0
 800564c:	d109      	bne.n	8005662 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800564e:	2301      	movs	r3, #1
 8005650:	e06f      	b.n	8005732 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005652:	4b3b      	ldr	r3, [pc, #236]	@ (8005740 <HAL_RCC_ClockConfig+0x1bc>)
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f003 0302 	and.w	r3, r3, #2
 800565a:	2b00      	cmp	r3, #0
 800565c:	d101      	bne.n	8005662 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800565e:	2301      	movs	r3, #1
 8005660:	e067      	b.n	8005732 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005662:	4b37      	ldr	r3, [pc, #220]	@ (8005740 <HAL_RCC_ClockConfig+0x1bc>)
 8005664:	689b      	ldr	r3, [r3, #8]
 8005666:	f023 0203 	bic.w	r2, r3, #3
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	685b      	ldr	r3, [r3, #4]
 800566e:	4934      	ldr	r1, [pc, #208]	@ (8005740 <HAL_RCC_ClockConfig+0x1bc>)
 8005670:	4313      	orrs	r3, r2
 8005672:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005674:	f7fc ff2e 	bl	80024d4 <HAL_GetTick>
 8005678:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800567a:	e00a      	b.n	8005692 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800567c:	f7fc ff2a 	bl	80024d4 <HAL_GetTick>
 8005680:	4602      	mov	r2, r0
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	1ad3      	subs	r3, r2, r3
 8005686:	f241 3288 	movw	r2, #5000	@ 0x1388
 800568a:	4293      	cmp	r3, r2
 800568c:	d901      	bls.n	8005692 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800568e:	2303      	movs	r3, #3
 8005690:	e04f      	b.n	8005732 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005692:	4b2b      	ldr	r3, [pc, #172]	@ (8005740 <HAL_RCC_ClockConfig+0x1bc>)
 8005694:	689b      	ldr	r3, [r3, #8]
 8005696:	f003 020c 	and.w	r2, r3, #12
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	685b      	ldr	r3, [r3, #4]
 800569e:	009b      	lsls	r3, r3, #2
 80056a0:	429a      	cmp	r2, r3
 80056a2:	d1eb      	bne.n	800567c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80056a4:	4b25      	ldr	r3, [pc, #148]	@ (800573c <HAL_RCC_ClockConfig+0x1b8>)
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f003 030f 	and.w	r3, r3, #15
 80056ac:	683a      	ldr	r2, [r7, #0]
 80056ae:	429a      	cmp	r2, r3
 80056b0:	d20c      	bcs.n	80056cc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80056b2:	4b22      	ldr	r3, [pc, #136]	@ (800573c <HAL_RCC_ClockConfig+0x1b8>)
 80056b4:	683a      	ldr	r2, [r7, #0]
 80056b6:	b2d2      	uxtb	r2, r2
 80056b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80056ba:	4b20      	ldr	r3, [pc, #128]	@ (800573c <HAL_RCC_ClockConfig+0x1b8>)
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f003 030f 	and.w	r3, r3, #15
 80056c2:	683a      	ldr	r2, [r7, #0]
 80056c4:	429a      	cmp	r2, r3
 80056c6:	d001      	beq.n	80056cc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80056c8:	2301      	movs	r3, #1
 80056ca:	e032      	b.n	8005732 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f003 0304 	and.w	r3, r3, #4
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d008      	beq.n	80056ea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80056d8:	4b19      	ldr	r3, [pc, #100]	@ (8005740 <HAL_RCC_ClockConfig+0x1bc>)
 80056da:	689b      	ldr	r3, [r3, #8]
 80056dc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	68db      	ldr	r3, [r3, #12]
 80056e4:	4916      	ldr	r1, [pc, #88]	@ (8005740 <HAL_RCC_ClockConfig+0x1bc>)
 80056e6:	4313      	orrs	r3, r2
 80056e8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f003 0308 	and.w	r3, r3, #8
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d009      	beq.n	800570a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80056f6:	4b12      	ldr	r3, [pc, #72]	@ (8005740 <HAL_RCC_ClockConfig+0x1bc>)
 80056f8:	689b      	ldr	r3, [r3, #8]
 80056fa:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	691b      	ldr	r3, [r3, #16]
 8005702:	00db      	lsls	r3, r3, #3
 8005704:	490e      	ldr	r1, [pc, #56]	@ (8005740 <HAL_RCC_ClockConfig+0x1bc>)
 8005706:	4313      	orrs	r3, r2
 8005708:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800570a:	f000 f821 	bl	8005750 <HAL_RCC_GetSysClockFreq>
 800570e:	4602      	mov	r2, r0
 8005710:	4b0b      	ldr	r3, [pc, #44]	@ (8005740 <HAL_RCC_ClockConfig+0x1bc>)
 8005712:	689b      	ldr	r3, [r3, #8]
 8005714:	091b      	lsrs	r3, r3, #4
 8005716:	f003 030f 	and.w	r3, r3, #15
 800571a:	490a      	ldr	r1, [pc, #40]	@ (8005744 <HAL_RCC_ClockConfig+0x1c0>)
 800571c:	5ccb      	ldrb	r3, [r1, r3]
 800571e:	fa22 f303 	lsr.w	r3, r2, r3
 8005722:	4a09      	ldr	r2, [pc, #36]	@ (8005748 <HAL_RCC_ClockConfig+0x1c4>)
 8005724:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8005726:	4b09      	ldr	r3, [pc, #36]	@ (800574c <HAL_RCC_ClockConfig+0x1c8>)
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	4618      	mov	r0, r3
 800572c:	f7fc fe8e 	bl	800244c <HAL_InitTick>

  return HAL_OK;
 8005730:	2300      	movs	r3, #0
}
 8005732:	4618      	mov	r0, r3
 8005734:	3710      	adds	r7, #16
 8005736:	46bd      	mov	sp, r7
 8005738:	bd80      	pop	{r7, pc}
 800573a:	bf00      	nop
 800573c:	40023c00 	.word	0x40023c00
 8005740:	40023800 	.word	0x40023800
 8005744:	0800cc24 	.word	0x0800cc24
 8005748:	20000004 	.word	0x20000004
 800574c:	20000008 	.word	0x20000008

08005750 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005750:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005754:	b094      	sub	sp, #80	@ 0x50
 8005756:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005758:	2300      	movs	r3, #0
 800575a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 800575c:	2300      	movs	r3, #0
 800575e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8005760:	2300      	movs	r3, #0
 8005762:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8005764:	2300      	movs	r3, #0
 8005766:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005768:	4b79      	ldr	r3, [pc, #484]	@ (8005950 <HAL_RCC_GetSysClockFreq+0x200>)
 800576a:	689b      	ldr	r3, [r3, #8]
 800576c:	f003 030c 	and.w	r3, r3, #12
 8005770:	2b08      	cmp	r3, #8
 8005772:	d00d      	beq.n	8005790 <HAL_RCC_GetSysClockFreq+0x40>
 8005774:	2b08      	cmp	r3, #8
 8005776:	f200 80e1 	bhi.w	800593c <HAL_RCC_GetSysClockFreq+0x1ec>
 800577a:	2b00      	cmp	r3, #0
 800577c:	d002      	beq.n	8005784 <HAL_RCC_GetSysClockFreq+0x34>
 800577e:	2b04      	cmp	r3, #4
 8005780:	d003      	beq.n	800578a <HAL_RCC_GetSysClockFreq+0x3a>
 8005782:	e0db      	b.n	800593c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005784:	4b73      	ldr	r3, [pc, #460]	@ (8005954 <HAL_RCC_GetSysClockFreq+0x204>)
 8005786:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005788:	e0db      	b.n	8005942 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800578a:	4b73      	ldr	r3, [pc, #460]	@ (8005958 <HAL_RCC_GetSysClockFreq+0x208>)
 800578c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800578e:	e0d8      	b.n	8005942 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005790:	4b6f      	ldr	r3, [pc, #444]	@ (8005950 <HAL_RCC_GetSysClockFreq+0x200>)
 8005792:	685b      	ldr	r3, [r3, #4]
 8005794:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005798:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800579a:	4b6d      	ldr	r3, [pc, #436]	@ (8005950 <HAL_RCC_GetSysClockFreq+0x200>)
 800579c:	685b      	ldr	r3, [r3, #4]
 800579e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d063      	beq.n	800586e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80057a6:	4b6a      	ldr	r3, [pc, #424]	@ (8005950 <HAL_RCC_GetSysClockFreq+0x200>)
 80057a8:	685b      	ldr	r3, [r3, #4]
 80057aa:	099b      	lsrs	r3, r3, #6
 80057ac:	2200      	movs	r2, #0
 80057ae:	63bb      	str	r3, [r7, #56]	@ 0x38
 80057b0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80057b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80057b8:	633b      	str	r3, [r7, #48]	@ 0x30
 80057ba:	2300      	movs	r3, #0
 80057bc:	637b      	str	r3, [r7, #52]	@ 0x34
 80057be:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80057c2:	4622      	mov	r2, r4
 80057c4:	462b      	mov	r3, r5
 80057c6:	f04f 0000 	mov.w	r0, #0
 80057ca:	f04f 0100 	mov.w	r1, #0
 80057ce:	0159      	lsls	r1, r3, #5
 80057d0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80057d4:	0150      	lsls	r0, r2, #5
 80057d6:	4602      	mov	r2, r0
 80057d8:	460b      	mov	r3, r1
 80057da:	4621      	mov	r1, r4
 80057dc:	1a51      	subs	r1, r2, r1
 80057de:	6139      	str	r1, [r7, #16]
 80057e0:	4629      	mov	r1, r5
 80057e2:	eb63 0301 	sbc.w	r3, r3, r1
 80057e6:	617b      	str	r3, [r7, #20]
 80057e8:	f04f 0200 	mov.w	r2, #0
 80057ec:	f04f 0300 	mov.w	r3, #0
 80057f0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80057f4:	4659      	mov	r1, fp
 80057f6:	018b      	lsls	r3, r1, #6
 80057f8:	4651      	mov	r1, sl
 80057fa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80057fe:	4651      	mov	r1, sl
 8005800:	018a      	lsls	r2, r1, #6
 8005802:	4651      	mov	r1, sl
 8005804:	ebb2 0801 	subs.w	r8, r2, r1
 8005808:	4659      	mov	r1, fp
 800580a:	eb63 0901 	sbc.w	r9, r3, r1
 800580e:	f04f 0200 	mov.w	r2, #0
 8005812:	f04f 0300 	mov.w	r3, #0
 8005816:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800581a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800581e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005822:	4690      	mov	r8, r2
 8005824:	4699      	mov	r9, r3
 8005826:	4623      	mov	r3, r4
 8005828:	eb18 0303 	adds.w	r3, r8, r3
 800582c:	60bb      	str	r3, [r7, #8]
 800582e:	462b      	mov	r3, r5
 8005830:	eb49 0303 	adc.w	r3, r9, r3
 8005834:	60fb      	str	r3, [r7, #12]
 8005836:	f04f 0200 	mov.w	r2, #0
 800583a:	f04f 0300 	mov.w	r3, #0
 800583e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005842:	4629      	mov	r1, r5
 8005844:	024b      	lsls	r3, r1, #9
 8005846:	4621      	mov	r1, r4
 8005848:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800584c:	4621      	mov	r1, r4
 800584e:	024a      	lsls	r2, r1, #9
 8005850:	4610      	mov	r0, r2
 8005852:	4619      	mov	r1, r3
 8005854:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005856:	2200      	movs	r2, #0
 8005858:	62bb      	str	r3, [r7, #40]	@ 0x28
 800585a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800585c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005860:	f7fb fa02 	bl	8000c68 <__aeabi_uldivmod>
 8005864:	4602      	mov	r2, r0
 8005866:	460b      	mov	r3, r1
 8005868:	4613      	mov	r3, r2
 800586a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800586c:	e058      	b.n	8005920 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800586e:	4b38      	ldr	r3, [pc, #224]	@ (8005950 <HAL_RCC_GetSysClockFreq+0x200>)
 8005870:	685b      	ldr	r3, [r3, #4]
 8005872:	099b      	lsrs	r3, r3, #6
 8005874:	2200      	movs	r2, #0
 8005876:	4618      	mov	r0, r3
 8005878:	4611      	mov	r1, r2
 800587a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800587e:	623b      	str	r3, [r7, #32]
 8005880:	2300      	movs	r3, #0
 8005882:	627b      	str	r3, [r7, #36]	@ 0x24
 8005884:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005888:	4642      	mov	r2, r8
 800588a:	464b      	mov	r3, r9
 800588c:	f04f 0000 	mov.w	r0, #0
 8005890:	f04f 0100 	mov.w	r1, #0
 8005894:	0159      	lsls	r1, r3, #5
 8005896:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800589a:	0150      	lsls	r0, r2, #5
 800589c:	4602      	mov	r2, r0
 800589e:	460b      	mov	r3, r1
 80058a0:	4641      	mov	r1, r8
 80058a2:	ebb2 0a01 	subs.w	sl, r2, r1
 80058a6:	4649      	mov	r1, r9
 80058a8:	eb63 0b01 	sbc.w	fp, r3, r1
 80058ac:	f04f 0200 	mov.w	r2, #0
 80058b0:	f04f 0300 	mov.w	r3, #0
 80058b4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80058b8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80058bc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80058c0:	ebb2 040a 	subs.w	r4, r2, sl
 80058c4:	eb63 050b 	sbc.w	r5, r3, fp
 80058c8:	f04f 0200 	mov.w	r2, #0
 80058cc:	f04f 0300 	mov.w	r3, #0
 80058d0:	00eb      	lsls	r3, r5, #3
 80058d2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80058d6:	00e2      	lsls	r2, r4, #3
 80058d8:	4614      	mov	r4, r2
 80058da:	461d      	mov	r5, r3
 80058dc:	4643      	mov	r3, r8
 80058de:	18e3      	adds	r3, r4, r3
 80058e0:	603b      	str	r3, [r7, #0]
 80058e2:	464b      	mov	r3, r9
 80058e4:	eb45 0303 	adc.w	r3, r5, r3
 80058e8:	607b      	str	r3, [r7, #4]
 80058ea:	f04f 0200 	mov.w	r2, #0
 80058ee:	f04f 0300 	mov.w	r3, #0
 80058f2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80058f6:	4629      	mov	r1, r5
 80058f8:	028b      	lsls	r3, r1, #10
 80058fa:	4621      	mov	r1, r4
 80058fc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005900:	4621      	mov	r1, r4
 8005902:	028a      	lsls	r2, r1, #10
 8005904:	4610      	mov	r0, r2
 8005906:	4619      	mov	r1, r3
 8005908:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800590a:	2200      	movs	r2, #0
 800590c:	61bb      	str	r3, [r7, #24]
 800590e:	61fa      	str	r2, [r7, #28]
 8005910:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005914:	f7fb f9a8 	bl	8000c68 <__aeabi_uldivmod>
 8005918:	4602      	mov	r2, r0
 800591a:	460b      	mov	r3, r1
 800591c:	4613      	mov	r3, r2
 800591e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005920:	4b0b      	ldr	r3, [pc, #44]	@ (8005950 <HAL_RCC_GetSysClockFreq+0x200>)
 8005922:	685b      	ldr	r3, [r3, #4]
 8005924:	0c1b      	lsrs	r3, r3, #16
 8005926:	f003 0303 	and.w	r3, r3, #3
 800592a:	3301      	adds	r3, #1
 800592c:	005b      	lsls	r3, r3, #1
 800592e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8005930:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005932:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005934:	fbb2 f3f3 	udiv	r3, r2, r3
 8005938:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800593a:	e002      	b.n	8005942 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800593c:	4b05      	ldr	r3, [pc, #20]	@ (8005954 <HAL_RCC_GetSysClockFreq+0x204>)
 800593e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005940:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005942:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8005944:	4618      	mov	r0, r3
 8005946:	3750      	adds	r7, #80	@ 0x50
 8005948:	46bd      	mov	sp, r7
 800594a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800594e:	bf00      	nop
 8005950:	40023800 	.word	0x40023800
 8005954:	00f42400 	.word	0x00f42400
 8005958:	007a1200 	.word	0x007a1200

0800595c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800595c:	b480      	push	{r7}
 800595e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005960:	4b03      	ldr	r3, [pc, #12]	@ (8005970 <HAL_RCC_GetHCLKFreq+0x14>)
 8005962:	681b      	ldr	r3, [r3, #0]
}
 8005964:	4618      	mov	r0, r3
 8005966:	46bd      	mov	sp, r7
 8005968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596c:	4770      	bx	lr
 800596e:	bf00      	nop
 8005970:	20000004 	.word	0x20000004

08005974 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005974:	b580      	push	{r7, lr}
 8005976:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005978:	f7ff fff0 	bl	800595c <HAL_RCC_GetHCLKFreq>
 800597c:	4602      	mov	r2, r0
 800597e:	4b05      	ldr	r3, [pc, #20]	@ (8005994 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005980:	689b      	ldr	r3, [r3, #8]
 8005982:	0a9b      	lsrs	r3, r3, #10
 8005984:	f003 0307 	and.w	r3, r3, #7
 8005988:	4903      	ldr	r1, [pc, #12]	@ (8005998 <HAL_RCC_GetPCLK1Freq+0x24>)
 800598a:	5ccb      	ldrb	r3, [r1, r3]
 800598c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005990:	4618      	mov	r0, r3
 8005992:	bd80      	pop	{r7, pc}
 8005994:	40023800 	.word	0x40023800
 8005998:	0800cc34 	.word	0x0800cc34

0800599c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800599c:	b580      	push	{r7, lr}
 800599e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80059a0:	f7ff ffdc 	bl	800595c <HAL_RCC_GetHCLKFreq>
 80059a4:	4602      	mov	r2, r0
 80059a6:	4b05      	ldr	r3, [pc, #20]	@ (80059bc <HAL_RCC_GetPCLK2Freq+0x20>)
 80059a8:	689b      	ldr	r3, [r3, #8]
 80059aa:	0b5b      	lsrs	r3, r3, #13
 80059ac:	f003 0307 	and.w	r3, r3, #7
 80059b0:	4903      	ldr	r1, [pc, #12]	@ (80059c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80059b2:	5ccb      	ldrb	r3, [r1, r3]
 80059b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80059b8:	4618      	mov	r0, r3
 80059ba:	bd80      	pop	{r7, pc}
 80059bc:	40023800 	.word	0x40023800
 80059c0:	0800cc34 	.word	0x0800cc34

080059c4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80059c4:	b580      	push	{r7, lr}
 80059c6:	b082      	sub	sp, #8
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d101      	bne.n	80059d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80059d2:	2301      	movs	r3, #1
 80059d4:	e042      	b.n	8005a5c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80059dc:	b2db      	uxtb	r3, r3
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d106      	bne.n	80059f0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	2200      	movs	r2, #0
 80059e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80059ea:	6878      	ldr	r0, [r7, #4]
 80059ec:	f7fc fb88 	bl	8002100 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2224      	movs	r2, #36	@ 0x24
 80059f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	68da      	ldr	r2, [r3, #12]
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005a06:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005a08:	6878      	ldr	r0, [r7, #4]
 8005a0a:	f000 f973 	bl	8005cf4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	691a      	ldr	r2, [r3, #16]
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005a1c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	695a      	ldr	r2, [r3, #20]
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005a2c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	68da      	ldr	r2, [r3, #12]
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005a3c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	2200      	movs	r2, #0
 8005a42:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2220      	movs	r2, #32
 8005a48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2220      	movs	r2, #32
 8005a50:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2200      	movs	r2, #0
 8005a58:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005a5a:	2300      	movs	r3, #0
}
 8005a5c:	4618      	mov	r0, r3
 8005a5e:	3708      	adds	r7, #8
 8005a60:	46bd      	mov	sp, r7
 8005a62:	bd80      	pop	{r7, pc}

08005a64 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a64:	b580      	push	{r7, lr}
 8005a66:	b08a      	sub	sp, #40	@ 0x28
 8005a68:	af02      	add	r7, sp, #8
 8005a6a:	60f8      	str	r0, [r7, #12]
 8005a6c:	60b9      	str	r1, [r7, #8]
 8005a6e:	603b      	str	r3, [r7, #0]
 8005a70:	4613      	mov	r3, r2
 8005a72:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005a74:	2300      	movs	r3, #0
 8005a76:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005a7e:	b2db      	uxtb	r3, r3
 8005a80:	2b20      	cmp	r3, #32
 8005a82:	d175      	bne.n	8005b70 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005a84:	68bb      	ldr	r3, [r7, #8]
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d002      	beq.n	8005a90 <HAL_UART_Transmit+0x2c>
 8005a8a:	88fb      	ldrh	r3, [r7, #6]
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d101      	bne.n	8005a94 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005a90:	2301      	movs	r3, #1
 8005a92:	e06e      	b.n	8005b72 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	2200      	movs	r2, #0
 8005a98:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	2221      	movs	r2, #33	@ 0x21
 8005a9e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005aa2:	f7fc fd17 	bl	80024d4 <HAL_GetTick>
 8005aa6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	88fa      	ldrh	r2, [r7, #6]
 8005aac:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	88fa      	ldrh	r2, [r7, #6]
 8005ab2:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	689b      	ldr	r3, [r3, #8]
 8005ab8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005abc:	d108      	bne.n	8005ad0 <HAL_UART_Transmit+0x6c>
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	691b      	ldr	r3, [r3, #16]
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d104      	bne.n	8005ad0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005ac6:	2300      	movs	r3, #0
 8005ac8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005aca:	68bb      	ldr	r3, [r7, #8]
 8005acc:	61bb      	str	r3, [r7, #24]
 8005ace:	e003      	b.n	8005ad8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005ad0:	68bb      	ldr	r3, [r7, #8]
 8005ad2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005ad4:	2300      	movs	r3, #0
 8005ad6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005ad8:	e02e      	b.n	8005b38 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005ada:	683b      	ldr	r3, [r7, #0]
 8005adc:	9300      	str	r3, [sp, #0]
 8005ade:	697b      	ldr	r3, [r7, #20]
 8005ae0:	2200      	movs	r2, #0
 8005ae2:	2180      	movs	r1, #128	@ 0x80
 8005ae4:	68f8      	ldr	r0, [r7, #12]
 8005ae6:	f000 f848 	bl	8005b7a <UART_WaitOnFlagUntilTimeout>
 8005aea:	4603      	mov	r3, r0
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d005      	beq.n	8005afc <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	2220      	movs	r2, #32
 8005af4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8005af8:	2303      	movs	r3, #3
 8005afa:	e03a      	b.n	8005b72 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005afc:	69fb      	ldr	r3, [r7, #28]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d10b      	bne.n	8005b1a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005b02:	69bb      	ldr	r3, [r7, #24]
 8005b04:	881b      	ldrh	r3, [r3, #0]
 8005b06:	461a      	mov	r2, r3
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005b10:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005b12:	69bb      	ldr	r3, [r7, #24]
 8005b14:	3302      	adds	r3, #2
 8005b16:	61bb      	str	r3, [r7, #24]
 8005b18:	e007      	b.n	8005b2a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005b1a:	69fb      	ldr	r3, [r7, #28]
 8005b1c:	781a      	ldrb	r2, [r3, #0]
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005b24:	69fb      	ldr	r3, [r7, #28]
 8005b26:	3301      	adds	r3, #1
 8005b28:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005b2e:	b29b      	uxth	r3, r3
 8005b30:	3b01      	subs	r3, #1
 8005b32:	b29a      	uxth	r2, r3
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005b3c:	b29b      	uxth	r3, r3
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d1cb      	bne.n	8005ada <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005b42:	683b      	ldr	r3, [r7, #0]
 8005b44:	9300      	str	r3, [sp, #0]
 8005b46:	697b      	ldr	r3, [r7, #20]
 8005b48:	2200      	movs	r2, #0
 8005b4a:	2140      	movs	r1, #64	@ 0x40
 8005b4c:	68f8      	ldr	r0, [r7, #12]
 8005b4e:	f000 f814 	bl	8005b7a <UART_WaitOnFlagUntilTimeout>
 8005b52:	4603      	mov	r3, r0
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d005      	beq.n	8005b64 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	2220      	movs	r2, #32
 8005b5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8005b60:	2303      	movs	r3, #3
 8005b62:	e006      	b.n	8005b72 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	2220      	movs	r2, #32
 8005b68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005b6c:	2300      	movs	r3, #0
 8005b6e:	e000      	b.n	8005b72 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005b70:	2302      	movs	r3, #2
  }
}
 8005b72:	4618      	mov	r0, r3
 8005b74:	3720      	adds	r7, #32
 8005b76:	46bd      	mov	sp, r7
 8005b78:	bd80      	pop	{r7, pc}

08005b7a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005b7a:	b580      	push	{r7, lr}
 8005b7c:	b086      	sub	sp, #24
 8005b7e:	af00      	add	r7, sp, #0
 8005b80:	60f8      	str	r0, [r7, #12]
 8005b82:	60b9      	str	r1, [r7, #8]
 8005b84:	603b      	str	r3, [r7, #0]
 8005b86:	4613      	mov	r3, r2
 8005b88:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b8a:	e03b      	b.n	8005c04 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b8c:	6a3b      	ldr	r3, [r7, #32]
 8005b8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b92:	d037      	beq.n	8005c04 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b94:	f7fc fc9e 	bl	80024d4 <HAL_GetTick>
 8005b98:	4602      	mov	r2, r0
 8005b9a:	683b      	ldr	r3, [r7, #0]
 8005b9c:	1ad3      	subs	r3, r2, r3
 8005b9e:	6a3a      	ldr	r2, [r7, #32]
 8005ba0:	429a      	cmp	r2, r3
 8005ba2:	d302      	bcc.n	8005baa <UART_WaitOnFlagUntilTimeout+0x30>
 8005ba4:	6a3b      	ldr	r3, [r7, #32]
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d101      	bne.n	8005bae <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005baa:	2303      	movs	r3, #3
 8005bac:	e03a      	b.n	8005c24 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	68db      	ldr	r3, [r3, #12]
 8005bb4:	f003 0304 	and.w	r3, r3, #4
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d023      	beq.n	8005c04 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005bbc:	68bb      	ldr	r3, [r7, #8]
 8005bbe:	2b80      	cmp	r3, #128	@ 0x80
 8005bc0:	d020      	beq.n	8005c04 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005bc2:	68bb      	ldr	r3, [r7, #8]
 8005bc4:	2b40      	cmp	r3, #64	@ 0x40
 8005bc6:	d01d      	beq.n	8005c04 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	f003 0308 	and.w	r3, r3, #8
 8005bd2:	2b08      	cmp	r3, #8
 8005bd4:	d116      	bne.n	8005c04 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005bd6:	2300      	movs	r3, #0
 8005bd8:	617b      	str	r3, [r7, #20]
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	617b      	str	r3, [r7, #20]
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	685b      	ldr	r3, [r3, #4]
 8005be8:	617b      	str	r3, [r7, #20]
 8005bea:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005bec:	68f8      	ldr	r0, [r7, #12]
 8005bee:	f000 f81d 	bl	8005c2c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	2208      	movs	r2, #8
 8005bf6:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	2200      	movs	r2, #0
 8005bfc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005c00:	2301      	movs	r3, #1
 8005c02:	e00f      	b.n	8005c24 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	681a      	ldr	r2, [r3, #0]
 8005c0a:	68bb      	ldr	r3, [r7, #8]
 8005c0c:	4013      	ands	r3, r2
 8005c0e:	68ba      	ldr	r2, [r7, #8]
 8005c10:	429a      	cmp	r2, r3
 8005c12:	bf0c      	ite	eq
 8005c14:	2301      	moveq	r3, #1
 8005c16:	2300      	movne	r3, #0
 8005c18:	b2db      	uxtb	r3, r3
 8005c1a:	461a      	mov	r2, r3
 8005c1c:	79fb      	ldrb	r3, [r7, #7]
 8005c1e:	429a      	cmp	r2, r3
 8005c20:	d0b4      	beq.n	8005b8c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005c22:	2300      	movs	r3, #0
}
 8005c24:	4618      	mov	r0, r3
 8005c26:	3718      	adds	r7, #24
 8005c28:	46bd      	mov	sp, r7
 8005c2a:	bd80      	pop	{r7, pc}

08005c2c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005c2c:	b480      	push	{r7}
 8005c2e:	b095      	sub	sp, #84	@ 0x54
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	330c      	adds	r3, #12
 8005c3a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c3e:	e853 3f00 	ldrex	r3, [r3]
 8005c42:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005c44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c46:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005c4a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	330c      	adds	r3, #12
 8005c52:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005c54:	643a      	str	r2, [r7, #64]	@ 0x40
 8005c56:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c58:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005c5a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005c5c:	e841 2300 	strex	r3, r2, [r1]
 8005c60:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005c62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d1e5      	bne.n	8005c34 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	3314      	adds	r3, #20
 8005c6e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c70:	6a3b      	ldr	r3, [r7, #32]
 8005c72:	e853 3f00 	ldrex	r3, [r3]
 8005c76:	61fb      	str	r3, [r7, #28]
   return(result);
 8005c78:	69fb      	ldr	r3, [r7, #28]
 8005c7a:	f023 0301 	bic.w	r3, r3, #1
 8005c7e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	3314      	adds	r3, #20
 8005c86:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005c88:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005c8a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c8c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005c8e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005c90:	e841 2300 	strex	r3, r2, [r1]
 8005c94:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005c96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d1e5      	bne.n	8005c68 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ca0:	2b01      	cmp	r3, #1
 8005ca2:	d119      	bne.n	8005cd8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	330c      	adds	r3, #12
 8005caa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	e853 3f00 	ldrex	r3, [r3]
 8005cb2:	60bb      	str	r3, [r7, #8]
   return(result);
 8005cb4:	68bb      	ldr	r3, [r7, #8]
 8005cb6:	f023 0310 	bic.w	r3, r3, #16
 8005cba:	647b      	str	r3, [r7, #68]	@ 0x44
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	330c      	adds	r3, #12
 8005cc2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005cc4:	61ba      	str	r2, [r7, #24]
 8005cc6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cc8:	6979      	ldr	r1, [r7, #20]
 8005cca:	69ba      	ldr	r2, [r7, #24]
 8005ccc:	e841 2300 	strex	r3, r2, [r1]
 8005cd0:	613b      	str	r3, [r7, #16]
   return(result);
 8005cd2:	693b      	ldr	r3, [r7, #16]
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d1e5      	bne.n	8005ca4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	2220      	movs	r2, #32
 8005cdc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	2200      	movs	r2, #0
 8005ce4:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005ce6:	bf00      	nop
 8005ce8:	3754      	adds	r7, #84	@ 0x54
 8005cea:	46bd      	mov	sp, r7
 8005cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf0:	4770      	bx	lr
	...

08005cf4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005cf4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005cf8:	b0c0      	sub	sp, #256	@ 0x100
 8005cfa:	af00      	add	r7, sp, #0
 8005cfc:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005d00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	691b      	ldr	r3, [r3, #16]
 8005d08:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005d0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d10:	68d9      	ldr	r1, [r3, #12]
 8005d12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d16:	681a      	ldr	r2, [r3, #0]
 8005d18:	ea40 0301 	orr.w	r3, r0, r1
 8005d1c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005d1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d22:	689a      	ldr	r2, [r3, #8]
 8005d24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d28:	691b      	ldr	r3, [r3, #16]
 8005d2a:	431a      	orrs	r2, r3
 8005d2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d30:	695b      	ldr	r3, [r3, #20]
 8005d32:	431a      	orrs	r2, r3
 8005d34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d38:	69db      	ldr	r3, [r3, #28]
 8005d3a:	4313      	orrs	r3, r2
 8005d3c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005d40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	68db      	ldr	r3, [r3, #12]
 8005d48:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005d4c:	f021 010c 	bic.w	r1, r1, #12
 8005d50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d54:	681a      	ldr	r2, [r3, #0]
 8005d56:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005d5a:	430b      	orrs	r3, r1
 8005d5c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005d5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	695b      	ldr	r3, [r3, #20]
 8005d66:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005d6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d6e:	6999      	ldr	r1, [r3, #24]
 8005d70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d74:	681a      	ldr	r2, [r3, #0]
 8005d76:	ea40 0301 	orr.w	r3, r0, r1
 8005d7a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005d7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d80:	681a      	ldr	r2, [r3, #0]
 8005d82:	4b8f      	ldr	r3, [pc, #572]	@ (8005fc0 <UART_SetConfig+0x2cc>)
 8005d84:	429a      	cmp	r2, r3
 8005d86:	d005      	beq.n	8005d94 <UART_SetConfig+0xa0>
 8005d88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d8c:	681a      	ldr	r2, [r3, #0]
 8005d8e:	4b8d      	ldr	r3, [pc, #564]	@ (8005fc4 <UART_SetConfig+0x2d0>)
 8005d90:	429a      	cmp	r2, r3
 8005d92:	d104      	bne.n	8005d9e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005d94:	f7ff fe02 	bl	800599c <HAL_RCC_GetPCLK2Freq>
 8005d98:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005d9c:	e003      	b.n	8005da6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005d9e:	f7ff fde9 	bl	8005974 <HAL_RCC_GetPCLK1Freq>
 8005da2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005da6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005daa:	69db      	ldr	r3, [r3, #28]
 8005dac:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005db0:	f040 810c 	bne.w	8005fcc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005db4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005db8:	2200      	movs	r2, #0
 8005dba:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005dbe:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005dc2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005dc6:	4622      	mov	r2, r4
 8005dc8:	462b      	mov	r3, r5
 8005dca:	1891      	adds	r1, r2, r2
 8005dcc:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005dce:	415b      	adcs	r3, r3
 8005dd0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005dd2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005dd6:	4621      	mov	r1, r4
 8005dd8:	eb12 0801 	adds.w	r8, r2, r1
 8005ddc:	4629      	mov	r1, r5
 8005dde:	eb43 0901 	adc.w	r9, r3, r1
 8005de2:	f04f 0200 	mov.w	r2, #0
 8005de6:	f04f 0300 	mov.w	r3, #0
 8005dea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005dee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005df2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005df6:	4690      	mov	r8, r2
 8005df8:	4699      	mov	r9, r3
 8005dfa:	4623      	mov	r3, r4
 8005dfc:	eb18 0303 	adds.w	r3, r8, r3
 8005e00:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005e04:	462b      	mov	r3, r5
 8005e06:	eb49 0303 	adc.w	r3, r9, r3
 8005e0a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005e0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e12:	685b      	ldr	r3, [r3, #4]
 8005e14:	2200      	movs	r2, #0
 8005e16:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005e1a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005e1e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005e22:	460b      	mov	r3, r1
 8005e24:	18db      	adds	r3, r3, r3
 8005e26:	653b      	str	r3, [r7, #80]	@ 0x50
 8005e28:	4613      	mov	r3, r2
 8005e2a:	eb42 0303 	adc.w	r3, r2, r3
 8005e2e:	657b      	str	r3, [r7, #84]	@ 0x54
 8005e30:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005e34:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005e38:	f7fa ff16 	bl	8000c68 <__aeabi_uldivmod>
 8005e3c:	4602      	mov	r2, r0
 8005e3e:	460b      	mov	r3, r1
 8005e40:	4b61      	ldr	r3, [pc, #388]	@ (8005fc8 <UART_SetConfig+0x2d4>)
 8005e42:	fba3 2302 	umull	r2, r3, r3, r2
 8005e46:	095b      	lsrs	r3, r3, #5
 8005e48:	011c      	lsls	r4, r3, #4
 8005e4a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005e4e:	2200      	movs	r2, #0
 8005e50:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005e54:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005e58:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005e5c:	4642      	mov	r2, r8
 8005e5e:	464b      	mov	r3, r9
 8005e60:	1891      	adds	r1, r2, r2
 8005e62:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005e64:	415b      	adcs	r3, r3
 8005e66:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005e68:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005e6c:	4641      	mov	r1, r8
 8005e6e:	eb12 0a01 	adds.w	sl, r2, r1
 8005e72:	4649      	mov	r1, r9
 8005e74:	eb43 0b01 	adc.w	fp, r3, r1
 8005e78:	f04f 0200 	mov.w	r2, #0
 8005e7c:	f04f 0300 	mov.w	r3, #0
 8005e80:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005e84:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005e88:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005e8c:	4692      	mov	sl, r2
 8005e8e:	469b      	mov	fp, r3
 8005e90:	4643      	mov	r3, r8
 8005e92:	eb1a 0303 	adds.w	r3, sl, r3
 8005e96:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005e9a:	464b      	mov	r3, r9
 8005e9c:	eb4b 0303 	adc.w	r3, fp, r3
 8005ea0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005ea4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ea8:	685b      	ldr	r3, [r3, #4]
 8005eaa:	2200      	movs	r2, #0
 8005eac:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005eb0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005eb4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005eb8:	460b      	mov	r3, r1
 8005eba:	18db      	adds	r3, r3, r3
 8005ebc:	643b      	str	r3, [r7, #64]	@ 0x40
 8005ebe:	4613      	mov	r3, r2
 8005ec0:	eb42 0303 	adc.w	r3, r2, r3
 8005ec4:	647b      	str	r3, [r7, #68]	@ 0x44
 8005ec6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005eca:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005ece:	f7fa fecb 	bl	8000c68 <__aeabi_uldivmod>
 8005ed2:	4602      	mov	r2, r0
 8005ed4:	460b      	mov	r3, r1
 8005ed6:	4611      	mov	r1, r2
 8005ed8:	4b3b      	ldr	r3, [pc, #236]	@ (8005fc8 <UART_SetConfig+0x2d4>)
 8005eda:	fba3 2301 	umull	r2, r3, r3, r1
 8005ede:	095b      	lsrs	r3, r3, #5
 8005ee0:	2264      	movs	r2, #100	@ 0x64
 8005ee2:	fb02 f303 	mul.w	r3, r2, r3
 8005ee6:	1acb      	subs	r3, r1, r3
 8005ee8:	00db      	lsls	r3, r3, #3
 8005eea:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005eee:	4b36      	ldr	r3, [pc, #216]	@ (8005fc8 <UART_SetConfig+0x2d4>)
 8005ef0:	fba3 2302 	umull	r2, r3, r3, r2
 8005ef4:	095b      	lsrs	r3, r3, #5
 8005ef6:	005b      	lsls	r3, r3, #1
 8005ef8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005efc:	441c      	add	r4, r3
 8005efe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005f02:	2200      	movs	r2, #0
 8005f04:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005f08:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005f0c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005f10:	4642      	mov	r2, r8
 8005f12:	464b      	mov	r3, r9
 8005f14:	1891      	adds	r1, r2, r2
 8005f16:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005f18:	415b      	adcs	r3, r3
 8005f1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005f1c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005f20:	4641      	mov	r1, r8
 8005f22:	1851      	adds	r1, r2, r1
 8005f24:	6339      	str	r1, [r7, #48]	@ 0x30
 8005f26:	4649      	mov	r1, r9
 8005f28:	414b      	adcs	r3, r1
 8005f2a:	637b      	str	r3, [r7, #52]	@ 0x34
 8005f2c:	f04f 0200 	mov.w	r2, #0
 8005f30:	f04f 0300 	mov.w	r3, #0
 8005f34:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005f38:	4659      	mov	r1, fp
 8005f3a:	00cb      	lsls	r3, r1, #3
 8005f3c:	4651      	mov	r1, sl
 8005f3e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005f42:	4651      	mov	r1, sl
 8005f44:	00ca      	lsls	r2, r1, #3
 8005f46:	4610      	mov	r0, r2
 8005f48:	4619      	mov	r1, r3
 8005f4a:	4603      	mov	r3, r0
 8005f4c:	4642      	mov	r2, r8
 8005f4e:	189b      	adds	r3, r3, r2
 8005f50:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005f54:	464b      	mov	r3, r9
 8005f56:	460a      	mov	r2, r1
 8005f58:	eb42 0303 	adc.w	r3, r2, r3
 8005f5c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005f60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f64:	685b      	ldr	r3, [r3, #4]
 8005f66:	2200      	movs	r2, #0
 8005f68:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005f6c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005f70:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005f74:	460b      	mov	r3, r1
 8005f76:	18db      	adds	r3, r3, r3
 8005f78:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005f7a:	4613      	mov	r3, r2
 8005f7c:	eb42 0303 	adc.w	r3, r2, r3
 8005f80:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005f82:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005f86:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005f8a:	f7fa fe6d 	bl	8000c68 <__aeabi_uldivmod>
 8005f8e:	4602      	mov	r2, r0
 8005f90:	460b      	mov	r3, r1
 8005f92:	4b0d      	ldr	r3, [pc, #52]	@ (8005fc8 <UART_SetConfig+0x2d4>)
 8005f94:	fba3 1302 	umull	r1, r3, r3, r2
 8005f98:	095b      	lsrs	r3, r3, #5
 8005f9a:	2164      	movs	r1, #100	@ 0x64
 8005f9c:	fb01 f303 	mul.w	r3, r1, r3
 8005fa0:	1ad3      	subs	r3, r2, r3
 8005fa2:	00db      	lsls	r3, r3, #3
 8005fa4:	3332      	adds	r3, #50	@ 0x32
 8005fa6:	4a08      	ldr	r2, [pc, #32]	@ (8005fc8 <UART_SetConfig+0x2d4>)
 8005fa8:	fba2 2303 	umull	r2, r3, r2, r3
 8005fac:	095b      	lsrs	r3, r3, #5
 8005fae:	f003 0207 	and.w	r2, r3, #7
 8005fb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	4422      	add	r2, r4
 8005fba:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005fbc:	e106      	b.n	80061cc <UART_SetConfig+0x4d8>
 8005fbe:	bf00      	nop
 8005fc0:	40011000 	.word	0x40011000
 8005fc4:	40011400 	.word	0x40011400
 8005fc8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005fcc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005fd0:	2200      	movs	r2, #0
 8005fd2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005fd6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005fda:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005fde:	4642      	mov	r2, r8
 8005fe0:	464b      	mov	r3, r9
 8005fe2:	1891      	adds	r1, r2, r2
 8005fe4:	6239      	str	r1, [r7, #32]
 8005fe6:	415b      	adcs	r3, r3
 8005fe8:	627b      	str	r3, [r7, #36]	@ 0x24
 8005fea:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005fee:	4641      	mov	r1, r8
 8005ff0:	1854      	adds	r4, r2, r1
 8005ff2:	4649      	mov	r1, r9
 8005ff4:	eb43 0501 	adc.w	r5, r3, r1
 8005ff8:	f04f 0200 	mov.w	r2, #0
 8005ffc:	f04f 0300 	mov.w	r3, #0
 8006000:	00eb      	lsls	r3, r5, #3
 8006002:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006006:	00e2      	lsls	r2, r4, #3
 8006008:	4614      	mov	r4, r2
 800600a:	461d      	mov	r5, r3
 800600c:	4643      	mov	r3, r8
 800600e:	18e3      	adds	r3, r4, r3
 8006010:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006014:	464b      	mov	r3, r9
 8006016:	eb45 0303 	adc.w	r3, r5, r3
 800601a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800601e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006022:	685b      	ldr	r3, [r3, #4]
 8006024:	2200      	movs	r2, #0
 8006026:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800602a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800602e:	f04f 0200 	mov.w	r2, #0
 8006032:	f04f 0300 	mov.w	r3, #0
 8006036:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800603a:	4629      	mov	r1, r5
 800603c:	008b      	lsls	r3, r1, #2
 800603e:	4621      	mov	r1, r4
 8006040:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006044:	4621      	mov	r1, r4
 8006046:	008a      	lsls	r2, r1, #2
 8006048:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800604c:	f7fa fe0c 	bl	8000c68 <__aeabi_uldivmod>
 8006050:	4602      	mov	r2, r0
 8006052:	460b      	mov	r3, r1
 8006054:	4b60      	ldr	r3, [pc, #384]	@ (80061d8 <UART_SetConfig+0x4e4>)
 8006056:	fba3 2302 	umull	r2, r3, r3, r2
 800605a:	095b      	lsrs	r3, r3, #5
 800605c:	011c      	lsls	r4, r3, #4
 800605e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006062:	2200      	movs	r2, #0
 8006064:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006068:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800606c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8006070:	4642      	mov	r2, r8
 8006072:	464b      	mov	r3, r9
 8006074:	1891      	adds	r1, r2, r2
 8006076:	61b9      	str	r1, [r7, #24]
 8006078:	415b      	adcs	r3, r3
 800607a:	61fb      	str	r3, [r7, #28]
 800607c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006080:	4641      	mov	r1, r8
 8006082:	1851      	adds	r1, r2, r1
 8006084:	6139      	str	r1, [r7, #16]
 8006086:	4649      	mov	r1, r9
 8006088:	414b      	adcs	r3, r1
 800608a:	617b      	str	r3, [r7, #20]
 800608c:	f04f 0200 	mov.w	r2, #0
 8006090:	f04f 0300 	mov.w	r3, #0
 8006094:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006098:	4659      	mov	r1, fp
 800609a:	00cb      	lsls	r3, r1, #3
 800609c:	4651      	mov	r1, sl
 800609e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80060a2:	4651      	mov	r1, sl
 80060a4:	00ca      	lsls	r2, r1, #3
 80060a6:	4610      	mov	r0, r2
 80060a8:	4619      	mov	r1, r3
 80060aa:	4603      	mov	r3, r0
 80060ac:	4642      	mov	r2, r8
 80060ae:	189b      	adds	r3, r3, r2
 80060b0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80060b4:	464b      	mov	r3, r9
 80060b6:	460a      	mov	r2, r1
 80060b8:	eb42 0303 	adc.w	r3, r2, r3
 80060bc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80060c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060c4:	685b      	ldr	r3, [r3, #4]
 80060c6:	2200      	movs	r2, #0
 80060c8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80060ca:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80060cc:	f04f 0200 	mov.w	r2, #0
 80060d0:	f04f 0300 	mov.w	r3, #0
 80060d4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80060d8:	4649      	mov	r1, r9
 80060da:	008b      	lsls	r3, r1, #2
 80060dc:	4641      	mov	r1, r8
 80060de:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80060e2:	4641      	mov	r1, r8
 80060e4:	008a      	lsls	r2, r1, #2
 80060e6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80060ea:	f7fa fdbd 	bl	8000c68 <__aeabi_uldivmod>
 80060ee:	4602      	mov	r2, r0
 80060f0:	460b      	mov	r3, r1
 80060f2:	4611      	mov	r1, r2
 80060f4:	4b38      	ldr	r3, [pc, #224]	@ (80061d8 <UART_SetConfig+0x4e4>)
 80060f6:	fba3 2301 	umull	r2, r3, r3, r1
 80060fa:	095b      	lsrs	r3, r3, #5
 80060fc:	2264      	movs	r2, #100	@ 0x64
 80060fe:	fb02 f303 	mul.w	r3, r2, r3
 8006102:	1acb      	subs	r3, r1, r3
 8006104:	011b      	lsls	r3, r3, #4
 8006106:	3332      	adds	r3, #50	@ 0x32
 8006108:	4a33      	ldr	r2, [pc, #204]	@ (80061d8 <UART_SetConfig+0x4e4>)
 800610a:	fba2 2303 	umull	r2, r3, r2, r3
 800610e:	095b      	lsrs	r3, r3, #5
 8006110:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006114:	441c      	add	r4, r3
 8006116:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800611a:	2200      	movs	r2, #0
 800611c:	673b      	str	r3, [r7, #112]	@ 0x70
 800611e:	677a      	str	r2, [r7, #116]	@ 0x74
 8006120:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006124:	4642      	mov	r2, r8
 8006126:	464b      	mov	r3, r9
 8006128:	1891      	adds	r1, r2, r2
 800612a:	60b9      	str	r1, [r7, #8]
 800612c:	415b      	adcs	r3, r3
 800612e:	60fb      	str	r3, [r7, #12]
 8006130:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006134:	4641      	mov	r1, r8
 8006136:	1851      	adds	r1, r2, r1
 8006138:	6039      	str	r1, [r7, #0]
 800613a:	4649      	mov	r1, r9
 800613c:	414b      	adcs	r3, r1
 800613e:	607b      	str	r3, [r7, #4]
 8006140:	f04f 0200 	mov.w	r2, #0
 8006144:	f04f 0300 	mov.w	r3, #0
 8006148:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800614c:	4659      	mov	r1, fp
 800614e:	00cb      	lsls	r3, r1, #3
 8006150:	4651      	mov	r1, sl
 8006152:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006156:	4651      	mov	r1, sl
 8006158:	00ca      	lsls	r2, r1, #3
 800615a:	4610      	mov	r0, r2
 800615c:	4619      	mov	r1, r3
 800615e:	4603      	mov	r3, r0
 8006160:	4642      	mov	r2, r8
 8006162:	189b      	adds	r3, r3, r2
 8006164:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006166:	464b      	mov	r3, r9
 8006168:	460a      	mov	r2, r1
 800616a:	eb42 0303 	adc.w	r3, r2, r3
 800616e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006170:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006174:	685b      	ldr	r3, [r3, #4]
 8006176:	2200      	movs	r2, #0
 8006178:	663b      	str	r3, [r7, #96]	@ 0x60
 800617a:	667a      	str	r2, [r7, #100]	@ 0x64
 800617c:	f04f 0200 	mov.w	r2, #0
 8006180:	f04f 0300 	mov.w	r3, #0
 8006184:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006188:	4649      	mov	r1, r9
 800618a:	008b      	lsls	r3, r1, #2
 800618c:	4641      	mov	r1, r8
 800618e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006192:	4641      	mov	r1, r8
 8006194:	008a      	lsls	r2, r1, #2
 8006196:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800619a:	f7fa fd65 	bl	8000c68 <__aeabi_uldivmod>
 800619e:	4602      	mov	r2, r0
 80061a0:	460b      	mov	r3, r1
 80061a2:	4b0d      	ldr	r3, [pc, #52]	@ (80061d8 <UART_SetConfig+0x4e4>)
 80061a4:	fba3 1302 	umull	r1, r3, r3, r2
 80061a8:	095b      	lsrs	r3, r3, #5
 80061aa:	2164      	movs	r1, #100	@ 0x64
 80061ac:	fb01 f303 	mul.w	r3, r1, r3
 80061b0:	1ad3      	subs	r3, r2, r3
 80061b2:	011b      	lsls	r3, r3, #4
 80061b4:	3332      	adds	r3, #50	@ 0x32
 80061b6:	4a08      	ldr	r2, [pc, #32]	@ (80061d8 <UART_SetConfig+0x4e4>)
 80061b8:	fba2 2303 	umull	r2, r3, r2, r3
 80061bc:	095b      	lsrs	r3, r3, #5
 80061be:	f003 020f 	and.w	r2, r3, #15
 80061c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	4422      	add	r2, r4
 80061ca:	609a      	str	r2, [r3, #8]
}
 80061cc:	bf00      	nop
 80061ce:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80061d2:	46bd      	mov	sp, r7
 80061d4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80061d8:	51eb851f 	.word	0x51eb851f

080061dc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80061dc:	b084      	sub	sp, #16
 80061de:	b580      	push	{r7, lr}
 80061e0:	b084      	sub	sp, #16
 80061e2:	af00      	add	r7, sp, #0
 80061e4:	6078      	str	r0, [r7, #4]
 80061e6:	f107 001c 	add.w	r0, r7, #28
 80061ea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80061ee:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80061f2:	2b01      	cmp	r3, #1
 80061f4:	d123      	bne.n	800623e <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061fa:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	68db      	ldr	r3, [r3, #12]
 8006206:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800620a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800620e:	687a      	ldr	r2, [r7, #4]
 8006210:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	68db      	ldr	r3, [r3, #12]
 8006216:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800621e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006222:	2b01      	cmp	r3, #1
 8006224:	d105      	bne.n	8006232 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	68db      	ldr	r3, [r3, #12]
 800622a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006232:	6878      	ldr	r0, [r7, #4]
 8006234:	f001 fae8 	bl	8007808 <USB_CoreReset>
 8006238:	4603      	mov	r3, r0
 800623a:	73fb      	strb	r3, [r7, #15]
 800623c:	e01b      	b.n	8006276 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	68db      	ldr	r3, [r3, #12]
 8006242:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800624a:	6878      	ldr	r0, [r7, #4]
 800624c:	f001 fadc 	bl	8007808 <USB_CoreReset>
 8006250:	4603      	mov	r3, r0
 8006252:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006254:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006258:	2b00      	cmp	r3, #0
 800625a:	d106      	bne.n	800626a <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006260:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	639a      	str	r2, [r3, #56]	@ 0x38
 8006268:	e005      	b.n	8006276 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800626e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006276:	7fbb      	ldrb	r3, [r7, #30]
 8006278:	2b01      	cmp	r3, #1
 800627a:	d10b      	bne.n	8006294 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	689b      	ldr	r3, [r3, #8]
 8006280:	f043 0206 	orr.w	r2, r3, #6
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	689b      	ldr	r3, [r3, #8]
 800628c:	f043 0220 	orr.w	r2, r3, #32
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006294:	7bfb      	ldrb	r3, [r7, #15]
}
 8006296:	4618      	mov	r0, r3
 8006298:	3710      	adds	r7, #16
 800629a:	46bd      	mov	sp, r7
 800629c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80062a0:	b004      	add	sp, #16
 80062a2:	4770      	bx	lr

080062a4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80062a4:	b480      	push	{r7}
 80062a6:	b087      	sub	sp, #28
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	60f8      	str	r0, [r7, #12]
 80062ac:	60b9      	str	r1, [r7, #8]
 80062ae:	4613      	mov	r3, r2
 80062b0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80062b2:	79fb      	ldrb	r3, [r7, #7]
 80062b4:	2b02      	cmp	r3, #2
 80062b6:	d165      	bne.n	8006384 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80062b8:	68bb      	ldr	r3, [r7, #8]
 80062ba:	4a41      	ldr	r2, [pc, #260]	@ (80063c0 <USB_SetTurnaroundTime+0x11c>)
 80062bc:	4293      	cmp	r3, r2
 80062be:	d906      	bls.n	80062ce <USB_SetTurnaroundTime+0x2a>
 80062c0:	68bb      	ldr	r3, [r7, #8]
 80062c2:	4a40      	ldr	r2, [pc, #256]	@ (80063c4 <USB_SetTurnaroundTime+0x120>)
 80062c4:	4293      	cmp	r3, r2
 80062c6:	d202      	bcs.n	80062ce <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80062c8:	230f      	movs	r3, #15
 80062ca:	617b      	str	r3, [r7, #20]
 80062cc:	e062      	b.n	8006394 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80062ce:	68bb      	ldr	r3, [r7, #8]
 80062d0:	4a3c      	ldr	r2, [pc, #240]	@ (80063c4 <USB_SetTurnaroundTime+0x120>)
 80062d2:	4293      	cmp	r3, r2
 80062d4:	d306      	bcc.n	80062e4 <USB_SetTurnaroundTime+0x40>
 80062d6:	68bb      	ldr	r3, [r7, #8]
 80062d8:	4a3b      	ldr	r2, [pc, #236]	@ (80063c8 <USB_SetTurnaroundTime+0x124>)
 80062da:	4293      	cmp	r3, r2
 80062dc:	d202      	bcs.n	80062e4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80062de:	230e      	movs	r3, #14
 80062e0:	617b      	str	r3, [r7, #20]
 80062e2:	e057      	b.n	8006394 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80062e4:	68bb      	ldr	r3, [r7, #8]
 80062e6:	4a38      	ldr	r2, [pc, #224]	@ (80063c8 <USB_SetTurnaroundTime+0x124>)
 80062e8:	4293      	cmp	r3, r2
 80062ea:	d306      	bcc.n	80062fa <USB_SetTurnaroundTime+0x56>
 80062ec:	68bb      	ldr	r3, [r7, #8]
 80062ee:	4a37      	ldr	r2, [pc, #220]	@ (80063cc <USB_SetTurnaroundTime+0x128>)
 80062f0:	4293      	cmp	r3, r2
 80062f2:	d202      	bcs.n	80062fa <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80062f4:	230d      	movs	r3, #13
 80062f6:	617b      	str	r3, [r7, #20]
 80062f8:	e04c      	b.n	8006394 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80062fa:	68bb      	ldr	r3, [r7, #8]
 80062fc:	4a33      	ldr	r2, [pc, #204]	@ (80063cc <USB_SetTurnaroundTime+0x128>)
 80062fe:	4293      	cmp	r3, r2
 8006300:	d306      	bcc.n	8006310 <USB_SetTurnaroundTime+0x6c>
 8006302:	68bb      	ldr	r3, [r7, #8]
 8006304:	4a32      	ldr	r2, [pc, #200]	@ (80063d0 <USB_SetTurnaroundTime+0x12c>)
 8006306:	4293      	cmp	r3, r2
 8006308:	d802      	bhi.n	8006310 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800630a:	230c      	movs	r3, #12
 800630c:	617b      	str	r3, [r7, #20]
 800630e:	e041      	b.n	8006394 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8006310:	68bb      	ldr	r3, [r7, #8]
 8006312:	4a2f      	ldr	r2, [pc, #188]	@ (80063d0 <USB_SetTurnaroundTime+0x12c>)
 8006314:	4293      	cmp	r3, r2
 8006316:	d906      	bls.n	8006326 <USB_SetTurnaroundTime+0x82>
 8006318:	68bb      	ldr	r3, [r7, #8]
 800631a:	4a2e      	ldr	r2, [pc, #184]	@ (80063d4 <USB_SetTurnaroundTime+0x130>)
 800631c:	4293      	cmp	r3, r2
 800631e:	d802      	bhi.n	8006326 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8006320:	230b      	movs	r3, #11
 8006322:	617b      	str	r3, [r7, #20]
 8006324:	e036      	b.n	8006394 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8006326:	68bb      	ldr	r3, [r7, #8]
 8006328:	4a2a      	ldr	r2, [pc, #168]	@ (80063d4 <USB_SetTurnaroundTime+0x130>)
 800632a:	4293      	cmp	r3, r2
 800632c:	d906      	bls.n	800633c <USB_SetTurnaroundTime+0x98>
 800632e:	68bb      	ldr	r3, [r7, #8]
 8006330:	4a29      	ldr	r2, [pc, #164]	@ (80063d8 <USB_SetTurnaroundTime+0x134>)
 8006332:	4293      	cmp	r3, r2
 8006334:	d802      	bhi.n	800633c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8006336:	230a      	movs	r3, #10
 8006338:	617b      	str	r3, [r7, #20]
 800633a:	e02b      	b.n	8006394 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800633c:	68bb      	ldr	r3, [r7, #8]
 800633e:	4a26      	ldr	r2, [pc, #152]	@ (80063d8 <USB_SetTurnaroundTime+0x134>)
 8006340:	4293      	cmp	r3, r2
 8006342:	d906      	bls.n	8006352 <USB_SetTurnaroundTime+0xae>
 8006344:	68bb      	ldr	r3, [r7, #8]
 8006346:	4a25      	ldr	r2, [pc, #148]	@ (80063dc <USB_SetTurnaroundTime+0x138>)
 8006348:	4293      	cmp	r3, r2
 800634a:	d202      	bcs.n	8006352 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800634c:	2309      	movs	r3, #9
 800634e:	617b      	str	r3, [r7, #20]
 8006350:	e020      	b.n	8006394 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8006352:	68bb      	ldr	r3, [r7, #8]
 8006354:	4a21      	ldr	r2, [pc, #132]	@ (80063dc <USB_SetTurnaroundTime+0x138>)
 8006356:	4293      	cmp	r3, r2
 8006358:	d306      	bcc.n	8006368 <USB_SetTurnaroundTime+0xc4>
 800635a:	68bb      	ldr	r3, [r7, #8]
 800635c:	4a20      	ldr	r2, [pc, #128]	@ (80063e0 <USB_SetTurnaroundTime+0x13c>)
 800635e:	4293      	cmp	r3, r2
 8006360:	d802      	bhi.n	8006368 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8006362:	2308      	movs	r3, #8
 8006364:	617b      	str	r3, [r7, #20]
 8006366:	e015      	b.n	8006394 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8006368:	68bb      	ldr	r3, [r7, #8]
 800636a:	4a1d      	ldr	r2, [pc, #116]	@ (80063e0 <USB_SetTurnaroundTime+0x13c>)
 800636c:	4293      	cmp	r3, r2
 800636e:	d906      	bls.n	800637e <USB_SetTurnaroundTime+0xda>
 8006370:	68bb      	ldr	r3, [r7, #8]
 8006372:	4a1c      	ldr	r2, [pc, #112]	@ (80063e4 <USB_SetTurnaroundTime+0x140>)
 8006374:	4293      	cmp	r3, r2
 8006376:	d202      	bcs.n	800637e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8006378:	2307      	movs	r3, #7
 800637a:	617b      	str	r3, [r7, #20]
 800637c:	e00a      	b.n	8006394 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800637e:	2306      	movs	r3, #6
 8006380:	617b      	str	r3, [r7, #20]
 8006382:	e007      	b.n	8006394 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8006384:	79fb      	ldrb	r3, [r7, #7]
 8006386:	2b00      	cmp	r3, #0
 8006388:	d102      	bne.n	8006390 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800638a:	2309      	movs	r3, #9
 800638c:	617b      	str	r3, [r7, #20]
 800638e:	e001      	b.n	8006394 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8006390:	2309      	movs	r3, #9
 8006392:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	68db      	ldr	r3, [r3, #12]
 8006398:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	68da      	ldr	r2, [r3, #12]
 80063a4:	697b      	ldr	r3, [r7, #20]
 80063a6:	029b      	lsls	r3, r3, #10
 80063a8:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 80063ac:	431a      	orrs	r2, r3
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80063b2:	2300      	movs	r3, #0
}
 80063b4:	4618      	mov	r0, r3
 80063b6:	371c      	adds	r7, #28
 80063b8:	46bd      	mov	sp, r7
 80063ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063be:	4770      	bx	lr
 80063c0:	00d8acbf 	.word	0x00d8acbf
 80063c4:	00e4e1c0 	.word	0x00e4e1c0
 80063c8:	00f42400 	.word	0x00f42400
 80063cc:	01067380 	.word	0x01067380
 80063d0:	011a499f 	.word	0x011a499f
 80063d4:	01312cff 	.word	0x01312cff
 80063d8:	014ca43f 	.word	0x014ca43f
 80063dc:	016e3600 	.word	0x016e3600
 80063e0:	01a6ab1f 	.word	0x01a6ab1f
 80063e4:	01e84800 	.word	0x01e84800

080063e8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80063e8:	b480      	push	{r7}
 80063ea:	b083      	sub	sp, #12
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	689b      	ldr	r3, [r3, #8]
 80063f4:	f043 0201 	orr.w	r2, r3, #1
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80063fc:	2300      	movs	r3, #0
}
 80063fe:	4618      	mov	r0, r3
 8006400:	370c      	adds	r7, #12
 8006402:	46bd      	mov	sp, r7
 8006404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006408:	4770      	bx	lr

0800640a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800640a:	b480      	push	{r7}
 800640c:	b083      	sub	sp, #12
 800640e:	af00      	add	r7, sp, #0
 8006410:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	689b      	ldr	r3, [r3, #8]
 8006416:	f023 0201 	bic.w	r2, r3, #1
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800641e:	2300      	movs	r3, #0
}
 8006420:	4618      	mov	r0, r3
 8006422:	370c      	adds	r7, #12
 8006424:	46bd      	mov	sp, r7
 8006426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642a:	4770      	bx	lr

0800642c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800642c:	b580      	push	{r7, lr}
 800642e:	b084      	sub	sp, #16
 8006430:	af00      	add	r7, sp, #0
 8006432:	6078      	str	r0, [r7, #4]
 8006434:	460b      	mov	r3, r1
 8006436:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006438:	2300      	movs	r3, #0
 800643a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	68db      	ldr	r3, [r3, #12]
 8006440:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006448:	78fb      	ldrb	r3, [r7, #3]
 800644a:	2b01      	cmp	r3, #1
 800644c:	d115      	bne.n	800647a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	68db      	ldr	r3, [r3, #12]
 8006452:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800645a:	200a      	movs	r0, #10
 800645c:	f7fc f846 	bl	80024ec <HAL_Delay>
      ms += 10U;
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	330a      	adds	r3, #10
 8006464:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006466:	6878      	ldr	r0, [r7, #4]
 8006468:	f001 f93f 	bl	80076ea <USB_GetMode>
 800646c:	4603      	mov	r3, r0
 800646e:	2b01      	cmp	r3, #1
 8006470:	d01e      	beq.n	80064b0 <USB_SetCurrentMode+0x84>
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	2bc7      	cmp	r3, #199	@ 0xc7
 8006476:	d9f0      	bls.n	800645a <USB_SetCurrentMode+0x2e>
 8006478:	e01a      	b.n	80064b0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800647a:	78fb      	ldrb	r3, [r7, #3]
 800647c:	2b00      	cmp	r3, #0
 800647e:	d115      	bne.n	80064ac <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	68db      	ldr	r3, [r3, #12]
 8006484:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800648c:	200a      	movs	r0, #10
 800648e:	f7fc f82d 	bl	80024ec <HAL_Delay>
      ms += 10U;
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	330a      	adds	r3, #10
 8006496:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006498:	6878      	ldr	r0, [r7, #4]
 800649a:	f001 f926 	bl	80076ea <USB_GetMode>
 800649e:	4603      	mov	r3, r0
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d005      	beq.n	80064b0 <USB_SetCurrentMode+0x84>
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	2bc7      	cmp	r3, #199	@ 0xc7
 80064a8:	d9f0      	bls.n	800648c <USB_SetCurrentMode+0x60>
 80064aa:	e001      	b.n	80064b0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80064ac:	2301      	movs	r3, #1
 80064ae:	e005      	b.n	80064bc <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	2bc8      	cmp	r3, #200	@ 0xc8
 80064b4:	d101      	bne.n	80064ba <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80064b6:	2301      	movs	r3, #1
 80064b8:	e000      	b.n	80064bc <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80064ba:	2300      	movs	r3, #0
}
 80064bc:	4618      	mov	r0, r3
 80064be:	3710      	adds	r7, #16
 80064c0:	46bd      	mov	sp, r7
 80064c2:	bd80      	pop	{r7, pc}

080064c4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80064c4:	b084      	sub	sp, #16
 80064c6:	b580      	push	{r7, lr}
 80064c8:	b086      	sub	sp, #24
 80064ca:	af00      	add	r7, sp, #0
 80064cc:	6078      	str	r0, [r7, #4]
 80064ce:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80064d2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80064d6:	2300      	movs	r3, #0
 80064d8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80064de:	2300      	movs	r3, #0
 80064e0:	613b      	str	r3, [r7, #16]
 80064e2:	e009      	b.n	80064f8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80064e4:	687a      	ldr	r2, [r7, #4]
 80064e6:	693b      	ldr	r3, [r7, #16]
 80064e8:	3340      	adds	r3, #64	@ 0x40
 80064ea:	009b      	lsls	r3, r3, #2
 80064ec:	4413      	add	r3, r2
 80064ee:	2200      	movs	r2, #0
 80064f0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80064f2:	693b      	ldr	r3, [r7, #16]
 80064f4:	3301      	adds	r3, #1
 80064f6:	613b      	str	r3, [r7, #16]
 80064f8:	693b      	ldr	r3, [r7, #16]
 80064fa:	2b0e      	cmp	r3, #14
 80064fc:	d9f2      	bls.n	80064e4 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80064fe:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006502:	2b00      	cmp	r3, #0
 8006504:	d11c      	bne.n	8006540 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800650c:	685b      	ldr	r3, [r3, #4]
 800650e:	68fa      	ldr	r2, [r7, #12]
 8006510:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006514:	f043 0302 	orr.w	r3, r3, #2
 8006518:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800651e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800652a:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006536:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	639a      	str	r2, [r3, #56]	@ 0x38
 800653e:	e00b      	b.n	8006558 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006544:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006550:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800655e:	461a      	mov	r2, r3
 8006560:	2300      	movs	r3, #0
 8006562:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006564:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8006568:	2b01      	cmp	r3, #1
 800656a:	d10d      	bne.n	8006588 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800656c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006570:	2b00      	cmp	r3, #0
 8006572:	d104      	bne.n	800657e <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006574:	2100      	movs	r1, #0
 8006576:	6878      	ldr	r0, [r7, #4]
 8006578:	f000 f968 	bl	800684c <USB_SetDevSpeed>
 800657c:	e008      	b.n	8006590 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800657e:	2101      	movs	r1, #1
 8006580:	6878      	ldr	r0, [r7, #4]
 8006582:	f000 f963 	bl	800684c <USB_SetDevSpeed>
 8006586:	e003      	b.n	8006590 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006588:	2103      	movs	r1, #3
 800658a:	6878      	ldr	r0, [r7, #4]
 800658c:	f000 f95e 	bl	800684c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006590:	2110      	movs	r1, #16
 8006592:	6878      	ldr	r0, [r7, #4]
 8006594:	f000 f8fa 	bl	800678c <USB_FlushTxFifo>
 8006598:	4603      	mov	r3, r0
 800659a:	2b00      	cmp	r3, #0
 800659c:	d001      	beq.n	80065a2 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 800659e:	2301      	movs	r3, #1
 80065a0:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80065a2:	6878      	ldr	r0, [r7, #4]
 80065a4:	f000 f924 	bl	80067f0 <USB_FlushRxFifo>
 80065a8:	4603      	mov	r3, r0
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d001      	beq.n	80065b2 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 80065ae:	2301      	movs	r3, #1
 80065b0:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80065b8:	461a      	mov	r2, r3
 80065ba:	2300      	movs	r3, #0
 80065bc:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80065c4:	461a      	mov	r2, r3
 80065c6:	2300      	movs	r3, #0
 80065c8:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80065d0:	461a      	mov	r2, r3
 80065d2:	2300      	movs	r3, #0
 80065d4:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80065d6:	2300      	movs	r3, #0
 80065d8:	613b      	str	r3, [r7, #16]
 80065da:	e043      	b.n	8006664 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80065dc:	693b      	ldr	r3, [r7, #16]
 80065de:	015a      	lsls	r2, r3, #5
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	4413      	add	r3, r2
 80065e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80065ee:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80065f2:	d118      	bne.n	8006626 <USB_DevInit+0x162>
    {
      if (i == 0U)
 80065f4:	693b      	ldr	r3, [r7, #16]
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d10a      	bne.n	8006610 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80065fa:	693b      	ldr	r3, [r7, #16]
 80065fc:	015a      	lsls	r2, r3, #5
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	4413      	add	r3, r2
 8006602:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006606:	461a      	mov	r2, r3
 8006608:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800660c:	6013      	str	r3, [r2, #0]
 800660e:	e013      	b.n	8006638 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006610:	693b      	ldr	r3, [r7, #16]
 8006612:	015a      	lsls	r2, r3, #5
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	4413      	add	r3, r2
 8006618:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800661c:	461a      	mov	r2, r3
 800661e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006622:	6013      	str	r3, [r2, #0]
 8006624:	e008      	b.n	8006638 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006626:	693b      	ldr	r3, [r7, #16]
 8006628:	015a      	lsls	r2, r3, #5
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	4413      	add	r3, r2
 800662e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006632:	461a      	mov	r2, r3
 8006634:	2300      	movs	r3, #0
 8006636:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006638:	693b      	ldr	r3, [r7, #16]
 800663a:	015a      	lsls	r2, r3, #5
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	4413      	add	r3, r2
 8006640:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006644:	461a      	mov	r2, r3
 8006646:	2300      	movs	r3, #0
 8006648:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800664a:	693b      	ldr	r3, [r7, #16]
 800664c:	015a      	lsls	r2, r3, #5
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	4413      	add	r3, r2
 8006652:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006656:	461a      	mov	r2, r3
 8006658:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800665c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800665e:	693b      	ldr	r3, [r7, #16]
 8006660:	3301      	adds	r3, #1
 8006662:	613b      	str	r3, [r7, #16]
 8006664:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006668:	461a      	mov	r2, r3
 800666a:	693b      	ldr	r3, [r7, #16]
 800666c:	4293      	cmp	r3, r2
 800666e:	d3b5      	bcc.n	80065dc <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006670:	2300      	movs	r3, #0
 8006672:	613b      	str	r3, [r7, #16]
 8006674:	e043      	b.n	80066fe <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006676:	693b      	ldr	r3, [r7, #16]
 8006678:	015a      	lsls	r2, r3, #5
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	4413      	add	r3, r2
 800667e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006688:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800668c:	d118      	bne.n	80066c0 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 800668e:	693b      	ldr	r3, [r7, #16]
 8006690:	2b00      	cmp	r3, #0
 8006692:	d10a      	bne.n	80066aa <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006694:	693b      	ldr	r3, [r7, #16]
 8006696:	015a      	lsls	r2, r3, #5
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	4413      	add	r3, r2
 800669c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80066a0:	461a      	mov	r2, r3
 80066a2:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80066a6:	6013      	str	r3, [r2, #0]
 80066a8:	e013      	b.n	80066d2 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80066aa:	693b      	ldr	r3, [r7, #16]
 80066ac:	015a      	lsls	r2, r3, #5
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	4413      	add	r3, r2
 80066b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80066b6:	461a      	mov	r2, r3
 80066b8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80066bc:	6013      	str	r3, [r2, #0]
 80066be:	e008      	b.n	80066d2 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80066c0:	693b      	ldr	r3, [r7, #16]
 80066c2:	015a      	lsls	r2, r3, #5
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	4413      	add	r3, r2
 80066c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80066cc:	461a      	mov	r2, r3
 80066ce:	2300      	movs	r3, #0
 80066d0:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80066d2:	693b      	ldr	r3, [r7, #16]
 80066d4:	015a      	lsls	r2, r3, #5
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	4413      	add	r3, r2
 80066da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80066de:	461a      	mov	r2, r3
 80066e0:	2300      	movs	r3, #0
 80066e2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80066e4:	693b      	ldr	r3, [r7, #16]
 80066e6:	015a      	lsls	r2, r3, #5
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	4413      	add	r3, r2
 80066ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80066f0:	461a      	mov	r2, r3
 80066f2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80066f6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80066f8:	693b      	ldr	r3, [r7, #16]
 80066fa:	3301      	adds	r3, #1
 80066fc:	613b      	str	r3, [r7, #16]
 80066fe:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006702:	461a      	mov	r2, r3
 8006704:	693b      	ldr	r3, [r7, #16]
 8006706:	4293      	cmp	r3, r2
 8006708:	d3b5      	bcc.n	8006676 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006710:	691b      	ldr	r3, [r3, #16]
 8006712:	68fa      	ldr	r2, [r7, #12]
 8006714:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006718:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800671c:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	2200      	movs	r2, #0
 8006722:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800672a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800672c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006730:	2b00      	cmp	r3, #0
 8006732:	d105      	bne.n	8006740 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	699b      	ldr	r3, [r3, #24]
 8006738:	f043 0210 	orr.w	r2, r3, #16
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	699a      	ldr	r2, [r3, #24]
 8006744:	4b10      	ldr	r3, [pc, #64]	@ (8006788 <USB_DevInit+0x2c4>)
 8006746:	4313      	orrs	r3, r2
 8006748:	687a      	ldr	r2, [r7, #4]
 800674a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800674c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8006750:	2b00      	cmp	r3, #0
 8006752:	d005      	beq.n	8006760 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	699b      	ldr	r3, [r3, #24]
 8006758:	f043 0208 	orr.w	r2, r3, #8
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006760:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006764:	2b01      	cmp	r3, #1
 8006766:	d107      	bne.n	8006778 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	699b      	ldr	r3, [r3, #24]
 800676c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006770:	f043 0304 	orr.w	r3, r3, #4
 8006774:	687a      	ldr	r2, [r7, #4]
 8006776:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006778:	7dfb      	ldrb	r3, [r7, #23]
}
 800677a:	4618      	mov	r0, r3
 800677c:	3718      	adds	r7, #24
 800677e:	46bd      	mov	sp, r7
 8006780:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006784:	b004      	add	sp, #16
 8006786:	4770      	bx	lr
 8006788:	803c3800 	.word	0x803c3800

0800678c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800678c:	b480      	push	{r7}
 800678e:	b085      	sub	sp, #20
 8006790:	af00      	add	r7, sp, #0
 8006792:	6078      	str	r0, [r7, #4]
 8006794:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006796:	2300      	movs	r3, #0
 8006798:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	3301      	adds	r3, #1
 800679e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80067a6:	d901      	bls.n	80067ac <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80067a8:	2303      	movs	r3, #3
 80067aa:	e01b      	b.n	80067e4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	691b      	ldr	r3, [r3, #16]
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	daf2      	bge.n	800679a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80067b4:	2300      	movs	r3, #0
 80067b6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80067b8:	683b      	ldr	r3, [r7, #0]
 80067ba:	019b      	lsls	r3, r3, #6
 80067bc:	f043 0220 	orr.w	r2, r3, #32
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	3301      	adds	r3, #1
 80067c8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80067d0:	d901      	bls.n	80067d6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80067d2:	2303      	movs	r3, #3
 80067d4:	e006      	b.n	80067e4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	691b      	ldr	r3, [r3, #16]
 80067da:	f003 0320 	and.w	r3, r3, #32
 80067de:	2b20      	cmp	r3, #32
 80067e0:	d0f0      	beq.n	80067c4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80067e2:	2300      	movs	r3, #0
}
 80067e4:	4618      	mov	r0, r3
 80067e6:	3714      	adds	r7, #20
 80067e8:	46bd      	mov	sp, r7
 80067ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ee:	4770      	bx	lr

080067f0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80067f0:	b480      	push	{r7}
 80067f2:	b085      	sub	sp, #20
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80067f8:	2300      	movs	r3, #0
 80067fa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	3301      	adds	r3, #1
 8006800:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006808:	d901      	bls.n	800680e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800680a:	2303      	movs	r3, #3
 800680c:	e018      	b.n	8006840 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	691b      	ldr	r3, [r3, #16]
 8006812:	2b00      	cmp	r3, #0
 8006814:	daf2      	bge.n	80067fc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006816:	2300      	movs	r3, #0
 8006818:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	2210      	movs	r2, #16
 800681e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	3301      	adds	r3, #1
 8006824:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800682c:	d901      	bls.n	8006832 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800682e:	2303      	movs	r3, #3
 8006830:	e006      	b.n	8006840 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	691b      	ldr	r3, [r3, #16]
 8006836:	f003 0310 	and.w	r3, r3, #16
 800683a:	2b10      	cmp	r3, #16
 800683c:	d0f0      	beq.n	8006820 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800683e:	2300      	movs	r3, #0
}
 8006840:	4618      	mov	r0, r3
 8006842:	3714      	adds	r7, #20
 8006844:	46bd      	mov	sp, r7
 8006846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684a:	4770      	bx	lr

0800684c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800684c:	b480      	push	{r7}
 800684e:	b085      	sub	sp, #20
 8006850:	af00      	add	r7, sp, #0
 8006852:	6078      	str	r0, [r7, #4]
 8006854:	460b      	mov	r3, r1
 8006856:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006862:	681a      	ldr	r2, [r3, #0]
 8006864:	78fb      	ldrb	r3, [r7, #3]
 8006866:	68f9      	ldr	r1, [r7, #12]
 8006868:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800686c:	4313      	orrs	r3, r2
 800686e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006870:	2300      	movs	r3, #0
}
 8006872:	4618      	mov	r0, r3
 8006874:	3714      	adds	r7, #20
 8006876:	46bd      	mov	sp, r7
 8006878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800687c:	4770      	bx	lr

0800687e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800687e:	b480      	push	{r7}
 8006880:	b087      	sub	sp, #28
 8006882:	af00      	add	r7, sp, #0
 8006884:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800688a:	693b      	ldr	r3, [r7, #16]
 800688c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006890:	689b      	ldr	r3, [r3, #8]
 8006892:	f003 0306 	and.w	r3, r3, #6
 8006896:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	2b00      	cmp	r3, #0
 800689c:	d102      	bne.n	80068a4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800689e:	2300      	movs	r3, #0
 80068a0:	75fb      	strb	r3, [r7, #23]
 80068a2:	e00a      	b.n	80068ba <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	2b02      	cmp	r3, #2
 80068a8:	d002      	beq.n	80068b0 <USB_GetDevSpeed+0x32>
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	2b06      	cmp	r3, #6
 80068ae:	d102      	bne.n	80068b6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80068b0:	2302      	movs	r3, #2
 80068b2:	75fb      	strb	r3, [r7, #23]
 80068b4:	e001      	b.n	80068ba <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80068b6:	230f      	movs	r3, #15
 80068b8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80068ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80068bc:	4618      	mov	r0, r3
 80068be:	371c      	adds	r7, #28
 80068c0:	46bd      	mov	sp, r7
 80068c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c6:	4770      	bx	lr

080068c8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80068c8:	b480      	push	{r7}
 80068ca:	b085      	sub	sp, #20
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	6078      	str	r0, [r7, #4]
 80068d0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80068d6:	683b      	ldr	r3, [r7, #0]
 80068d8:	781b      	ldrb	r3, [r3, #0]
 80068da:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80068dc:	683b      	ldr	r3, [r7, #0]
 80068de:	785b      	ldrb	r3, [r3, #1]
 80068e0:	2b01      	cmp	r3, #1
 80068e2:	d13a      	bne.n	800695a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80068ea:	69da      	ldr	r2, [r3, #28]
 80068ec:	683b      	ldr	r3, [r7, #0]
 80068ee:	781b      	ldrb	r3, [r3, #0]
 80068f0:	f003 030f 	and.w	r3, r3, #15
 80068f4:	2101      	movs	r1, #1
 80068f6:	fa01 f303 	lsl.w	r3, r1, r3
 80068fa:	b29b      	uxth	r3, r3
 80068fc:	68f9      	ldr	r1, [r7, #12]
 80068fe:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006902:	4313      	orrs	r3, r2
 8006904:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8006906:	68bb      	ldr	r3, [r7, #8]
 8006908:	015a      	lsls	r2, r3, #5
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	4413      	add	r3, r2
 800690e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006918:	2b00      	cmp	r3, #0
 800691a:	d155      	bne.n	80069c8 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800691c:	68bb      	ldr	r3, [r7, #8]
 800691e:	015a      	lsls	r2, r3, #5
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	4413      	add	r3, r2
 8006924:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006928:	681a      	ldr	r2, [r3, #0]
 800692a:	683b      	ldr	r3, [r7, #0]
 800692c:	689b      	ldr	r3, [r3, #8]
 800692e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006932:	683b      	ldr	r3, [r7, #0]
 8006934:	791b      	ldrb	r3, [r3, #4]
 8006936:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006938:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800693a:	68bb      	ldr	r3, [r7, #8]
 800693c:	059b      	lsls	r3, r3, #22
 800693e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006940:	4313      	orrs	r3, r2
 8006942:	68ba      	ldr	r2, [r7, #8]
 8006944:	0151      	lsls	r1, r2, #5
 8006946:	68fa      	ldr	r2, [r7, #12]
 8006948:	440a      	add	r2, r1
 800694a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800694e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006952:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006956:	6013      	str	r3, [r2, #0]
 8006958:	e036      	b.n	80069c8 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006960:	69da      	ldr	r2, [r3, #28]
 8006962:	683b      	ldr	r3, [r7, #0]
 8006964:	781b      	ldrb	r3, [r3, #0]
 8006966:	f003 030f 	and.w	r3, r3, #15
 800696a:	2101      	movs	r1, #1
 800696c:	fa01 f303 	lsl.w	r3, r1, r3
 8006970:	041b      	lsls	r3, r3, #16
 8006972:	68f9      	ldr	r1, [r7, #12]
 8006974:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006978:	4313      	orrs	r3, r2
 800697a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800697c:	68bb      	ldr	r3, [r7, #8]
 800697e:	015a      	lsls	r2, r3, #5
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	4413      	add	r3, r2
 8006984:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800698e:	2b00      	cmp	r3, #0
 8006990:	d11a      	bne.n	80069c8 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006992:	68bb      	ldr	r3, [r7, #8]
 8006994:	015a      	lsls	r2, r3, #5
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	4413      	add	r3, r2
 800699a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800699e:	681a      	ldr	r2, [r3, #0]
 80069a0:	683b      	ldr	r3, [r7, #0]
 80069a2:	689b      	ldr	r3, [r3, #8]
 80069a4:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80069a8:	683b      	ldr	r3, [r7, #0]
 80069aa:	791b      	ldrb	r3, [r3, #4]
 80069ac:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80069ae:	430b      	orrs	r3, r1
 80069b0:	4313      	orrs	r3, r2
 80069b2:	68ba      	ldr	r2, [r7, #8]
 80069b4:	0151      	lsls	r1, r2, #5
 80069b6:	68fa      	ldr	r2, [r7, #12]
 80069b8:	440a      	add	r2, r1
 80069ba:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80069be:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80069c2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80069c6:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80069c8:	2300      	movs	r3, #0
}
 80069ca:	4618      	mov	r0, r3
 80069cc:	3714      	adds	r7, #20
 80069ce:	46bd      	mov	sp, r7
 80069d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d4:	4770      	bx	lr
	...

080069d8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80069d8:	b480      	push	{r7}
 80069da:	b085      	sub	sp, #20
 80069dc:	af00      	add	r7, sp, #0
 80069de:	6078      	str	r0, [r7, #4]
 80069e0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80069e6:	683b      	ldr	r3, [r7, #0]
 80069e8:	781b      	ldrb	r3, [r3, #0]
 80069ea:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80069ec:	683b      	ldr	r3, [r7, #0]
 80069ee:	785b      	ldrb	r3, [r3, #1]
 80069f0:	2b01      	cmp	r3, #1
 80069f2:	d161      	bne.n	8006ab8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80069f4:	68bb      	ldr	r3, [r7, #8]
 80069f6:	015a      	lsls	r2, r3, #5
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	4413      	add	r3, r2
 80069fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006a06:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006a0a:	d11f      	bne.n	8006a4c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006a0c:	68bb      	ldr	r3, [r7, #8]
 8006a0e:	015a      	lsls	r2, r3, #5
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	4413      	add	r3, r2
 8006a14:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	68ba      	ldr	r2, [r7, #8]
 8006a1c:	0151      	lsls	r1, r2, #5
 8006a1e:	68fa      	ldr	r2, [r7, #12]
 8006a20:	440a      	add	r2, r1
 8006a22:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006a26:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006a2a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8006a2c:	68bb      	ldr	r3, [r7, #8]
 8006a2e:	015a      	lsls	r2, r3, #5
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	4413      	add	r3, r2
 8006a34:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	68ba      	ldr	r2, [r7, #8]
 8006a3c:	0151      	lsls	r1, r2, #5
 8006a3e:	68fa      	ldr	r2, [r7, #12]
 8006a40:	440a      	add	r2, r1
 8006a42:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006a46:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006a4a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006a52:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006a54:	683b      	ldr	r3, [r7, #0]
 8006a56:	781b      	ldrb	r3, [r3, #0]
 8006a58:	f003 030f 	and.w	r3, r3, #15
 8006a5c:	2101      	movs	r1, #1
 8006a5e:	fa01 f303 	lsl.w	r3, r1, r3
 8006a62:	b29b      	uxth	r3, r3
 8006a64:	43db      	mvns	r3, r3
 8006a66:	68f9      	ldr	r1, [r7, #12]
 8006a68:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006a6c:	4013      	ands	r3, r2
 8006a6e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006a76:	69da      	ldr	r2, [r3, #28]
 8006a78:	683b      	ldr	r3, [r7, #0]
 8006a7a:	781b      	ldrb	r3, [r3, #0]
 8006a7c:	f003 030f 	and.w	r3, r3, #15
 8006a80:	2101      	movs	r1, #1
 8006a82:	fa01 f303 	lsl.w	r3, r1, r3
 8006a86:	b29b      	uxth	r3, r3
 8006a88:	43db      	mvns	r3, r3
 8006a8a:	68f9      	ldr	r1, [r7, #12]
 8006a8c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006a90:	4013      	ands	r3, r2
 8006a92:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8006a94:	68bb      	ldr	r3, [r7, #8]
 8006a96:	015a      	lsls	r2, r3, #5
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	4413      	add	r3, r2
 8006a9c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006aa0:	681a      	ldr	r2, [r3, #0]
 8006aa2:	68bb      	ldr	r3, [r7, #8]
 8006aa4:	0159      	lsls	r1, r3, #5
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	440b      	add	r3, r1
 8006aaa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006aae:	4619      	mov	r1, r3
 8006ab0:	4b35      	ldr	r3, [pc, #212]	@ (8006b88 <USB_DeactivateEndpoint+0x1b0>)
 8006ab2:	4013      	ands	r3, r2
 8006ab4:	600b      	str	r3, [r1, #0]
 8006ab6:	e060      	b.n	8006b7a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006ab8:	68bb      	ldr	r3, [r7, #8]
 8006aba:	015a      	lsls	r2, r3, #5
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	4413      	add	r3, r2
 8006ac0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006aca:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006ace:	d11f      	bne.n	8006b10 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006ad0:	68bb      	ldr	r3, [r7, #8]
 8006ad2:	015a      	lsls	r2, r3, #5
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	4413      	add	r3, r2
 8006ad8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	68ba      	ldr	r2, [r7, #8]
 8006ae0:	0151      	lsls	r1, r2, #5
 8006ae2:	68fa      	ldr	r2, [r7, #12]
 8006ae4:	440a      	add	r2, r1
 8006ae6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006aea:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006aee:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8006af0:	68bb      	ldr	r3, [r7, #8]
 8006af2:	015a      	lsls	r2, r3, #5
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	4413      	add	r3, r2
 8006af8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	68ba      	ldr	r2, [r7, #8]
 8006b00:	0151      	lsls	r1, r2, #5
 8006b02:	68fa      	ldr	r2, [r7, #12]
 8006b04:	440a      	add	r2, r1
 8006b06:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006b0a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006b0e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006b16:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006b18:	683b      	ldr	r3, [r7, #0]
 8006b1a:	781b      	ldrb	r3, [r3, #0]
 8006b1c:	f003 030f 	and.w	r3, r3, #15
 8006b20:	2101      	movs	r1, #1
 8006b22:	fa01 f303 	lsl.w	r3, r1, r3
 8006b26:	041b      	lsls	r3, r3, #16
 8006b28:	43db      	mvns	r3, r3
 8006b2a:	68f9      	ldr	r1, [r7, #12]
 8006b2c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006b30:	4013      	ands	r3, r2
 8006b32:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006b3a:	69da      	ldr	r2, [r3, #28]
 8006b3c:	683b      	ldr	r3, [r7, #0]
 8006b3e:	781b      	ldrb	r3, [r3, #0]
 8006b40:	f003 030f 	and.w	r3, r3, #15
 8006b44:	2101      	movs	r1, #1
 8006b46:	fa01 f303 	lsl.w	r3, r1, r3
 8006b4a:	041b      	lsls	r3, r3, #16
 8006b4c:	43db      	mvns	r3, r3
 8006b4e:	68f9      	ldr	r1, [r7, #12]
 8006b50:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006b54:	4013      	ands	r3, r2
 8006b56:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006b58:	68bb      	ldr	r3, [r7, #8]
 8006b5a:	015a      	lsls	r2, r3, #5
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	4413      	add	r3, r2
 8006b60:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006b64:	681a      	ldr	r2, [r3, #0]
 8006b66:	68bb      	ldr	r3, [r7, #8]
 8006b68:	0159      	lsls	r1, r3, #5
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	440b      	add	r3, r1
 8006b6e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006b72:	4619      	mov	r1, r3
 8006b74:	4b05      	ldr	r3, [pc, #20]	@ (8006b8c <USB_DeactivateEndpoint+0x1b4>)
 8006b76:	4013      	ands	r3, r2
 8006b78:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8006b7a:	2300      	movs	r3, #0
}
 8006b7c:	4618      	mov	r0, r3
 8006b7e:	3714      	adds	r7, #20
 8006b80:	46bd      	mov	sp, r7
 8006b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b86:	4770      	bx	lr
 8006b88:	ec337800 	.word	0xec337800
 8006b8c:	eff37800 	.word	0xeff37800

08006b90 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006b90:	b580      	push	{r7, lr}
 8006b92:	b08a      	sub	sp, #40	@ 0x28
 8006b94:	af02      	add	r7, sp, #8
 8006b96:	60f8      	str	r0, [r7, #12]
 8006b98:	60b9      	str	r1, [r7, #8]
 8006b9a:	4613      	mov	r3, r2
 8006b9c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8006ba2:	68bb      	ldr	r3, [r7, #8]
 8006ba4:	781b      	ldrb	r3, [r3, #0]
 8006ba6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006ba8:	68bb      	ldr	r3, [r7, #8]
 8006baa:	785b      	ldrb	r3, [r3, #1]
 8006bac:	2b01      	cmp	r3, #1
 8006bae:	f040 817f 	bne.w	8006eb0 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006bb2:	68bb      	ldr	r3, [r7, #8]
 8006bb4:	691b      	ldr	r3, [r3, #16]
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d132      	bne.n	8006c20 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006bba:	69bb      	ldr	r3, [r7, #24]
 8006bbc:	015a      	lsls	r2, r3, #5
 8006bbe:	69fb      	ldr	r3, [r7, #28]
 8006bc0:	4413      	add	r3, r2
 8006bc2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006bc6:	691b      	ldr	r3, [r3, #16]
 8006bc8:	69ba      	ldr	r2, [r7, #24]
 8006bca:	0151      	lsls	r1, r2, #5
 8006bcc:	69fa      	ldr	r2, [r7, #28]
 8006bce:	440a      	add	r2, r1
 8006bd0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006bd4:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8006bd8:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8006bdc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006bde:	69bb      	ldr	r3, [r7, #24]
 8006be0:	015a      	lsls	r2, r3, #5
 8006be2:	69fb      	ldr	r3, [r7, #28]
 8006be4:	4413      	add	r3, r2
 8006be6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006bea:	691b      	ldr	r3, [r3, #16]
 8006bec:	69ba      	ldr	r2, [r7, #24]
 8006bee:	0151      	lsls	r1, r2, #5
 8006bf0:	69fa      	ldr	r2, [r7, #28]
 8006bf2:	440a      	add	r2, r1
 8006bf4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006bf8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006bfc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006bfe:	69bb      	ldr	r3, [r7, #24]
 8006c00:	015a      	lsls	r2, r3, #5
 8006c02:	69fb      	ldr	r3, [r7, #28]
 8006c04:	4413      	add	r3, r2
 8006c06:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c0a:	691b      	ldr	r3, [r3, #16]
 8006c0c:	69ba      	ldr	r2, [r7, #24]
 8006c0e:	0151      	lsls	r1, r2, #5
 8006c10:	69fa      	ldr	r2, [r7, #28]
 8006c12:	440a      	add	r2, r1
 8006c14:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006c18:	0cdb      	lsrs	r3, r3, #19
 8006c1a:	04db      	lsls	r3, r3, #19
 8006c1c:	6113      	str	r3, [r2, #16]
 8006c1e:	e097      	b.n	8006d50 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006c20:	69bb      	ldr	r3, [r7, #24]
 8006c22:	015a      	lsls	r2, r3, #5
 8006c24:	69fb      	ldr	r3, [r7, #28]
 8006c26:	4413      	add	r3, r2
 8006c28:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c2c:	691b      	ldr	r3, [r3, #16]
 8006c2e:	69ba      	ldr	r2, [r7, #24]
 8006c30:	0151      	lsls	r1, r2, #5
 8006c32:	69fa      	ldr	r2, [r7, #28]
 8006c34:	440a      	add	r2, r1
 8006c36:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006c3a:	0cdb      	lsrs	r3, r3, #19
 8006c3c:	04db      	lsls	r3, r3, #19
 8006c3e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006c40:	69bb      	ldr	r3, [r7, #24]
 8006c42:	015a      	lsls	r2, r3, #5
 8006c44:	69fb      	ldr	r3, [r7, #28]
 8006c46:	4413      	add	r3, r2
 8006c48:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c4c:	691b      	ldr	r3, [r3, #16]
 8006c4e:	69ba      	ldr	r2, [r7, #24]
 8006c50:	0151      	lsls	r1, r2, #5
 8006c52:	69fa      	ldr	r2, [r7, #28]
 8006c54:	440a      	add	r2, r1
 8006c56:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006c5a:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8006c5e:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8006c62:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8006c64:	69bb      	ldr	r3, [r7, #24]
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d11a      	bne.n	8006ca0 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8006c6a:	68bb      	ldr	r3, [r7, #8]
 8006c6c:	691a      	ldr	r2, [r3, #16]
 8006c6e:	68bb      	ldr	r3, [r7, #8]
 8006c70:	689b      	ldr	r3, [r3, #8]
 8006c72:	429a      	cmp	r2, r3
 8006c74:	d903      	bls.n	8006c7e <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8006c76:	68bb      	ldr	r3, [r7, #8]
 8006c78:	689a      	ldr	r2, [r3, #8]
 8006c7a:	68bb      	ldr	r3, [r7, #8]
 8006c7c:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006c7e:	69bb      	ldr	r3, [r7, #24]
 8006c80:	015a      	lsls	r2, r3, #5
 8006c82:	69fb      	ldr	r3, [r7, #28]
 8006c84:	4413      	add	r3, r2
 8006c86:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c8a:	691b      	ldr	r3, [r3, #16]
 8006c8c:	69ba      	ldr	r2, [r7, #24]
 8006c8e:	0151      	lsls	r1, r2, #5
 8006c90:	69fa      	ldr	r2, [r7, #28]
 8006c92:	440a      	add	r2, r1
 8006c94:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006c98:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006c9c:	6113      	str	r3, [r2, #16]
 8006c9e:	e044      	b.n	8006d2a <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006ca0:	68bb      	ldr	r3, [r7, #8]
 8006ca2:	691a      	ldr	r2, [r3, #16]
 8006ca4:	68bb      	ldr	r3, [r7, #8]
 8006ca6:	689b      	ldr	r3, [r3, #8]
 8006ca8:	4413      	add	r3, r2
 8006caa:	1e5a      	subs	r2, r3, #1
 8006cac:	68bb      	ldr	r3, [r7, #8]
 8006cae:	689b      	ldr	r3, [r3, #8]
 8006cb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006cb4:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 8006cb6:	69bb      	ldr	r3, [r7, #24]
 8006cb8:	015a      	lsls	r2, r3, #5
 8006cba:	69fb      	ldr	r3, [r7, #28]
 8006cbc:	4413      	add	r3, r2
 8006cbe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006cc2:	691a      	ldr	r2, [r3, #16]
 8006cc4:	8afb      	ldrh	r3, [r7, #22]
 8006cc6:	04d9      	lsls	r1, r3, #19
 8006cc8:	4ba4      	ldr	r3, [pc, #656]	@ (8006f5c <USB_EPStartXfer+0x3cc>)
 8006cca:	400b      	ands	r3, r1
 8006ccc:	69b9      	ldr	r1, [r7, #24]
 8006cce:	0148      	lsls	r0, r1, #5
 8006cd0:	69f9      	ldr	r1, [r7, #28]
 8006cd2:	4401      	add	r1, r0
 8006cd4:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8006cd8:	4313      	orrs	r3, r2
 8006cda:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8006cdc:	68bb      	ldr	r3, [r7, #8]
 8006cde:	791b      	ldrb	r3, [r3, #4]
 8006ce0:	2b01      	cmp	r3, #1
 8006ce2:	d122      	bne.n	8006d2a <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8006ce4:	69bb      	ldr	r3, [r7, #24]
 8006ce6:	015a      	lsls	r2, r3, #5
 8006ce8:	69fb      	ldr	r3, [r7, #28]
 8006cea:	4413      	add	r3, r2
 8006cec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006cf0:	691b      	ldr	r3, [r3, #16]
 8006cf2:	69ba      	ldr	r2, [r7, #24]
 8006cf4:	0151      	lsls	r1, r2, #5
 8006cf6:	69fa      	ldr	r2, [r7, #28]
 8006cf8:	440a      	add	r2, r1
 8006cfa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006cfe:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8006d02:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 8006d04:	69bb      	ldr	r3, [r7, #24]
 8006d06:	015a      	lsls	r2, r3, #5
 8006d08:	69fb      	ldr	r3, [r7, #28]
 8006d0a:	4413      	add	r3, r2
 8006d0c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006d10:	691a      	ldr	r2, [r3, #16]
 8006d12:	8afb      	ldrh	r3, [r7, #22]
 8006d14:	075b      	lsls	r3, r3, #29
 8006d16:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8006d1a:	69b9      	ldr	r1, [r7, #24]
 8006d1c:	0148      	lsls	r0, r1, #5
 8006d1e:	69f9      	ldr	r1, [r7, #28]
 8006d20:	4401      	add	r1, r0
 8006d22:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8006d26:	4313      	orrs	r3, r2
 8006d28:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006d2a:	69bb      	ldr	r3, [r7, #24]
 8006d2c:	015a      	lsls	r2, r3, #5
 8006d2e:	69fb      	ldr	r3, [r7, #28]
 8006d30:	4413      	add	r3, r2
 8006d32:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006d36:	691a      	ldr	r2, [r3, #16]
 8006d38:	68bb      	ldr	r3, [r7, #8]
 8006d3a:	691b      	ldr	r3, [r3, #16]
 8006d3c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006d40:	69b9      	ldr	r1, [r7, #24]
 8006d42:	0148      	lsls	r0, r1, #5
 8006d44:	69f9      	ldr	r1, [r7, #28]
 8006d46:	4401      	add	r1, r0
 8006d48:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8006d4c:	4313      	orrs	r3, r2
 8006d4e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006d50:	79fb      	ldrb	r3, [r7, #7]
 8006d52:	2b01      	cmp	r3, #1
 8006d54:	d14b      	bne.n	8006dee <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006d56:	68bb      	ldr	r3, [r7, #8]
 8006d58:	69db      	ldr	r3, [r3, #28]
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d009      	beq.n	8006d72 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006d5e:	69bb      	ldr	r3, [r7, #24]
 8006d60:	015a      	lsls	r2, r3, #5
 8006d62:	69fb      	ldr	r3, [r7, #28]
 8006d64:	4413      	add	r3, r2
 8006d66:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006d6a:	461a      	mov	r2, r3
 8006d6c:	68bb      	ldr	r3, [r7, #8]
 8006d6e:	69db      	ldr	r3, [r3, #28]
 8006d70:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8006d72:	68bb      	ldr	r3, [r7, #8]
 8006d74:	791b      	ldrb	r3, [r3, #4]
 8006d76:	2b01      	cmp	r3, #1
 8006d78:	d128      	bne.n	8006dcc <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006d7a:	69fb      	ldr	r3, [r7, #28]
 8006d7c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006d80:	689b      	ldr	r3, [r3, #8]
 8006d82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d110      	bne.n	8006dac <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006d8a:	69bb      	ldr	r3, [r7, #24]
 8006d8c:	015a      	lsls	r2, r3, #5
 8006d8e:	69fb      	ldr	r3, [r7, #28]
 8006d90:	4413      	add	r3, r2
 8006d92:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	69ba      	ldr	r2, [r7, #24]
 8006d9a:	0151      	lsls	r1, r2, #5
 8006d9c:	69fa      	ldr	r2, [r7, #28]
 8006d9e:	440a      	add	r2, r1
 8006da0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006da4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006da8:	6013      	str	r3, [r2, #0]
 8006daa:	e00f      	b.n	8006dcc <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006dac:	69bb      	ldr	r3, [r7, #24]
 8006dae:	015a      	lsls	r2, r3, #5
 8006db0:	69fb      	ldr	r3, [r7, #28]
 8006db2:	4413      	add	r3, r2
 8006db4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	69ba      	ldr	r2, [r7, #24]
 8006dbc:	0151      	lsls	r1, r2, #5
 8006dbe:	69fa      	ldr	r2, [r7, #28]
 8006dc0:	440a      	add	r2, r1
 8006dc2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006dc6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006dca:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006dcc:	69bb      	ldr	r3, [r7, #24]
 8006dce:	015a      	lsls	r2, r3, #5
 8006dd0:	69fb      	ldr	r3, [r7, #28]
 8006dd2:	4413      	add	r3, r2
 8006dd4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	69ba      	ldr	r2, [r7, #24]
 8006ddc:	0151      	lsls	r1, r2, #5
 8006dde:	69fa      	ldr	r2, [r7, #28]
 8006de0:	440a      	add	r2, r1
 8006de2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006de6:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8006dea:	6013      	str	r3, [r2, #0]
 8006dec:	e166      	b.n	80070bc <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006dee:	69bb      	ldr	r3, [r7, #24]
 8006df0:	015a      	lsls	r2, r3, #5
 8006df2:	69fb      	ldr	r3, [r7, #28]
 8006df4:	4413      	add	r3, r2
 8006df6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	69ba      	ldr	r2, [r7, #24]
 8006dfe:	0151      	lsls	r1, r2, #5
 8006e00:	69fa      	ldr	r2, [r7, #28]
 8006e02:	440a      	add	r2, r1
 8006e04:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006e08:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8006e0c:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006e0e:	68bb      	ldr	r3, [r7, #8]
 8006e10:	791b      	ldrb	r3, [r3, #4]
 8006e12:	2b01      	cmp	r3, #1
 8006e14:	d015      	beq.n	8006e42 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8006e16:	68bb      	ldr	r3, [r7, #8]
 8006e18:	691b      	ldr	r3, [r3, #16]
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	f000 814e 	beq.w	80070bc <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006e20:	69fb      	ldr	r3, [r7, #28]
 8006e22:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006e26:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006e28:	68bb      	ldr	r3, [r7, #8]
 8006e2a:	781b      	ldrb	r3, [r3, #0]
 8006e2c:	f003 030f 	and.w	r3, r3, #15
 8006e30:	2101      	movs	r1, #1
 8006e32:	fa01 f303 	lsl.w	r3, r1, r3
 8006e36:	69f9      	ldr	r1, [r7, #28]
 8006e38:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006e3c:	4313      	orrs	r3, r2
 8006e3e:	634b      	str	r3, [r1, #52]	@ 0x34
 8006e40:	e13c      	b.n	80070bc <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006e42:	69fb      	ldr	r3, [r7, #28]
 8006e44:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006e48:	689b      	ldr	r3, [r3, #8]
 8006e4a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d110      	bne.n	8006e74 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006e52:	69bb      	ldr	r3, [r7, #24]
 8006e54:	015a      	lsls	r2, r3, #5
 8006e56:	69fb      	ldr	r3, [r7, #28]
 8006e58:	4413      	add	r3, r2
 8006e5a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	69ba      	ldr	r2, [r7, #24]
 8006e62:	0151      	lsls	r1, r2, #5
 8006e64:	69fa      	ldr	r2, [r7, #28]
 8006e66:	440a      	add	r2, r1
 8006e68:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006e6c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006e70:	6013      	str	r3, [r2, #0]
 8006e72:	e00f      	b.n	8006e94 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006e74:	69bb      	ldr	r3, [r7, #24]
 8006e76:	015a      	lsls	r2, r3, #5
 8006e78:	69fb      	ldr	r3, [r7, #28]
 8006e7a:	4413      	add	r3, r2
 8006e7c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	69ba      	ldr	r2, [r7, #24]
 8006e84:	0151      	lsls	r1, r2, #5
 8006e86:	69fa      	ldr	r2, [r7, #28]
 8006e88:	440a      	add	r2, r1
 8006e8a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006e8e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006e92:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8006e94:	68bb      	ldr	r3, [r7, #8]
 8006e96:	68d9      	ldr	r1, [r3, #12]
 8006e98:	68bb      	ldr	r3, [r7, #8]
 8006e9a:	781a      	ldrb	r2, [r3, #0]
 8006e9c:	68bb      	ldr	r3, [r7, #8]
 8006e9e:	691b      	ldr	r3, [r3, #16]
 8006ea0:	b298      	uxth	r0, r3
 8006ea2:	79fb      	ldrb	r3, [r7, #7]
 8006ea4:	9300      	str	r3, [sp, #0]
 8006ea6:	4603      	mov	r3, r0
 8006ea8:	68f8      	ldr	r0, [r7, #12]
 8006eaa:	f000 f9b9 	bl	8007220 <USB_WritePacket>
 8006eae:	e105      	b.n	80070bc <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006eb0:	69bb      	ldr	r3, [r7, #24]
 8006eb2:	015a      	lsls	r2, r3, #5
 8006eb4:	69fb      	ldr	r3, [r7, #28]
 8006eb6:	4413      	add	r3, r2
 8006eb8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ebc:	691b      	ldr	r3, [r3, #16]
 8006ebe:	69ba      	ldr	r2, [r7, #24]
 8006ec0:	0151      	lsls	r1, r2, #5
 8006ec2:	69fa      	ldr	r2, [r7, #28]
 8006ec4:	440a      	add	r2, r1
 8006ec6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006eca:	0cdb      	lsrs	r3, r3, #19
 8006ecc:	04db      	lsls	r3, r3, #19
 8006ece:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006ed0:	69bb      	ldr	r3, [r7, #24]
 8006ed2:	015a      	lsls	r2, r3, #5
 8006ed4:	69fb      	ldr	r3, [r7, #28]
 8006ed6:	4413      	add	r3, r2
 8006ed8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006edc:	691b      	ldr	r3, [r3, #16]
 8006ede:	69ba      	ldr	r2, [r7, #24]
 8006ee0:	0151      	lsls	r1, r2, #5
 8006ee2:	69fa      	ldr	r2, [r7, #28]
 8006ee4:	440a      	add	r2, r1
 8006ee6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006eea:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8006eee:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8006ef2:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8006ef4:	69bb      	ldr	r3, [r7, #24]
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d132      	bne.n	8006f60 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 8006efa:	68bb      	ldr	r3, [r7, #8]
 8006efc:	691b      	ldr	r3, [r3, #16]
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d003      	beq.n	8006f0a <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 8006f02:	68bb      	ldr	r3, [r7, #8]
 8006f04:	689a      	ldr	r2, [r3, #8]
 8006f06:	68bb      	ldr	r3, [r7, #8]
 8006f08:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8006f0a:	68bb      	ldr	r3, [r7, #8]
 8006f0c:	689a      	ldr	r2, [r3, #8]
 8006f0e:	68bb      	ldr	r3, [r7, #8]
 8006f10:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8006f12:	69bb      	ldr	r3, [r7, #24]
 8006f14:	015a      	lsls	r2, r3, #5
 8006f16:	69fb      	ldr	r3, [r7, #28]
 8006f18:	4413      	add	r3, r2
 8006f1a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f1e:	691a      	ldr	r2, [r3, #16]
 8006f20:	68bb      	ldr	r3, [r7, #8]
 8006f22:	6a1b      	ldr	r3, [r3, #32]
 8006f24:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006f28:	69b9      	ldr	r1, [r7, #24]
 8006f2a:	0148      	lsls	r0, r1, #5
 8006f2c:	69f9      	ldr	r1, [r7, #28]
 8006f2e:	4401      	add	r1, r0
 8006f30:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006f34:	4313      	orrs	r3, r2
 8006f36:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006f38:	69bb      	ldr	r3, [r7, #24]
 8006f3a:	015a      	lsls	r2, r3, #5
 8006f3c:	69fb      	ldr	r3, [r7, #28]
 8006f3e:	4413      	add	r3, r2
 8006f40:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f44:	691b      	ldr	r3, [r3, #16]
 8006f46:	69ba      	ldr	r2, [r7, #24]
 8006f48:	0151      	lsls	r1, r2, #5
 8006f4a:	69fa      	ldr	r2, [r7, #28]
 8006f4c:	440a      	add	r2, r1
 8006f4e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006f52:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006f56:	6113      	str	r3, [r2, #16]
 8006f58:	e062      	b.n	8007020 <USB_EPStartXfer+0x490>
 8006f5a:	bf00      	nop
 8006f5c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8006f60:	68bb      	ldr	r3, [r7, #8]
 8006f62:	691b      	ldr	r3, [r3, #16]
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d123      	bne.n	8006fb0 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006f68:	69bb      	ldr	r3, [r7, #24]
 8006f6a:	015a      	lsls	r2, r3, #5
 8006f6c:	69fb      	ldr	r3, [r7, #28]
 8006f6e:	4413      	add	r3, r2
 8006f70:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f74:	691a      	ldr	r2, [r3, #16]
 8006f76:	68bb      	ldr	r3, [r7, #8]
 8006f78:	689b      	ldr	r3, [r3, #8]
 8006f7a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006f7e:	69b9      	ldr	r1, [r7, #24]
 8006f80:	0148      	lsls	r0, r1, #5
 8006f82:	69f9      	ldr	r1, [r7, #28]
 8006f84:	4401      	add	r1, r0
 8006f86:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006f8a:	4313      	orrs	r3, r2
 8006f8c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006f8e:	69bb      	ldr	r3, [r7, #24]
 8006f90:	015a      	lsls	r2, r3, #5
 8006f92:	69fb      	ldr	r3, [r7, #28]
 8006f94:	4413      	add	r3, r2
 8006f96:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f9a:	691b      	ldr	r3, [r3, #16]
 8006f9c:	69ba      	ldr	r2, [r7, #24]
 8006f9e:	0151      	lsls	r1, r2, #5
 8006fa0:	69fa      	ldr	r2, [r7, #28]
 8006fa2:	440a      	add	r2, r1
 8006fa4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006fa8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006fac:	6113      	str	r3, [r2, #16]
 8006fae:	e037      	b.n	8007020 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006fb0:	68bb      	ldr	r3, [r7, #8]
 8006fb2:	691a      	ldr	r2, [r3, #16]
 8006fb4:	68bb      	ldr	r3, [r7, #8]
 8006fb6:	689b      	ldr	r3, [r3, #8]
 8006fb8:	4413      	add	r3, r2
 8006fba:	1e5a      	subs	r2, r3, #1
 8006fbc:	68bb      	ldr	r3, [r7, #8]
 8006fbe:	689b      	ldr	r3, [r3, #8]
 8006fc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006fc4:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8006fc6:	68bb      	ldr	r3, [r7, #8]
 8006fc8:	689b      	ldr	r3, [r3, #8]
 8006fca:	8afa      	ldrh	r2, [r7, #22]
 8006fcc:	fb03 f202 	mul.w	r2, r3, r2
 8006fd0:	68bb      	ldr	r3, [r7, #8]
 8006fd2:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006fd4:	69bb      	ldr	r3, [r7, #24]
 8006fd6:	015a      	lsls	r2, r3, #5
 8006fd8:	69fb      	ldr	r3, [r7, #28]
 8006fda:	4413      	add	r3, r2
 8006fdc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006fe0:	691a      	ldr	r2, [r3, #16]
 8006fe2:	8afb      	ldrh	r3, [r7, #22]
 8006fe4:	04d9      	lsls	r1, r3, #19
 8006fe6:	4b38      	ldr	r3, [pc, #224]	@ (80070c8 <USB_EPStartXfer+0x538>)
 8006fe8:	400b      	ands	r3, r1
 8006fea:	69b9      	ldr	r1, [r7, #24]
 8006fec:	0148      	lsls	r0, r1, #5
 8006fee:	69f9      	ldr	r1, [r7, #28]
 8006ff0:	4401      	add	r1, r0
 8006ff2:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006ff6:	4313      	orrs	r3, r2
 8006ff8:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8006ffa:	69bb      	ldr	r3, [r7, #24]
 8006ffc:	015a      	lsls	r2, r3, #5
 8006ffe:	69fb      	ldr	r3, [r7, #28]
 8007000:	4413      	add	r3, r2
 8007002:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007006:	691a      	ldr	r2, [r3, #16]
 8007008:	68bb      	ldr	r3, [r7, #8]
 800700a:	6a1b      	ldr	r3, [r3, #32]
 800700c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007010:	69b9      	ldr	r1, [r7, #24]
 8007012:	0148      	lsls	r0, r1, #5
 8007014:	69f9      	ldr	r1, [r7, #28]
 8007016:	4401      	add	r1, r0
 8007018:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800701c:	4313      	orrs	r3, r2
 800701e:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8007020:	79fb      	ldrb	r3, [r7, #7]
 8007022:	2b01      	cmp	r3, #1
 8007024:	d10d      	bne.n	8007042 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007026:	68bb      	ldr	r3, [r7, #8]
 8007028:	68db      	ldr	r3, [r3, #12]
 800702a:	2b00      	cmp	r3, #0
 800702c:	d009      	beq.n	8007042 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800702e:	68bb      	ldr	r3, [r7, #8]
 8007030:	68d9      	ldr	r1, [r3, #12]
 8007032:	69bb      	ldr	r3, [r7, #24]
 8007034:	015a      	lsls	r2, r3, #5
 8007036:	69fb      	ldr	r3, [r7, #28]
 8007038:	4413      	add	r3, r2
 800703a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800703e:	460a      	mov	r2, r1
 8007040:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8007042:	68bb      	ldr	r3, [r7, #8]
 8007044:	791b      	ldrb	r3, [r3, #4]
 8007046:	2b01      	cmp	r3, #1
 8007048:	d128      	bne.n	800709c <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800704a:	69fb      	ldr	r3, [r7, #28]
 800704c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007050:	689b      	ldr	r3, [r3, #8]
 8007052:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007056:	2b00      	cmp	r3, #0
 8007058:	d110      	bne.n	800707c <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800705a:	69bb      	ldr	r3, [r7, #24]
 800705c:	015a      	lsls	r2, r3, #5
 800705e:	69fb      	ldr	r3, [r7, #28]
 8007060:	4413      	add	r3, r2
 8007062:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	69ba      	ldr	r2, [r7, #24]
 800706a:	0151      	lsls	r1, r2, #5
 800706c:	69fa      	ldr	r2, [r7, #28]
 800706e:	440a      	add	r2, r1
 8007070:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007074:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007078:	6013      	str	r3, [r2, #0]
 800707a:	e00f      	b.n	800709c <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800707c:	69bb      	ldr	r3, [r7, #24]
 800707e:	015a      	lsls	r2, r3, #5
 8007080:	69fb      	ldr	r3, [r7, #28]
 8007082:	4413      	add	r3, r2
 8007084:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	69ba      	ldr	r2, [r7, #24]
 800708c:	0151      	lsls	r1, r2, #5
 800708e:	69fa      	ldr	r2, [r7, #28]
 8007090:	440a      	add	r2, r1
 8007092:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007096:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800709a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800709c:	69bb      	ldr	r3, [r7, #24]
 800709e:	015a      	lsls	r2, r3, #5
 80070a0:	69fb      	ldr	r3, [r7, #28]
 80070a2:	4413      	add	r3, r2
 80070a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	69ba      	ldr	r2, [r7, #24]
 80070ac:	0151      	lsls	r1, r2, #5
 80070ae:	69fa      	ldr	r2, [r7, #28]
 80070b0:	440a      	add	r2, r1
 80070b2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80070b6:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80070ba:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80070bc:	2300      	movs	r3, #0
}
 80070be:	4618      	mov	r0, r3
 80070c0:	3720      	adds	r7, #32
 80070c2:	46bd      	mov	sp, r7
 80070c4:	bd80      	pop	{r7, pc}
 80070c6:	bf00      	nop
 80070c8:	1ff80000 	.word	0x1ff80000

080070cc <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80070cc:	b480      	push	{r7}
 80070ce:	b087      	sub	sp, #28
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	6078      	str	r0, [r7, #4]
 80070d4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80070d6:	2300      	movs	r3, #0
 80070d8:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80070da:	2300      	movs	r3, #0
 80070dc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80070e2:	683b      	ldr	r3, [r7, #0]
 80070e4:	785b      	ldrb	r3, [r3, #1]
 80070e6:	2b01      	cmp	r3, #1
 80070e8:	d14a      	bne.n	8007180 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80070ea:	683b      	ldr	r3, [r7, #0]
 80070ec:	781b      	ldrb	r3, [r3, #0]
 80070ee:	015a      	lsls	r2, r3, #5
 80070f0:	693b      	ldr	r3, [r7, #16]
 80070f2:	4413      	add	r3, r2
 80070f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80070fe:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007102:	f040 8086 	bne.w	8007212 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8007106:	683b      	ldr	r3, [r7, #0]
 8007108:	781b      	ldrb	r3, [r3, #0]
 800710a:	015a      	lsls	r2, r3, #5
 800710c:	693b      	ldr	r3, [r7, #16]
 800710e:	4413      	add	r3, r2
 8007110:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	683a      	ldr	r2, [r7, #0]
 8007118:	7812      	ldrb	r2, [r2, #0]
 800711a:	0151      	lsls	r1, r2, #5
 800711c:	693a      	ldr	r2, [r7, #16]
 800711e:	440a      	add	r2, r1
 8007120:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007124:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007128:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800712a:	683b      	ldr	r3, [r7, #0]
 800712c:	781b      	ldrb	r3, [r3, #0]
 800712e:	015a      	lsls	r2, r3, #5
 8007130:	693b      	ldr	r3, [r7, #16]
 8007132:	4413      	add	r3, r2
 8007134:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	683a      	ldr	r2, [r7, #0]
 800713c:	7812      	ldrb	r2, [r2, #0]
 800713e:	0151      	lsls	r1, r2, #5
 8007140:	693a      	ldr	r2, [r7, #16]
 8007142:	440a      	add	r2, r1
 8007144:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007148:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800714c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	3301      	adds	r3, #1
 8007152:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	f242 7210 	movw	r2, #10000	@ 0x2710
 800715a:	4293      	cmp	r3, r2
 800715c:	d902      	bls.n	8007164 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800715e:	2301      	movs	r3, #1
 8007160:	75fb      	strb	r3, [r7, #23]
          break;
 8007162:	e056      	b.n	8007212 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8007164:	683b      	ldr	r3, [r7, #0]
 8007166:	781b      	ldrb	r3, [r3, #0]
 8007168:	015a      	lsls	r2, r3, #5
 800716a:	693b      	ldr	r3, [r7, #16]
 800716c:	4413      	add	r3, r2
 800716e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007178:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800717c:	d0e7      	beq.n	800714e <USB_EPStopXfer+0x82>
 800717e:	e048      	b.n	8007212 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007180:	683b      	ldr	r3, [r7, #0]
 8007182:	781b      	ldrb	r3, [r3, #0]
 8007184:	015a      	lsls	r2, r3, #5
 8007186:	693b      	ldr	r3, [r7, #16]
 8007188:	4413      	add	r3, r2
 800718a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007194:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007198:	d13b      	bne.n	8007212 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800719a:	683b      	ldr	r3, [r7, #0]
 800719c:	781b      	ldrb	r3, [r3, #0]
 800719e:	015a      	lsls	r2, r3, #5
 80071a0:	693b      	ldr	r3, [r7, #16]
 80071a2:	4413      	add	r3, r2
 80071a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	683a      	ldr	r2, [r7, #0]
 80071ac:	7812      	ldrb	r2, [r2, #0]
 80071ae:	0151      	lsls	r1, r2, #5
 80071b0:	693a      	ldr	r2, [r7, #16]
 80071b2:	440a      	add	r2, r1
 80071b4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80071b8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80071bc:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80071be:	683b      	ldr	r3, [r7, #0]
 80071c0:	781b      	ldrb	r3, [r3, #0]
 80071c2:	015a      	lsls	r2, r3, #5
 80071c4:	693b      	ldr	r3, [r7, #16]
 80071c6:	4413      	add	r3, r2
 80071c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	683a      	ldr	r2, [r7, #0]
 80071d0:	7812      	ldrb	r2, [r2, #0]
 80071d2:	0151      	lsls	r1, r2, #5
 80071d4:	693a      	ldr	r2, [r7, #16]
 80071d6:	440a      	add	r2, r1
 80071d8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80071dc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80071e0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	3301      	adds	r3, #1
 80071e6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	f242 7210 	movw	r2, #10000	@ 0x2710
 80071ee:	4293      	cmp	r3, r2
 80071f0:	d902      	bls.n	80071f8 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80071f2:	2301      	movs	r3, #1
 80071f4:	75fb      	strb	r3, [r7, #23]
          break;
 80071f6:	e00c      	b.n	8007212 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80071f8:	683b      	ldr	r3, [r7, #0]
 80071fa:	781b      	ldrb	r3, [r3, #0]
 80071fc:	015a      	lsls	r2, r3, #5
 80071fe:	693b      	ldr	r3, [r7, #16]
 8007200:	4413      	add	r3, r2
 8007202:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800720c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007210:	d0e7      	beq.n	80071e2 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8007212:	7dfb      	ldrb	r3, [r7, #23]
}
 8007214:	4618      	mov	r0, r3
 8007216:	371c      	adds	r7, #28
 8007218:	46bd      	mov	sp, r7
 800721a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800721e:	4770      	bx	lr

08007220 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007220:	b480      	push	{r7}
 8007222:	b089      	sub	sp, #36	@ 0x24
 8007224:	af00      	add	r7, sp, #0
 8007226:	60f8      	str	r0, [r7, #12]
 8007228:	60b9      	str	r1, [r7, #8]
 800722a:	4611      	mov	r1, r2
 800722c:	461a      	mov	r2, r3
 800722e:	460b      	mov	r3, r1
 8007230:	71fb      	strb	r3, [r7, #7]
 8007232:	4613      	mov	r3, r2
 8007234:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800723a:	68bb      	ldr	r3, [r7, #8]
 800723c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800723e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007242:	2b00      	cmp	r3, #0
 8007244:	d123      	bne.n	800728e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007246:	88bb      	ldrh	r3, [r7, #4]
 8007248:	3303      	adds	r3, #3
 800724a:	089b      	lsrs	r3, r3, #2
 800724c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800724e:	2300      	movs	r3, #0
 8007250:	61bb      	str	r3, [r7, #24]
 8007252:	e018      	b.n	8007286 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007254:	79fb      	ldrb	r3, [r7, #7]
 8007256:	031a      	lsls	r2, r3, #12
 8007258:	697b      	ldr	r3, [r7, #20]
 800725a:	4413      	add	r3, r2
 800725c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007260:	461a      	mov	r2, r3
 8007262:	69fb      	ldr	r3, [r7, #28]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007268:	69fb      	ldr	r3, [r7, #28]
 800726a:	3301      	adds	r3, #1
 800726c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800726e:	69fb      	ldr	r3, [r7, #28]
 8007270:	3301      	adds	r3, #1
 8007272:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007274:	69fb      	ldr	r3, [r7, #28]
 8007276:	3301      	adds	r3, #1
 8007278:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800727a:	69fb      	ldr	r3, [r7, #28]
 800727c:	3301      	adds	r3, #1
 800727e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007280:	69bb      	ldr	r3, [r7, #24]
 8007282:	3301      	adds	r3, #1
 8007284:	61bb      	str	r3, [r7, #24]
 8007286:	69ba      	ldr	r2, [r7, #24]
 8007288:	693b      	ldr	r3, [r7, #16]
 800728a:	429a      	cmp	r2, r3
 800728c:	d3e2      	bcc.n	8007254 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800728e:	2300      	movs	r3, #0
}
 8007290:	4618      	mov	r0, r3
 8007292:	3724      	adds	r7, #36	@ 0x24
 8007294:	46bd      	mov	sp, r7
 8007296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800729a:	4770      	bx	lr

0800729c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800729c:	b480      	push	{r7}
 800729e:	b08b      	sub	sp, #44	@ 0x2c
 80072a0:	af00      	add	r7, sp, #0
 80072a2:	60f8      	str	r0, [r7, #12]
 80072a4:	60b9      	str	r1, [r7, #8]
 80072a6:	4613      	mov	r3, r2
 80072a8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80072ae:	68bb      	ldr	r3, [r7, #8]
 80072b0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80072b2:	88fb      	ldrh	r3, [r7, #6]
 80072b4:	089b      	lsrs	r3, r3, #2
 80072b6:	b29b      	uxth	r3, r3
 80072b8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80072ba:	88fb      	ldrh	r3, [r7, #6]
 80072bc:	f003 0303 	and.w	r3, r3, #3
 80072c0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80072c2:	2300      	movs	r3, #0
 80072c4:	623b      	str	r3, [r7, #32]
 80072c6:	e014      	b.n	80072f2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80072c8:	69bb      	ldr	r3, [r7, #24]
 80072ca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80072ce:	681a      	ldr	r2, [r3, #0]
 80072d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072d2:	601a      	str	r2, [r3, #0]
    pDest++;
 80072d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072d6:	3301      	adds	r3, #1
 80072d8:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80072da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072dc:	3301      	adds	r3, #1
 80072de:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80072e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072e2:	3301      	adds	r3, #1
 80072e4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80072e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072e8:	3301      	adds	r3, #1
 80072ea:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 80072ec:	6a3b      	ldr	r3, [r7, #32]
 80072ee:	3301      	adds	r3, #1
 80072f0:	623b      	str	r3, [r7, #32]
 80072f2:	6a3a      	ldr	r2, [r7, #32]
 80072f4:	697b      	ldr	r3, [r7, #20]
 80072f6:	429a      	cmp	r2, r3
 80072f8:	d3e6      	bcc.n	80072c8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80072fa:	8bfb      	ldrh	r3, [r7, #30]
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d01e      	beq.n	800733e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007300:	2300      	movs	r3, #0
 8007302:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007304:	69bb      	ldr	r3, [r7, #24]
 8007306:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800730a:	461a      	mov	r2, r3
 800730c:	f107 0310 	add.w	r3, r7, #16
 8007310:	6812      	ldr	r2, [r2, #0]
 8007312:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007314:	693a      	ldr	r2, [r7, #16]
 8007316:	6a3b      	ldr	r3, [r7, #32]
 8007318:	b2db      	uxtb	r3, r3
 800731a:	00db      	lsls	r3, r3, #3
 800731c:	fa22 f303 	lsr.w	r3, r2, r3
 8007320:	b2da      	uxtb	r2, r3
 8007322:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007324:	701a      	strb	r2, [r3, #0]
      i++;
 8007326:	6a3b      	ldr	r3, [r7, #32]
 8007328:	3301      	adds	r3, #1
 800732a:	623b      	str	r3, [r7, #32]
      pDest++;
 800732c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800732e:	3301      	adds	r3, #1
 8007330:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8007332:	8bfb      	ldrh	r3, [r7, #30]
 8007334:	3b01      	subs	r3, #1
 8007336:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007338:	8bfb      	ldrh	r3, [r7, #30]
 800733a:	2b00      	cmp	r3, #0
 800733c:	d1ea      	bne.n	8007314 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800733e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007340:	4618      	mov	r0, r3
 8007342:	372c      	adds	r7, #44	@ 0x2c
 8007344:	46bd      	mov	sp, r7
 8007346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800734a:	4770      	bx	lr

0800734c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800734c:	b480      	push	{r7}
 800734e:	b085      	sub	sp, #20
 8007350:	af00      	add	r7, sp, #0
 8007352:	6078      	str	r0, [r7, #4]
 8007354:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800735a:	683b      	ldr	r3, [r7, #0]
 800735c:	781b      	ldrb	r3, [r3, #0]
 800735e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007360:	683b      	ldr	r3, [r7, #0]
 8007362:	785b      	ldrb	r3, [r3, #1]
 8007364:	2b01      	cmp	r3, #1
 8007366:	d12c      	bne.n	80073c2 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007368:	68bb      	ldr	r3, [r7, #8]
 800736a:	015a      	lsls	r2, r3, #5
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	4413      	add	r3, r2
 8007370:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	2b00      	cmp	r3, #0
 8007378:	db12      	blt.n	80073a0 <USB_EPSetStall+0x54>
 800737a:	68bb      	ldr	r3, [r7, #8]
 800737c:	2b00      	cmp	r3, #0
 800737e:	d00f      	beq.n	80073a0 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8007380:	68bb      	ldr	r3, [r7, #8]
 8007382:	015a      	lsls	r2, r3, #5
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	4413      	add	r3, r2
 8007388:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	68ba      	ldr	r2, [r7, #8]
 8007390:	0151      	lsls	r1, r2, #5
 8007392:	68fa      	ldr	r2, [r7, #12]
 8007394:	440a      	add	r2, r1
 8007396:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800739a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800739e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80073a0:	68bb      	ldr	r3, [r7, #8]
 80073a2:	015a      	lsls	r2, r3, #5
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	4413      	add	r3, r2
 80073a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	68ba      	ldr	r2, [r7, #8]
 80073b0:	0151      	lsls	r1, r2, #5
 80073b2:	68fa      	ldr	r2, [r7, #12]
 80073b4:	440a      	add	r2, r1
 80073b6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80073ba:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80073be:	6013      	str	r3, [r2, #0]
 80073c0:	e02b      	b.n	800741a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80073c2:	68bb      	ldr	r3, [r7, #8]
 80073c4:	015a      	lsls	r2, r3, #5
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	4413      	add	r3, r2
 80073ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	db12      	blt.n	80073fa <USB_EPSetStall+0xae>
 80073d4:	68bb      	ldr	r3, [r7, #8]
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d00f      	beq.n	80073fa <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80073da:	68bb      	ldr	r3, [r7, #8]
 80073dc:	015a      	lsls	r2, r3, #5
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	4413      	add	r3, r2
 80073e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	68ba      	ldr	r2, [r7, #8]
 80073ea:	0151      	lsls	r1, r2, #5
 80073ec:	68fa      	ldr	r2, [r7, #12]
 80073ee:	440a      	add	r2, r1
 80073f0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80073f4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80073f8:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80073fa:	68bb      	ldr	r3, [r7, #8]
 80073fc:	015a      	lsls	r2, r3, #5
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	4413      	add	r3, r2
 8007402:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	68ba      	ldr	r2, [r7, #8]
 800740a:	0151      	lsls	r1, r2, #5
 800740c:	68fa      	ldr	r2, [r7, #12]
 800740e:	440a      	add	r2, r1
 8007410:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007414:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007418:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800741a:	2300      	movs	r3, #0
}
 800741c:	4618      	mov	r0, r3
 800741e:	3714      	adds	r7, #20
 8007420:	46bd      	mov	sp, r7
 8007422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007426:	4770      	bx	lr

08007428 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007428:	b480      	push	{r7}
 800742a:	b085      	sub	sp, #20
 800742c:	af00      	add	r7, sp, #0
 800742e:	6078      	str	r0, [r7, #4]
 8007430:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007436:	683b      	ldr	r3, [r7, #0]
 8007438:	781b      	ldrb	r3, [r3, #0]
 800743a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800743c:	683b      	ldr	r3, [r7, #0]
 800743e:	785b      	ldrb	r3, [r3, #1]
 8007440:	2b01      	cmp	r3, #1
 8007442:	d128      	bne.n	8007496 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007444:	68bb      	ldr	r3, [r7, #8]
 8007446:	015a      	lsls	r2, r3, #5
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	4413      	add	r3, r2
 800744c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	68ba      	ldr	r2, [r7, #8]
 8007454:	0151      	lsls	r1, r2, #5
 8007456:	68fa      	ldr	r2, [r7, #12]
 8007458:	440a      	add	r2, r1
 800745a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800745e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007462:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007464:	683b      	ldr	r3, [r7, #0]
 8007466:	791b      	ldrb	r3, [r3, #4]
 8007468:	2b03      	cmp	r3, #3
 800746a:	d003      	beq.n	8007474 <USB_EPClearStall+0x4c>
 800746c:	683b      	ldr	r3, [r7, #0]
 800746e:	791b      	ldrb	r3, [r3, #4]
 8007470:	2b02      	cmp	r3, #2
 8007472:	d138      	bne.n	80074e6 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007474:	68bb      	ldr	r3, [r7, #8]
 8007476:	015a      	lsls	r2, r3, #5
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	4413      	add	r3, r2
 800747c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	68ba      	ldr	r2, [r7, #8]
 8007484:	0151      	lsls	r1, r2, #5
 8007486:	68fa      	ldr	r2, [r7, #12]
 8007488:	440a      	add	r2, r1
 800748a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800748e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007492:	6013      	str	r3, [r2, #0]
 8007494:	e027      	b.n	80074e6 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007496:	68bb      	ldr	r3, [r7, #8]
 8007498:	015a      	lsls	r2, r3, #5
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	4413      	add	r3, r2
 800749e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	68ba      	ldr	r2, [r7, #8]
 80074a6:	0151      	lsls	r1, r2, #5
 80074a8:	68fa      	ldr	r2, [r7, #12]
 80074aa:	440a      	add	r2, r1
 80074ac:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80074b0:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80074b4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80074b6:	683b      	ldr	r3, [r7, #0]
 80074b8:	791b      	ldrb	r3, [r3, #4]
 80074ba:	2b03      	cmp	r3, #3
 80074bc:	d003      	beq.n	80074c6 <USB_EPClearStall+0x9e>
 80074be:	683b      	ldr	r3, [r7, #0]
 80074c0:	791b      	ldrb	r3, [r3, #4]
 80074c2:	2b02      	cmp	r3, #2
 80074c4:	d10f      	bne.n	80074e6 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80074c6:	68bb      	ldr	r3, [r7, #8]
 80074c8:	015a      	lsls	r2, r3, #5
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	4413      	add	r3, r2
 80074ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	68ba      	ldr	r2, [r7, #8]
 80074d6:	0151      	lsls	r1, r2, #5
 80074d8:	68fa      	ldr	r2, [r7, #12]
 80074da:	440a      	add	r2, r1
 80074dc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80074e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80074e4:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80074e6:	2300      	movs	r3, #0
}
 80074e8:	4618      	mov	r0, r3
 80074ea:	3714      	adds	r7, #20
 80074ec:	46bd      	mov	sp, r7
 80074ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f2:	4770      	bx	lr

080074f4 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80074f4:	b480      	push	{r7}
 80074f6:	b085      	sub	sp, #20
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	6078      	str	r0, [r7, #4]
 80074fc:	460b      	mov	r3, r1
 80074fe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	68fa      	ldr	r2, [r7, #12]
 800750e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007512:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8007516:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800751e:	681a      	ldr	r2, [r3, #0]
 8007520:	78fb      	ldrb	r3, [r7, #3]
 8007522:	011b      	lsls	r3, r3, #4
 8007524:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8007528:	68f9      	ldr	r1, [r7, #12]
 800752a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800752e:	4313      	orrs	r3, r2
 8007530:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8007532:	2300      	movs	r3, #0
}
 8007534:	4618      	mov	r0, r3
 8007536:	3714      	adds	r7, #20
 8007538:	46bd      	mov	sp, r7
 800753a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800753e:	4770      	bx	lr

08007540 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8007540:	b480      	push	{r7}
 8007542:	b085      	sub	sp, #20
 8007544:	af00      	add	r7, sp, #0
 8007546:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	68fa      	ldr	r2, [r7, #12]
 8007556:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800755a:	f023 0303 	bic.w	r3, r3, #3
 800755e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007566:	685b      	ldr	r3, [r3, #4]
 8007568:	68fa      	ldr	r2, [r7, #12]
 800756a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800756e:	f023 0302 	bic.w	r3, r3, #2
 8007572:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007574:	2300      	movs	r3, #0
}
 8007576:	4618      	mov	r0, r3
 8007578:	3714      	adds	r7, #20
 800757a:	46bd      	mov	sp, r7
 800757c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007580:	4770      	bx	lr

08007582 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8007582:	b480      	push	{r7}
 8007584:	b085      	sub	sp, #20
 8007586:	af00      	add	r7, sp, #0
 8007588:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	68fa      	ldr	r2, [r7, #12]
 8007598:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800759c:	f023 0303 	bic.w	r3, r3, #3
 80075a0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80075a8:	685b      	ldr	r3, [r3, #4]
 80075aa:	68fa      	ldr	r2, [r7, #12]
 80075ac:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80075b0:	f043 0302 	orr.w	r3, r3, #2
 80075b4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80075b6:	2300      	movs	r3, #0
}
 80075b8:	4618      	mov	r0, r3
 80075ba:	3714      	adds	r7, #20
 80075bc:	46bd      	mov	sp, r7
 80075be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c2:	4770      	bx	lr

080075c4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80075c4:	b480      	push	{r7}
 80075c6:	b085      	sub	sp, #20
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	695b      	ldr	r3, [r3, #20]
 80075d0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	699b      	ldr	r3, [r3, #24]
 80075d6:	68fa      	ldr	r2, [r7, #12]
 80075d8:	4013      	ands	r3, r2
 80075da:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80075dc:	68fb      	ldr	r3, [r7, #12]
}
 80075de:	4618      	mov	r0, r3
 80075e0:	3714      	adds	r7, #20
 80075e2:	46bd      	mov	sp, r7
 80075e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e8:	4770      	bx	lr

080075ea <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80075ea:	b480      	push	{r7}
 80075ec:	b085      	sub	sp, #20
 80075ee:	af00      	add	r7, sp, #0
 80075f0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80075fc:	699b      	ldr	r3, [r3, #24]
 80075fe:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007606:	69db      	ldr	r3, [r3, #28]
 8007608:	68ba      	ldr	r2, [r7, #8]
 800760a:	4013      	ands	r3, r2
 800760c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800760e:	68bb      	ldr	r3, [r7, #8]
 8007610:	0c1b      	lsrs	r3, r3, #16
}
 8007612:	4618      	mov	r0, r3
 8007614:	3714      	adds	r7, #20
 8007616:	46bd      	mov	sp, r7
 8007618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800761c:	4770      	bx	lr

0800761e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800761e:	b480      	push	{r7}
 8007620:	b085      	sub	sp, #20
 8007622:	af00      	add	r7, sp, #0
 8007624:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007630:	699b      	ldr	r3, [r3, #24]
 8007632:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800763a:	69db      	ldr	r3, [r3, #28]
 800763c:	68ba      	ldr	r2, [r7, #8]
 800763e:	4013      	ands	r3, r2
 8007640:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8007642:	68bb      	ldr	r3, [r7, #8]
 8007644:	b29b      	uxth	r3, r3
}
 8007646:	4618      	mov	r0, r3
 8007648:	3714      	adds	r7, #20
 800764a:	46bd      	mov	sp, r7
 800764c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007650:	4770      	bx	lr

08007652 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007652:	b480      	push	{r7}
 8007654:	b085      	sub	sp, #20
 8007656:	af00      	add	r7, sp, #0
 8007658:	6078      	str	r0, [r7, #4]
 800765a:	460b      	mov	r3, r1
 800765c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8007662:	78fb      	ldrb	r3, [r7, #3]
 8007664:	015a      	lsls	r2, r3, #5
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	4413      	add	r3, r2
 800766a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800766e:	689b      	ldr	r3, [r3, #8]
 8007670:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007678:	695b      	ldr	r3, [r3, #20]
 800767a:	68ba      	ldr	r2, [r7, #8]
 800767c:	4013      	ands	r3, r2
 800767e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007680:	68bb      	ldr	r3, [r7, #8]
}
 8007682:	4618      	mov	r0, r3
 8007684:	3714      	adds	r7, #20
 8007686:	46bd      	mov	sp, r7
 8007688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800768c:	4770      	bx	lr

0800768e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800768e:	b480      	push	{r7}
 8007690:	b087      	sub	sp, #28
 8007692:	af00      	add	r7, sp, #0
 8007694:	6078      	str	r0, [r7, #4]
 8007696:	460b      	mov	r3, r1
 8007698:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800769e:	697b      	ldr	r3, [r7, #20]
 80076a0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80076a4:	691b      	ldr	r3, [r3, #16]
 80076a6:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80076a8:	697b      	ldr	r3, [r7, #20]
 80076aa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80076ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80076b0:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80076b2:	78fb      	ldrb	r3, [r7, #3]
 80076b4:	f003 030f 	and.w	r3, r3, #15
 80076b8:	68fa      	ldr	r2, [r7, #12]
 80076ba:	fa22 f303 	lsr.w	r3, r2, r3
 80076be:	01db      	lsls	r3, r3, #7
 80076c0:	b2db      	uxtb	r3, r3
 80076c2:	693a      	ldr	r2, [r7, #16]
 80076c4:	4313      	orrs	r3, r2
 80076c6:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80076c8:	78fb      	ldrb	r3, [r7, #3]
 80076ca:	015a      	lsls	r2, r3, #5
 80076cc:	697b      	ldr	r3, [r7, #20]
 80076ce:	4413      	add	r3, r2
 80076d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80076d4:	689b      	ldr	r3, [r3, #8]
 80076d6:	693a      	ldr	r2, [r7, #16]
 80076d8:	4013      	ands	r3, r2
 80076da:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80076dc:	68bb      	ldr	r3, [r7, #8]
}
 80076de:	4618      	mov	r0, r3
 80076e0:	371c      	adds	r7, #28
 80076e2:	46bd      	mov	sp, r7
 80076e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e8:	4770      	bx	lr

080076ea <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80076ea:	b480      	push	{r7}
 80076ec:	b083      	sub	sp, #12
 80076ee:	af00      	add	r7, sp, #0
 80076f0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	695b      	ldr	r3, [r3, #20]
 80076f6:	f003 0301 	and.w	r3, r3, #1
}
 80076fa:	4618      	mov	r0, r3
 80076fc:	370c      	adds	r7, #12
 80076fe:	46bd      	mov	sp, r7
 8007700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007704:	4770      	bx	lr

08007706 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8007706:	b480      	push	{r7}
 8007708:	b085      	sub	sp, #20
 800770a:	af00      	add	r7, sp, #0
 800770c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	68fa      	ldr	r2, [r7, #12]
 800771c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007720:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8007724:	f023 0307 	bic.w	r3, r3, #7
 8007728:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007730:	685b      	ldr	r3, [r3, #4]
 8007732:	68fa      	ldr	r2, [r7, #12]
 8007734:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007738:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800773c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800773e:	2300      	movs	r3, #0
}
 8007740:	4618      	mov	r0, r3
 8007742:	3714      	adds	r7, #20
 8007744:	46bd      	mov	sp, r7
 8007746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800774a:	4770      	bx	lr

0800774c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800774c:	b480      	push	{r7}
 800774e:	b087      	sub	sp, #28
 8007750:	af00      	add	r7, sp, #0
 8007752:	60f8      	str	r0, [r7, #12]
 8007754:	460b      	mov	r3, r1
 8007756:	607a      	str	r2, [r7, #4]
 8007758:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	333c      	adds	r3, #60	@ 0x3c
 8007762:	3304      	adds	r3, #4
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8007768:	693b      	ldr	r3, [r7, #16]
 800776a:	4a26      	ldr	r2, [pc, #152]	@ (8007804 <USB_EP0_OutStart+0xb8>)
 800776c:	4293      	cmp	r3, r2
 800776e:	d90a      	bls.n	8007786 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007770:	697b      	ldr	r3, [r7, #20]
 8007772:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800777c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007780:	d101      	bne.n	8007786 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8007782:	2300      	movs	r3, #0
 8007784:	e037      	b.n	80077f6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8007786:	697b      	ldr	r3, [r7, #20]
 8007788:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800778c:	461a      	mov	r2, r3
 800778e:	2300      	movs	r3, #0
 8007790:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007792:	697b      	ldr	r3, [r7, #20]
 8007794:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007798:	691b      	ldr	r3, [r3, #16]
 800779a:	697a      	ldr	r2, [r7, #20]
 800779c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80077a0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80077a4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80077a6:	697b      	ldr	r3, [r7, #20]
 80077a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80077ac:	691b      	ldr	r3, [r3, #16]
 80077ae:	697a      	ldr	r2, [r7, #20]
 80077b0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80077b4:	f043 0318 	orr.w	r3, r3, #24
 80077b8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80077ba:	697b      	ldr	r3, [r7, #20]
 80077bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80077c0:	691b      	ldr	r3, [r3, #16]
 80077c2:	697a      	ldr	r2, [r7, #20]
 80077c4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80077c8:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 80077cc:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80077ce:	7afb      	ldrb	r3, [r7, #11]
 80077d0:	2b01      	cmp	r3, #1
 80077d2:	d10f      	bne.n	80077f4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80077d4:	697b      	ldr	r3, [r7, #20]
 80077d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80077da:	461a      	mov	r2, r3
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80077e0:	697b      	ldr	r3, [r7, #20]
 80077e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	697a      	ldr	r2, [r7, #20]
 80077ea:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80077ee:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 80077f2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80077f4:	2300      	movs	r3, #0
}
 80077f6:	4618      	mov	r0, r3
 80077f8:	371c      	adds	r7, #28
 80077fa:	46bd      	mov	sp, r7
 80077fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007800:	4770      	bx	lr
 8007802:	bf00      	nop
 8007804:	4f54300a 	.word	0x4f54300a

08007808 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007808:	b480      	push	{r7}
 800780a:	b085      	sub	sp, #20
 800780c:	af00      	add	r7, sp, #0
 800780e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007810:	2300      	movs	r3, #0
 8007812:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	3301      	adds	r3, #1
 8007818:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007820:	d901      	bls.n	8007826 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007822:	2303      	movs	r3, #3
 8007824:	e022      	b.n	800786c <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	691b      	ldr	r3, [r3, #16]
 800782a:	2b00      	cmp	r3, #0
 800782c:	daf2      	bge.n	8007814 <USB_CoreReset+0xc>

  count = 10U;
 800782e:	230a      	movs	r3, #10
 8007830:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 8007832:	e002      	b.n	800783a <USB_CoreReset+0x32>
  {
    count--;
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	3b01      	subs	r3, #1
 8007838:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	2b00      	cmp	r3, #0
 800783e:	d1f9      	bne.n	8007834 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	691b      	ldr	r3, [r3, #16]
 8007844:	f043 0201 	orr.w	r2, r3, #1
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	3301      	adds	r3, #1
 8007850:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007858:	d901      	bls.n	800785e <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 800785a:	2303      	movs	r3, #3
 800785c:	e006      	b.n	800786c <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	691b      	ldr	r3, [r3, #16]
 8007862:	f003 0301 	and.w	r3, r3, #1
 8007866:	2b01      	cmp	r3, #1
 8007868:	d0f0      	beq.n	800784c <USB_CoreReset+0x44>

  return HAL_OK;
 800786a:	2300      	movs	r3, #0
}
 800786c:	4618      	mov	r0, r3
 800786e:	3714      	adds	r7, #20
 8007870:	46bd      	mov	sp, r7
 8007872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007876:	4770      	bx	lr

08007878 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007878:	b580      	push	{r7, lr}
 800787a:	b084      	sub	sp, #16
 800787c:	af00      	add	r7, sp, #0
 800787e:	6078      	str	r0, [r7, #4]
 8007880:	460b      	mov	r3, r1
 8007882:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_HID_HandleTypeDef *hhid;

  hhid = (USBD_HID_HandleTypeDef *)USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 8007884:	2010      	movs	r0, #16
 8007886:	f002 f953 	bl	8009b30 <USBD_static_malloc>
 800788a:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	2b00      	cmp	r3, #0
 8007890:	d109      	bne.n	80078a6 <USBD_HID_Init+0x2e>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	32b0      	adds	r2, #176	@ 0xb0
 800789c:	2100      	movs	r1, #0
 800789e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80078a2:	2302      	movs	r3, #2
 80078a4:	e048      	b.n	8007938 <USBD_HID_Init+0xc0>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hhid;
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	32b0      	adds	r2, #176	@ 0xb0
 80078b0:	68f9      	ldr	r1, [r7, #12]
 80078b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	32b0      	adds	r2, #176	@ 0xb0
 80078c0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	7c1b      	ldrb	r3, [r3, #16]
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d10d      	bne.n	80078ee <USBD_HID_Init+0x76>
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_HS_BINTERVAL;
 80078d2:	4b1b      	ldr	r3, [pc, #108]	@ (8007940 <USBD_HID_Init+0xc8>)
 80078d4:	781b      	ldrb	r3, [r3, #0]
 80078d6:	f003 020f 	and.w	r2, r3, #15
 80078da:	6879      	ldr	r1, [r7, #4]
 80078dc:	4613      	mov	r3, r2
 80078de:	009b      	lsls	r3, r3, #2
 80078e0:	4413      	add	r3, r2
 80078e2:	009b      	lsls	r3, r3, #2
 80078e4:	440b      	add	r3, r1
 80078e6:	331c      	adds	r3, #28
 80078e8:	2207      	movs	r2, #7
 80078ea:	601a      	str	r2, [r3, #0]
 80078ec:	e00c      	b.n	8007908 <USBD_HID_Init+0x90>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_FS_BINTERVAL;
 80078ee:	4b14      	ldr	r3, [pc, #80]	@ (8007940 <USBD_HID_Init+0xc8>)
 80078f0:	781b      	ldrb	r3, [r3, #0]
 80078f2:	f003 020f 	and.w	r2, r3, #15
 80078f6:	6879      	ldr	r1, [r7, #4]
 80078f8:	4613      	mov	r3, r2
 80078fa:	009b      	lsls	r3, r3, #2
 80078fc:	4413      	add	r3, r2
 80078fe:	009b      	lsls	r3, r3, #2
 8007900:	440b      	add	r3, r1
 8007902:	331c      	adds	r3, #28
 8007904:	220a      	movs	r2, #10
 8007906:	601a      	str	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HIDInEpAdd, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 8007908:	4b0d      	ldr	r3, [pc, #52]	@ (8007940 <USBD_HID_Init+0xc8>)
 800790a:	7819      	ldrb	r1, [r3, #0]
 800790c:	2304      	movs	r3, #4
 800790e:	2203      	movs	r2, #3
 8007910:	6878      	ldr	r0, [r7, #4]
 8007912:	f001 fffc 	bl	800990e <USBD_LL_OpenEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 1U;
 8007916:	4b0a      	ldr	r3, [pc, #40]	@ (8007940 <USBD_HID_Init+0xc8>)
 8007918:	781b      	ldrb	r3, [r3, #0]
 800791a:	f003 020f 	and.w	r2, r3, #15
 800791e:	6879      	ldr	r1, [r7, #4]
 8007920:	4613      	mov	r3, r2
 8007922:	009b      	lsls	r3, r3, #2
 8007924:	4413      	add	r3, r2
 8007926:	009b      	lsls	r3, r3, #2
 8007928:	440b      	add	r3, r1
 800792a:	3323      	adds	r3, #35	@ 0x23
 800792c:	2201      	movs	r2, #1
 800792e:	701a      	strb	r2, [r3, #0]

  hhid->state = USBD_HID_IDLE;
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	2200      	movs	r2, #0
 8007934:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8007936:	2300      	movs	r3, #0
}
 8007938:	4618      	mov	r0, r3
 800793a:	3710      	adds	r7, #16
 800793c:	46bd      	mov	sp, r7
 800793e:	bd80      	pop	{r7, pc}
 8007940:	200000ce 	.word	0x200000ce

08007944 <USBD_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007944:	b580      	push	{r7, lr}
 8007946:	b082      	sub	sp, #8
 8007948:	af00      	add	r7, sp, #0
 800794a:	6078      	str	r0, [r7, #4]
 800794c:	460b      	mov	r3, r1
 800794e:	70fb      	strb	r3, [r7, #3]
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HIDInEpAdd);
 8007950:	4b1f      	ldr	r3, [pc, #124]	@ (80079d0 <USBD_HID_DeInit+0x8c>)
 8007952:	781b      	ldrb	r3, [r3, #0]
 8007954:	4619      	mov	r1, r3
 8007956:	6878      	ldr	r0, [r7, #4]
 8007958:	f001 ffff 	bl	800995a <USBD_LL_CloseEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 0U;
 800795c:	4b1c      	ldr	r3, [pc, #112]	@ (80079d0 <USBD_HID_DeInit+0x8c>)
 800795e:	781b      	ldrb	r3, [r3, #0]
 8007960:	f003 020f 	and.w	r2, r3, #15
 8007964:	6879      	ldr	r1, [r7, #4]
 8007966:	4613      	mov	r3, r2
 8007968:	009b      	lsls	r3, r3, #2
 800796a:	4413      	add	r3, r2
 800796c:	009b      	lsls	r3, r3, #2
 800796e:	440b      	add	r3, r1
 8007970:	3323      	adds	r3, #35	@ 0x23
 8007972:	2200      	movs	r2, #0
 8007974:	701a      	strb	r2, [r3, #0]
  pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = 0U;
 8007976:	4b16      	ldr	r3, [pc, #88]	@ (80079d0 <USBD_HID_DeInit+0x8c>)
 8007978:	781b      	ldrb	r3, [r3, #0]
 800797a:	f003 020f 	and.w	r2, r3, #15
 800797e:	6879      	ldr	r1, [r7, #4]
 8007980:	4613      	mov	r3, r2
 8007982:	009b      	lsls	r3, r3, #2
 8007984:	4413      	add	r3, r2
 8007986:	009b      	lsls	r3, r3, #2
 8007988:	440b      	add	r3, r1
 800798a:	331c      	adds	r3, #28
 800798c:	2200      	movs	r2, #0
 800798e:	601a      	str	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	32b0      	adds	r2, #176	@ 0xb0
 800799a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d011      	beq.n	80079c6 <USBD_HID_DeInit+0x82>
  {
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	32b0      	adds	r2, #176	@ 0xb0
 80079ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079b0:	4618      	mov	r0, r3
 80079b2:	f002 f8cb 	bl	8009b4c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	32b0      	adds	r2, #176	@ 0xb0
 80079c0:	2100      	movs	r1, #0
 80079c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return (uint8_t)USBD_OK;
 80079c6:	2300      	movs	r3, #0
}
 80079c8:	4618      	mov	r0, r3
 80079ca:	3708      	adds	r7, #8
 80079cc:	46bd      	mov	sp, r7
 80079ce:	bd80      	pop	{r7, pc}
 80079d0:	200000ce 	.word	0x200000ce

080079d4 <USBD_HID_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80079d4:	b580      	push	{r7, lr}
 80079d6:	b086      	sub	sp, #24
 80079d8:	af00      	add	r7, sp, #0
 80079da:	6078      	str	r0, [r7, #4]
 80079dc:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	32b0      	adds	r2, #176	@ 0xb0
 80079e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079ec:	60fb      	str	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 80079ee:	2300      	movs	r3, #0
 80079f0:	75fb      	strb	r3, [r7, #23]
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 80079f2:	2300      	movs	r3, #0
 80079f4:	817b      	strh	r3, [r7, #10]

  if (hhid == NULL)
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d101      	bne.n	8007a00 <USBD_HID_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 80079fc:	2303      	movs	r3, #3
 80079fe:	e0e8      	b.n	8007bd2 <USBD_HID_Setup+0x1fe>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007a00:	683b      	ldr	r3, [r7, #0]
 8007a02:	781b      	ldrb	r3, [r3, #0]
 8007a04:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d046      	beq.n	8007a9a <USBD_HID_Setup+0xc6>
 8007a0c:	2b20      	cmp	r3, #32
 8007a0e:	f040 80d8 	bne.w	8007bc2 <USBD_HID_Setup+0x1ee>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 8007a12:	683b      	ldr	r3, [r7, #0]
 8007a14:	785b      	ldrb	r3, [r3, #1]
 8007a16:	3b02      	subs	r3, #2
 8007a18:	2b09      	cmp	r3, #9
 8007a1a:	d836      	bhi.n	8007a8a <USBD_HID_Setup+0xb6>
 8007a1c:	a201      	add	r2, pc, #4	@ (adr r2, 8007a24 <USBD_HID_Setup+0x50>)
 8007a1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a22:	bf00      	nop
 8007a24:	08007a7b 	.word	0x08007a7b
 8007a28:	08007a5b 	.word	0x08007a5b
 8007a2c:	08007a8b 	.word	0x08007a8b
 8007a30:	08007a8b 	.word	0x08007a8b
 8007a34:	08007a8b 	.word	0x08007a8b
 8007a38:	08007a8b 	.word	0x08007a8b
 8007a3c:	08007a8b 	.word	0x08007a8b
 8007a40:	08007a8b 	.word	0x08007a8b
 8007a44:	08007a69 	.word	0x08007a69
 8007a48:	08007a4d 	.word	0x08007a4d
      {
        case USBD_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8007a4c:	683b      	ldr	r3, [r7, #0]
 8007a4e:	885b      	ldrh	r3, [r3, #2]
 8007a50:	b2db      	uxtb	r3, r3
 8007a52:	461a      	mov	r2, r3
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	601a      	str	r2, [r3, #0]
          break;
 8007a58:	e01e      	b.n	8007a98 <USBD_HID_Setup+0xc4>

        case USBD_HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	2201      	movs	r2, #1
 8007a5e:	4619      	mov	r1, r3
 8007a60:	6878      	ldr	r0, [r7, #4]
 8007a62:	f001 fbfb 	bl	800925c <USBD_CtlSendData>
          break;
 8007a66:	e017      	b.n	8007a98 <USBD_HID_Setup+0xc4>

        case USBD_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8007a68:	683b      	ldr	r3, [r7, #0]
 8007a6a:	885b      	ldrh	r3, [r3, #2]
 8007a6c:	0a1b      	lsrs	r3, r3, #8
 8007a6e:	b29b      	uxth	r3, r3
 8007a70:	b2db      	uxtb	r3, r3
 8007a72:	461a      	mov	r2, r3
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	605a      	str	r2, [r3, #4]
          break;
 8007a78:	e00e      	b.n	8007a98 <USBD_HID_Setup+0xc4>

        case USBD_HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	3304      	adds	r3, #4
 8007a7e:	2201      	movs	r2, #1
 8007a80:	4619      	mov	r1, r3
 8007a82:	6878      	ldr	r0, [r7, #4]
 8007a84:	f001 fbea 	bl	800925c <USBD_CtlSendData>
          break;
 8007a88:	e006      	b.n	8007a98 <USBD_HID_Setup+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8007a8a:	6839      	ldr	r1, [r7, #0]
 8007a8c:	6878      	ldr	r0, [r7, #4]
 8007a8e:	f001 fb68 	bl	8009162 <USBD_CtlError>
          ret = USBD_FAIL;
 8007a92:	2303      	movs	r3, #3
 8007a94:	75fb      	strb	r3, [r7, #23]
          break;
 8007a96:	bf00      	nop
      }
      break;
 8007a98:	e09a      	b.n	8007bd0 <USBD_HID_Setup+0x1fc>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007a9a:	683b      	ldr	r3, [r7, #0]
 8007a9c:	785b      	ldrb	r3, [r3, #1]
 8007a9e:	2b0b      	cmp	r3, #11
 8007aa0:	f200 8086 	bhi.w	8007bb0 <USBD_HID_Setup+0x1dc>
 8007aa4:	a201      	add	r2, pc, #4	@ (adr r2, 8007aac <USBD_HID_Setup+0xd8>)
 8007aa6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007aaa:	bf00      	nop
 8007aac:	08007add 	.word	0x08007add
 8007ab0:	08007bbf 	.word	0x08007bbf
 8007ab4:	08007bb1 	.word	0x08007bb1
 8007ab8:	08007bb1 	.word	0x08007bb1
 8007abc:	08007bb1 	.word	0x08007bb1
 8007ac0:	08007bb1 	.word	0x08007bb1
 8007ac4:	08007b07 	.word	0x08007b07
 8007ac8:	08007bb1 	.word	0x08007bb1
 8007acc:	08007bb1 	.word	0x08007bb1
 8007ad0:	08007bb1 	.word	0x08007bb1
 8007ad4:	08007b5f 	.word	0x08007b5f
 8007ad8:	08007b89 	.word	0x08007b89
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007ae2:	b2db      	uxtb	r3, r3
 8007ae4:	2b03      	cmp	r3, #3
 8007ae6:	d107      	bne.n	8007af8 <USBD_HID_Setup+0x124>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007ae8:	f107 030a 	add.w	r3, r7, #10
 8007aec:	2202      	movs	r2, #2
 8007aee:	4619      	mov	r1, r3
 8007af0:	6878      	ldr	r0, [r7, #4]
 8007af2:	f001 fbb3 	bl	800925c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007af6:	e063      	b.n	8007bc0 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 8007af8:	6839      	ldr	r1, [r7, #0]
 8007afa:	6878      	ldr	r0, [r7, #4]
 8007afc:	f001 fb31 	bl	8009162 <USBD_CtlError>
            ret = USBD_FAIL;
 8007b00:	2303      	movs	r3, #3
 8007b02:	75fb      	strb	r3, [r7, #23]
          break;
 8007b04:	e05c      	b.n	8007bc0 <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == HID_REPORT_DESC)
 8007b06:	683b      	ldr	r3, [r7, #0]
 8007b08:	885b      	ldrh	r3, [r3, #2]
 8007b0a:	0a1b      	lsrs	r3, r3, #8
 8007b0c:	b29b      	uxth	r3, r3
 8007b0e:	2b22      	cmp	r3, #34	@ 0x22
 8007b10:	d108      	bne.n	8007b24 <USBD_HID_Setup+0x150>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 8007b12:	683b      	ldr	r3, [r7, #0]
 8007b14:	88db      	ldrh	r3, [r3, #6]
 8007b16:	2b4a      	cmp	r3, #74	@ 0x4a
 8007b18:	bf28      	it	cs
 8007b1a:	234a      	movcs	r3, #74	@ 0x4a
 8007b1c:	82bb      	strh	r3, [r7, #20]
            pbuf = HID_MOUSE_ReportDesc;
 8007b1e:	4b2f      	ldr	r3, [pc, #188]	@ (8007bdc <USBD_HID_Setup+0x208>)
 8007b20:	613b      	str	r3, [r7, #16]
 8007b22:	e015      	b.n	8007b50 <USBD_HID_Setup+0x17c>
          }
          else if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 8007b24:	683b      	ldr	r3, [r7, #0]
 8007b26:	885b      	ldrh	r3, [r3, #2]
 8007b28:	0a1b      	lsrs	r3, r3, #8
 8007b2a:	b29b      	uxth	r3, r3
 8007b2c:	2b21      	cmp	r3, #33	@ 0x21
 8007b2e:	d108      	bne.n	8007b42 <USBD_HID_Setup+0x16e>
          {
            pbuf = USBD_HID_Desc;
 8007b30:	4b2b      	ldr	r3, [pc, #172]	@ (8007be0 <USBD_HID_Setup+0x20c>)
 8007b32:	613b      	str	r3, [r7, #16]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 8007b34:	683b      	ldr	r3, [r7, #0]
 8007b36:	88db      	ldrh	r3, [r3, #6]
 8007b38:	2b09      	cmp	r3, #9
 8007b3a:	bf28      	it	cs
 8007b3c:	2309      	movcs	r3, #9
 8007b3e:	82bb      	strh	r3, [r7, #20]
 8007b40:	e006      	b.n	8007b50 <USBD_HID_Setup+0x17c>
          }
          else
          {
            USBD_CtlError(pdev, req);
 8007b42:	6839      	ldr	r1, [r7, #0]
 8007b44:	6878      	ldr	r0, [r7, #4]
 8007b46:	f001 fb0c 	bl	8009162 <USBD_CtlError>
            ret = USBD_FAIL;
 8007b4a:	2303      	movs	r3, #3
 8007b4c:	75fb      	strb	r3, [r7, #23]
            break;
 8007b4e:	e037      	b.n	8007bc0 <USBD_HID_Setup+0x1ec>
          }
          (void)USBD_CtlSendData(pdev, pbuf, len);
 8007b50:	8abb      	ldrh	r3, [r7, #20]
 8007b52:	461a      	mov	r2, r3
 8007b54:	6939      	ldr	r1, [r7, #16]
 8007b56:	6878      	ldr	r0, [r7, #4]
 8007b58:	f001 fb80 	bl	800925c <USBD_CtlSendData>
          break;
 8007b5c:	e030      	b.n	8007bc0 <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007b64:	b2db      	uxtb	r3, r3
 8007b66:	2b03      	cmp	r3, #3
 8007b68:	d107      	bne.n	8007b7a <USBD_HID_Setup+0x1a6>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	3308      	adds	r3, #8
 8007b6e:	2201      	movs	r2, #1
 8007b70:	4619      	mov	r1, r3
 8007b72:	6878      	ldr	r0, [r7, #4]
 8007b74:	f001 fb72 	bl	800925c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007b78:	e022      	b.n	8007bc0 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 8007b7a:	6839      	ldr	r1, [r7, #0]
 8007b7c:	6878      	ldr	r0, [r7, #4]
 8007b7e:	f001 faf0 	bl	8009162 <USBD_CtlError>
            ret = USBD_FAIL;
 8007b82:	2303      	movs	r3, #3
 8007b84:	75fb      	strb	r3, [r7, #23]
          break;
 8007b86:	e01b      	b.n	8007bc0 <USBD_HID_Setup+0x1ec>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007b8e:	b2db      	uxtb	r3, r3
 8007b90:	2b03      	cmp	r3, #3
 8007b92:	d106      	bne.n	8007ba2 <USBD_HID_Setup+0x1ce>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8007b94:	683b      	ldr	r3, [r7, #0]
 8007b96:	885b      	ldrh	r3, [r3, #2]
 8007b98:	b2db      	uxtb	r3, r3
 8007b9a:	461a      	mov	r2, r3
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007ba0:	e00e      	b.n	8007bc0 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 8007ba2:	6839      	ldr	r1, [r7, #0]
 8007ba4:	6878      	ldr	r0, [r7, #4]
 8007ba6:	f001 fadc 	bl	8009162 <USBD_CtlError>
            ret = USBD_FAIL;
 8007baa:	2303      	movs	r3, #3
 8007bac:	75fb      	strb	r3, [r7, #23]
          break;
 8007bae:	e007      	b.n	8007bc0 <USBD_HID_Setup+0x1ec>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8007bb0:	6839      	ldr	r1, [r7, #0]
 8007bb2:	6878      	ldr	r0, [r7, #4]
 8007bb4:	f001 fad5 	bl	8009162 <USBD_CtlError>
          ret = USBD_FAIL;
 8007bb8:	2303      	movs	r3, #3
 8007bba:	75fb      	strb	r3, [r7, #23]
          break;
 8007bbc:	e000      	b.n	8007bc0 <USBD_HID_Setup+0x1ec>
          break;
 8007bbe:	bf00      	nop
      }
      break;
 8007bc0:	e006      	b.n	8007bd0 <USBD_HID_Setup+0x1fc>

    default:
      USBD_CtlError(pdev, req);
 8007bc2:	6839      	ldr	r1, [r7, #0]
 8007bc4:	6878      	ldr	r0, [r7, #4]
 8007bc6:	f001 facc 	bl	8009162 <USBD_CtlError>
      ret = USBD_FAIL;
 8007bca:	2303      	movs	r3, #3
 8007bcc:	75fb      	strb	r3, [r7, #23]
      break;
 8007bce:	bf00      	nop
  }

  return (uint8_t)ret;
 8007bd0:	7dfb      	ldrb	r3, [r7, #23]
}
 8007bd2:	4618      	mov	r0, r3
 8007bd4:	3718      	adds	r7, #24
 8007bd6:	46bd      	mov	sp, r7
 8007bd8:	bd80      	pop	{r7, pc}
 8007bda:	bf00      	nop
 8007bdc:	20000084 	.word	0x20000084
 8007be0:	2000006c 	.word	0x2000006c

08007be4 <USBD_HID_SendReport>:
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len, uint8_t ClassId)
{
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len)
{
 8007be4:	b580      	push	{r7, lr}
 8007be6:	b086      	sub	sp, #24
 8007be8:	af00      	add	r7, sp, #0
 8007bea:	60f8      	str	r0, [r7, #12]
 8007bec:	60b9      	str	r1, [r7, #8]
 8007bee:	4613      	mov	r3, r2
 8007bf0:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	32b0      	adds	r2, #176	@ 0xb0
 8007bfc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c00:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hhid == NULL)
 8007c02:	697b      	ldr	r3, [r7, #20]
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d101      	bne.n	8007c0c <USBD_HID_SendReport+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8007c08:	2303      	movs	r3, #3
 8007c0a:	e014      	b.n	8007c36 <USBD_HID_SendReport+0x52>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, ClassId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007c12:	b2db      	uxtb	r3, r3
 8007c14:	2b03      	cmp	r3, #3
 8007c16:	d10d      	bne.n	8007c34 <USBD_HID_SendReport+0x50>
  {
    if (hhid->state == USBD_HID_IDLE)
 8007c18:	697b      	ldr	r3, [r7, #20]
 8007c1a:	7b1b      	ldrb	r3, [r3, #12]
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d109      	bne.n	8007c34 <USBD_HID_SendReport+0x50>
    {
      hhid->state = USBD_HID_BUSY;
 8007c20:	697b      	ldr	r3, [r7, #20]
 8007c22:	2201      	movs	r2, #1
 8007c24:	731a      	strb	r2, [r3, #12]
      (void)USBD_LL_Transmit(pdev, HIDInEpAdd, report, len);
 8007c26:	4b06      	ldr	r3, [pc, #24]	@ (8007c40 <USBD_HID_SendReport+0x5c>)
 8007c28:	7819      	ldrb	r1, [r3, #0]
 8007c2a:	88fb      	ldrh	r3, [r7, #6]
 8007c2c:	68ba      	ldr	r2, [r7, #8]
 8007c2e:	68f8      	ldr	r0, [r7, #12]
 8007c30:	f001 ff3b 	bl	8009aaa <USBD_LL_Transmit>
    }
  }

  return (uint8_t)USBD_OK;
 8007c34:	2300      	movs	r3, #0
}
 8007c36:	4618      	mov	r0, r3
 8007c38:	3718      	adds	r7, #24
 8007c3a:	46bd      	mov	sp, r7
 8007c3c:	bd80      	pop	{r7, pc}
 8007c3e:	bf00      	nop
 8007c40:	200000ce 	.word	0x200000ce

08007c44 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 8007c44:	b580      	push	{r7, lr}
 8007c46:	b084      	sub	sp, #16
 8007c48:	af00      	add	r7, sp, #0
 8007c4a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 8007c4c:	2181      	movs	r1, #129	@ 0x81
 8007c4e:	4809      	ldr	r0, [pc, #36]	@ (8007c74 <USBD_HID_GetFSCfgDesc+0x30>)
 8007c50:	f000 fc4e 	bl	80084f0 <USBD_GetEpDesc>
 8007c54:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d002      	beq.n	8007c62 <USBD_HID_GetFSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	220a      	movs	r2, #10
 8007c60:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	2222      	movs	r2, #34	@ 0x22
 8007c66:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 8007c68:	4b02      	ldr	r3, [pc, #8]	@ (8007c74 <USBD_HID_GetFSCfgDesc+0x30>)
}
 8007c6a:	4618      	mov	r0, r3
 8007c6c:	3710      	adds	r7, #16
 8007c6e:	46bd      	mov	sp, r7
 8007c70:	bd80      	pop	{r7, pc}
 8007c72:	bf00      	nop
 8007c74:	20000048 	.word	0x20000048

08007c78 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 8007c78:	b580      	push	{r7, lr}
 8007c7a:	b084      	sub	sp, #16
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 8007c80:	2181      	movs	r1, #129	@ 0x81
 8007c82:	4809      	ldr	r0, [pc, #36]	@ (8007ca8 <USBD_HID_GetHSCfgDesc+0x30>)
 8007c84:	f000 fc34 	bl	80084f0 <USBD_GetEpDesc>
 8007c88:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d002      	beq.n	8007c96 <USBD_HID_GetHSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_HS_BINTERVAL;
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	2207      	movs	r2, #7
 8007c94:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	2222      	movs	r2, #34	@ 0x22
 8007c9a:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 8007c9c:	4b02      	ldr	r3, [pc, #8]	@ (8007ca8 <USBD_HID_GetHSCfgDesc+0x30>)
}
 8007c9e:	4618      	mov	r0, r3
 8007ca0:	3710      	adds	r7, #16
 8007ca2:	46bd      	mov	sp, r7
 8007ca4:	bd80      	pop	{r7, pc}
 8007ca6:	bf00      	nop
 8007ca8:	20000048 	.word	0x20000048

08007cac <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007cac:	b580      	push	{r7, lr}
 8007cae:	b084      	sub	sp, #16
 8007cb0:	af00      	add	r7, sp, #0
 8007cb2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 8007cb4:	2181      	movs	r1, #129	@ 0x81
 8007cb6:	4809      	ldr	r0, [pc, #36]	@ (8007cdc <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
 8007cb8:	f000 fc1a 	bl	80084f0 <USBD_GetEpDesc>
 8007cbc:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d002      	beq.n	8007cca <USBD_HID_GetOtherSpeedCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	220a      	movs	r2, #10
 8007cc8:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	2222      	movs	r2, #34	@ 0x22
 8007cce:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 8007cd0:	4b02      	ldr	r3, [pc, #8]	@ (8007cdc <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
}
 8007cd2:	4618      	mov	r0, r3
 8007cd4:	3710      	adds	r7, #16
 8007cd6:	46bd      	mov	sp, r7
 8007cd8:	bd80      	pop	{r7, pc}
 8007cda:	bf00      	nop
 8007cdc:	20000048 	.word	0x20000048

08007ce0 <USBD_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007ce0:	b480      	push	{r7}
 8007ce2:	b083      	sub	sp, #12
 8007ce4:	af00      	add	r7, sp, #0
 8007ce6:	6078      	str	r0, [r7, #4]
 8007ce8:	460b      	mov	r3, r1
 8007cea:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId])->state = USBD_HID_IDLE;
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	32b0      	adds	r2, #176	@ 0xb0
 8007cf6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007cfa:	2200      	movs	r2, #0
 8007cfc:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8007cfe:	2300      	movs	r3, #0
}
 8007d00:	4618      	mov	r0, r3
 8007d02:	370c      	adds	r7, #12
 8007d04:	46bd      	mov	sp, r7
 8007d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d0a:	4770      	bx	lr

08007d0c <USBD_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8007d0c:	b480      	push	{r7}
 8007d0e:	b083      	sub	sp, #12
 8007d10:	af00      	add	r7, sp, #0
 8007d12:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	220a      	movs	r2, #10
 8007d18:	801a      	strh	r2, [r3, #0]

  return USBD_HID_DeviceQualifierDesc;
 8007d1a:	4b03      	ldr	r3, [pc, #12]	@ (8007d28 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 8007d1c:	4618      	mov	r0, r3
 8007d1e:	370c      	adds	r7, #12
 8007d20:	46bd      	mov	sp, r7
 8007d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d26:	4770      	bx	lr
 8007d28:	20000078 	.word	0x20000078

08007d2c <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007d2c:	b580      	push	{r7, lr}
 8007d2e:	b086      	sub	sp, #24
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	60f8      	str	r0, [r7, #12]
 8007d34:	60b9      	str	r1, [r7, #8]
 8007d36:	4613      	mov	r3, r2
 8007d38:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d101      	bne.n	8007d44 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007d40:	2303      	movs	r3, #3
 8007d42:	e01f      	b.n	8007d84 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	2200      	movs	r2, #0
 8007d48:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	2200      	movs	r2, #0
 8007d50:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	2200      	movs	r2, #0
 8007d58:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007d5c:	68bb      	ldr	r3, [r7, #8]
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d003      	beq.n	8007d6a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	68ba      	ldr	r2, [r7, #8]
 8007d66:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	2201      	movs	r2, #1
 8007d6e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	79fa      	ldrb	r2, [r7, #7]
 8007d76:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007d78:	68f8      	ldr	r0, [r7, #12]
 8007d7a:	f001 fd5b 	bl	8009834 <USBD_LL_Init>
 8007d7e:	4603      	mov	r3, r0
 8007d80:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007d82:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d84:	4618      	mov	r0, r3
 8007d86:	3718      	adds	r7, #24
 8007d88:	46bd      	mov	sp, r7
 8007d8a:	bd80      	pop	{r7, pc}

08007d8c <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007d8c:	b580      	push	{r7, lr}
 8007d8e:	b084      	sub	sp, #16
 8007d90:	af00      	add	r7, sp, #0
 8007d92:	6078      	str	r0, [r7, #4]
 8007d94:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007d96:	2300      	movs	r3, #0
 8007d98:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8007d9a:	683b      	ldr	r3, [r7, #0]
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d101      	bne.n	8007da4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007da0:	2303      	movs	r3, #3
 8007da2:	e025      	b.n	8007df0 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	683a      	ldr	r2, [r7, #0]
 8007da8:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	32ae      	adds	r2, #174	@ 0xae
 8007db6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007dba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d00f      	beq.n	8007de0 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	32ae      	adds	r2, #174	@ 0xae
 8007dca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007dce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007dd0:	f107 020e 	add.w	r2, r7, #14
 8007dd4:	4610      	mov	r0, r2
 8007dd6:	4798      	blx	r3
 8007dd8:	4602      	mov	r2, r0
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8007de6:	1c5a      	adds	r2, r3, #1
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8007dee:	2300      	movs	r3, #0
}
 8007df0:	4618      	mov	r0, r3
 8007df2:	3710      	adds	r7, #16
 8007df4:	46bd      	mov	sp, r7
 8007df6:	bd80      	pop	{r7, pc}

08007df8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007df8:	b580      	push	{r7, lr}
 8007dfa:	b082      	sub	sp, #8
 8007dfc:	af00      	add	r7, sp, #0
 8007dfe:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007e00:	6878      	ldr	r0, [r7, #4]
 8007e02:	f001 fd69 	bl	80098d8 <USBD_LL_Start>
 8007e06:	4603      	mov	r3, r0
}
 8007e08:	4618      	mov	r0, r3
 8007e0a:	3708      	adds	r7, #8
 8007e0c:	46bd      	mov	sp, r7
 8007e0e:	bd80      	pop	{r7, pc}

08007e10 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8007e10:	b480      	push	{r7}
 8007e12:	b083      	sub	sp, #12
 8007e14:	af00      	add	r7, sp, #0
 8007e16:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007e18:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8007e1a:	4618      	mov	r0, r3
 8007e1c:	370c      	adds	r7, #12
 8007e1e:	46bd      	mov	sp, r7
 8007e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e24:	4770      	bx	lr

08007e26 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007e26:	b580      	push	{r7, lr}
 8007e28:	b084      	sub	sp, #16
 8007e2a:	af00      	add	r7, sp, #0
 8007e2c:	6078      	str	r0, [r7, #4]
 8007e2e:	460b      	mov	r3, r1
 8007e30:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007e32:	2300      	movs	r3, #0
 8007e34:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d009      	beq.n	8007e54 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	78fa      	ldrb	r2, [r7, #3]
 8007e4a:	4611      	mov	r1, r2
 8007e4c:	6878      	ldr	r0, [r7, #4]
 8007e4e:	4798      	blx	r3
 8007e50:	4603      	mov	r3, r0
 8007e52:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007e54:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e56:	4618      	mov	r0, r3
 8007e58:	3710      	adds	r7, #16
 8007e5a:	46bd      	mov	sp, r7
 8007e5c:	bd80      	pop	{r7, pc}

08007e5e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007e5e:	b580      	push	{r7, lr}
 8007e60:	b084      	sub	sp, #16
 8007e62:	af00      	add	r7, sp, #0
 8007e64:	6078      	str	r0, [r7, #4]
 8007e66:	460b      	mov	r3, r1
 8007e68:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007e6a:	2300      	movs	r3, #0
 8007e6c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007e74:	685b      	ldr	r3, [r3, #4]
 8007e76:	78fa      	ldrb	r2, [r7, #3]
 8007e78:	4611      	mov	r1, r2
 8007e7a:	6878      	ldr	r0, [r7, #4]
 8007e7c:	4798      	blx	r3
 8007e7e:	4603      	mov	r3, r0
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d001      	beq.n	8007e88 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8007e84:	2303      	movs	r3, #3
 8007e86:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007e88:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e8a:	4618      	mov	r0, r3
 8007e8c:	3710      	adds	r7, #16
 8007e8e:	46bd      	mov	sp, r7
 8007e90:	bd80      	pop	{r7, pc}

08007e92 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007e92:	b580      	push	{r7, lr}
 8007e94:	b084      	sub	sp, #16
 8007e96:	af00      	add	r7, sp, #0
 8007e98:	6078      	str	r0, [r7, #4]
 8007e9a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007ea2:	6839      	ldr	r1, [r7, #0]
 8007ea4:	4618      	mov	r0, r3
 8007ea6:	f001 f922 	bl	80090ee <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	2201      	movs	r2, #1
 8007eae:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8007eb8:	461a      	mov	r2, r3
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8007ec6:	f003 031f 	and.w	r3, r3, #31
 8007eca:	2b02      	cmp	r3, #2
 8007ecc:	d01a      	beq.n	8007f04 <USBD_LL_SetupStage+0x72>
 8007ece:	2b02      	cmp	r3, #2
 8007ed0:	d822      	bhi.n	8007f18 <USBD_LL_SetupStage+0x86>
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d002      	beq.n	8007edc <USBD_LL_SetupStage+0x4a>
 8007ed6:	2b01      	cmp	r3, #1
 8007ed8:	d00a      	beq.n	8007ef0 <USBD_LL_SetupStage+0x5e>
 8007eda:	e01d      	b.n	8007f18 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007ee2:	4619      	mov	r1, r3
 8007ee4:	6878      	ldr	r0, [r7, #4]
 8007ee6:	f000 fb77 	bl	80085d8 <USBD_StdDevReq>
 8007eea:	4603      	mov	r3, r0
 8007eec:	73fb      	strb	r3, [r7, #15]
      break;
 8007eee:	e020      	b.n	8007f32 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007ef6:	4619      	mov	r1, r3
 8007ef8:	6878      	ldr	r0, [r7, #4]
 8007efa:	f000 fbdf 	bl	80086bc <USBD_StdItfReq>
 8007efe:	4603      	mov	r3, r0
 8007f00:	73fb      	strb	r3, [r7, #15]
      break;
 8007f02:	e016      	b.n	8007f32 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007f0a:	4619      	mov	r1, r3
 8007f0c:	6878      	ldr	r0, [r7, #4]
 8007f0e:	f000 fc41 	bl	8008794 <USBD_StdEPReq>
 8007f12:	4603      	mov	r3, r0
 8007f14:	73fb      	strb	r3, [r7, #15]
      break;
 8007f16:	e00c      	b.n	8007f32 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8007f1e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8007f22:	b2db      	uxtb	r3, r3
 8007f24:	4619      	mov	r1, r3
 8007f26:	6878      	ldr	r0, [r7, #4]
 8007f28:	f001 fd36 	bl	8009998 <USBD_LL_StallEP>
 8007f2c:	4603      	mov	r3, r0
 8007f2e:	73fb      	strb	r3, [r7, #15]
      break;
 8007f30:	bf00      	nop
  }

  return ret;
 8007f32:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f34:	4618      	mov	r0, r3
 8007f36:	3710      	adds	r7, #16
 8007f38:	46bd      	mov	sp, r7
 8007f3a:	bd80      	pop	{r7, pc}

08007f3c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007f3c:	b580      	push	{r7, lr}
 8007f3e:	b086      	sub	sp, #24
 8007f40:	af00      	add	r7, sp, #0
 8007f42:	60f8      	str	r0, [r7, #12]
 8007f44:	460b      	mov	r3, r1
 8007f46:	607a      	str	r2, [r7, #4]
 8007f48:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8007f4a:	2300      	movs	r3, #0
 8007f4c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 8007f4e:	7afb      	ldrb	r3, [r7, #11]
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d177      	bne.n	8008044 <USBD_LL_DataOutStage+0x108>
  {
    pep = &pdev->ep_out[0];
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8007f5a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007f62:	2b03      	cmp	r3, #3
 8007f64:	f040 80a1 	bne.w	80080aa <USBD_LL_DataOutStage+0x16e>
    {
      if (pep->rem_length > pep->maxpacket)
 8007f68:	693b      	ldr	r3, [r7, #16]
 8007f6a:	685b      	ldr	r3, [r3, #4]
 8007f6c:	693a      	ldr	r2, [r7, #16]
 8007f6e:	8992      	ldrh	r2, [r2, #12]
 8007f70:	4293      	cmp	r3, r2
 8007f72:	d91c      	bls.n	8007fae <USBD_LL_DataOutStage+0x72>
      {
        pep->rem_length -= pep->maxpacket;
 8007f74:	693b      	ldr	r3, [r7, #16]
 8007f76:	685b      	ldr	r3, [r3, #4]
 8007f78:	693a      	ldr	r2, [r7, #16]
 8007f7a:	8992      	ldrh	r2, [r2, #12]
 8007f7c:	1a9a      	subs	r2, r3, r2
 8007f7e:	693b      	ldr	r3, [r7, #16]
 8007f80:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 8007f82:	693b      	ldr	r3, [r7, #16]
 8007f84:	691b      	ldr	r3, [r3, #16]
 8007f86:	693a      	ldr	r2, [r7, #16]
 8007f88:	8992      	ldrh	r2, [r2, #12]
 8007f8a:	441a      	add	r2, r3
 8007f8c:	693b      	ldr	r3, [r7, #16]
 8007f8e:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueRx(pdev, pep->pbuffer, MAX(pep->rem_length, pep->maxpacket));
 8007f90:	693b      	ldr	r3, [r7, #16]
 8007f92:	6919      	ldr	r1, [r3, #16]
 8007f94:	693b      	ldr	r3, [r7, #16]
 8007f96:	899b      	ldrh	r3, [r3, #12]
 8007f98:	461a      	mov	r2, r3
 8007f9a:	693b      	ldr	r3, [r7, #16]
 8007f9c:	685b      	ldr	r3, [r3, #4]
 8007f9e:	4293      	cmp	r3, r2
 8007fa0:	bf38      	it	cc
 8007fa2:	4613      	movcc	r3, r2
 8007fa4:	461a      	mov	r2, r3
 8007fa6:	68f8      	ldr	r0, [r7, #12]
 8007fa8:	f001 f987 	bl	80092ba <USBD_CtlContinueRx>
 8007fac:	e07d      	b.n	80080aa <USBD_LL_DataOutStage+0x16e>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8007fb4:	f003 031f 	and.w	r3, r3, #31
 8007fb8:	2b02      	cmp	r3, #2
 8007fba:	d014      	beq.n	8007fe6 <USBD_LL_DataOutStage+0xaa>
 8007fbc:	2b02      	cmp	r3, #2
 8007fbe:	d81d      	bhi.n	8007ffc <USBD_LL_DataOutStage+0xc0>
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d002      	beq.n	8007fca <USBD_LL_DataOutStage+0x8e>
 8007fc4:	2b01      	cmp	r3, #1
 8007fc6:	d003      	beq.n	8007fd0 <USBD_LL_DataOutStage+0x94>
 8007fc8:	e018      	b.n	8007ffc <USBD_LL_DataOutStage+0xc0>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8007fca:	2300      	movs	r3, #0
 8007fcc:	75bb      	strb	r3, [r7, #22]
            break;
 8007fce:	e018      	b.n	8008002 <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8007fd6:	b2db      	uxtb	r3, r3
 8007fd8:	4619      	mov	r1, r3
 8007fda:	68f8      	ldr	r0, [r7, #12]
 8007fdc:	f000 fa6e 	bl	80084bc <USBD_CoreFindIF>
 8007fe0:	4603      	mov	r3, r0
 8007fe2:	75bb      	strb	r3, [r7, #22]
            break;
 8007fe4:	e00d      	b.n	8008002 <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8007fec:	b2db      	uxtb	r3, r3
 8007fee:	4619      	mov	r1, r3
 8007ff0:	68f8      	ldr	r0, [r7, #12]
 8007ff2:	f000 fa70 	bl	80084d6 <USBD_CoreFindEP>
 8007ff6:	4603      	mov	r3, r0
 8007ff8:	75bb      	strb	r3, [r7, #22]
            break;
 8007ffa:	e002      	b.n	8008002 <USBD_LL_DataOutStage+0xc6>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8007ffc:	2300      	movs	r3, #0
 8007ffe:	75bb      	strb	r3, [r7, #22]
            break;
 8008000:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8008002:	7dbb      	ldrb	r3, [r7, #22]
 8008004:	2b00      	cmp	r3, #0
 8008006:	d119      	bne.n	800803c <USBD_LL_DataOutStage+0x100>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800800e:	b2db      	uxtb	r3, r3
 8008010:	2b03      	cmp	r3, #3
 8008012:	d113      	bne.n	800803c <USBD_LL_DataOutStage+0x100>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8008014:	7dba      	ldrb	r2, [r7, #22]
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	32ae      	adds	r2, #174	@ 0xae
 800801a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800801e:	691b      	ldr	r3, [r3, #16]
 8008020:	2b00      	cmp	r3, #0
 8008022:	d00b      	beq.n	800803c <USBD_LL_DataOutStage+0x100>
            {
              pdev->classId = idx;
 8008024:	7dba      	ldrb	r2, [r7, #22]
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800802c:	7dba      	ldrb	r2, [r7, #22]
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	32ae      	adds	r2, #174	@ 0xae
 8008032:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008036:	691b      	ldr	r3, [r3, #16]
 8008038:	68f8      	ldr	r0, [r7, #12]
 800803a:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800803c:	68f8      	ldr	r0, [r7, #12]
 800803e:	f001 f94d 	bl	80092dc <USBD_CtlSendStatus>
 8008042:	e032      	b.n	80080aa <USBD_LL_DataOutStage+0x16e>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8008044:	7afb      	ldrb	r3, [r7, #11]
 8008046:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800804a:	b2db      	uxtb	r3, r3
 800804c:	4619      	mov	r1, r3
 800804e:	68f8      	ldr	r0, [r7, #12]
 8008050:	f000 fa41 	bl	80084d6 <USBD_CoreFindEP>
 8008054:	4603      	mov	r3, r0
 8008056:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008058:	7dbb      	ldrb	r3, [r7, #22]
 800805a:	2bff      	cmp	r3, #255	@ 0xff
 800805c:	d025      	beq.n	80080aa <USBD_LL_DataOutStage+0x16e>
 800805e:	7dbb      	ldrb	r3, [r7, #22]
 8008060:	2b00      	cmp	r3, #0
 8008062:	d122      	bne.n	80080aa <USBD_LL_DataOutStage+0x16e>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800806a:	b2db      	uxtb	r3, r3
 800806c:	2b03      	cmp	r3, #3
 800806e:	d117      	bne.n	80080a0 <USBD_LL_DataOutStage+0x164>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8008070:	7dba      	ldrb	r2, [r7, #22]
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	32ae      	adds	r2, #174	@ 0xae
 8008076:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800807a:	699b      	ldr	r3, [r3, #24]
 800807c:	2b00      	cmp	r3, #0
 800807e:	d00f      	beq.n	80080a0 <USBD_LL_DataOutStage+0x164>
        {
          pdev->classId = idx;
 8008080:	7dba      	ldrb	r2, [r7, #22]
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8008088:	7dba      	ldrb	r2, [r7, #22]
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	32ae      	adds	r2, #174	@ 0xae
 800808e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008092:	699b      	ldr	r3, [r3, #24]
 8008094:	7afa      	ldrb	r2, [r7, #11]
 8008096:	4611      	mov	r1, r2
 8008098:	68f8      	ldr	r0, [r7, #12]
 800809a:	4798      	blx	r3
 800809c:	4603      	mov	r3, r0
 800809e:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80080a0:	7dfb      	ldrb	r3, [r7, #23]
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d001      	beq.n	80080aa <USBD_LL_DataOutStage+0x16e>
      {
        return ret;
 80080a6:	7dfb      	ldrb	r3, [r7, #23]
 80080a8:	e000      	b.n	80080ac <USBD_LL_DataOutStage+0x170>
      }
    }
  }

  return USBD_OK;
 80080aa:	2300      	movs	r3, #0
}
 80080ac:	4618      	mov	r0, r3
 80080ae:	3718      	adds	r7, #24
 80080b0:	46bd      	mov	sp, r7
 80080b2:	bd80      	pop	{r7, pc}

080080b4 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80080b4:	b580      	push	{r7, lr}
 80080b6:	b086      	sub	sp, #24
 80080b8:	af00      	add	r7, sp, #0
 80080ba:	60f8      	str	r0, [r7, #12]
 80080bc:	460b      	mov	r3, r1
 80080be:	607a      	str	r2, [r7, #4]
 80080c0:	72fb      	strb	r3, [r7, #11]
  USBD_StatusTypeDef ret;
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 80080c2:	7afb      	ldrb	r3, [r7, #11]
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d178      	bne.n	80081ba <USBD_LL_DataInStage+0x106>
  {
    pep = &pdev->ep_in[0];
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	3314      	adds	r3, #20
 80080cc:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80080d4:	2b02      	cmp	r3, #2
 80080d6:	d163      	bne.n	80081a0 <USBD_LL_DataInStage+0xec>
    {
      if (pep->rem_length > pep->maxpacket)
 80080d8:	693b      	ldr	r3, [r7, #16]
 80080da:	685b      	ldr	r3, [r3, #4]
 80080dc:	693a      	ldr	r2, [r7, #16]
 80080de:	8992      	ldrh	r2, [r2, #12]
 80080e0:	4293      	cmp	r3, r2
 80080e2:	d91c      	bls.n	800811e <USBD_LL_DataInStage+0x6a>
      {
        pep->rem_length -= pep->maxpacket;
 80080e4:	693b      	ldr	r3, [r7, #16]
 80080e6:	685b      	ldr	r3, [r3, #4]
 80080e8:	693a      	ldr	r2, [r7, #16]
 80080ea:	8992      	ldrh	r2, [r2, #12]
 80080ec:	1a9a      	subs	r2, r3, r2
 80080ee:	693b      	ldr	r3, [r7, #16]
 80080f0:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 80080f2:	693b      	ldr	r3, [r7, #16]
 80080f4:	691b      	ldr	r3, [r3, #16]
 80080f6:	693a      	ldr	r2, [r7, #16]
 80080f8:	8992      	ldrh	r2, [r2, #12]
 80080fa:	441a      	add	r2, r3
 80080fc:	693b      	ldr	r3, [r7, #16]
 80080fe:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueSendData(pdev, pep->pbuffer, pep->rem_length);
 8008100:	693b      	ldr	r3, [r7, #16]
 8008102:	6919      	ldr	r1, [r3, #16]
 8008104:	693b      	ldr	r3, [r7, #16]
 8008106:	685b      	ldr	r3, [r3, #4]
 8008108:	461a      	mov	r2, r3
 800810a:	68f8      	ldr	r0, [r7, #12]
 800810c:	f001 f8c4 	bl	8009298 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008110:	2300      	movs	r3, #0
 8008112:	2200      	movs	r2, #0
 8008114:	2100      	movs	r1, #0
 8008116:	68f8      	ldr	r0, [r7, #12]
 8008118:	f001 fce8 	bl	8009aec <USBD_LL_PrepareReceive>
 800811c:	e040      	b.n	80081a0 <USBD_LL_DataInStage+0xec>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800811e:	693b      	ldr	r3, [r7, #16]
 8008120:	899b      	ldrh	r3, [r3, #12]
 8008122:	461a      	mov	r2, r3
 8008124:	693b      	ldr	r3, [r7, #16]
 8008126:	685b      	ldr	r3, [r3, #4]
 8008128:	429a      	cmp	r2, r3
 800812a:	d11c      	bne.n	8008166 <USBD_LL_DataInStage+0xb2>
            (pep->total_length >= pep->maxpacket) &&
 800812c:	693b      	ldr	r3, [r7, #16]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	693a      	ldr	r2, [r7, #16]
 8008132:	8992      	ldrh	r2, [r2, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8008134:	4293      	cmp	r3, r2
 8008136:	d316      	bcc.n	8008166 <USBD_LL_DataInStage+0xb2>
            (pep->total_length < pdev->ep0_data_len))
 8008138:	693b      	ldr	r3, [r7, #16]
 800813a:	681a      	ldr	r2, [r3, #0]
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008142:	429a      	cmp	r2, r3
 8008144:	d20f      	bcs.n	8008166 <USBD_LL_DataInStage+0xb2>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008146:	2200      	movs	r2, #0
 8008148:	2100      	movs	r1, #0
 800814a:	68f8      	ldr	r0, [r7, #12]
 800814c:	f001 f8a4 	bl	8009298 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	2200      	movs	r2, #0
 8008154:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008158:	2300      	movs	r3, #0
 800815a:	2200      	movs	r2, #0
 800815c:	2100      	movs	r1, #0
 800815e:	68f8      	ldr	r0, [r7, #12]
 8008160:	f001 fcc4 	bl	8009aec <USBD_LL_PrepareReceive>
 8008164:	e01c      	b.n	80081a0 <USBD_LL_DataInStage+0xec>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800816c:	b2db      	uxtb	r3, r3
 800816e:	2b03      	cmp	r3, #3
 8008170:	d10f      	bne.n	8008192 <USBD_LL_DataInStage+0xde>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008178:	68db      	ldr	r3, [r3, #12]
 800817a:	2b00      	cmp	r3, #0
 800817c:	d009      	beq.n	8008192 <USBD_LL_DataInStage+0xde>
            {
              pdev->classId = 0U;
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	2200      	movs	r2, #0
 8008182:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800818c:	68db      	ldr	r3, [r3, #12]
 800818e:	68f8      	ldr	r0, [r7, #12]
 8008190:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008192:	2180      	movs	r1, #128	@ 0x80
 8008194:	68f8      	ldr	r0, [r7, #12]
 8008196:	f001 fbff 	bl	8009998 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800819a:	68f8      	ldr	r0, [r7, #12]
 800819c:	f001 f8b1 	bl	8009302 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d03a      	beq.n	8008220 <USBD_LL_DataInStage+0x16c>
    {
      (void)USBD_RunTestMode(pdev);
 80081aa:	68f8      	ldr	r0, [r7, #12]
 80081ac:	f7ff fe30 	bl	8007e10 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	2200      	movs	r2, #0
 80081b4:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 80081b8:	e032      	b.n	8008220 <USBD_LL_DataInStage+0x16c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80081ba:	7afb      	ldrb	r3, [r7, #11]
 80081bc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80081c0:	b2db      	uxtb	r3, r3
 80081c2:	4619      	mov	r1, r3
 80081c4:	68f8      	ldr	r0, [r7, #12]
 80081c6:	f000 f986 	bl	80084d6 <USBD_CoreFindEP>
 80081ca:	4603      	mov	r3, r0
 80081cc:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80081ce:	7dfb      	ldrb	r3, [r7, #23]
 80081d0:	2bff      	cmp	r3, #255	@ 0xff
 80081d2:	d025      	beq.n	8008220 <USBD_LL_DataInStage+0x16c>
 80081d4:	7dfb      	ldrb	r3, [r7, #23]
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d122      	bne.n	8008220 <USBD_LL_DataInStage+0x16c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80081e0:	b2db      	uxtb	r3, r3
 80081e2:	2b03      	cmp	r3, #3
 80081e4:	d11c      	bne.n	8008220 <USBD_LL_DataInStage+0x16c>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80081e6:	7dfa      	ldrb	r2, [r7, #23]
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	32ae      	adds	r2, #174	@ 0xae
 80081ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80081f0:	695b      	ldr	r3, [r3, #20]
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d014      	beq.n	8008220 <USBD_LL_DataInStage+0x16c>
        {
          pdev->classId = idx;
 80081f6:	7dfa      	ldrb	r2, [r7, #23]
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80081fe:	7dfa      	ldrb	r2, [r7, #23]
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	32ae      	adds	r2, #174	@ 0xae
 8008204:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008208:	695b      	ldr	r3, [r3, #20]
 800820a:	7afa      	ldrb	r2, [r7, #11]
 800820c:	4611      	mov	r1, r2
 800820e:	68f8      	ldr	r0, [r7, #12]
 8008210:	4798      	blx	r3
 8008212:	4603      	mov	r3, r0
 8008214:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8008216:	7dbb      	ldrb	r3, [r7, #22]
 8008218:	2b00      	cmp	r3, #0
 800821a:	d001      	beq.n	8008220 <USBD_LL_DataInStage+0x16c>
          {
            return ret;
 800821c:	7dbb      	ldrb	r3, [r7, #22]
 800821e:	e000      	b.n	8008222 <USBD_LL_DataInStage+0x16e>
        }
      }
    }
  }

  return USBD_OK;
 8008220:	2300      	movs	r3, #0
}
 8008222:	4618      	mov	r0, r3
 8008224:	3718      	adds	r7, #24
 8008226:	46bd      	mov	sp, r7
 8008228:	bd80      	pop	{r7, pc}

0800822a <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800822a:	b580      	push	{r7, lr}
 800822c:	b084      	sub	sp, #16
 800822e:	af00      	add	r7, sp, #0
 8008230:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8008232:	2300      	movs	r3, #0
 8008234:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	2201      	movs	r2, #1
 800823a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	2200      	movs	r2, #0
 8008242:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	2200      	movs	r2, #0
 800824a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	2200      	movs	r2, #0
 8008250:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	2200      	movs	r2, #0
 8008258:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008262:	2b00      	cmp	r3, #0
 8008264:	d014      	beq.n	8008290 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800826c:	685b      	ldr	r3, [r3, #4]
 800826e:	2b00      	cmp	r3, #0
 8008270:	d00e      	beq.n	8008290 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008278:	685b      	ldr	r3, [r3, #4]
 800827a:	687a      	ldr	r2, [r7, #4]
 800827c:	6852      	ldr	r2, [r2, #4]
 800827e:	b2d2      	uxtb	r2, r2
 8008280:	4611      	mov	r1, r2
 8008282:	6878      	ldr	r0, [r7, #4]
 8008284:	4798      	blx	r3
 8008286:	4603      	mov	r3, r0
 8008288:	2b00      	cmp	r3, #0
 800828a:	d001      	beq.n	8008290 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800828c:	2303      	movs	r3, #3
 800828e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008290:	2340      	movs	r3, #64	@ 0x40
 8008292:	2200      	movs	r2, #0
 8008294:	2100      	movs	r1, #0
 8008296:	6878      	ldr	r0, [r7, #4]
 8008298:	f001 fb39 	bl	800990e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	2201      	movs	r2, #1
 80082a0:	f883 2163 	strb.w	r2, [r3, #355]	@ 0x163

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	2240      	movs	r2, #64	@ 0x40
 80082a8:	f8a3 2160 	strh.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80082ac:	2340      	movs	r3, #64	@ 0x40
 80082ae:	2200      	movs	r2, #0
 80082b0:	2180      	movs	r1, #128	@ 0x80
 80082b2:	6878      	ldr	r0, [r7, #4]
 80082b4:	f001 fb2b 	bl	800990e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	2201      	movs	r2, #1
 80082bc:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	2240      	movs	r2, #64	@ 0x40
 80082c4:	841a      	strh	r2, [r3, #32]

  return ret;
 80082c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80082c8:	4618      	mov	r0, r3
 80082ca:	3710      	adds	r7, #16
 80082cc:	46bd      	mov	sp, r7
 80082ce:	bd80      	pop	{r7, pc}

080082d0 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80082d0:	b480      	push	{r7}
 80082d2:	b083      	sub	sp, #12
 80082d4:	af00      	add	r7, sp, #0
 80082d6:	6078      	str	r0, [r7, #4]
 80082d8:	460b      	mov	r3, r1
 80082da:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	78fa      	ldrb	r2, [r7, #3]
 80082e0:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80082e2:	2300      	movs	r3, #0
}
 80082e4:	4618      	mov	r0, r3
 80082e6:	370c      	adds	r7, #12
 80082e8:	46bd      	mov	sp, r7
 80082ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ee:	4770      	bx	lr

080082f0 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80082f0:	b480      	push	{r7}
 80082f2:	b083      	sub	sp, #12
 80082f4:	af00      	add	r7, sp, #0
 80082f6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80082fe:	b2db      	uxtb	r3, r3
 8008300:	2b04      	cmp	r3, #4
 8008302:	d006      	beq.n	8008312 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800830a:	b2da      	uxtb	r2, r3
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	2204      	movs	r2, #4
 8008316:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800831a:	2300      	movs	r3, #0
}
 800831c:	4618      	mov	r0, r3
 800831e:	370c      	adds	r7, #12
 8008320:	46bd      	mov	sp, r7
 8008322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008326:	4770      	bx	lr

08008328 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008328:	b480      	push	{r7}
 800832a:	b083      	sub	sp, #12
 800832c:	af00      	add	r7, sp, #0
 800832e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008336:	b2db      	uxtb	r3, r3
 8008338:	2b04      	cmp	r3, #4
 800833a:	d106      	bne.n	800834a <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8008342:	b2da      	uxtb	r2, r3
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800834a:	2300      	movs	r3, #0
}
 800834c:	4618      	mov	r0, r3
 800834e:	370c      	adds	r7, #12
 8008350:	46bd      	mov	sp, r7
 8008352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008356:	4770      	bx	lr

08008358 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008358:	b580      	push	{r7, lr}
 800835a:	b082      	sub	sp, #8
 800835c:	af00      	add	r7, sp, #0
 800835e:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008366:	b2db      	uxtb	r3, r3
 8008368:	2b03      	cmp	r3, #3
 800836a:	d110      	bne.n	800838e <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008372:	2b00      	cmp	r3, #0
 8008374:	d00b      	beq.n	800838e <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800837c:	69db      	ldr	r3, [r3, #28]
 800837e:	2b00      	cmp	r3, #0
 8008380:	d005      	beq.n	800838e <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008388:	69db      	ldr	r3, [r3, #28]
 800838a:	6878      	ldr	r0, [r7, #4]
 800838c:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800838e:	2300      	movs	r3, #0
}
 8008390:	4618      	mov	r0, r3
 8008392:	3708      	adds	r7, #8
 8008394:	46bd      	mov	sp, r7
 8008396:	bd80      	pop	{r7, pc}

08008398 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8008398:	b580      	push	{r7, lr}
 800839a:	b082      	sub	sp, #8
 800839c:	af00      	add	r7, sp, #0
 800839e:	6078      	str	r0, [r7, #4]
 80083a0:	460b      	mov	r3, r1
 80083a2:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	32ae      	adds	r2, #174	@ 0xae
 80083ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d101      	bne.n	80083ba <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80083b6:	2303      	movs	r3, #3
 80083b8:	e01c      	b.n	80083f4 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80083c0:	b2db      	uxtb	r3, r3
 80083c2:	2b03      	cmp	r3, #3
 80083c4:	d115      	bne.n	80083f2 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	32ae      	adds	r2, #174	@ 0xae
 80083d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80083d4:	6a1b      	ldr	r3, [r3, #32]
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d00b      	beq.n	80083f2 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	32ae      	adds	r2, #174	@ 0xae
 80083e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80083e8:	6a1b      	ldr	r3, [r3, #32]
 80083ea:	78fa      	ldrb	r2, [r7, #3]
 80083ec:	4611      	mov	r1, r2
 80083ee:	6878      	ldr	r0, [r7, #4]
 80083f0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80083f2:	2300      	movs	r3, #0
}
 80083f4:	4618      	mov	r0, r3
 80083f6:	3708      	adds	r7, #8
 80083f8:	46bd      	mov	sp, r7
 80083fa:	bd80      	pop	{r7, pc}

080083fc <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80083fc:	b580      	push	{r7, lr}
 80083fe:	b082      	sub	sp, #8
 8008400:	af00      	add	r7, sp, #0
 8008402:	6078      	str	r0, [r7, #4]
 8008404:	460b      	mov	r3, r1
 8008406:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	32ae      	adds	r2, #174	@ 0xae
 8008412:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008416:	2b00      	cmp	r3, #0
 8008418:	d101      	bne.n	800841e <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800841a:	2303      	movs	r3, #3
 800841c:	e01c      	b.n	8008458 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008424:	b2db      	uxtb	r3, r3
 8008426:	2b03      	cmp	r3, #3
 8008428:	d115      	bne.n	8008456 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	32ae      	adds	r2, #174	@ 0xae
 8008434:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008438:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800843a:	2b00      	cmp	r3, #0
 800843c:	d00b      	beq.n	8008456 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	32ae      	adds	r2, #174	@ 0xae
 8008448:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800844c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800844e:	78fa      	ldrb	r2, [r7, #3]
 8008450:	4611      	mov	r1, r2
 8008452:	6878      	ldr	r0, [r7, #4]
 8008454:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008456:	2300      	movs	r3, #0
}
 8008458:	4618      	mov	r0, r3
 800845a:	3708      	adds	r7, #8
 800845c:	46bd      	mov	sp, r7
 800845e:	bd80      	pop	{r7, pc}

08008460 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8008460:	b480      	push	{r7}
 8008462:	b083      	sub	sp, #12
 8008464:	af00      	add	r7, sp, #0
 8008466:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008468:	2300      	movs	r3, #0
}
 800846a:	4618      	mov	r0, r3
 800846c:	370c      	adds	r7, #12
 800846e:	46bd      	mov	sp, r7
 8008470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008474:	4770      	bx	lr

08008476 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8008476:	b580      	push	{r7, lr}
 8008478:	b084      	sub	sp, #16
 800847a:	af00      	add	r7, sp, #0
 800847c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800847e:	2300      	movs	r3, #0
 8008480:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	2201      	movs	r2, #1
 8008486:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008490:	2b00      	cmp	r3, #0
 8008492:	d00e      	beq.n	80084b2 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800849a:	685b      	ldr	r3, [r3, #4]
 800849c:	687a      	ldr	r2, [r7, #4]
 800849e:	6852      	ldr	r2, [r2, #4]
 80084a0:	b2d2      	uxtb	r2, r2
 80084a2:	4611      	mov	r1, r2
 80084a4:	6878      	ldr	r0, [r7, #4]
 80084a6:	4798      	blx	r3
 80084a8:	4603      	mov	r3, r0
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d001      	beq.n	80084b2 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80084ae:	2303      	movs	r3, #3
 80084b0:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80084b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80084b4:	4618      	mov	r0, r3
 80084b6:	3710      	adds	r7, #16
 80084b8:	46bd      	mov	sp, r7
 80084ba:	bd80      	pop	{r7, pc}

080084bc <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80084bc:	b480      	push	{r7}
 80084be:	b083      	sub	sp, #12
 80084c0:	af00      	add	r7, sp, #0
 80084c2:	6078      	str	r0, [r7, #4]
 80084c4:	460b      	mov	r3, r1
 80084c6:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80084c8:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80084ca:	4618      	mov	r0, r3
 80084cc:	370c      	adds	r7, #12
 80084ce:	46bd      	mov	sp, r7
 80084d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d4:	4770      	bx	lr

080084d6 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80084d6:	b480      	push	{r7}
 80084d8:	b083      	sub	sp, #12
 80084da:	af00      	add	r7, sp, #0
 80084dc:	6078      	str	r0, [r7, #4]
 80084de:	460b      	mov	r3, r1
 80084e0:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80084e2:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80084e4:	4618      	mov	r0, r3
 80084e6:	370c      	adds	r7, #12
 80084e8:	46bd      	mov	sp, r7
 80084ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ee:	4770      	bx	lr

080084f0 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80084f0:	b580      	push	{r7, lr}
 80084f2:	b086      	sub	sp, #24
 80084f4:	af00      	add	r7, sp, #0
 80084f6:	6078      	str	r0, [r7, #4]
 80084f8:	460b      	mov	r3, r1
 80084fa:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8008504:	2300      	movs	r3, #0
 8008506:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	885b      	ldrh	r3, [r3, #2]
 800850c:	b29b      	uxth	r3, r3
 800850e:	68fa      	ldr	r2, [r7, #12]
 8008510:	7812      	ldrb	r2, [r2, #0]
 8008512:	4293      	cmp	r3, r2
 8008514:	d91f      	bls.n	8008556 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	781b      	ldrb	r3, [r3, #0]
 800851a:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800851c:	e013      	b.n	8008546 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800851e:	f107 030a 	add.w	r3, r7, #10
 8008522:	4619      	mov	r1, r3
 8008524:	6978      	ldr	r0, [r7, #20]
 8008526:	f000 f81b 	bl	8008560 <USBD_GetNextDesc>
 800852a:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800852c:	697b      	ldr	r3, [r7, #20]
 800852e:	785b      	ldrb	r3, [r3, #1]
 8008530:	2b05      	cmp	r3, #5
 8008532:	d108      	bne.n	8008546 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8008534:	697b      	ldr	r3, [r7, #20]
 8008536:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8008538:	693b      	ldr	r3, [r7, #16]
 800853a:	789b      	ldrb	r3, [r3, #2]
 800853c:	78fa      	ldrb	r2, [r7, #3]
 800853e:	429a      	cmp	r2, r3
 8008540:	d008      	beq.n	8008554 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8008542:	2300      	movs	r3, #0
 8008544:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	885b      	ldrh	r3, [r3, #2]
 800854a:	b29a      	uxth	r2, r3
 800854c:	897b      	ldrh	r3, [r7, #10]
 800854e:	429a      	cmp	r2, r3
 8008550:	d8e5      	bhi.n	800851e <USBD_GetEpDesc+0x2e>
 8008552:	e000      	b.n	8008556 <USBD_GetEpDesc+0x66>
          break;
 8008554:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8008556:	693b      	ldr	r3, [r7, #16]
}
 8008558:	4618      	mov	r0, r3
 800855a:	3718      	adds	r7, #24
 800855c:	46bd      	mov	sp, r7
 800855e:	bd80      	pop	{r7, pc}

08008560 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8008560:	b480      	push	{r7}
 8008562:	b085      	sub	sp, #20
 8008564:	af00      	add	r7, sp, #0
 8008566:	6078      	str	r0, [r7, #4]
 8008568:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800856e:	683b      	ldr	r3, [r7, #0]
 8008570:	881b      	ldrh	r3, [r3, #0]
 8008572:	68fa      	ldr	r2, [r7, #12]
 8008574:	7812      	ldrb	r2, [r2, #0]
 8008576:	4413      	add	r3, r2
 8008578:	b29a      	uxth	r2, r3
 800857a:	683b      	ldr	r3, [r7, #0]
 800857c:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	781b      	ldrb	r3, [r3, #0]
 8008582:	461a      	mov	r2, r3
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	4413      	add	r3, r2
 8008588:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800858a:	68fb      	ldr	r3, [r7, #12]
}
 800858c:	4618      	mov	r0, r3
 800858e:	3714      	adds	r7, #20
 8008590:	46bd      	mov	sp, r7
 8008592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008596:	4770      	bx	lr

08008598 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008598:	b480      	push	{r7}
 800859a:	b087      	sub	sp, #28
 800859c:	af00      	add	r7, sp, #0
 800859e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80085a4:	697b      	ldr	r3, [r7, #20]
 80085a6:	781b      	ldrb	r3, [r3, #0]
 80085a8:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80085aa:	697b      	ldr	r3, [r7, #20]
 80085ac:	3301      	adds	r3, #1
 80085ae:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80085b0:	697b      	ldr	r3, [r7, #20]
 80085b2:	781b      	ldrb	r3, [r3, #0]
 80085b4:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80085b6:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80085ba:	021b      	lsls	r3, r3, #8
 80085bc:	b21a      	sxth	r2, r3
 80085be:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80085c2:	4313      	orrs	r3, r2
 80085c4:	b21b      	sxth	r3, r3
 80085c6:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80085c8:	89fb      	ldrh	r3, [r7, #14]
}
 80085ca:	4618      	mov	r0, r3
 80085cc:	371c      	adds	r7, #28
 80085ce:	46bd      	mov	sp, r7
 80085d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d4:	4770      	bx	lr
	...

080085d8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80085d8:	b580      	push	{r7, lr}
 80085da:	b084      	sub	sp, #16
 80085dc:	af00      	add	r7, sp, #0
 80085de:	6078      	str	r0, [r7, #4]
 80085e0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80085e2:	2300      	movs	r3, #0
 80085e4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80085e6:	683b      	ldr	r3, [r7, #0]
 80085e8:	781b      	ldrb	r3, [r3, #0]
 80085ea:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80085ee:	2b40      	cmp	r3, #64	@ 0x40
 80085f0:	d005      	beq.n	80085fe <USBD_StdDevReq+0x26>
 80085f2:	2b40      	cmp	r3, #64	@ 0x40
 80085f4:	d857      	bhi.n	80086a6 <USBD_StdDevReq+0xce>
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d00f      	beq.n	800861a <USBD_StdDevReq+0x42>
 80085fa:	2b20      	cmp	r3, #32
 80085fc:	d153      	bne.n	80086a6 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	32ae      	adds	r2, #174	@ 0xae
 8008608:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800860c:	689b      	ldr	r3, [r3, #8]
 800860e:	6839      	ldr	r1, [r7, #0]
 8008610:	6878      	ldr	r0, [r7, #4]
 8008612:	4798      	blx	r3
 8008614:	4603      	mov	r3, r0
 8008616:	73fb      	strb	r3, [r7, #15]
      break;
 8008618:	e04a      	b.n	80086b0 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800861a:	683b      	ldr	r3, [r7, #0]
 800861c:	785b      	ldrb	r3, [r3, #1]
 800861e:	2b09      	cmp	r3, #9
 8008620:	d83b      	bhi.n	800869a <USBD_StdDevReq+0xc2>
 8008622:	a201      	add	r2, pc, #4	@ (adr r2, 8008628 <USBD_StdDevReq+0x50>)
 8008624:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008628:	0800867d 	.word	0x0800867d
 800862c:	08008691 	.word	0x08008691
 8008630:	0800869b 	.word	0x0800869b
 8008634:	08008687 	.word	0x08008687
 8008638:	0800869b 	.word	0x0800869b
 800863c:	0800865b 	.word	0x0800865b
 8008640:	08008651 	.word	0x08008651
 8008644:	0800869b 	.word	0x0800869b
 8008648:	08008673 	.word	0x08008673
 800864c:	08008665 	.word	0x08008665
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008650:	6839      	ldr	r1, [r7, #0]
 8008652:	6878      	ldr	r0, [r7, #4]
 8008654:	f000 fa3e 	bl	8008ad4 <USBD_GetDescriptor>
          break;
 8008658:	e024      	b.n	80086a4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800865a:	6839      	ldr	r1, [r7, #0]
 800865c:	6878      	ldr	r0, [r7, #4]
 800865e:	f000 fba3 	bl	8008da8 <USBD_SetAddress>
          break;
 8008662:	e01f      	b.n	80086a4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8008664:	6839      	ldr	r1, [r7, #0]
 8008666:	6878      	ldr	r0, [r7, #4]
 8008668:	f000 fbe2 	bl	8008e30 <USBD_SetConfig>
 800866c:	4603      	mov	r3, r0
 800866e:	73fb      	strb	r3, [r7, #15]
          break;
 8008670:	e018      	b.n	80086a4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008672:	6839      	ldr	r1, [r7, #0]
 8008674:	6878      	ldr	r0, [r7, #4]
 8008676:	f000 fc85 	bl	8008f84 <USBD_GetConfig>
          break;
 800867a:	e013      	b.n	80086a4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800867c:	6839      	ldr	r1, [r7, #0]
 800867e:	6878      	ldr	r0, [r7, #4]
 8008680:	f000 fcb6 	bl	8008ff0 <USBD_GetStatus>
          break;
 8008684:	e00e      	b.n	80086a4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008686:	6839      	ldr	r1, [r7, #0]
 8008688:	6878      	ldr	r0, [r7, #4]
 800868a:	f000 fce5 	bl	8009058 <USBD_SetFeature>
          break;
 800868e:	e009      	b.n	80086a4 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008690:	6839      	ldr	r1, [r7, #0]
 8008692:	6878      	ldr	r0, [r7, #4]
 8008694:	f000 fd09 	bl	80090aa <USBD_ClrFeature>
          break;
 8008698:	e004      	b.n	80086a4 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800869a:	6839      	ldr	r1, [r7, #0]
 800869c:	6878      	ldr	r0, [r7, #4]
 800869e:	f000 fd60 	bl	8009162 <USBD_CtlError>
          break;
 80086a2:	bf00      	nop
      }
      break;
 80086a4:	e004      	b.n	80086b0 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80086a6:	6839      	ldr	r1, [r7, #0]
 80086a8:	6878      	ldr	r0, [r7, #4]
 80086aa:	f000 fd5a 	bl	8009162 <USBD_CtlError>
      break;
 80086ae:	bf00      	nop
  }

  return ret;
 80086b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80086b2:	4618      	mov	r0, r3
 80086b4:	3710      	adds	r7, #16
 80086b6:	46bd      	mov	sp, r7
 80086b8:	bd80      	pop	{r7, pc}
 80086ba:	bf00      	nop

080086bc <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80086bc:	b580      	push	{r7, lr}
 80086be:	b084      	sub	sp, #16
 80086c0:	af00      	add	r7, sp, #0
 80086c2:	6078      	str	r0, [r7, #4]
 80086c4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80086c6:	2300      	movs	r3, #0
 80086c8:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80086ca:	683b      	ldr	r3, [r7, #0]
 80086cc:	781b      	ldrb	r3, [r3, #0]
 80086ce:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80086d2:	2b40      	cmp	r3, #64	@ 0x40
 80086d4:	d005      	beq.n	80086e2 <USBD_StdItfReq+0x26>
 80086d6:	2b40      	cmp	r3, #64	@ 0x40
 80086d8:	d852      	bhi.n	8008780 <USBD_StdItfReq+0xc4>
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d001      	beq.n	80086e2 <USBD_StdItfReq+0x26>
 80086de:	2b20      	cmp	r3, #32
 80086e0:	d14e      	bne.n	8008780 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80086e8:	b2db      	uxtb	r3, r3
 80086ea:	3b01      	subs	r3, #1
 80086ec:	2b02      	cmp	r3, #2
 80086ee:	d840      	bhi.n	8008772 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80086f0:	683b      	ldr	r3, [r7, #0]
 80086f2:	889b      	ldrh	r3, [r3, #4]
 80086f4:	b2db      	uxtb	r3, r3
 80086f6:	2b01      	cmp	r3, #1
 80086f8:	d836      	bhi.n	8008768 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80086fa:	683b      	ldr	r3, [r7, #0]
 80086fc:	889b      	ldrh	r3, [r3, #4]
 80086fe:	b2db      	uxtb	r3, r3
 8008700:	4619      	mov	r1, r3
 8008702:	6878      	ldr	r0, [r7, #4]
 8008704:	f7ff feda 	bl	80084bc <USBD_CoreFindIF>
 8008708:	4603      	mov	r3, r0
 800870a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800870c:	7bbb      	ldrb	r3, [r7, #14]
 800870e:	2bff      	cmp	r3, #255	@ 0xff
 8008710:	d01d      	beq.n	800874e <USBD_StdItfReq+0x92>
 8008712:	7bbb      	ldrb	r3, [r7, #14]
 8008714:	2b00      	cmp	r3, #0
 8008716:	d11a      	bne.n	800874e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8008718:	7bba      	ldrb	r2, [r7, #14]
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	32ae      	adds	r2, #174	@ 0xae
 800871e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008722:	689b      	ldr	r3, [r3, #8]
 8008724:	2b00      	cmp	r3, #0
 8008726:	d00f      	beq.n	8008748 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8008728:	7bba      	ldrb	r2, [r7, #14]
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008730:	7bba      	ldrb	r2, [r7, #14]
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	32ae      	adds	r2, #174	@ 0xae
 8008736:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800873a:	689b      	ldr	r3, [r3, #8]
 800873c:	6839      	ldr	r1, [r7, #0]
 800873e:	6878      	ldr	r0, [r7, #4]
 8008740:	4798      	blx	r3
 8008742:	4603      	mov	r3, r0
 8008744:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008746:	e004      	b.n	8008752 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8008748:	2303      	movs	r3, #3
 800874a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800874c:	e001      	b.n	8008752 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800874e:	2303      	movs	r3, #3
 8008750:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008752:	683b      	ldr	r3, [r7, #0]
 8008754:	88db      	ldrh	r3, [r3, #6]
 8008756:	2b00      	cmp	r3, #0
 8008758:	d110      	bne.n	800877c <USBD_StdItfReq+0xc0>
 800875a:	7bfb      	ldrb	r3, [r7, #15]
 800875c:	2b00      	cmp	r3, #0
 800875e:	d10d      	bne.n	800877c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8008760:	6878      	ldr	r0, [r7, #4]
 8008762:	f000 fdbb 	bl	80092dc <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008766:	e009      	b.n	800877c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8008768:	6839      	ldr	r1, [r7, #0]
 800876a:	6878      	ldr	r0, [r7, #4]
 800876c:	f000 fcf9 	bl	8009162 <USBD_CtlError>
          break;
 8008770:	e004      	b.n	800877c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8008772:	6839      	ldr	r1, [r7, #0]
 8008774:	6878      	ldr	r0, [r7, #4]
 8008776:	f000 fcf4 	bl	8009162 <USBD_CtlError>
          break;
 800877a:	e000      	b.n	800877e <USBD_StdItfReq+0xc2>
          break;
 800877c:	bf00      	nop
      }
      break;
 800877e:	e004      	b.n	800878a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8008780:	6839      	ldr	r1, [r7, #0]
 8008782:	6878      	ldr	r0, [r7, #4]
 8008784:	f000 fced 	bl	8009162 <USBD_CtlError>
      break;
 8008788:	bf00      	nop
  }

  return ret;
 800878a:	7bfb      	ldrb	r3, [r7, #15]
}
 800878c:	4618      	mov	r0, r3
 800878e:	3710      	adds	r7, #16
 8008790:	46bd      	mov	sp, r7
 8008792:	bd80      	pop	{r7, pc}

08008794 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008794:	b580      	push	{r7, lr}
 8008796:	b084      	sub	sp, #16
 8008798:	af00      	add	r7, sp, #0
 800879a:	6078      	str	r0, [r7, #4]
 800879c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800879e:	2300      	movs	r3, #0
 80087a0:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80087a2:	683b      	ldr	r3, [r7, #0]
 80087a4:	889b      	ldrh	r3, [r3, #4]
 80087a6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80087a8:	683b      	ldr	r3, [r7, #0]
 80087aa:	781b      	ldrb	r3, [r3, #0]
 80087ac:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80087b0:	2b40      	cmp	r3, #64	@ 0x40
 80087b2:	d007      	beq.n	80087c4 <USBD_StdEPReq+0x30>
 80087b4:	2b40      	cmp	r3, #64	@ 0x40
 80087b6:	f200 8181 	bhi.w	8008abc <USBD_StdEPReq+0x328>
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d02a      	beq.n	8008814 <USBD_StdEPReq+0x80>
 80087be:	2b20      	cmp	r3, #32
 80087c0:	f040 817c 	bne.w	8008abc <USBD_StdEPReq+0x328>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80087c4:	7bbb      	ldrb	r3, [r7, #14]
 80087c6:	4619      	mov	r1, r3
 80087c8:	6878      	ldr	r0, [r7, #4]
 80087ca:	f7ff fe84 	bl	80084d6 <USBD_CoreFindEP>
 80087ce:	4603      	mov	r3, r0
 80087d0:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80087d2:	7b7b      	ldrb	r3, [r7, #13]
 80087d4:	2bff      	cmp	r3, #255	@ 0xff
 80087d6:	f000 8176 	beq.w	8008ac6 <USBD_StdEPReq+0x332>
 80087da:	7b7b      	ldrb	r3, [r7, #13]
 80087dc:	2b00      	cmp	r3, #0
 80087de:	f040 8172 	bne.w	8008ac6 <USBD_StdEPReq+0x332>
      {
        pdev->classId = idx;
 80087e2:	7b7a      	ldrb	r2, [r7, #13]
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80087ea:	7b7a      	ldrb	r2, [r7, #13]
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	32ae      	adds	r2, #174	@ 0xae
 80087f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087f4:	689b      	ldr	r3, [r3, #8]
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	f000 8165 	beq.w	8008ac6 <USBD_StdEPReq+0x332>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80087fc:	7b7a      	ldrb	r2, [r7, #13]
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	32ae      	adds	r2, #174	@ 0xae
 8008802:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008806:	689b      	ldr	r3, [r3, #8]
 8008808:	6839      	ldr	r1, [r7, #0]
 800880a:	6878      	ldr	r0, [r7, #4]
 800880c:	4798      	blx	r3
 800880e:	4603      	mov	r3, r0
 8008810:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8008812:	e158      	b.n	8008ac6 <USBD_StdEPReq+0x332>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008814:	683b      	ldr	r3, [r7, #0]
 8008816:	785b      	ldrb	r3, [r3, #1]
 8008818:	2b03      	cmp	r3, #3
 800881a:	d008      	beq.n	800882e <USBD_StdEPReq+0x9a>
 800881c:	2b03      	cmp	r3, #3
 800881e:	f300 8147 	bgt.w	8008ab0 <USBD_StdEPReq+0x31c>
 8008822:	2b00      	cmp	r3, #0
 8008824:	f000 809b 	beq.w	800895e <USBD_StdEPReq+0x1ca>
 8008828:	2b01      	cmp	r3, #1
 800882a:	d03c      	beq.n	80088a6 <USBD_StdEPReq+0x112>
 800882c:	e140      	b.n	8008ab0 <USBD_StdEPReq+0x31c>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008834:	b2db      	uxtb	r3, r3
 8008836:	2b02      	cmp	r3, #2
 8008838:	d002      	beq.n	8008840 <USBD_StdEPReq+0xac>
 800883a:	2b03      	cmp	r3, #3
 800883c:	d016      	beq.n	800886c <USBD_StdEPReq+0xd8>
 800883e:	e02c      	b.n	800889a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008840:	7bbb      	ldrb	r3, [r7, #14]
 8008842:	2b00      	cmp	r3, #0
 8008844:	d00d      	beq.n	8008862 <USBD_StdEPReq+0xce>
 8008846:	7bbb      	ldrb	r3, [r7, #14]
 8008848:	2b80      	cmp	r3, #128	@ 0x80
 800884a:	d00a      	beq.n	8008862 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800884c:	7bbb      	ldrb	r3, [r7, #14]
 800884e:	4619      	mov	r1, r3
 8008850:	6878      	ldr	r0, [r7, #4]
 8008852:	f001 f8a1 	bl	8009998 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008856:	2180      	movs	r1, #128	@ 0x80
 8008858:	6878      	ldr	r0, [r7, #4]
 800885a:	f001 f89d 	bl	8009998 <USBD_LL_StallEP>
 800885e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008860:	e020      	b.n	80088a4 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8008862:	6839      	ldr	r1, [r7, #0]
 8008864:	6878      	ldr	r0, [r7, #4]
 8008866:	f000 fc7c 	bl	8009162 <USBD_CtlError>
              break;
 800886a:	e01b      	b.n	80088a4 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800886c:	683b      	ldr	r3, [r7, #0]
 800886e:	885b      	ldrh	r3, [r3, #2]
 8008870:	2b00      	cmp	r3, #0
 8008872:	d10e      	bne.n	8008892 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008874:	7bbb      	ldrb	r3, [r7, #14]
 8008876:	2b00      	cmp	r3, #0
 8008878:	d00b      	beq.n	8008892 <USBD_StdEPReq+0xfe>
 800887a:	7bbb      	ldrb	r3, [r7, #14]
 800887c:	2b80      	cmp	r3, #128	@ 0x80
 800887e:	d008      	beq.n	8008892 <USBD_StdEPReq+0xfe>
 8008880:	683b      	ldr	r3, [r7, #0]
 8008882:	88db      	ldrh	r3, [r3, #6]
 8008884:	2b00      	cmp	r3, #0
 8008886:	d104      	bne.n	8008892 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008888:	7bbb      	ldrb	r3, [r7, #14]
 800888a:	4619      	mov	r1, r3
 800888c:	6878      	ldr	r0, [r7, #4]
 800888e:	f001 f883 	bl	8009998 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8008892:	6878      	ldr	r0, [r7, #4]
 8008894:	f000 fd22 	bl	80092dc <USBD_CtlSendStatus>

              break;
 8008898:	e004      	b.n	80088a4 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800889a:	6839      	ldr	r1, [r7, #0]
 800889c:	6878      	ldr	r0, [r7, #4]
 800889e:	f000 fc60 	bl	8009162 <USBD_CtlError>
              break;
 80088a2:	bf00      	nop
          }
          break;
 80088a4:	e109      	b.n	8008aba <USBD_StdEPReq+0x326>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80088ac:	b2db      	uxtb	r3, r3
 80088ae:	2b02      	cmp	r3, #2
 80088b0:	d002      	beq.n	80088b8 <USBD_StdEPReq+0x124>
 80088b2:	2b03      	cmp	r3, #3
 80088b4:	d016      	beq.n	80088e4 <USBD_StdEPReq+0x150>
 80088b6:	e04b      	b.n	8008950 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80088b8:	7bbb      	ldrb	r3, [r7, #14]
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d00d      	beq.n	80088da <USBD_StdEPReq+0x146>
 80088be:	7bbb      	ldrb	r3, [r7, #14]
 80088c0:	2b80      	cmp	r3, #128	@ 0x80
 80088c2:	d00a      	beq.n	80088da <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80088c4:	7bbb      	ldrb	r3, [r7, #14]
 80088c6:	4619      	mov	r1, r3
 80088c8:	6878      	ldr	r0, [r7, #4]
 80088ca:	f001 f865 	bl	8009998 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80088ce:	2180      	movs	r1, #128	@ 0x80
 80088d0:	6878      	ldr	r0, [r7, #4]
 80088d2:	f001 f861 	bl	8009998 <USBD_LL_StallEP>
 80088d6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80088d8:	e040      	b.n	800895c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80088da:	6839      	ldr	r1, [r7, #0]
 80088dc:	6878      	ldr	r0, [r7, #4]
 80088de:	f000 fc40 	bl	8009162 <USBD_CtlError>
              break;
 80088e2:	e03b      	b.n	800895c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80088e4:	683b      	ldr	r3, [r7, #0]
 80088e6:	885b      	ldrh	r3, [r3, #2]
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d136      	bne.n	800895a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80088ec:	7bbb      	ldrb	r3, [r7, #14]
 80088ee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d004      	beq.n	8008900 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80088f6:	7bbb      	ldrb	r3, [r7, #14]
 80088f8:	4619      	mov	r1, r3
 80088fa:	6878      	ldr	r0, [r7, #4]
 80088fc:	f001 f86b 	bl	80099d6 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8008900:	6878      	ldr	r0, [r7, #4]
 8008902:	f000 fceb 	bl	80092dc <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8008906:	7bbb      	ldrb	r3, [r7, #14]
 8008908:	4619      	mov	r1, r3
 800890a:	6878      	ldr	r0, [r7, #4]
 800890c:	f7ff fde3 	bl	80084d6 <USBD_CoreFindEP>
 8008910:	4603      	mov	r3, r0
 8008912:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008914:	7b7b      	ldrb	r3, [r7, #13]
 8008916:	2bff      	cmp	r3, #255	@ 0xff
 8008918:	d01f      	beq.n	800895a <USBD_StdEPReq+0x1c6>
 800891a:	7b7b      	ldrb	r3, [r7, #13]
 800891c:	2b00      	cmp	r3, #0
 800891e:	d11c      	bne.n	800895a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8008920:	7b7a      	ldrb	r2, [r7, #13]
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8008928:	7b7a      	ldrb	r2, [r7, #13]
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	32ae      	adds	r2, #174	@ 0xae
 800892e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008932:	689b      	ldr	r3, [r3, #8]
 8008934:	2b00      	cmp	r3, #0
 8008936:	d010      	beq.n	800895a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008938:	7b7a      	ldrb	r2, [r7, #13]
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	32ae      	adds	r2, #174	@ 0xae
 800893e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008942:	689b      	ldr	r3, [r3, #8]
 8008944:	6839      	ldr	r1, [r7, #0]
 8008946:	6878      	ldr	r0, [r7, #4]
 8008948:	4798      	blx	r3
 800894a:	4603      	mov	r3, r0
 800894c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800894e:	e004      	b.n	800895a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8008950:	6839      	ldr	r1, [r7, #0]
 8008952:	6878      	ldr	r0, [r7, #4]
 8008954:	f000 fc05 	bl	8009162 <USBD_CtlError>
              break;
 8008958:	e000      	b.n	800895c <USBD_StdEPReq+0x1c8>
              break;
 800895a:	bf00      	nop
          }
          break;
 800895c:	e0ad      	b.n	8008aba <USBD_StdEPReq+0x326>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008964:	b2db      	uxtb	r3, r3
 8008966:	2b02      	cmp	r3, #2
 8008968:	d002      	beq.n	8008970 <USBD_StdEPReq+0x1dc>
 800896a:	2b03      	cmp	r3, #3
 800896c:	d033      	beq.n	80089d6 <USBD_StdEPReq+0x242>
 800896e:	e099      	b.n	8008aa4 <USBD_StdEPReq+0x310>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008970:	7bbb      	ldrb	r3, [r7, #14]
 8008972:	2b00      	cmp	r3, #0
 8008974:	d007      	beq.n	8008986 <USBD_StdEPReq+0x1f2>
 8008976:	7bbb      	ldrb	r3, [r7, #14]
 8008978:	2b80      	cmp	r3, #128	@ 0x80
 800897a:	d004      	beq.n	8008986 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800897c:	6839      	ldr	r1, [r7, #0]
 800897e:	6878      	ldr	r0, [r7, #4]
 8008980:	f000 fbef 	bl	8009162 <USBD_CtlError>
                break;
 8008984:	e093      	b.n	8008aae <USBD_StdEPReq+0x31a>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008986:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800898a:	2b00      	cmp	r3, #0
 800898c:	da0b      	bge.n	80089a6 <USBD_StdEPReq+0x212>
 800898e:	7bbb      	ldrb	r3, [r7, #14]
 8008990:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008994:	4613      	mov	r3, r2
 8008996:	009b      	lsls	r3, r3, #2
 8008998:	4413      	add	r3, r2
 800899a:	009b      	lsls	r3, r3, #2
 800899c:	3310      	adds	r3, #16
 800899e:	687a      	ldr	r2, [r7, #4]
 80089a0:	4413      	add	r3, r2
 80089a2:	3304      	adds	r3, #4
 80089a4:	e00b      	b.n	80089be <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80089a6:	7bbb      	ldrb	r3, [r7, #14]
 80089a8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80089ac:	4613      	mov	r3, r2
 80089ae:	009b      	lsls	r3, r3, #2
 80089b0:	4413      	add	r3, r2
 80089b2:	009b      	lsls	r3, r3, #2
 80089b4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80089b8:	687a      	ldr	r2, [r7, #4]
 80089ba:	4413      	add	r3, r2
 80089bc:	3304      	adds	r3, #4
 80089be:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80089c0:	68bb      	ldr	r3, [r7, #8]
 80089c2:	2200      	movs	r2, #0
 80089c4:	739a      	strb	r2, [r3, #14]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80089c6:	68bb      	ldr	r3, [r7, #8]
 80089c8:	330e      	adds	r3, #14
 80089ca:	2202      	movs	r2, #2
 80089cc:	4619      	mov	r1, r3
 80089ce:	6878      	ldr	r0, [r7, #4]
 80089d0:	f000 fc44 	bl	800925c <USBD_CtlSendData>
              break;
 80089d4:	e06b      	b.n	8008aae <USBD_StdEPReq+0x31a>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80089d6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80089da:	2b00      	cmp	r3, #0
 80089dc:	da11      	bge.n	8008a02 <USBD_StdEPReq+0x26e>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80089de:	7bbb      	ldrb	r3, [r7, #14]
 80089e0:	f003 020f 	and.w	r2, r3, #15
 80089e4:	6879      	ldr	r1, [r7, #4]
 80089e6:	4613      	mov	r3, r2
 80089e8:	009b      	lsls	r3, r3, #2
 80089ea:	4413      	add	r3, r2
 80089ec:	009b      	lsls	r3, r3, #2
 80089ee:	440b      	add	r3, r1
 80089f0:	3323      	adds	r3, #35	@ 0x23
 80089f2:	781b      	ldrb	r3, [r3, #0]
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d117      	bne.n	8008a28 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 80089f8:	6839      	ldr	r1, [r7, #0]
 80089fa:	6878      	ldr	r0, [r7, #4]
 80089fc:	f000 fbb1 	bl	8009162 <USBD_CtlError>
                  break;
 8008a00:	e055      	b.n	8008aae <USBD_StdEPReq+0x31a>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008a02:	7bbb      	ldrb	r3, [r7, #14]
 8008a04:	f003 020f 	and.w	r2, r3, #15
 8008a08:	6879      	ldr	r1, [r7, #4]
 8008a0a:	4613      	mov	r3, r2
 8008a0c:	009b      	lsls	r3, r3, #2
 8008a0e:	4413      	add	r3, r2
 8008a10:	009b      	lsls	r3, r3, #2
 8008a12:	440b      	add	r3, r1
 8008a14:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8008a18:	781b      	ldrb	r3, [r3, #0]
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d104      	bne.n	8008a28 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 8008a1e:	6839      	ldr	r1, [r7, #0]
 8008a20:	6878      	ldr	r0, [r7, #4]
 8008a22:	f000 fb9e 	bl	8009162 <USBD_CtlError>
                  break;
 8008a26:	e042      	b.n	8008aae <USBD_StdEPReq+0x31a>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008a28:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	da0b      	bge.n	8008a48 <USBD_StdEPReq+0x2b4>
 8008a30:	7bbb      	ldrb	r3, [r7, #14]
 8008a32:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008a36:	4613      	mov	r3, r2
 8008a38:	009b      	lsls	r3, r3, #2
 8008a3a:	4413      	add	r3, r2
 8008a3c:	009b      	lsls	r3, r3, #2
 8008a3e:	3310      	adds	r3, #16
 8008a40:	687a      	ldr	r2, [r7, #4]
 8008a42:	4413      	add	r3, r2
 8008a44:	3304      	adds	r3, #4
 8008a46:	e00b      	b.n	8008a60 <USBD_StdEPReq+0x2cc>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008a48:	7bbb      	ldrb	r3, [r7, #14]
 8008a4a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008a4e:	4613      	mov	r3, r2
 8008a50:	009b      	lsls	r3, r3, #2
 8008a52:	4413      	add	r3, r2
 8008a54:	009b      	lsls	r3, r3, #2
 8008a56:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008a5a:	687a      	ldr	r2, [r7, #4]
 8008a5c:	4413      	add	r3, r2
 8008a5e:	3304      	adds	r3, #4
 8008a60:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008a62:	7bbb      	ldrb	r3, [r7, #14]
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d002      	beq.n	8008a6e <USBD_StdEPReq+0x2da>
 8008a68:	7bbb      	ldrb	r3, [r7, #14]
 8008a6a:	2b80      	cmp	r3, #128	@ 0x80
 8008a6c:	d103      	bne.n	8008a76 <USBD_StdEPReq+0x2e2>
              {
                pep->status = 0x0000U;
 8008a6e:	68bb      	ldr	r3, [r7, #8]
 8008a70:	2200      	movs	r2, #0
 8008a72:	739a      	strb	r2, [r3, #14]
 8008a74:	e00e      	b.n	8008a94 <USBD_StdEPReq+0x300>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008a76:	7bbb      	ldrb	r3, [r7, #14]
 8008a78:	4619      	mov	r1, r3
 8008a7a:	6878      	ldr	r0, [r7, #4]
 8008a7c:	f000 ffca 	bl	8009a14 <USBD_LL_IsStallEP>
 8008a80:	4603      	mov	r3, r0
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d003      	beq.n	8008a8e <USBD_StdEPReq+0x2fa>
              {
                pep->status = 0x0001U;
 8008a86:	68bb      	ldr	r3, [r7, #8]
 8008a88:	2201      	movs	r2, #1
 8008a8a:	739a      	strb	r2, [r3, #14]
 8008a8c:	e002      	b.n	8008a94 <USBD_StdEPReq+0x300>
              }
              else
              {
                pep->status = 0x0000U;
 8008a8e:	68bb      	ldr	r3, [r7, #8]
 8008a90:	2200      	movs	r2, #0
 8008a92:	739a      	strb	r2, [r3, #14]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008a94:	68bb      	ldr	r3, [r7, #8]
 8008a96:	330e      	adds	r3, #14
 8008a98:	2202      	movs	r2, #2
 8008a9a:	4619      	mov	r1, r3
 8008a9c:	6878      	ldr	r0, [r7, #4]
 8008a9e:	f000 fbdd 	bl	800925c <USBD_CtlSendData>
              break;
 8008aa2:	e004      	b.n	8008aae <USBD_StdEPReq+0x31a>

            default:
              USBD_CtlError(pdev, req);
 8008aa4:	6839      	ldr	r1, [r7, #0]
 8008aa6:	6878      	ldr	r0, [r7, #4]
 8008aa8:	f000 fb5b 	bl	8009162 <USBD_CtlError>
              break;
 8008aac:	bf00      	nop
          }
          break;
 8008aae:	e004      	b.n	8008aba <USBD_StdEPReq+0x326>

        default:
          USBD_CtlError(pdev, req);
 8008ab0:	6839      	ldr	r1, [r7, #0]
 8008ab2:	6878      	ldr	r0, [r7, #4]
 8008ab4:	f000 fb55 	bl	8009162 <USBD_CtlError>
          break;
 8008ab8:	bf00      	nop
      }
      break;
 8008aba:	e005      	b.n	8008ac8 <USBD_StdEPReq+0x334>

    default:
      USBD_CtlError(pdev, req);
 8008abc:	6839      	ldr	r1, [r7, #0]
 8008abe:	6878      	ldr	r0, [r7, #4]
 8008ac0:	f000 fb4f 	bl	8009162 <USBD_CtlError>
      break;
 8008ac4:	e000      	b.n	8008ac8 <USBD_StdEPReq+0x334>
      break;
 8008ac6:	bf00      	nop
  }

  return ret;
 8008ac8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008aca:	4618      	mov	r0, r3
 8008acc:	3710      	adds	r7, #16
 8008ace:	46bd      	mov	sp, r7
 8008ad0:	bd80      	pop	{r7, pc}
	...

08008ad4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008ad4:	b580      	push	{r7, lr}
 8008ad6:	b084      	sub	sp, #16
 8008ad8:	af00      	add	r7, sp, #0
 8008ada:	6078      	str	r0, [r7, #4]
 8008adc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008ade:	2300      	movs	r3, #0
 8008ae0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008ae2:	2300      	movs	r3, #0
 8008ae4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008ae6:	2300      	movs	r3, #0
 8008ae8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008aea:	683b      	ldr	r3, [r7, #0]
 8008aec:	885b      	ldrh	r3, [r3, #2]
 8008aee:	0a1b      	lsrs	r3, r3, #8
 8008af0:	b29b      	uxth	r3, r3
 8008af2:	3b01      	subs	r3, #1
 8008af4:	2b06      	cmp	r3, #6
 8008af6:	f200 8128 	bhi.w	8008d4a <USBD_GetDescriptor+0x276>
 8008afa:	a201      	add	r2, pc, #4	@ (adr r2, 8008b00 <USBD_GetDescriptor+0x2c>)
 8008afc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b00:	08008b1d 	.word	0x08008b1d
 8008b04:	08008b35 	.word	0x08008b35
 8008b08:	08008b75 	.word	0x08008b75
 8008b0c:	08008d4b 	.word	0x08008d4b
 8008b10:	08008d4b 	.word	0x08008d4b
 8008b14:	08008ceb 	.word	0x08008ceb
 8008b18:	08008d17 	.word	0x08008d17
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	687a      	ldr	r2, [r7, #4]
 8008b26:	7c12      	ldrb	r2, [r2, #16]
 8008b28:	f107 0108 	add.w	r1, r7, #8
 8008b2c:	4610      	mov	r0, r2
 8008b2e:	4798      	blx	r3
 8008b30:	60f8      	str	r0, [r7, #12]
      break;
 8008b32:	e112      	b.n	8008d5a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	7c1b      	ldrb	r3, [r3, #16]
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d10d      	bne.n	8008b58 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008b42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b44:	f107 0208 	add.w	r2, r7, #8
 8008b48:	4610      	mov	r0, r2
 8008b4a:	4798      	blx	r3
 8008b4c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	3301      	adds	r3, #1
 8008b52:	2202      	movs	r2, #2
 8008b54:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008b56:	e100      	b.n	8008d5a <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008b5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b60:	f107 0208 	add.w	r2, r7, #8
 8008b64:	4610      	mov	r0, r2
 8008b66:	4798      	blx	r3
 8008b68:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	3301      	adds	r3, #1
 8008b6e:	2202      	movs	r2, #2
 8008b70:	701a      	strb	r2, [r3, #0]
      break;
 8008b72:	e0f2      	b.n	8008d5a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008b74:	683b      	ldr	r3, [r7, #0]
 8008b76:	885b      	ldrh	r3, [r3, #2]
 8008b78:	b2db      	uxtb	r3, r3
 8008b7a:	2b05      	cmp	r3, #5
 8008b7c:	f200 80ac 	bhi.w	8008cd8 <USBD_GetDescriptor+0x204>
 8008b80:	a201      	add	r2, pc, #4	@ (adr r2, 8008b88 <USBD_GetDescriptor+0xb4>)
 8008b82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b86:	bf00      	nop
 8008b88:	08008ba1 	.word	0x08008ba1
 8008b8c:	08008bd5 	.word	0x08008bd5
 8008b90:	08008c09 	.word	0x08008c09
 8008b94:	08008c3d 	.word	0x08008c3d
 8008b98:	08008c71 	.word	0x08008c71
 8008b9c:	08008ca5 	.word	0x08008ca5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008ba6:	685b      	ldr	r3, [r3, #4]
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d00b      	beq.n	8008bc4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008bb2:	685b      	ldr	r3, [r3, #4]
 8008bb4:	687a      	ldr	r2, [r7, #4]
 8008bb6:	7c12      	ldrb	r2, [r2, #16]
 8008bb8:	f107 0108 	add.w	r1, r7, #8
 8008bbc:	4610      	mov	r0, r2
 8008bbe:	4798      	blx	r3
 8008bc0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008bc2:	e091      	b.n	8008ce8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008bc4:	6839      	ldr	r1, [r7, #0]
 8008bc6:	6878      	ldr	r0, [r7, #4]
 8008bc8:	f000 facb 	bl	8009162 <USBD_CtlError>
            err++;
 8008bcc:	7afb      	ldrb	r3, [r7, #11]
 8008bce:	3301      	adds	r3, #1
 8008bd0:	72fb      	strb	r3, [r7, #11]
          break;
 8008bd2:	e089      	b.n	8008ce8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008bda:	689b      	ldr	r3, [r3, #8]
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d00b      	beq.n	8008bf8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008be6:	689b      	ldr	r3, [r3, #8]
 8008be8:	687a      	ldr	r2, [r7, #4]
 8008bea:	7c12      	ldrb	r2, [r2, #16]
 8008bec:	f107 0108 	add.w	r1, r7, #8
 8008bf0:	4610      	mov	r0, r2
 8008bf2:	4798      	blx	r3
 8008bf4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008bf6:	e077      	b.n	8008ce8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008bf8:	6839      	ldr	r1, [r7, #0]
 8008bfa:	6878      	ldr	r0, [r7, #4]
 8008bfc:	f000 fab1 	bl	8009162 <USBD_CtlError>
            err++;
 8008c00:	7afb      	ldrb	r3, [r7, #11]
 8008c02:	3301      	adds	r3, #1
 8008c04:	72fb      	strb	r3, [r7, #11]
          break;
 8008c06:	e06f      	b.n	8008ce8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008c0e:	68db      	ldr	r3, [r3, #12]
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d00b      	beq.n	8008c2c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008c1a:	68db      	ldr	r3, [r3, #12]
 8008c1c:	687a      	ldr	r2, [r7, #4]
 8008c1e:	7c12      	ldrb	r2, [r2, #16]
 8008c20:	f107 0108 	add.w	r1, r7, #8
 8008c24:	4610      	mov	r0, r2
 8008c26:	4798      	blx	r3
 8008c28:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008c2a:	e05d      	b.n	8008ce8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008c2c:	6839      	ldr	r1, [r7, #0]
 8008c2e:	6878      	ldr	r0, [r7, #4]
 8008c30:	f000 fa97 	bl	8009162 <USBD_CtlError>
            err++;
 8008c34:	7afb      	ldrb	r3, [r7, #11]
 8008c36:	3301      	adds	r3, #1
 8008c38:	72fb      	strb	r3, [r7, #11]
          break;
 8008c3a:	e055      	b.n	8008ce8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008c42:	691b      	ldr	r3, [r3, #16]
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d00b      	beq.n	8008c60 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008c4e:	691b      	ldr	r3, [r3, #16]
 8008c50:	687a      	ldr	r2, [r7, #4]
 8008c52:	7c12      	ldrb	r2, [r2, #16]
 8008c54:	f107 0108 	add.w	r1, r7, #8
 8008c58:	4610      	mov	r0, r2
 8008c5a:	4798      	blx	r3
 8008c5c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008c5e:	e043      	b.n	8008ce8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008c60:	6839      	ldr	r1, [r7, #0]
 8008c62:	6878      	ldr	r0, [r7, #4]
 8008c64:	f000 fa7d 	bl	8009162 <USBD_CtlError>
            err++;
 8008c68:	7afb      	ldrb	r3, [r7, #11]
 8008c6a:	3301      	adds	r3, #1
 8008c6c:	72fb      	strb	r3, [r7, #11]
          break;
 8008c6e:	e03b      	b.n	8008ce8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008c76:	695b      	ldr	r3, [r3, #20]
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d00b      	beq.n	8008c94 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008c82:	695b      	ldr	r3, [r3, #20]
 8008c84:	687a      	ldr	r2, [r7, #4]
 8008c86:	7c12      	ldrb	r2, [r2, #16]
 8008c88:	f107 0108 	add.w	r1, r7, #8
 8008c8c:	4610      	mov	r0, r2
 8008c8e:	4798      	blx	r3
 8008c90:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008c92:	e029      	b.n	8008ce8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008c94:	6839      	ldr	r1, [r7, #0]
 8008c96:	6878      	ldr	r0, [r7, #4]
 8008c98:	f000 fa63 	bl	8009162 <USBD_CtlError>
            err++;
 8008c9c:	7afb      	ldrb	r3, [r7, #11]
 8008c9e:	3301      	adds	r3, #1
 8008ca0:	72fb      	strb	r3, [r7, #11]
          break;
 8008ca2:	e021      	b.n	8008ce8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008caa:	699b      	ldr	r3, [r3, #24]
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d00b      	beq.n	8008cc8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008cb6:	699b      	ldr	r3, [r3, #24]
 8008cb8:	687a      	ldr	r2, [r7, #4]
 8008cba:	7c12      	ldrb	r2, [r2, #16]
 8008cbc:	f107 0108 	add.w	r1, r7, #8
 8008cc0:	4610      	mov	r0, r2
 8008cc2:	4798      	blx	r3
 8008cc4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008cc6:	e00f      	b.n	8008ce8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008cc8:	6839      	ldr	r1, [r7, #0]
 8008cca:	6878      	ldr	r0, [r7, #4]
 8008ccc:	f000 fa49 	bl	8009162 <USBD_CtlError>
            err++;
 8008cd0:	7afb      	ldrb	r3, [r7, #11]
 8008cd2:	3301      	adds	r3, #1
 8008cd4:	72fb      	strb	r3, [r7, #11]
          break;
 8008cd6:	e007      	b.n	8008ce8 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8008cd8:	6839      	ldr	r1, [r7, #0]
 8008cda:	6878      	ldr	r0, [r7, #4]
 8008cdc:	f000 fa41 	bl	8009162 <USBD_CtlError>
          err++;
 8008ce0:	7afb      	ldrb	r3, [r7, #11]
 8008ce2:	3301      	adds	r3, #1
 8008ce4:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8008ce6:	bf00      	nop
      }
      break;
 8008ce8:	e037      	b.n	8008d5a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	7c1b      	ldrb	r3, [r3, #16]
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d109      	bne.n	8008d06 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008cf8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008cfa:	f107 0208 	add.w	r2, r7, #8
 8008cfe:	4610      	mov	r0, r2
 8008d00:	4798      	blx	r3
 8008d02:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008d04:	e029      	b.n	8008d5a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008d06:	6839      	ldr	r1, [r7, #0]
 8008d08:	6878      	ldr	r0, [r7, #4]
 8008d0a:	f000 fa2a 	bl	8009162 <USBD_CtlError>
        err++;
 8008d0e:	7afb      	ldrb	r3, [r7, #11]
 8008d10:	3301      	adds	r3, #1
 8008d12:	72fb      	strb	r3, [r7, #11]
      break;
 8008d14:	e021      	b.n	8008d5a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	7c1b      	ldrb	r3, [r3, #16]
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d10d      	bne.n	8008d3a <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008d24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008d26:	f107 0208 	add.w	r2, r7, #8
 8008d2a:	4610      	mov	r0, r2
 8008d2c:	4798      	blx	r3
 8008d2e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	3301      	adds	r3, #1
 8008d34:	2207      	movs	r2, #7
 8008d36:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008d38:	e00f      	b.n	8008d5a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008d3a:	6839      	ldr	r1, [r7, #0]
 8008d3c:	6878      	ldr	r0, [r7, #4]
 8008d3e:	f000 fa10 	bl	8009162 <USBD_CtlError>
        err++;
 8008d42:	7afb      	ldrb	r3, [r7, #11]
 8008d44:	3301      	adds	r3, #1
 8008d46:	72fb      	strb	r3, [r7, #11]
      break;
 8008d48:	e007      	b.n	8008d5a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8008d4a:	6839      	ldr	r1, [r7, #0]
 8008d4c:	6878      	ldr	r0, [r7, #4]
 8008d4e:	f000 fa08 	bl	8009162 <USBD_CtlError>
      err++;
 8008d52:	7afb      	ldrb	r3, [r7, #11]
 8008d54:	3301      	adds	r3, #1
 8008d56:	72fb      	strb	r3, [r7, #11]
      break;
 8008d58:	bf00      	nop
  }

  if (err != 0U)
 8008d5a:	7afb      	ldrb	r3, [r7, #11]
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d11e      	bne.n	8008d9e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8008d60:	683b      	ldr	r3, [r7, #0]
 8008d62:	88db      	ldrh	r3, [r3, #6]
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d016      	beq.n	8008d96 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8008d68:	893b      	ldrh	r3, [r7, #8]
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d00e      	beq.n	8008d8c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8008d6e:	683b      	ldr	r3, [r7, #0]
 8008d70:	88da      	ldrh	r2, [r3, #6]
 8008d72:	893b      	ldrh	r3, [r7, #8]
 8008d74:	4293      	cmp	r3, r2
 8008d76:	bf28      	it	cs
 8008d78:	4613      	movcs	r3, r2
 8008d7a:	b29b      	uxth	r3, r3
 8008d7c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008d7e:	893b      	ldrh	r3, [r7, #8]
 8008d80:	461a      	mov	r2, r3
 8008d82:	68f9      	ldr	r1, [r7, #12]
 8008d84:	6878      	ldr	r0, [r7, #4]
 8008d86:	f000 fa69 	bl	800925c <USBD_CtlSendData>
 8008d8a:	e009      	b.n	8008da0 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008d8c:	6839      	ldr	r1, [r7, #0]
 8008d8e:	6878      	ldr	r0, [r7, #4]
 8008d90:	f000 f9e7 	bl	8009162 <USBD_CtlError>
 8008d94:	e004      	b.n	8008da0 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8008d96:	6878      	ldr	r0, [r7, #4]
 8008d98:	f000 faa0 	bl	80092dc <USBD_CtlSendStatus>
 8008d9c:	e000      	b.n	8008da0 <USBD_GetDescriptor+0x2cc>
    return;
 8008d9e:	bf00      	nop
  }
}
 8008da0:	3710      	adds	r7, #16
 8008da2:	46bd      	mov	sp, r7
 8008da4:	bd80      	pop	{r7, pc}
 8008da6:	bf00      	nop

08008da8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008da8:	b580      	push	{r7, lr}
 8008daa:	b084      	sub	sp, #16
 8008dac:	af00      	add	r7, sp, #0
 8008dae:	6078      	str	r0, [r7, #4]
 8008db0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008db2:	683b      	ldr	r3, [r7, #0]
 8008db4:	889b      	ldrh	r3, [r3, #4]
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d131      	bne.n	8008e1e <USBD_SetAddress+0x76>
 8008dba:	683b      	ldr	r3, [r7, #0]
 8008dbc:	88db      	ldrh	r3, [r3, #6]
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d12d      	bne.n	8008e1e <USBD_SetAddress+0x76>
 8008dc2:	683b      	ldr	r3, [r7, #0]
 8008dc4:	885b      	ldrh	r3, [r3, #2]
 8008dc6:	2b7f      	cmp	r3, #127	@ 0x7f
 8008dc8:	d829      	bhi.n	8008e1e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008dca:	683b      	ldr	r3, [r7, #0]
 8008dcc:	885b      	ldrh	r3, [r3, #2]
 8008dce:	b2db      	uxtb	r3, r3
 8008dd0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008dd4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008ddc:	b2db      	uxtb	r3, r3
 8008dde:	2b03      	cmp	r3, #3
 8008de0:	d104      	bne.n	8008dec <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8008de2:	6839      	ldr	r1, [r7, #0]
 8008de4:	6878      	ldr	r0, [r7, #4]
 8008de6:	f000 f9bc 	bl	8009162 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008dea:	e01d      	b.n	8008e28 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	7bfa      	ldrb	r2, [r7, #15]
 8008df0:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008df4:	7bfb      	ldrb	r3, [r7, #15]
 8008df6:	4619      	mov	r1, r3
 8008df8:	6878      	ldr	r0, [r7, #4]
 8008dfa:	f000 fe37 	bl	8009a6c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008dfe:	6878      	ldr	r0, [r7, #4]
 8008e00:	f000 fa6c 	bl	80092dc <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008e04:	7bfb      	ldrb	r3, [r7, #15]
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d004      	beq.n	8008e14 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	2202      	movs	r2, #2
 8008e0e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e12:	e009      	b.n	8008e28 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	2201      	movs	r2, #1
 8008e18:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e1c:	e004      	b.n	8008e28 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008e1e:	6839      	ldr	r1, [r7, #0]
 8008e20:	6878      	ldr	r0, [r7, #4]
 8008e22:	f000 f99e 	bl	8009162 <USBD_CtlError>
  }
}
 8008e26:	bf00      	nop
 8008e28:	bf00      	nop
 8008e2a:	3710      	adds	r7, #16
 8008e2c:	46bd      	mov	sp, r7
 8008e2e:	bd80      	pop	{r7, pc}

08008e30 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008e30:	b580      	push	{r7, lr}
 8008e32:	b084      	sub	sp, #16
 8008e34:	af00      	add	r7, sp, #0
 8008e36:	6078      	str	r0, [r7, #4]
 8008e38:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008e3a:	2300      	movs	r3, #0
 8008e3c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008e3e:	683b      	ldr	r3, [r7, #0]
 8008e40:	885b      	ldrh	r3, [r3, #2]
 8008e42:	b2da      	uxtb	r2, r3
 8008e44:	4b4e      	ldr	r3, [pc, #312]	@ (8008f80 <USBD_SetConfig+0x150>)
 8008e46:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008e48:	4b4d      	ldr	r3, [pc, #308]	@ (8008f80 <USBD_SetConfig+0x150>)
 8008e4a:	781b      	ldrb	r3, [r3, #0]
 8008e4c:	2b01      	cmp	r3, #1
 8008e4e:	d905      	bls.n	8008e5c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008e50:	6839      	ldr	r1, [r7, #0]
 8008e52:	6878      	ldr	r0, [r7, #4]
 8008e54:	f000 f985 	bl	8009162 <USBD_CtlError>
    return USBD_FAIL;
 8008e58:	2303      	movs	r3, #3
 8008e5a:	e08c      	b.n	8008f76 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008e62:	b2db      	uxtb	r3, r3
 8008e64:	2b02      	cmp	r3, #2
 8008e66:	d002      	beq.n	8008e6e <USBD_SetConfig+0x3e>
 8008e68:	2b03      	cmp	r3, #3
 8008e6a:	d029      	beq.n	8008ec0 <USBD_SetConfig+0x90>
 8008e6c:	e075      	b.n	8008f5a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8008e6e:	4b44      	ldr	r3, [pc, #272]	@ (8008f80 <USBD_SetConfig+0x150>)
 8008e70:	781b      	ldrb	r3, [r3, #0]
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d020      	beq.n	8008eb8 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8008e76:	4b42      	ldr	r3, [pc, #264]	@ (8008f80 <USBD_SetConfig+0x150>)
 8008e78:	781b      	ldrb	r3, [r3, #0]
 8008e7a:	461a      	mov	r2, r3
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008e80:	4b3f      	ldr	r3, [pc, #252]	@ (8008f80 <USBD_SetConfig+0x150>)
 8008e82:	781b      	ldrb	r3, [r3, #0]
 8008e84:	4619      	mov	r1, r3
 8008e86:	6878      	ldr	r0, [r7, #4]
 8008e88:	f7fe ffcd 	bl	8007e26 <USBD_SetClassConfig>
 8008e8c:	4603      	mov	r3, r0
 8008e8e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8008e90:	7bfb      	ldrb	r3, [r7, #15]
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d008      	beq.n	8008ea8 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8008e96:	6839      	ldr	r1, [r7, #0]
 8008e98:	6878      	ldr	r0, [r7, #4]
 8008e9a:	f000 f962 	bl	8009162 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	2202      	movs	r2, #2
 8008ea2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008ea6:	e065      	b.n	8008f74 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008ea8:	6878      	ldr	r0, [r7, #4]
 8008eaa:	f000 fa17 	bl	80092dc <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	2203      	movs	r2, #3
 8008eb2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8008eb6:	e05d      	b.n	8008f74 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008eb8:	6878      	ldr	r0, [r7, #4]
 8008eba:	f000 fa0f 	bl	80092dc <USBD_CtlSendStatus>
      break;
 8008ebe:	e059      	b.n	8008f74 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008ec0:	4b2f      	ldr	r3, [pc, #188]	@ (8008f80 <USBD_SetConfig+0x150>)
 8008ec2:	781b      	ldrb	r3, [r3, #0]
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d112      	bne.n	8008eee <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	2202      	movs	r2, #2
 8008ecc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8008ed0:	4b2b      	ldr	r3, [pc, #172]	@ (8008f80 <USBD_SetConfig+0x150>)
 8008ed2:	781b      	ldrb	r3, [r3, #0]
 8008ed4:	461a      	mov	r2, r3
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008eda:	4b29      	ldr	r3, [pc, #164]	@ (8008f80 <USBD_SetConfig+0x150>)
 8008edc:	781b      	ldrb	r3, [r3, #0]
 8008ede:	4619      	mov	r1, r3
 8008ee0:	6878      	ldr	r0, [r7, #4]
 8008ee2:	f7fe ffbc 	bl	8007e5e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8008ee6:	6878      	ldr	r0, [r7, #4]
 8008ee8:	f000 f9f8 	bl	80092dc <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008eec:	e042      	b.n	8008f74 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8008eee:	4b24      	ldr	r3, [pc, #144]	@ (8008f80 <USBD_SetConfig+0x150>)
 8008ef0:	781b      	ldrb	r3, [r3, #0]
 8008ef2:	461a      	mov	r2, r3
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	685b      	ldr	r3, [r3, #4]
 8008ef8:	429a      	cmp	r2, r3
 8008efa:	d02a      	beq.n	8008f52 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	685b      	ldr	r3, [r3, #4]
 8008f00:	b2db      	uxtb	r3, r3
 8008f02:	4619      	mov	r1, r3
 8008f04:	6878      	ldr	r0, [r7, #4]
 8008f06:	f7fe ffaa 	bl	8007e5e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008f0a:	4b1d      	ldr	r3, [pc, #116]	@ (8008f80 <USBD_SetConfig+0x150>)
 8008f0c:	781b      	ldrb	r3, [r3, #0]
 8008f0e:	461a      	mov	r2, r3
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008f14:	4b1a      	ldr	r3, [pc, #104]	@ (8008f80 <USBD_SetConfig+0x150>)
 8008f16:	781b      	ldrb	r3, [r3, #0]
 8008f18:	4619      	mov	r1, r3
 8008f1a:	6878      	ldr	r0, [r7, #4]
 8008f1c:	f7fe ff83 	bl	8007e26 <USBD_SetClassConfig>
 8008f20:	4603      	mov	r3, r0
 8008f22:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008f24:	7bfb      	ldrb	r3, [r7, #15]
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d00f      	beq.n	8008f4a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8008f2a:	6839      	ldr	r1, [r7, #0]
 8008f2c:	6878      	ldr	r0, [r7, #4]
 8008f2e:	f000 f918 	bl	8009162 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	685b      	ldr	r3, [r3, #4]
 8008f36:	b2db      	uxtb	r3, r3
 8008f38:	4619      	mov	r1, r3
 8008f3a:	6878      	ldr	r0, [r7, #4]
 8008f3c:	f7fe ff8f 	bl	8007e5e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	2202      	movs	r2, #2
 8008f44:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8008f48:	e014      	b.n	8008f74 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008f4a:	6878      	ldr	r0, [r7, #4]
 8008f4c:	f000 f9c6 	bl	80092dc <USBD_CtlSendStatus>
      break;
 8008f50:	e010      	b.n	8008f74 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008f52:	6878      	ldr	r0, [r7, #4]
 8008f54:	f000 f9c2 	bl	80092dc <USBD_CtlSendStatus>
      break;
 8008f58:	e00c      	b.n	8008f74 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8008f5a:	6839      	ldr	r1, [r7, #0]
 8008f5c:	6878      	ldr	r0, [r7, #4]
 8008f5e:	f000 f900 	bl	8009162 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008f62:	4b07      	ldr	r3, [pc, #28]	@ (8008f80 <USBD_SetConfig+0x150>)
 8008f64:	781b      	ldrb	r3, [r3, #0]
 8008f66:	4619      	mov	r1, r3
 8008f68:	6878      	ldr	r0, [r7, #4]
 8008f6a:	f7fe ff78 	bl	8007e5e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8008f6e:	2303      	movs	r3, #3
 8008f70:	73fb      	strb	r3, [r7, #15]
      break;
 8008f72:	bf00      	nop
  }

  return ret;
 8008f74:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f76:	4618      	mov	r0, r3
 8008f78:	3710      	adds	r7, #16
 8008f7a:	46bd      	mov	sp, r7
 8008f7c:	bd80      	pop	{r7, pc}
 8008f7e:	bf00      	nop
 8008f80:	200004d4 	.word	0x200004d4

08008f84 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008f84:	b580      	push	{r7, lr}
 8008f86:	b082      	sub	sp, #8
 8008f88:	af00      	add	r7, sp, #0
 8008f8a:	6078      	str	r0, [r7, #4]
 8008f8c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008f8e:	683b      	ldr	r3, [r7, #0]
 8008f90:	88db      	ldrh	r3, [r3, #6]
 8008f92:	2b01      	cmp	r3, #1
 8008f94:	d004      	beq.n	8008fa0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008f96:	6839      	ldr	r1, [r7, #0]
 8008f98:	6878      	ldr	r0, [r7, #4]
 8008f9a:	f000 f8e2 	bl	8009162 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008f9e:	e023      	b.n	8008fe8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008fa6:	b2db      	uxtb	r3, r3
 8008fa8:	2b02      	cmp	r3, #2
 8008faa:	dc02      	bgt.n	8008fb2 <USBD_GetConfig+0x2e>
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	dc03      	bgt.n	8008fb8 <USBD_GetConfig+0x34>
 8008fb0:	e015      	b.n	8008fde <USBD_GetConfig+0x5a>
 8008fb2:	2b03      	cmp	r3, #3
 8008fb4:	d00b      	beq.n	8008fce <USBD_GetConfig+0x4a>
 8008fb6:	e012      	b.n	8008fde <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	2200      	movs	r2, #0
 8008fbc:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	3308      	adds	r3, #8
 8008fc2:	2201      	movs	r2, #1
 8008fc4:	4619      	mov	r1, r3
 8008fc6:	6878      	ldr	r0, [r7, #4]
 8008fc8:	f000 f948 	bl	800925c <USBD_CtlSendData>
        break;
 8008fcc:	e00c      	b.n	8008fe8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	3304      	adds	r3, #4
 8008fd2:	2201      	movs	r2, #1
 8008fd4:	4619      	mov	r1, r3
 8008fd6:	6878      	ldr	r0, [r7, #4]
 8008fd8:	f000 f940 	bl	800925c <USBD_CtlSendData>
        break;
 8008fdc:	e004      	b.n	8008fe8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8008fde:	6839      	ldr	r1, [r7, #0]
 8008fe0:	6878      	ldr	r0, [r7, #4]
 8008fe2:	f000 f8be 	bl	8009162 <USBD_CtlError>
        break;
 8008fe6:	bf00      	nop
}
 8008fe8:	bf00      	nop
 8008fea:	3708      	adds	r7, #8
 8008fec:	46bd      	mov	sp, r7
 8008fee:	bd80      	pop	{r7, pc}

08008ff0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008ff0:	b580      	push	{r7, lr}
 8008ff2:	b082      	sub	sp, #8
 8008ff4:	af00      	add	r7, sp, #0
 8008ff6:	6078      	str	r0, [r7, #4]
 8008ff8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009000:	b2db      	uxtb	r3, r3
 8009002:	3b01      	subs	r3, #1
 8009004:	2b02      	cmp	r3, #2
 8009006:	d81e      	bhi.n	8009046 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009008:	683b      	ldr	r3, [r7, #0]
 800900a:	88db      	ldrh	r3, [r3, #6]
 800900c:	2b02      	cmp	r3, #2
 800900e:	d004      	beq.n	800901a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8009010:	6839      	ldr	r1, [r7, #0]
 8009012:	6878      	ldr	r0, [r7, #4]
 8009014:	f000 f8a5 	bl	8009162 <USBD_CtlError>
        break;
 8009018:	e01a      	b.n	8009050 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	2201      	movs	r2, #1
 800901e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8009026:	2b00      	cmp	r3, #0
 8009028:	d005      	beq.n	8009036 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	68db      	ldr	r3, [r3, #12]
 800902e:	f043 0202 	orr.w	r2, r3, #2
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	330c      	adds	r3, #12
 800903a:	2202      	movs	r2, #2
 800903c:	4619      	mov	r1, r3
 800903e:	6878      	ldr	r0, [r7, #4]
 8009040:	f000 f90c 	bl	800925c <USBD_CtlSendData>
      break;
 8009044:	e004      	b.n	8009050 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8009046:	6839      	ldr	r1, [r7, #0]
 8009048:	6878      	ldr	r0, [r7, #4]
 800904a:	f000 f88a 	bl	8009162 <USBD_CtlError>
      break;
 800904e:	bf00      	nop
  }
}
 8009050:	bf00      	nop
 8009052:	3708      	adds	r7, #8
 8009054:	46bd      	mov	sp, r7
 8009056:	bd80      	pop	{r7, pc}

08009058 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009058:	b580      	push	{r7, lr}
 800905a:	b082      	sub	sp, #8
 800905c:	af00      	add	r7, sp, #0
 800905e:	6078      	str	r0, [r7, #4]
 8009060:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009062:	683b      	ldr	r3, [r7, #0]
 8009064:	885b      	ldrh	r3, [r3, #2]
 8009066:	2b01      	cmp	r3, #1
 8009068:	d107      	bne.n	800907a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	2201      	movs	r2, #1
 800906e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8009072:	6878      	ldr	r0, [r7, #4]
 8009074:	f000 f932 	bl	80092dc <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8009078:	e013      	b.n	80090a2 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800907a:	683b      	ldr	r3, [r7, #0]
 800907c:	885b      	ldrh	r3, [r3, #2]
 800907e:	2b02      	cmp	r3, #2
 8009080:	d10b      	bne.n	800909a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8009082:	683b      	ldr	r3, [r7, #0]
 8009084:	889b      	ldrh	r3, [r3, #4]
 8009086:	0a1b      	lsrs	r3, r3, #8
 8009088:	b29b      	uxth	r3, r3
 800908a:	b2da      	uxtb	r2, r3
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8009092:	6878      	ldr	r0, [r7, #4]
 8009094:	f000 f922 	bl	80092dc <USBD_CtlSendStatus>
}
 8009098:	e003      	b.n	80090a2 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800909a:	6839      	ldr	r1, [r7, #0]
 800909c:	6878      	ldr	r0, [r7, #4]
 800909e:	f000 f860 	bl	8009162 <USBD_CtlError>
}
 80090a2:	bf00      	nop
 80090a4:	3708      	adds	r7, #8
 80090a6:	46bd      	mov	sp, r7
 80090a8:	bd80      	pop	{r7, pc}

080090aa <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80090aa:	b580      	push	{r7, lr}
 80090ac:	b082      	sub	sp, #8
 80090ae:	af00      	add	r7, sp, #0
 80090b0:	6078      	str	r0, [r7, #4]
 80090b2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80090ba:	b2db      	uxtb	r3, r3
 80090bc:	3b01      	subs	r3, #1
 80090be:	2b02      	cmp	r3, #2
 80090c0:	d80b      	bhi.n	80090da <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80090c2:	683b      	ldr	r3, [r7, #0]
 80090c4:	885b      	ldrh	r3, [r3, #2]
 80090c6:	2b01      	cmp	r3, #1
 80090c8:	d10c      	bne.n	80090e4 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	2200      	movs	r2, #0
 80090ce:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80090d2:	6878      	ldr	r0, [r7, #4]
 80090d4:	f000 f902 	bl	80092dc <USBD_CtlSendStatus>
      }
      break;
 80090d8:	e004      	b.n	80090e4 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80090da:	6839      	ldr	r1, [r7, #0]
 80090dc:	6878      	ldr	r0, [r7, #4]
 80090de:	f000 f840 	bl	8009162 <USBD_CtlError>
      break;
 80090e2:	e000      	b.n	80090e6 <USBD_ClrFeature+0x3c>
      break;
 80090e4:	bf00      	nop
  }
}
 80090e6:	bf00      	nop
 80090e8:	3708      	adds	r7, #8
 80090ea:	46bd      	mov	sp, r7
 80090ec:	bd80      	pop	{r7, pc}

080090ee <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80090ee:	b580      	push	{r7, lr}
 80090f0:	b084      	sub	sp, #16
 80090f2:	af00      	add	r7, sp, #0
 80090f4:	6078      	str	r0, [r7, #4]
 80090f6:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80090f8:	683b      	ldr	r3, [r7, #0]
 80090fa:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	781a      	ldrb	r2, [r3, #0]
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	3301      	adds	r3, #1
 8009108:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	781a      	ldrb	r2, [r3, #0]
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	3301      	adds	r3, #1
 8009116:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8009118:	68f8      	ldr	r0, [r7, #12]
 800911a:	f7ff fa3d 	bl	8008598 <SWAPBYTE>
 800911e:	4603      	mov	r3, r0
 8009120:	461a      	mov	r2, r3
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	3301      	adds	r3, #1
 800912a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	3301      	adds	r3, #1
 8009130:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8009132:	68f8      	ldr	r0, [r7, #12]
 8009134:	f7ff fa30 	bl	8008598 <SWAPBYTE>
 8009138:	4603      	mov	r3, r0
 800913a:	461a      	mov	r2, r3
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	3301      	adds	r3, #1
 8009144:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	3301      	adds	r3, #1
 800914a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800914c:	68f8      	ldr	r0, [r7, #12]
 800914e:	f7ff fa23 	bl	8008598 <SWAPBYTE>
 8009152:	4603      	mov	r3, r0
 8009154:	461a      	mov	r2, r3
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	80da      	strh	r2, [r3, #6]
}
 800915a:	bf00      	nop
 800915c:	3710      	adds	r7, #16
 800915e:	46bd      	mov	sp, r7
 8009160:	bd80      	pop	{r7, pc}

08009162 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009162:	b580      	push	{r7, lr}
 8009164:	b082      	sub	sp, #8
 8009166:	af00      	add	r7, sp, #0
 8009168:	6078      	str	r0, [r7, #4]
 800916a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800916c:	2180      	movs	r1, #128	@ 0x80
 800916e:	6878      	ldr	r0, [r7, #4]
 8009170:	f000 fc12 	bl	8009998 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8009174:	2100      	movs	r1, #0
 8009176:	6878      	ldr	r0, [r7, #4]
 8009178:	f000 fc0e 	bl	8009998 <USBD_LL_StallEP>
}
 800917c:	bf00      	nop
 800917e:	3708      	adds	r7, #8
 8009180:	46bd      	mov	sp, r7
 8009182:	bd80      	pop	{r7, pc}

08009184 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009184:	b580      	push	{r7, lr}
 8009186:	b086      	sub	sp, #24
 8009188:	af00      	add	r7, sp, #0
 800918a:	60f8      	str	r0, [r7, #12]
 800918c:	60b9      	str	r1, [r7, #8]
 800918e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009190:	2300      	movs	r3, #0
 8009192:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	2b00      	cmp	r3, #0
 8009198:	d042      	beq.n	8009220 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800919e:	6938      	ldr	r0, [r7, #16]
 80091a0:	f000 f842 	bl	8009228 <USBD_GetLen>
 80091a4:	4603      	mov	r3, r0
 80091a6:	3301      	adds	r3, #1
 80091a8:	005b      	lsls	r3, r3, #1
 80091aa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80091ae:	d808      	bhi.n	80091c2 <USBD_GetString+0x3e>
 80091b0:	6938      	ldr	r0, [r7, #16]
 80091b2:	f000 f839 	bl	8009228 <USBD_GetLen>
 80091b6:	4603      	mov	r3, r0
 80091b8:	3301      	adds	r3, #1
 80091ba:	b29b      	uxth	r3, r3
 80091bc:	005b      	lsls	r3, r3, #1
 80091be:	b29a      	uxth	r2, r3
 80091c0:	e001      	b.n	80091c6 <USBD_GetString+0x42>
 80091c2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80091ca:	7dfb      	ldrb	r3, [r7, #23]
 80091cc:	68ba      	ldr	r2, [r7, #8]
 80091ce:	4413      	add	r3, r2
 80091d0:	687a      	ldr	r2, [r7, #4]
 80091d2:	7812      	ldrb	r2, [r2, #0]
 80091d4:	701a      	strb	r2, [r3, #0]
  idx++;
 80091d6:	7dfb      	ldrb	r3, [r7, #23]
 80091d8:	3301      	adds	r3, #1
 80091da:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80091dc:	7dfb      	ldrb	r3, [r7, #23]
 80091de:	68ba      	ldr	r2, [r7, #8]
 80091e0:	4413      	add	r3, r2
 80091e2:	2203      	movs	r2, #3
 80091e4:	701a      	strb	r2, [r3, #0]
  idx++;
 80091e6:	7dfb      	ldrb	r3, [r7, #23]
 80091e8:	3301      	adds	r3, #1
 80091ea:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80091ec:	e013      	b.n	8009216 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 80091ee:	7dfb      	ldrb	r3, [r7, #23]
 80091f0:	68ba      	ldr	r2, [r7, #8]
 80091f2:	4413      	add	r3, r2
 80091f4:	693a      	ldr	r2, [r7, #16]
 80091f6:	7812      	ldrb	r2, [r2, #0]
 80091f8:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80091fa:	693b      	ldr	r3, [r7, #16]
 80091fc:	3301      	adds	r3, #1
 80091fe:	613b      	str	r3, [r7, #16]
    idx++;
 8009200:	7dfb      	ldrb	r3, [r7, #23]
 8009202:	3301      	adds	r3, #1
 8009204:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8009206:	7dfb      	ldrb	r3, [r7, #23]
 8009208:	68ba      	ldr	r2, [r7, #8]
 800920a:	4413      	add	r3, r2
 800920c:	2200      	movs	r2, #0
 800920e:	701a      	strb	r2, [r3, #0]
    idx++;
 8009210:	7dfb      	ldrb	r3, [r7, #23]
 8009212:	3301      	adds	r3, #1
 8009214:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8009216:	693b      	ldr	r3, [r7, #16]
 8009218:	781b      	ldrb	r3, [r3, #0]
 800921a:	2b00      	cmp	r3, #0
 800921c:	d1e7      	bne.n	80091ee <USBD_GetString+0x6a>
 800921e:	e000      	b.n	8009222 <USBD_GetString+0x9e>
    return;
 8009220:	bf00      	nop
  }
}
 8009222:	3718      	adds	r7, #24
 8009224:	46bd      	mov	sp, r7
 8009226:	bd80      	pop	{r7, pc}

08009228 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009228:	b480      	push	{r7}
 800922a:	b085      	sub	sp, #20
 800922c:	af00      	add	r7, sp, #0
 800922e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009230:	2300      	movs	r3, #0
 8009232:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8009238:	e005      	b.n	8009246 <USBD_GetLen+0x1e>
  {
    len++;
 800923a:	7bfb      	ldrb	r3, [r7, #15]
 800923c:	3301      	adds	r3, #1
 800923e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8009240:	68bb      	ldr	r3, [r7, #8]
 8009242:	3301      	adds	r3, #1
 8009244:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8009246:	68bb      	ldr	r3, [r7, #8]
 8009248:	781b      	ldrb	r3, [r3, #0]
 800924a:	2b00      	cmp	r3, #0
 800924c:	d1f5      	bne.n	800923a <USBD_GetLen+0x12>
  }

  return len;
 800924e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009250:	4618      	mov	r0, r3
 8009252:	3714      	adds	r7, #20
 8009254:	46bd      	mov	sp, r7
 8009256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800925a:	4770      	bx	lr

0800925c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800925c:	b580      	push	{r7, lr}
 800925e:	b084      	sub	sp, #16
 8009260:	af00      	add	r7, sp, #0
 8009262:	60f8      	str	r0, [r7, #12]
 8009264:	60b9      	str	r1, [r7, #8]
 8009266:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	2202      	movs	r2, #2
 800926c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	687a      	ldr	r2, [r7, #4]
 8009274:	615a      	str	r2, [r3, #20]
  pdev->ep_in[0].pbuffer = pbuf;
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	68ba      	ldr	r2, [r7, #8]
 800927a:	625a      	str	r2, [r3, #36]	@ 0x24

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	687a      	ldr	r2, [r7, #4]
 8009280:	619a      	str	r2, [r3, #24]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	68ba      	ldr	r2, [r7, #8]
 8009286:	2100      	movs	r1, #0
 8009288:	68f8      	ldr	r0, [r7, #12]
 800928a:	f000 fc0e 	bl	8009aaa <USBD_LL_Transmit>

  return USBD_OK;
 800928e:	2300      	movs	r3, #0
}
 8009290:	4618      	mov	r0, r3
 8009292:	3710      	adds	r7, #16
 8009294:	46bd      	mov	sp, r7
 8009296:	bd80      	pop	{r7, pc}

08009298 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8009298:	b580      	push	{r7, lr}
 800929a:	b084      	sub	sp, #16
 800929c:	af00      	add	r7, sp, #0
 800929e:	60f8      	str	r0, [r7, #12]
 80092a0:	60b9      	str	r1, [r7, #8]
 80092a2:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	68ba      	ldr	r2, [r7, #8]
 80092a8:	2100      	movs	r1, #0
 80092aa:	68f8      	ldr	r0, [r7, #12]
 80092ac:	f000 fbfd 	bl	8009aaa <USBD_LL_Transmit>

  return USBD_OK;
 80092b0:	2300      	movs	r3, #0
}
 80092b2:	4618      	mov	r0, r3
 80092b4:	3710      	adds	r7, #16
 80092b6:	46bd      	mov	sp, r7
 80092b8:	bd80      	pop	{r7, pc}

080092ba <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80092ba:	b580      	push	{r7, lr}
 80092bc:	b084      	sub	sp, #16
 80092be:	af00      	add	r7, sp, #0
 80092c0:	60f8      	str	r0, [r7, #12]
 80092c2:	60b9      	str	r1, [r7, #8]
 80092c4:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	68ba      	ldr	r2, [r7, #8]
 80092ca:	2100      	movs	r1, #0
 80092cc:	68f8      	ldr	r0, [r7, #12]
 80092ce:	f000 fc0d 	bl	8009aec <USBD_LL_PrepareReceive>

  return USBD_OK;
 80092d2:	2300      	movs	r3, #0
}
 80092d4:	4618      	mov	r0, r3
 80092d6:	3710      	adds	r7, #16
 80092d8:	46bd      	mov	sp, r7
 80092da:	bd80      	pop	{r7, pc}

080092dc <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80092dc:	b580      	push	{r7, lr}
 80092de:	b082      	sub	sp, #8
 80092e0:	af00      	add	r7, sp, #0
 80092e2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	2204      	movs	r2, #4
 80092e8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80092ec:	2300      	movs	r3, #0
 80092ee:	2200      	movs	r2, #0
 80092f0:	2100      	movs	r1, #0
 80092f2:	6878      	ldr	r0, [r7, #4]
 80092f4:	f000 fbd9 	bl	8009aaa <USBD_LL_Transmit>

  return USBD_OK;
 80092f8:	2300      	movs	r3, #0
}
 80092fa:	4618      	mov	r0, r3
 80092fc:	3708      	adds	r7, #8
 80092fe:	46bd      	mov	sp, r7
 8009300:	bd80      	pop	{r7, pc}

08009302 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009302:	b580      	push	{r7, lr}
 8009304:	b082      	sub	sp, #8
 8009306:	af00      	add	r7, sp, #0
 8009308:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	2205      	movs	r2, #5
 800930e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009312:	2300      	movs	r3, #0
 8009314:	2200      	movs	r2, #0
 8009316:	2100      	movs	r1, #0
 8009318:	6878      	ldr	r0, [r7, #4]
 800931a:	f000 fbe7 	bl	8009aec <USBD_LL_PrepareReceive>

  return USBD_OK;
 800931e:	2300      	movs	r3, #0
}
 8009320:	4618      	mov	r0, r3
 8009322:	3708      	adds	r7, #8
 8009324:	46bd      	mov	sp, r7
 8009326:	bd80      	pop	{r7, pc}

08009328 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009328:	b580      	push	{r7, lr}
 800932a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 800932c:	2201      	movs	r2, #1
 800932e:	490e      	ldr	r1, [pc, #56]	@ (8009368 <MX_USB_DEVICE_Init+0x40>)
 8009330:	480e      	ldr	r0, [pc, #56]	@ (800936c <MX_USB_DEVICE_Init+0x44>)
 8009332:	f7fe fcfb 	bl	8007d2c <USBD_Init>
 8009336:	4603      	mov	r3, r0
 8009338:	2b00      	cmp	r3, #0
 800933a:	d001      	beq.n	8009340 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800933c:	f7f8 fe6a 	bl	8002014 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_HID) != USBD_OK)
 8009340:	490b      	ldr	r1, [pc, #44]	@ (8009370 <MX_USB_DEVICE_Init+0x48>)
 8009342:	480a      	ldr	r0, [pc, #40]	@ (800936c <MX_USB_DEVICE_Init+0x44>)
 8009344:	f7fe fd22 	bl	8007d8c <USBD_RegisterClass>
 8009348:	4603      	mov	r3, r0
 800934a:	2b00      	cmp	r3, #0
 800934c:	d001      	beq.n	8009352 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800934e:	f7f8 fe61 	bl	8002014 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 8009352:	4806      	ldr	r0, [pc, #24]	@ (800936c <MX_USB_DEVICE_Init+0x44>)
 8009354:	f7fe fd50 	bl	8007df8 <USBD_Start>
 8009358:	4603      	mov	r3, r0
 800935a:	2b00      	cmp	r3, #0
 800935c:	d001      	beq.n	8009362 <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 800935e:	f7f8 fe59 	bl	8002014 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009362:	bf00      	nop
 8009364:	bd80      	pop	{r7, pc}
 8009366:	bf00      	nop
 8009368:	200000d0 	.word	0x200000d0
 800936c:	200004d8 	.word	0x200004d8
 8009370:	20000010 	.word	0x20000010

08009374 <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009374:	b480      	push	{r7}
 8009376:	b083      	sub	sp, #12
 8009378:	af00      	add	r7, sp, #0
 800937a:	4603      	mov	r3, r0
 800937c:	6039      	str	r1, [r7, #0]
 800937e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 8009380:	683b      	ldr	r3, [r7, #0]
 8009382:	2212      	movs	r2, #18
 8009384:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 8009386:	4b03      	ldr	r3, [pc, #12]	@ (8009394 <USBD_HS_DeviceDescriptor+0x20>)
}
 8009388:	4618      	mov	r0, r3
 800938a:	370c      	adds	r7, #12
 800938c:	46bd      	mov	sp, r7
 800938e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009392:	4770      	bx	lr
 8009394:	200000ec 	.word	0x200000ec

08009398 <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009398:	b480      	push	{r7}
 800939a:	b083      	sub	sp, #12
 800939c:	af00      	add	r7, sp, #0
 800939e:	4603      	mov	r3, r0
 80093a0:	6039      	str	r1, [r7, #0]
 80093a2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80093a4:	683b      	ldr	r3, [r7, #0]
 80093a6:	2204      	movs	r2, #4
 80093a8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80093aa:	4b03      	ldr	r3, [pc, #12]	@ (80093b8 <USBD_HS_LangIDStrDescriptor+0x20>)
}
 80093ac:	4618      	mov	r0, r3
 80093ae:	370c      	adds	r7, #12
 80093b0:	46bd      	mov	sp, r7
 80093b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093b6:	4770      	bx	lr
 80093b8:	20000100 	.word	0x20000100

080093bc <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80093bc:	b580      	push	{r7, lr}
 80093be:	b082      	sub	sp, #8
 80093c0:	af00      	add	r7, sp, #0
 80093c2:	4603      	mov	r3, r0
 80093c4:	6039      	str	r1, [r7, #0]
 80093c6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80093c8:	79fb      	ldrb	r3, [r7, #7]
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d105      	bne.n	80093da <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 80093ce:	683a      	ldr	r2, [r7, #0]
 80093d0:	4907      	ldr	r1, [pc, #28]	@ (80093f0 <USBD_HS_ProductStrDescriptor+0x34>)
 80093d2:	4808      	ldr	r0, [pc, #32]	@ (80093f4 <USBD_HS_ProductStrDescriptor+0x38>)
 80093d4:	f7ff fed6 	bl	8009184 <USBD_GetString>
 80093d8:	e004      	b.n	80093e4 <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 80093da:	683a      	ldr	r2, [r7, #0]
 80093dc:	4904      	ldr	r1, [pc, #16]	@ (80093f0 <USBD_HS_ProductStrDescriptor+0x34>)
 80093de:	4805      	ldr	r0, [pc, #20]	@ (80093f4 <USBD_HS_ProductStrDescriptor+0x38>)
 80093e0:	f7ff fed0 	bl	8009184 <USBD_GetString>
  }
  return USBD_StrDesc;
 80093e4:	4b02      	ldr	r3, [pc, #8]	@ (80093f0 <USBD_HS_ProductStrDescriptor+0x34>)
}
 80093e6:	4618      	mov	r0, r3
 80093e8:	3708      	adds	r7, #8
 80093ea:	46bd      	mov	sp, r7
 80093ec:	bd80      	pop	{r7, pc}
 80093ee:	bf00      	nop
 80093f0:	200007b4 	.word	0x200007b4
 80093f4:	0800cbdc 	.word	0x0800cbdc

080093f8 <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80093f8:	b580      	push	{r7, lr}
 80093fa:	b082      	sub	sp, #8
 80093fc:	af00      	add	r7, sp, #0
 80093fe:	4603      	mov	r3, r0
 8009400:	6039      	str	r1, [r7, #0]
 8009402:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009404:	683a      	ldr	r2, [r7, #0]
 8009406:	4904      	ldr	r1, [pc, #16]	@ (8009418 <USBD_HS_ManufacturerStrDescriptor+0x20>)
 8009408:	4804      	ldr	r0, [pc, #16]	@ (800941c <USBD_HS_ManufacturerStrDescriptor+0x24>)
 800940a:	f7ff febb 	bl	8009184 <USBD_GetString>
  return USBD_StrDesc;
 800940e:	4b02      	ldr	r3, [pc, #8]	@ (8009418 <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 8009410:	4618      	mov	r0, r3
 8009412:	3708      	adds	r7, #8
 8009414:	46bd      	mov	sp, r7
 8009416:	bd80      	pop	{r7, pc}
 8009418:	200007b4 	.word	0x200007b4
 800941c:	0800cbf4 	.word	0x0800cbf4

08009420 <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009420:	b580      	push	{r7, lr}
 8009422:	b082      	sub	sp, #8
 8009424:	af00      	add	r7, sp, #0
 8009426:	4603      	mov	r3, r0
 8009428:	6039      	str	r1, [r7, #0]
 800942a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800942c:	683b      	ldr	r3, [r7, #0]
 800942e:	221a      	movs	r2, #26
 8009430:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009432:	f000 f843 	bl	80094bc <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8009436:	4b02      	ldr	r3, [pc, #8]	@ (8009440 <USBD_HS_SerialStrDescriptor+0x20>)
}
 8009438:	4618      	mov	r0, r3
 800943a:	3708      	adds	r7, #8
 800943c:	46bd      	mov	sp, r7
 800943e:	bd80      	pop	{r7, pc}
 8009440:	20000104 	.word	0x20000104

08009444 <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009444:	b580      	push	{r7, lr}
 8009446:	b082      	sub	sp, #8
 8009448:	af00      	add	r7, sp, #0
 800944a:	4603      	mov	r3, r0
 800944c:	6039      	str	r1, [r7, #0]
 800944e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009450:	79fb      	ldrb	r3, [r7, #7]
 8009452:	2b00      	cmp	r3, #0
 8009454:	d105      	bne.n	8009462 <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 8009456:	683a      	ldr	r2, [r7, #0]
 8009458:	4907      	ldr	r1, [pc, #28]	@ (8009478 <USBD_HS_ConfigStrDescriptor+0x34>)
 800945a:	4808      	ldr	r0, [pc, #32]	@ (800947c <USBD_HS_ConfigStrDescriptor+0x38>)
 800945c:	f7ff fe92 	bl	8009184 <USBD_GetString>
 8009460:	e004      	b.n	800946c <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 8009462:	683a      	ldr	r2, [r7, #0]
 8009464:	4904      	ldr	r1, [pc, #16]	@ (8009478 <USBD_HS_ConfigStrDescriptor+0x34>)
 8009466:	4805      	ldr	r0, [pc, #20]	@ (800947c <USBD_HS_ConfigStrDescriptor+0x38>)
 8009468:	f7ff fe8c 	bl	8009184 <USBD_GetString>
  }
  return USBD_StrDesc;
 800946c:	4b02      	ldr	r3, [pc, #8]	@ (8009478 <USBD_HS_ConfigStrDescriptor+0x34>)
}
 800946e:	4618      	mov	r0, r3
 8009470:	3708      	adds	r7, #8
 8009472:	46bd      	mov	sp, r7
 8009474:	bd80      	pop	{r7, pc}
 8009476:	bf00      	nop
 8009478:	200007b4 	.word	0x200007b4
 800947c:	0800cc08 	.word	0x0800cc08

08009480 <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009480:	b580      	push	{r7, lr}
 8009482:	b082      	sub	sp, #8
 8009484:	af00      	add	r7, sp, #0
 8009486:	4603      	mov	r3, r0
 8009488:	6039      	str	r1, [r7, #0]
 800948a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800948c:	79fb      	ldrb	r3, [r7, #7]
 800948e:	2b00      	cmp	r3, #0
 8009490:	d105      	bne.n	800949e <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 8009492:	683a      	ldr	r2, [r7, #0]
 8009494:	4907      	ldr	r1, [pc, #28]	@ (80094b4 <USBD_HS_InterfaceStrDescriptor+0x34>)
 8009496:	4808      	ldr	r0, [pc, #32]	@ (80094b8 <USBD_HS_InterfaceStrDescriptor+0x38>)
 8009498:	f7ff fe74 	bl	8009184 <USBD_GetString>
 800949c:	e004      	b.n	80094a8 <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 800949e:	683a      	ldr	r2, [r7, #0]
 80094a0:	4904      	ldr	r1, [pc, #16]	@ (80094b4 <USBD_HS_InterfaceStrDescriptor+0x34>)
 80094a2:	4805      	ldr	r0, [pc, #20]	@ (80094b8 <USBD_HS_InterfaceStrDescriptor+0x38>)
 80094a4:	f7ff fe6e 	bl	8009184 <USBD_GetString>
  }
  return USBD_StrDesc;
 80094a8:	4b02      	ldr	r3, [pc, #8]	@ (80094b4 <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 80094aa:	4618      	mov	r0, r3
 80094ac:	3708      	adds	r7, #8
 80094ae:	46bd      	mov	sp, r7
 80094b0:	bd80      	pop	{r7, pc}
 80094b2:	bf00      	nop
 80094b4:	200007b4 	.word	0x200007b4
 80094b8:	0800cc14 	.word	0x0800cc14

080094bc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80094bc:	b580      	push	{r7, lr}
 80094be:	b084      	sub	sp, #16
 80094c0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80094c2:	4b0f      	ldr	r3, [pc, #60]	@ (8009500 <Get_SerialNum+0x44>)
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80094c8:	4b0e      	ldr	r3, [pc, #56]	@ (8009504 <Get_SerialNum+0x48>)
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80094ce:	4b0e      	ldr	r3, [pc, #56]	@ (8009508 <Get_SerialNum+0x4c>)
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80094d4:	68fa      	ldr	r2, [r7, #12]
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	4413      	add	r3, r2
 80094da:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d009      	beq.n	80094f6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80094e2:	2208      	movs	r2, #8
 80094e4:	4909      	ldr	r1, [pc, #36]	@ (800950c <Get_SerialNum+0x50>)
 80094e6:	68f8      	ldr	r0, [r7, #12]
 80094e8:	f000 f814 	bl	8009514 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80094ec:	2204      	movs	r2, #4
 80094ee:	4908      	ldr	r1, [pc, #32]	@ (8009510 <Get_SerialNum+0x54>)
 80094f0:	68b8      	ldr	r0, [r7, #8]
 80094f2:	f000 f80f 	bl	8009514 <IntToUnicode>
  }
}
 80094f6:	bf00      	nop
 80094f8:	3710      	adds	r7, #16
 80094fa:	46bd      	mov	sp, r7
 80094fc:	bd80      	pop	{r7, pc}
 80094fe:	bf00      	nop
 8009500:	1fff7a10 	.word	0x1fff7a10
 8009504:	1fff7a14 	.word	0x1fff7a14
 8009508:	1fff7a18 	.word	0x1fff7a18
 800950c:	20000106 	.word	0x20000106
 8009510:	20000116 	.word	0x20000116

08009514 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009514:	b480      	push	{r7}
 8009516:	b087      	sub	sp, #28
 8009518:	af00      	add	r7, sp, #0
 800951a:	60f8      	str	r0, [r7, #12]
 800951c:	60b9      	str	r1, [r7, #8]
 800951e:	4613      	mov	r3, r2
 8009520:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009522:	2300      	movs	r3, #0
 8009524:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009526:	2300      	movs	r3, #0
 8009528:	75fb      	strb	r3, [r7, #23]
 800952a:	e027      	b.n	800957c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	0f1b      	lsrs	r3, r3, #28
 8009530:	2b09      	cmp	r3, #9
 8009532:	d80b      	bhi.n	800954c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	0f1b      	lsrs	r3, r3, #28
 8009538:	b2da      	uxtb	r2, r3
 800953a:	7dfb      	ldrb	r3, [r7, #23]
 800953c:	005b      	lsls	r3, r3, #1
 800953e:	4619      	mov	r1, r3
 8009540:	68bb      	ldr	r3, [r7, #8]
 8009542:	440b      	add	r3, r1
 8009544:	3230      	adds	r2, #48	@ 0x30
 8009546:	b2d2      	uxtb	r2, r2
 8009548:	701a      	strb	r2, [r3, #0]
 800954a:	e00a      	b.n	8009562 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	0f1b      	lsrs	r3, r3, #28
 8009550:	b2da      	uxtb	r2, r3
 8009552:	7dfb      	ldrb	r3, [r7, #23]
 8009554:	005b      	lsls	r3, r3, #1
 8009556:	4619      	mov	r1, r3
 8009558:	68bb      	ldr	r3, [r7, #8]
 800955a:	440b      	add	r3, r1
 800955c:	3237      	adds	r2, #55	@ 0x37
 800955e:	b2d2      	uxtb	r2, r2
 8009560:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	011b      	lsls	r3, r3, #4
 8009566:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009568:	7dfb      	ldrb	r3, [r7, #23]
 800956a:	005b      	lsls	r3, r3, #1
 800956c:	3301      	adds	r3, #1
 800956e:	68ba      	ldr	r2, [r7, #8]
 8009570:	4413      	add	r3, r2
 8009572:	2200      	movs	r2, #0
 8009574:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009576:	7dfb      	ldrb	r3, [r7, #23]
 8009578:	3301      	adds	r3, #1
 800957a:	75fb      	strb	r3, [r7, #23]
 800957c:	7dfa      	ldrb	r2, [r7, #23]
 800957e:	79fb      	ldrb	r3, [r7, #7]
 8009580:	429a      	cmp	r2, r3
 8009582:	d3d3      	bcc.n	800952c <IntToUnicode+0x18>
  }
}
 8009584:	bf00      	nop
 8009586:	bf00      	nop
 8009588:	371c      	adds	r7, #28
 800958a:	46bd      	mov	sp, r7
 800958c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009590:	4770      	bx	lr
	...

08009594 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009594:	b580      	push	{r7, lr}
 8009596:	b08a      	sub	sp, #40	@ 0x28
 8009598:	af00      	add	r7, sp, #0
 800959a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800959c:	f107 0314 	add.w	r3, r7, #20
 80095a0:	2200      	movs	r2, #0
 80095a2:	601a      	str	r2, [r3, #0]
 80095a4:	605a      	str	r2, [r3, #4]
 80095a6:	609a      	str	r2, [r3, #8]
 80095a8:	60da      	str	r2, [r3, #12]
 80095aa:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_HS)
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	4a24      	ldr	r2, [pc, #144]	@ (8009644 <HAL_PCD_MspInit+0xb0>)
 80095b2:	4293      	cmp	r3, r2
 80095b4:	d141      	bne.n	800963a <HAL_PCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

  /* USER CODE END USB_OTG_HS_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80095b6:	2300      	movs	r3, #0
 80095b8:	613b      	str	r3, [r7, #16]
 80095ba:	4b23      	ldr	r3, [pc, #140]	@ (8009648 <HAL_PCD_MspInit+0xb4>)
 80095bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80095be:	4a22      	ldr	r2, [pc, #136]	@ (8009648 <HAL_PCD_MspInit+0xb4>)
 80095c0:	f043 0302 	orr.w	r3, r3, #2
 80095c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80095c6:	4b20      	ldr	r3, [pc, #128]	@ (8009648 <HAL_PCD_MspInit+0xb4>)
 80095c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80095ca:	f003 0302 	and.w	r3, r3, #2
 80095ce:	613b      	str	r3, [r7, #16]
 80095d0:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_HS GPIO Configuration
    PB13     ------> USB_OTG_HS_VBUS
    PB14     ------> USB_OTG_HS_DM
    PB15     ------> USB_OTG_HS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80095d2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80095d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80095d8:	2300      	movs	r3, #0
 80095da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80095dc:	2300      	movs	r3, #0
 80095de:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80095e0:	f107 0314 	add.w	r3, r7, #20
 80095e4:	4619      	mov	r1, r3
 80095e6:	4819      	ldr	r0, [pc, #100]	@ (800964c <HAL_PCD_MspInit+0xb8>)
 80095e8:	f7f9 f8b6 	bl	8002758 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80095ec:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 80095f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80095f2:	2302      	movs	r3, #2
 80095f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80095f6:	2300      	movs	r3, #0
 80095f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80095fa:	2303      	movs	r3, #3
 80095fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 80095fe:	230c      	movs	r3, #12
 8009600:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009602:	f107 0314 	add.w	r3, r7, #20
 8009606:	4619      	mov	r1, r3
 8009608:	4810      	ldr	r0, [pc, #64]	@ (800964c <HAL_PCD_MspInit+0xb8>)
 800960a:	f7f9 f8a5 	bl	8002758 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 800960e:	2300      	movs	r3, #0
 8009610:	60fb      	str	r3, [r7, #12]
 8009612:	4b0d      	ldr	r3, [pc, #52]	@ (8009648 <HAL_PCD_MspInit+0xb4>)
 8009614:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009616:	4a0c      	ldr	r2, [pc, #48]	@ (8009648 <HAL_PCD_MspInit+0xb4>)
 8009618:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800961c:	6313      	str	r3, [r2, #48]	@ 0x30
 800961e:	4b0a      	ldr	r3, [pc, #40]	@ (8009648 <HAL_PCD_MspInit+0xb4>)
 8009620:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009622:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009626:	60fb      	str	r3, [r7, #12]
 8009628:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 800962a:	2200      	movs	r2, #0
 800962c:	2100      	movs	r1, #0
 800962e:	204d      	movs	r0, #77	@ 0x4d
 8009630:	f7f9 f85b 	bl	80026ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 8009634:	204d      	movs	r0, #77	@ 0x4d
 8009636:	f7f9 f874 	bl	8002722 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 800963a:	bf00      	nop
 800963c:	3728      	adds	r7, #40	@ 0x28
 800963e:	46bd      	mov	sp, r7
 8009640:	bd80      	pop	{r7, pc}
 8009642:	bf00      	nop
 8009644:	40040000 	.word	0x40040000
 8009648:	40023800 	.word	0x40023800
 800964c:	40020400 	.word	0x40020400

08009650 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009650:	b580      	push	{r7, lr}
 8009652:	b082      	sub	sp, #8
 8009654:	af00      	add	r7, sp, #0
 8009656:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8009664:	4619      	mov	r1, r3
 8009666:	4610      	mov	r0, r2
 8009668:	f7fe fc13 	bl	8007e92 <USBD_LL_SetupStage>
}
 800966c:	bf00      	nop
 800966e:	3708      	adds	r7, #8
 8009670:	46bd      	mov	sp, r7
 8009672:	bd80      	pop	{r7, pc}

08009674 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009674:	b580      	push	{r7, lr}
 8009676:	b082      	sub	sp, #8
 8009678:	af00      	add	r7, sp, #0
 800967a:	6078      	str	r0, [r7, #4]
 800967c:	460b      	mov	r3, r1
 800967e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8009686:	78fa      	ldrb	r2, [r7, #3]
 8009688:	6879      	ldr	r1, [r7, #4]
 800968a:	4613      	mov	r3, r2
 800968c:	00db      	lsls	r3, r3, #3
 800968e:	4413      	add	r3, r2
 8009690:	009b      	lsls	r3, r3, #2
 8009692:	440b      	add	r3, r1
 8009694:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8009698:	681a      	ldr	r2, [r3, #0]
 800969a:	78fb      	ldrb	r3, [r7, #3]
 800969c:	4619      	mov	r1, r3
 800969e:	f7fe fc4d 	bl	8007f3c <USBD_LL_DataOutStage>
}
 80096a2:	bf00      	nop
 80096a4:	3708      	adds	r7, #8
 80096a6:	46bd      	mov	sp, r7
 80096a8:	bd80      	pop	{r7, pc}

080096aa <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80096aa:	b580      	push	{r7, lr}
 80096ac:	b082      	sub	sp, #8
 80096ae:	af00      	add	r7, sp, #0
 80096b0:	6078      	str	r0, [r7, #4]
 80096b2:	460b      	mov	r3, r1
 80096b4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 80096bc:	78fa      	ldrb	r2, [r7, #3]
 80096be:	6879      	ldr	r1, [r7, #4]
 80096c0:	4613      	mov	r3, r2
 80096c2:	00db      	lsls	r3, r3, #3
 80096c4:	4413      	add	r3, r2
 80096c6:	009b      	lsls	r3, r3, #2
 80096c8:	440b      	add	r3, r1
 80096ca:	3320      	adds	r3, #32
 80096cc:	681a      	ldr	r2, [r3, #0]
 80096ce:	78fb      	ldrb	r3, [r7, #3]
 80096d0:	4619      	mov	r1, r3
 80096d2:	f7fe fcef 	bl	80080b4 <USBD_LL_DataInStage>
}
 80096d6:	bf00      	nop
 80096d8:	3708      	adds	r7, #8
 80096da:	46bd      	mov	sp, r7
 80096dc:	bd80      	pop	{r7, pc}

080096de <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80096de:	b580      	push	{r7, lr}
 80096e0:	b082      	sub	sp, #8
 80096e2:	af00      	add	r7, sp, #0
 80096e4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80096ec:	4618      	mov	r0, r3
 80096ee:	f7fe fe33 	bl	8008358 <USBD_LL_SOF>
}
 80096f2:	bf00      	nop
 80096f4:	3708      	adds	r7, #8
 80096f6:	46bd      	mov	sp, r7
 80096f8:	bd80      	pop	{r7, pc}

080096fa <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80096fa:	b580      	push	{r7, lr}
 80096fc:	b084      	sub	sp, #16
 80096fe:	af00      	add	r7, sp, #0
 8009700:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009702:	2301      	movs	r3, #1
 8009704:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	79db      	ldrb	r3, [r3, #7]
 800970a:	2b00      	cmp	r3, #0
 800970c:	d102      	bne.n	8009714 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800970e:	2300      	movs	r3, #0
 8009710:	73fb      	strb	r3, [r7, #15]
 8009712:	e008      	b.n	8009726 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	79db      	ldrb	r3, [r3, #7]
 8009718:	2b02      	cmp	r3, #2
 800971a:	d102      	bne.n	8009722 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800971c:	2301      	movs	r3, #1
 800971e:	73fb      	strb	r3, [r7, #15]
 8009720:	e001      	b.n	8009726 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8009722:	f7f8 fc77 	bl	8002014 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800972c:	7bfa      	ldrb	r2, [r7, #15]
 800972e:	4611      	mov	r1, r2
 8009730:	4618      	mov	r0, r3
 8009732:	f7fe fdcd 	bl	80082d0 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800973c:	4618      	mov	r0, r3
 800973e:	f7fe fd74 	bl	800822a <USBD_LL_Reset>
}
 8009742:	bf00      	nop
 8009744:	3710      	adds	r7, #16
 8009746:	46bd      	mov	sp, r7
 8009748:	bd80      	pop	{r7, pc}
	...

0800974c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800974c:	b580      	push	{r7, lr}
 800974e:	b082      	sub	sp, #8
 8009750:	af00      	add	r7, sp, #0
 8009752:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800975a:	4618      	mov	r0, r3
 800975c:	f7fe fdc8 	bl	80082f0 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	687a      	ldr	r2, [r7, #4]
 800976c:	6812      	ldr	r2, [r2, #0]
 800976e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8009772:	f043 0301 	orr.w	r3, r3, #1
 8009776:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	7adb      	ldrb	r3, [r3, #11]
 800977c:	2b00      	cmp	r3, #0
 800977e:	d005      	beq.n	800978c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009780:	4b04      	ldr	r3, [pc, #16]	@ (8009794 <HAL_PCD_SuspendCallback+0x48>)
 8009782:	691b      	ldr	r3, [r3, #16]
 8009784:	4a03      	ldr	r2, [pc, #12]	@ (8009794 <HAL_PCD_SuspendCallback+0x48>)
 8009786:	f043 0306 	orr.w	r3, r3, #6
 800978a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800978c:	bf00      	nop
 800978e:	3708      	adds	r7, #8
 8009790:	46bd      	mov	sp, r7
 8009792:	bd80      	pop	{r7, pc}
 8009794:	e000ed00 	.word	0xe000ed00

08009798 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009798:	b580      	push	{r7, lr}
 800979a:	b082      	sub	sp, #8
 800979c:	af00      	add	r7, sp, #0
 800979e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80097a6:	4618      	mov	r0, r3
 80097a8:	f7fe fdbe 	bl	8008328 <USBD_LL_Resume>
}
 80097ac:	bf00      	nop
 80097ae:	3708      	adds	r7, #8
 80097b0:	46bd      	mov	sp, r7
 80097b2:	bd80      	pop	{r7, pc}

080097b4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80097b4:	b580      	push	{r7, lr}
 80097b6:	b082      	sub	sp, #8
 80097b8:	af00      	add	r7, sp, #0
 80097ba:	6078      	str	r0, [r7, #4]
 80097bc:	460b      	mov	r3, r1
 80097be:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80097c6:	78fa      	ldrb	r2, [r7, #3]
 80097c8:	4611      	mov	r1, r2
 80097ca:	4618      	mov	r0, r3
 80097cc:	f7fe fe16 	bl	80083fc <USBD_LL_IsoOUTIncomplete>
}
 80097d0:	bf00      	nop
 80097d2:	3708      	adds	r7, #8
 80097d4:	46bd      	mov	sp, r7
 80097d6:	bd80      	pop	{r7, pc}

080097d8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80097d8:	b580      	push	{r7, lr}
 80097da:	b082      	sub	sp, #8
 80097dc:	af00      	add	r7, sp, #0
 80097de:	6078      	str	r0, [r7, #4]
 80097e0:	460b      	mov	r3, r1
 80097e2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80097ea:	78fa      	ldrb	r2, [r7, #3]
 80097ec:	4611      	mov	r1, r2
 80097ee:	4618      	mov	r0, r3
 80097f0:	f7fe fdd2 	bl	8008398 <USBD_LL_IsoINIncomplete>
}
 80097f4:	bf00      	nop
 80097f6:	3708      	adds	r7, #8
 80097f8:	46bd      	mov	sp, r7
 80097fa:	bd80      	pop	{r7, pc}

080097fc <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80097fc:	b580      	push	{r7, lr}
 80097fe:	b082      	sub	sp, #8
 8009800:	af00      	add	r7, sp, #0
 8009802:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800980a:	4618      	mov	r0, r3
 800980c:	f7fe fe28 	bl	8008460 <USBD_LL_DevConnected>
}
 8009810:	bf00      	nop
 8009812:	3708      	adds	r7, #8
 8009814:	46bd      	mov	sp, r7
 8009816:	bd80      	pop	{r7, pc}

08009818 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009818:	b580      	push	{r7, lr}
 800981a:	b082      	sub	sp, #8
 800981c:	af00      	add	r7, sp, #0
 800981e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009826:	4618      	mov	r0, r3
 8009828:	f7fe fe25 	bl	8008476 <USBD_LL_DevDisconnected>
}
 800982c:	bf00      	nop
 800982e:	3708      	adds	r7, #8
 8009830:	46bd      	mov	sp, r7
 8009832:	bd80      	pop	{r7, pc}

08009834 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009834:	b580      	push	{r7, lr}
 8009836:	b082      	sub	sp, #8
 8009838:	af00      	add	r7, sp, #0
 800983a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	781b      	ldrb	r3, [r3, #0]
 8009840:	2b01      	cmp	r3, #1
 8009842:	d140      	bne.n	80098c6 <USBD_LL_Init+0x92>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 8009844:	4a22      	ldr	r2, [pc, #136]	@ (80098d0 <USBD_LL_Init+0x9c>)
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_HS;
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	4a20      	ldr	r2, [pc, #128]	@ (80098d0 <USBD_LL_Init+0x9c>)
 8009850:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 8009854:	4b1e      	ldr	r3, [pc, #120]	@ (80098d0 <USBD_LL_Init+0x9c>)
 8009856:	4a1f      	ldr	r2, [pc, #124]	@ (80098d4 <USBD_LL_Init+0xa0>)
 8009858:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 6;
 800985a:	4b1d      	ldr	r3, [pc, #116]	@ (80098d0 <USBD_LL_Init+0x9c>)
 800985c:	2206      	movs	r2, #6
 800985e:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 8009860:	4b1b      	ldr	r3, [pc, #108]	@ (80098d0 <USBD_LL_Init+0x9c>)
 8009862:	2202      	movs	r2, #2
 8009864:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 8009866:	4b1a      	ldr	r3, [pc, #104]	@ (80098d0 <USBD_LL_Init+0x9c>)
 8009868:	2200      	movs	r2, #0
 800986a:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 800986c:	4b18      	ldr	r3, [pc, #96]	@ (80098d0 <USBD_LL_Init+0x9c>)
 800986e:	2202      	movs	r2, #2
 8009870:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 8009872:	4b17      	ldr	r3, [pc, #92]	@ (80098d0 <USBD_LL_Init+0x9c>)
 8009874:	2200      	movs	r2, #0
 8009876:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 8009878:	4b15      	ldr	r3, [pc, #84]	@ (80098d0 <USBD_LL_Init+0x9c>)
 800987a:	2200      	movs	r2, #0
 800987c:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 800987e:	4b14      	ldr	r3, [pc, #80]	@ (80098d0 <USBD_LL_Init+0x9c>)
 8009880:	2200      	movs	r2, #0
 8009882:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = ENABLE;
 8009884:	4b12      	ldr	r3, [pc, #72]	@ (80098d0 <USBD_LL_Init+0x9c>)
 8009886:	2201      	movs	r2, #1
 8009888:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 800988a:	4b11      	ldr	r3, [pc, #68]	@ (80098d0 <USBD_LL_Init+0x9c>)
 800988c:	2200      	movs	r2, #0
 800988e:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 8009890:	4b0f      	ldr	r3, [pc, #60]	@ (80098d0 <USBD_LL_Init+0x9c>)
 8009892:	2200      	movs	r2, #0
 8009894:	741a      	strb	r2, [r3, #16]
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 8009896:	480e      	ldr	r0, [pc, #56]	@ (80098d0 <USBD_LL_Init+0x9c>)
 8009898:	f7fa f9c1 	bl	8003c1e <HAL_PCD_Init>
 800989c:	4603      	mov	r3, r0
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d001      	beq.n	80098a6 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 80098a2:	f7f8 fbb7 	bl	8002014 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_HS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 80098a6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80098aa:	4809      	ldr	r0, [pc, #36]	@ (80098d0 <USBD_LL_Init+0x9c>)
 80098ac:	f7fb fbd5 	bl	800505a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 80098b0:	2280      	movs	r2, #128	@ 0x80
 80098b2:	2100      	movs	r1, #0
 80098b4:	4806      	ldr	r0, [pc, #24]	@ (80098d0 <USBD_LL_Init+0x9c>)
 80098b6:	f7fb fb89 	bl	8004fcc <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 80098ba:	f44f 72ba 	mov.w	r2, #372	@ 0x174
 80098be:	2101      	movs	r1, #1
 80098c0:	4803      	ldr	r0, [pc, #12]	@ (80098d0 <USBD_LL_Init+0x9c>)
 80098c2:	f7fb fb83 	bl	8004fcc <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80098c6:	2300      	movs	r3, #0
}
 80098c8:	4618      	mov	r0, r3
 80098ca:	3708      	adds	r7, #8
 80098cc:	46bd      	mov	sp, r7
 80098ce:	bd80      	pop	{r7, pc}
 80098d0:	200009b4 	.word	0x200009b4
 80098d4:	40040000 	.word	0x40040000

080098d8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80098d8:	b580      	push	{r7, lr}
 80098da:	b084      	sub	sp, #16
 80098dc:	af00      	add	r7, sp, #0
 80098de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80098e0:	2300      	movs	r3, #0
 80098e2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80098e4:	2300      	movs	r3, #0
 80098e6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80098ee:	4618      	mov	r0, r3
 80098f0:	f7fa faa4 	bl	8003e3c <HAL_PCD_Start>
 80098f4:	4603      	mov	r3, r0
 80098f6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80098f8:	7bfb      	ldrb	r3, [r7, #15]
 80098fa:	4618      	mov	r0, r3
 80098fc:	f000 f930 	bl	8009b60 <USBD_Get_USB_Status>
 8009900:	4603      	mov	r3, r0
 8009902:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009904:	7bbb      	ldrb	r3, [r7, #14]
}
 8009906:	4618      	mov	r0, r3
 8009908:	3710      	adds	r7, #16
 800990a:	46bd      	mov	sp, r7
 800990c:	bd80      	pop	{r7, pc}

0800990e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800990e:	b580      	push	{r7, lr}
 8009910:	b084      	sub	sp, #16
 8009912:	af00      	add	r7, sp, #0
 8009914:	6078      	str	r0, [r7, #4]
 8009916:	4608      	mov	r0, r1
 8009918:	4611      	mov	r1, r2
 800991a:	461a      	mov	r2, r3
 800991c:	4603      	mov	r3, r0
 800991e:	70fb      	strb	r3, [r7, #3]
 8009920:	460b      	mov	r3, r1
 8009922:	70bb      	strb	r3, [r7, #2]
 8009924:	4613      	mov	r3, r2
 8009926:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009928:	2300      	movs	r3, #0
 800992a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800992c:	2300      	movs	r3, #0
 800992e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8009936:	78bb      	ldrb	r3, [r7, #2]
 8009938:	883a      	ldrh	r2, [r7, #0]
 800993a:	78f9      	ldrb	r1, [r7, #3]
 800993c:	f7fa ff78 	bl	8004830 <HAL_PCD_EP_Open>
 8009940:	4603      	mov	r3, r0
 8009942:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009944:	7bfb      	ldrb	r3, [r7, #15]
 8009946:	4618      	mov	r0, r3
 8009948:	f000 f90a 	bl	8009b60 <USBD_Get_USB_Status>
 800994c:	4603      	mov	r3, r0
 800994e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009950:	7bbb      	ldrb	r3, [r7, #14]
}
 8009952:	4618      	mov	r0, r3
 8009954:	3710      	adds	r7, #16
 8009956:	46bd      	mov	sp, r7
 8009958:	bd80      	pop	{r7, pc}

0800995a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800995a:	b580      	push	{r7, lr}
 800995c:	b084      	sub	sp, #16
 800995e:	af00      	add	r7, sp, #0
 8009960:	6078      	str	r0, [r7, #4]
 8009962:	460b      	mov	r3, r1
 8009964:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009966:	2300      	movs	r3, #0
 8009968:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800996a:	2300      	movs	r3, #0
 800996c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009974:	78fa      	ldrb	r2, [r7, #3]
 8009976:	4611      	mov	r1, r2
 8009978:	4618      	mov	r0, r3
 800997a:	f7fa ffc3 	bl	8004904 <HAL_PCD_EP_Close>
 800997e:	4603      	mov	r3, r0
 8009980:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009982:	7bfb      	ldrb	r3, [r7, #15]
 8009984:	4618      	mov	r0, r3
 8009986:	f000 f8eb 	bl	8009b60 <USBD_Get_USB_Status>
 800998a:	4603      	mov	r3, r0
 800998c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800998e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009990:	4618      	mov	r0, r3
 8009992:	3710      	adds	r7, #16
 8009994:	46bd      	mov	sp, r7
 8009996:	bd80      	pop	{r7, pc}

08009998 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009998:	b580      	push	{r7, lr}
 800999a:	b084      	sub	sp, #16
 800999c:	af00      	add	r7, sp, #0
 800999e:	6078      	str	r0, [r7, #4]
 80099a0:	460b      	mov	r3, r1
 80099a2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80099a4:	2300      	movs	r3, #0
 80099a6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80099a8:	2300      	movs	r3, #0
 80099aa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80099b2:	78fa      	ldrb	r2, [r7, #3]
 80099b4:	4611      	mov	r1, r2
 80099b6:	4618      	mov	r0, r3
 80099b8:	f7fb f863 	bl	8004a82 <HAL_PCD_EP_SetStall>
 80099bc:	4603      	mov	r3, r0
 80099be:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80099c0:	7bfb      	ldrb	r3, [r7, #15]
 80099c2:	4618      	mov	r0, r3
 80099c4:	f000 f8cc 	bl	8009b60 <USBD_Get_USB_Status>
 80099c8:	4603      	mov	r3, r0
 80099ca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80099cc:	7bbb      	ldrb	r3, [r7, #14]
}
 80099ce:	4618      	mov	r0, r3
 80099d0:	3710      	adds	r7, #16
 80099d2:	46bd      	mov	sp, r7
 80099d4:	bd80      	pop	{r7, pc}

080099d6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80099d6:	b580      	push	{r7, lr}
 80099d8:	b084      	sub	sp, #16
 80099da:	af00      	add	r7, sp, #0
 80099dc:	6078      	str	r0, [r7, #4]
 80099de:	460b      	mov	r3, r1
 80099e0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80099e2:	2300      	movs	r3, #0
 80099e4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80099e6:	2300      	movs	r3, #0
 80099e8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80099f0:	78fa      	ldrb	r2, [r7, #3]
 80099f2:	4611      	mov	r1, r2
 80099f4:	4618      	mov	r0, r3
 80099f6:	f7fb f8a7 	bl	8004b48 <HAL_PCD_EP_ClrStall>
 80099fa:	4603      	mov	r3, r0
 80099fc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80099fe:	7bfb      	ldrb	r3, [r7, #15]
 8009a00:	4618      	mov	r0, r3
 8009a02:	f000 f8ad 	bl	8009b60 <USBD_Get_USB_Status>
 8009a06:	4603      	mov	r3, r0
 8009a08:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009a0a:	7bbb      	ldrb	r3, [r7, #14]
}
 8009a0c:	4618      	mov	r0, r3
 8009a0e:	3710      	adds	r7, #16
 8009a10:	46bd      	mov	sp, r7
 8009a12:	bd80      	pop	{r7, pc}

08009a14 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009a14:	b480      	push	{r7}
 8009a16:	b085      	sub	sp, #20
 8009a18:	af00      	add	r7, sp, #0
 8009a1a:	6078      	str	r0, [r7, #4]
 8009a1c:	460b      	mov	r3, r1
 8009a1e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009a26:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009a28:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	da0b      	bge.n	8009a48 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009a30:	78fb      	ldrb	r3, [r7, #3]
 8009a32:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009a36:	68f9      	ldr	r1, [r7, #12]
 8009a38:	4613      	mov	r3, r2
 8009a3a:	00db      	lsls	r3, r3, #3
 8009a3c:	4413      	add	r3, r2
 8009a3e:	009b      	lsls	r3, r3, #2
 8009a40:	440b      	add	r3, r1
 8009a42:	3316      	adds	r3, #22
 8009a44:	781b      	ldrb	r3, [r3, #0]
 8009a46:	e00b      	b.n	8009a60 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009a48:	78fb      	ldrb	r3, [r7, #3]
 8009a4a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009a4e:	68f9      	ldr	r1, [r7, #12]
 8009a50:	4613      	mov	r3, r2
 8009a52:	00db      	lsls	r3, r3, #3
 8009a54:	4413      	add	r3, r2
 8009a56:	009b      	lsls	r3, r3, #2
 8009a58:	440b      	add	r3, r1
 8009a5a:	f203 2356 	addw	r3, r3, #598	@ 0x256
 8009a5e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009a60:	4618      	mov	r0, r3
 8009a62:	3714      	adds	r7, #20
 8009a64:	46bd      	mov	sp, r7
 8009a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a6a:	4770      	bx	lr

08009a6c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009a6c:	b580      	push	{r7, lr}
 8009a6e:	b084      	sub	sp, #16
 8009a70:	af00      	add	r7, sp, #0
 8009a72:	6078      	str	r0, [r7, #4]
 8009a74:	460b      	mov	r3, r1
 8009a76:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009a78:	2300      	movs	r3, #0
 8009a7a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009a7c:	2300      	movs	r3, #0
 8009a7e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009a86:	78fa      	ldrb	r2, [r7, #3]
 8009a88:	4611      	mov	r1, r2
 8009a8a:	4618      	mov	r0, r3
 8009a8c:	f7fa feac 	bl	80047e8 <HAL_PCD_SetAddress>
 8009a90:	4603      	mov	r3, r0
 8009a92:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009a94:	7bfb      	ldrb	r3, [r7, #15]
 8009a96:	4618      	mov	r0, r3
 8009a98:	f000 f862 	bl	8009b60 <USBD_Get_USB_Status>
 8009a9c:	4603      	mov	r3, r0
 8009a9e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009aa0:	7bbb      	ldrb	r3, [r7, #14]
}
 8009aa2:	4618      	mov	r0, r3
 8009aa4:	3710      	adds	r7, #16
 8009aa6:	46bd      	mov	sp, r7
 8009aa8:	bd80      	pop	{r7, pc}

08009aaa <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009aaa:	b580      	push	{r7, lr}
 8009aac:	b086      	sub	sp, #24
 8009aae:	af00      	add	r7, sp, #0
 8009ab0:	60f8      	str	r0, [r7, #12]
 8009ab2:	607a      	str	r2, [r7, #4]
 8009ab4:	603b      	str	r3, [r7, #0]
 8009ab6:	460b      	mov	r3, r1
 8009ab8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009aba:	2300      	movs	r3, #0
 8009abc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009abe:	2300      	movs	r3, #0
 8009ac0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8009ac8:	7af9      	ldrb	r1, [r7, #11]
 8009aca:	683b      	ldr	r3, [r7, #0]
 8009acc:	687a      	ldr	r2, [r7, #4]
 8009ace:	f7fa ff9e 	bl	8004a0e <HAL_PCD_EP_Transmit>
 8009ad2:	4603      	mov	r3, r0
 8009ad4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009ad6:	7dfb      	ldrb	r3, [r7, #23]
 8009ad8:	4618      	mov	r0, r3
 8009ada:	f000 f841 	bl	8009b60 <USBD_Get_USB_Status>
 8009ade:	4603      	mov	r3, r0
 8009ae0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009ae2:	7dbb      	ldrb	r3, [r7, #22]
}
 8009ae4:	4618      	mov	r0, r3
 8009ae6:	3718      	adds	r7, #24
 8009ae8:	46bd      	mov	sp, r7
 8009aea:	bd80      	pop	{r7, pc}

08009aec <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009aec:	b580      	push	{r7, lr}
 8009aee:	b086      	sub	sp, #24
 8009af0:	af00      	add	r7, sp, #0
 8009af2:	60f8      	str	r0, [r7, #12]
 8009af4:	607a      	str	r2, [r7, #4]
 8009af6:	603b      	str	r3, [r7, #0]
 8009af8:	460b      	mov	r3, r1
 8009afa:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009afc:	2300      	movs	r3, #0
 8009afe:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009b00:	2300      	movs	r3, #0
 8009b02:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8009b0a:	7af9      	ldrb	r1, [r7, #11]
 8009b0c:	683b      	ldr	r3, [r7, #0]
 8009b0e:	687a      	ldr	r2, [r7, #4]
 8009b10:	f7fa ff42 	bl	8004998 <HAL_PCD_EP_Receive>
 8009b14:	4603      	mov	r3, r0
 8009b16:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009b18:	7dfb      	ldrb	r3, [r7, #23]
 8009b1a:	4618      	mov	r0, r3
 8009b1c:	f000 f820 	bl	8009b60 <USBD_Get_USB_Status>
 8009b20:	4603      	mov	r3, r0
 8009b22:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009b24:	7dbb      	ldrb	r3, [r7, #22]
}
 8009b26:	4618      	mov	r0, r3
 8009b28:	3718      	adds	r7, #24
 8009b2a:	46bd      	mov	sp, r7
 8009b2c:	bd80      	pop	{r7, pc}
	...

08009b30 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009b30:	b480      	push	{r7}
 8009b32:	b083      	sub	sp, #12
 8009b34:	af00      	add	r7, sp, #0
 8009b36:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009b38:	4b03      	ldr	r3, [pc, #12]	@ (8009b48 <USBD_static_malloc+0x18>)
}
 8009b3a:	4618      	mov	r0, r3
 8009b3c:	370c      	adds	r7, #12
 8009b3e:	46bd      	mov	sp, r7
 8009b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b44:	4770      	bx	lr
 8009b46:	bf00      	nop
 8009b48:	20000e98 	.word	0x20000e98

08009b4c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009b4c:	b480      	push	{r7}
 8009b4e:	b083      	sub	sp, #12
 8009b50:	af00      	add	r7, sp, #0
 8009b52:	6078      	str	r0, [r7, #4]

}
 8009b54:	bf00      	nop
 8009b56:	370c      	adds	r7, #12
 8009b58:	46bd      	mov	sp, r7
 8009b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b5e:	4770      	bx	lr

08009b60 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009b60:	b480      	push	{r7}
 8009b62:	b085      	sub	sp, #20
 8009b64:	af00      	add	r7, sp, #0
 8009b66:	4603      	mov	r3, r0
 8009b68:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009b6a:	2300      	movs	r3, #0
 8009b6c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009b6e:	79fb      	ldrb	r3, [r7, #7]
 8009b70:	2b03      	cmp	r3, #3
 8009b72:	d817      	bhi.n	8009ba4 <USBD_Get_USB_Status+0x44>
 8009b74:	a201      	add	r2, pc, #4	@ (adr r2, 8009b7c <USBD_Get_USB_Status+0x1c>)
 8009b76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b7a:	bf00      	nop
 8009b7c:	08009b8d 	.word	0x08009b8d
 8009b80:	08009b93 	.word	0x08009b93
 8009b84:	08009b99 	.word	0x08009b99
 8009b88:	08009b9f 	.word	0x08009b9f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009b8c:	2300      	movs	r3, #0
 8009b8e:	73fb      	strb	r3, [r7, #15]
    break;
 8009b90:	e00b      	b.n	8009baa <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009b92:	2303      	movs	r3, #3
 8009b94:	73fb      	strb	r3, [r7, #15]
    break;
 8009b96:	e008      	b.n	8009baa <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009b98:	2301      	movs	r3, #1
 8009b9a:	73fb      	strb	r3, [r7, #15]
    break;
 8009b9c:	e005      	b.n	8009baa <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009b9e:	2303      	movs	r3, #3
 8009ba0:	73fb      	strb	r3, [r7, #15]
    break;
 8009ba2:	e002      	b.n	8009baa <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009ba4:	2303      	movs	r3, #3
 8009ba6:	73fb      	strb	r3, [r7, #15]
    break;
 8009ba8:	bf00      	nop
  }
  return usb_status;
 8009baa:	7bfb      	ldrb	r3, [r7, #15]
}
 8009bac:	4618      	mov	r0, r3
 8009bae:	3714      	adds	r7, #20
 8009bb0:	46bd      	mov	sp, r7
 8009bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bb6:	4770      	bx	lr

08009bb8 <__cvt>:
 8009bb8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009bbc:	ec57 6b10 	vmov	r6, r7, d0
 8009bc0:	2f00      	cmp	r7, #0
 8009bc2:	460c      	mov	r4, r1
 8009bc4:	4619      	mov	r1, r3
 8009bc6:	463b      	mov	r3, r7
 8009bc8:	bfbb      	ittet	lt
 8009bca:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8009bce:	461f      	movlt	r7, r3
 8009bd0:	2300      	movge	r3, #0
 8009bd2:	232d      	movlt	r3, #45	@ 0x2d
 8009bd4:	700b      	strb	r3, [r1, #0]
 8009bd6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009bd8:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8009bdc:	4691      	mov	r9, r2
 8009bde:	f023 0820 	bic.w	r8, r3, #32
 8009be2:	bfbc      	itt	lt
 8009be4:	4632      	movlt	r2, r6
 8009be6:	4616      	movlt	r6, r2
 8009be8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009bec:	d005      	beq.n	8009bfa <__cvt+0x42>
 8009bee:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8009bf2:	d100      	bne.n	8009bf6 <__cvt+0x3e>
 8009bf4:	3401      	adds	r4, #1
 8009bf6:	2102      	movs	r1, #2
 8009bf8:	e000      	b.n	8009bfc <__cvt+0x44>
 8009bfa:	2103      	movs	r1, #3
 8009bfc:	ab03      	add	r3, sp, #12
 8009bfe:	9301      	str	r3, [sp, #4]
 8009c00:	ab02      	add	r3, sp, #8
 8009c02:	9300      	str	r3, [sp, #0]
 8009c04:	ec47 6b10 	vmov	d0, r6, r7
 8009c08:	4653      	mov	r3, sl
 8009c0a:	4622      	mov	r2, r4
 8009c0c:	f000 fe5c 	bl	800a8c8 <_dtoa_r>
 8009c10:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8009c14:	4605      	mov	r5, r0
 8009c16:	d119      	bne.n	8009c4c <__cvt+0x94>
 8009c18:	f019 0f01 	tst.w	r9, #1
 8009c1c:	d00e      	beq.n	8009c3c <__cvt+0x84>
 8009c1e:	eb00 0904 	add.w	r9, r0, r4
 8009c22:	2200      	movs	r2, #0
 8009c24:	2300      	movs	r3, #0
 8009c26:	4630      	mov	r0, r6
 8009c28:	4639      	mov	r1, r7
 8009c2a:	f7f6 ff5d 	bl	8000ae8 <__aeabi_dcmpeq>
 8009c2e:	b108      	cbz	r0, 8009c34 <__cvt+0x7c>
 8009c30:	f8cd 900c 	str.w	r9, [sp, #12]
 8009c34:	2230      	movs	r2, #48	@ 0x30
 8009c36:	9b03      	ldr	r3, [sp, #12]
 8009c38:	454b      	cmp	r3, r9
 8009c3a:	d31e      	bcc.n	8009c7a <__cvt+0xc2>
 8009c3c:	9b03      	ldr	r3, [sp, #12]
 8009c3e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009c40:	1b5b      	subs	r3, r3, r5
 8009c42:	4628      	mov	r0, r5
 8009c44:	6013      	str	r3, [r2, #0]
 8009c46:	b004      	add	sp, #16
 8009c48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c4c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009c50:	eb00 0904 	add.w	r9, r0, r4
 8009c54:	d1e5      	bne.n	8009c22 <__cvt+0x6a>
 8009c56:	7803      	ldrb	r3, [r0, #0]
 8009c58:	2b30      	cmp	r3, #48	@ 0x30
 8009c5a:	d10a      	bne.n	8009c72 <__cvt+0xba>
 8009c5c:	2200      	movs	r2, #0
 8009c5e:	2300      	movs	r3, #0
 8009c60:	4630      	mov	r0, r6
 8009c62:	4639      	mov	r1, r7
 8009c64:	f7f6 ff40 	bl	8000ae8 <__aeabi_dcmpeq>
 8009c68:	b918      	cbnz	r0, 8009c72 <__cvt+0xba>
 8009c6a:	f1c4 0401 	rsb	r4, r4, #1
 8009c6e:	f8ca 4000 	str.w	r4, [sl]
 8009c72:	f8da 3000 	ldr.w	r3, [sl]
 8009c76:	4499      	add	r9, r3
 8009c78:	e7d3      	b.n	8009c22 <__cvt+0x6a>
 8009c7a:	1c59      	adds	r1, r3, #1
 8009c7c:	9103      	str	r1, [sp, #12]
 8009c7e:	701a      	strb	r2, [r3, #0]
 8009c80:	e7d9      	b.n	8009c36 <__cvt+0x7e>

08009c82 <__exponent>:
 8009c82:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009c84:	2900      	cmp	r1, #0
 8009c86:	bfba      	itte	lt
 8009c88:	4249      	neglt	r1, r1
 8009c8a:	232d      	movlt	r3, #45	@ 0x2d
 8009c8c:	232b      	movge	r3, #43	@ 0x2b
 8009c8e:	2909      	cmp	r1, #9
 8009c90:	7002      	strb	r2, [r0, #0]
 8009c92:	7043      	strb	r3, [r0, #1]
 8009c94:	dd29      	ble.n	8009cea <__exponent+0x68>
 8009c96:	f10d 0307 	add.w	r3, sp, #7
 8009c9a:	461d      	mov	r5, r3
 8009c9c:	270a      	movs	r7, #10
 8009c9e:	461a      	mov	r2, r3
 8009ca0:	fbb1 f6f7 	udiv	r6, r1, r7
 8009ca4:	fb07 1416 	mls	r4, r7, r6, r1
 8009ca8:	3430      	adds	r4, #48	@ 0x30
 8009caa:	f802 4c01 	strb.w	r4, [r2, #-1]
 8009cae:	460c      	mov	r4, r1
 8009cb0:	2c63      	cmp	r4, #99	@ 0x63
 8009cb2:	f103 33ff 	add.w	r3, r3, #4294967295
 8009cb6:	4631      	mov	r1, r6
 8009cb8:	dcf1      	bgt.n	8009c9e <__exponent+0x1c>
 8009cba:	3130      	adds	r1, #48	@ 0x30
 8009cbc:	1e94      	subs	r4, r2, #2
 8009cbe:	f803 1c01 	strb.w	r1, [r3, #-1]
 8009cc2:	1c41      	adds	r1, r0, #1
 8009cc4:	4623      	mov	r3, r4
 8009cc6:	42ab      	cmp	r3, r5
 8009cc8:	d30a      	bcc.n	8009ce0 <__exponent+0x5e>
 8009cca:	f10d 0309 	add.w	r3, sp, #9
 8009cce:	1a9b      	subs	r3, r3, r2
 8009cd0:	42ac      	cmp	r4, r5
 8009cd2:	bf88      	it	hi
 8009cd4:	2300      	movhi	r3, #0
 8009cd6:	3302      	adds	r3, #2
 8009cd8:	4403      	add	r3, r0
 8009cda:	1a18      	subs	r0, r3, r0
 8009cdc:	b003      	add	sp, #12
 8009cde:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009ce0:	f813 6b01 	ldrb.w	r6, [r3], #1
 8009ce4:	f801 6f01 	strb.w	r6, [r1, #1]!
 8009ce8:	e7ed      	b.n	8009cc6 <__exponent+0x44>
 8009cea:	2330      	movs	r3, #48	@ 0x30
 8009cec:	3130      	adds	r1, #48	@ 0x30
 8009cee:	7083      	strb	r3, [r0, #2]
 8009cf0:	70c1      	strb	r1, [r0, #3]
 8009cf2:	1d03      	adds	r3, r0, #4
 8009cf4:	e7f1      	b.n	8009cda <__exponent+0x58>
	...

08009cf8 <_printf_float>:
 8009cf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009cfc:	b08d      	sub	sp, #52	@ 0x34
 8009cfe:	460c      	mov	r4, r1
 8009d00:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8009d04:	4616      	mov	r6, r2
 8009d06:	461f      	mov	r7, r3
 8009d08:	4605      	mov	r5, r0
 8009d0a:	f000 fcdb 	bl	800a6c4 <_localeconv_r>
 8009d0e:	6803      	ldr	r3, [r0, #0]
 8009d10:	9304      	str	r3, [sp, #16]
 8009d12:	4618      	mov	r0, r3
 8009d14:	f7f6 fabc 	bl	8000290 <strlen>
 8009d18:	2300      	movs	r3, #0
 8009d1a:	930a      	str	r3, [sp, #40]	@ 0x28
 8009d1c:	f8d8 3000 	ldr.w	r3, [r8]
 8009d20:	9005      	str	r0, [sp, #20]
 8009d22:	3307      	adds	r3, #7
 8009d24:	f023 0307 	bic.w	r3, r3, #7
 8009d28:	f103 0208 	add.w	r2, r3, #8
 8009d2c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8009d30:	f8d4 b000 	ldr.w	fp, [r4]
 8009d34:	f8c8 2000 	str.w	r2, [r8]
 8009d38:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009d3c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8009d40:	9307      	str	r3, [sp, #28]
 8009d42:	f8cd 8018 	str.w	r8, [sp, #24]
 8009d46:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8009d4a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009d4e:	4b9c      	ldr	r3, [pc, #624]	@ (8009fc0 <_printf_float+0x2c8>)
 8009d50:	f04f 32ff 	mov.w	r2, #4294967295
 8009d54:	f7f6 fefa 	bl	8000b4c <__aeabi_dcmpun>
 8009d58:	bb70      	cbnz	r0, 8009db8 <_printf_float+0xc0>
 8009d5a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009d5e:	4b98      	ldr	r3, [pc, #608]	@ (8009fc0 <_printf_float+0x2c8>)
 8009d60:	f04f 32ff 	mov.w	r2, #4294967295
 8009d64:	f7f6 fed4 	bl	8000b10 <__aeabi_dcmple>
 8009d68:	bb30      	cbnz	r0, 8009db8 <_printf_float+0xc0>
 8009d6a:	2200      	movs	r2, #0
 8009d6c:	2300      	movs	r3, #0
 8009d6e:	4640      	mov	r0, r8
 8009d70:	4649      	mov	r1, r9
 8009d72:	f7f6 fec3 	bl	8000afc <__aeabi_dcmplt>
 8009d76:	b110      	cbz	r0, 8009d7e <_printf_float+0x86>
 8009d78:	232d      	movs	r3, #45	@ 0x2d
 8009d7a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009d7e:	4a91      	ldr	r2, [pc, #580]	@ (8009fc4 <_printf_float+0x2cc>)
 8009d80:	4b91      	ldr	r3, [pc, #580]	@ (8009fc8 <_printf_float+0x2d0>)
 8009d82:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8009d86:	bf8c      	ite	hi
 8009d88:	4690      	movhi	r8, r2
 8009d8a:	4698      	movls	r8, r3
 8009d8c:	2303      	movs	r3, #3
 8009d8e:	6123      	str	r3, [r4, #16]
 8009d90:	f02b 0304 	bic.w	r3, fp, #4
 8009d94:	6023      	str	r3, [r4, #0]
 8009d96:	f04f 0900 	mov.w	r9, #0
 8009d9a:	9700      	str	r7, [sp, #0]
 8009d9c:	4633      	mov	r3, r6
 8009d9e:	aa0b      	add	r2, sp, #44	@ 0x2c
 8009da0:	4621      	mov	r1, r4
 8009da2:	4628      	mov	r0, r5
 8009da4:	f000 f9d2 	bl	800a14c <_printf_common>
 8009da8:	3001      	adds	r0, #1
 8009daa:	f040 808d 	bne.w	8009ec8 <_printf_float+0x1d0>
 8009dae:	f04f 30ff 	mov.w	r0, #4294967295
 8009db2:	b00d      	add	sp, #52	@ 0x34
 8009db4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009db8:	4642      	mov	r2, r8
 8009dba:	464b      	mov	r3, r9
 8009dbc:	4640      	mov	r0, r8
 8009dbe:	4649      	mov	r1, r9
 8009dc0:	f7f6 fec4 	bl	8000b4c <__aeabi_dcmpun>
 8009dc4:	b140      	cbz	r0, 8009dd8 <_printf_float+0xe0>
 8009dc6:	464b      	mov	r3, r9
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	bfbc      	itt	lt
 8009dcc:	232d      	movlt	r3, #45	@ 0x2d
 8009dce:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8009dd2:	4a7e      	ldr	r2, [pc, #504]	@ (8009fcc <_printf_float+0x2d4>)
 8009dd4:	4b7e      	ldr	r3, [pc, #504]	@ (8009fd0 <_printf_float+0x2d8>)
 8009dd6:	e7d4      	b.n	8009d82 <_printf_float+0x8a>
 8009dd8:	6863      	ldr	r3, [r4, #4]
 8009dda:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8009dde:	9206      	str	r2, [sp, #24]
 8009de0:	1c5a      	adds	r2, r3, #1
 8009de2:	d13b      	bne.n	8009e5c <_printf_float+0x164>
 8009de4:	2306      	movs	r3, #6
 8009de6:	6063      	str	r3, [r4, #4]
 8009de8:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8009dec:	2300      	movs	r3, #0
 8009dee:	6022      	str	r2, [r4, #0]
 8009df0:	9303      	str	r3, [sp, #12]
 8009df2:	ab0a      	add	r3, sp, #40	@ 0x28
 8009df4:	e9cd a301 	strd	sl, r3, [sp, #4]
 8009df8:	ab09      	add	r3, sp, #36	@ 0x24
 8009dfa:	9300      	str	r3, [sp, #0]
 8009dfc:	6861      	ldr	r1, [r4, #4]
 8009dfe:	ec49 8b10 	vmov	d0, r8, r9
 8009e02:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8009e06:	4628      	mov	r0, r5
 8009e08:	f7ff fed6 	bl	8009bb8 <__cvt>
 8009e0c:	9b06      	ldr	r3, [sp, #24]
 8009e0e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009e10:	2b47      	cmp	r3, #71	@ 0x47
 8009e12:	4680      	mov	r8, r0
 8009e14:	d129      	bne.n	8009e6a <_printf_float+0x172>
 8009e16:	1cc8      	adds	r0, r1, #3
 8009e18:	db02      	blt.n	8009e20 <_printf_float+0x128>
 8009e1a:	6863      	ldr	r3, [r4, #4]
 8009e1c:	4299      	cmp	r1, r3
 8009e1e:	dd41      	ble.n	8009ea4 <_printf_float+0x1ac>
 8009e20:	f1aa 0a02 	sub.w	sl, sl, #2
 8009e24:	fa5f fa8a 	uxtb.w	sl, sl
 8009e28:	3901      	subs	r1, #1
 8009e2a:	4652      	mov	r2, sl
 8009e2c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8009e30:	9109      	str	r1, [sp, #36]	@ 0x24
 8009e32:	f7ff ff26 	bl	8009c82 <__exponent>
 8009e36:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009e38:	1813      	adds	r3, r2, r0
 8009e3a:	2a01      	cmp	r2, #1
 8009e3c:	4681      	mov	r9, r0
 8009e3e:	6123      	str	r3, [r4, #16]
 8009e40:	dc02      	bgt.n	8009e48 <_printf_float+0x150>
 8009e42:	6822      	ldr	r2, [r4, #0]
 8009e44:	07d2      	lsls	r2, r2, #31
 8009e46:	d501      	bpl.n	8009e4c <_printf_float+0x154>
 8009e48:	3301      	adds	r3, #1
 8009e4a:	6123      	str	r3, [r4, #16]
 8009e4c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d0a2      	beq.n	8009d9a <_printf_float+0xa2>
 8009e54:	232d      	movs	r3, #45	@ 0x2d
 8009e56:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009e5a:	e79e      	b.n	8009d9a <_printf_float+0xa2>
 8009e5c:	9a06      	ldr	r2, [sp, #24]
 8009e5e:	2a47      	cmp	r2, #71	@ 0x47
 8009e60:	d1c2      	bne.n	8009de8 <_printf_float+0xf0>
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d1c0      	bne.n	8009de8 <_printf_float+0xf0>
 8009e66:	2301      	movs	r3, #1
 8009e68:	e7bd      	b.n	8009de6 <_printf_float+0xee>
 8009e6a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009e6e:	d9db      	bls.n	8009e28 <_printf_float+0x130>
 8009e70:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8009e74:	d118      	bne.n	8009ea8 <_printf_float+0x1b0>
 8009e76:	2900      	cmp	r1, #0
 8009e78:	6863      	ldr	r3, [r4, #4]
 8009e7a:	dd0b      	ble.n	8009e94 <_printf_float+0x19c>
 8009e7c:	6121      	str	r1, [r4, #16]
 8009e7e:	b913      	cbnz	r3, 8009e86 <_printf_float+0x18e>
 8009e80:	6822      	ldr	r2, [r4, #0]
 8009e82:	07d0      	lsls	r0, r2, #31
 8009e84:	d502      	bpl.n	8009e8c <_printf_float+0x194>
 8009e86:	3301      	adds	r3, #1
 8009e88:	440b      	add	r3, r1
 8009e8a:	6123      	str	r3, [r4, #16]
 8009e8c:	65a1      	str	r1, [r4, #88]	@ 0x58
 8009e8e:	f04f 0900 	mov.w	r9, #0
 8009e92:	e7db      	b.n	8009e4c <_printf_float+0x154>
 8009e94:	b913      	cbnz	r3, 8009e9c <_printf_float+0x1a4>
 8009e96:	6822      	ldr	r2, [r4, #0]
 8009e98:	07d2      	lsls	r2, r2, #31
 8009e9a:	d501      	bpl.n	8009ea0 <_printf_float+0x1a8>
 8009e9c:	3302      	adds	r3, #2
 8009e9e:	e7f4      	b.n	8009e8a <_printf_float+0x192>
 8009ea0:	2301      	movs	r3, #1
 8009ea2:	e7f2      	b.n	8009e8a <_printf_float+0x192>
 8009ea4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8009ea8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009eaa:	4299      	cmp	r1, r3
 8009eac:	db05      	blt.n	8009eba <_printf_float+0x1c2>
 8009eae:	6823      	ldr	r3, [r4, #0]
 8009eb0:	6121      	str	r1, [r4, #16]
 8009eb2:	07d8      	lsls	r0, r3, #31
 8009eb4:	d5ea      	bpl.n	8009e8c <_printf_float+0x194>
 8009eb6:	1c4b      	adds	r3, r1, #1
 8009eb8:	e7e7      	b.n	8009e8a <_printf_float+0x192>
 8009eba:	2900      	cmp	r1, #0
 8009ebc:	bfd4      	ite	le
 8009ebe:	f1c1 0202 	rsble	r2, r1, #2
 8009ec2:	2201      	movgt	r2, #1
 8009ec4:	4413      	add	r3, r2
 8009ec6:	e7e0      	b.n	8009e8a <_printf_float+0x192>
 8009ec8:	6823      	ldr	r3, [r4, #0]
 8009eca:	055a      	lsls	r2, r3, #21
 8009ecc:	d407      	bmi.n	8009ede <_printf_float+0x1e6>
 8009ece:	6923      	ldr	r3, [r4, #16]
 8009ed0:	4642      	mov	r2, r8
 8009ed2:	4631      	mov	r1, r6
 8009ed4:	4628      	mov	r0, r5
 8009ed6:	47b8      	blx	r7
 8009ed8:	3001      	adds	r0, #1
 8009eda:	d12b      	bne.n	8009f34 <_printf_float+0x23c>
 8009edc:	e767      	b.n	8009dae <_printf_float+0xb6>
 8009ede:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009ee2:	f240 80dd 	bls.w	800a0a0 <_printf_float+0x3a8>
 8009ee6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009eea:	2200      	movs	r2, #0
 8009eec:	2300      	movs	r3, #0
 8009eee:	f7f6 fdfb 	bl	8000ae8 <__aeabi_dcmpeq>
 8009ef2:	2800      	cmp	r0, #0
 8009ef4:	d033      	beq.n	8009f5e <_printf_float+0x266>
 8009ef6:	4a37      	ldr	r2, [pc, #220]	@ (8009fd4 <_printf_float+0x2dc>)
 8009ef8:	2301      	movs	r3, #1
 8009efa:	4631      	mov	r1, r6
 8009efc:	4628      	mov	r0, r5
 8009efe:	47b8      	blx	r7
 8009f00:	3001      	adds	r0, #1
 8009f02:	f43f af54 	beq.w	8009dae <_printf_float+0xb6>
 8009f06:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8009f0a:	4543      	cmp	r3, r8
 8009f0c:	db02      	blt.n	8009f14 <_printf_float+0x21c>
 8009f0e:	6823      	ldr	r3, [r4, #0]
 8009f10:	07d8      	lsls	r0, r3, #31
 8009f12:	d50f      	bpl.n	8009f34 <_printf_float+0x23c>
 8009f14:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009f18:	4631      	mov	r1, r6
 8009f1a:	4628      	mov	r0, r5
 8009f1c:	47b8      	blx	r7
 8009f1e:	3001      	adds	r0, #1
 8009f20:	f43f af45 	beq.w	8009dae <_printf_float+0xb6>
 8009f24:	f04f 0900 	mov.w	r9, #0
 8009f28:	f108 38ff 	add.w	r8, r8, #4294967295
 8009f2c:	f104 0a1a 	add.w	sl, r4, #26
 8009f30:	45c8      	cmp	r8, r9
 8009f32:	dc09      	bgt.n	8009f48 <_printf_float+0x250>
 8009f34:	6823      	ldr	r3, [r4, #0]
 8009f36:	079b      	lsls	r3, r3, #30
 8009f38:	f100 8103 	bmi.w	800a142 <_printf_float+0x44a>
 8009f3c:	68e0      	ldr	r0, [r4, #12]
 8009f3e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009f40:	4298      	cmp	r0, r3
 8009f42:	bfb8      	it	lt
 8009f44:	4618      	movlt	r0, r3
 8009f46:	e734      	b.n	8009db2 <_printf_float+0xba>
 8009f48:	2301      	movs	r3, #1
 8009f4a:	4652      	mov	r2, sl
 8009f4c:	4631      	mov	r1, r6
 8009f4e:	4628      	mov	r0, r5
 8009f50:	47b8      	blx	r7
 8009f52:	3001      	adds	r0, #1
 8009f54:	f43f af2b 	beq.w	8009dae <_printf_float+0xb6>
 8009f58:	f109 0901 	add.w	r9, r9, #1
 8009f5c:	e7e8      	b.n	8009f30 <_printf_float+0x238>
 8009f5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	dc39      	bgt.n	8009fd8 <_printf_float+0x2e0>
 8009f64:	4a1b      	ldr	r2, [pc, #108]	@ (8009fd4 <_printf_float+0x2dc>)
 8009f66:	2301      	movs	r3, #1
 8009f68:	4631      	mov	r1, r6
 8009f6a:	4628      	mov	r0, r5
 8009f6c:	47b8      	blx	r7
 8009f6e:	3001      	adds	r0, #1
 8009f70:	f43f af1d 	beq.w	8009dae <_printf_float+0xb6>
 8009f74:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8009f78:	ea59 0303 	orrs.w	r3, r9, r3
 8009f7c:	d102      	bne.n	8009f84 <_printf_float+0x28c>
 8009f7e:	6823      	ldr	r3, [r4, #0]
 8009f80:	07d9      	lsls	r1, r3, #31
 8009f82:	d5d7      	bpl.n	8009f34 <_printf_float+0x23c>
 8009f84:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009f88:	4631      	mov	r1, r6
 8009f8a:	4628      	mov	r0, r5
 8009f8c:	47b8      	blx	r7
 8009f8e:	3001      	adds	r0, #1
 8009f90:	f43f af0d 	beq.w	8009dae <_printf_float+0xb6>
 8009f94:	f04f 0a00 	mov.w	sl, #0
 8009f98:	f104 0b1a 	add.w	fp, r4, #26
 8009f9c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009f9e:	425b      	negs	r3, r3
 8009fa0:	4553      	cmp	r3, sl
 8009fa2:	dc01      	bgt.n	8009fa8 <_printf_float+0x2b0>
 8009fa4:	464b      	mov	r3, r9
 8009fa6:	e793      	b.n	8009ed0 <_printf_float+0x1d8>
 8009fa8:	2301      	movs	r3, #1
 8009faa:	465a      	mov	r2, fp
 8009fac:	4631      	mov	r1, r6
 8009fae:	4628      	mov	r0, r5
 8009fb0:	47b8      	blx	r7
 8009fb2:	3001      	adds	r0, #1
 8009fb4:	f43f aefb 	beq.w	8009dae <_printf_float+0xb6>
 8009fb8:	f10a 0a01 	add.w	sl, sl, #1
 8009fbc:	e7ee      	b.n	8009f9c <_printf_float+0x2a4>
 8009fbe:	bf00      	nop
 8009fc0:	7fefffff 	.word	0x7fefffff
 8009fc4:	0800cc40 	.word	0x0800cc40
 8009fc8:	0800cc3c 	.word	0x0800cc3c
 8009fcc:	0800cc48 	.word	0x0800cc48
 8009fd0:	0800cc44 	.word	0x0800cc44
 8009fd4:	0800cc4c 	.word	0x0800cc4c
 8009fd8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009fda:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8009fde:	4553      	cmp	r3, sl
 8009fe0:	bfa8      	it	ge
 8009fe2:	4653      	movge	r3, sl
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	4699      	mov	r9, r3
 8009fe8:	dc36      	bgt.n	800a058 <_printf_float+0x360>
 8009fea:	f04f 0b00 	mov.w	fp, #0
 8009fee:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009ff2:	f104 021a 	add.w	r2, r4, #26
 8009ff6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009ff8:	9306      	str	r3, [sp, #24]
 8009ffa:	eba3 0309 	sub.w	r3, r3, r9
 8009ffe:	455b      	cmp	r3, fp
 800a000:	dc31      	bgt.n	800a066 <_printf_float+0x36e>
 800a002:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a004:	459a      	cmp	sl, r3
 800a006:	dc3a      	bgt.n	800a07e <_printf_float+0x386>
 800a008:	6823      	ldr	r3, [r4, #0]
 800a00a:	07da      	lsls	r2, r3, #31
 800a00c:	d437      	bmi.n	800a07e <_printf_float+0x386>
 800a00e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a010:	ebaa 0903 	sub.w	r9, sl, r3
 800a014:	9b06      	ldr	r3, [sp, #24]
 800a016:	ebaa 0303 	sub.w	r3, sl, r3
 800a01a:	4599      	cmp	r9, r3
 800a01c:	bfa8      	it	ge
 800a01e:	4699      	movge	r9, r3
 800a020:	f1b9 0f00 	cmp.w	r9, #0
 800a024:	dc33      	bgt.n	800a08e <_printf_float+0x396>
 800a026:	f04f 0800 	mov.w	r8, #0
 800a02a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a02e:	f104 0b1a 	add.w	fp, r4, #26
 800a032:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a034:	ebaa 0303 	sub.w	r3, sl, r3
 800a038:	eba3 0309 	sub.w	r3, r3, r9
 800a03c:	4543      	cmp	r3, r8
 800a03e:	f77f af79 	ble.w	8009f34 <_printf_float+0x23c>
 800a042:	2301      	movs	r3, #1
 800a044:	465a      	mov	r2, fp
 800a046:	4631      	mov	r1, r6
 800a048:	4628      	mov	r0, r5
 800a04a:	47b8      	blx	r7
 800a04c:	3001      	adds	r0, #1
 800a04e:	f43f aeae 	beq.w	8009dae <_printf_float+0xb6>
 800a052:	f108 0801 	add.w	r8, r8, #1
 800a056:	e7ec      	b.n	800a032 <_printf_float+0x33a>
 800a058:	4642      	mov	r2, r8
 800a05a:	4631      	mov	r1, r6
 800a05c:	4628      	mov	r0, r5
 800a05e:	47b8      	blx	r7
 800a060:	3001      	adds	r0, #1
 800a062:	d1c2      	bne.n	8009fea <_printf_float+0x2f2>
 800a064:	e6a3      	b.n	8009dae <_printf_float+0xb6>
 800a066:	2301      	movs	r3, #1
 800a068:	4631      	mov	r1, r6
 800a06a:	4628      	mov	r0, r5
 800a06c:	9206      	str	r2, [sp, #24]
 800a06e:	47b8      	blx	r7
 800a070:	3001      	adds	r0, #1
 800a072:	f43f ae9c 	beq.w	8009dae <_printf_float+0xb6>
 800a076:	9a06      	ldr	r2, [sp, #24]
 800a078:	f10b 0b01 	add.w	fp, fp, #1
 800a07c:	e7bb      	b.n	8009ff6 <_printf_float+0x2fe>
 800a07e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a082:	4631      	mov	r1, r6
 800a084:	4628      	mov	r0, r5
 800a086:	47b8      	blx	r7
 800a088:	3001      	adds	r0, #1
 800a08a:	d1c0      	bne.n	800a00e <_printf_float+0x316>
 800a08c:	e68f      	b.n	8009dae <_printf_float+0xb6>
 800a08e:	9a06      	ldr	r2, [sp, #24]
 800a090:	464b      	mov	r3, r9
 800a092:	4442      	add	r2, r8
 800a094:	4631      	mov	r1, r6
 800a096:	4628      	mov	r0, r5
 800a098:	47b8      	blx	r7
 800a09a:	3001      	adds	r0, #1
 800a09c:	d1c3      	bne.n	800a026 <_printf_float+0x32e>
 800a09e:	e686      	b.n	8009dae <_printf_float+0xb6>
 800a0a0:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800a0a4:	f1ba 0f01 	cmp.w	sl, #1
 800a0a8:	dc01      	bgt.n	800a0ae <_printf_float+0x3b6>
 800a0aa:	07db      	lsls	r3, r3, #31
 800a0ac:	d536      	bpl.n	800a11c <_printf_float+0x424>
 800a0ae:	2301      	movs	r3, #1
 800a0b0:	4642      	mov	r2, r8
 800a0b2:	4631      	mov	r1, r6
 800a0b4:	4628      	mov	r0, r5
 800a0b6:	47b8      	blx	r7
 800a0b8:	3001      	adds	r0, #1
 800a0ba:	f43f ae78 	beq.w	8009dae <_printf_float+0xb6>
 800a0be:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a0c2:	4631      	mov	r1, r6
 800a0c4:	4628      	mov	r0, r5
 800a0c6:	47b8      	blx	r7
 800a0c8:	3001      	adds	r0, #1
 800a0ca:	f43f ae70 	beq.w	8009dae <_printf_float+0xb6>
 800a0ce:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a0d2:	2200      	movs	r2, #0
 800a0d4:	2300      	movs	r3, #0
 800a0d6:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a0da:	f7f6 fd05 	bl	8000ae8 <__aeabi_dcmpeq>
 800a0de:	b9c0      	cbnz	r0, 800a112 <_printf_float+0x41a>
 800a0e0:	4653      	mov	r3, sl
 800a0e2:	f108 0201 	add.w	r2, r8, #1
 800a0e6:	4631      	mov	r1, r6
 800a0e8:	4628      	mov	r0, r5
 800a0ea:	47b8      	blx	r7
 800a0ec:	3001      	adds	r0, #1
 800a0ee:	d10c      	bne.n	800a10a <_printf_float+0x412>
 800a0f0:	e65d      	b.n	8009dae <_printf_float+0xb6>
 800a0f2:	2301      	movs	r3, #1
 800a0f4:	465a      	mov	r2, fp
 800a0f6:	4631      	mov	r1, r6
 800a0f8:	4628      	mov	r0, r5
 800a0fa:	47b8      	blx	r7
 800a0fc:	3001      	adds	r0, #1
 800a0fe:	f43f ae56 	beq.w	8009dae <_printf_float+0xb6>
 800a102:	f108 0801 	add.w	r8, r8, #1
 800a106:	45d0      	cmp	r8, sl
 800a108:	dbf3      	blt.n	800a0f2 <_printf_float+0x3fa>
 800a10a:	464b      	mov	r3, r9
 800a10c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800a110:	e6df      	b.n	8009ed2 <_printf_float+0x1da>
 800a112:	f04f 0800 	mov.w	r8, #0
 800a116:	f104 0b1a 	add.w	fp, r4, #26
 800a11a:	e7f4      	b.n	800a106 <_printf_float+0x40e>
 800a11c:	2301      	movs	r3, #1
 800a11e:	4642      	mov	r2, r8
 800a120:	e7e1      	b.n	800a0e6 <_printf_float+0x3ee>
 800a122:	2301      	movs	r3, #1
 800a124:	464a      	mov	r2, r9
 800a126:	4631      	mov	r1, r6
 800a128:	4628      	mov	r0, r5
 800a12a:	47b8      	blx	r7
 800a12c:	3001      	adds	r0, #1
 800a12e:	f43f ae3e 	beq.w	8009dae <_printf_float+0xb6>
 800a132:	f108 0801 	add.w	r8, r8, #1
 800a136:	68e3      	ldr	r3, [r4, #12]
 800a138:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a13a:	1a5b      	subs	r3, r3, r1
 800a13c:	4543      	cmp	r3, r8
 800a13e:	dcf0      	bgt.n	800a122 <_printf_float+0x42a>
 800a140:	e6fc      	b.n	8009f3c <_printf_float+0x244>
 800a142:	f04f 0800 	mov.w	r8, #0
 800a146:	f104 0919 	add.w	r9, r4, #25
 800a14a:	e7f4      	b.n	800a136 <_printf_float+0x43e>

0800a14c <_printf_common>:
 800a14c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a150:	4616      	mov	r6, r2
 800a152:	4698      	mov	r8, r3
 800a154:	688a      	ldr	r2, [r1, #8]
 800a156:	690b      	ldr	r3, [r1, #16]
 800a158:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a15c:	4293      	cmp	r3, r2
 800a15e:	bfb8      	it	lt
 800a160:	4613      	movlt	r3, r2
 800a162:	6033      	str	r3, [r6, #0]
 800a164:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a168:	4607      	mov	r7, r0
 800a16a:	460c      	mov	r4, r1
 800a16c:	b10a      	cbz	r2, 800a172 <_printf_common+0x26>
 800a16e:	3301      	adds	r3, #1
 800a170:	6033      	str	r3, [r6, #0]
 800a172:	6823      	ldr	r3, [r4, #0]
 800a174:	0699      	lsls	r1, r3, #26
 800a176:	bf42      	ittt	mi
 800a178:	6833      	ldrmi	r3, [r6, #0]
 800a17a:	3302      	addmi	r3, #2
 800a17c:	6033      	strmi	r3, [r6, #0]
 800a17e:	6825      	ldr	r5, [r4, #0]
 800a180:	f015 0506 	ands.w	r5, r5, #6
 800a184:	d106      	bne.n	800a194 <_printf_common+0x48>
 800a186:	f104 0a19 	add.w	sl, r4, #25
 800a18a:	68e3      	ldr	r3, [r4, #12]
 800a18c:	6832      	ldr	r2, [r6, #0]
 800a18e:	1a9b      	subs	r3, r3, r2
 800a190:	42ab      	cmp	r3, r5
 800a192:	dc26      	bgt.n	800a1e2 <_printf_common+0x96>
 800a194:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a198:	6822      	ldr	r2, [r4, #0]
 800a19a:	3b00      	subs	r3, #0
 800a19c:	bf18      	it	ne
 800a19e:	2301      	movne	r3, #1
 800a1a0:	0692      	lsls	r2, r2, #26
 800a1a2:	d42b      	bmi.n	800a1fc <_printf_common+0xb0>
 800a1a4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a1a8:	4641      	mov	r1, r8
 800a1aa:	4638      	mov	r0, r7
 800a1ac:	47c8      	blx	r9
 800a1ae:	3001      	adds	r0, #1
 800a1b0:	d01e      	beq.n	800a1f0 <_printf_common+0xa4>
 800a1b2:	6823      	ldr	r3, [r4, #0]
 800a1b4:	6922      	ldr	r2, [r4, #16]
 800a1b6:	f003 0306 	and.w	r3, r3, #6
 800a1ba:	2b04      	cmp	r3, #4
 800a1bc:	bf02      	ittt	eq
 800a1be:	68e5      	ldreq	r5, [r4, #12]
 800a1c0:	6833      	ldreq	r3, [r6, #0]
 800a1c2:	1aed      	subeq	r5, r5, r3
 800a1c4:	68a3      	ldr	r3, [r4, #8]
 800a1c6:	bf0c      	ite	eq
 800a1c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a1cc:	2500      	movne	r5, #0
 800a1ce:	4293      	cmp	r3, r2
 800a1d0:	bfc4      	itt	gt
 800a1d2:	1a9b      	subgt	r3, r3, r2
 800a1d4:	18ed      	addgt	r5, r5, r3
 800a1d6:	2600      	movs	r6, #0
 800a1d8:	341a      	adds	r4, #26
 800a1da:	42b5      	cmp	r5, r6
 800a1dc:	d11a      	bne.n	800a214 <_printf_common+0xc8>
 800a1de:	2000      	movs	r0, #0
 800a1e0:	e008      	b.n	800a1f4 <_printf_common+0xa8>
 800a1e2:	2301      	movs	r3, #1
 800a1e4:	4652      	mov	r2, sl
 800a1e6:	4641      	mov	r1, r8
 800a1e8:	4638      	mov	r0, r7
 800a1ea:	47c8      	blx	r9
 800a1ec:	3001      	adds	r0, #1
 800a1ee:	d103      	bne.n	800a1f8 <_printf_common+0xac>
 800a1f0:	f04f 30ff 	mov.w	r0, #4294967295
 800a1f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a1f8:	3501      	adds	r5, #1
 800a1fa:	e7c6      	b.n	800a18a <_printf_common+0x3e>
 800a1fc:	18e1      	adds	r1, r4, r3
 800a1fe:	1c5a      	adds	r2, r3, #1
 800a200:	2030      	movs	r0, #48	@ 0x30
 800a202:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a206:	4422      	add	r2, r4
 800a208:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a20c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a210:	3302      	adds	r3, #2
 800a212:	e7c7      	b.n	800a1a4 <_printf_common+0x58>
 800a214:	2301      	movs	r3, #1
 800a216:	4622      	mov	r2, r4
 800a218:	4641      	mov	r1, r8
 800a21a:	4638      	mov	r0, r7
 800a21c:	47c8      	blx	r9
 800a21e:	3001      	adds	r0, #1
 800a220:	d0e6      	beq.n	800a1f0 <_printf_common+0xa4>
 800a222:	3601      	adds	r6, #1
 800a224:	e7d9      	b.n	800a1da <_printf_common+0x8e>
	...

0800a228 <_printf_i>:
 800a228:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a22c:	7e0f      	ldrb	r7, [r1, #24]
 800a22e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a230:	2f78      	cmp	r7, #120	@ 0x78
 800a232:	4691      	mov	r9, r2
 800a234:	4680      	mov	r8, r0
 800a236:	460c      	mov	r4, r1
 800a238:	469a      	mov	sl, r3
 800a23a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a23e:	d807      	bhi.n	800a250 <_printf_i+0x28>
 800a240:	2f62      	cmp	r7, #98	@ 0x62
 800a242:	d80a      	bhi.n	800a25a <_printf_i+0x32>
 800a244:	2f00      	cmp	r7, #0
 800a246:	f000 80d1 	beq.w	800a3ec <_printf_i+0x1c4>
 800a24a:	2f58      	cmp	r7, #88	@ 0x58
 800a24c:	f000 80b8 	beq.w	800a3c0 <_printf_i+0x198>
 800a250:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a254:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a258:	e03a      	b.n	800a2d0 <_printf_i+0xa8>
 800a25a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a25e:	2b15      	cmp	r3, #21
 800a260:	d8f6      	bhi.n	800a250 <_printf_i+0x28>
 800a262:	a101      	add	r1, pc, #4	@ (adr r1, 800a268 <_printf_i+0x40>)
 800a264:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a268:	0800a2c1 	.word	0x0800a2c1
 800a26c:	0800a2d5 	.word	0x0800a2d5
 800a270:	0800a251 	.word	0x0800a251
 800a274:	0800a251 	.word	0x0800a251
 800a278:	0800a251 	.word	0x0800a251
 800a27c:	0800a251 	.word	0x0800a251
 800a280:	0800a2d5 	.word	0x0800a2d5
 800a284:	0800a251 	.word	0x0800a251
 800a288:	0800a251 	.word	0x0800a251
 800a28c:	0800a251 	.word	0x0800a251
 800a290:	0800a251 	.word	0x0800a251
 800a294:	0800a3d3 	.word	0x0800a3d3
 800a298:	0800a2ff 	.word	0x0800a2ff
 800a29c:	0800a38d 	.word	0x0800a38d
 800a2a0:	0800a251 	.word	0x0800a251
 800a2a4:	0800a251 	.word	0x0800a251
 800a2a8:	0800a3f5 	.word	0x0800a3f5
 800a2ac:	0800a251 	.word	0x0800a251
 800a2b0:	0800a2ff 	.word	0x0800a2ff
 800a2b4:	0800a251 	.word	0x0800a251
 800a2b8:	0800a251 	.word	0x0800a251
 800a2bc:	0800a395 	.word	0x0800a395
 800a2c0:	6833      	ldr	r3, [r6, #0]
 800a2c2:	1d1a      	adds	r2, r3, #4
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	6032      	str	r2, [r6, #0]
 800a2c8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a2cc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a2d0:	2301      	movs	r3, #1
 800a2d2:	e09c      	b.n	800a40e <_printf_i+0x1e6>
 800a2d4:	6833      	ldr	r3, [r6, #0]
 800a2d6:	6820      	ldr	r0, [r4, #0]
 800a2d8:	1d19      	adds	r1, r3, #4
 800a2da:	6031      	str	r1, [r6, #0]
 800a2dc:	0606      	lsls	r6, r0, #24
 800a2de:	d501      	bpl.n	800a2e4 <_printf_i+0xbc>
 800a2e0:	681d      	ldr	r5, [r3, #0]
 800a2e2:	e003      	b.n	800a2ec <_printf_i+0xc4>
 800a2e4:	0645      	lsls	r5, r0, #25
 800a2e6:	d5fb      	bpl.n	800a2e0 <_printf_i+0xb8>
 800a2e8:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a2ec:	2d00      	cmp	r5, #0
 800a2ee:	da03      	bge.n	800a2f8 <_printf_i+0xd0>
 800a2f0:	232d      	movs	r3, #45	@ 0x2d
 800a2f2:	426d      	negs	r5, r5
 800a2f4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a2f8:	4858      	ldr	r0, [pc, #352]	@ (800a45c <_printf_i+0x234>)
 800a2fa:	230a      	movs	r3, #10
 800a2fc:	e011      	b.n	800a322 <_printf_i+0xfa>
 800a2fe:	6821      	ldr	r1, [r4, #0]
 800a300:	6833      	ldr	r3, [r6, #0]
 800a302:	0608      	lsls	r0, r1, #24
 800a304:	f853 5b04 	ldr.w	r5, [r3], #4
 800a308:	d402      	bmi.n	800a310 <_printf_i+0xe8>
 800a30a:	0649      	lsls	r1, r1, #25
 800a30c:	bf48      	it	mi
 800a30e:	b2ad      	uxthmi	r5, r5
 800a310:	2f6f      	cmp	r7, #111	@ 0x6f
 800a312:	4852      	ldr	r0, [pc, #328]	@ (800a45c <_printf_i+0x234>)
 800a314:	6033      	str	r3, [r6, #0]
 800a316:	bf14      	ite	ne
 800a318:	230a      	movne	r3, #10
 800a31a:	2308      	moveq	r3, #8
 800a31c:	2100      	movs	r1, #0
 800a31e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a322:	6866      	ldr	r6, [r4, #4]
 800a324:	60a6      	str	r6, [r4, #8]
 800a326:	2e00      	cmp	r6, #0
 800a328:	db05      	blt.n	800a336 <_printf_i+0x10e>
 800a32a:	6821      	ldr	r1, [r4, #0]
 800a32c:	432e      	orrs	r6, r5
 800a32e:	f021 0104 	bic.w	r1, r1, #4
 800a332:	6021      	str	r1, [r4, #0]
 800a334:	d04b      	beq.n	800a3ce <_printf_i+0x1a6>
 800a336:	4616      	mov	r6, r2
 800a338:	fbb5 f1f3 	udiv	r1, r5, r3
 800a33c:	fb03 5711 	mls	r7, r3, r1, r5
 800a340:	5dc7      	ldrb	r7, [r0, r7]
 800a342:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a346:	462f      	mov	r7, r5
 800a348:	42bb      	cmp	r3, r7
 800a34a:	460d      	mov	r5, r1
 800a34c:	d9f4      	bls.n	800a338 <_printf_i+0x110>
 800a34e:	2b08      	cmp	r3, #8
 800a350:	d10b      	bne.n	800a36a <_printf_i+0x142>
 800a352:	6823      	ldr	r3, [r4, #0]
 800a354:	07df      	lsls	r7, r3, #31
 800a356:	d508      	bpl.n	800a36a <_printf_i+0x142>
 800a358:	6923      	ldr	r3, [r4, #16]
 800a35a:	6861      	ldr	r1, [r4, #4]
 800a35c:	4299      	cmp	r1, r3
 800a35e:	bfde      	ittt	le
 800a360:	2330      	movle	r3, #48	@ 0x30
 800a362:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a366:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a36a:	1b92      	subs	r2, r2, r6
 800a36c:	6122      	str	r2, [r4, #16]
 800a36e:	f8cd a000 	str.w	sl, [sp]
 800a372:	464b      	mov	r3, r9
 800a374:	aa03      	add	r2, sp, #12
 800a376:	4621      	mov	r1, r4
 800a378:	4640      	mov	r0, r8
 800a37a:	f7ff fee7 	bl	800a14c <_printf_common>
 800a37e:	3001      	adds	r0, #1
 800a380:	d14a      	bne.n	800a418 <_printf_i+0x1f0>
 800a382:	f04f 30ff 	mov.w	r0, #4294967295
 800a386:	b004      	add	sp, #16
 800a388:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a38c:	6823      	ldr	r3, [r4, #0]
 800a38e:	f043 0320 	orr.w	r3, r3, #32
 800a392:	6023      	str	r3, [r4, #0]
 800a394:	4832      	ldr	r0, [pc, #200]	@ (800a460 <_printf_i+0x238>)
 800a396:	2778      	movs	r7, #120	@ 0x78
 800a398:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a39c:	6823      	ldr	r3, [r4, #0]
 800a39e:	6831      	ldr	r1, [r6, #0]
 800a3a0:	061f      	lsls	r7, r3, #24
 800a3a2:	f851 5b04 	ldr.w	r5, [r1], #4
 800a3a6:	d402      	bmi.n	800a3ae <_printf_i+0x186>
 800a3a8:	065f      	lsls	r7, r3, #25
 800a3aa:	bf48      	it	mi
 800a3ac:	b2ad      	uxthmi	r5, r5
 800a3ae:	6031      	str	r1, [r6, #0]
 800a3b0:	07d9      	lsls	r1, r3, #31
 800a3b2:	bf44      	itt	mi
 800a3b4:	f043 0320 	orrmi.w	r3, r3, #32
 800a3b8:	6023      	strmi	r3, [r4, #0]
 800a3ba:	b11d      	cbz	r5, 800a3c4 <_printf_i+0x19c>
 800a3bc:	2310      	movs	r3, #16
 800a3be:	e7ad      	b.n	800a31c <_printf_i+0xf4>
 800a3c0:	4826      	ldr	r0, [pc, #152]	@ (800a45c <_printf_i+0x234>)
 800a3c2:	e7e9      	b.n	800a398 <_printf_i+0x170>
 800a3c4:	6823      	ldr	r3, [r4, #0]
 800a3c6:	f023 0320 	bic.w	r3, r3, #32
 800a3ca:	6023      	str	r3, [r4, #0]
 800a3cc:	e7f6      	b.n	800a3bc <_printf_i+0x194>
 800a3ce:	4616      	mov	r6, r2
 800a3d0:	e7bd      	b.n	800a34e <_printf_i+0x126>
 800a3d2:	6833      	ldr	r3, [r6, #0]
 800a3d4:	6825      	ldr	r5, [r4, #0]
 800a3d6:	6961      	ldr	r1, [r4, #20]
 800a3d8:	1d18      	adds	r0, r3, #4
 800a3da:	6030      	str	r0, [r6, #0]
 800a3dc:	062e      	lsls	r6, r5, #24
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	d501      	bpl.n	800a3e6 <_printf_i+0x1be>
 800a3e2:	6019      	str	r1, [r3, #0]
 800a3e4:	e002      	b.n	800a3ec <_printf_i+0x1c4>
 800a3e6:	0668      	lsls	r0, r5, #25
 800a3e8:	d5fb      	bpl.n	800a3e2 <_printf_i+0x1ba>
 800a3ea:	8019      	strh	r1, [r3, #0]
 800a3ec:	2300      	movs	r3, #0
 800a3ee:	6123      	str	r3, [r4, #16]
 800a3f0:	4616      	mov	r6, r2
 800a3f2:	e7bc      	b.n	800a36e <_printf_i+0x146>
 800a3f4:	6833      	ldr	r3, [r6, #0]
 800a3f6:	1d1a      	adds	r2, r3, #4
 800a3f8:	6032      	str	r2, [r6, #0]
 800a3fa:	681e      	ldr	r6, [r3, #0]
 800a3fc:	6862      	ldr	r2, [r4, #4]
 800a3fe:	2100      	movs	r1, #0
 800a400:	4630      	mov	r0, r6
 800a402:	f7f5 fef5 	bl	80001f0 <memchr>
 800a406:	b108      	cbz	r0, 800a40c <_printf_i+0x1e4>
 800a408:	1b80      	subs	r0, r0, r6
 800a40a:	6060      	str	r0, [r4, #4]
 800a40c:	6863      	ldr	r3, [r4, #4]
 800a40e:	6123      	str	r3, [r4, #16]
 800a410:	2300      	movs	r3, #0
 800a412:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a416:	e7aa      	b.n	800a36e <_printf_i+0x146>
 800a418:	6923      	ldr	r3, [r4, #16]
 800a41a:	4632      	mov	r2, r6
 800a41c:	4649      	mov	r1, r9
 800a41e:	4640      	mov	r0, r8
 800a420:	47d0      	blx	sl
 800a422:	3001      	adds	r0, #1
 800a424:	d0ad      	beq.n	800a382 <_printf_i+0x15a>
 800a426:	6823      	ldr	r3, [r4, #0]
 800a428:	079b      	lsls	r3, r3, #30
 800a42a:	d413      	bmi.n	800a454 <_printf_i+0x22c>
 800a42c:	68e0      	ldr	r0, [r4, #12]
 800a42e:	9b03      	ldr	r3, [sp, #12]
 800a430:	4298      	cmp	r0, r3
 800a432:	bfb8      	it	lt
 800a434:	4618      	movlt	r0, r3
 800a436:	e7a6      	b.n	800a386 <_printf_i+0x15e>
 800a438:	2301      	movs	r3, #1
 800a43a:	4632      	mov	r2, r6
 800a43c:	4649      	mov	r1, r9
 800a43e:	4640      	mov	r0, r8
 800a440:	47d0      	blx	sl
 800a442:	3001      	adds	r0, #1
 800a444:	d09d      	beq.n	800a382 <_printf_i+0x15a>
 800a446:	3501      	adds	r5, #1
 800a448:	68e3      	ldr	r3, [r4, #12]
 800a44a:	9903      	ldr	r1, [sp, #12]
 800a44c:	1a5b      	subs	r3, r3, r1
 800a44e:	42ab      	cmp	r3, r5
 800a450:	dcf2      	bgt.n	800a438 <_printf_i+0x210>
 800a452:	e7eb      	b.n	800a42c <_printf_i+0x204>
 800a454:	2500      	movs	r5, #0
 800a456:	f104 0619 	add.w	r6, r4, #25
 800a45a:	e7f5      	b.n	800a448 <_printf_i+0x220>
 800a45c:	0800cc4e 	.word	0x0800cc4e
 800a460:	0800cc5f 	.word	0x0800cc5f

0800a464 <std>:
 800a464:	2300      	movs	r3, #0
 800a466:	b510      	push	{r4, lr}
 800a468:	4604      	mov	r4, r0
 800a46a:	e9c0 3300 	strd	r3, r3, [r0]
 800a46e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a472:	6083      	str	r3, [r0, #8]
 800a474:	8181      	strh	r1, [r0, #12]
 800a476:	6643      	str	r3, [r0, #100]	@ 0x64
 800a478:	81c2      	strh	r2, [r0, #14]
 800a47a:	6183      	str	r3, [r0, #24]
 800a47c:	4619      	mov	r1, r3
 800a47e:	2208      	movs	r2, #8
 800a480:	305c      	adds	r0, #92	@ 0x5c
 800a482:	f000 f916 	bl	800a6b2 <memset>
 800a486:	4b0d      	ldr	r3, [pc, #52]	@ (800a4bc <std+0x58>)
 800a488:	6263      	str	r3, [r4, #36]	@ 0x24
 800a48a:	4b0d      	ldr	r3, [pc, #52]	@ (800a4c0 <std+0x5c>)
 800a48c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a48e:	4b0d      	ldr	r3, [pc, #52]	@ (800a4c4 <std+0x60>)
 800a490:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a492:	4b0d      	ldr	r3, [pc, #52]	@ (800a4c8 <std+0x64>)
 800a494:	6323      	str	r3, [r4, #48]	@ 0x30
 800a496:	4b0d      	ldr	r3, [pc, #52]	@ (800a4cc <std+0x68>)
 800a498:	6224      	str	r4, [r4, #32]
 800a49a:	429c      	cmp	r4, r3
 800a49c:	d006      	beq.n	800a4ac <std+0x48>
 800a49e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800a4a2:	4294      	cmp	r4, r2
 800a4a4:	d002      	beq.n	800a4ac <std+0x48>
 800a4a6:	33d0      	adds	r3, #208	@ 0xd0
 800a4a8:	429c      	cmp	r4, r3
 800a4aa:	d105      	bne.n	800a4b8 <std+0x54>
 800a4ac:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800a4b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a4b4:	f000 b97a 	b.w	800a7ac <__retarget_lock_init_recursive>
 800a4b8:	bd10      	pop	{r4, pc}
 800a4ba:	bf00      	nop
 800a4bc:	0800a62d 	.word	0x0800a62d
 800a4c0:	0800a64f 	.word	0x0800a64f
 800a4c4:	0800a687 	.word	0x0800a687
 800a4c8:	0800a6ab 	.word	0x0800a6ab
 800a4cc:	20000eac 	.word	0x20000eac

0800a4d0 <stdio_exit_handler>:
 800a4d0:	4a02      	ldr	r2, [pc, #8]	@ (800a4dc <stdio_exit_handler+0xc>)
 800a4d2:	4903      	ldr	r1, [pc, #12]	@ (800a4e0 <stdio_exit_handler+0x10>)
 800a4d4:	4803      	ldr	r0, [pc, #12]	@ (800a4e4 <stdio_exit_handler+0x14>)
 800a4d6:	f000 b869 	b.w	800a5ac <_fwalk_sglue>
 800a4da:	bf00      	nop
 800a4dc:	20000120 	.word	0x20000120
 800a4e0:	0800c115 	.word	0x0800c115
 800a4e4:	20000130 	.word	0x20000130

0800a4e8 <cleanup_stdio>:
 800a4e8:	6841      	ldr	r1, [r0, #4]
 800a4ea:	4b0c      	ldr	r3, [pc, #48]	@ (800a51c <cleanup_stdio+0x34>)
 800a4ec:	4299      	cmp	r1, r3
 800a4ee:	b510      	push	{r4, lr}
 800a4f0:	4604      	mov	r4, r0
 800a4f2:	d001      	beq.n	800a4f8 <cleanup_stdio+0x10>
 800a4f4:	f001 fe0e 	bl	800c114 <_fflush_r>
 800a4f8:	68a1      	ldr	r1, [r4, #8]
 800a4fa:	4b09      	ldr	r3, [pc, #36]	@ (800a520 <cleanup_stdio+0x38>)
 800a4fc:	4299      	cmp	r1, r3
 800a4fe:	d002      	beq.n	800a506 <cleanup_stdio+0x1e>
 800a500:	4620      	mov	r0, r4
 800a502:	f001 fe07 	bl	800c114 <_fflush_r>
 800a506:	68e1      	ldr	r1, [r4, #12]
 800a508:	4b06      	ldr	r3, [pc, #24]	@ (800a524 <cleanup_stdio+0x3c>)
 800a50a:	4299      	cmp	r1, r3
 800a50c:	d004      	beq.n	800a518 <cleanup_stdio+0x30>
 800a50e:	4620      	mov	r0, r4
 800a510:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a514:	f001 bdfe 	b.w	800c114 <_fflush_r>
 800a518:	bd10      	pop	{r4, pc}
 800a51a:	bf00      	nop
 800a51c:	20000eac 	.word	0x20000eac
 800a520:	20000f14 	.word	0x20000f14
 800a524:	20000f7c 	.word	0x20000f7c

0800a528 <global_stdio_init.part.0>:
 800a528:	b510      	push	{r4, lr}
 800a52a:	4b0b      	ldr	r3, [pc, #44]	@ (800a558 <global_stdio_init.part.0+0x30>)
 800a52c:	4c0b      	ldr	r4, [pc, #44]	@ (800a55c <global_stdio_init.part.0+0x34>)
 800a52e:	4a0c      	ldr	r2, [pc, #48]	@ (800a560 <global_stdio_init.part.0+0x38>)
 800a530:	601a      	str	r2, [r3, #0]
 800a532:	4620      	mov	r0, r4
 800a534:	2200      	movs	r2, #0
 800a536:	2104      	movs	r1, #4
 800a538:	f7ff ff94 	bl	800a464 <std>
 800a53c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800a540:	2201      	movs	r2, #1
 800a542:	2109      	movs	r1, #9
 800a544:	f7ff ff8e 	bl	800a464 <std>
 800a548:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800a54c:	2202      	movs	r2, #2
 800a54e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a552:	2112      	movs	r1, #18
 800a554:	f7ff bf86 	b.w	800a464 <std>
 800a558:	20000fe4 	.word	0x20000fe4
 800a55c:	20000eac 	.word	0x20000eac
 800a560:	0800a4d1 	.word	0x0800a4d1

0800a564 <__sfp_lock_acquire>:
 800a564:	4801      	ldr	r0, [pc, #4]	@ (800a56c <__sfp_lock_acquire+0x8>)
 800a566:	f000 b922 	b.w	800a7ae <__retarget_lock_acquire_recursive>
 800a56a:	bf00      	nop
 800a56c:	20000fed 	.word	0x20000fed

0800a570 <__sfp_lock_release>:
 800a570:	4801      	ldr	r0, [pc, #4]	@ (800a578 <__sfp_lock_release+0x8>)
 800a572:	f000 b91d 	b.w	800a7b0 <__retarget_lock_release_recursive>
 800a576:	bf00      	nop
 800a578:	20000fed 	.word	0x20000fed

0800a57c <__sinit>:
 800a57c:	b510      	push	{r4, lr}
 800a57e:	4604      	mov	r4, r0
 800a580:	f7ff fff0 	bl	800a564 <__sfp_lock_acquire>
 800a584:	6a23      	ldr	r3, [r4, #32]
 800a586:	b11b      	cbz	r3, 800a590 <__sinit+0x14>
 800a588:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a58c:	f7ff bff0 	b.w	800a570 <__sfp_lock_release>
 800a590:	4b04      	ldr	r3, [pc, #16]	@ (800a5a4 <__sinit+0x28>)
 800a592:	6223      	str	r3, [r4, #32]
 800a594:	4b04      	ldr	r3, [pc, #16]	@ (800a5a8 <__sinit+0x2c>)
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d1f5      	bne.n	800a588 <__sinit+0xc>
 800a59c:	f7ff ffc4 	bl	800a528 <global_stdio_init.part.0>
 800a5a0:	e7f2      	b.n	800a588 <__sinit+0xc>
 800a5a2:	bf00      	nop
 800a5a4:	0800a4e9 	.word	0x0800a4e9
 800a5a8:	20000fe4 	.word	0x20000fe4

0800a5ac <_fwalk_sglue>:
 800a5ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a5b0:	4607      	mov	r7, r0
 800a5b2:	4688      	mov	r8, r1
 800a5b4:	4614      	mov	r4, r2
 800a5b6:	2600      	movs	r6, #0
 800a5b8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a5bc:	f1b9 0901 	subs.w	r9, r9, #1
 800a5c0:	d505      	bpl.n	800a5ce <_fwalk_sglue+0x22>
 800a5c2:	6824      	ldr	r4, [r4, #0]
 800a5c4:	2c00      	cmp	r4, #0
 800a5c6:	d1f7      	bne.n	800a5b8 <_fwalk_sglue+0xc>
 800a5c8:	4630      	mov	r0, r6
 800a5ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a5ce:	89ab      	ldrh	r3, [r5, #12]
 800a5d0:	2b01      	cmp	r3, #1
 800a5d2:	d907      	bls.n	800a5e4 <_fwalk_sglue+0x38>
 800a5d4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a5d8:	3301      	adds	r3, #1
 800a5da:	d003      	beq.n	800a5e4 <_fwalk_sglue+0x38>
 800a5dc:	4629      	mov	r1, r5
 800a5de:	4638      	mov	r0, r7
 800a5e0:	47c0      	blx	r8
 800a5e2:	4306      	orrs	r6, r0
 800a5e4:	3568      	adds	r5, #104	@ 0x68
 800a5e6:	e7e9      	b.n	800a5bc <_fwalk_sglue+0x10>

0800a5e8 <siprintf>:
 800a5e8:	b40e      	push	{r1, r2, r3}
 800a5ea:	b510      	push	{r4, lr}
 800a5ec:	b09d      	sub	sp, #116	@ 0x74
 800a5ee:	ab1f      	add	r3, sp, #124	@ 0x7c
 800a5f0:	9002      	str	r0, [sp, #8]
 800a5f2:	9006      	str	r0, [sp, #24]
 800a5f4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800a5f8:	480a      	ldr	r0, [pc, #40]	@ (800a624 <siprintf+0x3c>)
 800a5fa:	9107      	str	r1, [sp, #28]
 800a5fc:	9104      	str	r1, [sp, #16]
 800a5fe:	490a      	ldr	r1, [pc, #40]	@ (800a628 <siprintf+0x40>)
 800a600:	f853 2b04 	ldr.w	r2, [r3], #4
 800a604:	9105      	str	r1, [sp, #20]
 800a606:	2400      	movs	r4, #0
 800a608:	a902      	add	r1, sp, #8
 800a60a:	6800      	ldr	r0, [r0, #0]
 800a60c:	9301      	str	r3, [sp, #4]
 800a60e:	941b      	str	r4, [sp, #108]	@ 0x6c
 800a610:	f001 fc00 	bl	800be14 <_svfiprintf_r>
 800a614:	9b02      	ldr	r3, [sp, #8]
 800a616:	701c      	strb	r4, [r3, #0]
 800a618:	b01d      	add	sp, #116	@ 0x74
 800a61a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a61e:	b003      	add	sp, #12
 800a620:	4770      	bx	lr
 800a622:	bf00      	nop
 800a624:	2000012c 	.word	0x2000012c
 800a628:	ffff0208 	.word	0xffff0208

0800a62c <__sread>:
 800a62c:	b510      	push	{r4, lr}
 800a62e:	460c      	mov	r4, r1
 800a630:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a634:	f000 f86c 	bl	800a710 <_read_r>
 800a638:	2800      	cmp	r0, #0
 800a63a:	bfab      	itete	ge
 800a63c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800a63e:	89a3      	ldrhlt	r3, [r4, #12]
 800a640:	181b      	addge	r3, r3, r0
 800a642:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800a646:	bfac      	ite	ge
 800a648:	6563      	strge	r3, [r4, #84]	@ 0x54
 800a64a:	81a3      	strhlt	r3, [r4, #12]
 800a64c:	bd10      	pop	{r4, pc}

0800a64e <__swrite>:
 800a64e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a652:	461f      	mov	r7, r3
 800a654:	898b      	ldrh	r3, [r1, #12]
 800a656:	05db      	lsls	r3, r3, #23
 800a658:	4605      	mov	r5, r0
 800a65a:	460c      	mov	r4, r1
 800a65c:	4616      	mov	r6, r2
 800a65e:	d505      	bpl.n	800a66c <__swrite+0x1e>
 800a660:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a664:	2302      	movs	r3, #2
 800a666:	2200      	movs	r2, #0
 800a668:	f000 f840 	bl	800a6ec <_lseek_r>
 800a66c:	89a3      	ldrh	r3, [r4, #12]
 800a66e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a672:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a676:	81a3      	strh	r3, [r4, #12]
 800a678:	4632      	mov	r2, r6
 800a67a:	463b      	mov	r3, r7
 800a67c:	4628      	mov	r0, r5
 800a67e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a682:	f000 b857 	b.w	800a734 <_write_r>

0800a686 <__sseek>:
 800a686:	b510      	push	{r4, lr}
 800a688:	460c      	mov	r4, r1
 800a68a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a68e:	f000 f82d 	bl	800a6ec <_lseek_r>
 800a692:	1c43      	adds	r3, r0, #1
 800a694:	89a3      	ldrh	r3, [r4, #12]
 800a696:	bf15      	itete	ne
 800a698:	6560      	strne	r0, [r4, #84]	@ 0x54
 800a69a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800a69e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800a6a2:	81a3      	strheq	r3, [r4, #12]
 800a6a4:	bf18      	it	ne
 800a6a6:	81a3      	strhne	r3, [r4, #12]
 800a6a8:	bd10      	pop	{r4, pc}

0800a6aa <__sclose>:
 800a6aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a6ae:	f000 b80d 	b.w	800a6cc <_close_r>

0800a6b2 <memset>:
 800a6b2:	4402      	add	r2, r0
 800a6b4:	4603      	mov	r3, r0
 800a6b6:	4293      	cmp	r3, r2
 800a6b8:	d100      	bne.n	800a6bc <memset+0xa>
 800a6ba:	4770      	bx	lr
 800a6bc:	f803 1b01 	strb.w	r1, [r3], #1
 800a6c0:	e7f9      	b.n	800a6b6 <memset+0x4>
	...

0800a6c4 <_localeconv_r>:
 800a6c4:	4800      	ldr	r0, [pc, #0]	@ (800a6c8 <_localeconv_r+0x4>)
 800a6c6:	4770      	bx	lr
 800a6c8:	2000026c 	.word	0x2000026c

0800a6cc <_close_r>:
 800a6cc:	b538      	push	{r3, r4, r5, lr}
 800a6ce:	4d06      	ldr	r5, [pc, #24]	@ (800a6e8 <_close_r+0x1c>)
 800a6d0:	2300      	movs	r3, #0
 800a6d2:	4604      	mov	r4, r0
 800a6d4:	4608      	mov	r0, r1
 800a6d6:	602b      	str	r3, [r5, #0]
 800a6d8:	f7f7 fdf0 	bl	80022bc <_close>
 800a6dc:	1c43      	adds	r3, r0, #1
 800a6de:	d102      	bne.n	800a6e6 <_close_r+0x1a>
 800a6e0:	682b      	ldr	r3, [r5, #0]
 800a6e2:	b103      	cbz	r3, 800a6e6 <_close_r+0x1a>
 800a6e4:	6023      	str	r3, [r4, #0]
 800a6e6:	bd38      	pop	{r3, r4, r5, pc}
 800a6e8:	20000fe8 	.word	0x20000fe8

0800a6ec <_lseek_r>:
 800a6ec:	b538      	push	{r3, r4, r5, lr}
 800a6ee:	4d07      	ldr	r5, [pc, #28]	@ (800a70c <_lseek_r+0x20>)
 800a6f0:	4604      	mov	r4, r0
 800a6f2:	4608      	mov	r0, r1
 800a6f4:	4611      	mov	r1, r2
 800a6f6:	2200      	movs	r2, #0
 800a6f8:	602a      	str	r2, [r5, #0]
 800a6fa:	461a      	mov	r2, r3
 800a6fc:	f7f7 fe05 	bl	800230a <_lseek>
 800a700:	1c43      	adds	r3, r0, #1
 800a702:	d102      	bne.n	800a70a <_lseek_r+0x1e>
 800a704:	682b      	ldr	r3, [r5, #0]
 800a706:	b103      	cbz	r3, 800a70a <_lseek_r+0x1e>
 800a708:	6023      	str	r3, [r4, #0]
 800a70a:	bd38      	pop	{r3, r4, r5, pc}
 800a70c:	20000fe8 	.word	0x20000fe8

0800a710 <_read_r>:
 800a710:	b538      	push	{r3, r4, r5, lr}
 800a712:	4d07      	ldr	r5, [pc, #28]	@ (800a730 <_read_r+0x20>)
 800a714:	4604      	mov	r4, r0
 800a716:	4608      	mov	r0, r1
 800a718:	4611      	mov	r1, r2
 800a71a:	2200      	movs	r2, #0
 800a71c:	602a      	str	r2, [r5, #0]
 800a71e:	461a      	mov	r2, r3
 800a720:	f7f7 fd93 	bl	800224a <_read>
 800a724:	1c43      	adds	r3, r0, #1
 800a726:	d102      	bne.n	800a72e <_read_r+0x1e>
 800a728:	682b      	ldr	r3, [r5, #0]
 800a72a:	b103      	cbz	r3, 800a72e <_read_r+0x1e>
 800a72c:	6023      	str	r3, [r4, #0]
 800a72e:	bd38      	pop	{r3, r4, r5, pc}
 800a730:	20000fe8 	.word	0x20000fe8

0800a734 <_write_r>:
 800a734:	b538      	push	{r3, r4, r5, lr}
 800a736:	4d07      	ldr	r5, [pc, #28]	@ (800a754 <_write_r+0x20>)
 800a738:	4604      	mov	r4, r0
 800a73a:	4608      	mov	r0, r1
 800a73c:	4611      	mov	r1, r2
 800a73e:	2200      	movs	r2, #0
 800a740:	602a      	str	r2, [r5, #0]
 800a742:	461a      	mov	r2, r3
 800a744:	f7f7 fd9e 	bl	8002284 <_write>
 800a748:	1c43      	adds	r3, r0, #1
 800a74a:	d102      	bne.n	800a752 <_write_r+0x1e>
 800a74c:	682b      	ldr	r3, [r5, #0]
 800a74e:	b103      	cbz	r3, 800a752 <_write_r+0x1e>
 800a750:	6023      	str	r3, [r4, #0]
 800a752:	bd38      	pop	{r3, r4, r5, pc}
 800a754:	20000fe8 	.word	0x20000fe8

0800a758 <__errno>:
 800a758:	4b01      	ldr	r3, [pc, #4]	@ (800a760 <__errno+0x8>)
 800a75a:	6818      	ldr	r0, [r3, #0]
 800a75c:	4770      	bx	lr
 800a75e:	bf00      	nop
 800a760:	2000012c 	.word	0x2000012c

0800a764 <__libc_init_array>:
 800a764:	b570      	push	{r4, r5, r6, lr}
 800a766:	4d0d      	ldr	r5, [pc, #52]	@ (800a79c <__libc_init_array+0x38>)
 800a768:	4c0d      	ldr	r4, [pc, #52]	@ (800a7a0 <__libc_init_array+0x3c>)
 800a76a:	1b64      	subs	r4, r4, r5
 800a76c:	10a4      	asrs	r4, r4, #2
 800a76e:	2600      	movs	r6, #0
 800a770:	42a6      	cmp	r6, r4
 800a772:	d109      	bne.n	800a788 <__libc_init_array+0x24>
 800a774:	4d0b      	ldr	r5, [pc, #44]	@ (800a7a4 <__libc_init_array+0x40>)
 800a776:	4c0c      	ldr	r4, [pc, #48]	@ (800a7a8 <__libc_init_array+0x44>)
 800a778:	f002 f86a 	bl	800c850 <_init>
 800a77c:	1b64      	subs	r4, r4, r5
 800a77e:	10a4      	asrs	r4, r4, #2
 800a780:	2600      	movs	r6, #0
 800a782:	42a6      	cmp	r6, r4
 800a784:	d105      	bne.n	800a792 <__libc_init_array+0x2e>
 800a786:	bd70      	pop	{r4, r5, r6, pc}
 800a788:	f855 3b04 	ldr.w	r3, [r5], #4
 800a78c:	4798      	blx	r3
 800a78e:	3601      	adds	r6, #1
 800a790:	e7ee      	b.n	800a770 <__libc_init_array+0xc>
 800a792:	f855 3b04 	ldr.w	r3, [r5], #4
 800a796:	4798      	blx	r3
 800a798:	3601      	adds	r6, #1
 800a79a:	e7f2      	b.n	800a782 <__libc_init_array+0x1e>
 800a79c:	0800cfbc 	.word	0x0800cfbc
 800a7a0:	0800cfbc 	.word	0x0800cfbc
 800a7a4:	0800cfbc 	.word	0x0800cfbc
 800a7a8:	0800cfc0 	.word	0x0800cfc0

0800a7ac <__retarget_lock_init_recursive>:
 800a7ac:	4770      	bx	lr

0800a7ae <__retarget_lock_acquire_recursive>:
 800a7ae:	4770      	bx	lr

0800a7b0 <__retarget_lock_release_recursive>:
 800a7b0:	4770      	bx	lr

0800a7b2 <quorem>:
 800a7b2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7b6:	6903      	ldr	r3, [r0, #16]
 800a7b8:	690c      	ldr	r4, [r1, #16]
 800a7ba:	42a3      	cmp	r3, r4
 800a7bc:	4607      	mov	r7, r0
 800a7be:	db7e      	blt.n	800a8be <quorem+0x10c>
 800a7c0:	3c01      	subs	r4, #1
 800a7c2:	f101 0814 	add.w	r8, r1, #20
 800a7c6:	00a3      	lsls	r3, r4, #2
 800a7c8:	f100 0514 	add.w	r5, r0, #20
 800a7cc:	9300      	str	r3, [sp, #0]
 800a7ce:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a7d2:	9301      	str	r3, [sp, #4]
 800a7d4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a7d8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a7dc:	3301      	adds	r3, #1
 800a7de:	429a      	cmp	r2, r3
 800a7e0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a7e4:	fbb2 f6f3 	udiv	r6, r2, r3
 800a7e8:	d32e      	bcc.n	800a848 <quorem+0x96>
 800a7ea:	f04f 0a00 	mov.w	sl, #0
 800a7ee:	46c4      	mov	ip, r8
 800a7f0:	46ae      	mov	lr, r5
 800a7f2:	46d3      	mov	fp, sl
 800a7f4:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a7f8:	b298      	uxth	r0, r3
 800a7fa:	fb06 a000 	mla	r0, r6, r0, sl
 800a7fe:	0c02      	lsrs	r2, r0, #16
 800a800:	0c1b      	lsrs	r3, r3, #16
 800a802:	fb06 2303 	mla	r3, r6, r3, r2
 800a806:	f8de 2000 	ldr.w	r2, [lr]
 800a80a:	b280      	uxth	r0, r0
 800a80c:	b292      	uxth	r2, r2
 800a80e:	1a12      	subs	r2, r2, r0
 800a810:	445a      	add	r2, fp
 800a812:	f8de 0000 	ldr.w	r0, [lr]
 800a816:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a81a:	b29b      	uxth	r3, r3
 800a81c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800a820:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800a824:	b292      	uxth	r2, r2
 800a826:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800a82a:	45e1      	cmp	r9, ip
 800a82c:	f84e 2b04 	str.w	r2, [lr], #4
 800a830:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800a834:	d2de      	bcs.n	800a7f4 <quorem+0x42>
 800a836:	9b00      	ldr	r3, [sp, #0]
 800a838:	58eb      	ldr	r3, [r5, r3]
 800a83a:	b92b      	cbnz	r3, 800a848 <quorem+0x96>
 800a83c:	9b01      	ldr	r3, [sp, #4]
 800a83e:	3b04      	subs	r3, #4
 800a840:	429d      	cmp	r5, r3
 800a842:	461a      	mov	r2, r3
 800a844:	d32f      	bcc.n	800a8a6 <quorem+0xf4>
 800a846:	613c      	str	r4, [r7, #16]
 800a848:	4638      	mov	r0, r7
 800a84a:	f001 f97f 	bl	800bb4c <__mcmp>
 800a84e:	2800      	cmp	r0, #0
 800a850:	db25      	blt.n	800a89e <quorem+0xec>
 800a852:	4629      	mov	r1, r5
 800a854:	2000      	movs	r0, #0
 800a856:	f858 2b04 	ldr.w	r2, [r8], #4
 800a85a:	f8d1 c000 	ldr.w	ip, [r1]
 800a85e:	fa1f fe82 	uxth.w	lr, r2
 800a862:	fa1f f38c 	uxth.w	r3, ip
 800a866:	eba3 030e 	sub.w	r3, r3, lr
 800a86a:	4403      	add	r3, r0
 800a86c:	0c12      	lsrs	r2, r2, #16
 800a86e:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800a872:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800a876:	b29b      	uxth	r3, r3
 800a878:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a87c:	45c1      	cmp	r9, r8
 800a87e:	f841 3b04 	str.w	r3, [r1], #4
 800a882:	ea4f 4022 	mov.w	r0, r2, asr #16
 800a886:	d2e6      	bcs.n	800a856 <quorem+0xa4>
 800a888:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a88c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a890:	b922      	cbnz	r2, 800a89c <quorem+0xea>
 800a892:	3b04      	subs	r3, #4
 800a894:	429d      	cmp	r5, r3
 800a896:	461a      	mov	r2, r3
 800a898:	d30b      	bcc.n	800a8b2 <quorem+0x100>
 800a89a:	613c      	str	r4, [r7, #16]
 800a89c:	3601      	adds	r6, #1
 800a89e:	4630      	mov	r0, r6
 800a8a0:	b003      	add	sp, #12
 800a8a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a8a6:	6812      	ldr	r2, [r2, #0]
 800a8a8:	3b04      	subs	r3, #4
 800a8aa:	2a00      	cmp	r2, #0
 800a8ac:	d1cb      	bne.n	800a846 <quorem+0x94>
 800a8ae:	3c01      	subs	r4, #1
 800a8b0:	e7c6      	b.n	800a840 <quorem+0x8e>
 800a8b2:	6812      	ldr	r2, [r2, #0]
 800a8b4:	3b04      	subs	r3, #4
 800a8b6:	2a00      	cmp	r2, #0
 800a8b8:	d1ef      	bne.n	800a89a <quorem+0xe8>
 800a8ba:	3c01      	subs	r4, #1
 800a8bc:	e7ea      	b.n	800a894 <quorem+0xe2>
 800a8be:	2000      	movs	r0, #0
 800a8c0:	e7ee      	b.n	800a8a0 <quorem+0xee>
 800a8c2:	0000      	movs	r0, r0
 800a8c4:	0000      	movs	r0, r0
	...

0800a8c8 <_dtoa_r>:
 800a8c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8cc:	69c7      	ldr	r7, [r0, #28]
 800a8ce:	b097      	sub	sp, #92	@ 0x5c
 800a8d0:	ed8d 0b04 	vstr	d0, [sp, #16]
 800a8d4:	ec55 4b10 	vmov	r4, r5, d0
 800a8d8:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800a8da:	9107      	str	r1, [sp, #28]
 800a8dc:	4681      	mov	r9, r0
 800a8de:	920c      	str	r2, [sp, #48]	@ 0x30
 800a8e0:	9311      	str	r3, [sp, #68]	@ 0x44
 800a8e2:	b97f      	cbnz	r7, 800a904 <_dtoa_r+0x3c>
 800a8e4:	2010      	movs	r0, #16
 800a8e6:	f000 fe09 	bl	800b4fc <malloc>
 800a8ea:	4602      	mov	r2, r0
 800a8ec:	f8c9 001c 	str.w	r0, [r9, #28]
 800a8f0:	b920      	cbnz	r0, 800a8fc <_dtoa_r+0x34>
 800a8f2:	4ba9      	ldr	r3, [pc, #676]	@ (800ab98 <_dtoa_r+0x2d0>)
 800a8f4:	21ef      	movs	r1, #239	@ 0xef
 800a8f6:	48a9      	ldr	r0, [pc, #676]	@ (800ab9c <_dtoa_r+0x2d4>)
 800a8f8:	f001 fc6c 	bl	800c1d4 <__assert_func>
 800a8fc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800a900:	6007      	str	r7, [r0, #0]
 800a902:	60c7      	str	r7, [r0, #12]
 800a904:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800a908:	6819      	ldr	r1, [r3, #0]
 800a90a:	b159      	cbz	r1, 800a924 <_dtoa_r+0x5c>
 800a90c:	685a      	ldr	r2, [r3, #4]
 800a90e:	604a      	str	r2, [r1, #4]
 800a910:	2301      	movs	r3, #1
 800a912:	4093      	lsls	r3, r2
 800a914:	608b      	str	r3, [r1, #8]
 800a916:	4648      	mov	r0, r9
 800a918:	f000 fee6 	bl	800b6e8 <_Bfree>
 800a91c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800a920:	2200      	movs	r2, #0
 800a922:	601a      	str	r2, [r3, #0]
 800a924:	1e2b      	subs	r3, r5, #0
 800a926:	bfb9      	ittee	lt
 800a928:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800a92c:	9305      	strlt	r3, [sp, #20]
 800a92e:	2300      	movge	r3, #0
 800a930:	6033      	strge	r3, [r6, #0]
 800a932:	9f05      	ldr	r7, [sp, #20]
 800a934:	4b9a      	ldr	r3, [pc, #616]	@ (800aba0 <_dtoa_r+0x2d8>)
 800a936:	bfbc      	itt	lt
 800a938:	2201      	movlt	r2, #1
 800a93a:	6032      	strlt	r2, [r6, #0]
 800a93c:	43bb      	bics	r3, r7
 800a93e:	d112      	bne.n	800a966 <_dtoa_r+0x9e>
 800a940:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800a942:	f242 730f 	movw	r3, #9999	@ 0x270f
 800a946:	6013      	str	r3, [r2, #0]
 800a948:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a94c:	4323      	orrs	r3, r4
 800a94e:	f000 855a 	beq.w	800b406 <_dtoa_r+0xb3e>
 800a952:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800a954:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800abb4 <_dtoa_r+0x2ec>
 800a958:	2b00      	cmp	r3, #0
 800a95a:	f000 855c 	beq.w	800b416 <_dtoa_r+0xb4e>
 800a95e:	f10a 0303 	add.w	r3, sl, #3
 800a962:	f000 bd56 	b.w	800b412 <_dtoa_r+0xb4a>
 800a966:	ed9d 7b04 	vldr	d7, [sp, #16]
 800a96a:	2200      	movs	r2, #0
 800a96c:	ec51 0b17 	vmov	r0, r1, d7
 800a970:	2300      	movs	r3, #0
 800a972:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800a976:	f7f6 f8b7 	bl	8000ae8 <__aeabi_dcmpeq>
 800a97a:	4680      	mov	r8, r0
 800a97c:	b158      	cbz	r0, 800a996 <_dtoa_r+0xce>
 800a97e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800a980:	2301      	movs	r3, #1
 800a982:	6013      	str	r3, [r2, #0]
 800a984:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800a986:	b113      	cbz	r3, 800a98e <_dtoa_r+0xc6>
 800a988:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800a98a:	4b86      	ldr	r3, [pc, #536]	@ (800aba4 <_dtoa_r+0x2dc>)
 800a98c:	6013      	str	r3, [r2, #0]
 800a98e:	f8df a228 	ldr.w	sl, [pc, #552]	@ 800abb8 <_dtoa_r+0x2f0>
 800a992:	f000 bd40 	b.w	800b416 <_dtoa_r+0xb4e>
 800a996:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800a99a:	aa14      	add	r2, sp, #80	@ 0x50
 800a99c:	a915      	add	r1, sp, #84	@ 0x54
 800a99e:	4648      	mov	r0, r9
 800a9a0:	f001 f984 	bl	800bcac <__d2b>
 800a9a4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800a9a8:	9002      	str	r0, [sp, #8]
 800a9aa:	2e00      	cmp	r6, #0
 800a9ac:	d078      	beq.n	800aaa0 <_dtoa_r+0x1d8>
 800a9ae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a9b0:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800a9b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a9b8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800a9bc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800a9c0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800a9c4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800a9c8:	4619      	mov	r1, r3
 800a9ca:	2200      	movs	r2, #0
 800a9cc:	4b76      	ldr	r3, [pc, #472]	@ (800aba8 <_dtoa_r+0x2e0>)
 800a9ce:	f7f5 fc6b 	bl	80002a8 <__aeabi_dsub>
 800a9d2:	a36b      	add	r3, pc, #428	@ (adr r3, 800ab80 <_dtoa_r+0x2b8>)
 800a9d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9d8:	f7f5 fe1e 	bl	8000618 <__aeabi_dmul>
 800a9dc:	a36a      	add	r3, pc, #424	@ (adr r3, 800ab88 <_dtoa_r+0x2c0>)
 800a9de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9e2:	f7f5 fc63 	bl	80002ac <__adddf3>
 800a9e6:	4604      	mov	r4, r0
 800a9e8:	4630      	mov	r0, r6
 800a9ea:	460d      	mov	r5, r1
 800a9ec:	f7f5 fdaa 	bl	8000544 <__aeabi_i2d>
 800a9f0:	a367      	add	r3, pc, #412	@ (adr r3, 800ab90 <_dtoa_r+0x2c8>)
 800a9f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9f6:	f7f5 fe0f 	bl	8000618 <__aeabi_dmul>
 800a9fa:	4602      	mov	r2, r0
 800a9fc:	460b      	mov	r3, r1
 800a9fe:	4620      	mov	r0, r4
 800aa00:	4629      	mov	r1, r5
 800aa02:	f7f5 fc53 	bl	80002ac <__adddf3>
 800aa06:	4604      	mov	r4, r0
 800aa08:	460d      	mov	r5, r1
 800aa0a:	f7f6 f8b5 	bl	8000b78 <__aeabi_d2iz>
 800aa0e:	2200      	movs	r2, #0
 800aa10:	4607      	mov	r7, r0
 800aa12:	2300      	movs	r3, #0
 800aa14:	4620      	mov	r0, r4
 800aa16:	4629      	mov	r1, r5
 800aa18:	f7f6 f870 	bl	8000afc <__aeabi_dcmplt>
 800aa1c:	b140      	cbz	r0, 800aa30 <_dtoa_r+0x168>
 800aa1e:	4638      	mov	r0, r7
 800aa20:	f7f5 fd90 	bl	8000544 <__aeabi_i2d>
 800aa24:	4622      	mov	r2, r4
 800aa26:	462b      	mov	r3, r5
 800aa28:	f7f6 f85e 	bl	8000ae8 <__aeabi_dcmpeq>
 800aa2c:	b900      	cbnz	r0, 800aa30 <_dtoa_r+0x168>
 800aa2e:	3f01      	subs	r7, #1
 800aa30:	2f16      	cmp	r7, #22
 800aa32:	d852      	bhi.n	800aada <_dtoa_r+0x212>
 800aa34:	4b5d      	ldr	r3, [pc, #372]	@ (800abac <_dtoa_r+0x2e4>)
 800aa36:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800aa3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa3e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800aa42:	f7f6 f85b 	bl	8000afc <__aeabi_dcmplt>
 800aa46:	2800      	cmp	r0, #0
 800aa48:	d049      	beq.n	800aade <_dtoa_r+0x216>
 800aa4a:	3f01      	subs	r7, #1
 800aa4c:	2300      	movs	r3, #0
 800aa4e:	9310      	str	r3, [sp, #64]	@ 0x40
 800aa50:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800aa52:	1b9b      	subs	r3, r3, r6
 800aa54:	1e5a      	subs	r2, r3, #1
 800aa56:	bf45      	ittet	mi
 800aa58:	f1c3 0301 	rsbmi	r3, r3, #1
 800aa5c:	9300      	strmi	r3, [sp, #0]
 800aa5e:	2300      	movpl	r3, #0
 800aa60:	2300      	movmi	r3, #0
 800aa62:	9206      	str	r2, [sp, #24]
 800aa64:	bf54      	ite	pl
 800aa66:	9300      	strpl	r3, [sp, #0]
 800aa68:	9306      	strmi	r3, [sp, #24]
 800aa6a:	2f00      	cmp	r7, #0
 800aa6c:	db39      	blt.n	800aae2 <_dtoa_r+0x21a>
 800aa6e:	9b06      	ldr	r3, [sp, #24]
 800aa70:	970d      	str	r7, [sp, #52]	@ 0x34
 800aa72:	443b      	add	r3, r7
 800aa74:	9306      	str	r3, [sp, #24]
 800aa76:	2300      	movs	r3, #0
 800aa78:	9308      	str	r3, [sp, #32]
 800aa7a:	9b07      	ldr	r3, [sp, #28]
 800aa7c:	2b09      	cmp	r3, #9
 800aa7e:	d863      	bhi.n	800ab48 <_dtoa_r+0x280>
 800aa80:	2b05      	cmp	r3, #5
 800aa82:	bfc4      	itt	gt
 800aa84:	3b04      	subgt	r3, #4
 800aa86:	9307      	strgt	r3, [sp, #28]
 800aa88:	9b07      	ldr	r3, [sp, #28]
 800aa8a:	f1a3 0302 	sub.w	r3, r3, #2
 800aa8e:	bfcc      	ite	gt
 800aa90:	2400      	movgt	r4, #0
 800aa92:	2401      	movle	r4, #1
 800aa94:	2b03      	cmp	r3, #3
 800aa96:	d863      	bhi.n	800ab60 <_dtoa_r+0x298>
 800aa98:	e8df f003 	tbb	[pc, r3]
 800aa9c:	2b375452 	.word	0x2b375452
 800aaa0:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800aaa4:	441e      	add	r6, r3
 800aaa6:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800aaaa:	2b20      	cmp	r3, #32
 800aaac:	bfc1      	itttt	gt
 800aaae:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800aab2:	409f      	lslgt	r7, r3
 800aab4:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800aab8:	fa24 f303 	lsrgt.w	r3, r4, r3
 800aabc:	bfd6      	itet	le
 800aabe:	f1c3 0320 	rsble	r3, r3, #32
 800aac2:	ea47 0003 	orrgt.w	r0, r7, r3
 800aac6:	fa04 f003 	lslle.w	r0, r4, r3
 800aaca:	f7f5 fd2b 	bl	8000524 <__aeabi_ui2d>
 800aace:	2201      	movs	r2, #1
 800aad0:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800aad4:	3e01      	subs	r6, #1
 800aad6:	9212      	str	r2, [sp, #72]	@ 0x48
 800aad8:	e776      	b.n	800a9c8 <_dtoa_r+0x100>
 800aada:	2301      	movs	r3, #1
 800aadc:	e7b7      	b.n	800aa4e <_dtoa_r+0x186>
 800aade:	9010      	str	r0, [sp, #64]	@ 0x40
 800aae0:	e7b6      	b.n	800aa50 <_dtoa_r+0x188>
 800aae2:	9b00      	ldr	r3, [sp, #0]
 800aae4:	1bdb      	subs	r3, r3, r7
 800aae6:	9300      	str	r3, [sp, #0]
 800aae8:	427b      	negs	r3, r7
 800aaea:	9308      	str	r3, [sp, #32]
 800aaec:	2300      	movs	r3, #0
 800aaee:	930d      	str	r3, [sp, #52]	@ 0x34
 800aaf0:	e7c3      	b.n	800aa7a <_dtoa_r+0x1b2>
 800aaf2:	2301      	movs	r3, #1
 800aaf4:	9309      	str	r3, [sp, #36]	@ 0x24
 800aaf6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800aaf8:	eb07 0b03 	add.w	fp, r7, r3
 800aafc:	f10b 0301 	add.w	r3, fp, #1
 800ab00:	2b01      	cmp	r3, #1
 800ab02:	9303      	str	r3, [sp, #12]
 800ab04:	bfb8      	it	lt
 800ab06:	2301      	movlt	r3, #1
 800ab08:	e006      	b.n	800ab18 <_dtoa_r+0x250>
 800ab0a:	2301      	movs	r3, #1
 800ab0c:	9309      	str	r3, [sp, #36]	@ 0x24
 800ab0e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	dd28      	ble.n	800ab66 <_dtoa_r+0x29e>
 800ab14:	469b      	mov	fp, r3
 800ab16:	9303      	str	r3, [sp, #12]
 800ab18:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800ab1c:	2100      	movs	r1, #0
 800ab1e:	2204      	movs	r2, #4
 800ab20:	f102 0514 	add.w	r5, r2, #20
 800ab24:	429d      	cmp	r5, r3
 800ab26:	d926      	bls.n	800ab76 <_dtoa_r+0x2ae>
 800ab28:	6041      	str	r1, [r0, #4]
 800ab2a:	4648      	mov	r0, r9
 800ab2c:	f000 fd9c 	bl	800b668 <_Balloc>
 800ab30:	4682      	mov	sl, r0
 800ab32:	2800      	cmp	r0, #0
 800ab34:	d142      	bne.n	800abbc <_dtoa_r+0x2f4>
 800ab36:	4b1e      	ldr	r3, [pc, #120]	@ (800abb0 <_dtoa_r+0x2e8>)
 800ab38:	4602      	mov	r2, r0
 800ab3a:	f240 11af 	movw	r1, #431	@ 0x1af
 800ab3e:	e6da      	b.n	800a8f6 <_dtoa_r+0x2e>
 800ab40:	2300      	movs	r3, #0
 800ab42:	e7e3      	b.n	800ab0c <_dtoa_r+0x244>
 800ab44:	2300      	movs	r3, #0
 800ab46:	e7d5      	b.n	800aaf4 <_dtoa_r+0x22c>
 800ab48:	2401      	movs	r4, #1
 800ab4a:	2300      	movs	r3, #0
 800ab4c:	9307      	str	r3, [sp, #28]
 800ab4e:	9409      	str	r4, [sp, #36]	@ 0x24
 800ab50:	f04f 3bff 	mov.w	fp, #4294967295
 800ab54:	2200      	movs	r2, #0
 800ab56:	f8cd b00c 	str.w	fp, [sp, #12]
 800ab5a:	2312      	movs	r3, #18
 800ab5c:	920c      	str	r2, [sp, #48]	@ 0x30
 800ab5e:	e7db      	b.n	800ab18 <_dtoa_r+0x250>
 800ab60:	2301      	movs	r3, #1
 800ab62:	9309      	str	r3, [sp, #36]	@ 0x24
 800ab64:	e7f4      	b.n	800ab50 <_dtoa_r+0x288>
 800ab66:	f04f 0b01 	mov.w	fp, #1
 800ab6a:	f8cd b00c 	str.w	fp, [sp, #12]
 800ab6e:	465b      	mov	r3, fp
 800ab70:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800ab74:	e7d0      	b.n	800ab18 <_dtoa_r+0x250>
 800ab76:	3101      	adds	r1, #1
 800ab78:	0052      	lsls	r2, r2, #1
 800ab7a:	e7d1      	b.n	800ab20 <_dtoa_r+0x258>
 800ab7c:	f3af 8000 	nop.w
 800ab80:	636f4361 	.word	0x636f4361
 800ab84:	3fd287a7 	.word	0x3fd287a7
 800ab88:	8b60c8b3 	.word	0x8b60c8b3
 800ab8c:	3fc68a28 	.word	0x3fc68a28
 800ab90:	509f79fb 	.word	0x509f79fb
 800ab94:	3fd34413 	.word	0x3fd34413
 800ab98:	0800cc7d 	.word	0x0800cc7d
 800ab9c:	0800cc94 	.word	0x0800cc94
 800aba0:	7ff00000 	.word	0x7ff00000
 800aba4:	0800cc4d 	.word	0x0800cc4d
 800aba8:	3ff80000 	.word	0x3ff80000
 800abac:	0800cde8 	.word	0x0800cde8
 800abb0:	0800ccec 	.word	0x0800ccec
 800abb4:	0800cc79 	.word	0x0800cc79
 800abb8:	0800cc4c 	.word	0x0800cc4c
 800abbc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800abc0:	6018      	str	r0, [r3, #0]
 800abc2:	9b03      	ldr	r3, [sp, #12]
 800abc4:	2b0e      	cmp	r3, #14
 800abc6:	f200 80a1 	bhi.w	800ad0c <_dtoa_r+0x444>
 800abca:	2c00      	cmp	r4, #0
 800abcc:	f000 809e 	beq.w	800ad0c <_dtoa_r+0x444>
 800abd0:	2f00      	cmp	r7, #0
 800abd2:	dd33      	ble.n	800ac3c <_dtoa_r+0x374>
 800abd4:	4b9c      	ldr	r3, [pc, #624]	@ (800ae48 <_dtoa_r+0x580>)
 800abd6:	f007 020f 	and.w	r2, r7, #15
 800abda:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800abde:	ed93 7b00 	vldr	d7, [r3]
 800abe2:	05f8      	lsls	r0, r7, #23
 800abe4:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800abe8:	ea4f 1427 	mov.w	r4, r7, asr #4
 800abec:	d516      	bpl.n	800ac1c <_dtoa_r+0x354>
 800abee:	4b97      	ldr	r3, [pc, #604]	@ (800ae4c <_dtoa_r+0x584>)
 800abf0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800abf4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800abf8:	f7f5 fe38 	bl	800086c <__aeabi_ddiv>
 800abfc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ac00:	f004 040f 	and.w	r4, r4, #15
 800ac04:	2603      	movs	r6, #3
 800ac06:	4d91      	ldr	r5, [pc, #580]	@ (800ae4c <_dtoa_r+0x584>)
 800ac08:	b954      	cbnz	r4, 800ac20 <_dtoa_r+0x358>
 800ac0a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800ac0e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ac12:	f7f5 fe2b 	bl	800086c <__aeabi_ddiv>
 800ac16:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ac1a:	e028      	b.n	800ac6e <_dtoa_r+0x3a6>
 800ac1c:	2602      	movs	r6, #2
 800ac1e:	e7f2      	b.n	800ac06 <_dtoa_r+0x33e>
 800ac20:	07e1      	lsls	r1, r4, #31
 800ac22:	d508      	bpl.n	800ac36 <_dtoa_r+0x36e>
 800ac24:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800ac28:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ac2c:	f7f5 fcf4 	bl	8000618 <__aeabi_dmul>
 800ac30:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800ac34:	3601      	adds	r6, #1
 800ac36:	1064      	asrs	r4, r4, #1
 800ac38:	3508      	adds	r5, #8
 800ac3a:	e7e5      	b.n	800ac08 <_dtoa_r+0x340>
 800ac3c:	f000 80af 	beq.w	800ad9e <_dtoa_r+0x4d6>
 800ac40:	427c      	negs	r4, r7
 800ac42:	4b81      	ldr	r3, [pc, #516]	@ (800ae48 <_dtoa_r+0x580>)
 800ac44:	4d81      	ldr	r5, [pc, #516]	@ (800ae4c <_dtoa_r+0x584>)
 800ac46:	f004 020f 	and.w	r2, r4, #15
 800ac4a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ac4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac52:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800ac56:	f7f5 fcdf 	bl	8000618 <__aeabi_dmul>
 800ac5a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ac5e:	1124      	asrs	r4, r4, #4
 800ac60:	2300      	movs	r3, #0
 800ac62:	2602      	movs	r6, #2
 800ac64:	2c00      	cmp	r4, #0
 800ac66:	f040 808f 	bne.w	800ad88 <_dtoa_r+0x4c0>
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	d1d3      	bne.n	800ac16 <_dtoa_r+0x34e>
 800ac6e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800ac70:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	f000 8094 	beq.w	800ada2 <_dtoa_r+0x4da>
 800ac7a:	4b75      	ldr	r3, [pc, #468]	@ (800ae50 <_dtoa_r+0x588>)
 800ac7c:	2200      	movs	r2, #0
 800ac7e:	4620      	mov	r0, r4
 800ac80:	4629      	mov	r1, r5
 800ac82:	f7f5 ff3b 	bl	8000afc <__aeabi_dcmplt>
 800ac86:	2800      	cmp	r0, #0
 800ac88:	f000 808b 	beq.w	800ada2 <_dtoa_r+0x4da>
 800ac8c:	9b03      	ldr	r3, [sp, #12]
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	f000 8087 	beq.w	800ada2 <_dtoa_r+0x4da>
 800ac94:	f1bb 0f00 	cmp.w	fp, #0
 800ac98:	dd34      	ble.n	800ad04 <_dtoa_r+0x43c>
 800ac9a:	4620      	mov	r0, r4
 800ac9c:	4b6d      	ldr	r3, [pc, #436]	@ (800ae54 <_dtoa_r+0x58c>)
 800ac9e:	2200      	movs	r2, #0
 800aca0:	4629      	mov	r1, r5
 800aca2:	f7f5 fcb9 	bl	8000618 <__aeabi_dmul>
 800aca6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800acaa:	f107 38ff 	add.w	r8, r7, #4294967295
 800acae:	3601      	adds	r6, #1
 800acb0:	465c      	mov	r4, fp
 800acb2:	4630      	mov	r0, r6
 800acb4:	f7f5 fc46 	bl	8000544 <__aeabi_i2d>
 800acb8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800acbc:	f7f5 fcac 	bl	8000618 <__aeabi_dmul>
 800acc0:	4b65      	ldr	r3, [pc, #404]	@ (800ae58 <_dtoa_r+0x590>)
 800acc2:	2200      	movs	r2, #0
 800acc4:	f7f5 faf2 	bl	80002ac <__adddf3>
 800acc8:	4605      	mov	r5, r0
 800acca:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800acce:	2c00      	cmp	r4, #0
 800acd0:	d16a      	bne.n	800ada8 <_dtoa_r+0x4e0>
 800acd2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800acd6:	4b61      	ldr	r3, [pc, #388]	@ (800ae5c <_dtoa_r+0x594>)
 800acd8:	2200      	movs	r2, #0
 800acda:	f7f5 fae5 	bl	80002a8 <__aeabi_dsub>
 800acde:	4602      	mov	r2, r0
 800ace0:	460b      	mov	r3, r1
 800ace2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800ace6:	462a      	mov	r2, r5
 800ace8:	4633      	mov	r3, r6
 800acea:	f7f5 ff25 	bl	8000b38 <__aeabi_dcmpgt>
 800acee:	2800      	cmp	r0, #0
 800acf0:	f040 8298 	bne.w	800b224 <_dtoa_r+0x95c>
 800acf4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800acf8:	462a      	mov	r2, r5
 800acfa:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800acfe:	f7f5 fefd 	bl	8000afc <__aeabi_dcmplt>
 800ad02:	bb38      	cbnz	r0, 800ad54 <_dtoa_r+0x48c>
 800ad04:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800ad08:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800ad0c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800ad0e:	2b00      	cmp	r3, #0
 800ad10:	f2c0 8157 	blt.w	800afc2 <_dtoa_r+0x6fa>
 800ad14:	2f0e      	cmp	r7, #14
 800ad16:	f300 8154 	bgt.w	800afc2 <_dtoa_r+0x6fa>
 800ad1a:	4b4b      	ldr	r3, [pc, #300]	@ (800ae48 <_dtoa_r+0x580>)
 800ad1c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800ad20:	ed93 7b00 	vldr	d7, [r3]
 800ad24:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	ed8d 7b00 	vstr	d7, [sp]
 800ad2c:	f280 80e5 	bge.w	800aefa <_dtoa_r+0x632>
 800ad30:	9b03      	ldr	r3, [sp, #12]
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	f300 80e1 	bgt.w	800aefa <_dtoa_r+0x632>
 800ad38:	d10c      	bne.n	800ad54 <_dtoa_r+0x48c>
 800ad3a:	4b48      	ldr	r3, [pc, #288]	@ (800ae5c <_dtoa_r+0x594>)
 800ad3c:	2200      	movs	r2, #0
 800ad3e:	ec51 0b17 	vmov	r0, r1, d7
 800ad42:	f7f5 fc69 	bl	8000618 <__aeabi_dmul>
 800ad46:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ad4a:	f7f5 feeb 	bl	8000b24 <__aeabi_dcmpge>
 800ad4e:	2800      	cmp	r0, #0
 800ad50:	f000 8266 	beq.w	800b220 <_dtoa_r+0x958>
 800ad54:	2400      	movs	r4, #0
 800ad56:	4625      	mov	r5, r4
 800ad58:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ad5a:	4656      	mov	r6, sl
 800ad5c:	ea6f 0803 	mvn.w	r8, r3
 800ad60:	2700      	movs	r7, #0
 800ad62:	4621      	mov	r1, r4
 800ad64:	4648      	mov	r0, r9
 800ad66:	f000 fcbf 	bl	800b6e8 <_Bfree>
 800ad6a:	2d00      	cmp	r5, #0
 800ad6c:	f000 80bd 	beq.w	800aeea <_dtoa_r+0x622>
 800ad70:	b12f      	cbz	r7, 800ad7e <_dtoa_r+0x4b6>
 800ad72:	42af      	cmp	r7, r5
 800ad74:	d003      	beq.n	800ad7e <_dtoa_r+0x4b6>
 800ad76:	4639      	mov	r1, r7
 800ad78:	4648      	mov	r0, r9
 800ad7a:	f000 fcb5 	bl	800b6e8 <_Bfree>
 800ad7e:	4629      	mov	r1, r5
 800ad80:	4648      	mov	r0, r9
 800ad82:	f000 fcb1 	bl	800b6e8 <_Bfree>
 800ad86:	e0b0      	b.n	800aeea <_dtoa_r+0x622>
 800ad88:	07e2      	lsls	r2, r4, #31
 800ad8a:	d505      	bpl.n	800ad98 <_dtoa_r+0x4d0>
 800ad8c:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ad90:	f7f5 fc42 	bl	8000618 <__aeabi_dmul>
 800ad94:	3601      	adds	r6, #1
 800ad96:	2301      	movs	r3, #1
 800ad98:	1064      	asrs	r4, r4, #1
 800ad9a:	3508      	adds	r5, #8
 800ad9c:	e762      	b.n	800ac64 <_dtoa_r+0x39c>
 800ad9e:	2602      	movs	r6, #2
 800ada0:	e765      	b.n	800ac6e <_dtoa_r+0x3a6>
 800ada2:	9c03      	ldr	r4, [sp, #12]
 800ada4:	46b8      	mov	r8, r7
 800ada6:	e784      	b.n	800acb2 <_dtoa_r+0x3ea>
 800ada8:	4b27      	ldr	r3, [pc, #156]	@ (800ae48 <_dtoa_r+0x580>)
 800adaa:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800adac:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800adb0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800adb4:	4454      	add	r4, sl
 800adb6:	2900      	cmp	r1, #0
 800adb8:	d054      	beq.n	800ae64 <_dtoa_r+0x59c>
 800adba:	4929      	ldr	r1, [pc, #164]	@ (800ae60 <_dtoa_r+0x598>)
 800adbc:	2000      	movs	r0, #0
 800adbe:	f7f5 fd55 	bl	800086c <__aeabi_ddiv>
 800adc2:	4633      	mov	r3, r6
 800adc4:	462a      	mov	r2, r5
 800adc6:	f7f5 fa6f 	bl	80002a8 <__aeabi_dsub>
 800adca:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800adce:	4656      	mov	r6, sl
 800add0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800add4:	f7f5 fed0 	bl	8000b78 <__aeabi_d2iz>
 800add8:	4605      	mov	r5, r0
 800adda:	f7f5 fbb3 	bl	8000544 <__aeabi_i2d>
 800adde:	4602      	mov	r2, r0
 800ade0:	460b      	mov	r3, r1
 800ade2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ade6:	f7f5 fa5f 	bl	80002a8 <__aeabi_dsub>
 800adea:	3530      	adds	r5, #48	@ 0x30
 800adec:	4602      	mov	r2, r0
 800adee:	460b      	mov	r3, r1
 800adf0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800adf4:	f806 5b01 	strb.w	r5, [r6], #1
 800adf8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800adfc:	f7f5 fe7e 	bl	8000afc <__aeabi_dcmplt>
 800ae00:	2800      	cmp	r0, #0
 800ae02:	d172      	bne.n	800aeea <_dtoa_r+0x622>
 800ae04:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ae08:	4911      	ldr	r1, [pc, #68]	@ (800ae50 <_dtoa_r+0x588>)
 800ae0a:	2000      	movs	r0, #0
 800ae0c:	f7f5 fa4c 	bl	80002a8 <__aeabi_dsub>
 800ae10:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800ae14:	f7f5 fe72 	bl	8000afc <__aeabi_dcmplt>
 800ae18:	2800      	cmp	r0, #0
 800ae1a:	f040 80b4 	bne.w	800af86 <_dtoa_r+0x6be>
 800ae1e:	42a6      	cmp	r6, r4
 800ae20:	f43f af70 	beq.w	800ad04 <_dtoa_r+0x43c>
 800ae24:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800ae28:	4b0a      	ldr	r3, [pc, #40]	@ (800ae54 <_dtoa_r+0x58c>)
 800ae2a:	2200      	movs	r2, #0
 800ae2c:	f7f5 fbf4 	bl	8000618 <__aeabi_dmul>
 800ae30:	4b08      	ldr	r3, [pc, #32]	@ (800ae54 <_dtoa_r+0x58c>)
 800ae32:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800ae36:	2200      	movs	r2, #0
 800ae38:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ae3c:	f7f5 fbec 	bl	8000618 <__aeabi_dmul>
 800ae40:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ae44:	e7c4      	b.n	800add0 <_dtoa_r+0x508>
 800ae46:	bf00      	nop
 800ae48:	0800cde8 	.word	0x0800cde8
 800ae4c:	0800cdc0 	.word	0x0800cdc0
 800ae50:	3ff00000 	.word	0x3ff00000
 800ae54:	40240000 	.word	0x40240000
 800ae58:	401c0000 	.word	0x401c0000
 800ae5c:	40140000 	.word	0x40140000
 800ae60:	3fe00000 	.word	0x3fe00000
 800ae64:	4631      	mov	r1, r6
 800ae66:	4628      	mov	r0, r5
 800ae68:	f7f5 fbd6 	bl	8000618 <__aeabi_dmul>
 800ae6c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800ae70:	9413      	str	r4, [sp, #76]	@ 0x4c
 800ae72:	4656      	mov	r6, sl
 800ae74:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ae78:	f7f5 fe7e 	bl	8000b78 <__aeabi_d2iz>
 800ae7c:	4605      	mov	r5, r0
 800ae7e:	f7f5 fb61 	bl	8000544 <__aeabi_i2d>
 800ae82:	4602      	mov	r2, r0
 800ae84:	460b      	mov	r3, r1
 800ae86:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ae8a:	f7f5 fa0d 	bl	80002a8 <__aeabi_dsub>
 800ae8e:	3530      	adds	r5, #48	@ 0x30
 800ae90:	f806 5b01 	strb.w	r5, [r6], #1
 800ae94:	4602      	mov	r2, r0
 800ae96:	460b      	mov	r3, r1
 800ae98:	42a6      	cmp	r6, r4
 800ae9a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800ae9e:	f04f 0200 	mov.w	r2, #0
 800aea2:	d124      	bne.n	800aeee <_dtoa_r+0x626>
 800aea4:	4baf      	ldr	r3, [pc, #700]	@ (800b164 <_dtoa_r+0x89c>)
 800aea6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800aeaa:	f7f5 f9ff 	bl	80002ac <__adddf3>
 800aeae:	4602      	mov	r2, r0
 800aeb0:	460b      	mov	r3, r1
 800aeb2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800aeb6:	f7f5 fe3f 	bl	8000b38 <__aeabi_dcmpgt>
 800aeba:	2800      	cmp	r0, #0
 800aebc:	d163      	bne.n	800af86 <_dtoa_r+0x6be>
 800aebe:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800aec2:	49a8      	ldr	r1, [pc, #672]	@ (800b164 <_dtoa_r+0x89c>)
 800aec4:	2000      	movs	r0, #0
 800aec6:	f7f5 f9ef 	bl	80002a8 <__aeabi_dsub>
 800aeca:	4602      	mov	r2, r0
 800aecc:	460b      	mov	r3, r1
 800aece:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800aed2:	f7f5 fe13 	bl	8000afc <__aeabi_dcmplt>
 800aed6:	2800      	cmp	r0, #0
 800aed8:	f43f af14 	beq.w	800ad04 <_dtoa_r+0x43c>
 800aedc:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800aede:	1e73      	subs	r3, r6, #1
 800aee0:	9313      	str	r3, [sp, #76]	@ 0x4c
 800aee2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800aee6:	2b30      	cmp	r3, #48	@ 0x30
 800aee8:	d0f8      	beq.n	800aedc <_dtoa_r+0x614>
 800aeea:	4647      	mov	r7, r8
 800aeec:	e03b      	b.n	800af66 <_dtoa_r+0x69e>
 800aeee:	4b9e      	ldr	r3, [pc, #632]	@ (800b168 <_dtoa_r+0x8a0>)
 800aef0:	f7f5 fb92 	bl	8000618 <__aeabi_dmul>
 800aef4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800aef8:	e7bc      	b.n	800ae74 <_dtoa_r+0x5ac>
 800aefa:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800aefe:	4656      	mov	r6, sl
 800af00:	e9dd 2300 	ldrd	r2, r3, [sp]
 800af04:	4620      	mov	r0, r4
 800af06:	4629      	mov	r1, r5
 800af08:	f7f5 fcb0 	bl	800086c <__aeabi_ddiv>
 800af0c:	f7f5 fe34 	bl	8000b78 <__aeabi_d2iz>
 800af10:	4680      	mov	r8, r0
 800af12:	f7f5 fb17 	bl	8000544 <__aeabi_i2d>
 800af16:	e9dd 2300 	ldrd	r2, r3, [sp]
 800af1a:	f7f5 fb7d 	bl	8000618 <__aeabi_dmul>
 800af1e:	4602      	mov	r2, r0
 800af20:	460b      	mov	r3, r1
 800af22:	4620      	mov	r0, r4
 800af24:	4629      	mov	r1, r5
 800af26:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800af2a:	f7f5 f9bd 	bl	80002a8 <__aeabi_dsub>
 800af2e:	f806 4b01 	strb.w	r4, [r6], #1
 800af32:	9d03      	ldr	r5, [sp, #12]
 800af34:	eba6 040a 	sub.w	r4, r6, sl
 800af38:	42a5      	cmp	r5, r4
 800af3a:	4602      	mov	r2, r0
 800af3c:	460b      	mov	r3, r1
 800af3e:	d133      	bne.n	800afa8 <_dtoa_r+0x6e0>
 800af40:	f7f5 f9b4 	bl	80002ac <__adddf3>
 800af44:	e9dd 2300 	ldrd	r2, r3, [sp]
 800af48:	4604      	mov	r4, r0
 800af4a:	460d      	mov	r5, r1
 800af4c:	f7f5 fdf4 	bl	8000b38 <__aeabi_dcmpgt>
 800af50:	b9c0      	cbnz	r0, 800af84 <_dtoa_r+0x6bc>
 800af52:	e9dd 2300 	ldrd	r2, r3, [sp]
 800af56:	4620      	mov	r0, r4
 800af58:	4629      	mov	r1, r5
 800af5a:	f7f5 fdc5 	bl	8000ae8 <__aeabi_dcmpeq>
 800af5e:	b110      	cbz	r0, 800af66 <_dtoa_r+0x69e>
 800af60:	f018 0f01 	tst.w	r8, #1
 800af64:	d10e      	bne.n	800af84 <_dtoa_r+0x6bc>
 800af66:	9902      	ldr	r1, [sp, #8]
 800af68:	4648      	mov	r0, r9
 800af6a:	f000 fbbd 	bl	800b6e8 <_Bfree>
 800af6e:	2300      	movs	r3, #0
 800af70:	7033      	strb	r3, [r6, #0]
 800af72:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800af74:	3701      	adds	r7, #1
 800af76:	601f      	str	r7, [r3, #0]
 800af78:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	f000 824b 	beq.w	800b416 <_dtoa_r+0xb4e>
 800af80:	601e      	str	r6, [r3, #0]
 800af82:	e248      	b.n	800b416 <_dtoa_r+0xb4e>
 800af84:	46b8      	mov	r8, r7
 800af86:	4633      	mov	r3, r6
 800af88:	461e      	mov	r6, r3
 800af8a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800af8e:	2a39      	cmp	r2, #57	@ 0x39
 800af90:	d106      	bne.n	800afa0 <_dtoa_r+0x6d8>
 800af92:	459a      	cmp	sl, r3
 800af94:	d1f8      	bne.n	800af88 <_dtoa_r+0x6c0>
 800af96:	2230      	movs	r2, #48	@ 0x30
 800af98:	f108 0801 	add.w	r8, r8, #1
 800af9c:	f88a 2000 	strb.w	r2, [sl]
 800afa0:	781a      	ldrb	r2, [r3, #0]
 800afa2:	3201      	adds	r2, #1
 800afa4:	701a      	strb	r2, [r3, #0]
 800afa6:	e7a0      	b.n	800aeea <_dtoa_r+0x622>
 800afa8:	4b6f      	ldr	r3, [pc, #444]	@ (800b168 <_dtoa_r+0x8a0>)
 800afaa:	2200      	movs	r2, #0
 800afac:	f7f5 fb34 	bl	8000618 <__aeabi_dmul>
 800afb0:	2200      	movs	r2, #0
 800afb2:	2300      	movs	r3, #0
 800afb4:	4604      	mov	r4, r0
 800afb6:	460d      	mov	r5, r1
 800afb8:	f7f5 fd96 	bl	8000ae8 <__aeabi_dcmpeq>
 800afbc:	2800      	cmp	r0, #0
 800afbe:	d09f      	beq.n	800af00 <_dtoa_r+0x638>
 800afc0:	e7d1      	b.n	800af66 <_dtoa_r+0x69e>
 800afc2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800afc4:	2a00      	cmp	r2, #0
 800afc6:	f000 80ea 	beq.w	800b19e <_dtoa_r+0x8d6>
 800afca:	9a07      	ldr	r2, [sp, #28]
 800afcc:	2a01      	cmp	r2, #1
 800afce:	f300 80cd 	bgt.w	800b16c <_dtoa_r+0x8a4>
 800afd2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800afd4:	2a00      	cmp	r2, #0
 800afd6:	f000 80c1 	beq.w	800b15c <_dtoa_r+0x894>
 800afda:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800afde:	9c08      	ldr	r4, [sp, #32]
 800afe0:	9e00      	ldr	r6, [sp, #0]
 800afe2:	9a00      	ldr	r2, [sp, #0]
 800afe4:	441a      	add	r2, r3
 800afe6:	9200      	str	r2, [sp, #0]
 800afe8:	9a06      	ldr	r2, [sp, #24]
 800afea:	2101      	movs	r1, #1
 800afec:	441a      	add	r2, r3
 800afee:	4648      	mov	r0, r9
 800aff0:	9206      	str	r2, [sp, #24]
 800aff2:	f000 fc2d 	bl	800b850 <__i2b>
 800aff6:	4605      	mov	r5, r0
 800aff8:	b166      	cbz	r6, 800b014 <_dtoa_r+0x74c>
 800affa:	9b06      	ldr	r3, [sp, #24]
 800affc:	2b00      	cmp	r3, #0
 800affe:	dd09      	ble.n	800b014 <_dtoa_r+0x74c>
 800b000:	42b3      	cmp	r3, r6
 800b002:	9a00      	ldr	r2, [sp, #0]
 800b004:	bfa8      	it	ge
 800b006:	4633      	movge	r3, r6
 800b008:	1ad2      	subs	r2, r2, r3
 800b00a:	9200      	str	r2, [sp, #0]
 800b00c:	9a06      	ldr	r2, [sp, #24]
 800b00e:	1af6      	subs	r6, r6, r3
 800b010:	1ad3      	subs	r3, r2, r3
 800b012:	9306      	str	r3, [sp, #24]
 800b014:	9b08      	ldr	r3, [sp, #32]
 800b016:	b30b      	cbz	r3, 800b05c <_dtoa_r+0x794>
 800b018:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	f000 80c6 	beq.w	800b1ac <_dtoa_r+0x8e4>
 800b020:	2c00      	cmp	r4, #0
 800b022:	f000 80c0 	beq.w	800b1a6 <_dtoa_r+0x8de>
 800b026:	4629      	mov	r1, r5
 800b028:	4622      	mov	r2, r4
 800b02a:	4648      	mov	r0, r9
 800b02c:	f000 fcc8 	bl	800b9c0 <__pow5mult>
 800b030:	9a02      	ldr	r2, [sp, #8]
 800b032:	4601      	mov	r1, r0
 800b034:	4605      	mov	r5, r0
 800b036:	4648      	mov	r0, r9
 800b038:	f000 fc20 	bl	800b87c <__multiply>
 800b03c:	9902      	ldr	r1, [sp, #8]
 800b03e:	4680      	mov	r8, r0
 800b040:	4648      	mov	r0, r9
 800b042:	f000 fb51 	bl	800b6e8 <_Bfree>
 800b046:	9b08      	ldr	r3, [sp, #32]
 800b048:	1b1b      	subs	r3, r3, r4
 800b04a:	9308      	str	r3, [sp, #32]
 800b04c:	f000 80b1 	beq.w	800b1b2 <_dtoa_r+0x8ea>
 800b050:	9a08      	ldr	r2, [sp, #32]
 800b052:	4641      	mov	r1, r8
 800b054:	4648      	mov	r0, r9
 800b056:	f000 fcb3 	bl	800b9c0 <__pow5mult>
 800b05a:	9002      	str	r0, [sp, #8]
 800b05c:	2101      	movs	r1, #1
 800b05e:	4648      	mov	r0, r9
 800b060:	f000 fbf6 	bl	800b850 <__i2b>
 800b064:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b066:	4604      	mov	r4, r0
 800b068:	2b00      	cmp	r3, #0
 800b06a:	f000 81d8 	beq.w	800b41e <_dtoa_r+0xb56>
 800b06e:	461a      	mov	r2, r3
 800b070:	4601      	mov	r1, r0
 800b072:	4648      	mov	r0, r9
 800b074:	f000 fca4 	bl	800b9c0 <__pow5mult>
 800b078:	9b07      	ldr	r3, [sp, #28]
 800b07a:	2b01      	cmp	r3, #1
 800b07c:	4604      	mov	r4, r0
 800b07e:	f300 809f 	bgt.w	800b1c0 <_dtoa_r+0x8f8>
 800b082:	9b04      	ldr	r3, [sp, #16]
 800b084:	2b00      	cmp	r3, #0
 800b086:	f040 8097 	bne.w	800b1b8 <_dtoa_r+0x8f0>
 800b08a:	9b05      	ldr	r3, [sp, #20]
 800b08c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b090:	2b00      	cmp	r3, #0
 800b092:	f040 8093 	bne.w	800b1bc <_dtoa_r+0x8f4>
 800b096:	9b05      	ldr	r3, [sp, #20]
 800b098:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b09c:	0d1b      	lsrs	r3, r3, #20
 800b09e:	051b      	lsls	r3, r3, #20
 800b0a0:	b133      	cbz	r3, 800b0b0 <_dtoa_r+0x7e8>
 800b0a2:	9b00      	ldr	r3, [sp, #0]
 800b0a4:	3301      	adds	r3, #1
 800b0a6:	9300      	str	r3, [sp, #0]
 800b0a8:	9b06      	ldr	r3, [sp, #24]
 800b0aa:	3301      	adds	r3, #1
 800b0ac:	9306      	str	r3, [sp, #24]
 800b0ae:	2301      	movs	r3, #1
 800b0b0:	9308      	str	r3, [sp, #32]
 800b0b2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	f000 81b8 	beq.w	800b42a <_dtoa_r+0xb62>
 800b0ba:	6923      	ldr	r3, [r4, #16]
 800b0bc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b0c0:	6918      	ldr	r0, [r3, #16]
 800b0c2:	f000 fb79 	bl	800b7b8 <__hi0bits>
 800b0c6:	f1c0 0020 	rsb	r0, r0, #32
 800b0ca:	9b06      	ldr	r3, [sp, #24]
 800b0cc:	4418      	add	r0, r3
 800b0ce:	f010 001f 	ands.w	r0, r0, #31
 800b0d2:	f000 8082 	beq.w	800b1da <_dtoa_r+0x912>
 800b0d6:	f1c0 0320 	rsb	r3, r0, #32
 800b0da:	2b04      	cmp	r3, #4
 800b0dc:	dd73      	ble.n	800b1c6 <_dtoa_r+0x8fe>
 800b0de:	9b00      	ldr	r3, [sp, #0]
 800b0e0:	f1c0 001c 	rsb	r0, r0, #28
 800b0e4:	4403      	add	r3, r0
 800b0e6:	9300      	str	r3, [sp, #0]
 800b0e8:	9b06      	ldr	r3, [sp, #24]
 800b0ea:	4403      	add	r3, r0
 800b0ec:	4406      	add	r6, r0
 800b0ee:	9306      	str	r3, [sp, #24]
 800b0f0:	9b00      	ldr	r3, [sp, #0]
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	dd05      	ble.n	800b102 <_dtoa_r+0x83a>
 800b0f6:	9902      	ldr	r1, [sp, #8]
 800b0f8:	461a      	mov	r2, r3
 800b0fa:	4648      	mov	r0, r9
 800b0fc:	f000 fcba 	bl	800ba74 <__lshift>
 800b100:	9002      	str	r0, [sp, #8]
 800b102:	9b06      	ldr	r3, [sp, #24]
 800b104:	2b00      	cmp	r3, #0
 800b106:	dd05      	ble.n	800b114 <_dtoa_r+0x84c>
 800b108:	4621      	mov	r1, r4
 800b10a:	461a      	mov	r2, r3
 800b10c:	4648      	mov	r0, r9
 800b10e:	f000 fcb1 	bl	800ba74 <__lshift>
 800b112:	4604      	mov	r4, r0
 800b114:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800b116:	2b00      	cmp	r3, #0
 800b118:	d061      	beq.n	800b1de <_dtoa_r+0x916>
 800b11a:	9802      	ldr	r0, [sp, #8]
 800b11c:	4621      	mov	r1, r4
 800b11e:	f000 fd15 	bl	800bb4c <__mcmp>
 800b122:	2800      	cmp	r0, #0
 800b124:	da5b      	bge.n	800b1de <_dtoa_r+0x916>
 800b126:	2300      	movs	r3, #0
 800b128:	9902      	ldr	r1, [sp, #8]
 800b12a:	220a      	movs	r2, #10
 800b12c:	4648      	mov	r0, r9
 800b12e:	f000 fafd 	bl	800b72c <__multadd>
 800b132:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b134:	9002      	str	r0, [sp, #8]
 800b136:	f107 38ff 	add.w	r8, r7, #4294967295
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	f000 8177 	beq.w	800b42e <_dtoa_r+0xb66>
 800b140:	4629      	mov	r1, r5
 800b142:	2300      	movs	r3, #0
 800b144:	220a      	movs	r2, #10
 800b146:	4648      	mov	r0, r9
 800b148:	f000 faf0 	bl	800b72c <__multadd>
 800b14c:	f1bb 0f00 	cmp.w	fp, #0
 800b150:	4605      	mov	r5, r0
 800b152:	dc6f      	bgt.n	800b234 <_dtoa_r+0x96c>
 800b154:	9b07      	ldr	r3, [sp, #28]
 800b156:	2b02      	cmp	r3, #2
 800b158:	dc49      	bgt.n	800b1ee <_dtoa_r+0x926>
 800b15a:	e06b      	b.n	800b234 <_dtoa_r+0x96c>
 800b15c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800b15e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800b162:	e73c      	b.n	800afde <_dtoa_r+0x716>
 800b164:	3fe00000 	.word	0x3fe00000
 800b168:	40240000 	.word	0x40240000
 800b16c:	9b03      	ldr	r3, [sp, #12]
 800b16e:	1e5c      	subs	r4, r3, #1
 800b170:	9b08      	ldr	r3, [sp, #32]
 800b172:	42a3      	cmp	r3, r4
 800b174:	db09      	blt.n	800b18a <_dtoa_r+0x8c2>
 800b176:	1b1c      	subs	r4, r3, r4
 800b178:	9b03      	ldr	r3, [sp, #12]
 800b17a:	2b00      	cmp	r3, #0
 800b17c:	f6bf af30 	bge.w	800afe0 <_dtoa_r+0x718>
 800b180:	9b00      	ldr	r3, [sp, #0]
 800b182:	9a03      	ldr	r2, [sp, #12]
 800b184:	1a9e      	subs	r6, r3, r2
 800b186:	2300      	movs	r3, #0
 800b188:	e72b      	b.n	800afe2 <_dtoa_r+0x71a>
 800b18a:	9b08      	ldr	r3, [sp, #32]
 800b18c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800b18e:	9408      	str	r4, [sp, #32]
 800b190:	1ae3      	subs	r3, r4, r3
 800b192:	441a      	add	r2, r3
 800b194:	9e00      	ldr	r6, [sp, #0]
 800b196:	9b03      	ldr	r3, [sp, #12]
 800b198:	920d      	str	r2, [sp, #52]	@ 0x34
 800b19a:	2400      	movs	r4, #0
 800b19c:	e721      	b.n	800afe2 <_dtoa_r+0x71a>
 800b19e:	9c08      	ldr	r4, [sp, #32]
 800b1a0:	9e00      	ldr	r6, [sp, #0]
 800b1a2:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800b1a4:	e728      	b.n	800aff8 <_dtoa_r+0x730>
 800b1a6:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800b1aa:	e751      	b.n	800b050 <_dtoa_r+0x788>
 800b1ac:	9a08      	ldr	r2, [sp, #32]
 800b1ae:	9902      	ldr	r1, [sp, #8]
 800b1b0:	e750      	b.n	800b054 <_dtoa_r+0x78c>
 800b1b2:	f8cd 8008 	str.w	r8, [sp, #8]
 800b1b6:	e751      	b.n	800b05c <_dtoa_r+0x794>
 800b1b8:	2300      	movs	r3, #0
 800b1ba:	e779      	b.n	800b0b0 <_dtoa_r+0x7e8>
 800b1bc:	9b04      	ldr	r3, [sp, #16]
 800b1be:	e777      	b.n	800b0b0 <_dtoa_r+0x7e8>
 800b1c0:	2300      	movs	r3, #0
 800b1c2:	9308      	str	r3, [sp, #32]
 800b1c4:	e779      	b.n	800b0ba <_dtoa_r+0x7f2>
 800b1c6:	d093      	beq.n	800b0f0 <_dtoa_r+0x828>
 800b1c8:	9a00      	ldr	r2, [sp, #0]
 800b1ca:	331c      	adds	r3, #28
 800b1cc:	441a      	add	r2, r3
 800b1ce:	9200      	str	r2, [sp, #0]
 800b1d0:	9a06      	ldr	r2, [sp, #24]
 800b1d2:	441a      	add	r2, r3
 800b1d4:	441e      	add	r6, r3
 800b1d6:	9206      	str	r2, [sp, #24]
 800b1d8:	e78a      	b.n	800b0f0 <_dtoa_r+0x828>
 800b1da:	4603      	mov	r3, r0
 800b1dc:	e7f4      	b.n	800b1c8 <_dtoa_r+0x900>
 800b1de:	9b03      	ldr	r3, [sp, #12]
 800b1e0:	2b00      	cmp	r3, #0
 800b1e2:	46b8      	mov	r8, r7
 800b1e4:	dc20      	bgt.n	800b228 <_dtoa_r+0x960>
 800b1e6:	469b      	mov	fp, r3
 800b1e8:	9b07      	ldr	r3, [sp, #28]
 800b1ea:	2b02      	cmp	r3, #2
 800b1ec:	dd1e      	ble.n	800b22c <_dtoa_r+0x964>
 800b1ee:	f1bb 0f00 	cmp.w	fp, #0
 800b1f2:	f47f adb1 	bne.w	800ad58 <_dtoa_r+0x490>
 800b1f6:	4621      	mov	r1, r4
 800b1f8:	465b      	mov	r3, fp
 800b1fa:	2205      	movs	r2, #5
 800b1fc:	4648      	mov	r0, r9
 800b1fe:	f000 fa95 	bl	800b72c <__multadd>
 800b202:	4601      	mov	r1, r0
 800b204:	4604      	mov	r4, r0
 800b206:	9802      	ldr	r0, [sp, #8]
 800b208:	f000 fca0 	bl	800bb4c <__mcmp>
 800b20c:	2800      	cmp	r0, #0
 800b20e:	f77f ada3 	ble.w	800ad58 <_dtoa_r+0x490>
 800b212:	4656      	mov	r6, sl
 800b214:	2331      	movs	r3, #49	@ 0x31
 800b216:	f806 3b01 	strb.w	r3, [r6], #1
 800b21a:	f108 0801 	add.w	r8, r8, #1
 800b21e:	e59f      	b.n	800ad60 <_dtoa_r+0x498>
 800b220:	9c03      	ldr	r4, [sp, #12]
 800b222:	46b8      	mov	r8, r7
 800b224:	4625      	mov	r5, r4
 800b226:	e7f4      	b.n	800b212 <_dtoa_r+0x94a>
 800b228:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800b22c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b22e:	2b00      	cmp	r3, #0
 800b230:	f000 8101 	beq.w	800b436 <_dtoa_r+0xb6e>
 800b234:	2e00      	cmp	r6, #0
 800b236:	dd05      	ble.n	800b244 <_dtoa_r+0x97c>
 800b238:	4629      	mov	r1, r5
 800b23a:	4632      	mov	r2, r6
 800b23c:	4648      	mov	r0, r9
 800b23e:	f000 fc19 	bl	800ba74 <__lshift>
 800b242:	4605      	mov	r5, r0
 800b244:	9b08      	ldr	r3, [sp, #32]
 800b246:	2b00      	cmp	r3, #0
 800b248:	d05c      	beq.n	800b304 <_dtoa_r+0xa3c>
 800b24a:	6869      	ldr	r1, [r5, #4]
 800b24c:	4648      	mov	r0, r9
 800b24e:	f000 fa0b 	bl	800b668 <_Balloc>
 800b252:	4606      	mov	r6, r0
 800b254:	b928      	cbnz	r0, 800b262 <_dtoa_r+0x99a>
 800b256:	4b82      	ldr	r3, [pc, #520]	@ (800b460 <_dtoa_r+0xb98>)
 800b258:	4602      	mov	r2, r0
 800b25a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800b25e:	f7ff bb4a 	b.w	800a8f6 <_dtoa_r+0x2e>
 800b262:	692a      	ldr	r2, [r5, #16]
 800b264:	3202      	adds	r2, #2
 800b266:	0092      	lsls	r2, r2, #2
 800b268:	f105 010c 	add.w	r1, r5, #12
 800b26c:	300c      	adds	r0, #12
 800b26e:	f000 ffa3 	bl	800c1b8 <memcpy>
 800b272:	2201      	movs	r2, #1
 800b274:	4631      	mov	r1, r6
 800b276:	4648      	mov	r0, r9
 800b278:	f000 fbfc 	bl	800ba74 <__lshift>
 800b27c:	f10a 0301 	add.w	r3, sl, #1
 800b280:	9300      	str	r3, [sp, #0]
 800b282:	eb0a 030b 	add.w	r3, sl, fp
 800b286:	9308      	str	r3, [sp, #32]
 800b288:	9b04      	ldr	r3, [sp, #16]
 800b28a:	f003 0301 	and.w	r3, r3, #1
 800b28e:	462f      	mov	r7, r5
 800b290:	9306      	str	r3, [sp, #24]
 800b292:	4605      	mov	r5, r0
 800b294:	9b00      	ldr	r3, [sp, #0]
 800b296:	9802      	ldr	r0, [sp, #8]
 800b298:	4621      	mov	r1, r4
 800b29a:	f103 3bff 	add.w	fp, r3, #4294967295
 800b29e:	f7ff fa88 	bl	800a7b2 <quorem>
 800b2a2:	4603      	mov	r3, r0
 800b2a4:	3330      	adds	r3, #48	@ 0x30
 800b2a6:	9003      	str	r0, [sp, #12]
 800b2a8:	4639      	mov	r1, r7
 800b2aa:	9802      	ldr	r0, [sp, #8]
 800b2ac:	9309      	str	r3, [sp, #36]	@ 0x24
 800b2ae:	f000 fc4d 	bl	800bb4c <__mcmp>
 800b2b2:	462a      	mov	r2, r5
 800b2b4:	9004      	str	r0, [sp, #16]
 800b2b6:	4621      	mov	r1, r4
 800b2b8:	4648      	mov	r0, r9
 800b2ba:	f000 fc63 	bl	800bb84 <__mdiff>
 800b2be:	68c2      	ldr	r2, [r0, #12]
 800b2c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b2c2:	4606      	mov	r6, r0
 800b2c4:	bb02      	cbnz	r2, 800b308 <_dtoa_r+0xa40>
 800b2c6:	4601      	mov	r1, r0
 800b2c8:	9802      	ldr	r0, [sp, #8]
 800b2ca:	f000 fc3f 	bl	800bb4c <__mcmp>
 800b2ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b2d0:	4602      	mov	r2, r0
 800b2d2:	4631      	mov	r1, r6
 800b2d4:	4648      	mov	r0, r9
 800b2d6:	920c      	str	r2, [sp, #48]	@ 0x30
 800b2d8:	9309      	str	r3, [sp, #36]	@ 0x24
 800b2da:	f000 fa05 	bl	800b6e8 <_Bfree>
 800b2de:	9b07      	ldr	r3, [sp, #28]
 800b2e0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800b2e2:	9e00      	ldr	r6, [sp, #0]
 800b2e4:	ea42 0103 	orr.w	r1, r2, r3
 800b2e8:	9b06      	ldr	r3, [sp, #24]
 800b2ea:	4319      	orrs	r1, r3
 800b2ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b2ee:	d10d      	bne.n	800b30c <_dtoa_r+0xa44>
 800b2f0:	2b39      	cmp	r3, #57	@ 0x39
 800b2f2:	d027      	beq.n	800b344 <_dtoa_r+0xa7c>
 800b2f4:	9a04      	ldr	r2, [sp, #16]
 800b2f6:	2a00      	cmp	r2, #0
 800b2f8:	dd01      	ble.n	800b2fe <_dtoa_r+0xa36>
 800b2fa:	9b03      	ldr	r3, [sp, #12]
 800b2fc:	3331      	adds	r3, #49	@ 0x31
 800b2fe:	f88b 3000 	strb.w	r3, [fp]
 800b302:	e52e      	b.n	800ad62 <_dtoa_r+0x49a>
 800b304:	4628      	mov	r0, r5
 800b306:	e7b9      	b.n	800b27c <_dtoa_r+0x9b4>
 800b308:	2201      	movs	r2, #1
 800b30a:	e7e2      	b.n	800b2d2 <_dtoa_r+0xa0a>
 800b30c:	9904      	ldr	r1, [sp, #16]
 800b30e:	2900      	cmp	r1, #0
 800b310:	db04      	blt.n	800b31c <_dtoa_r+0xa54>
 800b312:	9807      	ldr	r0, [sp, #28]
 800b314:	4301      	orrs	r1, r0
 800b316:	9806      	ldr	r0, [sp, #24]
 800b318:	4301      	orrs	r1, r0
 800b31a:	d120      	bne.n	800b35e <_dtoa_r+0xa96>
 800b31c:	2a00      	cmp	r2, #0
 800b31e:	ddee      	ble.n	800b2fe <_dtoa_r+0xa36>
 800b320:	9902      	ldr	r1, [sp, #8]
 800b322:	9300      	str	r3, [sp, #0]
 800b324:	2201      	movs	r2, #1
 800b326:	4648      	mov	r0, r9
 800b328:	f000 fba4 	bl	800ba74 <__lshift>
 800b32c:	4621      	mov	r1, r4
 800b32e:	9002      	str	r0, [sp, #8]
 800b330:	f000 fc0c 	bl	800bb4c <__mcmp>
 800b334:	2800      	cmp	r0, #0
 800b336:	9b00      	ldr	r3, [sp, #0]
 800b338:	dc02      	bgt.n	800b340 <_dtoa_r+0xa78>
 800b33a:	d1e0      	bne.n	800b2fe <_dtoa_r+0xa36>
 800b33c:	07da      	lsls	r2, r3, #31
 800b33e:	d5de      	bpl.n	800b2fe <_dtoa_r+0xa36>
 800b340:	2b39      	cmp	r3, #57	@ 0x39
 800b342:	d1da      	bne.n	800b2fa <_dtoa_r+0xa32>
 800b344:	2339      	movs	r3, #57	@ 0x39
 800b346:	f88b 3000 	strb.w	r3, [fp]
 800b34a:	4633      	mov	r3, r6
 800b34c:	461e      	mov	r6, r3
 800b34e:	3b01      	subs	r3, #1
 800b350:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800b354:	2a39      	cmp	r2, #57	@ 0x39
 800b356:	d04e      	beq.n	800b3f6 <_dtoa_r+0xb2e>
 800b358:	3201      	adds	r2, #1
 800b35a:	701a      	strb	r2, [r3, #0]
 800b35c:	e501      	b.n	800ad62 <_dtoa_r+0x49a>
 800b35e:	2a00      	cmp	r2, #0
 800b360:	dd03      	ble.n	800b36a <_dtoa_r+0xaa2>
 800b362:	2b39      	cmp	r3, #57	@ 0x39
 800b364:	d0ee      	beq.n	800b344 <_dtoa_r+0xa7c>
 800b366:	3301      	adds	r3, #1
 800b368:	e7c9      	b.n	800b2fe <_dtoa_r+0xa36>
 800b36a:	9a00      	ldr	r2, [sp, #0]
 800b36c:	9908      	ldr	r1, [sp, #32]
 800b36e:	f802 3c01 	strb.w	r3, [r2, #-1]
 800b372:	428a      	cmp	r2, r1
 800b374:	d028      	beq.n	800b3c8 <_dtoa_r+0xb00>
 800b376:	9902      	ldr	r1, [sp, #8]
 800b378:	2300      	movs	r3, #0
 800b37a:	220a      	movs	r2, #10
 800b37c:	4648      	mov	r0, r9
 800b37e:	f000 f9d5 	bl	800b72c <__multadd>
 800b382:	42af      	cmp	r7, r5
 800b384:	9002      	str	r0, [sp, #8]
 800b386:	f04f 0300 	mov.w	r3, #0
 800b38a:	f04f 020a 	mov.w	r2, #10
 800b38e:	4639      	mov	r1, r7
 800b390:	4648      	mov	r0, r9
 800b392:	d107      	bne.n	800b3a4 <_dtoa_r+0xadc>
 800b394:	f000 f9ca 	bl	800b72c <__multadd>
 800b398:	4607      	mov	r7, r0
 800b39a:	4605      	mov	r5, r0
 800b39c:	9b00      	ldr	r3, [sp, #0]
 800b39e:	3301      	adds	r3, #1
 800b3a0:	9300      	str	r3, [sp, #0]
 800b3a2:	e777      	b.n	800b294 <_dtoa_r+0x9cc>
 800b3a4:	f000 f9c2 	bl	800b72c <__multadd>
 800b3a8:	4629      	mov	r1, r5
 800b3aa:	4607      	mov	r7, r0
 800b3ac:	2300      	movs	r3, #0
 800b3ae:	220a      	movs	r2, #10
 800b3b0:	4648      	mov	r0, r9
 800b3b2:	f000 f9bb 	bl	800b72c <__multadd>
 800b3b6:	4605      	mov	r5, r0
 800b3b8:	e7f0      	b.n	800b39c <_dtoa_r+0xad4>
 800b3ba:	f1bb 0f00 	cmp.w	fp, #0
 800b3be:	bfcc      	ite	gt
 800b3c0:	465e      	movgt	r6, fp
 800b3c2:	2601      	movle	r6, #1
 800b3c4:	4456      	add	r6, sl
 800b3c6:	2700      	movs	r7, #0
 800b3c8:	9902      	ldr	r1, [sp, #8]
 800b3ca:	9300      	str	r3, [sp, #0]
 800b3cc:	2201      	movs	r2, #1
 800b3ce:	4648      	mov	r0, r9
 800b3d0:	f000 fb50 	bl	800ba74 <__lshift>
 800b3d4:	4621      	mov	r1, r4
 800b3d6:	9002      	str	r0, [sp, #8]
 800b3d8:	f000 fbb8 	bl	800bb4c <__mcmp>
 800b3dc:	2800      	cmp	r0, #0
 800b3de:	dcb4      	bgt.n	800b34a <_dtoa_r+0xa82>
 800b3e0:	d102      	bne.n	800b3e8 <_dtoa_r+0xb20>
 800b3e2:	9b00      	ldr	r3, [sp, #0]
 800b3e4:	07db      	lsls	r3, r3, #31
 800b3e6:	d4b0      	bmi.n	800b34a <_dtoa_r+0xa82>
 800b3e8:	4633      	mov	r3, r6
 800b3ea:	461e      	mov	r6, r3
 800b3ec:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b3f0:	2a30      	cmp	r2, #48	@ 0x30
 800b3f2:	d0fa      	beq.n	800b3ea <_dtoa_r+0xb22>
 800b3f4:	e4b5      	b.n	800ad62 <_dtoa_r+0x49a>
 800b3f6:	459a      	cmp	sl, r3
 800b3f8:	d1a8      	bne.n	800b34c <_dtoa_r+0xa84>
 800b3fa:	2331      	movs	r3, #49	@ 0x31
 800b3fc:	f108 0801 	add.w	r8, r8, #1
 800b400:	f88a 3000 	strb.w	r3, [sl]
 800b404:	e4ad      	b.n	800ad62 <_dtoa_r+0x49a>
 800b406:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800b408:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800b464 <_dtoa_r+0xb9c>
 800b40c:	b11b      	cbz	r3, 800b416 <_dtoa_r+0xb4e>
 800b40e:	f10a 0308 	add.w	r3, sl, #8
 800b412:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800b414:	6013      	str	r3, [r2, #0]
 800b416:	4650      	mov	r0, sl
 800b418:	b017      	add	sp, #92	@ 0x5c
 800b41a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b41e:	9b07      	ldr	r3, [sp, #28]
 800b420:	2b01      	cmp	r3, #1
 800b422:	f77f ae2e 	ble.w	800b082 <_dtoa_r+0x7ba>
 800b426:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b428:	9308      	str	r3, [sp, #32]
 800b42a:	2001      	movs	r0, #1
 800b42c:	e64d      	b.n	800b0ca <_dtoa_r+0x802>
 800b42e:	f1bb 0f00 	cmp.w	fp, #0
 800b432:	f77f aed9 	ble.w	800b1e8 <_dtoa_r+0x920>
 800b436:	4656      	mov	r6, sl
 800b438:	9802      	ldr	r0, [sp, #8]
 800b43a:	4621      	mov	r1, r4
 800b43c:	f7ff f9b9 	bl	800a7b2 <quorem>
 800b440:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800b444:	f806 3b01 	strb.w	r3, [r6], #1
 800b448:	eba6 020a 	sub.w	r2, r6, sl
 800b44c:	4593      	cmp	fp, r2
 800b44e:	ddb4      	ble.n	800b3ba <_dtoa_r+0xaf2>
 800b450:	9902      	ldr	r1, [sp, #8]
 800b452:	2300      	movs	r3, #0
 800b454:	220a      	movs	r2, #10
 800b456:	4648      	mov	r0, r9
 800b458:	f000 f968 	bl	800b72c <__multadd>
 800b45c:	9002      	str	r0, [sp, #8]
 800b45e:	e7eb      	b.n	800b438 <_dtoa_r+0xb70>
 800b460:	0800ccec 	.word	0x0800ccec
 800b464:	0800cc70 	.word	0x0800cc70

0800b468 <_free_r>:
 800b468:	b538      	push	{r3, r4, r5, lr}
 800b46a:	4605      	mov	r5, r0
 800b46c:	2900      	cmp	r1, #0
 800b46e:	d041      	beq.n	800b4f4 <_free_r+0x8c>
 800b470:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b474:	1f0c      	subs	r4, r1, #4
 800b476:	2b00      	cmp	r3, #0
 800b478:	bfb8      	it	lt
 800b47a:	18e4      	addlt	r4, r4, r3
 800b47c:	f000 f8e8 	bl	800b650 <__malloc_lock>
 800b480:	4a1d      	ldr	r2, [pc, #116]	@ (800b4f8 <_free_r+0x90>)
 800b482:	6813      	ldr	r3, [r2, #0]
 800b484:	b933      	cbnz	r3, 800b494 <_free_r+0x2c>
 800b486:	6063      	str	r3, [r4, #4]
 800b488:	6014      	str	r4, [r2, #0]
 800b48a:	4628      	mov	r0, r5
 800b48c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b490:	f000 b8e4 	b.w	800b65c <__malloc_unlock>
 800b494:	42a3      	cmp	r3, r4
 800b496:	d908      	bls.n	800b4aa <_free_r+0x42>
 800b498:	6820      	ldr	r0, [r4, #0]
 800b49a:	1821      	adds	r1, r4, r0
 800b49c:	428b      	cmp	r3, r1
 800b49e:	bf01      	itttt	eq
 800b4a0:	6819      	ldreq	r1, [r3, #0]
 800b4a2:	685b      	ldreq	r3, [r3, #4]
 800b4a4:	1809      	addeq	r1, r1, r0
 800b4a6:	6021      	streq	r1, [r4, #0]
 800b4a8:	e7ed      	b.n	800b486 <_free_r+0x1e>
 800b4aa:	461a      	mov	r2, r3
 800b4ac:	685b      	ldr	r3, [r3, #4]
 800b4ae:	b10b      	cbz	r3, 800b4b4 <_free_r+0x4c>
 800b4b0:	42a3      	cmp	r3, r4
 800b4b2:	d9fa      	bls.n	800b4aa <_free_r+0x42>
 800b4b4:	6811      	ldr	r1, [r2, #0]
 800b4b6:	1850      	adds	r0, r2, r1
 800b4b8:	42a0      	cmp	r0, r4
 800b4ba:	d10b      	bne.n	800b4d4 <_free_r+0x6c>
 800b4bc:	6820      	ldr	r0, [r4, #0]
 800b4be:	4401      	add	r1, r0
 800b4c0:	1850      	adds	r0, r2, r1
 800b4c2:	4283      	cmp	r3, r0
 800b4c4:	6011      	str	r1, [r2, #0]
 800b4c6:	d1e0      	bne.n	800b48a <_free_r+0x22>
 800b4c8:	6818      	ldr	r0, [r3, #0]
 800b4ca:	685b      	ldr	r3, [r3, #4]
 800b4cc:	6053      	str	r3, [r2, #4]
 800b4ce:	4408      	add	r0, r1
 800b4d0:	6010      	str	r0, [r2, #0]
 800b4d2:	e7da      	b.n	800b48a <_free_r+0x22>
 800b4d4:	d902      	bls.n	800b4dc <_free_r+0x74>
 800b4d6:	230c      	movs	r3, #12
 800b4d8:	602b      	str	r3, [r5, #0]
 800b4da:	e7d6      	b.n	800b48a <_free_r+0x22>
 800b4dc:	6820      	ldr	r0, [r4, #0]
 800b4de:	1821      	adds	r1, r4, r0
 800b4e0:	428b      	cmp	r3, r1
 800b4e2:	bf04      	itt	eq
 800b4e4:	6819      	ldreq	r1, [r3, #0]
 800b4e6:	685b      	ldreq	r3, [r3, #4]
 800b4e8:	6063      	str	r3, [r4, #4]
 800b4ea:	bf04      	itt	eq
 800b4ec:	1809      	addeq	r1, r1, r0
 800b4ee:	6021      	streq	r1, [r4, #0]
 800b4f0:	6054      	str	r4, [r2, #4]
 800b4f2:	e7ca      	b.n	800b48a <_free_r+0x22>
 800b4f4:	bd38      	pop	{r3, r4, r5, pc}
 800b4f6:	bf00      	nop
 800b4f8:	20000ff4 	.word	0x20000ff4

0800b4fc <malloc>:
 800b4fc:	4b02      	ldr	r3, [pc, #8]	@ (800b508 <malloc+0xc>)
 800b4fe:	4601      	mov	r1, r0
 800b500:	6818      	ldr	r0, [r3, #0]
 800b502:	f000 b825 	b.w	800b550 <_malloc_r>
 800b506:	bf00      	nop
 800b508:	2000012c 	.word	0x2000012c

0800b50c <sbrk_aligned>:
 800b50c:	b570      	push	{r4, r5, r6, lr}
 800b50e:	4e0f      	ldr	r6, [pc, #60]	@ (800b54c <sbrk_aligned+0x40>)
 800b510:	460c      	mov	r4, r1
 800b512:	6831      	ldr	r1, [r6, #0]
 800b514:	4605      	mov	r5, r0
 800b516:	b911      	cbnz	r1, 800b51e <sbrk_aligned+0x12>
 800b518:	f000 fe3e 	bl	800c198 <_sbrk_r>
 800b51c:	6030      	str	r0, [r6, #0]
 800b51e:	4621      	mov	r1, r4
 800b520:	4628      	mov	r0, r5
 800b522:	f000 fe39 	bl	800c198 <_sbrk_r>
 800b526:	1c43      	adds	r3, r0, #1
 800b528:	d103      	bne.n	800b532 <sbrk_aligned+0x26>
 800b52a:	f04f 34ff 	mov.w	r4, #4294967295
 800b52e:	4620      	mov	r0, r4
 800b530:	bd70      	pop	{r4, r5, r6, pc}
 800b532:	1cc4      	adds	r4, r0, #3
 800b534:	f024 0403 	bic.w	r4, r4, #3
 800b538:	42a0      	cmp	r0, r4
 800b53a:	d0f8      	beq.n	800b52e <sbrk_aligned+0x22>
 800b53c:	1a21      	subs	r1, r4, r0
 800b53e:	4628      	mov	r0, r5
 800b540:	f000 fe2a 	bl	800c198 <_sbrk_r>
 800b544:	3001      	adds	r0, #1
 800b546:	d1f2      	bne.n	800b52e <sbrk_aligned+0x22>
 800b548:	e7ef      	b.n	800b52a <sbrk_aligned+0x1e>
 800b54a:	bf00      	nop
 800b54c:	20000ff0 	.word	0x20000ff0

0800b550 <_malloc_r>:
 800b550:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b554:	1ccd      	adds	r5, r1, #3
 800b556:	f025 0503 	bic.w	r5, r5, #3
 800b55a:	3508      	adds	r5, #8
 800b55c:	2d0c      	cmp	r5, #12
 800b55e:	bf38      	it	cc
 800b560:	250c      	movcc	r5, #12
 800b562:	2d00      	cmp	r5, #0
 800b564:	4606      	mov	r6, r0
 800b566:	db01      	blt.n	800b56c <_malloc_r+0x1c>
 800b568:	42a9      	cmp	r1, r5
 800b56a:	d904      	bls.n	800b576 <_malloc_r+0x26>
 800b56c:	230c      	movs	r3, #12
 800b56e:	6033      	str	r3, [r6, #0]
 800b570:	2000      	movs	r0, #0
 800b572:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b576:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b64c <_malloc_r+0xfc>
 800b57a:	f000 f869 	bl	800b650 <__malloc_lock>
 800b57e:	f8d8 3000 	ldr.w	r3, [r8]
 800b582:	461c      	mov	r4, r3
 800b584:	bb44      	cbnz	r4, 800b5d8 <_malloc_r+0x88>
 800b586:	4629      	mov	r1, r5
 800b588:	4630      	mov	r0, r6
 800b58a:	f7ff ffbf 	bl	800b50c <sbrk_aligned>
 800b58e:	1c43      	adds	r3, r0, #1
 800b590:	4604      	mov	r4, r0
 800b592:	d158      	bne.n	800b646 <_malloc_r+0xf6>
 800b594:	f8d8 4000 	ldr.w	r4, [r8]
 800b598:	4627      	mov	r7, r4
 800b59a:	2f00      	cmp	r7, #0
 800b59c:	d143      	bne.n	800b626 <_malloc_r+0xd6>
 800b59e:	2c00      	cmp	r4, #0
 800b5a0:	d04b      	beq.n	800b63a <_malloc_r+0xea>
 800b5a2:	6823      	ldr	r3, [r4, #0]
 800b5a4:	4639      	mov	r1, r7
 800b5a6:	4630      	mov	r0, r6
 800b5a8:	eb04 0903 	add.w	r9, r4, r3
 800b5ac:	f000 fdf4 	bl	800c198 <_sbrk_r>
 800b5b0:	4581      	cmp	r9, r0
 800b5b2:	d142      	bne.n	800b63a <_malloc_r+0xea>
 800b5b4:	6821      	ldr	r1, [r4, #0]
 800b5b6:	1a6d      	subs	r5, r5, r1
 800b5b8:	4629      	mov	r1, r5
 800b5ba:	4630      	mov	r0, r6
 800b5bc:	f7ff ffa6 	bl	800b50c <sbrk_aligned>
 800b5c0:	3001      	adds	r0, #1
 800b5c2:	d03a      	beq.n	800b63a <_malloc_r+0xea>
 800b5c4:	6823      	ldr	r3, [r4, #0]
 800b5c6:	442b      	add	r3, r5
 800b5c8:	6023      	str	r3, [r4, #0]
 800b5ca:	f8d8 3000 	ldr.w	r3, [r8]
 800b5ce:	685a      	ldr	r2, [r3, #4]
 800b5d0:	bb62      	cbnz	r2, 800b62c <_malloc_r+0xdc>
 800b5d2:	f8c8 7000 	str.w	r7, [r8]
 800b5d6:	e00f      	b.n	800b5f8 <_malloc_r+0xa8>
 800b5d8:	6822      	ldr	r2, [r4, #0]
 800b5da:	1b52      	subs	r2, r2, r5
 800b5dc:	d420      	bmi.n	800b620 <_malloc_r+0xd0>
 800b5de:	2a0b      	cmp	r2, #11
 800b5e0:	d917      	bls.n	800b612 <_malloc_r+0xc2>
 800b5e2:	1961      	adds	r1, r4, r5
 800b5e4:	42a3      	cmp	r3, r4
 800b5e6:	6025      	str	r5, [r4, #0]
 800b5e8:	bf18      	it	ne
 800b5ea:	6059      	strne	r1, [r3, #4]
 800b5ec:	6863      	ldr	r3, [r4, #4]
 800b5ee:	bf08      	it	eq
 800b5f0:	f8c8 1000 	streq.w	r1, [r8]
 800b5f4:	5162      	str	r2, [r4, r5]
 800b5f6:	604b      	str	r3, [r1, #4]
 800b5f8:	4630      	mov	r0, r6
 800b5fa:	f000 f82f 	bl	800b65c <__malloc_unlock>
 800b5fe:	f104 000b 	add.w	r0, r4, #11
 800b602:	1d23      	adds	r3, r4, #4
 800b604:	f020 0007 	bic.w	r0, r0, #7
 800b608:	1ac2      	subs	r2, r0, r3
 800b60a:	bf1c      	itt	ne
 800b60c:	1a1b      	subne	r3, r3, r0
 800b60e:	50a3      	strne	r3, [r4, r2]
 800b610:	e7af      	b.n	800b572 <_malloc_r+0x22>
 800b612:	6862      	ldr	r2, [r4, #4]
 800b614:	42a3      	cmp	r3, r4
 800b616:	bf0c      	ite	eq
 800b618:	f8c8 2000 	streq.w	r2, [r8]
 800b61c:	605a      	strne	r2, [r3, #4]
 800b61e:	e7eb      	b.n	800b5f8 <_malloc_r+0xa8>
 800b620:	4623      	mov	r3, r4
 800b622:	6864      	ldr	r4, [r4, #4]
 800b624:	e7ae      	b.n	800b584 <_malloc_r+0x34>
 800b626:	463c      	mov	r4, r7
 800b628:	687f      	ldr	r7, [r7, #4]
 800b62a:	e7b6      	b.n	800b59a <_malloc_r+0x4a>
 800b62c:	461a      	mov	r2, r3
 800b62e:	685b      	ldr	r3, [r3, #4]
 800b630:	42a3      	cmp	r3, r4
 800b632:	d1fb      	bne.n	800b62c <_malloc_r+0xdc>
 800b634:	2300      	movs	r3, #0
 800b636:	6053      	str	r3, [r2, #4]
 800b638:	e7de      	b.n	800b5f8 <_malloc_r+0xa8>
 800b63a:	230c      	movs	r3, #12
 800b63c:	6033      	str	r3, [r6, #0]
 800b63e:	4630      	mov	r0, r6
 800b640:	f000 f80c 	bl	800b65c <__malloc_unlock>
 800b644:	e794      	b.n	800b570 <_malloc_r+0x20>
 800b646:	6005      	str	r5, [r0, #0]
 800b648:	e7d6      	b.n	800b5f8 <_malloc_r+0xa8>
 800b64a:	bf00      	nop
 800b64c:	20000ff4 	.word	0x20000ff4

0800b650 <__malloc_lock>:
 800b650:	4801      	ldr	r0, [pc, #4]	@ (800b658 <__malloc_lock+0x8>)
 800b652:	f7ff b8ac 	b.w	800a7ae <__retarget_lock_acquire_recursive>
 800b656:	bf00      	nop
 800b658:	20000fec 	.word	0x20000fec

0800b65c <__malloc_unlock>:
 800b65c:	4801      	ldr	r0, [pc, #4]	@ (800b664 <__malloc_unlock+0x8>)
 800b65e:	f7ff b8a7 	b.w	800a7b0 <__retarget_lock_release_recursive>
 800b662:	bf00      	nop
 800b664:	20000fec 	.word	0x20000fec

0800b668 <_Balloc>:
 800b668:	b570      	push	{r4, r5, r6, lr}
 800b66a:	69c6      	ldr	r6, [r0, #28]
 800b66c:	4604      	mov	r4, r0
 800b66e:	460d      	mov	r5, r1
 800b670:	b976      	cbnz	r6, 800b690 <_Balloc+0x28>
 800b672:	2010      	movs	r0, #16
 800b674:	f7ff ff42 	bl	800b4fc <malloc>
 800b678:	4602      	mov	r2, r0
 800b67a:	61e0      	str	r0, [r4, #28]
 800b67c:	b920      	cbnz	r0, 800b688 <_Balloc+0x20>
 800b67e:	4b18      	ldr	r3, [pc, #96]	@ (800b6e0 <_Balloc+0x78>)
 800b680:	4818      	ldr	r0, [pc, #96]	@ (800b6e4 <_Balloc+0x7c>)
 800b682:	216b      	movs	r1, #107	@ 0x6b
 800b684:	f000 fda6 	bl	800c1d4 <__assert_func>
 800b688:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b68c:	6006      	str	r6, [r0, #0]
 800b68e:	60c6      	str	r6, [r0, #12]
 800b690:	69e6      	ldr	r6, [r4, #28]
 800b692:	68f3      	ldr	r3, [r6, #12]
 800b694:	b183      	cbz	r3, 800b6b8 <_Balloc+0x50>
 800b696:	69e3      	ldr	r3, [r4, #28]
 800b698:	68db      	ldr	r3, [r3, #12]
 800b69a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b69e:	b9b8      	cbnz	r0, 800b6d0 <_Balloc+0x68>
 800b6a0:	2101      	movs	r1, #1
 800b6a2:	fa01 f605 	lsl.w	r6, r1, r5
 800b6a6:	1d72      	adds	r2, r6, #5
 800b6a8:	0092      	lsls	r2, r2, #2
 800b6aa:	4620      	mov	r0, r4
 800b6ac:	f000 fdb0 	bl	800c210 <_calloc_r>
 800b6b0:	b160      	cbz	r0, 800b6cc <_Balloc+0x64>
 800b6b2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b6b6:	e00e      	b.n	800b6d6 <_Balloc+0x6e>
 800b6b8:	2221      	movs	r2, #33	@ 0x21
 800b6ba:	2104      	movs	r1, #4
 800b6bc:	4620      	mov	r0, r4
 800b6be:	f000 fda7 	bl	800c210 <_calloc_r>
 800b6c2:	69e3      	ldr	r3, [r4, #28]
 800b6c4:	60f0      	str	r0, [r6, #12]
 800b6c6:	68db      	ldr	r3, [r3, #12]
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	d1e4      	bne.n	800b696 <_Balloc+0x2e>
 800b6cc:	2000      	movs	r0, #0
 800b6ce:	bd70      	pop	{r4, r5, r6, pc}
 800b6d0:	6802      	ldr	r2, [r0, #0]
 800b6d2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b6d6:	2300      	movs	r3, #0
 800b6d8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b6dc:	e7f7      	b.n	800b6ce <_Balloc+0x66>
 800b6de:	bf00      	nop
 800b6e0:	0800cc7d 	.word	0x0800cc7d
 800b6e4:	0800ccfd 	.word	0x0800ccfd

0800b6e8 <_Bfree>:
 800b6e8:	b570      	push	{r4, r5, r6, lr}
 800b6ea:	69c6      	ldr	r6, [r0, #28]
 800b6ec:	4605      	mov	r5, r0
 800b6ee:	460c      	mov	r4, r1
 800b6f0:	b976      	cbnz	r6, 800b710 <_Bfree+0x28>
 800b6f2:	2010      	movs	r0, #16
 800b6f4:	f7ff ff02 	bl	800b4fc <malloc>
 800b6f8:	4602      	mov	r2, r0
 800b6fa:	61e8      	str	r0, [r5, #28]
 800b6fc:	b920      	cbnz	r0, 800b708 <_Bfree+0x20>
 800b6fe:	4b09      	ldr	r3, [pc, #36]	@ (800b724 <_Bfree+0x3c>)
 800b700:	4809      	ldr	r0, [pc, #36]	@ (800b728 <_Bfree+0x40>)
 800b702:	218f      	movs	r1, #143	@ 0x8f
 800b704:	f000 fd66 	bl	800c1d4 <__assert_func>
 800b708:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b70c:	6006      	str	r6, [r0, #0]
 800b70e:	60c6      	str	r6, [r0, #12]
 800b710:	b13c      	cbz	r4, 800b722 <_Bfree+0x3a>
 800b712:	69eb      	ldr	r3, [r5, #28]
 800b714:	6862      	ldr	r2, [r4, #4]
 800b716:	68db      	ldr	r3, [r3, #12]
 800b718:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b71c:	6021      	str	r1, [r4, #0]
 800b71e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b722:	bd70      	pop	{r4, r5, r6, pc}
 800b724:	0800cc7d 	.word	0x0800cc7d
 800b728:	0800ccfd 	.word	0x0800ccfd

0800b72c <__multadd>:
 800b72c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b730:	690d      	ldr	r5, [r1, #16]
 800b732:	4607      	mov	r7, r0
 800b734:	460c      	mov	r4, r1
 800b736:	461e      	mov	r6, r3
 800b738:	f101 0c14 	add.w	ip, r1, #20
 800b73c:	2000      	movs	r0, #0
 800b73e:	f8dc 3000 	ldr.w	r3, [ip]
 800b742:	b299      	uxth	r1, r3
 800b744:	fb02 6101 	mla	r1, r2, r1, r6
 800b748:	0c1e      	lsrs	r6, r3, #16
 800b74a:	0c0b      	lsrs	r3, r1, #16
 800b74c:	fb02 3306 	mla	r3, r2, r6, r3
 800b750:	b289      	uxth	r1, r1
 800b752:	3001      	adds	r0, #1
 800b754:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b758:	4285      	cmp	r5, r0
 800b75a:	f84c 1b04 	str.w	r1, [ip], #4
 800b75e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b762:	dcec      	bgt.n	800b73e <__multadd+0x12>
 800b764:	b30e      	cbz	r6, 800b7aa <__multadd+0x7e>
 800b766:	68a3      	ldr	r3, [r4, #8]
 800b768:	42ab      	cmp	r3, r5
 800b76a:	dc19      	bgt.n	800b7a0 <__multadd+0x74>
 800b76c:	6861      	ldr	r1, [r4, #4]
 800b76e:	4638      	mov	r0, r7
 800b770:	3101      	adds	r1, #1
 800b772:	f7ff ff79 	bl	800b668 <_Balloc>
 800b776:	4680      	mov	r8, r0
 800b778:	b928      	cbnz	r0, 800b786 <__multadd+0x5a>
 800b77a:	4602      	mov	r2, r0
 800b77c:	4b0c      	ldr	r3, [pc, #48]	@ (800b7b0 <__multadd+0x84>)
 800b77e:	480d      	ldr	r0, [pc, #52]	@ (800b7b4 <__multadd+0x88>)
 800b780:	21ba      	movs	r1, #186	@ 0xba
 800b782:	f000 fd27 	bl	800c1d4 <__assert_func>
 800b786:	6922      	ldr	r2, [r4, #16]
 800b788:	3202      	adds	r2, #2
 800b78a:	f104 010c 	add.w	r1, r4, #12
 800b78e:	0092      	lsls	r2, r2, #2
 800b790:	300c      	adds	r0, #12
 800b792:	f000 fd11 	bl	800c1b8 <memcpy>
 800b796:	4621      	mov	r1, r4
 800b798:	4638      	mov	r0, r7
 800b79a:	f7ff ffa5 	bl	800b6e8 <_Bfree>
 800b79e:	4644      	mov	r4, r8
 800b7a0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b7a4:	3501      	adds	r5, #1
 800b7a6:	615e      	str	r6, [r3, #20]
 800b7a8:	6125      	str	r5, [r4, #16]
 800b7aa:	4620      	mov	r0, r4
 800b7ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b7b0:	0800ccec 	.word	0x0800ccec
 800b7b4:	0800ccfd 	.word	0x0800ccfd

0800b7b8 <__hi0bits>:
 800b7b8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800b7bc:	4603      	mov	r3, r0
 800b7be:	bf36      	itet	cc
 800b7c0:	0403      	lslcc	r3, r0, #16
 800b7c2:	2000      	movcs	r0, #0
 800b7c4:	2010      	movcc	r0, #16
 800b7c6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b7ca:	bf3c      	itt	cc
 800b7cc:	021b      	lslcc	r3, r3, #8
 800b7ce:	3008      	addcc	r0, #8
 800b7d0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b7d4:	bf3c      	itt	cc
 800b7d6:	011b      	lslcc	r3, r3, #4
 800b7d8:	3004      	addcc	r0, #4
 800b7da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b7de:	bf3c      	itt	cc
 800b7e0:	009b      	lslcc	r3, r3, #2
 800b7e2:	3002      	addcc	r0, #2
 800b7e4:	2b00      	cmp	r3, #0
 800b7e6:	db05      	blt.n	800b7f4 <__hi0bits+0x3c>
 800b7e8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800b7ec:	f100 0001 	add.w	r0, r0, #1
 800b7f0:	bf08      	it	eq
 800b7f2:	2020      	moveq	r0, #32
 800b7f4:	4770      	bx	lr

0800b7f6 <__lo0bits>:
 800b7f6:	6803      	ldr	r3, [r0, #0]
 800b7f8:	4602      	mov	r2, r0
 800b7fa:	f013 0007 	ands.w	r0, r3, #7
 800b7fe:	d00b      	beq.n	800b818 <__lo0bits+0x22>
 800b800:	07d9      	lsls	r1, r3, #31
 800b802:	d421      	bmi.n	800b848 <__lo0bits+0x52>
 800b804:	0798      	lsls	r0, r3, #30
 800b806:	bf49      	itett	mi
 800b808:	085b      	lsrmi	r3, r3, #1
 800b80a:	089b      	lsrpl	r3, r3, #2
 800b80c:	2001      	movmi	r0, #1
 800b80e:	6013      	strmi	r3, [r2, #0]
 800b810:	bf5c      	itt	pl
 800b812:	6013      	strpl	r3, [r2, #0]
 800b814:	2002      	movpl	r0, #2
 800b816:	4770      	bx	lr
 800b818:	b299      	uxth	r1, r3
 800b81a:	b909      	cbnz	r1, 800b820 <__lo0bits+0x2a>
 800b81c:	0c1b      	lsrs	r3, r3, #16
 800b81e:	2010      	movs	r0, #16
 800b820:	b2d9      	uxtb	r1, r3
 800b822:	b909      	cbnz	r1, 800b828 <__lo0bits+0x32>
 800b824:	3008      	adds	r0, #8
 800b826:	0a1b      	lsrs	r3, r3, #8
 800b828:	0719      	lsls	r1, r3, #28
 800b82a:	bf04      	itt	eq
 800b82c:	091b      	lsreq	r3, r3, #4
 800b82e:	3004      	addeq	r0, #4
 800b830:	0799      	lsls	r1, r3, #30
 800b832:	bf04      	itt	eq
 800b834:	089b      	lsreq	r3, r3, #2
 800b836:	3002      	addeq	r0, #2
 800b838:	07d9      	lsls	r1, r3, #31
 800b83a:	d403      	bmi.n	800b844 <__lo0bits+0x4e>
 800b83c:	085b      	lsrs	r3, r3, #1
 800b83e:	f100 0001 	add.w	r0, r0, #1
 800b842:	d003      	beq.n	800b84c <__lo0bits+0x56>
 800b844:	6013      	str	r3, [r2, #0]
 800b846:	4770      	bx	lr
 800b848:	2000      	movs	r0, #0
 800b84a:	4770      	bx	lr
 800b84c:	2020      	movs	r0, #32
 800b84e:	4770      	bx	lr

0800b850 <__i2b>:
 800b850:	b510      	push	{r4, lr}
 800b852:	460c      	mov	r4, r1
 800b854:	2101      	movs	r1, #1
 800b856:	f7ff ff07 	bl	800b668 <_Balloc>
 800b85a:	4602      	mov	r2, r0
 800b85c:	b928      	cbnz	r0, 800b86a <__i2b+0x1a>
 800b85e:	4b05      	ldr	r3, [pc, #20]	@ (800b874 <__i2b+0x24>)
 800b860:	4805      	ldr	r0, [pc, #20]	@ (800b878 <__i2b+0x28>)
 800b862:	f240 1145 	movw	r1, #325	@ 0x145
 800b866:	f000 fcb5 	bl	800c1d4 <__assert_func>
 800b86a:	2301      	movs	r3, #1
 800b86c:	6144      	str	r4, [r0, #20]
 800b86e:	6103      	str	r3, [r0, #16]
 800b870:	bd10      	pop	{r4, pc}
 800b872:	bf00      	nop
 800b874:	0800ccec 	.word	0x0800ccec
 800b878:	0800ccfd 	.word	0x0800ccfd

0800b87c <__multiply>:
 800b87c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b880:	4617      	mov	r7, r2
 800b882:	690a      	ldr	r2, [r1, #16]
 800b884:	693b      	ldr	r3, [r7, #16]
 800b886:	429a      	cmp	r2, r3
 800b888:	bfa8      	it	ge
 800b88a:	463b      	movge	r3, r7
 800b88c:	4689      	mov	r9, r1
 800b88e:	bfa4      	itt	ge
 800b890:	460f      	movge	r7, r1
 800b892:	4699      	movge	r9, r3
 800b894:	693d      	ldr	r5, [r7, #16]
 800b896:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b89a:	68bb      	ldr	r3, [r7, #8]
 800b89c:	6879      	ldr	r1, [r7, #4]
 800b89e:	eb05 060a 	add.w	r6, r5, sl
 800b8a2:	42b3      	cmp	r3, r6
 800b8a4:	b085      	sub	sp, #20
 800b8a6:	bfb8      	it	lt
 800b8a8:	3101      	addlt	r1, #1
 800b8aa:	f7ff fedd 	bl	800b668 <_Balloc>
 800b8ae:	b930      	cbnz	r0, 800b8be <__multiply+0x42>
 800b8b0:	4602      	mov	r2, r0
 800b8b2:	4b41      	ldr	r3, [pc, #260]	@ (800b9b8 <__multiply+0x13c>)
 800b8b4:	4841      	ldr	r0, [pc, #260]	@ (800b9bc <__multiply+0x140>)
 800b8b6:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800b8ba:	f000 fc8b 	bl	800c1d4 <__assert_func>
 800b8be:	f100 0414 	add.w	r4, r0, #20
 800b8c2:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800b8c6:	4623      	mov	r3, r4
 800b8c8:	2200      	movs	r2, #0
 800b8ca:	4573      	cmp	r3, lr
 800b8cc:	d320      	bcc.n	800b910 <__multiply+0x94>
 800b8ce:	f107 0814 	add.w	r8, r7, #20
 800b8d2:	f109 0114 	add.w	r1, r9, #20
 800b8d6:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800b8da:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800b8de:	9302      	str	r3, [sp, #8]
 800b8e0:	1beb      	subs	r3, r5, r7
 800b8e2:	3b15      	subs	r3, #21
 800b8e4:	f023 0303 	bic.w	r3, r3, #3
 800b8e8:	3304      	adds	r3, #4
 800b8ea:	3715      	adds	r7, #21
 800b8ec:	42bd      	cmp	r5, r7
 800b8ee:	bf38      	it	cc
 800b8f0:	2304      	movcc	r3, #4
 800b8f2:	9301      	str	r3, [sp, #4]
 800b8f4:	9b02      	ldr	r3, [sp, #8]
 800b8f6:	9103      	str	r1, [sp, #12]
 800b8f8:	428b      	cmp	r3, r1
 800b8fa:	d80c      	bhi.n	800b916 <__multiply+0x9a>
 800b8fc:	2e00      	cmp	r6, #0
 800b8fe:	dd03      	ble.n	800b908 <__multiply+0x8c>
 800b900:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800b904:	2b00      	cmp	r3, #0
 800b906:	d055      	beq.n	800b9b4 <__multiply+0x138>
 800b908:	6106      	str	r6, [r0, #16]
 800b90a:	b005      	add	sp, #20
 800b90c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b910:	f843 2b04 	str.w	r2, [r3], #4
 800b914:	e7d9      	b.n	800b8ca <__multiply+0x4e>
 800b916:	f8b1 a000 	ldrh.w	sl, [r1]
 800b91a:	f1ba 0f00 	cmp.w	sl, #0
 800b91e:	d01f      	beq.n	800b960 <__multiply+0xe4>
 800b920:	46c4      	mov	ip, r8
 800b922:	46a1      	mov	r9, r4
 800b924:	2700      	movs	r7, #0
 800b926:	f85c 2b04 	ldr.w	r2, [ip], #4
 800b92a:	f8d9 3000 	ldr.w	r3, [r9]
 800b92e:	fa1f fb82 	uxth.w	fp, r2
 800b932:	b29b      	uxth	r3, r3
 800b934:	fb0a 330b 	mla	r3, sl, fp, r3
 800b938:	443b      	add	r3, r7
 800b93a:	f8d9 7000 	ldr.w	r7, [r9]
 800b93e:	0c12      	lsrs	r2, r2, #16
 800b940:	0c3f      	lsrs	r7, r7, #16
 800b942:	fb0a 7202 	mla	r2, sl, r2, r7
 800b946:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800b94a:	b29b      	uxth	r3, r3
 800b94c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b950:	4565      	cmp	r5, ip
 800b952:	f849 3b04 	str.w	r3, [r9], #4
 800b956:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800b95a:	d8e4      	bhi.n	800b926 <__multiply+0xaa>
 800b95c:	9b01      	ldr	r3, [sp, #4]
 800b95e:	50e7      	str	r7, [r4, r3]
 800b960:	9b03      	ldr	r3, [sp, #12]
 800b962:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800b966:	3104      	adds	r1, #4
 800b968:	f1b9 0f00 	cmp.w	r9, #0
 800b96c:	d020      	beq.n	800b9b0 <__multiply+0x134>
 800b96e:	6823      	ldr	r3, [r4, #0]
 800b970:	4647      	mov	r7, r8
 800b972:	46a4      	mov	ip, r4
 800b974:	f04f 0a00 	mov.w	sl, #0
 800b978:	f8b7 b000 	ldrh.w	fp, [r7]
 800b97c:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800b980:	fb09 220b 	mla	r2, r9, fp, r2
 800b984:	4452      	add	r2, sl
 800b986:	b29b      	uxth	r3, r3
 800b988:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b98c:	f84c 3b04 	str.w	r3, [ip], #4
 800b990:	f857 3b04 	ldr.w	r3, [r7], #4
 800b994:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b998:	f8bc 3000 	ldrh.w	r3, [ip]
 800b99c:	fb09 330a 	mla	r3, r9, sl, r3
 800b9a0:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800b9a4:	42bd      	cmp	r5, r7
 800b9a6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b9aa:	d8e5      	bhi.n	800b978 <__multiply+0xfc>
 800b9ac:	9a01      	ldr	r2, [sp, #4]
 800b9ae:	50a3      	str	r3, [r4, r2]
 800b9b0:	3404      	adds	r4, #4
 800b9b2:	e79f      	b.n	800b8f4 <__multiply+0x78>
 800b9b4:	3e01      	subs	r6, #1
 800b9b6:	e7a1      	b.n	800b8fc <__multiply+0x80>
 800b9b8:	0800ccec 	.word	0x0800ccec
 800b9bc:	0800ccfd 	.word	0x0800ccfd

0800b9c0 <__pow5mult>:
 800b9c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b9c4:	4615      	mov	r5, r2
 800b9c6:	f012 0203 	ands.w	r2, r2, #3
 800b9ca:	4607      	mov	r7, r0
 800b9cc:	460e      	mov	r6, r1
 800b9ce:	d007      	beq.n	800b9e0 <__pow5mult+0x20>
 800b9d0:	4c25      	ldr	r4, [pc, #148]	@ (800ba68 <__pow5mult+0xa8>)
 800b9d2:	3a01      	subs	r2, #1
 800b9d4:	2300      	movs	r3, #0
 800b9d6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b9da:	f7ff fea7 	bl	800b72c <__multadd>
 800b9de:	4606      	mov	r6, r0
 800b9e0:	10ad      	asrs	r5, r5, #2
 800b9e2:	d03d      	beq.n	800ba60 <__pow5mult+0xa0>
 800b9e4:	69fc      	ldr	r4, [r7, #28]
 800b9e6:	b97c      	cbnz	r4, 800ba08 <__pow5mult+0x48>
 800b9e8:	2010      	movs	r0, #16
 800b9ea:	f7ff fd87 	bl	800b4fc <malloc>
 800b9ee:	4602      	mov	r2, r0
 800b9f0:	61f8      	str	r0, [r7, #28]
 800b9f2:	b928      	cbnz	r0, 800ba00 <__pow5mult+0x40>
 800b9f4:	4b1d      	ldr	r3, [pc, #116]	@ (800ba6c <__pow5mult+0xac>)
 800b9f6:	481e      	ldr	r0, [pc, #120]	@ (800ba70 <__pow5mult+0xb0>)
 800b9f8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800b9fc:	f000 fbea 	bl	800c1d4 <__assert_func>
 800ba00:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ba04:	6004      	str	r4, [r0, #0]
 800ba06:	60c4      	str	r4, [r0, #12]
 800ba08:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800ba0c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ba10:	b94c      	cbnz	r4, 800ba26 <__pow5mult+0x66>
 800ba12:	f240 2171 	movw	r1, #625	@ 0x271
 800ba16:	4638      	mov	r0, r7
 800ba18:	f7ff ff1a 	bl	800b850 <__i2b>
 800ba1c:	2300      	movs	r3, #0
 800ba1e:	f8c8 0008 	str.w	r0, [r8, #8]
 800ba22:	4604      	mov	r4, r0
 800ba24:	6003      	str	r3, [r0, #0]
 800ba26:	f04f 0900 	mov.w	r9, #0
 800ba2a:	07eb      	lsls	r3, r5, #31
 800ba2c:	d50a      	bpl.n	800ba44 <__pow5mult+0x84>
 800ba2e:	4631      	mov	r1, r6
 800ba30:	4622      	mov	r2, r4
 800ba32:	4638      	mov	r0, r7
 800ba34:	f7ff ff22 	bl	800b87c <__multiply>
 800ba38:	4631      	mov	r1, r6
 800ba3a:	4680      	mov	r8, r0
 800ba3c:	4638      	mov	r0, r7
 800ba3e:	f7ff fe53 	bl	800b6e8 <_Bfree>
 800ba42:	4646      	mov	r6, r8
 800ba44:	106d      	asrs	r5, r5, #1
 800ba46:	d00b      	beq.n	800ba60 <__pow5mult+0xa0>
 800ba48:	6820      	ldr	r0, [r4, #0]
 800ba4a:	b938      	cbnz	r0, 800ba5c <__pow5mult+0x9c>
 800ba4c:	4622      	mov	r2, r4
 800ba4e:	4621      	mov	r1, r4
 800ba50:	4638      	mov	r0, r7
 800ba52:	f7ff ff13 	bl	800b87c <__multiply>
 800ba56:	6020      	str	r0, [r4, #0]
 800ba58:	f8c0 9000 	str.w	r9, [r0]
 800ba5c:	4604      	mov	r4, r0
 800ba5e:	e7e4      	b.n	800ba2a <__pow5mult+0x6a>
 800ba60:	4630      	mov	r0, r6
 800ba62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ba66:	bf00      	nop
 800ba68:	0800cdb0 	.word	0x0800cdb0
 800ba6c:	0800cc7d 	.word	0x0800cc7d
 800ba70:	0800ccfd 	.word	0x0800ccfd

0800ba74 <__lshift>:
 800ba74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ba78:	460c      	mov	r4, r1
 800ba7a:	6849      	ldr	r1, [r1, #4]
 800ba7c:	6923      	ldr	r3, [r4, #16]
 800ba7e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ba82:	68a3      	ldr	r3, [r4, #8]
 800ba84:	4607      	mov	r7, r0
 800ba86:	4691      	mov	r9, r2
 800ba88:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ba8c:	f108 0601 	add.w	r6, r8, #1
 800ba90:	42b3      	cmp	r3, r6
 800ba92:	db0b      	blt.n	800baac <__lshift+0x38>
 800ba94:	4638      	mov	r0, r7
 800ba96:	f7ff fde7 	bl	800b668 <_Balloc>
 800ba9a:	4605      	mov	r5, r0
 800ba9c:	b948      	cbnz	r0, 800bab2 <__lshift+0x3e>
 800ba9e:	4602      	mov	r2, r0
 800baa0:	4b28      	ldr	r3, [pc, #160]	@ (800bb44 <__lshift+0xd0>)
 800baa2:	4829      	ldr	r0, [pc, #164]	@ (800bb48 <__lshift+0xd4>)
 800baa4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800baa8:	f000 fb94 	bl	800c1d4 <__assert_func>
 800baac:	3101      	adds	r1, #1
 800baae:	005b      	lsls	r3, r3, #1
 800bab0:	e7ee      	b.n	800ba90 <__lshift+0x1c>
 800bab2:	2300      	movs	r3, #0
 800bab4:	f100 0114 	add.w	r1, r0, #20
 800bab8:	f100 0210 	add.w	r2, r0, #16
 800babc:	4618      	mov	r0, r3
 800babe:	4553      	cmp	r3, sl
 800bac0:	db33      	blt.n	800bb2a <__lshift+0xb6>
 800bac2:	6920      	ldr	r0, [r4, #16]
 800bac4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800bac8:	f104 0314 	add.w	r3, r4, #20
 800bacc:	f019 091f 	ands.w	r9, r9, #31
 800bad0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800bad4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800bad8:	d02b      	beq.n	800bb32 <__lshift+0xbe>
 800bada:	f1c9 0e20 	rsb	lr, r9, #32
 800bade:	468a      	mov	sl, r1
 800bae0:	2200      	movs	r2, #0
 800bae2:	6818      	ldr	r0, [r3, #0]
 800bae4:	fa00 f009 	lsl.w	r0, r0, r9
 800bae8:	4310      	orrs	r0, r2
 800baea:	f84a 0b04 	str.w	r0, [sl], #4
 800baee:	f853 2b04 	ldr.w	r2, [r3], #4
 800baf2:	459c      	cmp	ip, r3
 800baf4:	fa22 f20e 	lsr.w	r2, r2, lr
 800baf8:	d8f3      	bhi.n	800bae2 <__lshift+0x6e>
 800bafa:	ebac 0304 	sub.w	r3, ip, r4
 800bafe:	3b15      	subs	r3, #21
 800bb00:	f023 0303 	bic.w	r3, r3, #3
 800bb04:	3304      	adds	r3, #4
 800bb06:	f104 0015 	add.w	r0, r4, #21
 800bb0a:	4560      	cmp	r0, ip
 800bb0c:	bf88      	it	hi
 800bb0e:	2304      	movhi	r3, #4
 800bb10:	50ca      	str	r2, [r1, r3]
 800bb12:	b10a      	cbz	r2, 800bb18 <__lshift+0xa4>
 800bb14:	f108 0602 	add.w	r6, r8, #2
 800bb18:	3e01      	subs	r6, #1
 800bb1a:	4638      	mov	r0, r7
 800bb1c:	612e      	str	r6, [r5, #16]
 800bb1e:	4621      	mov	r1, r4
 800bb20:	f7ff fde2 	bl	800b6e8 <_Bfree>
 800bb24:	4628      	mov	r0, r5
 800bb26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bb2a:	f842 0f04 	str.w	r0, [r2, #4]!
 800bb2e:	3301      	adds	r3, #1
 800bb30:	e7c5      	b.n	800babe <__lshift+0x4a>
 800bb32:	3904      	subs	r1, #4
 800bb34:	f853 2b04 	ldr.w	r2, [r3], #4
 800bb38:	f841 2f04 	str.w	r2, [r1, #4]!
 800bb3c:	459c      	cmp	ip, r3
 800bb3e:	d8f9      	bhi.n	800bb34 <__lshift+0xc0>
 800bb40:	e7ea      	b.n	800bb18 <__lshift+0xa4>
 800bb42:	bf00      	nop
 800bb44:	0800ccec 	.word	0x0800ccec
 800bb48:	0800ccfd 	.word	0x0800ccfd

0800bb4c <__mcmp>:
 800bb4c:	690a      	ldr	r2, [r1, #16]
 800bb4e:	4603      	mov	r3, r0
 800bb50:	6900      	ldr	r0, [r0, #16]
 800bb52:	1a80      	subs	r0, r0, r2
 800bb54:	b530      	push	{r4, r5, lr}
 800bb56:	d10e      	bne.n	800bb76 <__mcmp+0x2a>
 800bb58:	3314      	adds	r3, #20
 800bb5a:	3114      	adds	r1, #20
 800bb5c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800bb60:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800bb64:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800bb68:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800bb6c:	4295      	cmp	r5, r2
 800bb6e:	d003      	beq.n	800bb78 <__mcmp+0x2c>
 800bb70:	d205      	bcs.n	800bb7e <__mcmp+0x32>
 800bb72:	f04f 30ff 	mov.w	r0, #4294967295
 800bb76:	bd30      	pop	{r4, r5, pc}
 800bb78:	42a3      	cmp	r3, r4
 800bb7a:	d3f3      	bcc.n	800bb64 <__mcmp+0x18>
 800bb7c:	e7fb      	b.n	800bb76 <__mcmp+0x2a>
 800bb7e:	2001      	movs	r0, #1
 800bb80:	e7f9      	b.n	800bb76 <__mcmp+0x2a>
	...

0800bb84 <__mdiff>:
 800bb84:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb88:	4689      	mov	r9, r1
 800bb8a:	4606      	mov	r6, r0
 800bb8c:	4611      	mov	r1, r2
 800bb8e:	4648      	mov	r0, r9
 800bb90:	4614      	mov	r4, r2
 800bb92:	f7ff ffdb 	bl	800bb4c <__mcmp>
 800bb96:	1e05      	subs	r5, r0, #0
 800bb98:	d112      	bne.n	800bbc0 <__mdiff+0x3c>
 800bb9a:	4629      	mov	r1, r5
 800bb9c:	4630      	mov	r0, r6
 800bb9e:	f7ff fd63 	bl	800b668 <_Balloc>
 800bba2:	4602      	mov	r2, r0
 800bba4:	b928      	cbnz	r0, 800bbb2 <__mdiff+0x2e>
 800bba6:	4b3f      	ldr	r3, [pc, #252]	@ (800bca4 <__mdiff+0x120>)
 800bba8:	f240 2137 	movw	r1, #567	@ 0x237
 800bbac:	483e      	ldr	r0, [pc, #248]	@ (800bca8 <__mdiff+0x124>)
 800bbae:	f000 fb11 	bl	800c1d4 <__assert_func>
 800bbb2:	2301      	movs	r3, #1
 800bbb4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800bbb8:	4610      	mov	r0, r2
 800bbba:	b003      	add	sp, #12
 800bbbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bbc0:	bfbc      	itt	lt
 800bbc2:	464b      	movlt	r3, r9
 800bbc4:	46a1      	movlt	r9, r4
 800bbc6:	4630      	mov	r0, r6
 800bbc8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800bbcc:	bfba      	itte	lt
 800bbce:	461c      	movlt	r4, r3
 800bbd0:	2501      	movlt	r5, #1
 800bbd2:	2500      	movge	r5, #0
 800bbd4:	f7ff fd48 	bl	800b668 <_Balloc>
 800bbd8:	4602      	mov	r2, r0
 800bbda:	b918      	cbnz	r0, 800bbe4 <__mdiff+0x60>
 800bbdc:	4b31      	ldr	r3, [pc, #196]	@ (800bca4 <__mdiff+0x120>)
 800bbde:	f240 2145 	movw	r1, #581	@ 0x245
 800bbe2:	e7e3      	b.n	800bbac <__mdiff+0x28>
 800bbe4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800bbe8:	6926      	ldr	r6, [r4, #16]
 800bbea:	60c5      	str	r5, [r0, #12]
 800bbec:	f109 0310 	add.w	r3, r9, #16
 800bbf0:	f109 0514 	add.w	r5, r9, #20
 800bbf4:	f104 0e14 	add.w	lr, r4, #20
 800bbf8:	f100 0b14 	add.w	fp, r0, #20
 800bbfc:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800bc00:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800bc04:	9301      	str	r3, [sp, #4]
 800bc06:	46d9      	mov	r9, fp
 800bc08:	f04f 0c00 	mov.w	ip, #0
 800bc0c:	9b01      	ldr	r3, [sp, #4]
 800bc0e:	f85e 0b04 	ldr.w	r0, [lr], #4
 800bc12:	f853 af04 	ldr.w	sl, [r3, #4]!
 800bc16:	9301      	str	r3, [sp, #4]
 800bc18:	fa1f f38a 	uxth.w	r3, sl
 800bc1c:	4619      	mov	r1, r3
 800bc1e:	b283      	uxth	r3, r0
 800bc20:	1acb      	subs	r3, r1, r3
 800bc22:	0c00      	lsrs	r0, r0, #16
 800bc24:	4463      	add	r3, ip
 800bc26:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800bc2a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800bc2e:	b29b      	uxth	r3, r3
 800bc30:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800bc34:	4576      	cmp	r6, lr
 800bc36:	f849 3b04 	str.w	r3, [r9], #4
 800bc3a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800bc3e:	d8e5      	bhi.n	800bc0c <__mdiff+0x88>
 800bc40:	1b33      	subs	r3, r6, r4
 800bc42:	3b15      	subs	r3, #21
 800bc44:	f023 0303 	bic.w	r3, r3, #3
 800bc48:	3415      	adds	r4, #21
 800bc4a:	3304      	adds	r3, #4
 800bc4c:	42a6      	cmp	r6, r4
 800bc4e:	bf38      	it	cc
 800bc50:	2304      	movcc	r3, #4
 800bc52:	441d      	add	r5, r3
 800bc54:	445b      	add	r3, fp
 800bc56:	461e      	mov	r6, r3
 800bc58:	462c      	mov	r4, r5
 800bc5a:	4544      	cmp	r4, r8
 800bc5c:	d30e      	bcc.n	800bc7c <__mdiff+0xf8>
 800bc5e:	f108 0103 	add.w	r1, r8, #3
 800bc62:	1b49      	subs	r1, r1, r5
 800bc64:	f021 0103 	bic.w	r1, r1, #3
 800bc68:	3d03      	subs	r5, #3
 800bc6a:	45a8      	cmp	r8, r5
 800bc6c:	bf38      	it	cc
 800bc6e:	2100      	movcc	r1, #0
 800bc70:	440b      	add	r3, r1
 800bc72:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800bc76:	b191      	cbz	r1, 800bc9e <__mdiff+0x11a>
 800bc78:	6117      	str	r7, [r2, #16]
 800bc7a:	e79d      	b.n	800bbb8 <__mdiff+0x34>
 800bc7c:	f854 1b04 	ldr.w	r1, [r4], #4
 800bc80:	46e6      	mov	lr, ip
 800bc82:	0c08      	lsrs	r0, r1, #16
 800bc84:	fa1c fc81 	uxtah	ip, ip, r1
 800bc88:	4471      	add	r1, lr
 800bc8a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800bc8e:	b289      	uxth	r1, r1
 800bc90:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800bc94:	f846 1b04 	str.w	r1, [r6], #4
 800bc98:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800bc9c:	e7dd      	b.n	800bc5a <__mdiff+0xd6>
 800bc9e:	3f01      	subs	r7, #1
 800bca0:	e7e7      	b.n	800bc72 <__mdiff+0xee>
 800bca2:	bf00      	nop
 800bca4:	0800ccec 	.word	0x0800ccec
 800bca8:	0800ccfd 	.word	0x0800ccfd

0800bcac <__d2b>:
 800bcac:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800bcb0:	460f      	mov	r7, r1
 800bcb2:	2101      	movs	r1, #1
 800bcb4:	ec59 8b10 	vmov	r8, r9, d0
 800bcb8:	4616      	mov	r6, r2
 800bcba:	f7ff fcd5 	bl	800b668 <_Balloc>
 800bcbe:	4604      	mov	r4, r0
 800bcc0:	b930      	cbnz	r0, 800bcd0 <__d2b+0x24>
 800bcc2:	4602      	mov	r2, r0
 800bcc4:	4b23      	ldr	r3, [pc, #140]	@ (800bd54 <__d2b+0xa8>)
 800bcc6:	4824      	ldr	r0, [pc, #144]	@ (800bd58 <__d2b+0xac>)
 800bcc8:	f240 310f 	movw	r1, #783	@ 0x30f
 800bccc:	f000 fa82 	bl	800c1d4 <__assert_func>
 800bcd0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800bcd4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800bcd8:	b10d      	cbz	r5, 800bcde <__d2b+0x32>
 800bcda:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800bcde:	9301      	str	r3, [sp, #4]
 800bce0:	f1b8 0300 	subs.w	r3, r8, #0
 800bce4:	d023      	beq.n	800bd2e <__d2b+0x82>
 800bce6:	4668      	mov	r0, sp
 800bce8:	9300      	str	r3, [sp, #0]
 800bcea:	f7ff fd84 	bl	800b7f6 <__lo0bits>
 800bcee:	e9dd 1200 	ldrd	r1, r2, [sp]
 800bcf2:	b1d0      	cbz	r0, 800bd2a <__d2b+0x7e>
 800bcf4:	f1c0 0320 	rsb	r3, r0, #32
 800bcf8:	fa02 f303 	lsl.w	r3, r2, r3
 800bcfc:	430b      	orrs	r3, r1
 800bcfe:	40c2      	lsrs	r2, r0
 800bd00:	6163      	str	r3, [r4, #20]
 800bd02:	9201      	str	r2, [sp, #4]
 800bd04:	9b01      	ldr	r3, [sp, #4]
 800bd06:	61a3      	str	r3, [r4, #24]
 800bd08:	2b00      	cmp	r3, #0
 800bd0a:	bf0c      	ite	eq
 800bd0c:	2201      	moveq	r2, #1
 800bd0e:	2202      	movne	r2, #2
 800bd10:	6122      	str	r2, [r4, #16]
 800bd12:	b1a5      	cbz	r5, 800bd3e <__d2b+0x92>
 800bd14:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800bd18:	4405      	add	r5, r0
 800bd1a:	603d      	str	r5, [r7, #0]
 800bd1c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800bd20:	6030      	str	r0, [r6, #0]
 800bd22:	4620      	mov	r0, r4
 800bd24:	b003      	add	sp, #12
 800bd26:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bd2a:	6161      	str	r1, [r4, #20]
 800bd2c:	e7ea      	b.n	800bd04 <__d2b+0x58>
 800bd2e:	a801      	add	r0, sp, #4
 800bd30:	f7ff fd61 	bl	800b7f6 <__lo0bits>
 800bd34:	9b01      	ldr	r3, [sp, #4]
 800bd36:	6163      	str	r3, [r4, #20]
 800bd38:	3020      	adds	r0, #32
 800bd3a:	2201      	movs	r2, #1
 800bd3c:	e7e8      	b.n	800bd10 <__d2b+0x64>
 800bd3e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800bd42:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800bd46:	6038      	str	r0, [r7, #0]
 800bd48:	6918      	ldr	r0, [r3, #16]
 800bd4a:	f7ff fd35 	bl	800b7b8 <__hi0bits>
 800bd4e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800bd52:	e7e5      	b.n	800bd20 <__d2b+0x74>
 800bd54:	0800ccec 	.word	0x0800ccec
 800bd58:	0800ccfd 	.word	0x0800ccfd

0800bd5c <__ssputs_r>:
 800bd5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bd60:	688e      	ldr	r6, [r1, #8]
 800bd62:	461f      	mov	r7, r3
 800bd64:	42be      	cmp	r6, r7
 800bd66:	680b      	ldr	r3, [r1, #0]
 800bd68:	4682      	mov	sl, r0
 800bd6a:	460c      	mov	r4, r1
 800bd6c:	4690      	mov	r8, r2
 800bd6e:	d82d      	bhi.n	800bdcc <__ssputs_r+0x70>
 800bd70:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800bd74:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800bd78:	d026      	beq.n	800bdc8 <__ssputs_r+0x6c>
 800bd7a:	6965      	ldr	r5, [r4, #20]
 800bd7c:	6909      	ldr	r1, [r1, #16]
 800bd7e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bd82:	eba3 0901 	sub.w	r9, r3, r1
 800bd86:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800bd8a:	1c7b      	adds	r3, r7, #1
 800bd8c:	444b      	add	r3, r9
 800bd8e:	106d      	asrs	r5, r5, #1
 800bd90:	429d      	cmp	r5, r3
 800bd92:	bf38      	it	cc
 800bd94:	461d      	movcc	r5, r3
 800bd96:	0553      	lsls	r3, r2, #21
 800bd98:	d527      	bpl.n	800bdea <__ssputs_r+0x8e>
 800bd9a:	4629      	mov	r1, r5
 800bd9c:	f7ff fbd8 	bl	800b550 <_malloc_r>
 800bda0:	4606      	mov	r6, r0
 800bda2:	b360      	cbz	r0, 800bdfe <__ssputs_r+0xa2>
 800bda4:	6921      	ldr	r1, [r4, #16]
 800bda6:	464a      	mov	r2, r9
 800bda8:	f000 fa06 	bl	800c1b8 <memcpy>
 800bdac:	89a3      	ldrh	r3, [r4, #12]
 800bdae:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800bdb2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bdb6:	81a3      	strh	r3, [r4, #12]
 800bdb8:	6126      	str	r6, [r4, #16]
 800bdba:	6165      	str	r5, [r4, #20]
 800bdbc:	444e      	add	r6, r9
 800bdbe:	eba5 0509 	sub.w	r5, r5, r9
 800bdc2:	6026      	str	r6, [r4, #0]
 800bdc4:	60a5      	str	r5, [r4, #8]
 800bdc6:	463e      	mov	r6, r7
 800bdc8:	42be      	cmp	r6, r7
 800bdca:	d900      	bls.n	800bdce <__ssputs_r+0x72>
 800bdcc:	463e      	mov	r6, r7
 800bdce:	6820      	ldr	r0, [r4, #0]
 800bdd0:	4632      	mov	r2, r6
 800bdd2:	4641      	mov	r1, r8
 800bdd4:	f000 f9c6 	bl	800c164 <memmove>
 800bdd8:	68a3      	ldr	r3, [r4, #8]
 800bdda:	1b9b      	subs	r3, r3, r6
 800bddc:	60a3      	str	r3, [r4, #8]
 800bdde:	6823      	ldr	r3, [r4, #0]
 800bde0:	4433      	add	r3, r6
 800bde2:	6023      	str	r3, [r4, #0]
 800bde4:	2000      	movs	r0, #0
 800bde6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bdea:	462a      	mov	r2, r5
 800bdec:	f000 fa36 	bl	800c25c <_realloc_r>
 800bdf0:	4606      	mov	r6, r0
 800bdf2:	2800      	cmp	r0, #0
 800bdf4:	d1e0      	bne.n	800bdb8 <__ssputs_r+0x5c>
 800bdf6:	6921      	ldr	r1, [r4, #16]
 800bdf8:	4650      	mov	r0, sl
 800bdfa:	f7ff fb35 	bl	800b468 <_free_r>
 800bdfe:	230c      	movs	r3, #12
 800be00:	f8ca 3000 	str.w	r3, [sl]
 800be04:	89a3      	ldrh	r3, [r4, #12]
 800be06:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800be0a:	81a3      	strh	r3, [r4, #12]
 800be0c:	f04f 30ff 	mov.w	r0, #4294967295
 800be10:	e7e9      	b.n	800bde6 <__ssputs_r+0x8a>
	...

0800be14 <_svfiprintf_r>:
 800be14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be18:	4698      	mov	r8, r3
 800be1a:	898b      	ldrh	r3, [r1, #12]
 800be1c:	061b      	lsls	r3, r3, #24
 800be1e:	b09d      	sub	sp, #116	@ 0x74
 800be20:	4607      	mov	r7, r0
 800be22:	460d      	mov	r5, r1
 800be24:	4614      	mov	r4, r2
 800be26:	d510      	bpl.n	800be4a <_svfiprintf_r+0x36>
 800be28:	690b      	ldr	r3, [r1, #16]
 800be2a:	b973      	cbnz	r3, 800be4a <_svfiprintf_r+0x36>
 800be2c:	2140      	movs	r1, #64	@ 0x40
 800be2e:	f7ff fb8f 	bl	800b550 <_malloc_r>
 800be32:	6028      	str	r0, [r5, #0]
 800be34:	6128      	str	r0, [r5, #16]
 800be36:	b930      	cbnz	r0, 800be46 <_svfiprintf_r+0x32>
 800be38:	230c      	movs	r3, #12
 800be3a:	603b      	str	r3, [r7, #0]
 800be3c:	f04f 30ff 	mov.w	r0, #4294967295
 800be40:	b01d      	add	sp, #116	@ 0x74
 800be42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be46:	2340      	movs	r3, #64	@ 0x40
 800be48:	616b      	str	r3, [r5, #20]
 800be4a:	2300      	movs	r3, #0
 800be4c:	9309      	str	r3, [sp, #36]	@ 0x24
 800be4e:	2320      	movs	r3, #32
 800be50:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800be54:	f8cd 800c 	str.w	r8, [sp, #12]
 800be58:	2330      	movs	r3, #48	@ 0x30
 800be5a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800bff8 <_svfiprintf_r+0x1e4>
 800be5e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800be62:	f04f 0901 	mov.w	r9, #1
 800be66:	4623      	mov	r3, r4
 800be68:	469a      	mov	sl, r3
 800be6a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800be6e:	b10a      	cbz	r2, 800be74 <_svfiprintf_r+0x60>
 800be70:	2a25      	cmp	r2, #37	@ 0x25
 800be72:	d1f9      	bne.n	800be68 <_svfiprintf_r+0x54>
 800be74:	ebba 0b04 	subs.w	fp, sl, r4
 800be78:	d00b      	beq.n	800be92 <_svfiprintf_r+0x7e>
 800be7a:	465b      	mov	r3, fp
 800be7c:	4622      	mov	r2, r4
 800be7e:	4629      	mov	r1, r5
 800be80:	4638      	mov	r0, r7
 800be82:	f7ff ff6b 	bl	800bd5c <__ssputs_r>
 800be86:	3001      	adds	r0, #1
 800be88:	f000 80a7 	beq.w	800bfda <_svfiprintf_r+0x1c6>
 800be8c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800be8e:	445a      	add	r2, fp
 800be90:	9209      	str	r2, [sp, #36]	@ 0x24
 800be92:	f89a 3000 	ldrb.w	r3, [sl]
 800be96:	2b00      	cmp	r3, #0
 800be98:	f000 809f 	beq.w	800bfda <_svfiprintf_r+0x1c6>
 800be9c:	2300      	movs	r3, #0
 800be9e:	f04f 32ff 	mov.w	r2, #4294967295
 800bea2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bea6:	f10a 0a01 	add.w	sl, sl, #1
 800beaa:	9304      	str	r3, [sp, #16]
 800beac:	9307      	str	r3, [sp, #28]
 800beae:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800beb2:	931a      	str	r3, [sp, #104]	@ 0x68
 800beb4:	4654      	mov	r4, sl
 800beb6:	2205      	movs	r2, #5
 800beb8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bebc:	484e      	ldr	r0, [pc, #312]	@ (800bff8 <_svfiprintf_r+0x1e4>)
 800bebe:	f7f4 f997 	bl	80001f0 <memchr>
 800bec2:	9a04      	ldr	r2, [sp, #16]
 800bec4:	b9d8      	cbnz	r0, 800befe <_svfiprintf_r+0xea>
 800bec6:	06d0      	lsls	r0, r2, #27
 800bec8:	bf44      	itt	mi
 800beca:	2320      	movmi	r3, #32
 800becc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bed0:	0711      	lsls	r1, r2, #28
 800bed2:	bf44      	itt	mi
 800bed4:	232b      	movmi	r3, #43	@ 0x2b
 800bed6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800beda:	f89a 3000 	ldrb.w	r3, [sl]
 800bede:	2b2a      	cmp	r3, #42	@ 0x2a
 800bee0:	d015      	beq.n	800bf0e <_svfiprintf_r+0xfa>
 800bee2:	9a07      	ldr	r2, [sp, #28]
 800bee4:	4654      	mov	r4, sl
 800bee6:	2000      	movs	r0, #0
 800bee8:	f04f 0c0a 	mov.w	ip, #10
 800beec:	4621      	mov	r1, r4
 800beee:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bef2:	3b30      	subs	r3, #48	@ 0x30
 800bef4:	2b09      	cmp	r3, #9
 800bef6:	d94b      	bls.n	800bf90 <_svfiprintf_r+0x17c>
 800bef8:	b1b0      	cbz	r0, 800bf28 <_svfiprintf_r+0x114>
 800befa:	9207      	str	r2, [sp, #28]
 800befc:	e014      	b.n	800bf28 <_svfiprintf_r+0x114>
 800befe:	eba0 0308 	sub.w	r3, r0, r8
 800bf02:	fa09 f303 	lsl.w	r3, r9, r3
 800bf06:	4313      	orrs	r3, r2
 800bf08:	9304      	str	r3, [sp, #16]
 800bf0a:	46a2      	mov	sl, r4
 800bf0c:	e7d2      	b.n	800beb4 <_svfiprintf_r+0xa0>
 800bf0e:	9b03      	ldr	r3, [sp, #12]
 800bf10:	1d19      	adds	r1, r3, #4
 800bf12:	681b      	ldr	r3, [r3, #0]
 800bf14:	9103      	str	r1, [sp, #12]
 800bf16:	2b00      	cmp	r3, #0
 800bf18:	bfbb      	ittet	lt
 800bf1a:	425b      	neglt	r3, r3
 800bf1c:	f042 0202 	orrlt.w	r2, r2, #2
 800bf20:	9307      	strge	r3, [sp, #28]
 800bf22:	9307      	strlt	r3, [sp, #28]
 800bf24:	bfb8      	it	lt
 800bf26:	9204      	strlt	r2, [sp, #16]
 800bf28:	7823      	ldrb	r3, [r4, #0]
 800bf2a:	2b2e      	cmp	r3, #46	@ 0x2e
 800bf2c:	d10a      	bne.n	800bf44 <_svfiprintf_r+0x130>
 800bf2e:	7863      	ldrb	r3, [r4, #1]
 800bf30:	2b2a      	cmp	r3, #42	@ 0x2a
 800bf32:	d132      	bne.n	800bf9a <_svfiprintf_r+0x186>
 800bf34:	9b03      	ldr	r3, [sp, #12]
 800bf36:	1d1a      	adds	r2, r3, #4
 800bf38:	681b      	ldr	r3, [r3, #0]
 800bf3a:	9203      	str	r2, [sp, #12]
 800bf3c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800bf40:	3402      	adds	r4, #2
 800bf42:	9305      	str	r3, [sp, #20]
 800bf44:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800c008 <_svfiprintf_r+0x1f4>
 800bf48:	7821      	ldrb	r1, [r4, #0]
 800bf4a:	2203      	movs	r2, #3
 800bf4c:	4650      	mov	r0, sl
 800bf4e:	f7f4 f94f 	bl	80001f0 <memchr>
 800bf52:	b138      	cbz	r0, 800bf64 <_svfiprintf_r+0x150>
 800bf54:	9b04      	ldr	r3, [sp, #16]
 800bf56:	eba0 000a 	sub.w	r0, r0, sl
 800bf5a:	2240      	movs	r2, #64	@ 0x40
 800bf5c:	4082      	lsls	r2, r0
 800bf5e:	4313      	orrs	r3, r2
 800bf60:	3401      	adds	r4, #1
 800bf62:	9304      	str	r3, [sp, #16]
 800bf64:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bf68:	4824      	ldr	r0, [pc, #144]	@ (800bffc <_svfiprintf_r+0x1e8>)
 800bf6a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800bf6e:	2206      	movs	r2, #6
 800bf70:	f7f4 f93e 	bl	80001f0 <memchr>
 800bf74:	2800      	cmp	r0, #0
 800bf76:	d036      	beq.n	800bfe6 <_svfiprintf_r+0x1d2>
 800bf78:	4b21      	ldr	r3, [pc, #132]	@ (800c000 <_svfiprintf_r+0x1ec>)
 800bf7a:	bb1b      	cbnz	r3, 800bfc4 <_svfiprintf_r+0x1b0>
 800bf7c:	9b03      	ldr	r3, [sp, #12]
 800bf7e:	3307      	adds	r3, #7
 800bf80:	f023 0307 	bic.w	r3, r3, #7
 800bf84:	3308      	adds	r3, #8
 800bf86:	9303      	str	r3, [sp, #12]
 800bf88:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bf8a:	4433      	add	r3, r6
 800bf8c:	9309      	str	r3, [sp, #36]	@ 0x24
 800bf8e:	e76a      	b.n	800be66 <_svfiprintf_r+0x52>
 800bf90:	fb0c 3202 	mla	r2, ip, r2, r3
 800bf94:	460c      	mov	r4, r1
 800bf96:	2001      	movs	r0, #1
 800bf98:	e7a8      	b.n	800beec <_svfiprintf_r+0xd8>
 800bf9a:	2300      	movs	r3, #0
 800bf9c:	3401      	adds	r4, #1
 800bf9e:	9305      	str	r3, [sp, #20]
 800bfa0:	4619      	mov	r1, r3
 800bfa2:	f04f 0c0a 	mov.w	ip, #10
 800bfa6:	4620      	mov	r0, r4
 800bfa8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bfac:	3a30      	subs	r2, #48	@ 0x30
 800bfae:	2a09      	cmp	r2, #9
 800bfb0:	d903      	bls.n	800bfba <_svfiprintf_r+0x1a6>
 800bfb2:	2b00      	cmp	r3, #0
 800bfb4:	d0c6      	beq.n	800bf44 <_svfiprintf_r+0x130>
 800bfb6:	9105      	str	r1, [sp, #20]
 800bfb8:	e7c4      	b.n	800bf44 <_svfiprintf_r+0x130>
 800bfba:	fb0c 2101 	mla	r1, ip, r1, r2
 800bfbe:	4604      	mov	r4, r0
 800bfc0:	2301      	movs	r3, #1
 800bfc2:	e7f0      	b.n	800bfa6 <_svfiprintf_r+0x192>
 800bfc4:	ab03      	add	r3, sp, #12
 800bfc6:	9300      	str	r3, [sp, #0]
 800bfc8:	462a      	mov	r2, r5
 800bfca:	4b0e      	ldr	r3, [pc, #56]	@ (800c004 <_svfiprintf_r+0x1f0>)
 800bfcc:	a904      	add	r1, sp, #16
 800bfce:	4638      	mov	r0, r7
 800bfd0:	f7fd fe92 	bl	8009cf8 <_printf_float>
 800bfd4:	1c42      	adds	r2, r0, #1
 800bfd6:	4606      	mov	r6, r0
 800bfd8:	d1d6      	bne.n	800bf88 <_svfiprintf_r+0x174>
 800bfda:	89ab      	ldrh	r3, [r5, #12]
 800bfdc:	065b      	lsls	r3, r3, #25
 800bfde:	f53f af2d 	bmi.w	800be3c <_svfiprintf_r+0x28>
 800bfe2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bfe4:	e72c      	b.n	800be40 <_svfiprintf_r+0x2c>
 800bfe6:	ab03      	add	r3, sp, #12
 800bfe8:	9300      	str	r3, [sp, #0]
 800bfea:	462a      	mov	r2, r5
 800bfec:	4b05      	ldr	r3, [pc, #20]	@ (800c004 <_svfiprintf_r+0x1f0>)
 800bfee:	a904      	add	r1, sp, #16
 800bff0:	4638      	mov	r0, r7
 800bff2:	f7fe f919 	bl	800a228 <_printf_i>
 800bff6:	e7ed      	b.n	800bfd4 <_svfiprintf_r+0x1c0>
 800bff8:	0800cd56 	.word	0x0800cd56
 800bffc:	0800cd60 	.word	0x0800cd60
 800c000:	08009cf9 	.word	0x08009cf9
 800c004:	0800bd5d 	.word	0x0800bd5d
 800c008:	0800cd5c 	.word	0x0800cd5c

0800c00c <__sflush_r>:
 800c00c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c010:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c014:	0716      	lsls	r6, r2, #28
 800c016:	4605      	mov	r5, r0
 800c018:	460c      	mov	r4, r1
 800c01a:	d454      	bmi.n	800c0c6 <__sflush_r+0xba>
 800c01c:	684b      	ldr	r3, [r1, #4]
 800c01e:	2b00      	cmp	r3, #0
 800c020:	dc02      	bgt.n	800c028 <__sflush_r+0x1c>
 800c022:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800c024:	2b00      	cmp	r3, #0
 800c026:	dd48      	ble.n	800c0ba <__sflush_r+0xae>
 800c028:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c02a:	2e00      	cmp	r6, #0
 800c02c:	d045      	beq.n	800c0ba <__sflush_r+0xae>
 800c02e:	2300      	movs	r3, #0
 800c030:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800c034:	682f      	ldr	r7, [r5, #0]
 800c036:	6a21      	ldr	r1, [r4, #32]
 800c038:	602b      	str	r3, [r5, #0]
 800c03a:	d030      	beq.n	800c09e <__sflush_r+0x92>
 800c03c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800c03e:	89a3      	ldrh	r3, [r4, #12]
 800c040:	0759      	lsls	r1, r3, #29
 800c042:	d505      	bpl.n	800c050 <__sflush_r+0x44>
 800c044:	6863      	ldr	r3, [r4, #4]
 800c046:	1ad2      	subs	r2, r2, r3
 800c048:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800c04a:	b10b      	cbz	r3, 800c050 <__sflush_r+0x44>
 800c04c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c04e:	1ad2      	subs	r2, r2, r3
 800c050:	2300      	movs	r3, #0
 800c052:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c054:	6a21      	ldr	r1, [r4, #32]
 800c056:	4628      	mov	r0, r5
 800c058:	47b0      	blx	r6
 800c05a:	1c43      	adds	r3, r0, #1
 800c05c:	89a3      	ldrh	r3, [r4, #12]
 800c05e:	d106      	bne.n	800c06e <__sflush_r+0x62>
 800c060:	6829      	ldr	r1, [r5, #0]
 800c062:	291d      	cmp	r1, #29
 800c064:	d82b      	bhi.n	800c0be <__sflush_r+0xb2>
 800c066:	4a2a      	ldr	r2, [pc, #168]	@ (800c110 <__sflush_r+0x104>)
 800c068:	40ca      	lsrs	r2, r1
 800c06a:	07d6      	lsls	r6, r2, #31
 800c06c:	d527      	bpl.n	800c0be <__sflush_r+0xb2>
 800c06e:	2200      	movs	r2, #0
 800c070:	6062      	str	r2, [r4, #4]
 800c072:	04d9      	lsls	r1, r3, #19
 800c074:	6922      	ldr	r2, [r4, #16]
 800c076:	6022      	str	r2, [r4, #0]
 800c078:	d504      	bpl.n	800c084 <__sflush_r+0x78>
 800c07a:	1c42      	adds	r2, r0, #1
 800c07c:	d101      	bne.n	800c082 <__sflush_r+0x76>
 800c07e:	682b      	ldr	r3, [r5, #0]
 800c080:	b903      	cbnz	r3, 800c084 <__sflush_r+0x78>
 800c082:	6560      	str	r0, [r4, #84]	@ 0x54
 800c084:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c086:	602f      	str	r7, [r5, #0]
 800c088:	b1b9      	cbz	r1, 800c0ba <__sflush_r+0xae>
 800c08a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c08e:	4299      	cmp	r1, r3
 800c090:	d002      	beq.n	800c098 <__sflush_r+0x8c>
 800c092:	4628      	mov	r0, r5
 800c094:	f7ff f9e8 	bl	800b468 <_free_r>
 800c098:	2300      	movs	r3, #0
 800c09a:	6363      	str	r3, [r4, #52]	@ 0x34
 800c09c:	e00d      	b.n	800c0ba <__sflush_r+0xae>
 800c09e:	2301      	movs	r3, #1
 800c0a0:	4628      	mov	r0, r5
 800c0a2:	47b0      	blx	r6
 800c0a4:	4602      	mov	r2, r0
 800c0a6:	1c50      	adds	r0, r2, #1
 800c0a8:	d1c9      	bne.n	800c03e <__sflush_r+0x32>
 800c0aa:	682b      	ldr	r3, [r5, #0]
 800c0ac:	2b00      	cmp	r3, #0
 800c0ae:	d0c6      	beq.n	800c03e <__sflush_r+0x32>
 800c0b0:	2b1d      	cmp	r3, #29
 800c0b2:	d001      	beq.n	800c0b8 <__sflush_r+0xac>
 800c0b4:	2b16      	cmp	r3, #22
 800c0b6:	d11e      	bne.n	800c0f6 <__sflush_r+0xea>
 800c0b8:	602f      	str	r7, [r5, #0]
 800c0ba:	2000      	movs	r0, #0
 800c0bc:	e022      	b.n	800c104 <__sflush_r+0xf8>
 800c0be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c0c2:	b21b      	sxth	r3, r3
 800c0c4:	e01b      	b.n	800c0fe <__sflush_r+0xf2>
 800c0c6:	690f      	ldr	r7, [r1, #16]
 800c0c8:	2f00      	cmp	r7, #0
 800c0ca:	d0f6      	beq.n	800c0ba <__sflush_r+0xae>
 800c0cc:	0793      	lsls	r3, r2, #30
 800c0ce:	680e      	ldr	r6, [r1, #0]
 800c0d0:	bf08      	it	eq
 800c0d2:	694b      	ldreq	r3, [r1, #20]
 800c0d4:	600f      	str	r7, [r1, #0]
 800c0d6:	bf18      	it	ne
 800c0d8:	2300      	movne	r3, #0
 800c0da:	eba6 0807 	sub.w	r8, r6, r7
 800c0de:	608b      	str	r3, [r1, #8]
 800c0e0:	f1b8 0f00 	cmp.w	r8, #0
 800c0e4:	dde9      	ble.n	800c0ba <__sflush_r+0xae>
 800c0e6:	6a21      	ldr	r1, [r4, #32]
 800c0e8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800c0ea:	4643      	mov	r3, r8
 800c0ec:	463a      	mov	r2, r7
 800c0ee:	4628      	mov	r0, r5
 800c0f0:	47b0      	blx	r6
 800c0f2:	2800      	cmp	r0, #0
 800c0f4:	dc08      	bgt.n	800c108 <__sflush_r+0xfc>
 800c0f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c0fa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c0fe:	81a3      	strh	r3, [r4, #12]
 800c100:	f04f 30ff 	mov.w	r0, #4294967295
 800c104:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c108:	4407      	add	r7, r0
 800c10a:	eba8 0800 	sub.w	r8, r8, r0
 800c10e:	e7e7      	b.n	800c0e0 <__sflush_r+0xd4>
 800c110:	20400001 	.word	0x20400001

0800c114 <_fflush_r>:
 800c114:	b538      	push	{r3, r4, r5, lr}
 800c116:	690b      	ldr	r3, [r1, #16]
 800c118:	4605      	mov	r5, r0
 800c11a:	460c      	mov	r4, r1
 800c11c:	b913      	cbnz	r3, 800c124 <_fflush_r+0x10>
 800c11e:	2500      	movs	r5, #0
 800c120:	4628      	mov	r0, r5
 800c122:	bd38      	pop	{r3, r4, r5, pc}
 800c124:	b118      	cbz	r0, 800c12e <_fflush_r+0x1a>
 800c126:	6a03      	ldr	r3, [r0, #32]
 800c128:	b90b      	cbnz	r3, 800c12e <_fflush_r+0x1a>
 800c12a:	f7fe fa27 	bl	800a57c <__sinit>
 800c12e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c132:	2b00      	cmp	r3, #0
 800c134:	d0f3      	beq.n	800c11e <_fflush_r+0xa>
 800c136:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800c138:	07d0      	lsls	r0, r2, #31
 800c13a:	d404      	bmi.n	800c146 <_fflush_r+0x32>
 800c13c:	0599      	lsls	r1, r3, #22
 800c13e:	d402      	bmi.n	800c146 <_fflush_r+0x32>
 800c140:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c142:	f7fe fb34 	bl	800a7ae <__retarget_lock_acquire_recursive>
 800c146:	4628      	mov	r0, r5
 800c148:	4621      	mov	r1, r4
 800c14a:	f7ff ff5f 	bl	800c00c <__sflush_r>
 800c14e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c150:	07da      	lsls	r2, r3, #31
 800c152:	4605      	mov	r5, r0
 800c154:	d4e4      	bmi.n	800c120 <_fflush_r+0xc>
 800c156:	89a3      	ldrh	r3, [r4, #12]
 800c158:	059b      	lsls	r3, r3, #22
 800c15a:	d4e1      	bmi.n	800c120 <_fflush_r+0xc>
 800c15c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c15e:	f7fe fb27 	bl	800a7b0 <__retarget_lock_release_recursive>
 800c162:	e7dd      	b.n	800c120 <_fflush_r+0xc>

0800c164 <memmove>:
 800c164:	4288      	cmp	r0, r1
 800c166:	b510      	push	{r4, lr}
 800c168:	eb01 0402 	add.w	r4, r1, r2
 800c16c:	d902      	bls.n	800c174 <memmove+0x10>
 800c16e:	4284      	cmp	r4, r0
 800c170:	4623      	mov	r3, r4
 800c172:	d807      	bhi.n	800c184 <memmove+0x20>
 800c174:	1e43      	subs	r3, r0, #1
 800c176:	42a1      	cmp	r1, r4
 800c178:	d008      	beq.n	800c18c <memmove+0x28>
 800c17a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c17e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c182:	e7f8      	b.n	800c176 <memmove+0x12>
 800c184:	4402      	add	r2, r0
 800c186:	4601      	mov	r1, r0
 800c188:	428a      	cmp	r2, r1
 800c18a:	d100      	bne.n	800c18e <memmove+0x2a>
 800c18c:	bd10      	pop	{r4, pc}
 800c18e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c192:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c196:	e7f7      	b.n	800c188 <memmove+0x24>

0800c198 <_sbrk_r>:
 800c198:	b538      	push	{r3, r4, r5, lr}
 800c19a:	4d06      	ldr	r5, [pc, #24]	@ (800c1b4 <_sbrk_r+0x1c>)
 800c19c:	2300      	movs	r3, #0
 800c19e:	4604      	mov	r4, r0
 800c1a0:	4608      	mov	r0, r1
 800c1a2:	602b      	str	r3, [r5, #0]
 800c1a4:	f7f6 f8be 	bl	8002324 <_sbrk>
 800c1a8:	1c43      	adds	r3, r0, #1
 800c1aa:	d102      	bne.n	800c1b2 <_sbrk_r+0x1a>
 800c1ac:	682b      	ldr	r3, [r5, #0]
 800c1ae:	b103      	cbz	r3, 800c1b2 <_sbrk_r+0x1a>
 800c1b0:	6023      	str	r3, [r4, #0]
 800c1b2:	bd38      	pop	{r3, r4, r5, pc}
 800c1b4:	20000fe8 	.word	0x20000fe8

0800c1b8 <memcpy>:
 800c1b8:	440a      	add	r2, r1
 800c1ba:	4291      	cmp	r1, r2
 800c1bc:	f100 33ff 	add.w	r3, r0, #4294967295
 800c1c0:	d100      	bne.n	800c1c4 <memcpy+0xc>
 800c1c2:	4770      	bx	lr
 800c1c4:	b510      	push	{r4, lr}
 800c1c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c1ca:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c1ce:	4291      	cmp	r1, r2
 800c1d0:	d1f9      	bne.n	800c1c6 <memcpy+0xe>
 800c1d2:	bd10      	pop	{r4, pc}

0800c1d4 <__assert_func>:
 800c1d4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c1d6:	4614      	mov	r4, r2
 800c1d8:	461a      	mov	r2, r3
 800c1da:	4b09      	ldr	r3, [pc, #36]	@ (800c200 <__assert_func+0x2c>)
 800c1dc:	681b      	ldr	r3, [r3, #0]
 800c1de:	4605      	mov	r5, r0
 800c1e0:	68d8      	ldr	r0, [r3, #12]
 800c1e2:	b14c      	cbz	r4, 800c1f8 <__assert_func+0x24>
 800c1e4:	4b07      	ldr	r3, [pc, #28]	@ (800c204 <__assert_func+0x30>)
 800c1e6:	9100      	str	r1, [sp, #0]
 800c1e8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c1ec:	4906      	ldr	r1, [pc, #24]	@ (800c208 <__assert_func+0x34>)
 800c1ee:	462b      	mov	r3, r5
 800c1f0:	f000 f870 	bl	800c2d4 <fiprintf>
 800c1f4:	f000 f880 	bl	800c2f8 <abort>
 800c1f8:	4b04      	ldr	r3, [pc, #16]	@ (800c20c <__assert_func+0x38>)
 800c1fa:	461c      	mov	r4, r3
 800c1fc:	e7f3      	b.n	800c1e6 <__assert_func+0x12>
 800c1fe:	bf00      	nop
 800c200:	2000012c 	.word	0x2000012c
 800c204:	0800cd71 	.word	0x0800cd71
 800c208:	0800cd7e 	.word	0x0800cd7e
 800c20c:	0800cdac 	.word	0x0800cdac

0800c210 <_calloc_r>:
 800c210:	b570      	push	{r4, r5, r6, lr}
 800c212:	fba1 5402 	umull	r5, r4, r1, r2
 800c216:	b934      	cbnz	r4, 800c226 <_calloc_r+0x16>
 800c218:	4629      	mov	r1, r5
 800c21a:	f7ff f999 	bl	800b550 <_malloc_r>
 800c21e:	4606      	mov	r6, r0
 800c220:	b928      	cbnz	r0, 800c22e <_calloc_r+0x1e>
 800c222:	4630      	mov	r0, r6
 800c224:	bd70      	pop	{r4, r5, r6, pc}
 800c226:	220c      	movs	r2, #12
 800c228:	6002      	str	r2, [r0, #0]
 800c22a:	2600      	movs	r6, #0
 800c22c:	e7f9      	b.n	800c222 <_calloc_r+0x12>
 800c22e:	462a      	mov	r2, r5
 800c230:	4621      	mov	r1, r4
 800c232:	f7fe fa3e 	bl	800a6b2 <memset>
 800c236:	e7f4      	b.n	800c222 <_calloc_r+0x12>

0800c238 <__ascii_mbtowc>:
 800c238:	b082      	sub	sp, #8
 800c23a:	b901      	cbnz	r1, 800c23e <__ascii_mbtowc+0x6>
 800c23c:	a901      	add	r1, sp, #4
 800c23e:	b142      	cbz	r2, 800c252 <__ascii_mbtowc+0x1a>
 800c240:	b14b      	cbz	r3, 800c256 <__ascii_mbtowc+0x1e>
 800c242:	7813      	ldrb	r3, [r2, #0]
 800c244:	600b      	str	r3, [r1, #0]
 800c246:	7812      	ldrb	r2, [r2, #0]
 800c248:	1e10      	subs	r0, r2, #0
 800c24a:	bf18      	it	ne
 800c24c:	2001      	movne	r0, #1
 800c24e:	b002      	add	sp, #8
 800c250:	4770      	bx	lr
 800c252:	4610      	mov	r0, r2
 800c254:	e7fb      	b.n	800c24e <__ascii_mbtowc+0x16>
 800c256:	f06f 0001 	mvn.w	r0, #1
 800c25a:	e7f8      	b.n	800c24e <__ascii_mbtowc+0x16>

0800c25c <_realloc_r>:
 800c25c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c260:	4607      	mov	r7, r0
 800c262:	4614      	mov	r4, r2
 800c264:	460d      	mov	r5, r1
 800c266:	b921      	cbnz	r1, 800c272 <_realloc_r+0x16>
 800c268:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c26c:	4611      	mov	r1, r2
 800c26e:	f7ff b96f 	b.w	800b550 <_malloc_r>
 800c272:	b92a      	cbnz	r2, 800c280 <_realloc_r+0x24>
 800c274:	f7ff f8f8 	bl	800b468 <_free_r>
 800c278:	4625      	mov	r5, r4
 800c27a:	4628      	mov	r0, r5
 800c27c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c280:	f000 f841 	bl	800c306 <_malloc_usable_size_r>
 800c284:	4284      	cmp	r4, r0
 800c286:	4606      	mov	r6, r0
 800c288:	d802      	bhi.n	800c290 <_realloc_r+0x34>
 800c28a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c28e:	d8f4      	bhi.n	800c27a <_realloc_r+0x1e>
 800c290:	4621      	mov	r1, r4
 800c292:	4638      	mov	r0, r7
 800c294:	f7ff f95c 	bl	800b550 <_malloc_r>
 800c298:	4680      	mov	r8, r0
 800c29a:	b908      	cbnz	r0, 800c2a0 <_realloc_r+0x44>
 800c29c:	4645      	mov	r5, r8
 800c29e:	e7ec      	b.n	800c27a <_realloc_r+0x1e>
 800c2a0:	42b4      	cmp	r4, r6
 800c2a2:	4622      	mov	r2, r4
 800c2a4:	4629      	mov	r1, r5
 800c2a6:	bf28      	it	cs
 800c2a8:	4632      	movcs	r2, r6
 800c2aa:	f7ff ff85 	bl	800c1b8 <memcpy>
 800c2ae:	4629      	mov	r1, r5
 800c2b0:	4638      	mov	r0, r7
 800c2b2:	f7ff f8d9 	bl	800b468 <_free_r>
 800c2b6:	e7f1      	b.n	800c29c <_realloc_r+0x40>

0800c2b8 <__ascii_wctomb>:
 800c2b8:	4603      	mov	r3, r0
 800c2ba:	4608      	mov	r0, r1
 800c2bc:	b141      	cbz	r1, 800c2d0 <__ascii_wctomb+0x18>
 800c2be:	2aff      	cmp	r2, #255	@ 0xff
 800c2c0:	d904      	bls.n	800c2cc <__ascii_wctomb+0x14>
 800c2c2:	228a      	movs	r2, #138	@ 0x8a
 800c2c4:	601a      	str	r2, [r3, #0]
 800c2c6:	f04f 30ff 	mov.w	r0, #4294967295
 800c2ca:	4770      	bx	lr
 800c2cc:	700a      	strb	r2, [r1, #0]
 800c2ce:	2001      	movs	r0, #1
 800c2d0:	4770      	bx	lr
	...

0800c2d4 <fiprintf>:
 800c2d4:	b40e      	push	{r1, r2, r3}
 800c2d6:	b503      	push	{r0, r1, lr}
 800c2d8:	4601      	mov	r1, r0
 800c2da:	ab03      	add	r3, sp, #12
 800c2dc:	4805      	ldr	r0, [pc, #20]	@ (800c2f4 <fiprintf+0x20>)
 800c2de:	f853 2b04 	ldr.w	r2, [r3], #4
 800c2e2:	6800      	ldr	r0, [r0, #0]
 800c2e4:	9301      	str	r3, [sp, #4]
 800c2e6:	f000 f83f 	bl	800c368 <_vfiprintf_r>
 800c2ea:	b002      	add	sp, #8
 800c2ec:	f85d eb04 	ldr.w	lr, [sp], #4
 800c2f0:	b003      	add	sp, #12
 800c2f2:	4770      	bx	lr
 800c2f4:	2000012c 	.word	0x2000012c

0800c2f8 <abort>:
 800c2f8:	b508      	push	{r3, lr}
 800c2fa:	2006      	movs	r0, #6
 800c2fc:	f000 fa08 	bl	800c710 <raise>
 800c300:	2001      	movs	r0, #1
 800c302:	f7f5 ff97 	bl	8002234 <_exit>

0800c306 <_malloc_usable_size_r>:
 800c306:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c30a:	1f18      	subs	r0, r3, #4
 800c30c:	2b00      	cmp	r3, #0
 800c30e:	bfbc      	itt	lt
 800c310:	580b      	ldrlt	r3, [r1, r0]
 800c312:	18c0      	addlt	r0, r0, r3
 800c314:	4770      	bx	lr

0800c316 <__sfputc_r>:
 800c316:	6893      	ldr	r3, [r2, #8]
 800c318:	3b01      	subs	r3, #1
 800c31a:	2b00      	cmp	r3, #0
 800c31c:	b410      	push	{r4}
 800c31e:	6093      	str	r3, [r2, #8]
 800c320:	da08      	bge.n	800c334 <__sfputc_r+0x1e>
 800c322:	6994      	ldr	r4, [r2, #24]
 800c324:	42a3      	cmp	r3, r4
 800c326:	db01      	blt.n	800c32c <__sfputc_r+0x16>
 800c328:	290a      	cmp	r1, #10
 800c32a:	d103      	bne.n	800c334 <__sfputc_r+0x1e>
 800c32c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c330:	f000 b932 	b.w	800c598 <__swbuf_r>
 800c334:	6813      	ldr	r3, [r2, #0]
 800c336:	1c58      	adds	r0, r3, #1
 800c338:	6010      	str	r0, [r2, #0]
 800c33a:	7019      	strb	r1, [r3, #0]
 800c33c:	4608      	mov	r0, r1
 800c33e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c342:	4770      	bx	lr

0800c344 <__sfputs_r>:
 800c344:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c346:	4606      	mov	r6, r0
 800c348:	460f      	mov	r7, r1
 800c34a:	4614      	mov	r4, r2
 800c34c:	18d5      	adds	r5, r2, r3
 800c34e:	42ac      	cmp	r4, r5
 800c350:	d101      	bne.n	800c356 <__sfputs_r+0x12>
 800c352:	2000      	movs	r0, #0
 800c354:	e007      	b.n	800c366 <__sfputs_r+0x22>
 800c356:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c35a:	463a      	mov	r2, r7
 800c35c:	4630      	mov	r0, r6
 800c35e:	f7ff ffda 	bl	800c316 <__sfputc_r>
 800c362:	1c43      	adds	r3, r0, #1
 800c364:	d1f3      	bne.n	800c34e <__sfputs_r+0xa>
 800c366:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c368 <_vfiprintf_r>:
 800c368:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c36c:	460d      	mov	r5, r1
 800c36e:	b09d      	sub	sp, #116	@ 0x74
 800c370:	4614      	mov	r4, r2
 800c372:	4698      	mov	r8, r3
 800c374:	4606      	mov	r6, r0
 800c376:	b118      	cbz	r0, 800c380 <_vfiprintf_r+0x18>
 800c378:	6a03      	ldr	r3, [r0, #32]
 800c37a:	b90b      	cbnz	r3, 800c380 <_vfiprintf_r+0x18>
 800c37c:	f7fe f8fe 	bl	800a57c <__sinit>
 800c380:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c382:	07d9      	lsls	r1, r3, #31
 800c384:	d405      	bmi.n	800c392 <_vfiprintf_r+0x2a>
 800c386:	89ab      	ldrh	r3, [r5, #12]
 800c388:	059a      	lsls	r2, r3, #22
 800c38a:	d402      	bmi.n	800c392 <_vfiprintf_r+0x2a>
 800c38c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c38e:	f7fe fa0e 	bl	800a7ae <__retarget_lock_acquire_recursive>
 800c392:	89ab      	ldrh	r3, [r5, #12]
 800c394:	071b      	lsls	r3, r3, #28
 800c396:	d501      	bpl.n	800c39c <_vfiprintf_r+0x34>
 800c398:	692b      	ldr	r3, [r5, #16]
 800c39a:	b99b      	cbnz	r3, 800c3c4 <_vfiprintf_r+0x5c>
 800c39c:	4629      	mov	r1, r5
 800c39e:	4630      	mov	r0, r6
 800c3a0:	f000 f938 	bl	800c614 <__swsetup_r>
 800c3a4:	b170      	cbz	r0, 800c3c4 <_vfiprintf_r+0x5c>
 800c3a6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c3a8:	07dc      	lsls	r4, r3, #31
 800c3aa:	d504      	bpl.n	800c3b6 <_vfiprintf_r+0x4e>
 800c3ac:	f04f 30ff 	mov.w	r0, #4294967295
 800c3b0:	b01d      	add	sp, #116	@ 0x74
 800c3b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c3b6:	89ab      	ldrh	r3, [r5, #12]
 800c3b8:	0598      	lsls	r0, r3, #22
 800c3ba:	d4f7      	bmi.n	800c3ac <_vfiprintf_r+0x44>
 800c3bc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c3be:	f7fe f9f7 	bl	800a7b0 <__retarget_lock_release_recursive>
 800c3c2:	e7f3      	b.n	800c3ac <_vfiprintf_r+0x44>
 800c3c4:	2300      	movs	r3, #0
 800c3c6:	9309      	str	r3, [sp, #36]	@ 0x24
 800c3c8:	2320      	movs	r3, #32
 800c3ca:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c3ce:	f8cd 800c 	str.w	r8, [sp, #12]
 800c3d2:	2330      	movs	r3, #48	@ 0x30
 800c3d4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800c584 <_vfiprintf_r+0x21c>
 800c3d8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c3dc:	f04f 0901 	mov.w	r9, #1
 800c3e0:	4623      	mov	r3, r4
 800c3e2:	469a      	mov	sl, r3
 800c3e4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c3e8:	b10a      	cbz	r2, 800c3ee <_vfiprintf_r+0x86>
 800c3ea:	2a25      	cmp	r2, #37	@ 0x25
 800c3ec:	d1f9      	bne.n	800c3e2 <_vfiprintf_r+0x7a>
 800c3ee:	ebba 0b04 	subs.w	fp, sl, r4
 800c3f2:	d00b      	beq.n	800c40c <_vfiprintf_r+0xa4>
 800c3f4:	465b      	mov	r3, fp
 800c3f6:	4622      	mov	r2, r4
 800c3f8:	4629      	mov	r1, r5
 800c3fa:	4630      	mov	r0, r6
 800c3fc:	f7ff ffa2 	bl	800c344 <__sfputs_r>
 800c400:	3001      	adds	r0, #1
 800c402:	f000 80a7 	beq.w	800c554 <_vfiprintf_r+0x1ec>
 800c406:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c408:	445a      	add	r2, fp
 800c40a:	9209      	str	r2, [sp, #36]	@ 0x24
 800c40c:	f89a 3000 	ldrb.w	r3, [sl]
 800c410:	2b00      	cmp	r3, #0
 800c412:	f000 809f 	beq.w	800c554 <_vfiprintf_r+0x1ec>
 800c416:	2300      	movs	r3, #0
 800c418:	f04f 32ff 	mov.w	r2, #4294967295
 800c41c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c420:	f10a 0a01 	add.w	sl, sl, #1
 800c424:	9304      	str	r3, [sp, #16]
 800c426:	9307      	str	r3, [sp, #28]
 800c428:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c42c:	931a      	str	r3, [sp, #104]	@ 0x68
 800c42e:	4654      	mov	r4, sl
 800c430:	2205      	movs	r2, #5
 800c432:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c436:	4853      	ldr	r0, [pc, #332]	@ (800c584 <_vfiprintf_r+0x21c>)
 800c438:	f7f3 feda 	bl	80001f0 <memchr>
 800c43c:	9a04      	ldr	r2, [sp, #16]
 800c43e:	b9d8      	cbnz	r0, 800c478 <_vfiprintf_r+0x110>
 800c440:	06d1      	lsls	r1, r2, #27
 800c442:	bf44      	itt	mi
 800c444:	2320      	movmi	r3, #32
 800c446:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c44a:	0713      	lsls	r3, r2, #28
 800c44c:	bf44      	itt	mi
 800c44e:	232b      	movmi	r3, #43	@ 0x2b
 800c450:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c454:	f89a 3000 	ldrb.w	r3, [sl]
 800c458:	2b2a      	cmp	r3, #42	@ 0x2a
 800c45a:	d015      	beq.n	800c488 <_vfiprintf_r+0x120>
 800c45c:	9a07      	ldr	r2, [sp, #28]
 800c45e:	4654      	mov	r4, sl
 800c460:	2000      	movs	r0, #0
 800c462:	f04f 0c0a 	mov.w	ip, #10
 800c466:	4621      	mov	r1, r4
 800c468:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c46c:	3b30      	subs	r3, #48	@ 0x30
 800c46e:	2b09      	cmp	r3, #9
 800c470:	d94b      	bls.n	800c50a <_vfiprintf_r+0x1a2>
 800c472:	b1b0      	cbz	r0, 800c4a2 <_vfiprintf_r+0x13a>
 800c474:	9207      	str	r2, [sp, #28]
 800c476:	e014      	b.n	800c4a2 <_vfiprintf_r+0x13a>
 800c478:	eba0 0308 	sub.w	r3, r0, r8
 800c47c:	fa09 f303 	lsl.w	r3, r9, r3
 800c480:	4313      	orrs	r3, r2
 800c482:	9304      	str	r3, [sp, #16]
 800c484:	46a2      	mov	sl, r4
 800c486:	e7d2      	b.n	800c42e <_vfiprintf_r+0xc6>
 800c488:	9b03      	ldr	r3, [sp, #12]
 800c48a:	1d19      	adds	r1, r3, #4
 800c48c:	681b      	ldr	r3, [r3, #0]
 800c48e:	9103      	str	r1, [sp, #12]
 800c490:	2b00      	cmp	r3, #0
 800c492:	bfbb      	ittet	lt
 800c494:	425b      	neglt	r3, r3
 800c496:	f042 0202 	orrlt.w	r2, r2, #2
 800c49a:	9307      	strge	r3, [sp, #28]
 800c49c:	9307      	strlt	r3, [sp, #28]
 800c49e:	bfb8      	it	lt
 800c4a0:	9204      	strlt	r2, [sp, #16]
 800c4a2:	7823      	ldrb	r3, [r4, #0]
 800c4a4:	2b2e      	cmp	r3, #46	@ 0x2e
 800c4a6:	d10a      	bne.n	800c4be <_vfiprintf_r+0x156>
 800c4a8:	7863      	ldrb	r3, [r4, #1]
 800c4aa:	2b2a      	cmp	r3, #42	@ 0x2a
 800c4ac:	d132      	bne.n	800c514 <_vfiprintf_r+0x1ac>
 800c4ae:	9b03      	ldr	r3, [sp, #12]
 800c4b0:	1d1a      	adds	r2, r3, #4
 800c4b2:	681b      	ldr	r3, [r3, #0]
 800c4b4:	9203      	str	r2, [sp, #12]
 800c4b6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c4ba:	3402      	adds	r4, #2
 800c4bc:	9305      	str	r3, [sp, #20]
 800c4be:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800c594 <_vfiprintf_r+0x22c>
 800c4c2:	7821      	ldrb	r1, [r4, #0]
 800c4c4:	2203      	movs	r2, #3
 800c4c6:	4650      	mov	r0, sl
 800c4c8:	f7f3 fe92 	bl	80001f0 <memchr>
 800c4cc:	b138      	cbz	r0, 800c4de <_vfiprintf_r+0x176>
 800c4ce:	9b04      	ldr	r3, [sp, #16]
 800c4d0:	eba0 000a 	sub.w	r0, r0, sl
 800c4d4:	2240      	movs	r2, #64	@ 0x40
 800c4d6:	4082      	lsls	r2, r0
 800c4d8:	4313      	orrs	r3, r2
 800c4da:	3401      	adds	r4, #1
 800c4dc:	9304      	str	r3, [sp, #16]
 800c4de:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c4e2:	4829      	ldr	r0, [pc, #164]	@ (800c588 <_vfiprintf_r+0x220>)
 800c4e4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c4e8:	2206      	movs	r2, #6
 800c4ea:	f7f3 fe81 	bl	80001f0 <memchr>
 800c4ee:	2800      	cmp	r0, #0
 800c4f0:	d03f      	beq.n	800c572 <_vfiprintf_r+0x20a>
 800c4f2:	4b26      	ldr	r3, [pc, #152]	@ (800c58c <_vfiprintf_r+0x224>)
 800c4f4:	bb1b      	cbnz	r3, 800c53e <_vfiprintf_r+0x1d6>
 800c4f6:	9b03      	ldr	r3, [sp, #12]
 800c4f8:	3307      	adds	r3, #7
 800c4fa:	f023 0307 	bic.w	r3, r3, #7
 800c4fe:	3308      	adds	r3, #8
 800c500:	9303      	str	r3, [sp, #12]
 800c502:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c504:	443b      	add	r3, r7
 800c506:	9309      	str	r3, [sp, #36]	@ 0x24
 800c508:	e76a      	b.n	800c3e0 <_vfiprintf_r+0x78>
 800c50a:	fb0c 3202 	mla	r2, ip, r2, r3
 800c50e:	460c      	mov	r4, r1
 800c510:	2001      	movs	r0, #1
 800c512:	e7a8      	b.n	800c466 <_vfiprintf_r+0xfe>
 800c514:	2300      	movs	r3, #0
 800c516:	3401      	adds	r4, #1
 800c518:	9305      	str	r3, [sp, #20]
 800c51a:	4619      	mov	r1, r3
 800c51c:	f04f 0c0a 	mov.w	ip, #10
 800c520:	4620      	mov	r0, r4
 800c522:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c526:	3a30      	subs	r2, #48	@ 0x30
 800c528:	2a09      	cmp	r2, #9
 800c52a:	d903      	bls.n	800c534 <_vfiprintf_r+0x1cc>
 800c52c:	2b00      	cmp	r3, #0
 800c52e:	d0c6      	beq.n	800c4be <_vfiprintf_r+0x156>
 800c530:	9105      	str	r1, [sp, #20]
 800c532:	e7c4      	b.n	800c4be <_vfiprintf_r+0x156>
 800c534:	fb0c 2101 	mla	r1, ip, r1, r2
 800c538:	4604      	mov	r4, r0
 800c53a:	2301      	movs	r3, #1
 800c53c:	e7f0      	b.n	800c520 <_vfiprintf_r+0x1b8>
 800c53e:	ab03      	add	r3, sp, #12
 800c540:	9300      	str	r3, [sp, #0]
 800c542:	462a      	mov	r2, r5
 800c544:	4b12      	ldr	r3, [pc, #72]	@ (800c590 <_vfiprintf_r+0x228>)
 800c546:	a904      	add	r1, sp, #16
 800c548:	4630      	mov	r0, r6
 800c54a:	f7fd fbd5 	bl	8009cf8 <_printf_float>
 800c54e:	4607      	mov	r7, r0
 800c550:	1c78      	adds	r0, r7, #1
 800c552:	d1d6      	bne.n	800c502 <_vfiprintf_r+0x19a>
 800c554:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c556:	07d9      	lsls	r1, r3, #31
 800c558:	d405      	bmi.n	800c566 <_vfiprintf_r+0x1fe>
 800c55a:	89ab      	ldrh	r3, [r5, #12]
 800c55c:	059a      	lsls	r2, r3, #22
 800c55e:	d402      	bmi.n	800c566 <_vfiprintf_r+0x1fe>
 800c560:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c562:	f7fe f925 	bl	800a7b0 <__retarget_lock_release_recursive>
 800c566:	89ab      	ldrh	r3, [r5, #12]
 800c568:	065b      	lsls	r3, r3, #25
 800c56a:	f53f af1f 	bmi.w	800c3ac <_vfiprintf_r+0x44>
 800c56e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c570:	e71e      	b.n	800c3b0 <_vfiprintf_r+0x48>
 800c572:	ab03      	add	r3, sp, #12
 800c574:	9300      	str	r3, [sp, #0]
 800c576:	462a      	mov	r2, r5
 800c578:	4b05      	ldr	r3, [pc, #20]	@ (800c590 <_vfiprintf_r+0x228>)
 800c57a:	a904      	add	r1, sp, #16
 800c57c:	4630      	mov	r0, r6
 800c57e:	f7fd fe53 	bl	800a228 <_printf_i>
 800c582:	e7e4      	b.n	800c54e <_vfiprintf_r+0x1e6>
 800c584:	0800cd56 	.word	0x0800cd56
 800c588:	0800cd60 	.word	0x0800cd60
 800c58c:	08009cf9 	.word	0x08009cf9
 800c590:	0800c345 	.word	0x0800c345
 800c594:	0800cd5c 	.word	0x0800cd5c

0800c598 <__swbuf_r>:
 800c598:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c59a:	460e      	mov	r6, r1
 800c59c:	4614      	mov	r4, r2
 800c59e:	4605      	mov	r5, r0
 800c5a0:	b118      	cbz	r0, 800c5aa <__swbuf_r+0x12>
 800c5a2:	6a03      	ldr	r3, [r0, #32]
 800c5a4:	b90b      	cbnz	r3, 800c5aa <__swbuf_r+0x12>
 800c5a6:	f7fd ffe9 	bl	800a57c <__sinit>
 800c5aa:	69a3      	ldr	r3, [r4, #24]
 800c5ac:	60a3      	str	r3, [r4, #8]
 800c5ae:	89a3      	ldrh	r3, [r4, #12]
 800c5b0:	071a      	lsls	r2, r3, #28
 800c5b2:	d501      	bpl.n	800c5b8 <__swbuf_r+0x20>
 800c5b4:	6923      	ldr	r3, [r4, #16]
 800c5b6:	b943      	cbnz	r3, 800c5ca <__swbuf_r+0x32>
 800c5b8:	4621      	mov	r1, r4
 800c5ba:	4628      	mov	r0, r5
 800c5bc:	f000 f82a 	bl	800c614 <__swsetup_r>
 800c5c0:	b118      	cbz	r0, 800c5ca <__swbuf_r+0x32>
 800c5c2:	f04f 37ff 	mov.w	r7, #4294967295
 800c5c6:	4638      	mov	r0, r7
 800c5c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c5ca:	6823      	ldr	r3, [r4, #0]
 800c5cc:	6922      	ldr	r2, [r4, #16]
 800c5ce:	1a98      	subs	r0, r3, r2
 800c5d0:	6963      	ldr	r3, [r4, #20]
 800c5d2:	b2f6      	uxtb	r6, r6
 800c5d4:	4283      	cmp	r3, r0
 800c5d6:	4637      	mov	r7, r6
 800c5d8:	dc05      	bgt.n	800c5e6 <__swbuf_r+0x4e>
 800c5da:	4621      	mov	r1, r4
 800c5dc:	4628      	mov	r0, r5
 800c5de:	f7ff fd99 	bl	800c114 <_fflush_r>
 800c5e2:	2800      	cmp	r0, #0
 800c5e4:	d1ed      	bne.n	800c5c2 <__swbuf_r+0x2a>
 800c5e6:	68a3      	ldr	r3, [r4, #8]
 800c5e8:	3b01      	subs	r3, #1
 800c5ea:	60a3      	str	r3, [r4, #8]
 800c5ec:	6823      	ldr	r3, [r4, #0]
 800c5ee:	1c5a      	adds	r2, r3, #1
 800c5f0:	6022      	str	r2, [r4, #0]
 800c5f2:	701e      	strb	r6, [r3, #0]
 800c5f4:	6962      	ldr	r2, [r4, #20]
 800c5f6:	1c43      	adds	r3, r0, #1
 800c5f8:	429a      	cmp	r2, r3
 800c5fa:	d004      	beq.n	800c606 <__swbuf_r+0x6e>
 800c5fc:	89a3      	ldrh	r3, [r4, #12]
 800c5fe:	07db      	lsls	r3, r3, #31
 800c600:	d5e1      	bpl.n	800c5c6 <__swbuf_r+0x2e>
 800c602:	2e0a      	cmp	r6, #10
 800c604:	d1df      	bne.n	800c5c6 <__swbuf_r+0x2e>
 800c606:	4621      	mov	r1, r4
 800c608:	4628      	mov	r0, r5
 800c60a:	f7ff fd83 	bl	800c114 <_fflush_r>
 800c60e:	2800      	cmp	r0, #0
 800c610:	d0d9      	beq.n	800c5c6 <__swbuf_r+0x2e>
 800c612:	e7d6      	b.n	800c5c2 <__swbuf_r+0x2a>

0800c614 <__swsetup_r>:
 800c614:	b538      	push	{r3, r4, r5, lr}
 800c616:	4b29      	ldr	r3, [pc, #164]	@ (800c6bc <__swsetup_r+0xa8>)
 800c618:	4605      	mov	r5, r0
 800c61a:	6818      	ldr	r0, [r3, #0]
 800c61c:	460c      	mov	r4, r1
 800c61e:	b118      	cbz	r0, 800c628 <__swsetup_r+0x14>
 800c620:	6a03      	ldr	r3, [r0, #32]
 800c622:	b90b      	cbnz	r3, 800c628 <__swsetup_r+0x14>
 800c624:	f7fd ffaa 	bl	800a57c <__sinit>
 800c628:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c62c:	0719      	lsls	r1, r3, #28
 800c62e:	d422      	bmi.n	800c676 <__swsetup_r+0x62>
 800c630:	06da      	lsls	r2, r3, #27
 800c632:	d407      	bmi.n	800c644 <__swsetup_r+0x30>
 800c634:	2209      	movs	r2, #9
 800c636:	602a      	str	r2, [r5, #0]
 800c638:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c63c:	81a3      	strh	r3, [r4, #12]
 800c63e:	f04f 30ff 	mov.w	r0, #4294967295
 800c642:	e033      	b.n	800c6ac <__swsetup_r+0x98>
 800c644:	0758      	lsls	r0, r3, #29
 800c646:	d512      	bpl.n	800c66e <__swsetup_r+0x5a>
 800c648:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c64a:	b141      	cbz	r1, 800c65e <__swsetup_r+0x4a>
 800c64c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c650:	4299      	cmp	r1, r3
 800c652:	d002      	beq.n	800c65a <__swsetup_r+0x46>
 800c654:	4628      	mov	r0, r5
 800c656:	f7fe ff07 	bl	800b468 <_free_r>
 800c65a:	2300      	movs	r3, #0
 800c65c:	6363      	str	r3, [r4, #52]	@ 0x34
 800c65e:	89a3      	ldrh	r3, [r4, #12]
 800c660:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800c664:	81a3      	strh	r3, [r4, #12]
 800c666:	2300      	movs	r3, #0
 800c668:	6063      	str	r3, [r4, #4]
 800c66a:	6923      	ldr	r3, [r4, #16]
 800c66c:	6023      	str	r3, [r4, #0]
 800c66e:	89a3      	ldrh	r3, [r4, #12]
 800c670:	f043 0308 	orr.w	r3, r3, #8
 800c674:	81a3      	strh	r3, [r4, #12]
 800c676:	6923      	ldr	r3, [r4, #16]
 800c678:	b94b      	cbnz	r3, 800c68e <__swsetup_r+0x7a>
 800c67a:	89a3      	ldrh	r3, [r4, #12]
 800c67c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800c680:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c684:	d003      	beq.n	800c68e <__swsetup_r+0x7a>
 800c686:	4621      	mov	r1, r4
 800c688:	4628      	mov	r0, r5
 800c68a:	f000 f883 	bl	800c794 <__smakebuf_r>
 800c68e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c692:	f013 0201 	ands.w	r2, r3, #1
 800c696:	d00a      	beq.n	800c6ae <__swsetup_r+0x9a>
 800c698:	2200      	movs	r2, #0
 800c69a:	60a2      	str	r2, [r4, #8]
 800c69c:	6962      	ldr	r2, [r4, #20]
 800c69e:	4252      	negs	r2, r2
 800c6a0:	61a2      	str	r2, [r4, #24]
 800c6a2:	6922      	ldr	r2, [r4, #16]
 800c6a4:	b942      	cbnz	r2, 800c6b8 <__swsetup_r+0xa4>
 800c6a6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800c6aa:	d1c5      	bne.n	800c638 <__swsetup_r+0x24>
 800c6ac:	bd38      	pop	{r3, r4, r5, pc}
 800c6ae:	0799      	lsls	r1, r3, #30
 800c6b0:	bf58      	it	pl
 800c6b2:	6962      	ldrpl	r2, [r4, #20]
 800c6b4:	60a2      	str	r2, [r4, #8]
 800c6b6:	e7f4      	b.n	800c6a2 <__swsetup_r+0x8e>
 800c6b8:	2000      	movs	r0, #0
 800c6ba:	e7f7      	b.n	800c6ac <__swsetup_r+0x98>
 800c6bc:	2000012c 	.word	0x2000012c

0800c6c0 <_raise_r>:
 800c6c0:	291f      	cmp	r1, #31
 800c6c2:	b538      	push	{r3, r4, r5, lr}
 800c6c4:	4605      	mov	r5, r0
 800c6c6:	460c      	mov	r4, r1
 800c6c8:	d904      	bls.n	800c6d4 <_raise_r+0x14>
 800c6ca:	2316      	movs	r3, #22
 800c6cc:	6003      	str	r3, [r0, #0]
 800c6ce:	f04f 30ff 	mov.w	r0, #4294967295
 800c6d2:	bd38      	pop	{r3, r4, r5, pc}
 800c6d4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800c6d6:	b112      	cbz	r2, 800c6de <_raise_r+0x1e>
 800c6d8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c6dc:	b94b      	cbnz	r3, 800c6f2 <_raise_r+0x32>
 800c6de:	4628      	mov	r0, r5
 800c6e0:	f000 f830 	bl	800c744 <_getpid_r>
 800c6e4:	4622      	mov	r2, r4
 800c6e6:	4601      	mov	r1, r0
 800c6e8:	4628      	mov	r0, r5
 800c6ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c6ee:	f000 b817 	b.w	800c720 <_kill_r>
 800c6f2:	2b01      	cmp	r3, #1
 800c6f4:	d00a      	beq.n	800c70c <_raise_r+0x4c>
 800c6f6:	1c59      	adds	r1, r3, #1
 800c6f8:	d103      	bne.n	800c702 <_raise_r+0x42>
 800c6fa:	2316      	movs	r3, #22
 800c6fc:	6003      	str	r3, [r0, #0]
 800c6fe:	2001      	movs	r0, #1
 800c700:	e7e7      	b.n	800c6d2 <_raise_r+0x12>
 800c702:	2100      	movs	r1, #0
 800c704:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800c708:	4620      	mov	r0, r4
 800c70a:	4798      	blx	r3
 800c70c:	2000      	movs	r0, #0
 800c70e:	e7e0      	b.n	800c6d2 <_raise_r+0x12>

0800c710 <raise>:
 800c710:	4b02      	ldr	r3, [pc, #8]	@ (800c71c <raise+0xc>)
 800c712:	4601      	mov	r1, r0
 800c714:	6818      	ldr	r0, [r3, #0]
 800c716:	f7ff bfd3 	b.w	800c6c0 <_raise_r>
 800c71a:	bf00      	nop
 800c71c:	2000012c 	.word	0x2000012c

0800c720 <_kill_r>:
 800c720:	b538      	push	{r3, r4, r5, lr}
 800c722:	4d07      	ldr	r5, [pc, #28]	@ (800c740 <_kill_r+0x20>)
 800c724:	2300      	movs	r3, #0
 800c726:	4604      	mov	r4, r0
 800c728:	4608      	mov	r0, r1
 800c72a:	4611      	mov	r1, r2
 800c72c:	602b      	str	r3, [r5, #0]
 800c72e:	f7f5 fd71 	bl	8002214 <_kill>
 800c732:	1c43      	adds	r3, r0, #1
 800c734:	d102      	bne.n	800c73c <_kill_r+0x1c>
 800c736:	682b      	ldr	r3, [r5, #0]
 800c738:	b103      	cbz	r3, 800c73c <_kill_r+0x1c>
 800c73a:	6023      	str	r3, [r4, #0]
 800c73c:	bd38      	pop	{r3, r4, r5, pc}
 800c73e:	bf00      	nop
 800c740:	20000fe8 	.word	0x20000fe8

0800c744 <_getpid_r>:
 800c744:	f7f5 bd5e 	b.w	8002204 <_getpid>

0800c748 <__swhatbuf_r>:
 800c748:	b570      	push	{r4, r5, r6, lr}
 800c74a:	460c      	mov	r4, r1
 800c74c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c750:	2900      	cmp	r1, #0
 800c752:	b096      	sub	sp, #88	@ 0x58
 800c754:	4615      	mov	r5, r2
 800c756:	461e      	mov	r6, r3
 800c758:	da0d      	bge.n	800c776 <__swhatbuf_r+0x2e>
 800c75a:	89a3      	ldrh	r3, [r4, #12]
 800c75c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800c760:	f04f 0100 	mov.w	r1, #0
 800c764:	bf14      	ite	ne
 800c766:	2340      	movne	r3, #64	@ 0x40
 800c768:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800c76c:	2000      	movs	r0, #0
 800c76e:	6031      	str	r1, [r6, #0]
 800c770:	602b      	str	r3, [r5, #0]
 800c772:	b016      	add	sp, #88	@ 0x58
 800c774:	bd70      	pop	{r4, r5, r6, pc}
 800c776:	466a      	mov	r2, sp
 800c778:	f000 f848 	bl	800c80c <_fstat_r>
 800c77c:	2800      	cmp	r0, #0
 800c77e:	dbec      	blt.n	800c75a <__swhatbuf_r+0x12>
 800c780:	9901      	ldr	r1, [sp, #4]
 800c782:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800c786:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800c78a:	4259      	negs	r1, r3
 800c78c:	4159      	adcs	r1, r3
 800c78e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c792:	e7eb      	b.n	800c76c <__swhatbuf_r+0x24>

0800c794 <__smakebuf_r>:
 800c794:	898b      	ldrh	r3, [r1, #12]
 800c796:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c798:	079d      	lsls	r5, r3, #30
 800c79a:	4606      	mov	r6, r0
 800c79c:	460c      	mov	r4, r1
 800c79e:	d507      	bpl.n	800c7b0 <__smakebuf_r+0x1c>
 800c7a0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800c7a4:	6023      	str	r3, [r4, #0]
 800c7a6:	6123      	str	r3, [r4, #16]
 800c7a8:	2301      	movs	r3, #1
 800c7aa:	6163      	str	r3, [r4, #20]
 800c7ac:	b003      	add	sp, #12
 800c7ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c7b0:	ab01      	add	r3, sp, #4
 800c7b2:	466a      	mov	r2, sp
 800c7b4:	f7ff ffc8 	bl	800c748 <__swhatbuf_r>
 800c7b8:	9f00      	ldr	r7, [sp, #0]
 800c7ba:	4605      	mov	r5, r0
 800c7bc:	4639      	mov	r1, r7
 800c7be:	4630      	mov	r0, r6
 800c7c0:	f7fe fec6 	bl	800b550 <_malloc_r>
 800c7c4:	b948      	cbnz	r0, 800c7da <__smakebuf_r+0x46>
 800c7c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c7ca:	059a      	lsls	r2, r3, #22
 800c7cc:	d4ee      	bmi.n	800c7ac <__smakebuf_r+0x18>
 800c7ce:	f023 0303 	bic.w	r3, r3, #3
 800c7d2:	f043 0302 	orr.w	r3, r3, #2
 800c7d6:	81a3      	strh	r3, [r4, #12]
 800c7d8:	e7e2      	b.n	800c7a0 <__smakebuf_r+0xc>
 800c7da:	89a3      	ldrh	r3, [r4, #12]
 800c7dc:	6020      	str	r0, [r4, #0]
 800c7de:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c7e2:	81a3      	strh	r3, [r4, #12]
 800c7e4:	9b01      	ldr	r3, [sp, #4]
 800c7e6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800c7ea:	b15b      	cbz	r3, 800c804 <__smakebuf_r+0x70>
 800c7ec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c7f0:	4630      	mov	r0, r6
 800c7f2:	f000 f81d 	bl	800c830 <_isatty_r>
 800c7f6:	b128      	cbz	r0, 800c804 <__smakebuf_r+0x70>
 800c7f8:	89a3      	ldrh	r3, [r4, #12]
 800c7fa:	f023 0303 	bic.w	r3, r3, #3
 800c7fe:	f043 0301 	orr.w	r3, r3, #1
 800c802:	81a3      	strh	r3, [r4, #12]
 800c804:	89a3      	ldrh	r3, [r4, #12]
 800c806:	431d      	orrs	r5, r3
 800c808:	81a5      	strh	r5, [r4, #12]
 800c80a:	e7cf      	b.n	800c7ac <__smakebuf_r+0x18>

0800c80c <_fstat_r>:
 800c80c:	b538      	push	{r3, r4, r5, lr}
 800c80e:	4d07      	ldr	r5, [pc, #28]	@ (800c82c <_fstat_r+0x20>)
 800c810:	2300      	movs	r3, #0
 800c812:	4604      	mov	r4, r0
 800c814:	4608      	mov	r0, r1
 800c816:	4611      	mov	r1, r2
 800c818:	602b      	str	r3, [r5, #0]
 800c81a:	f7f5 fd5b 	bl	80022d4 <_fstat>
 800c81e:	1c43      	adds	r3, r0, #1
 800c820:	d102      	bne.n	800c828 <_fstat_r+0x1c>
 800c822:	682b      	ldr	r3, [r5, #0]
 800c824:	b103      	cbz	r3, 800c828 <_fstat_r+0x1c>
 800c826:	6023      	str	r3, [r4, #0]
 800c828:	bd38      	pop	{r3, r4, r5, pc}
 800c82a:	bf00      	nop
 800c82c:	20000fe8 	.word	0x20000fe8

0800c830 <_isatty_r>:
 800c830:	b538      	push	{r3, r4, r5, lr}
 800c832:	4d06      	ldr	r5, [pc, #24]	@ (800c84c <_isatty_r+0x1c>)
 800c834:	2300      	movs	r3, #0
 800c836:	4604      	mov	r4, r0
 800c838:	4608      	mov	r0, r1
 800c83a:	602b      	str	r3, [r5, #0]
 800c83c:	f7f5 fd5a 	bl	80022f4 <_isatty>
 800c840:	1c43      	adds	r3, r0, #1
 800c842:	d102      	bne.n	800c84a <_isatty_r+0x1a>
 800c844:	682b      	ldr	r3, [r5, #0]
 800c846:	b103      	cbz	r3, 800c84a <_isatty_r+0x1a>
 800c848:	6023      	str	r3, [r4, #0]
 800c84a:	bd38      	pop	{r3, r4, r5, pc}
 800c84c:	20000fe8 	.word	0x20000fe8

0800c850 <_init>:
 800c850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c852:	bf00      	nop
 800c854:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c856:	bc08      	pop	{r3}
 800c858:	469e      	mov	lr, r3
 800c85a:	4770      	bx	lr

0800c85c <_fini>:
 800c85c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c85e:	bf00      	nop
 800c860:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c862:	bc08      	pop	{r3}
 800c864:	469e      	mov	lr, r3
 800c866:	4770      	bx	lr
