
BTL_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b248  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003d4  0800b3f8  0800b3f8  0000c3f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b7cc  0800b7cc  0000d2e4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800b7cc  0800b7cc  0000c7cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b7d4  0800b7d4  0000d2e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b7d4  0800b7d4  0000c7d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b7d8  0800b7d8  0000c7d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002e4  20000000  0800b7dc  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000d2e4  2**0
                  CONTENTS
 10 .bss          00000c9c  200002e8  200002e8  0000d2e8  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  20000f84  20000f84  0000d2e8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000d2e4  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010d82  00000000  00000000  0000d314  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003021  00000000  00000000  0001e096  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ef0  00000000  00000000  000210b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b40  00000000  00000000  00021fa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026705  00000000  00000000  00022ae8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00014776  00000000  00000000  000491ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d8216  00000000  00000000  0005d963  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00135b79  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004cc8  00000000  00000000  00135bbc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000053  00000000  00000000  0013a884  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200002e8 	.word	0x200002e8
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800b3e0 	.word	0x0800b3e0

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200002ec 	.word	0x200002ec
 80001ec:	0800b3e0 	.word	0x0800b3e0

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2f>:
 8000bc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bcc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bd0:	bf24      	itt	cs
 8000bd2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bd6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bda:	d90d      	bls.n	8000bf8 <__aeabi_d2f+0x30>
 8000bdc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000be0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000be4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000be8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bf0:	bf08      	it	eq
 8000bf2:	f020 0001 	biceq.w	r0, r0, #1
 8000bf6:	4770      	bx	lr
 8000bf8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bfc:	d121      	bne.n	8000c42 <__aeabi_d2f+0x7a>
 8000bfe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c02:	bfbc      	itt	lt
 8000c04:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c08:	4770      	bxlt	lr
 8000c0a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c12:	f1c2 0218 	rsb	r2, r2, #24
 8000c16:	f1c2 0c20 	rsb	ip, r2, #32
 8000c1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c22:	bf18      	it	ne
 8000c24:	f040 0001 	orrne.w	r0, r0, #1
 8000c28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c34:	ea40 000c 	orr.w	r0, r0, ip
 8000c38:	fa23 f302 	lsr.w	r3, r3, r2
 8000c3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c40:	e7cc      	b.n	8000bdc <__aeabi_d2f+0x14>
 8000c42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c46:	d107      	bne.n	8000c58 <__aeabi_d2f+0x90>
 8000c48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c4c:	bf1e      	ittt	ne
 8000c4e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c52:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c56:	4770      	bxne	lr
 8000c58:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c5c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c60:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop

08000c68 <__aeabi_uldivmod>:
 8000c68:	b953      	cbnz	r3, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6a:	b94a      	cbnz	r2, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6c:	2900      	cmp	r1, #0
 8000c6e:	bf08      	it	eq
 8000c70:	2800      	cmpeq	r0, #0
 8000c72:	bf1c      	itt	ne
 8000c74:	f04f 31ff 	movne.w	r1, #4294967295
 8000c78:	f04f 30ff 	movne.w	r0, #4294967295
 8000c7c:	f000 b988 	b.w	8000f90 <__aeabi_idiv0>
 8000c80:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c84:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c88:	f000 f806 	bl	8000c98 <__udivmoddi4>
 8000c8c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c94:	b004      	add	sp, #16
 8000c96:	4770      	bx	lr

08000c98 <__udivmoddi4>:
 8000c98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c9c:	9d08      	ldr	r5, [sp, #32]
 8000c9e:	468e      	mov	lr, r1
 8000ca0:	4604      	mov	r4, r0
 8000ca2:	4688      	mov	r8, r1
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d14a      	bne.n	8000d3e <__udivmoddi4+0xa6>
 8000ca8:	428a      	cmp	r2, r1
 8000caa:	4617      	mov	r7, r2
 8000cac:	d962      	bls.n	8000d74 <__udivmoddi4+0xdc>
 8000cae:	fab2 f682 	clz	r6, r2
 8000cb2:	b14e      	cbz	r6, 8000cc8 <__udivmoddi4+0x30>
 8000cb4:	f1c6 0320 	rsb	r3, r6, #32
 8000cb8:	fa01 f806 	lsl.w	r8, r1, r6
 8000cbc:	fa20 f303 	lsr.w	r3, r0, r3
 8000cc0:	40b7      	lsls	r7, r6
 8000cc2:	ea43 0808 	orr.w	r8, r3, r8
 8000cc6:	40b4      	lsls	r4, r6
 8000cc8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ccc:	fa1f fc87 	uxth.w	ip, r7
 8000cd0:	fbb8 f1fe 	udiv	r1, r8, lr
 8000cd4:	0c23      	lsrs	r3, r4, #16
 8000cd6:	fb0e 8811 	mls	r8, lr, r1, r8
 8000cda:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cde:	fb01 f20c 	mul.w	r2, r1, ip
 8000ce2:	429a      	cmp	r2, r3
 8000ce4:	d909      	bls.n	8000cfa <__udivmoddi4+0x62>
 8000ce6:	18fb      	adds	r3, r7, r3
 8000ce8:	f101 30ff 	add.w	r0, r1, #4294967295
 8000cec:	f080 80ea 	bcs.w	8000ec4 <__udivmoddi4+0x22c>
 8000cf0:	429a      	cmp	r2, r3
 8000cf2:	f240 80e7 	bls.w	8000ec4 <__udivmoddi4+0x22c>
 8000cf6:	3902      	subs	r1, #2
 8000cf8:	443b      	add	r3, r7
 8000cfa:	1a9a      	subs	r2, r3, r2
 8000cfc:	b2a3      	uxth	r3, r4
 8000cfe:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d02:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d06:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d0a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d0e:	459c      	cmp	ip, r3
 8000d10:	d909      	bls.n	8000d26 <__udivmoddi4+0x8e>
 8000d12:	18fb      	adds	r3, r7, r3
 8000d14:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d18:	f080 80d6 	bcs.w	8000ec8 <__udivmoddi4+0x230>
 8000d1c:	459c      	cmp	ip, r3
 8000d1e:	f240 80d3 	bls.w	8000ec8 <__udivmoddi4+0x230>
 8000d22:	443b      	add	r3, r7
 8000d24:	3802      	subs	r0, #2
 8000d26:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d2a:	eba3 030c 	sub.w	r3, r3, ip
 8000d2e:	2100      	movs	r1, #0
 8000d30:	b11d      	cbz	r5, 8000d3a <__udivmoddi4+0xa2>
 8000d32:	40f3      	lsrs	r3, r6
 8000d34:	2200      	movs	r2, #0
 8000d36:	e9c5 3200 	strd	r3, r2, [r5]
 8000d3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d3e:	428b      	cmp	r3, r1
 8000d40:	d905      	bls.n	8000d4e <__udivmoddi4+0xb6>
 8000d42:	b10d      	cbz	r5, 8000d48 <__udivmoddi4+0xb0>
 8000d44:	e9c5 0100 	strd	r0, r1, [r5]
 8000d48:	2100      	movs	r1, #0
 8000d4a:	4608      	mov	r0, r1
 8000d4c:	e7f5      	b.n	8000d3a <__udivmoddi4+0xa2>
 8000d4e:	fab3 f183 	clz	r1, r3
 8000d52:	2900      	cmp	r1, #0
 8000d54:	d146      	bne.n	8000de4 <__udivmoddi4+0x14c>
 8000d56:	4573      	cmp	r3, lr
 8000d58:	d302      	bcc.n	8000d60 <__udivmoddi4+0xc8>
 8000d5a:	4282      	cmp	r2, r0
 8000d5c:	f200 8105 	bhi.w	8000f6a <__udivmoddi4+0x2d2>
 8000d60:	1a84      	subs	r4, r0, r2
 8000d62:	eb6e 0203 	sbc.w	r2, lr, r3
 8000d66:	2001      	movs	r0, #1
 8000d68:	4690      	mov	r8, r2
 8000d6a:	2d00      	cmp	r5, #0
 8000d6c:	d0e5      	beq.n	8000d3a <__udivmoddi4+0xa2>
 8000d6e:	e9c5 4800 	strd	r4, r8, [r5]
 8000d72:	e7e2      	b.n	8000d3a <__udivmoddi4+0xa2>
 8000d74:	2a00      	cmp	r2, #0
 8000d76:	f000 8090 	beq.w	8000e9a <__udivmoddi4+0x202>
 8000d7a:	fab2 f682 	clz	r6, r2
 8000d7e:	2e00      	cmp	r6, #0
 8000d80:	f040 80a4 	bne.w	8000ecc <__udivmoddi4+0x234>
 8000d84:	1a8a      	subs	r2, r1, r2
 8000d86:	0c03      	lsrs	r3, r0, #16
 8000d88:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d8c:	b280      	uxth	r0, r0
 8000d8e:	b2bc      	uxth	r4, r7
 8000d90:	2101      	movs	r1, #1
 8000d92:	fbb2 fcfe 	udiv	ip, r2, lr
 8000d96:	fb0e 221c 	mls	r2, lr, ip, r2
 8000d9a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d9e:	fb04 f20c 	mul.w	r2, r4, ip
 8000da2:	429a      	cmp	r2, r3
 8000da4:	d907      	bls.n	8000db6 <__udivmoddi4+0x11e>
 8000da6:	18fb      	adds	r3, r7, r3
 8000da8:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000dac:	d202      	bcs.n	8000db4 <__udivmoddi4+0x11c>
 8000dae:	429a      	cmp	r2, r3
 8000db0:	f200 80e0 	bhi.w	8000f74 <__udivmoddi4+0x2dc>
 8000db4:	46c4      	mov	ip, r8
 8000db6:	1a9b      	subs	r3, r3, r2
 8000db8:	fbb3 f2fe 	udiv	r2, r3, lr
 8000dbc:	fb0e 3312 	mls	r3, lr, r2, r3
 8000dc0:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000dc4:	fb02 f404 	mul.w	r4, r2, r4
 8000dc8:	429c      	cmp	r4, r3
 8000dca:	d907      	bls.n	8000ddc <__udivmoddi4+0x144>
 8000dcc:	18fb      	adds	r3, r7, r3
 8000dce:	f102 30ff 	add.w	r0, r2, #4294967295
 8000dd2:	d202      	bcs.n	8000dda <__udivmoddi4+0x142>
 8000dd4:	429c      	cmp	r4, r3
 8000dd6:	f200 80ca 	bhi.w	8000f6e <__udivmoddi4+0x2d6>
 8000dda:	4602      	mov	r2, r0
 8000ddc:	1b1b      	subs	r3, r3, r4
 8000dde:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000de2:	e7a5      	b.n	8000d30 <__udivmoddi4+0x98>
 8000de4:	f1c1 0620 	rsb	r6, r1, #32
 8000de8:	408b      	lsls	r3, r1
 8000dea:	fa22 f706 	lsr.w	r7, r2, r6
 8000dee:	431f      	orrs	r7, r3
 8000df0:	fa0e f401 	lsl.w	r4, lr, r1
 8000df4:	fa20 f306 	lsr.w	r3, r0, r6
 8000df8:	fa2e fe06 	lsr.w	lr, lr, r6
 8000dfc:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000e00:	4323      	orrs	r3, r4
 8000e02:	fa00 f801 	lsl.w	r8, r0, r1
 8000e06:	fa1f fc87 	uxth.w	ip, r7
 8000e0a:	fbbe f0f9 	udiv	r0, lr, r9
 8000e0e:	0c1c      	lsrs	r4, r3, #16
 8000e10:	fb09 ee10 	mls	lr, r9, r0, lr
 8000e14:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000e18:	fb00 fe0c 	mul.w	lr, r0, ip
 8000e1c:	45a6      	cmp	lr, r4
 8000e1e:	fa02 f201 	lsl.w	r2, r2, r1
 8000e22:	d909      	bls.n	8000e38 <__udivmoddi4+0x1a0>
 8000e24:	193c      	adds	r4, r7, r4
 8000e26:	f100 3aff 	add.w	sl, r0, #4294967295
 8000e2a:	f080 809c 	bcs.w	8000f66 <__udivmoddi4+0x2ce>
 8000e2e:	45a6      	cmp	lr, r4
 8000e30:	f240 8099 	bls.w	8000f66 <__udivmoddi4+0x2ce>
 8000e34:	3802      	subs	r0, #2
 8000e36:	443c      	add	r4, r7
 8000e38:	eba4 040e 	sub.w	r4, r4, lr
 8000e3c:	fa1f fe83 	uxth.w	lr, r3
 8000e40:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e44:	fb09 4413 	mls	r4, r9, r3, r4
 8000e48:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000e4c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e50:	45a4      	cmp	ip, r4
 8000e52:	d908      	bls.n	8000e66 <__udivmoddi4+0x1ce>
 8000e54:	193c      	adds	r4, r7, r4
 8000e56:	f103 3eff 	add.w	lr, r3, #4294967295
 8000e5a:	f080 8082 	bcs.w	8000f62 <__udivmoddi4+0x2ca>
 8000e5e:	45a4      	cmp	ip, r4
 8000e60:	d97f      	bls.n	8000f62 <__udivmoddi4+0x2ca>
 8000e62:	3b02      	subs	r3, #2
 8000e64:	443c      	add	r4, r7
 8000e66:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000e6a:	eba4 040c 	sub.w	r4, r4, ip
 8000e6e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000e72:	4564      	cmp	r4, ip
 8000e74:	4673      	mov	r3, lr
 8000e76:	46e1      	mov	r9, ip
 8000e78:	d362      	bcc.n	8000f40 <__udivmoddi4+0x2a8>
 8000e7a:	d05f      	beq.n	8000f3c <__udivmoddi4+0x2a4>
 8000e7c:	b15d      	cbz	r5, 8000e96 <__udivmoddi4+0x1fe>
 8000e7e:	ebb8 0203 	subs.w	r2, r8, r3
 8000e82:	eb64 0409 	sbc.w	r4, r4, r9
 8000e86:	fa04 f606 	lsl.w	r6, r4, r6
 8000e8a:	fa22 f301 	lsr.w	r3, r2, r1
 8000e8e:	431e      	orrs	r6, r3
 8000e90:	40cc      	lsrs	r4, r1
 8000e92:	e9c5 6400 	strd	r6, r4, [r5]
 8000e96:	2100      	movs	r1, #0
 8000e98:	e74f      	b.n	8000d3a <__udivmoddi4+0xa2>
 8000e9a:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e9e:	0c01      	lsrs	r1, r0, #16
 8000ea0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000ea4:	b280      	uxth	r0, r0
 8000ea6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000eaa:	463b      	mov	r3, r7
 8000eac:	4638      	mov	r0, r7
 8000eae:	463c      	mov	r4, r7
 8000eb0:	46b8      	mov	r8, r7
 8000eb2:	46be      	mov	lr, r7
 8000eb4:	2620      	movs	r6, #32
 8000eb6:	fbb1 f1f7 	udiv	r1, r1, r7
 8000eba:	eba2 0208 	sub.w	r2, r2, r8
 8000ebe:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000ec2:	e766      	b.n	8000d92 <__udivmoddi4+0xfa>
 8000ec4:	4601      	mov	r1, r0
 8000ec6:	e718      	b.n	8000cfa <__udivmoddi4+0x62>
 8000ec8:	4610      	mov	r0, r2
 8000eca:	e72c      	b.n	8000d26 <__udivmoddi4+0x8e>
 8000ecc:	f1c6 0220 	rsb	r2, r6, #32
 8000ed0:	fa2e f302 	lsr.w	r3, lr, r2
 8000ed4:	40b7      	lsls	r7, r6
 8000ed6:	40b1      	lsls	r1, r6
 8000ed8:	fa20 f202 	lsr.w	r2, r0, r2
 8000edc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ee0:	430a      	orrs	r2, r1
 8000ee2:	fbb3 f8fe 	udiv	r8, r3, lr
 8000ee6:	b2bc      	uxth	r4, r7
 8000ee8:	fb0e 3318 	mls	r3, lr, r8, r3
 8000eec:	0c11      	lsrs	r1, r2, #16
 8000eee:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef2:	fb08 f904 	mul.w	r9, r8, r4
 8000ef6:	40b0      	lsls	r0, r6
 8000ef8:	4589      	cmp	r9, r1
 8000efa:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000efe:	b280      	uxth	r0, r0
 8000f00:	d93e      	bls.n	8000f80 <__udivmoddi4+0x2e8>
 8000f02:	1879      	adds	r1, r7, r1
 8000f04:	f108 3cff 	add.w	ip, r8, #4294967295
 8000f08:	d201      	bcs.n	8000f0e <__udivmoddi4+0x276>
 8000f0a:	4589      	cmp	r9, r1
 8000f0c:	d81f      	bhi.n	8000f4e <__udivmoddi4+0x2b6>
 8000f0e:	eba1 0109 	sub.w	r1, r1, r9
 8000f12:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f16:	fb09 f804 	mul.w	r8, r9, r4
 8000f1a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f1e:	b292      	uxth	r2, r2
 8000f20:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f24:	4542      	cmp	r2, r8
 8000f26:	d229      	bcs.n	8000f7c <__udivmoddi4+0x2e4>
 8000f28:	18ba      	adds	r2, r7, r2
 8000f2a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000f2e:	d2c4      	bcs.n	8000eba <__udivmoddi4+0x222>
 8000f30:	4542      	cmp	r2, r8
 8000f32:	d2c2      	bcs.n	8000eba <__udivmoddi4+0x222>
 8000f34:	f1a9 0102 	sub.w	r1, r9, #2
 8000f38:	443a      	add	r2, r7
 8000f3a:	e7be      	b.n	8000eba <__udivmoddi4+0x222>
 8000f3c:	45f0      	cmp	r8, lr
 8000f3e:	d29d      	bcs.n	8000e7c <__udivmoddi4+0x1e4>
 8000f40:	ebbe 0302 	subs.w	r3, lr, r2
 8000f44:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000f48:	3801      	subs	r0, #1
 8000f4a:	46e1      	mov	r9, ip
 8000f4c:	e796      	b.n	8000e7c <__udivmoddi4+0x1e4>
 8000f4e:	eba7 0909 	sub.w	r9, r7, r9
 8000f52:	4449      	add	r1, r9
 8000f54:	f1a8 0c02 	sub.w	ip, r8, #2
 8000f58:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f5c:	fb09 f804 	mul.w	r8, r9, r4
 8000f60:	e7db      	b.n	8000f1a <__udivmoddi4+0x282>
 8000f62:	4673      	mov	r3, lr
 8000f64:	e77f      	b.n	8000e66 <__udivmoddi4+0x1ce>
 8000f66:	4650      	mov	r0, sl
 8000f68:	e766      	b.n	8000e38 <__udivmoddi4+0x1a0>
 8000f6a:	4608      	mov	r0, r1
 8000f6c:	e6fd      	b.n	8000d6a <__udivmoddi4+0xd2>
 8000f6e:	443b      	add	r3, r7
 8000f70:	3a02      	subs	r2, #2
 8000f72:	e733      	b.n	8000ddc <__udivmoddi4+0x144>
 8000f74:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f78:	443b      	add	r3, r7
 8000f7a:	e71c      	b.n	8000db6 <__udivmoddi4+0x11e>
 8000f7c:	4649      	mov	r1, r9
 8000f7e:	e79c      	b.n	8000eba <__udivmoddi4+0x222>
 8000f80:	eba1 0109 	sub.w	r1, r1, r9
 8000f84:	46c4      	mov	ip, r8
 8000f86:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f8a:	fb09 f804 	mul.w	r8, r9, r4
 8000f8e:	e7c4      	b.n	8000f1a <__udivmoddi4+0x282>

08000f90 <__aeabi_idiv0>:
 8000f90:	4770      	bx	lr
 8000f92:	bf00      	nop

08000f94 <KalmanFilter_Init>:

#include "kalman.h"
#include "math.h"
#include "main.h"

void KalmanFilter_Init(KalmanFilter_t* kalman, double Q_angle, double Q_bias, double R_measure) {
 8000f94:	b480      	push	{r7}
 8000f96:	b089      	sub	sp, #36	@ 0x24
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	61f8      	str	r0, [r7, #28]
 8000f9c:	ed87 0b04 	vstr	d0, [r7, #16]
 8000fa0:	ed87 1b02 	vstr	d1, [r7, #8]
 8000fa4:	ed87 2b00 	vstr	d2, [r7]
	kalman->Q_angle = Q_angle;
 8000fa8:	69f9      	ldr	r1, [r7, #28]
 8000faa:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000fae:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
	kalman->Q_bias = Q_bias;
 8000fb2:	69f9      	ldr	r1, [r7, #28]
 8000fb4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000fb8:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40
	kalman->R_measure = R_measure;
 8000fbc:	69f9      	ldr	r1, [r7, #28]
 8000fbe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000fc2:	e9c1 2312 	strd	r2, r3, [r1, #72]	@ 0x48

	// Khởi tạo các giá trị mặc định
	kalman->angle = 0.0;
 8000fc6:	69f9      	ldr	r1, [r7, #28]
 8000fc8:	f04f 0200 	mov.w	r2, #0
 8000fcc:	f04f 0300 	mov.w	r3, #0
 8000fd0:	e9c1 2300 	strd	r2, r3, [r1]
	kalman->bias = 0.0;
 8000fd4:	69f9      	ldr	r1, [r7, #28]
 8000fd6:	f04f 0200 	mov.w	r2, #0
 8000fda:	f04f 0300 	mov.w	r3, #0
 8000fde:	e9c1 2302 	strd	r2, r3, [r1, #8]
	kalman->rate = 0.0;
 8000fe2:	69f9      	ldr	r1, [r7, #28]
 8000fe4:	f04f 0200 	mov.w	r2, #0
 8000fe8:	f04f 0300 	mov.w	r3, #0
 8000fec:	e9c1 2304 	strd	r2, r3, [r1, #16]

	// Khởi tạo ma trận hiệp phương sai
	kalman->P[0][0] = 0.0;
 8000ff0:	69f9      	ldr	r1, [r7, #28]
 8000ff2:	f04f 0200 	mov.w	r2, #0
 8000ff6:	f04f 0300 	mov.w	r3, #0
 8000ffa:	e9c1 2306 	strd	r2, r3, [r1, #24]
	kalman->P[0][1] = 0.0;
 8000ffe:	69f9      	ldr	r1, [r7, #28]
 8001000:	f04f 0200 	mov.w	r2, #0
 8001004:	f04f 0300 	mov.w	r3, #0
 8001008:	e9c1 2308 	strd	r2, r3, [r1, #32]
	kalman->P[1][0] = 0.0;
 800100c:	69f9      	ldr	r1, [r7, #28]
 800100e:	f04f 0200 	mov.w	r2, #0
 8001012:	f04f 0300 	mov.w	r3, #0
 8001016:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
	kalman->P[1][1] = 0.0;
 800101a:	69f9      	ldr	r1, [r7, #28]
 800101c:	f04f 0200 	mov.w	r2, #0
 8001020:	f04f 0300 	mov.w	r3, #0
 8001024:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
}
 8001028:	bf00      	nop
 800102a:	3724      	adds	r7, #36	@ 0x24
 800102c:	46bd      	mov	sp, r7
 800102e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001032:	4770      	bx	lr

08001034 <KalmanFilter_Update>:

double KalmanFilter_Update(KalmanFilter_t* kalman, double newAngle, double newRate, double dt) {
 8001034:	b5b0      	push	{r4, r5, r7, lr}
 8001036:	b094      	sub	sp, #80	@ 0x50
 8001038:	af00      	add	r7, sp, #0
 800103a:	61f8      	str	r0, [r7, #28]
 800103c:	ed87 0b04 	vstr	d0, [r7, #16]
 8001040:	ed87 1b02 	vstr	d1, [r7, #8]
 8001044:	ed87 2b00 	vstr	d2, [r7]
	// Bước 1: Dự đoán
	// Cập nhật góc dựa trên tốc độ góc
	kalman->angle += dt * (newRate - kalman->bias);
 8001048:	69fb      	ldr	r3, [r7, #28]
 800104a:	e9d3 4500 	ldrd	r4, r5, [r3]
 800104e:	69fb      	ldr	r3, [r7, #28]
 8001050:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001054:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001058:	f7ff f926 	bl	80002a8 <__aeabi_dsub>
 800105c:	4602      	mov	r2, r0
 800105e:	460b      	mov	r3, r1
 8001060:	4610      	mov	r0, r2
 8001062:	4619      	mov	r1, r3
 8001064:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001068:	f7ff fad6 	bl	8000618 <__aeabi_dmul>
 800106c:	4602      	mov	r2, r0
 800106e:	460b      	mov	r3, r1
 8001070:	4620      	mov	r0, r4
 8001072:	4629      	mov	r1, r5
 8001074:	f7ff f91a 	bl	80002ac <__adddf3>
 8001078:	4602      	mov	r2, r0
 800107a:	460b      	mov	r3, r1
 800107c:	69f9      	ldr	r1, [r7, #28]
 800107e:	e9c1 2300 	strd	r2, r3, [r1]

	// Cập nhật ma trận hiệp phương sai
	kalman->P[0][0] += dt * (dt * kalman->P[1][1] - kalman->P[0][1] - kalman->P[1][0] + kalman->Q_angle);
 8001082:	69fb      	ldr	r3, [r7, #28]
 8001084:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8001088:	69fb      	ldr	r3, [r7, #28]
 800108a:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 800108e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001092:	f7ff fac1 	bl	8000618 <__aeabi_dmul>
 8001096:	4602      	mov	r2, r0
 8001098:	460b      	mov	r3, r1
 800109a:	4610      	mov	r0, r2
 800109c:	4619      	mov	r1, r3
 800109e:	69fb      	ldr	r3, [r7, #28]
 80010a0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80010a4:	f7ff f900 	bl	80002a8 <__aeabi_dsub>
 80010a8:	4602      	mov	r2, r0
 80010aa:	460b      	mov	r3, r1
 80010ac:	4610      	mov	r0, r2
 80010ae:	4619      	mov	r1, r3
 80010b0:	69fb      	ldr	r3, [r7, #28]
 80010b2:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 80010b6:	f7ff f8f7 	bl	80002a8 <__aeabi_dsub>
 80010ba:	4602      	mov	r2, r0
 80010bc:	460b      	mov	r3, r1
 80010be:	4610      	mov	r0, r2
 80010c0:	4619      	mov	r1, r3
 80010c2:	69fb      	ldr	r3, [r7, #28]
 80010c4:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 80010c8:	f7ff f8f0 	bl	80002ac <__adddf3>
 80010cc:	4602      	mov	r2, r0
 80010ce:	460b      	mov	r3, r1
 80010d0:	4610      	mov	r0, r2
 80010d2:	4619      	mov	r1, r3
 80010d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80010d8:	f7ff fa9e 	bl	8000618 <__aeabi_dmul>
 80010dc:	4602      	mov	r2, r0
 80010de:	460b      	mov	r3, r1
 80010e0:	4620      	mov	r0, r4
 80010e2:	4629      	mov	r1, r5
 80010e4:	f7ff f8e2 	bl	80002ac <__adddf3>
 80010e8:	4602      	mov	r2, r0
 80010ea:	460b      	mov	r3, r1
 80010ec:	69f9      	ldr	r1, [r7, #28]
 80010ee:	e9c1 2306 	strd	r2, r3, [r1, #24]
	kalman->P[0][1] -= dt * kalman->P[1][1];
 80010f2:	69fb      	ldr	r3, [r7, #28]
 80010f4:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 80010f8:	69fb      	ldr	r3, [r7, #28]
 80010fa:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 80010fe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001102:	f7ff fa89 	bl	8000618 <__aeabi_dmul>
 8001106:	4602      	mov	r2, r0
 8001108:	460b      	mov	r3, r1
 800110a:	4620      	mov	r0, r4
 800110c:	4629      	mov	r1, r5
 800110e:	f7ff f8cb 	bl	80002a8 <__aeabi_dsub>
 8001112:	4602      	mov	r2, r0
 8001114:	460b      	mov	r3, r1
 8001116:	69f9      	ldr	r1, [r7, #28]
 8001118:	e9c1 2308 	strd	r2, r3, [r1, #32]
	kalman->P[1][0] -= dt * kalman->P[1][1];
 800111c:	69fb      	ldr	r3, [r7, #28]
 800111e:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	@ 0x28
 8001122:	69fb      	ldr	r3, [r7, #28]
 8001124:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 8001128:	e9d7 2300 	ldrd	r2, r3, [r7]
 800112c:	f7ff fa74 	bl	8000618 <__aeabi_dmul>
 8001130:	4602      	mov	r2, r0
 8001132:	460b      	mov	r3, r1
 8001134:	4620      	mov	r0, r4
 8001136:	4629      	mov	r1, r5
 8001138:	f7ff f8b6 	bl	80002a8 <__aeabi_dsub>
 800113c:	4602      	mov	r2, r0
 800113e:	460b      	mov	r3, r1
 8001140:	69f9      	ldr	r1, [r7, #28]
 8001142:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
	kalman->P[1][1] += kalman->Q_bias * dt;
 8001146:	69fb      	ldr	r3, [r7, #28]
 8001148:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	@ 0x30
 800114c:	69fb      	ldr	r3, [r7, #28]
 800114e:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 8001152:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001156:	f7ff fa5f 	bl	8000618 <__aeabi_dmul>
 800115a:	4602      	mov	r2, r0
 800115c:	460b      	mov	r3, r1
 800115e:	4620      	mov	r0, r4
 8001160:	4629      	mov	r1, r5
 8001162:	f7ff f8a3 	bl	80002ac <__adddf3>
 8001166:	4602      	mov	r2, r0
 8001168:	460b      	mov	r3, r1
 800116a:	69f9      	ldr	r1, [r7, #28]
 800116c:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30

	// Bước 2: Cập nhật
	// Tính độ lệch giữa góc đo được và góc dự đoán
	double S = kalman->P[0][0] + kalman->R_measure;
 8001170:	69fb      	ldr	r3, [r7, #28]
 8001172:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8001176:	69fb      	ldr	r3, [r7, #28]
 8001178:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	@ 0x48
 800117c:	f7ff f896 	bl	80002ac <__adddf3>
 8001180:	4602      	mov	r2, r0
 8001182:	460b      	mov	r3, r1
 8001184:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48

	// Tính Kalman gain
	double K[2];
	K[0] = kalman->P[0][0] / S;
 8001188:	69fb      	ldr	r3, [r7, #28]
 800118a:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 800118e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001192:	f7ff fb6b 	bl	800086c <__aeabi_ddiv>
 8001196:	4602      	mov	r2, r0
 8001198:	460b      	mov	r3, r1
 800119a:	e9c7 2308 	strd	r2, r3, [r7, #32]
	K[1] = kalman->P[1][0] / S;
 800119e:	69fb      	ldr	r3, [r7, #28]
 80011a0:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 80011a4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80011a8:	f7ff fb60 	bl	800086c <__aeabi_ddiv>
 80011ac:	4602      	mov	r2, r0
 80011ae:	460b      	mov	r3, r1
 80011b0:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28

	// Cập nhật góc và độ lệch
	double y = newAngle - kalman->angle;
 80011b4:	69fb      	ldr	r3, [r7, #28]
 80011b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011ba:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80011be:	f7ff f873 	bl	80002a8 <__aeabi_dsub>
 80011c2:	4602      	mov	r2, r0
 80011c4:	460b      	mov	r3, r1
 80011c6:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
	kalman->angle += K[0] * y;
 80011ca:	69fb      	ldr	r3, [r7, #28]
 80011cc:	e9d3 4500 	ldrd	r4, r5, [r3]
 80011d0:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80011d4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80011d8:	f7ff fa1e 	bl	8000618 <__aeabi_dmul>
 80011dc:	4602      	mov	r2, r0
 80011de:	460b      	mov	r3, r1
 80011e0:	4620      	mov	r0, r4
 80011e2:	4629      	mov	r1, r5
 80011e4:	f7ff f862 	bl	80002ac <__adddf3>
 80011e8:	4602      	mov	r2, r0
 80011ea:	460b      	mov	r3, r1
 80011ec:	69f9      	ldr	r1, [r7, #28]
 80011ee:	e9c1 2300 	strd	r2, r3, [r1]
	kalman->bias += K[1] * y;
 80011f2:	69fb      	ldr	r3, [r7, #28]
 80011f4:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 80011f8:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80011fc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8001200:	f7ff fa0a 	bl	8000618 <__aeabi_dmul>
 8001204:	4602      	mov	r2, r0
 8001206:	460b      	mov	r3, r1
 8001208:	4620      	mov	r0, r4
 800120a:	4629      	mov	r1, r5
 800120c:	f7ff f84e 	bl	80002ac <__adddf3>
 8001210:	4602      	mov	r2, r0
 8001212:	460b      	mov	r3, r1
 8001214:	69f9      	ldr	r1, [r7, #28]
 8001216:	e9c1 2302 	strd	r2, r3, [r1, #8]

	// Cập nhật ma trận hiệp phương sai
	double P00_temp = kalman->P[0][0];
 800121a:	69fb      	ldr	r3, [r7, #28]
 800121c:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001220:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
	double P01_temp = kalman->P[0][1];
 8001224:	69fb      	ldr	r3, [r7, #28]
 8001226:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800122a:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

	kalman->P[0][0] -= K[0] * P00_temp;
 800122e:	69fb      	ldr	r3, [r7, #28]
 8001230:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8001234:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001238:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800123c:	f7ff f9ec 	bl	8000618 <__aeabi_dmul>
 8001240:	4602      	mov	r2, r0
 8001242:	460b      	mov	r3, r1
 8001244:	4620      	mov	r0, r4
 8001246:	4629      	mov	r1, r5
 8001248:	f7ff f82e 	bl	80002a8 <__aeabi_dsub>
 800124c:	4602      	mov	r2, r0
 800124e:	460b      	mov	r3, r1
 8001250:	69f9      	ldr	r1, [r7, #28]
 8001252:	e9c1 2306 	strd	r2, r3, [r1, #24]
	kalman->P[0][1] -= K[0] * P01_temp;
 8001256:	69fb      	ldr	r3, [r7, #28]
 8001258:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 800125c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001260:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001264:	f7ff f9d8 	bl	8000618 <__aeabi_dmul>
 8001268:	4602      	mov	r2, r0
 800126a:	460b      	mov	r3, r1
 800126c:	4620      	mov	r0, r4
 800126e:	4629      	mov	r1, r5
 8001270:	f7ff f81a 	bl	80002a8 <__aeabi_dsub>
 8001274:	4602      	mov	r2, r0
 8001276:	460b      	mov	r3, r1
 8001278:	69f9      	ldr	r1, [r7, #28]
 800127a:	e9c1 2308 	strd	r2, r3, [r1, #32]
	kalman->P[1][0] -= K[1] * P00_temp;
 800127e:	69fb      	ldr	r3, [r7, #28]
 8001280:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	@ 0x28
 8001284:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001288:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800128c:	f7ff f9c4 	bl	8000618 <__aeabi_dmul>
 8001290:	4602      	mov	r2, r0
 8001292:	460b      	mov	r3, r1
 8001294:	4620      	mov	r0, r4
 8001296:	4629      	mov	r1, r5
 8001298:	f7ff f806 	bl	80002a8 <__aeabi_dsub>
 800129c:	4602      	mov	r2, r0
 800129e:	460b      	mov	r3, r1
 80012a0:	69f9      	ldr	r1, [r7, #28]
 80012a2:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
	kalman->P[1][1] -= K[1] * P01_temp;
 80012a6:	69fb      	ldr	r3, [r7, #28]
 80012a8:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	@ 0x30
 80012ac:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80012b0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80012b4:	f7ff f9b0 	bl	8000618 <__aeabi_dmul>
 80012b8:	4602      	mov	r2, r0
 80012ba:	460b      	mov	r3, r1
 80012bc:	4620      	mov	r0, r4
 80012be:	4629      	mov	r1, r5
 80012c0:	f7fe fff2 	bl	80002a8 <__aeabi_dsub>
 80012c4:	4602      	mov	r2, r0
 80012c6:	460b      	mov	r3, r1
 80012c8:	69f9      	ldr	r1, [r7, #28]
 80012ca:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30

	// Lưu tốc độ góc đã được lọc
	kalman->rate = newRate - kalman->bias;
 80012ce:	69fb      	ldr	r3, [r7, #28]
 80012d0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80012d4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80012d8:	f7fe ffe6 	bl	80002a8 <__aeabi_dsub>
 80012dc:	4602      	mov	r2, r0
 80012de:	460b      	mov	r3, r1
 80012e0:	69f9      	ldr	r1, [r7, #28]
 80012e2:	e9c1 2304 	strd	r2, r3, [r1, #16]

	return kalman->angle;
 80012e6:	69fb      	ldr	r3, [r7, #28]
 80012e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012ec:	ec43 2b17 	vmov	d7, r2, r3
}
 80012f0:	eeb0 0a47 	vmov.f32	s0, s14
 80012f4:	eef0 0a67 	vmov.f32	s1, s15
 80012f8:	3750      	adds	r7, #80	@ 0x50
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bdb0      	pop	{r4, r5, r7, pc}
	...

08001300 <Send_Mouse>:
  * @param  dx: Delta X (-127 to 127)
  * @param  dy: Delta Y (-127 to 127)
  * @retval None
  */
void Send_Mouse(int8_t dx, int8_t dy)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b084      	sub	sp, #16
 8001304:	af00      	add	r7, sp, #0
 8001306:	4603      	mov	r3, r0
 8001308:	460a      	mov	r2, r1
 800130a:	71fb      	strb	r3, [r7, #7]
 800130c:	4613      	mov	r3, r2
 800130e:	71bb      	strb	r3, [r7, #6]
    uint8_t buffer[4] = {0}; // [buttons, x, y, wheel]
 8001310:	2300      	movs	r3, #0
 8001312:	60fb      	str	r3, [r7, #12]

    // Đọc trạng thái 2 nút nhấn

    if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0)){
 8001314:	2101      	movs	r1, #1
 8001316:	481b      	ldr	r0, [pc, #108]	@ (8001384 <Send_Mouse+0x84>)
 8001318:	f000 ffc0 	bl	800229c <HAL_GPIO_ReadPin>
 800131c:	4603      	mov	r3, r0
 800131e:	2b00      	cmp	r3, #0
 8001320:	d004      	beq.n	800132c <Send_Mouse+0x2c>
    	buffer[0] |= 0x01; // Bit 0: Chuột trái
 8001322:	7b3b      	ldrb	r3, [r7, #12]
 8001324:	f043 0301 	orr.w	r3, r3, #1
 8001328:	b2db      	uxtb	r3, r3
 800132a:	733b      	strb	r3, [r7, #12]
    }

    if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1)) {
 800132c:	2102      	movs	r1, #2
 800132e:	4815      	ldr	r0, [pc, #84]	@ (8001384 <Send_Mouse+0x84>)
 8001330:	f000 ffb4 	bl	800229c <HAL_GPIO_ReadPin>
 8001334:	4603      	mov	r3, r0
 8001336:	2b00      	cmp	r3, #0
 8001338:	d004      	beq.n	8001344 <Send_Mouse+0x44>
    	buffer[0] |= 0x02; // Bit 1: Chuột phải
 800133a:	7b3b      	ldrb	r3, [r7, #12]
 800133c:	f043 0302 	orr.w	r3, r3, #2
 8001340:	b2db      	uxtb	r3, r3
 8001342:	733b      	strb	r3, [r7, #12]
    }

    buffer[1] = dx;
 8001344:	79fb      	ldrb	r3, [r7, #7]
 8001346:	737b      	strb	r3, [r7, #13]
    buffer[2] = dy;
 8001348:	79bb      	ldrb	r3, [r7, #6]
 800134a:	73bb      	strb	r3, [r7, #14]

    // Gửi gói nhấn
    USBD_HID_SendReport(&hUsbDeviceFS, buffer, 4);
 800134c:	f107 030c 	add.w	r3, r7, #12
 8001350:	2204      	movs	r2, #4
 8001352:	4619      	mov	r1, r3
 8001354:	480c      	ldr	r0, [pc, #48]	@ (8001388 <Send_Mouse+0x88>)
 8001356:	f005 fbdb 	bl	8006b10 <USBD_HID_SendReport>

    // Gửi gói thả nút sau 10ms để tránh giữ mãi
    HAL_Delay(10);
 800135a:	200a      	movs	r0, #10
 800135c:	f000 fcbc 	bl	8001cd8 <HAL_Delay>
    buffer[0] = 0;
 8001360:	2300      	movs	r3, #0
 8001362:	733b      	strb	r3, [r7, #12]
    buffer[1] = 0;
 8001364:	2300      	movs	r3, #0
 8001366:	737b      	strb	r3, [r7, #13]
    buffer[2] = 0;
 8001368:	2300      	movs	r3, #0
 800136a:	73bb      	strb	r3, [r7, #14]
    USBD_HID_SendReport(&hUsbDeviceFS, buffer, 4);
 800136c:	f107 030c 	add.w	r3, r7, #12
 8001370:	2204      	movs	r2, #4
 8001372:	4619      	mov	r1, r3
 8001374:	4804      	ldr	r0, [pc, #16]	@ (8001388 <Send_Mouse+0x88>)
 8001376:	f005 fbcb 	bl	8006b10 <USBD_HID_SendReport>
}
 800137a:	bf00      	nop
 800137c:	3710      	adds	r7, #16
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	40020000 	.word	0x40020000
 8001388:	20000464 	.word	0x20000464

0800138c <MPU6050_Init>:
/**
  * @brief  Khởi tạo MPU6050
  * @retval None
  */
void MPU6050_Init(void)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b086      	sub	sp, #24
 8001390:	af04      	add	r7, sp, #16
    uint8_t data;
    
    // Wake up MPU6050
    data = 0x00;
 8001392:	2300      	movs	r3, #0
 8001394:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, MPU6050_PWR_MGMT_1, 1, &data, 1, HAL_MAX_DELAY);
 8001396:	f04f 33ff 	mov.w	r3, #4294967295
 800139a:	9302      	str	r3, [sp, #8]
 800139c:	2301      	movs	r3, #1
 800139e:	9301      	str	r3, [sp, #4]
 80013a0:	1dfb      	adds	r3, r7, #7
 80013a2:	9300      	str	r3, [sp, #0]
 80013a4:	2301      	movs	r3, #1
 80013a6:	226b      	movs	r2, #107	@ 0x6b
 80013a8:	21d0      	movs	r1, #208	@ 0xd0
 80013aa:	4823      	ldr	r0, [pc, #140]	@ (8001438 <MPU6050_Init+0xac>)
 80013ac:	f001 f8d2 	bl	8002554 <HAL_I2C_Mem_Write>
    
    // Set sample rate to 1kHz
    data = 0x07;
 80013b0:	2307      	movs	r3, #7
 80013b2:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, MPU6050_SMPLRT_DIV, 1, &data, 1, HAL_MAX_DELAY);
 80013b4:	f04f 33ff 	mov.w	r3, #4294967295
 80013b8:	9302      	str	r3, [sp, #8]
 80013ba:	2301      	movs	r3, #1
 80013bc:	9301      	str	r3, [sp, #4]
 80013be:	1dfb      	adds	r3, r7, #7
 80013c0:	9300      	str	r3, [sp, #0]
 80013c2:	2301      	movs	r3, #1
 80013c4:	2219      	movs	r2, #25
 80013c6:	21d0      	movs	r1, #208	@ 0xd0
 80013c8:	481b      	ldr	r0, [pc, #108]	@ (8001438 <MPU6050_Init+0xac>)
 80013ca:	f001 f8c3 	bl	8002554 <HAL_I2C_Mem_Write>
    
    // Set DLPF to 44Hz
    data = 0x03;
 80013ce:	2303      	movs	r3, #3
 80013d0:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, MPU6050_CONFIG, 1, &data, 1, HAL_MAX_DELAY);
 80013d2:	f04f 33ff 	mov.w	r3, #4294967295
 80013d6:	9302      	str	r3, [sp, #8]
 80013d8:	2301      	movs	r3, #1
 80013da:	9301      	str	r3, [sp, #4]
 80013dc:	1dfb      	adds	r3, r7, #7
 80013de:	9300      	str	r3, [sp, #0]
 80013e0:	2301      	movs	r3, #1
 80013e2:	221a      	movs	r2, #26
 80013e4:	21d0      	movs	r1, #208	@ 0xd0
 80013e6:	4814      	ldr	r0, [pc, #80]	@ (8001438 <MPU6050_Init+0xac>)
 80013e8:	f001 f8b4 	bl	8002554 <HAL_I2C_Mem_Write>
    
    // Set gyro range to ±2000°/s
    data = 0x18;
 80013ec:	2318      	movs	r3, #24
 80013ee:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, MPU6050_GYRO_CONFIG, 1, &data, 1, HAL_MAX_DELAY);
 80013f0:	f04f 33ff 	mov.w	r3, #4294967295
 80013f4:	9302      	str	r3, [sp, #8]
 80013f6:	2301      	movs	r3, #1
 80013f8:	9301      	str	r3, [sp, #4]
 80013fa:	1dfb      	adds	r3, r7, #7
 80013fc:	9300      	str	r3, [sp, #0]
 80013fe:	2301      	movs	r3, #1
 8001400:	221b      	movs	r2, #27
 8001402:	21d0      	movs	r1, #208	@ 0xd0
 8001404:	480c      	ldr	r0, [pc, #48]	@ (8001438 <MPU6050_Init+0xac>)
 8001406:	f001 f8a5 	bl	8002554 <HAL_I2C_Mem_Write>
    
    // Set accelerometer range to ±8g
    data = 0x10;
 800140a:	2310      	movs	r3, #16
 800140c:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, MPU6050_ACCEL_CONFIG, 1, &data, 1, HAL_MAX_DELAY);
 800140e:	f04f 33ff 	mov.w	r3, #4294967295
 8001412:	9302      	str	r3, [sp, #8]
 8001414:	2301      	movs	r3, #1
 8001416:	9301      	str	r3, [sp, #4]
 8001418:	1dfb      	adds	r3, r7, #7
 800141a:	9300      	str	r3, [sp, #0]
 800141c:	2301      	movs	r3, #1
 800141e:	221c      	movs	r2, #28
 8001420:	21d0      	movs	r1, #208	@ 0xd0
 8001422:	4805      	ldr	r0, [pc, #20]	@ (8001438 <MPU6050_Init+0xac>)
 8001424:	f001 f896 	bl	8002554 <HAL_I2C_Mem_Write>
    
    // Delay để đảm bảo khởi tạo hoàn tất
    HAL_Delay(100);
 8001428:	2064      	movs	r0, #100	@ 0x64
 800142a:	f000 fc55 	bl	8001cd8 <HAL_Delay>
}
 800142e:	bf00      	nop
 8001430:	3708      	adds	r7, #8
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	20000304 	.word	0x20000304
 800143c:	00000000 	.word	0x00000000

08001440 <Read_Sensor_Data>:
/**
  * @brief  Đọc dữ liệu từ sensor
  * @retval None
  */
void Read_Sensor_Data(void)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b08e      	sub	sp, #56	@ 0x38
 8001444:	af04      	add	r7, sp, #16
    // Đọc dữ liệu gyroscope từ MPU6050
    if(HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, MPU6050_GYRO_XOUT_H, 1, gyro_data, 6, HAL_MAX_DELAY) == HAL_OK)
 8001446:	f04f 33ff 	mov.w	r3, #4294967295
 800144a:	9302      	str	r3, [sp, #8]
 800144c:	2306      	movs	r3, #6
 800144e:	9301      	str	r3, [sp, #4]
 8001450:	4b5d      	ldr	r3, [pc, #372]	@ (80015c8 <Read_Sensor_Data+0x188>)
 8001452:	9300      	str	r3, [sp, #0]
 8001454:	2301      	movs	r3, #1
 8001456:	2243      	movs	r2, #67	@ 0x43
 8001458:	21d0      	movs	r1, #208	@ 0xd0
 800145a:	485c      	ldr	r0, [pc, #368]	@ (80015cc <Read_Sensor_Data+0x18c>)
 800145c:	f001 f974 	bl	8002748 <HAL_I2C_Mem_Read>
 8001460:	4603      	mov	r3, r0
 8001462:	2b00      	cmp	r3, #0
 8001464:	f040 80a2 	bne.w	80015ac <Read_Sensor_Data+0x16c>
    {
        raw_gyro_x = (int16_t)(gyro_data[0] << 8 | gyro_data[1]);
 8001468:	4b57      	ldr	r3, [pc, #348]	@ (80015c8 <Read_Sensor_Data+0x188>)
 800146a:	781b      	ldrb	r3, [r3, #0]
 800146c:	b21b      	sxth	r3, r3
 800146e:	021b      	lsls	r3, r3, #8
 8001470:	b21a      	sxth	r2, r3
 8001472:	4b55      	ldr	r3, [pc, #340]	@ (80015c8 <Read_Sensor_Data+0x188>)
 8001474:	785b      	ldrb	r3, [r3, #1]
 8001476:	b21b      	sxth	r3, r3
 8001478:	4313      	orrs	r3, r2
 800147a:	b21a      	sxth	r2, r3
 800147c:	4b54      	ldr	r3, [pc, #336]	@ (80015d0 <Read_Sensor_Data+0x190>)
 800147e:	801a      	strh	r2, [r3, #0]
        raw_gyro_y = (int16_t)(gyro_data[2] << 8 | gyro_data[3]);
 8001480:	4b51      	ldr	r3, [pc, #324]	@ (80015c8 <Read_Sensor_Data+0x188>)
 8001482:	789b      	ldrb	r3, [r3, #2]
 8001484:	b21b      	sxth	r3, r3
 8001486:	021b      	lsls	r3, r3, #8
 8001488:	b21a      	sxth	r2, r3
 800148a:	4b4f      	ldr	r3, [pc, #316]	@ (80015c8 <Read_Sensor_Data+0x188>)
 800148c:	78db      	ldrb	r3, [r3, #3]
 800148e:	b21b      	sxth	r3, r3
 8001490:	4313      	orrs	r3, r2
 8001492:	b21a      	sxth	r2, r3
 8001494:	4b4f      	ldr	r3, [pc, #316]	@ (80015d4 <Read_Sensor_Data+0x194>)
 8001496:	801a      	strh	r2, [r3, #0]
        raw_gyro_z = (int16_t)(gyro_data[4] << 8 | gyro_data[5]);
 8001498:	4b4b      	ldr	r3, [pc, #300]	@ (80015c8 <Read_Sensor_Data+0x188>)
 800149a:	791b      	ldrb	r3, [r3, #4]
 800149c:	b21b      	sxth	r3, r3
 800149e:	021b      	lsls	r3, r3, #8
 80014a0:	b21a      	sxth	r2, r3
 80014a2:	4b49      	ldr	r3, [pc, #292]	@ (80015c8 <Read_Sensor_Data+0x188>)
 80014a4:	795b      	ldrb	r3, [r3, #5]
 80014a6:	b21b      	sxth	r3, r3
 80014a8:	4313      	orrs	r3, r2
 80014aa:	b21a      	sxth	r2, r3
 80014ac:	4b4a      	ldr	r3, [pc, #296]	@ (80015d8 <Read_Sensor_Data+0x198>)
 80014ae:	801a      	strh	r2, [r3, #0]

        float filtered_x = KalmanFilter_Update(&kalman_x, raw_gyro_x, 0, 0.1f);
 80014b0:	4b47      	ldr	r3, [pc, #284]	@ (80015d0 <Read_Sensor_Data+0x190>)
 80014b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014b6:	4618      	mov	r0, r3
 80014b8:	f7ff f844 	bl	8000544 <__aeabi_i2d>
 80014bc:	4602      	mov	r2, r0
 80014be:	460b      	mov	r3, r1
 80014c0:	ed9f 2b3d 	vldr	d2, [pc, #244]	@ 80015b8 <Read_Sensor_Data+0x178>
 80014c4:	ed9f 1b3e 	vldr	d1, [pc, #248]	@ 80015c0 <Read_Sensor_Data+0x180>
 80014c8:	ec43 2b10 	vmov	d0, r2, r3
 80014cc:	4843      	ldr	r0, [pc, #268]	@ (80015dc <Read_Sensor_Data+0x19c>)
 80014ce:	f7ff fdb1 	bl	8001034 <KalmanFilter_Update>
 80014d2:	ec53 2b10 	vmov	r2, r3, d0
 80014d6:	4610      	mov	r0, r2
 80014d8:	4619      	mov	r1, r3
 80014da:	f7ff fb75 	bl	8000bc8 <__aeabi_d2f>
 80014de:	4603      	mov	r3, r0
 80014e0:	627b      	str	r3, [r7, #36]	@ 0x24
        float filtered_y = KalmanFilter_Update(&kalman_y, raw_gyro_y, 0, 0.1f);
 80014e2:	4b3c      	ldr	r3, [pc, #240]	@ (80015d4 <Read_Sensor_Data+0x194>)
 80014e4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014e8:	4618      	mov	r0, r3
 80014ea:	f7ff f82b 	bl	8000544 <__aeabi_i2d>
 80014ee:	4602      	mov	r2, r0
 80014f0:	460b      	mov	r3, r1
 80014f2:	ed9f 2b31 	vldr	d2, [pc, #196]	@ 80015b8 <Read_Sensor_Data+0x178>
 80014f6:	ed9f 1b32 	vldr	d1, [pc, #200]	@ 80015c0 <Read_Sensor_Data+0x180>
 80014fa:	ec43 2b10 	vmov	d0, r2, r3
 80014fe:	4838      	ldr	r0, [pc, #224]	@ (80015e0 <Read_Sensor_Data+0x1a0>)
 8001500:	f7ff fd98 	bl	8001034 <KalmanFilter_Update>
 8001504:	ec53 2b10 	vmov	r2, r3, d0
 8001508:	4610      	mov	r0, r2
 800150a:	4619      	mov	r1, r3
 800150c:	f7ff fb5c 	bl	8000bc8 <__aeabi_d2f>
 8001510:	4603      	mov	r3, r0
 8001512:	623b      	str	r3, [r7, #32]
        float filtered_z = KalmanFilter_Update(&kalman_z, raw_gyro_z, 0, 0.1f);
 8001514:	4b30      	ldr	r3, [pc, #192]	@ (80015d8 <Read_Sensor_Data+0x198>)
 8001516:	f9b3 3000 	ldrsh.w	r3, [r3]
 800151a:	4618      	mov	r0, r3
 800151c:	f7ff f812 	bl	8000544 <__aeabi_i2d>
 8001520:	4602      	mov	r2, r0
 8001522:	460b      	mov	r3, r1
 8001524:	ed9f 2b24 	vldr	d2, [pc, #144]	@ 80015b8 <Read_Sensor_Data+0x178>
 8001528:	ed9f 1b25 	vldr	d1, [pc, #148]	@ 80015c0 <Read_Sensor_Data+0x180>
 800152c:	ec43 2b10 	vmov	d0, r2, r3
 8001530:	482c      	ldr	r0, [pc, #176]	@ (80015e4 <Read_Sensor_Data+0x1a4>)
 8001532:	f7ff fd7f 	bl	8001034 <KalmanFilter_Update>
 8001536:	ec53 2b10 	vmov	r2, r3, d0
 800153a:	4610      	mov	r0, r2
 800153c:	4619      	mov	r1, r3
 800153e:	f7ff fb43 	bl	8000bc8 <__aeabi_d2f>
 8001542:	4603      	mov	r3, r0
 8001544:	61fb      	str	r3, [r7, #28]

        // Chuyển đổi sang độ/giây và scale cho mouse movement
        float gyro_x = filtered_x / 16.4f; // Chuyển sang độ/giây
 8001546:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800154a:	eddf 6a27 	vldr	s13, [pc, #156]	@ 80015e8 <Read_Sensor_Data+0x1a8>
 800154e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001552:	edc7 7a06 	vstr	s15, [r7, #24]
        float gyro_y = filtered_y / 16.4f;
 8001556:	ed97 7a08 	vldr	s14, [r7, #32]
 800155a:	eddf 6a23 	vldr	s13, [pc, #140]	@ 80015e8 <Read_Sensor_Data+0x1a8>
 800155e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001562:	edc7 7a05 	vstr	s15, [r7, #20]
        
        // Scale và mapping sang mouse delta (có thể điều chỉnh scale_factor)
        float scale_factor = 0.5f; // Điều chỉnh để phù hợp
 8001566:	f04f 537c 	mov.w	r3, #1056964608	@ 0x3f000000
 800156a:	613b      	str	r3, [r7, #16]
        int8_t dx = (int8_t)(gyro_x * scale_factor);
 800156c:	ed97 7a06 	vldr	s14, [r7, #24]
 8001570:	edd7 7a04 	vldr	s15, [r7, #16]
 8001574:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001578:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800157c:	edc7 7a01 	vstr	s15, [r7, #4]
 8001580:	793b      	ldrb	r3, [r7, #4]
 8001582:	73fb      	strb	r3, [r7, #15]
        int8_t dy = (int8_t)(gyro_y * scale_factor);
 8001584:	ed97 7a05 	vldr	s14, [r7, #20]
 8001588:	edd7 7a04 	vldr	s15, [r7, #16]
 800158c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001590:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001594:	edc7 7a01 	vstr	s15, [r7, #4]
 8001598:	793b      	ldrb	r3, [r7, #4]
 800159a:	73bb      	strb	r3, [r7, #14]
        
        // Gửi mouse movement qua USB HID
        Send_Mouse(dx, dy);
 800159c:	f997 200e 	ldrsb.w	r2, [r7, #14]
 80015a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015a4:	4611      	mov	r1, r2
 80015a6:	4618      	mov	r0, r3
 80015a8:	f7ff feaa 	bl	8001300 <Send_Mouse>
    }
}
 80015ac:	bf00      	nop
 80015ae:	3728      	adds	r7, #40	@ 0x28
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bd80      	pop	{r7, pc}
 80015b4:	f3af 8000 	nop.w
 80015b8:	a0000000 	.word	0xa0000000
 80015bc:	3fb99999 	.word	0x3fb99999
	...
 80015c8:	20000448 	.word	0x20000448
 80015cc:	20000304 	.word	0x20000304
 80015d0:	2000044e 	.word	0x2000044e
 80015d4:	20000450 	.word	0x20000450
 80015d8:	20000452 	.word	0x20000452
 80015dc:	20000358 	.word	0x20000358
 80015e0:	200003a8 	.word	0x200003a8
 80015e4:	200003f8 	.word	0x200003f8
 80015e8:	41833333 	.word	0x41833333
 80015ec:	00000000 	.word	0x00000000

080015f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015f4:	f000 fafe 	bl	8001bf4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80015f8:	f000 f854 	bl	80016a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80015fc:	f000 f8fe 	bl	80017fc <MX_GPIO_Init>
  MX_I2C1_Init();
 8001600:	f000 f8bc 	bl	800177c <MX_I2C1_Init>
  MX_USB_DEVICE_Init();
 8001604:	f006 fe26 	bl	8008254 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  
  // Delay để USB enumeration hoàn tất
  HAL_Delay(1000);
 8001608:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800160c:	f000 fb64 	bl	8001cd8 <HAL_Delay>
  
  // Khởi tạo MPU6050
  MPU6050_Init();
 8001610:	f7ff febc 	bl	800138c <MPU6050_Init>
  
  // Delay để sensor ổn định
  HAL_Delay(500);
 8001614:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001618:	f000 fb5e 	bl	8001cd8 <HAL_Delay>
  
  // Khởi tạo Kalman filters
  KalmanFilter_Init(&kalman_x, 0.001, 0.003, 0.03);
 800161c:	ed9f 2b16 	vldr	d2, [pc, #88]	@ 8001678 <main+0x88>
 8001620:	ed9f 1b17 	vldr	d1, [pc, #92]	@ 8001680 <main+0x90>
 8001624:	ed9f 0b18 	vldr	d0, [pc, #96]	@ 8001688 <main+0x98>
 8001628:	4819      	ldr	r0, [pc, #100]	@ (8001690 <main+0xa0>)
 800162a:	f7ff fcb3 	bl	8000f94 <KalmanFilter_Init>
  KalmanFilter_Init(&kalman_y, 0.001, 0.003, 0.03);
 800162e:	ed9f 2b12 	vldr	d2, [pc, #72]	@ 8001678 <main+0x88>
 8001632:	ed9f 1b13 	vldr	d1, [pc, #76]	@ 8001680 <main+0x90>
 8001636:	ed9f 0b14 	vldr	d0, [pc, #80]	@ 8001688 <main+0x98>
 800163a:	4816      	ldr	r0, [pc, #88]	@ (8001694 <main+0xa4>)
 800163c:	f7ff fcaa 	bl	8000f94 <KalmanFilter_Init>
  KalmanFilter_Init(&kalman_z, 0.001, 0.003, 0.03);
 8001640:	ed9f 2b0d 	vldr	d2, [pc, #52]	@ 8001678 <main+0x88>
 8001644:	ed9f 1b0e 	vldr	d1, [pc, #56]	@ 8001680 <main+0x90>
 8001648:	ed9f 0b0f 	vldr	d0, [pc, #60]	@ 8001688 <main+0x98>
 800164c:	4812      	ldr	r0, [pc, #72]	@ (8001698 <main+0xa8>)
 800164e:	f7ff fca1 	bl	8000f94 <KalmanFilter_Init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    // Kiểm tra USB connection status
    if(hUsbDeviceFS.pClassData != NULL) {
 8001652:	4b12      	ldr	r3, [pc, #72]	@ (800169c <main+0xac>)
 8001654:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8001658:	2b00      	cmp	r3, #0
 800165a:	d005      	beq.n	8001668 <main+0x78>
      usb_connected = 1;
 800165c:	4b10      	ldr	r3, [pc, #64]	@ (80016a0 <main+0xb0>)
 800165e:	2201      	movs	r2, #1
 8001660:	701a      	strb	r2, [r3, #0]
      // Đọc và gửi dữ liệu từ sensor
      Read_Sensor_Data();
 8001662:	f7ff feed 	bl	8001440 <Read_Sensor_Data>
 8001666:	e002      	b.n	800166e <main+0x7e>
    } else {
      usb_connected = 0;
 8001668:	4b0d      	ldr	r3, [pc, #52]	@ (80016a0 <main+0xb0>)
 800166a:	2200      	movs	r2, #0
 800166c:	701a      	strb	r2, [r3, #0]
    }
    
    // Delay 100ms
    HAL_Delay(100);
 800166e:	2064      	movs	r0, #100	@ 0x64
 8001670:	f000 fb32 	bl	8001cd8 <HAL_Delay>
    if(hUsbDeviceFS.pClassData != NULL) {
 8001674:	e7ed      	b.n	8001652 <main+0x62>
 8001676:	bf00      	nop
 8001678:	eb851eb8 	.word	0xeb851eb8
 800167c:	3f9eb851 	.word	0x3f9eb851
 8001680:	bc6a7efa 	.word	0xbc6a7efa
 8001684:	3f689374 	.word	0x3f689374
 8001688:	d2f1a9fc 	.word	0xd2f1a9fc
 800168c:	3f50624d 	.word	0x3f50624d
 8001690:	20000358 	.word	0x20000358
 8001694:	200003a8 	.word	0x200003a8
 8001698:	200003f8 	.word	0x200003f8
 800169c:	20000464 	.word	0x20000464
 80016a0:	20000454 	.word	0x20000454

080016a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b094      	sub	sp, #80	@ 0x50
 80016a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016aa:	f107 0320 	add.w	r3, r7, #32
 80016ae:	2230      	movs	r2, #48	@ 0x30
 80016b0:	2100      	movs	r1, #0
 80016b2:	4618      	mov	r0, r3
 80016b4:	f007 ff6f 	bl	8009596 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016b8:	f107 030c 	add.w	r3, r7, #12
 80016bc:	2200      	movs	r2, #0
 80016be:	601a      	str	r2, [r3, #0]
 80016c0:	605a      	str	r2, [r3, #4]
 80016c2:	609a      	str	r2, [r3, #8]
 80016c4:	60da      	str	r2, [r3, #12]
 80016c6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80016c8:	2300      	movs	r3, #0
 80016ca:	60bb      	str	r3, [r7, #8]
 80016cc:	4b29      	ldr	r3, [pc, #164]	@ (8001774 <SystemClock_Config+0xd0>)
 80016ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016d0:	4a28      	ldr	r2, [pc, #160]	@ (8001774 <SystemClock_Config+0xd0>)
 80016d2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80016d6:	6413      	str	r3, [r2, #64]	@ 0x40
 80016d8:	4b26      	ldr	r3, [pc, #152]	@ (8001774 <SystemClock_Config+0xd0>)
 80016da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016dc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016e0:	60bb      	str	r3, [r7, #8]
 80016e2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80016e4:	2300      	movs	r3, #0
 80016e6:	607b      	str	r3, [r7, #4]
 80016e8:	4b23      	ldr	r3, [pc, #140]	@ (8001778 <SystemClock_Config+0xd4>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80016f0:	4a21      	ldr	r2, [pc, #132]	@ (8001778 <SystemClock_Config+0xd4>)
 80016f2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80016f6:	6013      	str	r3, [r2, #0]
 80016f8:	4b1f      	ldr	r3, [pc, #124]	@ (8001778 <SystemClock_Config+0xd4>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001700:	607b      	str	r3, [r7, #4]
 8001702:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001704:	2301      	movs	r3, #1
 8001706:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001708:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800170c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800170e:	2302      	movs	r3, #2
 8001710:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001712:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001716:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 15;
 8001718:	230f      	movs	r3, #15
 800171a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 800171c:	2390      	movs	r3, #144	@ 0x90
 800171e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001720:	2302      	movs	r3, #2
 8001722:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8001724:	2305      	movs	r3, #5
 8001726:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001728:	f107 0320 	add.w	r3, r7, #32
 800172c:	4618      	mov	r0, r3
 800172e:	f003 f8a7 	bl	8004880 <HAL_RCC_OscConfig>
 8001732:	4603      	mov	r3, r0
 8001734:	2b00      	cmp	r3, #0
 8001736:	d001      	beq.n	800173c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001738:	f000 f8aa 	bl	8001890 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800173c:	230f      	movs	r3, #15
 800173e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001740:	2302      	movs	r3, #2
 8001742:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001744:	2300      	movs	r3, #0
 8001746:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001748:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800174c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800174e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001752:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001754:	f107 030c 	add.w	r3, r7, #12
 8001758:	2103      	movs	r1, #3
 800175a:	4618      	mov	r0, r3
 800175c:	f003 fb08 	bl	8004d70 <HAL_RCC_ClockConfig>
 8001760:	4603      	mov	r3, r0
 8001762:	2b00      	cmp	r3, #0
 8001764:	d001      	beq.n	800176a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001766:	f000 f893 	bl	8001890 <Error_Handler>
  }
}
 800176a:	bf00      	nop
 800176c:	3750      	adds	r7, #80	@ 0x50
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}
 8001772:	bf00      	nop
 8001774:	40023800 	.word	0x40023800
 8001778:	40007000 	.word	0x40007000

0800177c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001780:	4b1b      	ldr	r3, [pc, #108]	@ (80017f0 <MX_I2C1_Init+0x74>)
 8001782:	4a1c      	ldr	r2, [pc, #112]	@ (80017f4 <MX_I2C1_Init+0x78>)
 8001784:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001786:	4b1a      	ldr	r3, [pc, #104]	@ (80017f0 <MX_I2C1_Init+0x74>)
 8001788:	4a1b      	ldr	r2, [pc, #108]	@ (80017f8 <MX_I2C1_Init+0x7c>)
 800178a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800178c:	4b18      	ldr	r3, [pc, #96]	@ (80017f0 <MX_I2C1_Init+0x74>)
 800178e:	2200      	movs	r2, #0
 8001790:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001792:	4b17      	ldr	r3, [pc, #92]	@ (80017f0 <MX_I2C1_Init+0x74>)
 8001794:	2200      	movs	r2, #0
 8001796:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001798:	4b15      	ldr	r3, [pc, #84]	@ (80017f0 <MX_I2C1_Init+0x74>)
 800179a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800179e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80017a0:	4b13      	ldr	r3, [pc, #76]	@ (80017f0 <MX_I2C1_Init+0x74>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80017a6:	4b12      	ldr	r3, [pc, #72]	@ (80017f0 <MX_I2C1_Init+0x74>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80017ac:	4b10      	ldr	r3, [pc, #64]	@ (80017f0 <MX_I2C1_Init+0x74>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80017b2:	4b0f      	ldr	r3, [pc, #60]	@ (80017f0 <MX_I2C1_Init+0x74>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80017b8:	480d      	ldr	r0, [pc, #52]	@ (80017f0 <MX_I2C1_Init+0x74>)
 80017ba:	f000 fd87 	bl	80022cc <HAL_I2C_Init>
 80017be:	4603      	mov	r3, r0
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d001      	beq.n	80017c8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80017c4:	f000 f864 	bl	8001890 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80017c8:	2100      	movs	r1, #0
 80017ca:	4809      	ldr	r0, [pc, #36]	@ (80017f0 <MX_I2C1_Init+0x74>)
 80017cc:	f001 fda2 	bl	8003314 <HAL_I2CEx_ConfigAnalogFilter>
 80017d0:	4603      	mov	r3, r0
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d001      	beq.n	80017da <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 80017d6:	f000 f85b 	bl	8001890 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80017da:	2100      	movs	r1, #0
 80017dc:	4804      	ldr	r0, [pc, #16]	@ (80017f0 <MX_I2C1_Init+0x74>)
 80017de:	f001 fdd5 	bl	800338c <HAL_I2CEx_ConfigDigitalFilter>
 80017e2:	4603      	mov	r3, r0
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d001      	beq.n	80017ec <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 80017e8:	f000 f852 	bl	8001890 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80017ec:	bf00      	nop
 80017ee:	bd80      	pop	{r7, pc}
 80017f0:	20000304 	.word	0x20000304
 80017f4:	40005400 	.word	0x40005400
 80017f8:	000186a0 	.word	0x000186a0

080017fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b088      	sub	sp, #32
 8001800:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001802:	f107 030c 	add.w	r3, r7, #12
 8001806:	2200      	movs	r2, #0
 8001808:	601a      	str	r2, [r3, #0]
 800180a:	605a      	str	r2, [r3, #4]
 800180c:	609a      	str	r2, [r3, #8]
 800180e:	60da      	str	r2, [r3, #12]
 8001810:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001812:	2300      	movs	r3, #0
 8001814:	60bb      	str	r3, [r7, #8]
 8001816:	4b1c      	ldr	r3, [pc, #112]	@ (8001888 <MX_GPIO_Init+0x8c>)
 8001818:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800181a:	4a1b      	ldr	r2, [pc, #108]	@ (8001888 <MX_GPIO_Init+0x8c>)
 800181c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001820:	6313      	str	r3, [r2, #48]	@ 0x30
 8001822:	4b19      	ldr	r3, [pc, #100]	@ (8001888 <MX_GPIO_Init+0x8c>)
 8001824:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001826:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800182a:	60bb      	str	r3, [r7, #8]
 800182c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800182e:	2300      	movs	r3, #0
 8001830:	607b      	str	r3, [r7, #4]
 8001832:	4b15      	ldr	r3, [pc, #84]	@ (8001888 <MX_GPIO_Init+0x8c>)
 8001834:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001836:	4a14      	ldr	r2, [pc, #80]	@ (8001888 <MX_GPIO_Init+0x8c>)
 8001838:	f043 0301 	orr.w	r3, r3, #1
 800183c:	6313      	str	r3, [r2, #48]	@ 0x30
 800183e:	4b12      	ldr	r3, [pc, #72]	@ (8001888 <MX_GPIO_Init+0x8c>)
 8001840:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001842:	f003 0301 	and.w	r3, r3, #1
 8001846:	607b      	str	r3, [r7, #4]
 8001848:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800184a:	2300      	movs	r3, #0
 800184c:	603b      	str	r3, [r7, #0]
 800184e:	4b0e      	ldr	r3, [pc, #56]	@ (8001888 <MX_GPIO_Init+0x8c>)
 8001850:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001852:	4a0d      	ldr	r2, [pc, #52]	@ (8001888 <MX_GPIO_Init+0x8c>)
 8001854:	f043 0302 	orr.w	r3, r3, #2
 8001858:	6313      	str	r3, [r2, #48]	@ 0x30
 800185a:	4b0b      	ldr	r3, [pc, #44]	@ (8001888 <MX_GPIO_Init+0x8c>)
 800185c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800185e:	f003 0302 	and.w	r3, r3, #2
 8001862:	603b      	str	r3, [r7, #0]
 8001864:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : PA0 PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001866:	2303      	movs	r3, #3
 8001868:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800186a:	2300      	movs	r3, #0
 800186c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800186e:	2300      	movs	r3, #0
 8001870:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001872:	f107 030c 	add.w	r3, r7, #12
 8001876:	4619      	mov	r1, r3
 8001878:	4804      	ldr	r0, [pc, #16]	@ (800188c <MX_GPIO_Init+0x90>)
 800187a:	f000 fb63 	bl	8001f44 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800187e:	bf00      	nop
 8001880:	3720      	adds	r7, #32
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}
 8001886:	bf00      	nop
 8001888:	40023800 	.word	0x40023800
 800188c:	40020000 	.word	0x40020000

08001890 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001890:	b480      	push	{r7}
 8001892:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001894:	b672      	cpsid	i
}
 8001896:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001898:	bf00      	nop
 800189a:	e7fd      	b.n	8001898 <Error_Handler+0x8>

0800189c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800189c:	b480      	push	{r7}
 800189e:	b083      	sub	sp, #12
 80018a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018a2:	2300      	movs	r3, #0
 80018a4:	607b      	str	r3, [r7, #4]
 80018a6:	4b10      	ldr	r3, [pc, #64]	@ (80018e8 <HAL_MspInit+0x4c>)
 80018a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018aa:	4a0f      	ldr	r2, [pc, #60]	@ (80018e8 <HAL_MspInit+0x4c>)
 80018ac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80018b0:	6453      	str	r3, [r2, #68]	@ 0x44
 80018b2:	4b0d      	ldr	r3, [pc, #52]	@ (80018e8 <HAL_MspInit+0x4c>)
 80018b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018b6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80018ba:	607b      	str	r3, [r7, #4]
 80018bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018be:	2300      	movs	r3, #0
 80018c0:	603b      	str	r3, [r7, #0]
 80018c2:	4b09      	ldr	r3, [pc, #36]	@ (80018e8 <HAL_MspInit+0x4c>)
 80018c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018c6:	4a08      	ldr	r2, [pc, #32]	@ (80018e8 <HAL_MspInit+0x4c>)
 80018c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80018cc:	6413      	str	r3, [r2, #64]	@ 0x40
 80018ce:	4b06      	ldr	r3, [pc, #24]	@ (80018e8 <HAL_MspInit+0x4c>)
 80018d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018d6:	603b      	str	r3, [r7, #0]
 80018d8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018da:	bf00      	nop
 80018dc:	370c      	adds	r7, #12
 80018de:	46bd      	mov	sp, r7
 80018e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e4:	4770      	bx	lr
 80018e6:	bf00      	nop
 80018e8:	40023800 	.word	0x40023800

080018ec <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b08a      	sub	sp, #40	@ 0x28
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018f4:	f107 0314 	add.w	r3, r7, #20
 80018f8:	2200      	movs	r2, #0
 80018fa:	601a      	str	r2, [r3, #0]
 80018fc:	605a      	str	r2, [r3, #4]
 80018fe:	609a      	str	r2, [r3, #8]
 8001900:	60da      	str	r2, [r3, #12]
 8001902:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4a19      	ldr	r2, [pc, #100]	@ (8001970 <HAL_I2C_MspInit+0x84>)
 800190a:	4293      	cmp	r3, r2
 800190c:	d12b      	bne.n	8001966 <HAL_I2C_MspInit+0x7a>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800190e:	2300      	movs	r3, #0
 8001910:	613b      	str	r3, [r7, #16]
 8001912:	4b18      	ldr	r3, [pc, #96]	@ (8001974 <HAL_I2C_MspInit+0x88>)
 8001914:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001916:	4a17      	ldr	r2, [pc, #92]	@ (8001974 <HAL_I2C_MspInit+0x88>)
 8001918:	f043 0302 	orr.w	r3, r3, #2
 800191c:	6313      	str	r3, [r2, #48]	@ 0x30
 800191e:	4b15      	ldr	r3, [pc, #84]	@ (8001974 <HAL_I2C_MspInit+0x88>)
 8001920:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001922:	f003 0302 	and.w	r3, r3, #2
 8001926:	613b      	str	r3, [r7, #16]
 8001928:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800192a:	23c0      	movs	r3, #192	@ 0xc0
 800192c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800192e:	2312      	movs	r3, #18
 8001930:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001932:	2300      	movs	r3, #0
 8001934:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001936:	2303      	movs	r3, #3
 8001938:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800193a:	2304      	movs	r3, #4
 800193c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800193e:	f107 0314 	add.w	r3, r7, #20
 8001942:	4619      	mov	r1, r3
 8001944:	480c      	ldr	r0, [pc, #48]	@ (8001978 <HAL_I2C_MspInit+0x8c>)
 8001946:	f000 fafd 	bl	8001f44 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800194a:	2300      	movs	r3, #0
 800194c:	60fb      	str	r3, [r7, #12]
 800194e:	4b09      	ldr	r3, [pc, #36]	@ (8001974 <HAL_I2C_MspInit+0x88>)
 8001950:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001952:	4a08      	ldr	r2, [pc, #32]	@ (8001974 <HAL_I2C_MspInit+0x88>)
 8001954:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001958:	6413      	str	r3, [r2, #64]	@ 0x40
 800195a:	4b06      	ldr	r3, [pc, #24]	@ (8001974 <HAL_I2C_MspInit+0x88>)
 800195c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800195e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001962:	60fb      	str	r3, [r7, #12]
 8001964:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001966:	bf00      	nop
 8001968:	3728      	adds	r7, #40	@ 0x28
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}
 800196e:	bf00      	nop
 8001970:	40005400 	.word	0x40005400
 8001974:	40023800 	.word	0x40023800
 8001978:	40020400 	.word	0x40020400

0800197c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800197c:	b480      	push	{r7}
 800197e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001980:	bf00      	nop
 8001982:	e7fd      	b.n	8001980 <NMI_Handler+0x4>

08001984 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001984:	b480      	push	{r7}
 8001986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001988:	bf00      	nop
 800198a:	e7fd      	b.n	8001988 <HardFault_Handler+0x4>

0800198c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800198c:	b480      	push	{r7}
 800198e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001990:	bf00      	nop
 8001992:	e7fd      	b.n	8001990 <MemManage_Handler+0x4>

08001994 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001994:	b480      	push	{r7}
 8001996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001998:	bf00      	nop
 800199a:	e7fd      	b.n	8001998 <BusFault_Handler+0x4>

0800199c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800199c:	b480      	push	{r7}
 800199e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019a0:	bf00      	nop
 80019a2:	e7fd      	b.n	80019a0 <UsageFault_Handler+0x4>

080019a4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019a4:	b480      	push	{r7}
 80019a6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019a8:	bf00      	nop
 80019aa:	46bd      	mov	sp, r7
 80019ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b0:	4770      	bx	lr

080019b2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019b2:	b480      	push	{r7}
 80019b4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019b6:	bf00      	nop
 80019b8:	46bd      	mov	sp, r7
 80019ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019be:	4770      	bx	lr

080019c0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019c0:	b480      	push	{r7}
 80019c2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019c4:	bf00      	nop
 80019c6:	46bd      	mov	sp, r7
 80019c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019cc:	4770      	bx	lr

080019ce <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019ce:	b580      	push	{r7, lr}
 80019d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019d2:	f000 f961 	bl	8001c98 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019d6:	bf00      	nop
 80019d8:	bd80      	pop	{r7, pc}
	...

080019dc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80019e0:	4802      	ldr	r0, [pc, #8]	@ (80019ec <OTG_FS_IRQHandler+0x10>)
 80019e2:	f001 fe56 	bl	8003692 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80019e6:	bf00      	nop
 80019e8:	bd80      	pop	{r7, pc}
 80019ea:	bf00      	nop
 80019ec:	20000940 	.word	0x20000940

080019f0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80019f0:	b480      	push	{r7}
 80019f2:	af00      	add	r7, sp, #0
  return 1;
 80019f4:	2301      	movs	r3, #1
}
 80019f6:	4618      	mov	r0, r3
 80019f8:	46bd      	mov	sp, r7
 80019fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fe:	4770      	bx	lr

08001a00 <_kill>:

int _kill(int pid, int sig)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b082      	sub	sp, #8
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
 8001a08:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001a0a:	f007 fe17 	bl	800963c <__errno>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	2216      	movs	r2, #22
 8001a12:	601a      	str	r2, [r3, #0]
  return -1;
 8001a14:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a18:	4618      	mov	r0, r3
 8001a1a:	3708      	adds	r7, #8
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bd80      	pop	{r7, pc}

08001a20 <_exit>:

void _exit (int status)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b082      	sub	sp, #8
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001a28:	f04f 31ff 	mov.w	r1, #4294967295
 8001a2c:	6878      	ldr	r0, [r7, #4]
 8001a2e:	f7ff ffe7 	bl	8001a00 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001a32:	bf00      	nop
 8001a34:	e7fd      	b.n	8001a32 <_exit+0x12>

08001a36 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a36:	b580      	push	{r7, lr}
 8001a38:	b086      	sub	sp, #24
 8001a3a:	af00      	add	r7, sp, #0
 8001a3c:	60f8      	str	r0, [r7, #12]
 8001a3e:	60b9      	str	r1, [r7, #8]
 8001a40:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a42:	2300      	movs	r3, #0
 8001a44:	617b      	str	r3, [r7, #20]
 8001a46:	e00a      	b.n	8001a5e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001a48:	f3af 8000 	nop.w
 8001a4c:	4601      	mov	r1, r0
 8001a4e:	68bb      	ldr	r3, [r7, #8]
 8001a50:	1c5a      	adds	r2, r3, #1
 8001a52:	60ba      	str	r2, [r7, #8]
 8001a54:	b2ca      	uxtb	r2, r1
 8001a56:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a58:	697b      	ldr	r3, [r7, #20]
 8001a5a:	3301      	adds	r3, #1
 8001a5c:	617b      	str	r3, [r7, #20]
 8001a5e:	697a      	ldr	r2, [r7, #20]
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	429a      	cmp	r2, r3
 8001a64:	dbf0      	blt.n	8001a48 <_read+0x12>
  }

  return len;
 8001a66:	687b      	ldr	r3, [r7, #4]
}
 8001a68:	4618      	mov	r0, r3
 8001a6a:	3718      	adds	r7, #24
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bd80      	pop	{r7, pc}

08001a70 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b086      	sub	sp, #24
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	60f8      	str	r0, [r7, #12]
 8001a78:	60b9      	str	r1, [r7, #8]
 8001a7a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	617b      	str	r3, [r7, #20]
 8001a80:	e009      	b.n	8001a96 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001a82:	68bb      	ldr	r3, [r7, #8]
 8001a84:	1c5a      	adds	r2, r3, #1
 8001a86:	60ba      	str	r2, [r7, #8]
 8001a88:	781b      	ldrb	r3, [r3, #0]
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a90:	697b      	ldr	r3, [r7, #20]
 8001a92:	3301      	adds	r3, #1
 8001a94:	617b      	str	r3, [r7, #20]
 8001a96:	697a      	ldr	r2, [r7, #20]
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	429a      	cmp	r2, r3
 8001a9c:	dbf1      	blt.n	8001a82 <_write+0x12>
  }
  return len;
 8001a9e:	687b      	ldr	r3, [r7, #4]
}
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	3718      	adds	r7, #24
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bd80      	pop	{r7, pc}

08001aa8 <_close>:

int _close(int file)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	b083      	sub	sp, #12
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001ab0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	370c      	adds	r7, #12
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abe:	4770      	bx	lr

08001ac0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	b083      	sub	sp, #12
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
 8001ac8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001ad0:	605a      	str	r2, [r3, #4]
  return 0;
 8001ad2:	2300      	movs	r3, #0
}
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	370c      	adds	r7, #12
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ade:	4770      	bx	lr

08001ae0 <_isatty>:

int _isatty(int file)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	b083      	sub	sp, #12
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001ae8:	2301      	movs	r3, #1
}
 8001aea:	4618      	mov	r0, r3
 8001aec:	370c      	adds	r7, #12
 8001aee:	46bd      	mov	sp, r7
 8001af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af4:	4770      	bx	lr

08001af6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001af6:	b480      	push	{r7}
 8001af8:	b085      	sub	sp, #20
 8001afa:	af00      	add	r7, sp, #0
 8001afc:	60f8      	str	r0, [r7, #12]
 8001afe:	60b9      	str	r1, [r7, #8]
 8001b00:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001b02:	2300      	movs	r3, #0
}
 8001b04:	4618      	mov	r0, r3
 8001b06:	3714      	adds	r7, #20
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0e:	4770      	bx	lr

08001b10 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b086      	sub	sp, #24
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b18:	4a14      	ldr	r2, [pc, #80]	@ (8001b6c <_sbrk+0x5c>)
 8001b1a:	4b15      	ldr	r3, [pc, #84]	@ (8001b70 <_sbrk+0x60>)
 8001b1c:	1ad3      	subs	r3, r2, r3
 8001b1e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b20:	697b      	ldr	r3, [r7, #20]
 8001b22:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b24:	4b13      	ldr	r3, [pc, #76]	@ (8001b74 <_sbrk+0x64>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d102      	bne.n	8001b32 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b2c:	4b11      	ldr	r3, [pc, #68]	@ (8001b74 <_sbrk+0x64>)
 8001b2e:	4a12      	ldr	r2, [pc, #72]	@ (8001b78 <_sbrk+0x68>)
 8001b30:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b32:	4b10      	ldr	r3, [pc, #64]	@ (8001b74 <_sbrk+0x64>)
 8001b34:	681a      	ldr	r2, [r3, #0]
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	4413      	add	r3, r2
 8001b3a:	693a      	ldr	r2, [r7, #16]
 8001b3c:	429a      	cmp	r2, r3
 8001b3e:	d207      	bcs.n	8001b50 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b40:	f007 fd7c 	bl	800963c <__errno>
 8001b44:	4603      	mov	r3, r0
 8001b46:	220c      	movs	r2, #12
 8001b48:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b4a:	f04f 33ff 	mov.w	r3, #4294967295
 8001b4e:	e009      	b.n	8001b64 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b50:	4b08      	ldr	r3, [pc, #32]	@ (8001b74 <_sbrk+0x64>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b56:	4b07      	ldr	r3, [pc, #28]	@ (8001b74 <_sbrk+0x64>)
 8001b58:	681a      	ldr	r2, [r3, #0]
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	4413      	add	r3, r2
 8001b5e:	4a05      	ldr	r2, [pc, #20]	@ (8001b74 <_sbrk+0x64>)
 8001b60:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b62:	68fb      	ldr	r3, [r7, #12]
}
 8001b64:	4618      	mov	r0, r3
 8001b66:	3718      	adds	r7, #24
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bd80      	pop	{r7, pc}
 8001b6c:	20030000 	.word	0x20030000
 8001b70:	00000400 	.word	0x00000400
 8001b74:	20000458 	.word	0x20000458
 8001b78:	20000f88 	.word	0x20000f88

08001b7c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b80:	4b06      	ldr	r3, [pc, #24]	@ (8001b9c <SystemInit+0x20>)
 8001b82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001b86:	4a05      	ldr	r2, [pc, #20]	@ (8001b9c <SystemInit+0x20>)
 8001b88:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001b8c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b90:	bf00      	nop
 8001b92:	46bd      	mov	sp, r7
 8001b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b98:	4770      	bx	lr
 8001b9a:	bf00      	nop
 8001b9c:	e000ed00 	.word	0xe000ed00

08001ba0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001ba0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001bd8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001ba4:	f7ff ffea 	bl	8001b7c <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001ba8:	480c      	ldr	r0, [pc, #48]	@ (8001bdc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001baa:	490d      	ldr	r1, [pc, #52]	@ (8001be0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001bac:	4a0d      	ldr	r2, [pc, #52]	@ (8001be4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001bae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001bb0:	e002      	b.n	8001bb8 <LoopCopyDataInit>

08001bb2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bb2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001bb4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bb6:	3304      	adds	r3, #4

08001bb8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001bb8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001bbc:	d3f9      	bcc.n	8001bb2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bbe:	4a0a      	ldr	r2, [pc, #40]	@ (8001be8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001bc0:	4c0a      	ldr	r4, [pc, #40]	@ (8001bec <LoopFillZerobss+0x22>)
  movs r3, #0
 8001bc2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001bc4:	e001      	b.n	8001bca <LoopFillZerobss>

08001bc6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bc6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001bc8:	3204      	adds	r2, #4

08001bca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001bcc:	d3fb      	bcc.n	8001bc6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001bce:	f007 fd3b 	bl	8009648 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001bd2:	f7ff fd0d 	bl	80015f0 <main>
  bx  lr    
 8001bd6:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001bd8:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001bdc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001be0:	200002e4 	.word	0x200002e4
  ldr r2, =_sidata
 8001be4:	0800b7dc 	.word	0x0800b7dc
  ldr r2, =_sbss
 8001be8:	200002e8 	.word	0x200002e8
  ldr r4, =_ebss
 8001bec:	20000f84 	.word	0x20000f84

08001bf0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001bf0:	e7fe      	b.n	8001bf0 <ADC_IRQHandler>
	...

08001bf4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001bf8:	4b0e      	ldr	r3, [pc, #56]	@ (8001c34 <HAL_Init+0x40>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4a0d      	ldr	r2, [pc, #52]	@ (8001c34 <HAL_Init+0x40>)
 8001bfe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001c02:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001c04:	4b0b      	ldr	r3, [pc, #44]	@ (8001c34 <HAL_Init+0x40>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4a0a      	ldr	r2, [pc, #40]	@ (8001c34 <HAL_Init+0x40>)
 8001c0a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001c0e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c10:	4b08      	ldr	r3, [pc, #32]	@ (8001c34 <HAL_Init+0x40>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4a07      	ldr	r2, [pc, #28]	@ (8001c34 <HAL_Init+0x40>)
 8001c16:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c1a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c1c:	2003      	movs	r0, #3
 8001c1e:	f000 f94f 	bl	8001ec0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c22:	200f      	movs	r0, #15
 8001c24:	f000 f808 	bl	8001c38 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c28:	f7ff fe38 	bl	800189c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c2c:	2300      	movs	r3, #0
}
 8001c2e:	4618      	mov	r0, r3
 8001c30:	bd80      	pop	{r7, pc}
 8001c32:	bf00      	nop
 8001c34:	40023c00 	.word	0x40023c00

08001c38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b082      	sub	sp, #8
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c40:	4b12      	ldr	r3, [pc, #72]	@ (8001c8c <HAL_InitTick+0x54>)
 8001c42:	681a      	ldr	r2, [r3, #0]
 8001c44:	4b12      	ldr	r3, [pc, #72]	@ (8001c90 <HAL_InitTick+0x58>)
 8001c46:	781b      	ldrb	r3, [r3, #0]
 8001c48:	4619      	mov	r1, r3
 8001c4a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c4e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c52:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c56:	4618      	mov	r0, r3
 8001c58:	f000 f967 	bl	8001f2a <HAL_SYSTICK_Config>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d001      	beq.n	8001c66 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c62:	2301      	movs	r3, #1
 8001c64:	e00e      	b.n	8001c84 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	2b0f      	cmp	r3, #15
 8001c6a:	d80a      	bhi.n	8001c82 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	6879      	ldr	r1, [r7, #4]
 8001c70:	f04f 30ff 	mov.w	r0, #4294967295
 8001c74:	f000 f92f 	bl	8001ed6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c78:	4a06      	ldr	r2, [pc, #24]	@ (8001c94 <HAL_InitTick+0x5c>)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	e000      	b.n	8001c84 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c82:	2301      	movs	r3, #1
}
 8001c84:	4618      	mov	r0, r3
 8001c86:	3708      	adds	r7, #8
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bd80      	pop	{r7, pc}
 8001c8c:	20000000 	.word	0x20000000
 8001c90:	20000008 	.word	0x20000008
 8001c94:	20000004 	.word	0x20000004

08001c98 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c9c:	4b06      	ldr	r3, [pc, #24]	@ (8001cb8 <HAL_IncTick+0x20>)
 8001c9e:	781b      	ldrb	r3, [r3, #0]
 8001ca0:	461a      	mov	r2, r3
 8001ca2:	4b06      	ldr	r3, [pc, #24]	@ (8001cbc <HAL_IncTick+0x24>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	4413      	add	r3, r2
 8001ca8:	4a04      	ldr	r2, [pc, #16]	@ (8001cbc <HAL_IncTick+0x24>)
 8001caa:	6013      	str	r3, [r2, #0]
}
 8001cac:	bf00      	nop
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb4:	4770      	bx	lr
 8001cb6:	bf00      	nop
 8001cb8:	20000008 	.word	0x20000008
 8001cbc:	2000045c 	.word	0x2000045c

08001cc0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	af00      	add	r7, sp, #0
  return uwTick;
 8001cc4:	4b03      	ldr	r3, [pc, #12]	@ (8001cd4 <HAL_GetTick+0x14>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
}
 8001cc8:	4618      	mov	r0, r3
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd0:	4770      	bx	lr
 8001cd2:	bf00      	nop
 8001cd4:	2000045c 	.word	0x2000045c

08001cd8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b084      	sub	sp, #16
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ce0:	f7ff ffee 	bl	8001cc0 <HAL_GetTick>
 8001ce4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cf0:	d005      	beq.n	8001cfe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001cf2:	4b0a      	ldr	r3, [pc, #40]	@ (8001d1c <HAL_Delay+0x44>)
 8001cf4:	781b      	ldrb	r3, [r3, #0]
 8001cf6:	461a      	mov	r2, r3
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	4413      	add	r3, r2
 8001cfc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001cfe:	bf00      	nop
 8001d00:	f7ff ffde 	bl	8001cc0 <HAL_GetTick>
 8001d04:	4602      	mov	r2, r0
 8001d06:	68bb      	ldr	r3, [r7, #8]
 8001d08:	1ad3      	subs	r3, r2, r3
 8001d0a:	68fa      	ldr	r2, [r7, #12]
 8001d0c:	429a      	cmp	r2, r3
 8001d0e:	d8f7      	bhi.n	8001d00 <HAL_Delay+0x28>
  {
  }
}
 8001d10:	bf00      	nop
 8001d12:	bf00      	nop
 8001d14:	3710      	adds	r7, #16
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}
 8001d1a:	bf00      	nop
 8001d1c:	20000008 	.word	0x20000008

08001d20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d20:	b480      	push	{r7}
 8001d22:	b085      	sub	sp, #20
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	f003 0307 	and.w	r3, r3, #7
 8001d2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d30:	4b0c      	ldr	r3, [pc, #48]	@ (8001d64 <__NVIC_SetPriorityGrouping+0x44>)
 8001d32:	68db      	ldr	r3, [r3, #12]
 8001d34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d36:	68ba      	ldr	r2, [r7, #8]
 8001d38:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001d3c:	4013      	ands	r3, r2
 8001d3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d44:	68bb      	ldr	r3, [r7, #8]
 8001d46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d48:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001d4c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d52:	4a04      	ldr	r2, [pc, #16]	@ (8001d64 <__NVIC_SetPriorityGrouping+0x44>)
 8001d54:	68bb      	ldr	r3, [r7, #8]
 8001d56:	60d3      	str	r3, [r2, #12]
}
 8001d58:	bf00      	nop
 8001d5a:	3714      	adds	r7, #20
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d62:	4770      	bx	lr
 8001d64:	e000ed00 	.word	0xe000ed00

08001d68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d6c:	4b04      	ldr	r3, [pc, #16]	@ (8001d80 <__NVIC_GetPriorityGrouping+0x18>)
 8001d6e:	68db      	ldr	r3, [r3, #12]
 8001d70:	0a1b      	lsrs	r3, r3, #8
 8001d72:	f003 0307 	and.w	r3, r3, #7
}
 8001d76:	4618      	mov	r0, r3
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7e:	4770      	bx	lr
 8001d80:	e000ed00 	.word	0xe000ed00

08001d84 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d84:	b480      	push	{r7}
 8001d86:	b083      	sub	sp, #12
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	db0b      	blt.n	8001dae <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d96:	79fb      	ldrb	r3, [r7, #7]
 8001d98:	f003 021f 	and.w	r2, r3, #31
 8001d9c:	4907      	ldr	r1, [pc, #28]	@ (8001dbc <__NVIC_EnableIRQ+0x38>)
 8001d9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001da2:	095b      	lsrs	r3, r3, #5
 8001da4:	2001      	movs	r0, #1
 8001da6:	fa00 f202 	lsl.w	r2, r0, r2
 8001daa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001dae:	bf00      	nop
 8001db0:	370c      	adds	r7, #12
 8001db2:	46bd      	mov	sp, r7
 8001db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db8:	4770      	bx	lr
 8001dba:	bf00      	nop
 8001dbc:	e000e100 	.word	0xe000e100

08001dc0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	b083      	sub	sp, #12
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	6039      	str	r1, [r7, #0]
 8001dca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	db0a      	blt.n	8001dea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	b2da      	uxtb	r2, r3
 8001dd8:	490c      	ldr	r1, [pc, #48]	@ (8001e0c <__NVIC_SetPriority+0x4c>)
 8001dda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dde:	0112      	lsls	r2, r2, #4
 8001de0:	b2d2      	uxtb	r2, r2
 8001de2:	440b      	add	r3, r1
 8001de4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001de8:	e00a      	b.n	8001e00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	b2da      	uxtb	r2, r3
 8001dee:	4908      	ldr	r1, [pc, #32]	@ (8001e10 <__NVIC_SetPriority+0x50>)
 8001df0:	79fb      	ldrb	r3, [r7, #7]
 8001df2:	f003 030f 	and.w	r3, r3, #15
 8001df6:	3b04      	subs	r3, #4
 8001df8:	0112      	lsls	r2, r2, #4
 8001dfa:	b2d2      	uxtb	r2, r2
 8001dfc:	440b      	add	r3, r1
 8001dfe:	761a      	strb	r2, [r3, #24]
}
 8001e00:	bf00      	nop
 8001e02:	370c      	adds	r7, #12
 8001e04:	46bd      	mov	sp, r7
 8001e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0a:	4770      	bx	lr
 8001e0c:	e000e100 	.word	0xe000e100
 8001e10:	e000ed00 	.word	0xe000ed00

08001e14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e14:	b480      	push	{r7}
 8001e16:	b089      	sub	sp, #36	@ 0x24
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	60f8      	str	r0, [r7, #12]
 8001e1c:	60b9      	str	r1, [r7, #8]
 8001e1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	f003 0307 	and.w	r3, r3, #7
 8001e26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e28:	69fb      	ldr	r3, [r7, #28]
 8001e2a:	f1c3 0307 	rsb	r3, r3, #7
 8001e2e:	2b04      	cmp	r3, #4
 8001e30:	bf28      	it	cs
 8001e32:	2304      	movcs	r3, #4
 8001e34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e36:	69fb      	ldr	r3, [r7, #28]
 8001e38:	3304      	adds	r3, #4
 8001e3a:	2b06      	cmp	r3, #6
 8001e3c:	d902      	bls.n	8001e44 <NVIC_EncodePriority+0x30>
 8001e3e:	69fb      	ldr	r3, [r7, #28]
 8001e40:	3b03      	subs	r3, #3
 8001e42:	e000      	b.n	8001e46 <NVIC_EncodePriority+0x32>
 8001e44:	2300      	movs	r3, #0
 8001e46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e48:	f04f 32ff 	mov.w	r2, #4294967295
 8001e4c:	69bb      	ldr	r3, [r7, #24]
 8001e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e52:	43da      	mvns	r2, r3
 8001e54:	68bb      	ldr	r3, [r7, #8]
 8001e56:	401a      	ands	r2, r3
 8001e58:	697b      	ldr	r3, [r7, #20]
 8001e5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e5c:	f04f 31ff 	mov.w	r1, #4294967295
 8001e60:	697b      	ldr	r3, [r7, #20]
 8001e62:	fa01 f303 	lsl.w	r3, r1, r3
 8001e66:	43d9      	mvns	r1, r3
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e6c:	4313      	orrs	r3, r2
         );
}
 8001e6e:	4618      	mov	r0, r3
 8001e70:	3724      	adds	r7, #36	@ 0x24
 8001e72:	46bd      	mov	sp, r7
 8001e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e78:	4770      	bx	lr
	...

08001e7c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b082      	sub	sp, #8
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	3b01      	subs	r3, #1
 8001e88:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001e8c:	d301      	bcc.n	8001e92 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e8e:	2301      	movs	r3, #1
 8001e90:	e00f      	b.n	8001eb2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e92:	4a0a      	ldr	r2, [pc, #40]	@ (8001ebc <SysTick_Config+0x40>)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	3b01      	subs	r3, #1
 8001e98:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e9a:	210f      	movs	r1, #15
 8001e9c:	f04f 30ff 	mov.w	r0, #4294967295
 8001ea0:	f7ff ff8e 	bl	8001dc0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ea4:	4b05      	ldr	r3, [pc, #20]	@ (8001ebc <SysTick_Config+0x40>)
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001eaa:	4b04      	ldr	r3, [pc, #16]	@ (8001ebc <SysTick_Config+0x40>)
 8001eac:	2207      	movs	r2, #7
 8001eae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001eb0:	2300      	movs	r3, #0
}
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	3708      	adds	r7, #8
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}
 8001eba:	bf00      	nop
 8001ebc:	e000e010 	.word	0xe000e010

08001ec0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b082      	sub	sp, #8
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ec8:	6878      	ldr	r0, [r7, #4]
 8001eca:	f7ff ff29 	bl	8001d20 <__NVIC_SetPriorityGrouping>
}
 8001ece:	bf00      	nop
 8001ed0:	3708      	adds	r7, #8
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}

08001ed6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ed6:	b580      	push	{r7, lr}
 8001ed8:	b086      	sub	sp, #24
 8001eda:	af00      	add	r7, sp, #0
 8001edc:	4603      	mov	r3, r0
 8001ede:	60b9      	str	r1, [r7, #8]
 8001ee0:	607a      	str	r2, [r7, #4]
 8001ee2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ee8:	f7ff ff3e 	bl	8001d68 <__NVIC_GetPriorityGrouping>
 8001eec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001eee:	687a      	ldr	r2, [r7, #4]
 8001ef0:	68b9      	ldr	r1, [r7, #8]
 8001ef2:	6978      	ldr	r0, [r7, #20]
 8001ef4:	f7ff ff8e 	bl	8001e14 <NVIC_EncodePriority>
 8001ef8:	4602      	mov	r2, r0
 8001efa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001efe:	4611      	mov	r1, r2
 8001f00:	4618      	mov	r0, r3
 8001f02:	f7ff ff5d 	bl	8001dc0 <__NVIC_SetPriority>
}
 8001f06:	bf00      	nop
 8001f08:	3718      	adds	r7, #24
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}

08001f0e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f0e:	b580      	push	{r7, lr}
 8001f10:	b082      	sub	sp, #8
 8001f12:	af00      	add	r7, sp, #0
 8001f14:	4603      	mov	r3, r0
 8001f16:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	f7ff ff31 	bl	8001d84 <__NVIC_EnableIRQ>
}
 8001f22:	bf00      	nop
 8001f24:	3708      	adds	r7, #8
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}

08001f2a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f2a:	b580      	push	{r7, lr}
 8001f2c:	b082      	sub	sp, #8
 8001f2e:	af00      	add	r7, sp, #0
 8001f30:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f32:	6878      	ldr	r0, [r7, #4]
 8001f34:	f7ff ffa2 	bl	8001e7c <SysTick_Config>
 8001f38:	4603      	mov	r3, r0
}
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	3708      	adds	r7, #8
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}
	...

08001f44 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f44:	b480      	push	{r7}
 8001f46:	b089      	sub	sp, #36	@ 0x24
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
 8001f4c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001f52:	2300      	movs	r3, #0
 8001f54:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001f56:	2300      	movs	r3, #0
 8001f58:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	61fb      	str	r3, [r7, #28]
 8001f5e:	e177      	b.n	8002250 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001f60:	2201      	movs	r2, #1
 8001f62:	69fb      	ldr	r3, [r7, #28]
 8001f64:	fa02 f303 	lsl.w	r3, r2, r3
 8001f68:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	697a      	ldr	r2, [r7, #20]
 8001f70:	4013      	ands	r3, r2
 8001f72:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001f74:	693a      	ldr	r2, [r7, #16]
 8001f76:	697b      	ldr	r3, [r7, #20]
 8001f78:	429a      	cmp	r2, r3
 8001f7a:	f040 8166 	bne.w	800224a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	685b      	ldr	r3, [r3, #4]
 8001f82:	f003 0303 	and.w	r3, r3, #3
 8001f86:	2b01      	cmp	r3, #1
 8001f88:	d005      	beq.n	8001f96 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f92:	2b02      	cmp	r3, #2
 8001f94:	d130      	bne.n	8001ff8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	689b      	ldr	r3, [r3, #8]
 8001f9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001f9c:	69fb      	ldr	r3, [r7, #28]
 8001f9e:	005b      	lsls	r3, r3, #1
 8001fa0:	2203      	movs	r2, #3
 8001fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa6:	43db      	mvns	r3, r3
 8001fa8:	69ba      	ldr	r2, [r7, #24]
 8001faa:	4013      	ands	r3, r2
 8001fac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	68da      	ldr	r2, [r3, #12]
 8001fb2:	69fb      	ldr	r3, [r7, #28]
 8001fb4:	005b      	lsls	r3, r3, #1
 8001fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fba:	69ba      	ldr	r2, [r7, #24]
 8001fbc:	4313      	orrs	r3, r2
 8001fbe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	69ba      	ldr	r2, [r7, #24]
 8001fc4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	685b      	ldr	r3, [r3, #4]
 8001fca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001fcc:	2201      	movs	r2, #1
 8001fce:	69fb      	ldr	r3, [r7, #28]
 8001fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd4:	43db      	mvns	r3, r3
 8001fd6:	69ba      	ldr	r2, [r7, #24]
 8001fd8:	4013      	ands	r3, r2
 8001fda:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	091b      	lsrs	r3, r3, #4
 8001fe2:	f003 0201 	and.w	r2, r3, #1
 8001fe6:	69fb      	ldr	r3, [r7, #28]
 8001fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fec:	69ba      	ldr	r2, [r7, #24]
 8001fee:	4313      	orrs	r3, r2
 8001ff0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	69ba      	ldr	r2, [r7, #24]
 8001ff6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	f003 0303 	and.w	r3, r3, #3
 8002000:	2b03      	cmp	r3, #3
 8002002:	d017      	beq.n	8002034 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	68db      	ldr	r3, [r3, #12]
 8002008:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800200a:	69fb      	ldr	r3, [r7, #28]
 800200c:	005b      	lsls	r3, r3, #1
 800200e:	2203      	movs	r2, #3
 8002010:	fa02 f303 	lsl.w	r3, r2, r3
 8002014:	43db      	mvns	r3, r3
 8002016:	69ba      	ldr	r2, [r7, #24]
 8002018:	4013      	ands	r3, r2
 800201a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	689a      	ldr	r2, [r3, #8]
 8002020:	69fb      	ldr	r3, [r7, #28]
 8002022:	005b      	lsls	r3, r3, #1
 8002024:	fa02 f303 	lsl.w	r3, r2, r3
 8002028:	69ba      	ldr	r2, [r7, #24]
 800202a:	4313      	orrs	r3, r2
 800202c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	69ba      	ldr	r2, [r7, #24]
 8002032:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	f003 0303 	and.w	r3, r3, #3
 800203c:	2b02      	cmp	r3, #2
 800203e:	d123      	bne.n	8002088 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002040:	69fb      	ldr	r3, [r7, #28]
 8002042:	08da      	lsrs	r2, r3, #3
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	3208      	adds	r2, #8
 8002048:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800204c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800204e:	69fb      	ldr	r3, [r7, #28]
 8002050:	f003 0307 	and.w	r3, r3, #7
 8002054:	009b      	lsls	r3, r3, #2
 8002056:	220f      	movs	r2, #15
 8002058:	fa02 f303 	lsl.w	r3, r2, r3
 800205c:	43db      	mvns	r3, r3
 800205e:	69ba      	ldr	r2, [r7, #24]
 8002060:	4013      	ands	r3, r2
 8002062:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	691a      	ldr	r2, [r3, #16]
 8002068:	69fb      	ldr	r3, [r7, #28]
 800206a:	f003 0307 	and.w	r3, r3, #7
 800206e:	009b      	lsls	r3, r3, #2
 8002070:	fa02 f303 	lsl.w	r3, r2, r3
 8002074:	69ba      	ldr	r2, [r7, #24]
 8002076:	4313      	orrs	r3, r2
 8002078:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800207a:	69fb      	ldr	r3, [r7, #28]
 800207c:	08da      	lsrs	r2, r3, #3
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	3208      	adds	r2, #8
 8002082:	69b9      	ldr	r1, [r7, #24]
 8002084:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800208e:	69fb      	ldr	r3, [r7, #28]
 8002090:	005b      	lsls	r3, r3, #1
 8002092:	2203      	movs	r2, #3
 8002094:	fa02 f303 	lsl.w	r3, r2, r3
 8002098:	43db      	mvns	r3, r3
 800209a:	69ba      	ldr	r2, [r7, #24]
 800209c:	4013      	ands	r3, r2
 800209e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	f003 0203 	and.w	r2, r3, #3
 80020a8:	69fb      	ldr	r3, [r7, #28]
 80020aa:	005b      	lsls	r3, r3, #1
 80020ac:	fa02 f303 	lsl.w	r3, r2, r3
 80020b0:	69ba      	ldr	r2, [r7, #24]
 80020b2:	4313      	orrs	r3, r2
 80020b4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	69ba      	ldr	r2, [r7, #24]
 80020ba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	f000 80c0 	beq.w	800224a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020ca:	2300      	movs	r3, #0
 80020cc:	60fb      	str	r3, [r7, #12]
 80020ce:	4b66      	ldr	r3, [pc, #408]	@ (8002268 <HAL_GPIO_Init+0x324>)
 80020d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020d2:	4a65      	ldr	r2, [pc, #404]	@ (8002268 <HAL_GPIO_Init+0x324>)
 80020d4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80020d8:	6453      	str	r3, [r2, #68]	@ 0x44
 80020da:	4b63      	ldr	r3, [pc, #396]	@ (8002268 <HAL_GPIO_Init+0x324>)
 80020dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020de:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80020e2:	60fb      	str	r3, [r7, #12]
 80020e4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80020e6:	4a61      	ldr	r2, [pc, #388]	@ (800226c <HAL_GPIO_Init+0x328>)
 80020e8:	69fb      	ldr	r3, [r7, #28]
 80020ea:	089b      	lsrs	r3, r3, #2
 80020ec:	3302      	adds	r3, #2
 80020ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80020f4:	69fb      	ldr	r3, [r7, #28]
 80020f6:	f003 0303 	and.w	r3, r3, #3
 80020fa:	009b      	lsls	r3, r3, #2
 80020fc:	220f      	movs	r2, #15
 80020fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002102:	43db      	mvns	r3, r3
 8002104:	69ba      	ldr	r2, [r7, #24]
 8002106:	4013      	ands	r3, r2
 8002108:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	4a58      	ldr	r2, [pc, #352]	@ (8002270 <HAL_GPIO_Init+0x32c>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d037      	beq.n	8002182 <HAL_GPIO_Init+0x23e>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	4a57      	ldr	r2, [pc, #348]	@ (8002274 <HAL_GPIO_Init+0x330>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d031      	beq.n	800217e <HAL_GPIO_Init+0x23a>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	4a56      	ldr	r2, [pc, #344]	@ (8002278 <HAL_GPIO_Init+0x334>)
 800211e:	4293      	cmp	r3, r2
 8002120:	d02b      	beq.n	800217a <HAL_GPIO_Init+0x236>
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	4a55      	ldr	r2, [pc, #340]	@ (800227c <HAL_GPIO_Init+0x338>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d025      	beq.n	8002176 <HAL_GPIO_Init+0x232>
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	4a54      	ldr	r2, [pc, #336]	@ (8002280 <HAL_GPIO_Init+0x33c>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d01f      	beq.n	8002172 <HAL_GPIO_Init+0x22e>
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	4a53      	ldr	r2, [pc, #332]	@ (8002284 <HAL_GPIO_Init+0x340>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d019      	beq.n	800216e <HAL_GPIO_Init+0x22a>
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	4a52      	ldr	r2, [pc, #328]	@ (8002288 <HAL_GPIO_Init+0x344>)
 800213e:	4293      	cmp	r3, r2
 8002140:	d013      	beq.n	800216a <HAL_GPIO_Init+0x226>
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	4a51      	ldr	r2, [pc, #324]	@ (800228c <HAL_GPIO_Init+0x348>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d00d      	beq.n	8002166 <HAL_GPIO_Init+0x222>
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	4a50      	ldr	r2, [pc, #320]	@ (8002290 <HAL_GPIO_Init+0x34c>)
 800214e:	4293      	cmp	r3, r2
 8002150:	d007      	beq.n	8002162 <HAL_GPIO_Init+0x21e>
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	4a4f      	ldr	r2, [pc, #316]	@ (8002294 <HAL_GPIO_Init+0x350>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d101      	bne.n	800215e <HAL_GPIO_Init+0x21a>
 800215a:	2309      	movs	r3, #9
 800215c:	e012      	b.n	8002184 <HAL_GPIO_Init+0x240>
 800215e:	230a      	movs	r3, #10
 8002160:	e010      	b.n	8002184 <HAL_GPIO_Init+0x240>
 8002162:	2308      	movs	r3, #8
 8002164:	e00e      	b.n	8002184 <HAL_GPIO_Init+0x240>
 8002166:	2307      	movs	r3, #7
 8002168:	e00c      	b.n	8002184 <HAL_GPIO_Init+0x240>
 800216a:	2306      	movs	r3, #6
 800216c:	e00a      	b.n	8002184 <HAL_GPIO_Init+0x240>
 800216e:	2305      	movs	r3, #5
 8002170:	e008      	b.n	8002184 <HAL_GPIO_Init+0x240>
 8002172:	2304      	movs	r3, #4
 8002174:	e006      	b.n	8002184 <HAL_GPIO_Init+0x240>
 8002176:	2303      	movs	r3, #3
 8002178:	e004      	b.n	8002184 <HAL_GPIO_Init+0x240>
 800217a:	2302      	movs	r3, #2
 800217c:	e002      	b.n	8002184 <HAL_GPIO_Init+0x240>
 800217e:	2301      	movs	r3, #1
 8002180:	e000      	b.n	8002184 <HAL_GPIO_Init+0x240>
 8002182:	2300      	movs	r3, #0
 8002184:	69fa      	ldr	r2, [r7, #28]
 8002186:	f002 0203 	and.w	r2, r2, #3
 800218a:	0092      	lsls	r2, r2, #2
 800218c:	4093      	lsls	r3, r2
 800218e:	69ba      	ldr	r2, [r7, #24]
 8002190:	4313      	orrs	r3, r2
 8002192:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002194:	4935      	ldr	r1, [pc, #212]	@ (800226c <HAL_GPIO_Init+0x328>)
 8002196:	69fb      	ldr	r3, [r7, #28]
 8002198:	089b      	lsrs	r3, r3, #2
 800219a:	3302      	adds	r3, #2
 800219c:	69ba      	ldr	r2, [r7, #24]
 800219e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80021a2:	4b3d      	ldr	r3, [pc, #244]	@ (8002298 <HAL_GPIO_Init+0x354>)
 80021a4:	689b      	ldr	r3, [r3, #8]
 80021a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021a8:	693b      	ldr	r3, [r7, #16]
 80021aa:	43db      	mvns	r3, r3
 80021ac:	69ba      	ldr	r2, [r7, #24]
 80021ae:	4013      	ands	r3, r2
 80021b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d003      	beq.n	80021c6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80021be:	69ba      	ldr	r2, [r7, #24]
 80021c0:	693b      	ldr	r3, [r7, #16]
 80021c2:	4313      	orrs	r3, r2
 80021c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80021c6:	4a34      	ldr	r2, [pc, #208]	@ (8002298 <HAL_GPIO_Init+0x354>)
 80021c8:	69bb      	ldr	r3, [r7, #24]
 80021ca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80021cc:	4b32      	ldr	r3, [pc, #200]	@ (8002298 <HAL_GPIO_Init+0x354>)
 80021ce:	68db      	ldr	r3, [r3, #12]
 80021d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021d2:	693b      	ldr	r3, [r7, #16]
 80021d4:	43db      	mvns	r3, r3
 80021d6:	69ba      	ldr	r2, [r7, #24]
 80021d8:	4013      	ands	r3, r2
 80021da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d003      	beq.n	80021f0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80021e8:	69ba      	ldr	r2, [r7, #24]
 80021ea:	693b      	ldr	r3, [r7, #16]
 80021ec:	4313      	orrs	r3, r2
 80021ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80021f0:	4a29      	ldr	r2, [pc, #164]	@ (8002298 <HAL_GPIO_Init+0x354>)
 80021f2:	69bb      	ldr	r3, [r7, #24]
 80021f4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80021f6:	4b28      	ldr	r3, [pc, #160]	@ (8002298 <HAL_GPIO_Init+0x354>)
 80021f8:	685b      	ldr	r3, [r3, #4]
 80021fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021fc:	693b      	ldr	r3, [r7, #16]
 80021fe:	43db      	mvns	r3, r3
 8002200:	69ba      	ldr	r2, [r7, #24]
 8002202:	4013      	ands	r3, r2
 8002204:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800220e:	2b00      	cmp	r3, #0
 8002210:	d003      	beq.n	800221a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002212:	69ba      	ldr	r2, [r7, #24]
 8002214:	693b      	ldr	r3, [r7, #16]
 8002216:	4313      	orrs	r3, r2
 8002218:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800221a:	4a1f      	ldr	r2, [pc, #124]	@ (8002298 <HAL_GPIO_Init+0x354>)
 800221c:	69bb      	ldr	r3, [r7, #24]
 800221e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002220:	4b1d      	ldr	r3, [pc, #116]	@ (8002298 <HAL_GPIO_Init+0x354>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002226:	693b      	ldr	r3, [r7, #16]
 8002228:	43db      	mvns	r3, r3
 800222a:	69ba      	ldr	r2, [r7, #24]
 800222c:	4013      	ands	r3, r2
 800222e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002238:	2b00      	cmp	r3, #0
 800223a:	d003      	beq.n	8002244 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800223c:	69ba      	ldr	r2, [r7, #24]
 800223e:	693b      	ldr	r3, [r7, #16]
 8002240:	4313      	orrs	r3, r2
 8002242:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002244:	4a14      	ldr	r2, [pc, #80]	@ (8002298 <HAL_GPIO_Init+0x354>)
 8002246:	69bb      	ldr	r3, [r7, #24]
 8002248:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800224a:	69fb      	ldr	r3, [r7, #28]
 800224c:	3301      	adds	r3, #1
 800224e:	61fb      	str	r3, [r7, #28]
 8002250:	69fb      	ldr	r3, [r7, #28]
 8002252:	2b0f      	cmp	r3, #15
 8002254:	f67f ae84 	bls.w	8001f60 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002258:	bf00      	nop
 800225a:	bf00      	nop
 800225c:	3724      	adds	r7, #36	@ 0x24
 800225e:	46bd      	mov	sp, r7
 8002260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002264:	4770      	bx	lr
 8002266:	bf00      	nop
 8002268:	40023800 	.word	0x40023800
 800226c:	40013800 	.word	0x40013800
 8002270:	40020000 	.word	0x40020000
 8002274:	40020400 	.word	0x40020400
 8002278:	40020800 	.word	0x40020800
 800227c:	40020c00 	.word	0x40020c00
 8002280:	40021000 	.word	0x40021000
 8002284:	40021400 	.word	0x40021400
 8002288:	40021800 	.word	0x40021800
 800228c:	40021c00 	.word	0x40021c00
 8002290:	40022000 	.word	0x40022000
 8002294:	40022400 	.word	0x40022400
 8002298:	40013c00 	.word	0x40013c00

0800229c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800229c:	b480      	push	{r7}
 800229e:	b085      	sub	sp, #20
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
 80022a4:	460b      	mov	r3, r1
 80022a6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	691a      	ldr	r2, [r3, #16]
 80022ac:	887b      	ldrh	r3, [r7, #2]
 80022ae:	4013      	ands	r3, r2
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d002      	beq.n	80022ba <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80022b4:	2301      	movs	r3, #1
 80022b6:	73fb      	strb	r3, [r7, #15]
 80022b8:	e001      	b.n	80022be <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80022ba:	2300      	movs	r3, #0
 80022bc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80022be:	7bfb      	ldrb	r3, [r7, #15]
}
 80022c0:	4618      	mov	r0, r3
 80022c2:	3714      	adds	r7, #20
 80022c4:	46bd      	mov	sp, r7
 80022c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ca:	4770      	bx	lr

080022cc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b084      	sub	sp, #16
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d101      	bne.n	80022de <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80022da:	2301      	movs	r3, #1
 80022dc:	e12b      	b.n	8002536 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80022e4:	b2db      	uxtb	r3, r3
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d106      	bne.n	80022f8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	2200      	movs	r2, #0
 80022ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80022f2:	6878      	ldr	r0, [r7, #4]
 80022f4:	f7ff fafa 	bl	80018ec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2224      	movs	r2, #36	@ 0x24
 80022fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	681a      	ldr	r2, [r3, #0]
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f022 0201 	bic.w	r2, r2, #1
 800230e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	681a      	ldr	r2, [r3, #0]
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800231e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	681a      	ldr	r2, [r3, #0]
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800232e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002330:	f002 fed6 	bl	80050e0 <HAL_RCC_GetPCLK1Freq>
 8002334:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	685b      	ldr	r3, [r3, #4]
 800233a:	4a81      	ldr	r2, [pc, #516]	@ (8002540 <HAL_I2C_Init+0x274>)
 800233c:	4293      	cmp	r3, r2
 800233e:	d807      	bhi.n	8002350 <HAL_I2C_Init+0x84>
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	4a80      	ldr	r2, [pc, #512]	@ (8002544 <HAL_I2C_Init+0x278>)
 8002344:	4293      	cmp	r3, r2
 8002346:	bf94      	ite	ls
 8002348:	2301      	movls	r3, #1
 800234a:	2300      	movhi	r3, #0
 800234c:	b2db      	uxtb	r3, r3
 800234e:	e006      	b.n	800235e <HAL_I2C_Init+0x92>
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	4a7d      	ldr	r2, [pc, #500]	@ (8002548 <HAL_I2C_Init+0x27c>)
 8002354:	4293      	cmp	r3, r2
 8002356:	bf94      	ite	ls
 8002358:	2301      	movls	r3, #1
 800235a:	2300      	movhi	r3, #0
 800235c:	b2db      	uxtb	r3, r3
 800235e:	2b00      	cmp	r3, #0
 8002360:	d001      	beq.n	8002366 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002362:	2301      	movs	r3, #1
 8002364:	e0e7      	b.n	8002536 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	4a78      	ldr	r2, [pc, #480]	@ (800254c <HAL_I2C_Init+0x280>)
 800236a:	fba2 2303 	umull	r2, r3, r2, r3
 800236e:	0c9b      	lsrs	r3, r3, #18
 8002370:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	68ba      	ldr	r2, [r7, #8]
 8002382:	430a      	orrs	r2, r1
 8002384:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	6a1b      	ldr	r3, [r3, #32]
 800238c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	4a6a      	ldr	r2, [pc, #424]	@ (8002540 <HAL_I2C_Init+0x274>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d802      	bhi.n	80023a0 <HAL_I2C_Init+0xd4>
 800239a:	68bb      	ldr	r3, [r7, #8]
 800239c:	3301      	adds	r3, #1
 800239e:	e009      	b.n	80023b4 <HAL_I2C_Init+0xe8>
 80023a0:	68bb      	ldr	r3, [r7, #8]
 80023a2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80023a6:	fb02 f303 	mul.w	r3, r2, r3
 80023aa:	4a69      	ldr	r2, [pc, #420]	@ (8002550 <HAL_I2C_Init+0x284>)
 80023ac:	fba2 2303 	umull	r2, r3, r2, r3
 80023b0:	099b      	lsrs	r3, r3, #6
 80023b2:	3301      	adds	r3, #1
 80023b4:	687a      	ldr	r2, [r7, #4]
 80023b6:	6812      	ldr	r2, [r2, #0]
 80023b8:	430b      	orrs	r3, r1
 80023ba:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	69db      	ldr	r3, [r3, #28]
 80023c2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80023c6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	685b      	ldr	r3, [r3, #4]
 80023ce:	495c      	ldr	r1, [pc, #368]	@ (8002540 <HAL_I2C_Init+0x274>)
 80023d0:	428b      	cmp	r3, r1
 80023d2:	d819      	bhi.n	8002408 <HAL_I2C_Init+0x13c>
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	1e59      	subs	r1, r3, #1
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	005b      	lsls	r3, r3, #1
 80023de:	fbb1 f3f3 	udiv	r3, r1, r3
 80023e2:	1c59      	adds	r1, r3, #1
 80023e4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80023e8:	400b      	ands	r3, r1
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d00a      	beq.n	8002404 <HAL_I2C_Init+0x138>
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	1e59      	subs	r1, r3, #1
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	005b      	lsls	r3, r3, #1
 80023f8:	fbb1 f3f3 	udiv	r3, r1, r3
 80023fc:	3301      	adds	r3, #1
 80023fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002402:	e051      	b.n	80024a8 <HAL_I2C_Init+0x1dc>
 8002404:	2304      	movs	r3, #4
 8002406:	e04f      	b.n	80024a8 <HAL_I2C_Init+0x1dc>
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	689b      	ldr	r3, [r3, #8]
 800240c:	2b00      	cmp	r3, #0
 800240e:	d111      	bne.n	8002434 <HAL_I2C_Init+0x168>
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	1e58      	subs	r0, r3, #1
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6859      	ldr	r1, [r3, #4]
 8002418:	460b      	mov	r3, r1
 800241a:	005b      	lsls	r3, r3, #1
 800241c:	440b      	add	r3, r1
 800241e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002422:	3301      	adds	r3, #1
 8002424:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002428:	2b00      	cmp	r3, #0
 800242a:	bf0c      	ite	eq
 800242c:	2301      	moveq	r3, #1
 800242e:	2300      	movne	r3, #0
 8002430:	b2db      	uxtb	r3, r3
 8002432:	e012      	b.n	800245a <HAL_I2C_Init+0x18e>
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	1e58      	subs	r0, r3, #1
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6859      	ldr	r1, [r3, #4]
 800243c:	460b      	mov	r3, r1
 800243e:	009b      	lsls	r3, r3, #2
 8002440:	440b      	add	r3, r1
 8002442:	0099      	lsls	r1, r3, #2
 8002444:	440b      	add	r3, r1
 8002446:	fbb0 f3f3 	udiv	r3, r0, r3
 800244a:	3301      	adds	r3, #1
 800244c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002450:	2b00      	cmp	r3, #0
 8002452:	bf0c      	ite	eq
 8002454:	2301      	moveq	r3, #1
 8002456:	2300      	movne	r3, #0
 8002458:	b2db      	uxtb	r3, r3
 800245a:	2b00      	cmp	r3, #0
 800245c:	d001      	beq.n	8002462 <HAL_I2C_Init+0x196>
 800245e:	2301      	movs	r3, #1
 8002460:	e022      	b.n	80024a8 <HAL_I2C_Init+0x1dc>
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	689b      	ldr	r3, [r3, #8]
 8002466:	2b00      	cmp	r3, #0
 8002468:	d10e      	bne.n	8002488 <HAL_I2C_Init+0x1bc>
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	1e58      	subs	r0, r3, #1
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6859      	ldr	r1, [r3, #4]
 8002472:	460b      	mov	r3, r1
 8002474:	005b      	lsls	r3, r3, #1
 8002476:	440b      	add	r3, r1
 8002478:	fbb0 f3f3 	udiv	r3, r0, r3
 800247c:	3301      	adds	r3, #1
 800247e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002482:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002486:	e00f      	b.n	80024a8 <HAL_I2C_Init+0x1dc>
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	1e58      	subs	r0, r3, #1
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6859      	ldr	r1, [r3, #4]
 8002490:	460b      	mov	r3, r1
 8002492:	009b      	lsls	r3, r3, #2
 8002494:	440b      	add	r3, r1
 8002496:	0099      	lsls	r1, r3, #2
 8002498:	440b      	add	r3, r1
 800249a:	fbb0 f3f3 	udiv	r3, r0, r3
 800249e:	3301      	adds	r3, #1
 80024a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024a4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80024a8:	6879      	ldr	r1, [r7, #4]
 80024aa:	6809      	ldr	r1, [r1, #0]
 80024ac:	4313      	orrs	r3, r2
 80024ae:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	69da      	ldr	r2, [r3, #28]
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6a1b      	ldr	r3, [r3, #32]
 80024c2:	431a      	orrs	r2, r3
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	430a      	orrs	r2, r1
 80024ca:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	689b      	ldr	r3, [r3, #8]
 80024d2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80024d6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80024da:	687a      	ldr	r2, [r7, #4]
 80024dc:	6911      	ldr	r1, [r2, #16]
 80024de:	687a      	ldr	r2, [r7, #4]
 80024e0:	68d2      	ldr	r2, [r2, #12]
 80024e2:	4311      	orrs	r1, r2
 80024e4:	687a      	ldr	r2, [r7, #4]
 80024e6:	6812      	ldr	r2, [r2, #0]
 80024e8:	430b      	orrs	r3, r1
 80024ea:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	68db      	ldr	r3, [r3, #12]
 80024f2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	695a      	ldr	r2, [r3, #20]
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	699b      	ldr	r3, [r3, #24]
 80024fe:	431a      	orrs	r2, r3
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	430a      	orrs	r2, r1
 8002506:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	681a      	ldr	r2, [r3, #0]
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f042 0201 	orr.w	r2, r2, #1
 8002516:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2200      	movs	r2, #0
 800251c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2220      	movs	r2, #32
 8002522:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	2200      	movs	r2, #0
 800252a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2200      	movs	r2, #0
 8002530:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002534:	2300      	movs	r3, #0
}
 8002536:	4618      	mov	r0, r3
 8002538:	3710      	adds	r7, #16
 800253a:	46bd      	mov	sp, r7
 800253c:	bd80      	pop	{r7, pc}
 800253e:	bf00      	nop
 8002540:	000186a0 	.word	0x000186a0
 8002544:	001e847f 	.word	0x001e847f
 8002548:	003d08ff 	.word	0x003d08ff
 800254c:	431bde83 	.word	0x431bde83
 8002550:	10624dd3 	.word	0x10624dd3

08002554 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b088      	sub	sp, #32
 8002558:	af02      	add	r7, sp, #8
 800255a:	60f8      	str	r0, [r7, #12]
 800255c:	4608      	mov	r0, r1
 800255e:	4611      	mov	r1, r2
 8002560:	461a      	mov	r2, r3
 8002562:	4603      	mov	r3, r0
 8002564:	817b      	strh	r3, [r7, #10]
 8002566:	460b      	mov	r3, r1
 8002568:	813b      	strh	r3, [r7, #8]
 800256a:	4613      	mov	r3, r2
 800256c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800256e:	f7ff fba7 	bl	8001cc0 <HAL_GetTick>
 8002572:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800257a:	b2db      	uxtb	r3, r3
 800257c:	2b20      	cmp	r3, #32
 800257e:	f040 80d9 	bne.w	8002734 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002582:	697b      	ldr	r3, [r7, #20]
 8002584:	9300      	str	r3, [sp, #0]
 8002586:	2319      	movs	r3, #25
 8002588:	2201      	movs	r2, #1
 800258a:	496d      	ldr	r1, [pc, #436]	@ (8002740 <HAL_I2C_Mem_Write+0x1ec>)
 800258c:	68f8      	ldr	r0, [r7, #12]
 800258e:	f000 fc8b 	bl	8002ea8 <I2C_WaitOnFlagUntilTimeout>
 8002592:	4603      	mov	r3, r0
 8002594:	2b00      	cmp	r3, #0
 8002596:	d001      	beq.n	800259c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002598:	2302      	movs	r3, #2
 800259a:	e0cc      	b.n	8002736 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80025a2:	2b01      	cmp	r3, #1
 80025a4:	d101      	bne.n	80025aa <HAL_I2C_Mem_Write+0x56>
 80025a6:	2302      	movs	r3, #2
 80025a8:	e0c5      	b.n	8002736 <HAL_I2C_Mem_Write+0x1e2>
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	2201      	movs	r2, #1
 80025ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f003 0301 	and.w	r3, r3, #1
 80025bc:	2b01      	cmp	r3, #1
 80025be:	d007      	beq.n	80025d0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	681a      	ldr	r2, [r3, #0]
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f042 0201 	orr.w	r2, r2, #1
 80025ce:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	681a      	ldr	r2, [r3, #0]
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80025de:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	2221      	movs	r2, #33	@ 0x21
 80025e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	2240      	movs	r2, #64	@ 0x40
 80025ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	2200      	movs	r2, #0
 80025f4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	6a3a      	ldr	r2, [r7, #32]
 80025fa:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002600:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002606:	b29a      	uxth	r2, r3
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	4a4d      	ldr	r2, [pc, #308]	@ (8002744 <HAL_I2C_Mem_Write+0x1f0>)
 8002610:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002612:	88f8      	ldrh	r0, [r7, #6]
 8002614:	893a      	ldrh	r2, [r7, #8]
 8002616:	8979      	ldrh	r1, [r7, #10]
 8002618:	697b      	ldr	r3, [r7, #20]
 800261a:	9301      	str	r3, [sp, #4]
 800261c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800261e:	9300      	str	r3, [sp, #0]
 8002620:	4603      	mov	r3, r0
 8002622:	68f8      	ldr	r0, [r7, #12]
 8002624:	f000 fac2 	bl	8002bac <I2C_RequestMemoryWrite>
 8002628:	4603      	mov	r3, r0
 800262a:	2b00      	cmp	r3, #0
 800262c:	d052      	beq.n	80026d4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800262e:	2301      	movs	r3, #1
 8002630:	e081      	b.n	8002736 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002632:	697a      	ldr	r2, [r7, #20]
 8002634:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002636:	68f8      	ldr	r0, [r7, #12]
 8002638:	f000 fd50 	bl	80030dc <I2C_WaitOnTXEFlagUntilTimeout>
 800263c:	4603      	mov	r3, r0
 800263e:	2b00      	cmp	r3, #0
 8002640:	d00d      	beq.n	800265e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002646:	2b04      	cmp	r3, #4
 8002648:	d107      	bne.n	800265a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	681a      	ldr	r2, [r3, #0]
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002658:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800265a:	2301      	movs	r3, #1
 800265c:	e06b      	b.n	8002736 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002662:	781a      	ldrb	r2, [r3, #0]
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800266e:	1c5a      	adds	r2, r3, #1
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002678:	3b01      	subs	r3, #1
 800267a:	b29a      	uxth	r2, r3
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002684:	b29b      	uxth	r3, r3
 8002686:	3b01      	subs	r3, #1
 8002688:	b29a      	uxth	r2, r3
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	695b      	ldr	r3, [r3, #20]
 8002694:	f003 0304 	and.w	r3, r3, #4
 8002698:	2b04      	cmp	r3, #4
 800269a:	d11b      	bne.n	80026d4 <HAL_I2C_Mem_Write+0x180>
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d017      	beq.n	80026d4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026a8:	781a      	ldrb	r2, [r3, #0]
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026b4:	1c5a      	adds	r2, r3, #1
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026be:	3b01      	subs	r3, #1
 80026c0:	b29a      	uxth	r2, r3
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026ca:	b29b      	uxth	r3, r3
 80026cc:	3b01      	subs	r3, #1
 80026ce:	b29a      	uxth	r2, r3
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d1aa      	bne.n	8002632 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80026dc:	697a      	ldr	r2, [r7, #20]
 80026de:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80026e0:	68f8      	ldr	r0, [r7, #12]
 80026e2:	f000 fd43 	bl	800316c <I2C_WaitOnBTFFlagUntilTimeout>
 80026e6:	4603      	mov	r3, r0
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d00d      	beq.n	8002708 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026f0:	2b04      	cmp	r3, #4
 80026f2:	d107      	bne.n	8002704 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	681a      	ldr	r2, [r3, #0]
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002702:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002704:	2301      	movs	r3, #1
 8002706:	e016      	b.n	8002736 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	681a      	ldr	r2, [r3, #0]
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002716:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	2220      	movs	r2, #32
 800271c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	2200      	movs	r2, #0
 8002724:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	2200      	movs	r2, #0
 800272c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002730:	2300      	movs	r3, #0
 8002732:	e000      	b.n	8002736 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002734:	2302      	movs	r3, #2
  }
}
 8002736:	4618      	mov	r0, r3
 8002738:	3718      	adds	r7, #24
 800273a:	46bd      	mov	sp, r7
 800273c:	bd80      	pop	{r7, pc}
 800273e:	bf00      	nop
 8002740:	00100002 	.word	0x00100002
 8002744:	ffff0000 	.word	0xffff0000

08002748 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b08c      	sub	sp, #48	@ 0x30
 800274c:	af02      	add	r7, sp, #8
 800274e:	60f8      	str	r0, [r7, #12]
 8002750:	4608      	mov	r0, r1
 8002752:	4611      	mov	r1, r2
 8002754:	461a      	mov	r2, r3
 8002756:	4603      	mov	r3, r0
 8002758:	817b      	strh	r3, [r7, #10]
 800275a:	460b      	mov	r3, r1
 800275c:	813b      	strh	r3, [r7, #8]
 800275e:	4613      	mov	r3, r2
 8002760:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002762:	f7ff faad 	bl	8001cc0 <HAL_GetTick>
 8002766:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800276e:	b2db      	uxtb	r3, r3
 8002770:	2b20      	cmp	r3, #32
 8002772:	f040 8214 	bne.w	8002b9e <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002776:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002778:	9300      	str	r3, [sp, #0]
 800277a:	2319      	movs	r3, #25
 800277c:	2201      	movs	r2, #1
 800277e:	497b      	ldr	r1, [pc, #492]	@ (800296c <HAL_I2C_Mem_Read+0x224>)
 8002780:	68f8      	ldr	r0, [r7, #12]
 8002782:	f000 fb91 	bl	8002ea8 <I2C_WaitOnFlagUntilTimeout>
 8002786:	4603      	mov	r3, r0
 8002788:	2b00      	cmp	r3, #0
 800278a:	d001      	beq.n	8002790 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800278c:	2302      	movs	r3, #2
 800278e:	e207      	b.n	8002ba0 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002796:	2b01      	cmp	r3, #1
 8002798:	d101      	bne.n	800279e <HAL_I2C_Mem_Read+0x56>
 800279a:	2302      	movs	r3, #2
 800279c:	e200      	b.n	8002ba0 <HAL_I2C_Mem_Read+0x458>
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	2201      	movs	r2, #1
 80027a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f003 0301 	and.w	r3, r3, #1
 80027b0:	2b01      	cmp	r3, #1
 80027b2:	d007      	beq.n	80027c4 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	681a      	ldr	r2, [r3, #0]
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f042 0201 	orr.w	r2, r2, #1
 80027c2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	681a      	ldr	r2, [r3, #0]
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80027d2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	2222      	movs	r2, #34	@ 0x22
 80027d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	2240      	movs	r2, #64	@ 0x40
 80027e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	2200      	movs	r2, #0
 80027e8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80027ee:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80027f4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027fa:	b29a      	uxth	r2, r3
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	4a5b      	ldr	r2, [pc, #364]	@ (8002970 <HAL_I2C_Mem_Read+0x228>)
 8002804:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002806:	88f8      	ldrh	r0, [r7, #6]
 8002808:	893a      	ldrh	r2, [r7, #8]
 800280a:	8979      	ldrh	r1, [r7, #10]
 800280c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800280e:	9301      	str	r3, [sp, #4]
 8002810:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002812:	9300      	str	r3, [sp, #0]
 8002814:	4603      	mov	r3, r0
 8002816:	68f8      	ldr	r0, [r7, #12]
 8002818:	f000 fa5e 	bl	8002cd8 <I2C_RequestMemoryRead>
 800281c:	4603      	mov	r3, r0
 800281e:	2b00      	cmp	r3, #0
 8002820:	d001      	beq.n	8002826 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002822:	2301      	movs	r3, #1
 8002824:	e1bc      	b.n	8002ba0 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800282a:	2b00      	cmp	r3, #0
 800282c:	d113      	bne.n	8002856 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800282e:	2300      	movs	r3, #0
 8002830:	623b      	str	r3, [r7, #32]
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	695b      	ldr	r3, [r3, #20]
 8002838:	623b      	str	r3, [r7, #32]
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	699b      	ldr	r3, [r3, #24]
 8002840:	623b      	str	r3, [r7, #32]
 8002842:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	681a      	ldr	r2, [r3, #0]
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002852:	601a      	str	r2, [r3, #0]
 8002854:	e190      	b.n	8002b78 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800285a:	2b01      	cmp	r3, #1
 800285c:	d11b      	bne.n	8002896 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	681a      	ldr	r2, [r3, #0]
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800286c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800286e:	2300      	movs	r3, #0
 8002870:	61fb      	str	r3, [r7, #28]
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	695b      	ldr	r3, [r3, #20]
 8002878:	61fb      	str	r3, [r7, #28]
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	699b      	ldr	r3, [r3, #24]
 8002880:	61fb      	str	r3, [r7, #28]
 8002882:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	681a      	ldr	r2, [r3, #0]
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002892:	601a      	str	r2, [r3, #0]
 8002894:	e170      	b.n	8002b78 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800289a:	2b02      	cmp	r3, #2
 800289c:	d11b      	bne.n	80028d6 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	681a      	ldr	r2, [r3, #0]
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80028ac:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	681a      	ldr	r2, [r3, #0]
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80028bc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80028be:	2300      	movs	r3, #0
 80028c0:	61bb      	str	r3, [r7, #24]
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	695b      	ldr	r3, [r3, #20]
 80028c8:	61bb      	str	r3, [r7, #24]
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	699b      	ldr	r3, [r3, #24]
 80028d0:	61bb      	str	r3, [r7, #24]
 80028d2:	69bb      	ldr	r3, [r7, #24]
 80028d4:	e150      	b.n	8002b78 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80028d6:	2300      	movs	r3, #0
 80028d8:	617b      	str	r3, [r7, #20]
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	695b      	ldr	r3, [r3, #20]
 80028e0:	617b      	str	r3, [r7, #20]
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	699b      	ldr	r3, [r3, #24]
 80028e8:	617b      	str	r3, [r7, #20]
 80028ea:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80028ec:	e144      	b.n	8002b78 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028f2:	2b03      	cmp	r3, #3
 80028f4:	f200 80f1 	bhi.w	8002ada <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028fc:	2b01      	cmp	r3, #1
 80028fe:	d123      	bne.n	8002948 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002900:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002902:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002904:	68f8      	ldr	r0, [r7, #12]
 8002906:	f000 fc79 	bl	80031fc <I2C_WaitOnRXNEFlagUntilTimeout>
 800290a:	4603      	mov	r3, r0
 800290c:	2b00      	cmp	r3, #0
 800290e:	d001      	beq.n	8002914 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002910:	2301      	movs	r3, #1
 8002912:	e145      	b.n	8002ba0 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	691a      	ldr	r2, [r3, #16]
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800291e:	b2d2      	uxtb	r2, r2
 8002920:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002926:	1c5a      	adds	r2, r3, #1
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002930:	3b01      	subs	r3, #1
 8002932:	b29a      	uxth	r2, r3
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800293c:	b29b      	uxth	r3, r3
 800293e:	3b01      	subs	r3, #1
 8002940:	b29a      	uxth	r2, r3
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002946:	e117      	b.n	8002b78 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800294c:	2b02      	cmp	r3, #2
 800294e:	d14e      	bne.n	80029ee <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002950:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002952:	9300      	str	r3, [sp, #0]
 8002954:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002956:	2200      	movs	r2, #0
 8002958:	4906      	ldr	r1, [pc, #24]	@ (8002974 <HAL_I2C_Mem_Read+0x22c>)
 800295a:	68f8      	ldr	r0, [r7, #12]
 800295c:	f000 faa4 	bl	8002ea8 <I2C_WaitOnFlagUntilTimeout>
 8002960:	4603      	mov	r3, r0
 8002962:	2b00      	cmp	r3, #0
 8002964:	d008      	beq.n	8002978 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002966:	2301      	movs	r3, #1
 8002968:	e11a      	b.n	8002ba0 <HAL_I2C_Mem_Read+0x458>
 800296a:	bf00      	nop
 800296c:	00100002 	.word	0x00100002
 8002970:	ffff0000 	.word	0xffff0000
 8002974:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	681a      	ldr	r2, [r3, #0]
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002986:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	691a      	ldr	r2, [r3, #16]
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002992:	b2d2      	uxtb	r2, r2
 8002994:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800299a:	1c5a      	adds	r2, r3, #1
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029a4:	3b01      	subs	r3, #1
 80029a6:	b29a      	uxth	r2, r3
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029b0:	b29b      	uxth	r3, r3
 80029b2:	3b01      	subs	r3, #1
 80029b4:	b29a      	uxth	r2, r3
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	691a      	ldr	r2, [r3, #16]
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029c4:	b2d2      	uxtb	r2, r2
 80029c6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029cc:	1c5a      	adds	r2, r3, #1
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029d6:	3b01      	subs	r3, #1
 80029d8:	b29a      	uxth	r2, r3
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029e2:	b29b      	uxth	r3, r3
 80029e4:	3b01      	subs	r3, #1
 80029e6:	b29a      	uxth	r2, r3
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80029ec:	e0c4      	b.n	8002b78 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80029ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029f0:	9300      	str	r3, [sp, #0]
 80029f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80029f4:	2200      	movs	r2, #0
 80029f6:	496c      	ldr	r1, [pc, #432]	@ (8002ba8 <HAL_I2C_Mem_Read+0x460>)
 80029f8:	68f8      	ldr	r0, [r7, #12]
 80029fa:	f000 fa55 	bl	8002ea8 <I2C_WaitOnFlagUntilTimeout>
 80029fe:	4603      	mov	r3, r0
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d001      	beq.n	8002a08 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002a04:	2301      	movs	r3, #1
 8002a06:	e0cb      	b.n	8002ba0 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	681a      	ldr	r2, [r3, #0]
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002a16:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	691a      	ldr	r2, [r3, #16]
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a22:	b2d2      	uxtb	r2, r2
 8002a24:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a2a:	1c5a      	adds	r2, r3, #1
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a34:	3b01      	subs	r3, #1
 8002a36:	b29a      	uxth	r2, r3
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a40:	b29b      	uxth	r3, r3
 8002a42:	3b01      	subs	r3, #1
 8002a44:	b29a      	uxth	r2, r3
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002a4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a4c:	9300      	str	r3, [sp, #0]
 8002a4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a50:	2200      	movs	r2, #0
 8002a52:	4955      	ldr	r1, [pc, #340]	@ (8002ba8 <HAL_I2C_Mem_Read+0x460>)
 8002a54:	68f8      	ldr	r0, [r7, #12]
 8002a56:	f000 fa27 	bl	8002ea8 <I2C_WaitOnFlagUntilTimeout>
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d001      	beq.n	8002a64 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002a60:	2301      	movs	r3, #1
 8002a62:	e09d      	b.n	8002ba0 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	681a      	ldr	r2, [r3, #0]
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002a72:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	691a      	ldr	r2, [r3, #16]
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a7e:	b2d2      	uxtb	r2, r2
 8002a80:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a86:	1c5a      	adds	r2, r3, #1
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a90:	3b01      	subs	r3, #1
 8002a92:	b29a      	uxth	r2, r3
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a9c:	b29b      	uxth	r3, r3
 8002a9e:	3b01      	subs	r3, #1
 8002aa0:	b29a      	uxth	r2, r3
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	691a      	ldr	r2, [r3, #16]
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ab0:	b2d2      	uxtb	r2, r2
 8002ab2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ab8:	1c5a      	adds	r2, r3, #1
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ac2:	3b01      	subs	r3, #1
 8002ac4:	b29a      	uxth	r2, r3
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ace:	b29b      	uxth	r3, r3
 8002ad0:	3b01      	subs	r3, #1
 8002ad2:	b29a      	uxth	r2, r3
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002ad8:	e04e      	b.n	8002b78 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ada:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002adc:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002ade:	68f8      	ldr	r0, [r7, #12]
 8002ae0:	f000 fb8c 	bl	80031fc <I2C_WaitOnRXNEFlagUntilTimeout>
 8002ae4:	4603      	mov	r3, r0
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d001      	beq.n	8002aee <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8002aea:	2301      	movs	r3, #1
 8002aec:	e058      	b.n	8002ba0 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	691a      	ldr	r2, [r3, #16]
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002af8:	b2d2      	uxtb	r2, r2
 8002afa:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b00:	1c5a      	adds	r2, r3, #1
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b0a:	3b01      	subs	r3, #1
 8002b0c:	b29a      	uxth	r2, r3
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b16:	b29b      	uxth	r3, r3
 8002b18:	3b01      	subs	r3, #1
 8002b1a:	b29a      	uxth	r2, r3
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	695b      	ldr	r3, [r3, #20]
 8002b26:	f003 0304 	and.w	r3, r3, #4
 8002b2a:	2b04      	cmp	r3, #4
 8002b2c:	d124      	bne.n	8002b78 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b32:	2b03      	cmp	r3, #3
 8002b34:	d107      	bne.n	8002b46 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	681a      	ldr	r2, [r3, #0]
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002b44:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	691a      	ldr	r2, [r3, #16]
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b50:	b2d2      	uxtb	r2, r2
 8002b52:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b58:	1c5a      	adds	r2, r3, #1
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b62:	3b01      	subs	r3, #1
 8002b64:	b29a      	uxth	r2, r3
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b6e:	b29b      	uxth	r3, r3
 8002b70:	3b01      	subs	r3, #1
 8002b72:	b29a      	uxth	r2, r3
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	f47f aeb6 	bne.w	80028ee <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	2220      	movs	r2, #32
 8002b86:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	2200      	movs	r2, #0
 8002b96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	e000      	b.n	8002ba0 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8002b9e:	2302      	movs	r3, #2
  }
}
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	3728      	adds	r7, #40	@ 0x28
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	bd80      	pop	{r7, pc}
 8002ba8:	00010004 	.word	0x00010004

08002bac <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b088      	sub	sp, #32
 8002bb0:	af02      	add	r7, sp, #8
 8002bb2:	60f8      	str	r0, [r7, #12]
 8002bb4:	4608      	mov	r0, r1
 8002bb6:	4611      	mov	r1, r2
 8002bb8:	461a      	mov	r2, r3
 8002bba:	4603      	mov	r3, r0
 8002bbc:	817b      	strh	r3, [r7, #10]
 8002bbe:	460b      	mov	r3, r1
 8002bc0:	813b      	strh	r3, [r7, #8]
 8002bc2:	4613      	mov	r3, r2
 8002bc4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	681a      	ldr	r2, [r3, #0]
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002bd4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002bd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bd8:	9300      	str	r3, [sp, #0]
 8002bda:	6a3b      	ldr	r3, [r7, #32]
 8002bdc:	2200      	movs	r2, #0
 8002bde:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002be2:	68f8      	ldr	r0, [r7, #12]
 8002be4:	f000 f960 	bl	8002ea8 <I2C_WaitOnFlagUntilTimeout>
 8002be8:	4603      	mov	r3, r0
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d00d      	beq.n	8002c0a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bf8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002bfc:	d103      	bne.n	8002c06 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002c04:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002c06:	2303      	movs	r3, #3
 8002c08:	e05f      	b.n	8002cca <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002c0a:	897b      	ldrh	r3, [r7, #10]
 8002c0c:	b2db      	uxtb	r3, r3
 8002c0e:	461a      	mov	r2, r3
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002c18:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002c1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c1c:	6a3a      	ldr	r2, [r7, #32]
 8002c1e:	492d      	ldr	r1, [pc, #180]	@ (8002cd4 <I2C_RequestMemoryWrite+0x128>)
 8002c20:	68f8      	ldr	r0, [r7, #12]
 8002c22:	f000 f9bb 	bl	8002f9c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002c26:	4603      	mov	r3, r0
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d001      	beq.n	8002c30 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	e04c      	b.n	8002cca <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c30:	2300      	movs	r3, #0
 8002c32:	617b      	str	r3, [r7, #20]
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	695b      	ldr	r3, [r3, #20]
 8002c3a:	617b      	str	r3, [r7, #20]
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	699b      	ldr	r3, [r3, #24]
 8002c42:	617b      	str	r3, [r7, #20]
 8002c44:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c46:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c48:	6a39      	ldr	r1, [r7, #32]
 8002c4a:	68f8      	ldr	r0, [r7, #12]
 8002c4c:	f000 fa46 	bl	80030dc <I2C_WaitOnTXEFlagUntilTimeout>
 8002c50:	4603      	mov	r3, r0
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d00d      	beq.n	8002c72 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c5a:	2b04      	cmp	r3, #4
 8002c5c:	d107      	bne.n	8002c6e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	681a      	ldr	r2, [r3, #0]
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c6c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002c6e:	2301      	movs	r3, #1
 8002c70:	e02b      	b.n	8002cca <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002c72:	88fb      	ldrh	r3, [r7, #6]
 8002c74:	2b01      	cmp	r3, #1
 8002c76:	d105      	bne.n	8002c84 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002c78:	893b      	ldrh	r3, [r7, #8]
 8002c7a:	b2da      	uxtb	r2, r3
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	611a      	str	r2, [r3, #16]
 8002c82:	e021      	b.n	8002cc8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002c84:	893b      	ldrh	r3, [r7, #8]
 8002c86:	0a1b      	lsrs	r3, r3, #8
 8002c88:	b29b      	uxth	r3, r3
 8002c8a:	b2da      	uxtb	r2, r3
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c92:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c94:	6a39      	ldr	r1, [r7, #32]
 8002c96:	68f8      	ldr	r0, [r7, #12]
 8002c98:	f000 fa20 	bl	80030dc <I2C_WaitOnTXEFlagUntilTimeout>
 8002c9c:	4603      	mov	r3, r0
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d00d      	beq.n	8002cbe <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ca6:	2b04      	cmp	r3, #4
 8002ca8:	d107      	bne.n	8002cba <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	681a      	ldr	r2, [r3, #0]
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002cb8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002cba:	2301      	movs	r3, #1
 8002cbc:	e005      	b.n	8002cca <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002cbe:	893b      	ldrh	r3, [r7, #8]
 8002cc0:	b2da      	uxtb	r2, r3
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002cc8:	2300      	movs	r3, #0
}
 8002cca:	4618      	mov	r0, r3
 8002ccc:	3718      	adds	r7, #24
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bd80      	pop	{r7, pc}
 8002cd2:	bf00      	nop
 8002cd4:	00010002 	.word	0x00010002

08002cd8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b088      	sub	sp, #32
 8002cdc:	af02      	add	r7, sp, #8
 8002cde:	60f8      	str	r0, [r7, #12]
 8002ce0:	4608      	mov	r0, r1
 8002ce2:	4611      	mov	r1, r2
 8002ce4:	461a      	mov	r2, r3
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	817b      	strh	r3, [r7, #10]
 8002cea:	460b      	mov	r3, r1
 8002cec:	813b      	strh	r3, [r7, #8]
 8002cee:	4613      	mov	r3, r2
 8002cf0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	681a      	ldr	r2, [r3, #0]
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002d00:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	681a      	ldr	r2, [r3, #0]
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002d10:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002d12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d14:	9300      	str	r3, [sp, #0]
 8002d16:	6a3b      	ldr	r3, [r7, #32]
 8002d18:	2200      	movs	r2, #0
 8002d1a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002d1e:	68f8      	ldr	r0, [r7, #12]
 8002d20:	f000 f8c2 	bl	8002ea8 <I2C_WaitOnFlagUntilTimeout>
 8002d24:	4603      	mov	r3, r0
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d00d      	beq.n	8002d46 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d34:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002d38:	d103      	bne.n	8002d42 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002d40:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002d42:	2303      	movs	r3, #3
 8002d44:	e0aa      	b.n	8002e9c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002d46:	897b      	ldrh	r3, [r7, #10]
 8002d48:	b2db      	uxtb	r3, r3
 8002d4a:	461a      	mov	r2, r3
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002d54:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002d56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d58:	6a3a      	ldr	r2, [r7, #32]
 8002d5a:	4952      	ldr	r1, [pc, #328]	@ (8002ea4 <I2C_RequestMemoryRead+0x1cc>)
 8002d5c:	68f8      	ldr	r0, [r7, #12]
 8002d5e:	f000 f91d 	bl	8002f9c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002d62:	4603      	mov	r3, r0
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d001      	beq.n	8002d6c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002d68:	2301      	movs	r3, #1
 8002d6a:	e097      	b.n	8002e9c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	617b      	str	r3, [r7, #20]
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	695b      	ldr	r3, [r3, #20]
 8002d76:	617b      	str	r3, [r7, #20]
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	699b      	ldr	r3, [r3, #24]
 8002d7e:	617b      	str	r3, [r7, #20]
 8002d80:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d82:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d84:	6a39      	ldr	r1, [r7, #32]
 8002d86:	68f8      	ldr	r0, [r7, #12]
 8002d88:	f000 f9a8 	bl	80030dc <I2C_WaitOnTXEFlagUntilTimeout>
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d00d      	beq.n	8002dae <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d96:	2b04      	cmp	r3, #4
 8002d98:	d107      	bne.n	8002daa <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	681a      	ldr	r2, [r3, #0]
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002da8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002daa:	2301      	movs	r3, #1
 8002dac:	e076      	b.n	8002e9c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002dae:	88fb      	ldrh	r3, [r7, #6]
 8002db0:	2b01      	cmp	r3, #1
 8002db2:	d105      	bne.n	8002dc0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002db4:	893b      	ldrh	r3, [r7, #8]
 8002db6:	b2da      	uxtb	r2, r3
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	611a      	str	r2, [r3, #16]
 8002dbe:	e021      	b.n	8002e04 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002dc0:	893b      	ldrh	r3, [r7, #8]
 8002dc2:	0a1b      	lsrs	r3, r3, #8
 8002dc4:	b29b      	uxth	r3, r3
 8002dc6:	b2da      	uxtb	r2, r3
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002dce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002dd0:	6a39      	ldr	r1, [r7, #32]
 8002dd2:	68f8      	ldr	r0, [r7, #12]
 8002dd4:	f000 f982 	bl	80030dc <I2C_WaitOnTXEFlagUntilTimeout>
 8002dd8:	4603      	mov	r3, r0
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d00d      	beq.n	8002dfa <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002de2:	2b04      	cmp	r3, #4
 8002de4:	d107      	bne.n	8002df6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	681a      	ldr	r2, [r3, #0]
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002df4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002df6:	2301      	movs	r3, #1
 8002df8:	e050      	b.n	8002e9c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002dfa:	893b      	ldrh	r3, [r7, #8]
 8002dfc:	b2da      	uxtb	r2, r3
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e04:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e06:	6a39      	ldr	r1, [r7, #32]
 8002e08:	68f8      	ldr	r0, [r7, #12]
 8002e0a:	f000 f967 	bl	80030dc <I2C_WaitOnTXEFlagUntilTimeout>
 8002e0e:	4603      	mov	r3, r0
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d00d      	beq.n	8002e30 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e18:	2b04      	cmp	r3, #4
 8002e1a:	d107      	bne.n	8002e2c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	681a      	ldr	r2, [r3, #0]
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e2a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002e2c:	2301      	movs	r3, #1
 8002e2e:	e035      	b.n	8002e9c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	681a      	ldr	r2, [r3, #0]
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002e3e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002e40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e42:	9300      	str	r3, [sp, #0]
 8002e44:	6a3b      	ldr	r3, [r7, #32]
 8002e46:	2200      	movs	r2, #0
 8002e48:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002e4c:	68f8      	ldr	r0, [r7, #12]
 8002e4e:	f000 f82b 	bl	8002ea8 <I2C_WaitOnFlagUntilTimeout>
 8002e52:	4603      	mov	r3, r0
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d00d      	beq.n	8002e74 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e62:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002e66:	d103      	bne.n	8002e70 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002e6e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002e70:	2303      	movs	r3, #3
 8002e72:	e013      	b.n	8002e9c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002e74:	897b      	ldrh	r3, [r7, #10]
 8002e76:	b2db      	uxtb	r3, r3
 8002e78:	f043 0301 	orr.w	r3, r3, #1
 8002e7c:	b2da      	uxtb	r2, r3
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002e84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e86:	6a3a      	ldr	r2, [r7, #32]
 8002e88:	4906      	ldr	r1, [pc, #24]	@ (8002ea4 <I2C_RequestMemoryRead+0x1cc>)
 8002e8a:	68f8      	ldr	r0, [r7, #12]
 8002e8c:	f000 f886 	bl	8002f9c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002e90:	4603      	mov	r3, r0
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d001      	beq.n	8002e9a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002e96:	2301      	movs	r3, #1
 8002e98:	e000      	b.n	8002e9c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002e9a:	2300      	movs	r3, #0
}
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	3718      	adds	r7, #24
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	bd80      	pop	{r7, pc}
 8002ea4:	00010002 	.word	0x00010002

08002ea8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b084      	sub	sp, #16
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	60f8      	str	r0, [r7, #12]
 8002eb0:	60b9      	str	r1, [r7, #8]
 8002eb2:	603b      	str	r3, [r7, #0]
 8002eb4:	4613      	mov	r3, r2
 8002eb6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002eb8:	e048      	b.n	8002f4c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ec0:	d044      	beq.n	8002f4c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ec2:	f7fe fefd 	bl	8001cc0 <HAL_GetTick>
 8002ec6:	4602      	mov	r2, r0
 8002ec8:	69bb      	ldr	r3, [r7, #24]
 8002eca:	1ad3      	subs	r3, r2, r3
 8002ecc:	683a      	ldr	r2, [r7, #0]
 8002ece:	429a      	cmp	r2, r3
 8002ed0:	d302      	bcc.n	8002ed8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d139      	bne.n	8002f4c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002ed8:	68bb      	ldr	r3, [r7, #8]
 8002eda:	0c1b      	lsrs	r3, r3, #16
 8002edc:	b2db      	uxtb	r3, r3
 8002ede:	2b01      	cmp	r3, #1
 8002ee0:	d10d      	bne.n	8002efe <I2C_WaitOnFlagUntilTimeout+0x56>
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	695b      	ldr	r3, [r3, #20]
 8002ee8:	43da      	mvns	r2, r3
 8002eea:	68bb      	ldr	r3, [r7, #8]
 8002eec:	4013      	ands	r3, r2
 8002eee:	b29b      	uxth	r3, r3
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	bf0c      	ite	eq
 8002ef4:	2301      	moveq	r3, #1
 8002ef6:	2300      	movne	r3, #0
 8002ef8:	b2db      	uxtb	r3, r3
 8002efa:	461a      	mov	r2, r3
 8002efc:	e00c      	b.n	8002f18 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	699b      	ldr	r3, [r3, #24]
 8002f04:	43da      	mvns	r2, r3
 8002f06:	68bb      	ldr	r3, [r7, #8]
 8002f08:	4013      	ands	r3, r2
 8002f0a:	b29b      	uxth	r3, r3
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	bf0c      	ite	eq
 8002f10:	2301      	moveq	r3, #1
 8002f12:	2300      	movne	r3, #0
 8002f14:	b2db      	uxtb	r3, r3
 8002f16:	461a      	mov	r2, r3
 8002f18:	79fb      	ldrb	r3, [r7, #7]
 8002f1a:	429a      	cmp	r2, r3
 8002f1c:	d116      	bne.n	8002f4c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	2200      	movs	r2, #0
 8002f22:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	2220      	movs	r2, #32
 8002f28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	2200      	movs	r2, #0
 8002f30:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f38:	f043 0220 	orr.w	r2, r3, #32
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	2200      	movs	r2, #0
 8002f44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002f48:	2301      	movs	r3, #1
 8002f4a:	e023      	b.n	8002f94 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f4c:	68bb      	ldr	r3, [r7, #8]
 8002f4e:	0c1b      	lsrs	r3, r3, #16
 8002f50:	b2db      	uxtb	r3, r3
 8002f52:	2b01      	cmp	r3, #1
 8002f54:	d10d      	bne.n	8002f72 <I2C_WaitOnFlagUntilTimeout+0xca>
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	695b      	ldr	r3, [r3, #20]
 8002f5c:	43da      	mvns	r2, r3
 8002f5e:	68bb      	ldr	r3, [r7, #8]
 8002f60:	4013      	ands	r3, r2
 8002f62:	b29b      	uxth	r3, r3
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	bf0c      	ite	eq
 8002f68:	2301      	moveq	r3, #1
 8002f6a:	2300      	movne	r3, #0
 8002f6c:	b2db      	uxtb	r3, r3
 8002f6e:	461a      	mov	r2, r3
 8002f70:	e00c      	b.n	8002f8c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	699b      	ldr	r3, [r3, #24]
 8002f78:	43da      	mvns	r2, r3
 8002f7a:	68bb      	ldr	r3, [r7, #8]
 8002f7c:	4013      	ands	r3, r2
 8002f7e:	b29b      	uxth	r3, r3
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	bf0c      	ite	eq
 8002f84:	2301      	moveq	r3, #1
 8002f86:	2300      	movne	r3, #0
 8002f88:	b2db      	uxtb	r3, r3
 8002f8a:	461a      	mov	r2, r3
 8002f8c:	79fb      	ldrb	r3, [r7, #7]
 8002f8e:	429a      	cmp	r2, r3
 8002f90:	d093      	beq.n	8002eba <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002f92:	2300      	movs	r3, #0
}
 8002f94:	4618      	mov	r0, r3
 8002f96:	3710      	adds	r7, #16
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	bd80      	pop	{r7, pc}

08002f9c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b084      	sub	sp, #16
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	60f8      	str	r0, [r7, #12]
 8002fa4:	60b9      	str	r1, [r7, #8]
 8002fa6:	607a      	str	r2, [r7, #4]
 8002fa8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002faa:	e071      	b.n	8003090 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	695b      	ldr	r3, [r3, #20]
 8002fb2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002fb6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002fba:	d123      	bne.n	8003004 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	681a      	ldr	r2, [r3, #0]
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002fca:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002fd4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	2200      	movs	r2, #0
 8002fda:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	2220      	movs	r2, #32
 8002fe0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ff0:	f043 0204 	orr.w	r2, r3, #4
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003000:	2301      	movs	r3, #1
 8003002:	e067      	b.n	80030d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	f1b3 3fff 	cmp.w	r3, #4294967295
 800300a:	d041      	beq.n	8003090 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800300c:	f7fe fe58 	bl	8001cc0 <HAL_GetTick>
 8003010:	4602      	mov	r2, r0
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	1ad3      	subs	r3, r2, r3
 8003016:	687a      	ldr	r2, [r7, #4]
 8003018:	429a      	cmp	r2, r3
 800301a:	d302      	bcc.n	8003022 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2b00      	cmp	r3, #0
 8003020:	d136      	bne.n	8003090 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003022:	68bb      	ldr	r3, [r7, #8]
 8003024:	0c1b      	lsrs	r3, r3, #16
 8003026:	b2db      	uxtb	r3, r3
 8003028:	2b01      	cmp	r3, #1
 800302a:	d10c      	bne.n	8003046 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	695b      	ldr	r3, [r3, #20]
 8003032:	43da      	mvns	r2, r3
 8003034:	68bb      	ldr	r3, [r7, #8]
 8003036:	4013      	ands	r3, r2
 8003038:	b29b      	uxth	r3, r3
 800303a:	2b00      	cmp	r3, #0
 800303c:	bf14      	ite	ne
 800303e:	2301      	movne	r3, #1
 8003040:	2300      	moveq	r3, #0
 8003042:	b2db      	uxtb	r3, r3
 8003044:	e00b      	b.n	800305e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	699b      	ldr	r3, [r3, #24]
 800304c:	43da      	mvns	r2, r3
 800304e:	68bb      	ldr	r3, [r7, #8]
 8003050:	4013      	ands	r3, r2
 8003052:	b29b      	uxth	r3, r3
 8003054:	2b00      	cmp	r3, #0
 8003056:	bf14      	ite	ne
 8003058:	2301      	movne	r3, #1
 800305a:	2300      	moveq	r3, #0
 800305c:	b2db      	uxtb	r3, r3
 800305e:	2b00      	cmp	r3, #0
 8003060:	d016      	beq.n	8003090 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	2200      	movs	r2, #0
 8003066:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	2220      	movs	r2, #32
 800306c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	2200      	movs	r2, #0
 8003074:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800307c:	f043 0220 	orr.w	r2, r3, #32
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	2200      	movs	r2, #0
 8003088:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800308c:	2301      	movs	r3, #1
 800308e:	e021      	b.n	80030d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003090:	68bb      	ldr	r3, [r7, #8]
 8003092:	0c1b      	lsrs	r3, r3, #16
 8003094:	b2db      	uxtb	r3, r3
 8003096:	2b01      	cmp	r3, #1
 8003098:	d10c      	bne.n	80030b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	695b      	ldr	r3, [r3, #20]
 80030a0:	43da      	mvns	r2, r3
 80030a2:	68bb      	ldr	r3, [r7, #8]
 80030a4:	4013      	ands	r3, r2
 80030a6:	b29b      	uxth	r3, r3
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	bf14      	ite	ne
 80030ac:	2301      	movne	r3, #1
 80030ae:	2300      	moveq	r3, #0
 80030b0:	b2db      	uxtb	r3, r3
 80030b2:	e00b      	b.n	80030cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	699b      	ldr	r3, [r3, #24]
 80030ba:	43da      	mvns	r2, r3
 80030bc:	68bb      	ldr	r3, [r7, #8]
 80030be:	4013      	ands	r3, r2
 80030c0:	b29b      	uxth	r3, r3
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	bf14      	ite	ne
 80030c6:	2301      	movne	r3, #1
 80030c8:	2300      	moveq	r3, #0
 80030ca:	b2db      	uxtb	r3, r3
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	f47f af6d 	bne.w	8002fac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80030d2:	2300      	movs	r3, #0
}
 80030d4:	4618      	mov	r0, r3
 80030d6:	3710      	adds	r7, #16
 80030d8:	46bd      	mov	sp, r7
 80030da:	bd80      	pop	{r7, pc}

080030dc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	b084      	sub	sp, #16
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	60f8      	str	r0, [r7, #12]
 80030e4:	60b9      	str	r1, [r7, #8]
 80030e6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80030e8:	e034      	b.n	8003154 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80030ea:	68f8      	ldr	r0, [r7, #12]
 80030ec:	f000 f8e3 	bl	80032b6 <I2C_IsAcknowledgeFailed>
 80030f0:	4603      	mov	r3, r0
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d001      	beq.n	80030fa <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80030f6:	2301      	movs	r3, #1
 80030f8:	e034      	b.n	8003164 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030fa:	68bb      	ldr	r3, [r7, #8]
 80030fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003100:	d028      	beq.n	8003154 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003102:	f7fe fddd 	bl	8001cc0 <HAL_GetTick>
 8003106:	4602      	mov	r2, r0
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	1ad3      	subs	r3, r2, r3
 800310c:	68ba      	ldr	r2, [r7, #8]
 800310e:	429a      	cmp	r2, r3
 8003110:	d302      	bcc.n	8003118 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003112:	68bb      	ldr	r3, [r7, #8]
 8003114:	2b00      	cmp	r3, #0
 8003116:	d11d      	bne.n	8003154 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	695b      	ldr	r3, [r3, #20]
 800311e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003122:	2b80      	cmp	r3, #128	@ 0x80
 8003124:	d016      	beq.n	8003154 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	2200      	movs	r2, #0
 800312a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	2220      	movs	r2, #32
 8003130:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	2200      	movs	r2, #0
 8003138:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003140:	f043 0220 	orr.w	r2, r3, #32
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	2200      	movs	r2, #0
 800314c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003150:	2301      	movs	r3, #1
 8003152:	e007      	b.n	8003164 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	695b      	ldr	r3, [r3, #20]
 800315a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800315e:	2b80      	cmp	r3, #128	@ 0x80
 8003160:	d1c3      	bne.n	80030ea <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003162:	2300      	movs	r3, #0
}
 8003164:	4618      	mov	r0, r3
 8003166:	3710      	adds	r7, #16
 8003168:	46bd      	mov	sp, r7
 800316a:	bd80      	pop	{r7, pc}

0800316c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b084      	sub	sp, #16
 8003170:	af00      	add	r7, sp, #0
 8003172:	60f8      	str	r0, [r7, #12]
 8003174:	60b9      	str	r1, [r7, #8]
 8003176:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003178:	e034      	b.n	80031e4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800317a:	68f8      	ldr	r0, [r7, #12]
 800317c:	f000 f89b 	bl	80032b6 <I2C_IsAcknowledgeFailed>
 8003180:	4603      	mov	r3, r0
 8003182:	2b00      	cmp	r3, #0
 8003184:	d001      	beq.n	800318a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003186:	2301      	movs	r3, #1
 8003188:	e034      	b.n	80031f4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800318a:	68bb      	ldr	r3, [r7, #8]
 800318c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003190:	d028      	beq.n	80031e4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003192:	f7fe fd95 	bl	8001cc0 <HAL_GetTick>
 8003196:	4602      	mov	r2, r0
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	1ad3      	subs	r3, r2, r3
 800319c:	68ba      	ldr	r2, [r7, #8]
 800319e:	429a      	cmp	r2, r3
 80031a0:	d302      	bcc.n	80031a8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80031a2:	68bb      	ldr	r3, [r7, #8]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d11d      	bne.n	80031e4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	695b      	ldr	r3, [r3, #20]
 80031ae:	f003 0304 	and.w	r3, r3, #4
 80031b2:	2b04      	cmp	r3, #4
 80031b4:	d016      	beq.n	80031e4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	2200      	movs	r2, #0
 80031ba:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	2220      	movs	r2, #32
 80031c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	2200      	movs	r2, #0
 80031c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031d0:	f043 0220 	orr.w	r2, r3, #32
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	2200      	movs	r2, #0
 80031dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80031e0:	2301      	movs	r3, #1
 80031e2:	e007      	b.n	80031f4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	695b      	ldr	r3, [r3, #20]
 80031ea:	f003 0304 	and.w	r3, r3, #4
 80031ee:	2b04      	cmp	r3, #4
 80031f0:	d1c3      	bne.n	800317a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80031f2:	2300      	movs	r3, #0
}
 80031f4:	4618      	mov	r0, r3
 80031f6:	3710      	adds	r7, #16
 80031f8:	46bd      	mov	sp, r7
 80031fa:	bd80      	pop	{r7, pc}

080031fc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b084      	sub	sp, #16
 8003200:	af00      	add	r7, sp, #0
 8003202:	60f8      	str	r0, [r7, #12]
 8003204:	60b9      	str	r1, [r7, #8]
 8003206:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003208:	e049      	b.n	800329e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	695b      	ldr	r3, [r3, #20]
 8003210:	f003 0310 	and.w	r3, r3, #16
 8003214:	2b10      	cmp	r3, #16
 8003216:	d119      	bne.n	800324c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f06f 0210 	mvn.w	r2, #16
 8003220:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	2200      	movs	r2, #0
 8003226:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	2220      	movs	r2, #32
 800322c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	2200      	movs	r2, #0
 8003234:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	2200      	movs	r2, #0
 8003244:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003248:	2301      	movs	r3, #1
 800324a:	e030      	b.n	80032ae <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800324c:	f7fe fd38 	bl	8001cc0 <HAL_GetTick>
 8003250:	4602      	mov	r2, r0
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	1ad3      	subs	r3, r2, r3
 8003256:	68ba      	ldr	r2, [r7, #8]
 8003258:	429a      	cmp	r2, r3
 800325a:	d302      	bcc.n	8003262 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800325c:	68bb      	ldr	r3, [r7, #8]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d11d      	bne.n	800329e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	695b      	ldr	r3, [r3, #20]
 8003268:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800326c:	2b40      	cmp	r3, #64	@ 0x40
 800326e:	d016      	beq.n	800329e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	2200      	movs	r2, #0
 8003274:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	2220      	movs	r2, #32
 800327a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	2200      	movs	r2, #0
 8003282:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800328a:	f043 0220 	orr.w	r2, r3, #32
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	2200      	movs	r2, #0
 8003296:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800329a:	2301      	movs	r3, #1
 800329c:	e007      	b.n	80032ae <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	695b      	ldr	r3, [r3, #20]
 80032a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032a8:	2b40      	cmp	r3, #64	@ 0x40
 80032aa:	d1ae      	bne.n	800320a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80032ac:	2300      	movs	r3, #0
}
 80032ae:	4618      	mov	r0, r3
 80032b0:	3710      	adds	r7, #16
 80032b2:	46bd      	mov	sp, r7
 80032b4:	bd80      	pop	{r7, pc}

080032b6 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80032b6:	b480      	push	{r7}
 80032b8:	b083      	sub	sp, #12
 80032ba:	af00      	add	r7, sp, #0
 80032bc:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	695b      	ldr	r3, [r3, #20]
 80032c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80032c8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80032cc:	d11b      	bne.n	8003306 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80032d6:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2200      	movs	r2, #0
 80032dc:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2220      	movs	r2, #32
 80032e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2200      	movs	r2, #0
 80032ea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032f2:	f043 0204 	orr.w	r2, r3, #4
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	2200      	movs	r2, #0
 80032fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003302:	2301      	movs	r3, #1
 8003304:	e000      	b.n	8003308 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003306:	2300      	movs	r3, #0
}
 8003308:	4618      	mov	r0, r3
 800330a:	370c      	adds	r7, #12
 800330c:	46bd      	mov	sp, r7
 800330e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003312:	4770      	bx	lr

08003314 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003314:	b480      	push	{r7}
 8003316:	b083      	sub	sp, #12
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
 800331c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003324:	b2db      	uxtb	r3, r3
 8003326:	2b20      	cmp	r3, #32
 8003328:	d129      	bne.n	800337e <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2224      	movs	r2, #36	@ 0x24
 800332e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	681a      	ldr	r2, [r3, #0]
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f022 0201 	bic.w	r2, r2, #1
 8003340:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f022 0210 	bic.w	r2, r2, #16
 8003350:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	683a      	ldr	r2, [r7, #0]
 800335e:	430a      	orrs	r2, r1
 8003360:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	681a      	ldr	r2, [r3, #0]
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f042 0201 	orr.w	r2, r2, #1
 8003370:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	2220      	movs	r2, #32
 8003376:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 800337a:	2300      	movs	r3, #0
 800337c:	e000      	b.n	8003380 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 800337e:	2302      	movs	r3, #2
  }
}
 8003380:	4618      	mov	r0, r3
 8003382:	370c      	adds	r7, #12
 8003384:	46bd      	mov	sp, r7
 8003386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338a:	4770      	bx	lr

0800338c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800338c:	b480      	push	{r7}
 800338e:	b085      	sub	sp, #20
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
 8003394:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8003396:	2300      	movs	r3, #0
 8003398:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80033a0:	b2db      	uxtb	r3, r3
 80033a2:	2b20      	cmp	r3, #32
 80033a4:	d12a      	bne.n	80033fc <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2224      	movs	r2, #36	@ 0x24
 80033aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	681a      	ldr	r2, [r3, #0]
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f022 0201 	bic.w	r2, r2, #1
 80033bc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033c4:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 80033c6:	89fb      	ldrh	r3, [r7, #14]
 80033c8:	f023 030f 	bic.w	r3, r3, #15
 80033cc:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	b29a      	uxth	r2, r3
 80033d2:	89fb      	ldrh	r3, [r7, #14]
 80033d4:	4313      	orrs	r3, r2
 80033d6:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	89fa      	ldrh	r2, [r7, #14]
 80033de:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	681a      	ldr	r2, [r3, #0]
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f042 0201 	orr.w	r2, r2, #1
 80033ee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2220      	movs	r2, #32
 80033f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 80033f8:	2300      	movs	r3, #0
 80033fa:	e000      	b.n	80033fe <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 80033fc:	2302      	movs	r3, #2
  }
}
 80033fe:	4618      	mov	r0, r3
 8003400:	3714      	adds	r7, #20
 8003402:	46bd      	mov	sp, r7
 8003404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003408:	4770      	bx	lr

0800340a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800340a:	b580      	push	{r7, lr}
 800340c:	b086      	sub	sp, #24
 800340e:	af02      	add	r7, sp, #8
 8003410:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2b00      	cmp	r3, #0
 8003416:	d101      	bne.n	800341c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003418:	2301      	movs	r3, #1
 800341a:	e101      	b.n	8003620 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8003428:	b2db      	uxtb	r3, r3
 800342a:	2b00      	cmp	r3, #0
 800342c:	d106      	bne.n	800343c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2200      	movs	r2, #0
 8003432:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003436:	6878      	ldr	r0, [r7, #4]
 8003438:	f005 f842 	bl	80084c0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2203      	movs	r2, #3
 8003440:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8003444:	68bb      	ldr	r3, [r7, #8]
 8003446:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800344a:	d102      	bne.n	8003452 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2200      	movs	r2, #0
 8003450:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	4618      	mov	r0, r3
 8003458:	f001 ff6d 	bl	8005336 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6818      	ldr	r0, [r3, #0]
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	7c1a      	ldrb	r2, [r3, #16]
 8003464:	f88d 2000 	strb.w	r2, [sp]
 8003468:	3304      	adds	r3, #4
 800346a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800346c:	f001 fe4c 	bl	8005108 <USB_CoreInit>
 8003470:	4603      	mov	r3, r0
 8003472:	2b00      	cmp	r3, #0
 8003474:	d005      	beq.n	8003482 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2202      	movs	r2, #2
 800347a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800347e:	2301      	movs	r3, #1
 8003480:	e0ce      	b.n	8003620 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	2100      	movs	r1, #0
 8003488:	4618      	mov	r0, r3
 800348a:	f001 ff65 	bl	8005358 <USB_SetCurrentMode>
 800348e:	4603      	mov	r3, r0
 8003490:	2b00      	cmp	r3, #0
 8003492:	d005      	beq.n	80034a0 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2202      	movs	r2, #2
 8003498:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800349c:	2301      	movs	r3, #1
 800349e:	e0bf      	b.n	8003620 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80034a0:	2300      	movs	r3, #0
 80034a2:	73fb      	strb	r3, [r7, #15]
 80034a4:	e04a      	b.n	800353c <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80034a6:	7bfa      	ldrb	r2, [r7, #15]
 80034a8:	6879      	ldr	r1, [r7, #4]
 80034aa:	4613      	mov	r3, r2
 80034ac:	00db      	lsls	r3, r3, #3
 80034ae:	4413      	add	r3, r2
 80034b0:	009b      	lsls	r3, r3, #2
 80034b2:	440b      	add	r3, r1
 80034b4:	3315      	adds	r3, #21
 80034b6:	2201      	movs	r2, #1
 80034b8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80034ba:	7bfa      	ldrb	r2, [r7, #15]
 80034bc:	6879      	ldr	r1, [r7, #4]
 80034be:	4613      	mov	r3, r2
 80034c0:	00db      	lsls	r3, r3, #3
 80034c2:	4413      	add	r3, r2
 80034c4:	009b      	lsls	r3, r3, #2
 80034c6:	440b      	add	r3, r1
 80034c8:	3314      	adds	r3, #20
 80034ca:	7bfa      	ldrb	r2, [r7, #15]
 80034cc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80034ce:	7bfa      	ldrb	r2, [r7, #15]
 80034d0:	7bfb      	ldrb	r3, [r7, #15]
 80034d2:	b298      	uxth	r0, r3
 80034d4:	6879      	ldr	r1, [r7, #4]
 80034d6:	4613      	mov	r3, r2
 80034d8:	00db      	lsls	r3, r3, #3
 80034da:	4413      	add	r3, r2
 80034dc:	009b      	lsls	r3, r3, #2
 80034de:	440b      	add	r3, r1
 80034e0:	332e      	adds	r3, #46	@ 0x2e
 80034e2:	4602      	mov	r2, r0
 80034e4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80034e6:	7bfa      	ldrb	r2, [r7, #15]
 80034e8:	6879      	ldr	r1, [r7, #4]
 80034ea:	4613      	mov	r3, r2
 80034ec:	00db      	lsls	r3, r3, #3
 80034ee:	4413      	add	r3, r2
 80034f0:	009b      	lsls	r3, r3, #2
 80034f2:	440b      	add	r3, r1
 80034f4:	3318      	adds	r3, #24
 80034f6:	2200      	movs	r2, #0
 80034f8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80034fa:	7bfa      	ldrb	r2, [r7, #15]
 80034fc:	6879      	ldr	r1, [r7, #4]
 80034fe:	4613      	mov	r3, r2
 8003500:	00db      	lsls	r3, r3, #3
 8003502:	4413      	add	r3, r2
 8003504:	009b      	lsls	r3, r3, #2
 8003506:	440b      	add	r3, r1
 8003508:	331c      	adds	r3, #28
 800350a:	2200      	movs	r2, #0
 800350c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800350e:	7bfa      	ldrb	r2, [r7, #15]
 8003510:	6879      	ldr	r1, [r7, #4]
 8003512:	4613      	mov	r3, r2
 8003514:	00db      	lsls	r3, r3, #3
 8003516:	4413      	add	r3, r2
 8003518:	009b      	lsls	r3, r3, #2
 800351a:	440b      	add	r3, r1
 800351c:	3320      	adds	r3, #32
 800351e:	2200      	movs	r2, #0
 8003520:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003522:	7bfa      	ldrb	r2, [r7, #15]
 8003524:	6879      	ldr	r1, [r7, #4]
 8003526:	4613      	mov	r3, r2
 8003528:	00db      	lsls	r3, r3, #3
 800352a:	4413      	add	r3, r2
 800352c:	009b      	lsls	r3, r3, #2
 800352e:	440b      	add	r3, r1
 8003530:	3324      	adds	r3, #36	@ 0x24
 8003532:	2200      	movs	r2, #0
 8003534:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003536:	7bfb      	ldrb	r3, [r7, #15]
 8003538:	3301      	adds	r3, #1
 800353a:	73fb      	strb	r3, [r7, #15]
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	791b      	ldrb	r3, [r3, #4]
 8003540:	7bfa      	ldrb	r2, [r7, #15]
 8003542:	429a      	cmp	r2, r3
 8003544:	d3af      	bcc.n	80034a6 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003546:	2300      	movs	r3, #0
 8003548:	73fb      	strb	r3, [r7, #15]
 800354a:	e044      	b.n	80035d6 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800354c:	7bfa      	ldrb	r2, [r7, #15]
 800354e:	6879      	ldr	r1, [r7, #4]
 8003550:	4613      	mov	r3, r2
 8003552:	00db      	lsls	r3, r3, #3
 8003554:	4413      	add	r3, r2
 8003556:	009b      	lsls	r3, r3, #2
 8003558:	440b      	add	r3, r1
 800355a:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800355e:	2200      	movs	r2, #0
 8003560:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003562:	7bfa      	ldrb	r2, [r7, #15]
 8003564:	6879      	ldr	r1, [r7, #4]
 8003566:	4613      	mov	r3, r2
 8003568:	00db      	lsls	r3, r3, #3
 800356a:	4413      	add	r3, r2
 800356c:	009b      	lsls	r3, r3, #2
 800356e:	440b      	add	r3, r1
 8003570:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8003574:	7bfa      	ldrb	r2, [r7, #15]
 8003576:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003578:	7bfa      	ldrb	r2, [r7, #15]
 800357a:	6879      	ldr	r1, [r7, #4]
 800357c:	4613      	mov	r3, r2
 800357e:	00db      	lsls	r3, r3, #3
 8003580:	4413      	add	r3, r2
 8003582:	009b      	lsls	r3, r3, #2
 8003584:	440b      	add	r3, r1
 8003586:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800358a:	2200      	movs	r2, #0
 800358c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800358e:	7bfa      	ldrb	r2, [r7, #15]
 8003590:	6879      	ldr	r1, [r7, #4]
 8003592:	4613      	mov	r3, r2
 8003594:	00db      	lsls	r3, r3, #3
 8003596:	4413      	add	r3, r2
 8003598:	009b      	lsls	r3, r3, #2
 800359a:	440b      	add	r3, r1
 800359c:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80035a0:	2200      	movs	r2, #0
 80035a2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80035a4:	7bfa      	ldrb	r2, [r7, #15]
 80035a6:	6879      	ldr	r1, [r7, #4]
 80035a8:	4613      	mov	r3, r2
 80035aa:	00db      	lsls	r3, r3, #3
 80035ac:	4413      	add	r3, r2
 80035ae:	009b      	lsls	r3, r3, #2
 80035b0:	440b      	add	r3, r1
 80035b2:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80035b6:	2200      	movs	r2, #0
 80035b8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80035ba:	7bfa      	ldrb	r2, [r7, #15]
 80035bc:	6879      	ldr	r1, [r7, #4]
 80035be:	4613      	mov	r3, r2
 80035c0:	00db      	lsls	r3, r3, #3
 80035c2:	4413      	add	r3, r2
 80035c4:	009b      	lsls	r3, r3, #2
 80035c6:	440b      	add	r3, r1
 80035c8:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80035cc:	2200      	movs	r2, #0
 80035ce:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80035d0:	7bfb      	ldrb	r3, [r7, #15]
 80035d2:	3301      	adds	r3, #1
 80035d4:	73fb      	strb	r3, [r7, #15]
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	791b      	ldrb	r3, [r3, #4]
 80035da:	7bfa      	ldrb	r2, [r7, #15]
 80035dc:	429a      	cmp	r2, r3
 80035de:	d3b5      	bcc.n	800354c <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6818      	ldr	r0, [r3, #0]
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	7c1a      	ldrb	r2, [r3, #16]
 80035e8:	f88d 2000 	strb.w	r2, [sp]
 80035ec:	3304      	adds	r3, #4
 80035ee:	cb0e      	ldmia	r3, {r1, r2, r3}
 80035f0:	f001 fefe 	bl	80053f0 <USB_DevInit>
 80035f4:	4603      	mov	r3, r0
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d005      	beq.n	8003606 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2202      	movs	r2, #2
 80035fe:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003602:	2301      	movs	r3, #1
 8003604:	e00c      	b.n	8003620 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2200      	movs	r2, #0
 800360a:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2201      	movs	r2, #1
 8003610:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4618      	mov	r0, r3
 800361a:	f002 ff48 	bl	80064ae <USB_DevDisconnect>

  return HAL_OK;
 800361e:	2300      	movs	r3, #0
}
 8003620:	4618      	mov	r0, r3
 8003622:	3710      	adds	r7, #16
 8003624:	46bd      	mov	sp, r7
 8003626:	bd80      	pop	{r7, pc}

08003628 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b084      	sub	sp, #16
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800363c:	2b01      	cmp	r3, #1
 800363e:	d101      	bne.n	8003644 <HAL_PCD_Start+0x1c>
 8003640:	2302      	movs	r3, #2
 8003642:	e022      	b.n	800368a <HAL_PCD_Start+0x62>
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2201      	movs	r2, #1
 8003648:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	68db      	ldr	r3, [r3, #12]
 8003650:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003654:	2b00      	cmp	r3, #0
 8003656:	d009      	beq.n	800366c <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800365c:	2b01      	cmp	r3, #1
 800365e:	d105      	bne.n	800366c <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003664:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	4618      	mov	r0, r3
 8003672:	f001 fe4f 	bl	8005314 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4618      	mov	r0, r3
 800367c:	f002 fef6 	bl	800646c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2200      	movs	r2, #0
 8003684:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003688:	2300      	movs	r3, #0
}
 800368a:	4618      	mov	r0, r3
 800368c:	3710      	adds	r7, #16
 800368e:	46bd      	mov	sp, r7
 8003690:	bd80      	pop	{r7, pc}

08003692 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003692:	b590      	push	{r4, r7, lr}
 8003694:	b08d      	sub	sp, #52	@ 0x34
 8003696:	af00      	add	r7, sp, #0
 8003698:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80036a0:	6a3b      	ldr	r3, [r7, #32]
 80036a2:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4618      	mov	r0, r3
 80036aa:	f002 ffb4 	bl	8006616 <USB_GetMode>
 80036ae:	4603      	mov	r3, r0
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	f040 848c 	bne.w	8003fce <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4618      	mov	r0, r3
 80036bc:	f002 ff18 	bl	80064f0 <USB_ReadInterrupts>
 80036c0:	4603      	mov	r3, r0
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	f000 8482 	beq.w	8003fcc <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80036c8:	69fb      	ldr	r3, [r7, #28]
 80036ca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80036ce:	689b      	ldr	r3, [r3, #8]
 80036d0:	0a1b      	lsrs	r3, r3, #8
 80036d2:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4618      	mov	r0, r3
 80036e2:	f002 ff05 	bl	80064f0 <USB_ReadInterrupts>
 80036e6:	4603      	mov	r3, r0
 80036e8:	f003 0302 	and.w	r3, r3, #2
 80036ec:	2b02      	cmp	r3, #2
 80036ee:	d107      	bne.n	8003700 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	695a      	ldr	r2, [r3, #20]
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f002 0202 	and.w	r2, r2, #2
 80036fe:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4618      	mov	r0, r3
 8003706:	f002 fef3 	bl	80064f0 <USB_ReadInterrupts>
 800370a:	4603      	mov	r3, r0
 800370c:	f003 0310 	and.w	r3, r3, #16
 8003710:	2b10      	cmp	r3, #16
 8003712:	d161      	bne.n	80037d8 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	699a      	ldr	r2, [r3, #24]
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f022 0210 	bic.w	r2, r2, #16
 8003722:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8003724:	6a3b      	ldr	r3, [r7, #32]
 8003726:	6a1b      	ldr	r3, [r3, #32]
 8003728:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800372a:	69bb      	ldr	r3, [r7, #24]
 800372c:	f003 020f 	and.w	r2, r3, #15
 8003730:	4613      	mov	r3, r2
 8003732:	00db      	lsls	r3, r3, #3
 8003734:	4413      	add	r3, r2
 8003736:	009b      	lsls	r3, r3, #2
 8003738:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800373c:	687a      	ldr	r2, [r7, #4]
 800373e:	4413      	add	r3, r2
 8003740:	3304      	adds	r3, #4
 8003742:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003744:	69bb      	ldr	r3, [r7, #24]
 8003746:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 800374a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800374e:	d124      	bne.n	800379a <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003750:	69ba      	ldr	r2, [r7, #24]
 8003752:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8003756:	4013      	ands	r3, r2
 8003758:	2b00      	cmp	r3, #0
 800375a:	d035      	beq.n	80037c8 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800375c:	697b      	ldr	r3, [r7, #20]
 800375e:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003760:	69bb      	ldr	r3, [r7, #24]
 8003762:	091b      	lsrs	r3, r3, #4
 8003764:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003766:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800376a:	b29b      	uxth	r3, r3
 800376c:	461a      	mov	r2, r3
 800376e:	6a38      	ldr	r0, [r7, #32]
 8003770:	f002 fd2a 	bl	80061c8 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003774:	697b      	ldr	r3, [r7, #20]
 8003776:	68da      	ldr	r2, [r3, #12]
 8003778:	69bb      	ldr	r3, [r7, #24]
 800377a:	091b      	lsrs	r3, r3, #4
 800377c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003780:	441a      	add	r2, r3
 8003782:	697b      	ldr	r3, [r7, #20]
 8003784:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003786:	697b      	ldr	r3, [r7, #20]
 8003788:	695a      	ldr	r2, [r3, #20]
 800378a:	69bb      	ldr	r3, [r7, #24]
 800378c:	091b      	lsrs	r3, r3, #4
 800378e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003792:	441a      	add	r2, r3
 8003794:	697b      	ldr	r3, [r7, #20]
 8003796:	615a      	str	r2, [r3, #20]
 8003798:	e016      	b.n	80037c8 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800379a:	69bb      	ldr	r3, [r7, #24]
 800379c:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 80037a0:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80037a4:	d110      	bne.n	80037c8 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80037ac:	2208      	movs	r2, #8
 80037ae:	4619      	mov	r1, r3
 80037b0:	6a38      	ldr	r0, [r7, #32]
 80037b2:	f002 fd09 	bl	80061c8 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80037b6:	697b      	ldr	r3, [r7, #20]
 80037b8:	695a      	ldr	r2, [r3, #20]
 80037ba:	69bb      	ldr	r3, [r7, #24]
 80037bc:	091b      	lsrs	r3, r3, #4
 80037be:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80037c2:	441a      	add	r2, r3
 80037c4:	697b      	ldr	r3, [r7, #20]
 80037c6:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	699a      	ldr	r2, [r3, #24]
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f042 0210 	orr.w	r2, r2, #16
 80037d6:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	4618      	mov	r0, r3
 80037de:	f002 fe87 	bl	80064f0 <USB_ReadInterrupts>
 80037e2:	4603      	mov	r3, r0
 80037e4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80037e8:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80037ec:	f040 80a7 	bne.w	800393e <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80037f0:	2300      	movs	r3, #0
 80037f2:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4618      	mov	r0, r3
 80037fa:	f002 fe8c 	bl	8006516 <USB_ReadDevAllOutEpInterrupt>
 80037fe:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8003800:	e099      	b.n	8003936 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003802:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003804:	f003 0301 	and.w	r3, r3, #1
 8003808:	2b00      	cmp	r3, #0
 800380a:	f000 808e 	beq.w	800392a <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003814:	b2d2      	uxtb	r2, r2
 8003816:	4611      	mov	r1, r2
 8003818:	4618      	mov	r0, r3
 800381a:	f002 feb0 	bl	800657e <USB_ReadDevOutEPInterrupt>
 800381e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003820:	693b      	ldr	r3, [r7, #16]
 8003822:	f003 0301 	and.w	r3, r3, #1
 8003826:	2b00      	cmp	r3, #0
 8003828:	d00c      	beq.n	8003844 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800382a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800382c:	015a      	lsls	r2, r3, #5
 800382e:	69fb      	ldr	r3, [r7, #28]
 8003830:	4413      	add	r3, r2
 8003832:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003836:	461a      	mov	r2, r3
 8003838:	2301      	movs	r3, #1
 800383a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800383c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800383e:	6878      	ldr	r0, [r7, #4]
 8003840:	f000 fe8c 	bl	800455c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003844:	693b      	ldr	r3, [r7, #16]
 8003846:	f003 0308 	and.w	r3, r3, #8
 800384a:	2b00      	cmp	r3, #0
 800384c:	d00c      	beq.n	8003868 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800384e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003850:	015a      	lsls	r2, r3, #5
 8003852:	69fb      	ldr	r3, [r7, #28]
 8003854:	4413      	add	r3, r2
 8003856:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800385a:	461a      	mov	r2, r3
 800385c:	2308      	movs	r3, #8
 800385e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003860:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003862:	6878      	ldr	r0, [r7, #4]
 8003864:	f000 ff62 	bl	800472c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003868:	693b      	ldr	r3, [r7, #16]
 800386a:	f003 0310 	and.w	r3, r3, #16
 800386e:	2b00      	cmp	r3, #0
 8003870:	d008      	beq.n	8003884 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003872:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003874:	015a      	lsls	r2, r3, #5
 8003876:	69fb      	ldr	r3, [r7, #28]
 8003878:	4413      	add	r3, r2
 800387a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800387e:	461a      	mov	r2, r3
 8003880:	2310      	movs	r3, #16
 8003882:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8003884:	693b      	ldr	r3, [r7, #16]
 8003886:	f003 0302 	and.w	r3, r3, #2
 800388a:	2b00      	cmp	r3, #0
 800388c:	d030      	beq.n	80038f0 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800388e:	6a3b      	ldr	r3, [r7, #32]
 8003890:	695b      	ldr	r3, [r3, #20]
 8003892:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003896:	2b80      	cmp	r3, #128	@ 0x80
 8003898:	d109      	bne.n	80038ae <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800389a:	69fb      	ldr	r3, [r7, #28]
 800389c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80038a0:	685b      	ldr	r3, [r3, #4]
 80038a2:	69fa      	ldr	r2, [r7, #28]
 80038a4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80038a8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80038ac:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80038ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80038b0:	4613      	mov	r3, r2
 80038b2:	00db      	lsls	r3, r3, #3
 80038b4:	4413      	add	r3, r2
 80038b6:	009b      	lsls	r3, r3, #2
 80038b8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80038bc:	687a      	ldr	r2, [r7, #4]
 80038be:	4413      	add	r3, r2
 80038c0:	3304      	adds	r3, #4
 80038c2:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80038c4:	697b      	ldr	r3, [r7, #20]
 80038c6:	78db      	ldrb	r3, [r3, #3]
 80038c8:	2b01      	cmp	r3, #1
 80038ca:	d108      	bne.n	80038de <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80038cc:	697b      	ldr	r3, [r7, #20]
 80038ce:	2200      	movs	r2, #0
 80038d0:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80038d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038d4:	b2db      	uxtb	r3, r3
 80038d6:	4619      	mov	r1, r3
 80038d8:	6878      	ldr	r0, [r7, #4]
 80038da:	f004 ff05 	bl	80086e8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80038de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038e0:	015a      	lsls	r2, r3, #5
 80038e2:	69fb      	ldr	r3, [r7, #28]
 80038e4:	4413      	add	r3, r2
 80038e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80038ea:	461a      	mov	r2, r3
 80038ec:	2302      	movs	r3, #2
 80038ee:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80038f0:	693b      	ldr	r3, [r7, #16]
 80038f2:	f003 0320 	and.w	r3, r3, #32
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d008      	beq.n	800390c <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80038fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038fc:	015a      	lsls	r2, r3, #5
 80038fe:	69fb      	ldr	r3, [r7, #28]
 8003900:	4413      	add	r3, r2
 8003902:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003906:	461a      	mov	r2, r3
 8003908:	2320      	movs	r3, #32
 800390a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800390c:	693b      	ldr	r3, [r7, #16]
 800390e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003912:	2b00      	cmp	r3, #0
 8003914:	d009      	beq.n	800392a <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003916:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003918:	015a      	lsls	r2, r3, #5
 800391a:	69fb      	ldr	r3, [r7, #28]
 800391c:	4413      	add	r3, r2
 800391e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003922:	461a      	mov	r2, r3
 8003924:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003928:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800392a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800392c:	3301      	adds	r3, #1
 800392e:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8003930:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003932:	085b      	lsrs	r3, r3, #1
 8003934:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8003936:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003938:	2b00      	cmp	r3, #0
 800393a:	f47f af62 	bne.w	8003802 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	4618      	mov	r0, r3
 8003944:	f002 fdd4 	bl	80064f0 <USB_ReadInterrupts>
 8003948:	4603      	mov	r3, r0
 800394a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800394e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003952:	f040 80db 	bne.w	8003b0c <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	4618      	mov	r0, r3
 800395c:	f002 fdf5 	bl	800654a <USB_ReadDevAllInEpInterrupt>
 8003960:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8003962:	2300      	movs	r3, #0
 8003964:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8003966:	e0cd      	b.n	8003b04 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003968:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800396a:	f003 0301 	and.w	r3, r3, #1
 800396e:	2b00      	cmp	r3, #0
 8003970:	f000 80c2 	beq.w	8003af8 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800397a:	b2d2      	uxtb	r2, r2
 800397c:	4611      	mov	r1, r2
 800397e:	4618      	mov	r0, r3
 8003980:	f002 fe1b 	bl	80065ba <USB_ReadDevInEPInterrupt>
 8003984:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003986:	693b      	ldr	r3, [r7, #16]
 8003988:	f003 0301 	and.w	r3, r3, #1
 800398c:	2b00      	cmp	r3, #0
 800398e:	d057      	beq.n	8003a40 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003990:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003992:	f003 030f 	and.w	r3, r3, #15
 8003996:	2201      	movs	r2, #1
 8003998:	fa02 f303 	lsl.w	r3, r2, r3
 800399c:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800399e:	69fb      	ldr	r3, [r7, #28]
 80039a0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80039a4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	43db      	mvns	r3, r3
 80039aa:	69f9      	ldr	r1, [r7, #28]
 80039ac:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80039b0:	4013      	ands	r3, r2
 80039b2:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80039b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039b6:	015a      	lsls	r2, r3, #5
 80039b8:	69fb      	ldr	r3, [r7, #28]
 80039ba:	4413      	add	r3, r2
 80039bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80039c0:	461a      	mov	r2, r3
 80039c2:	2301      	movs	r3, #1
 80039c4:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	799b      	ldrb	r3, [r3, #6]
 80039ca:	2b01      	cmp	r3, #1
 80039cc:	d132      	bne.n	8003a34 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80039ce:	6879      	ldr	r1, [r7, #4]
 80039d0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80039d2:	4613      	mov	r3, r2
 80039d4:	00db      	lsls	r3, r3, #3
 80039d6:	4413      	add	r3, r2
 80039d8:	009b      	lsls	r3, r3, #2
 80039da:	440b      	add	r3, r1
 80039dc:	3320      	adds	r3, #32
 80039de:	6819      	ldr	r1, [r3, #0]
 80039e0:	6878      	ldr	r0, [r7, #4]
 80039e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80039e4:	4613      	mov	r3, r2
 80039e6:	00db      	lsls	r3, r3, #3
 80039e8:	4413      	add	r3, r2
 80039ea:	009b      	lsls	r3, r3, #2
 80039ec:	4403      	add	r3, r0
 80039ee:	331c      	adds	r3, #28
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4419      	add	r1, r3
 80039f4:	6878      	ldr	r0, [r7, #4]
 80039f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80039f8:	4613      	mov	r3, r2
 80039fa:	00db      	lsls	r3, r3, #3
 80039fc:	4413      	add	r3, r2
 80039fe:	009b      	lsls	r3, r3, #2
 8003a00:	4403      	add	r3, r0
 8003a02:	3320      	adds	r3, #32
 8003a04:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003a06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d113      	bne.n	8003a34 <HAL_PCD_IRQHandler+0x3a2>
 8003a0c:	6879      	ldr	r1, [r7, #4]
 8003a0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a10:	4613      	mov	r3, r2
 8003a12:	00db      	lsls	r3, r3, #3
 8003a14:	4413      	add	r3, r2
 8003a16:	009b      	lsls	r3, r3, #2
 8003a18:	440b      	add	r3, r1
 8003a1a:	3324      	adds	r3, #36	@ 0x24
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d108      	bne.n	8003a34 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6818      	ldr	r0, [r3, #0]
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003a2c:	461a      	mov	r2, r3
 8003a2e:	2101      	movs	r1, #1
 8003a30:	f002 fe22 	bl	8006678 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003a34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a36:	b2db      	uxtb	r3, r3
 8003a38:	4619      	mov	r1, r3
 8003a3a:	6878      	ldr	r0, [r7, #4]
 8003a3c:	f004 fdcf 	bl	80085de <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003a40:	693b      	ldr	r3, [r7, #16]
 8003a42:	f003 0308 	and.w	r3, r3, #8
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d008      	beq.n	8003a5c <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003a4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a4c:	015a      	lsls	r2, r3, #5
 8003a4e:	69fb      	ldr	r3, [r7, #28]
 8003a50:	4413      	add	r3, r2
 8003a52:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003a56:	461a      	mov	r2, r3
 8003a58:	2308      	movs	r3, #8
 8003a5a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003a5c:	693b      	ldr	r3, [r7, #16]
 8003a5e:	f003 0310 	and.w	r3, r3, #16
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d008      	beq.n	8003a78 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003a66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a68:	015a      	lsls	r2, r3, #5
 8003a6a:	69fb      	ldr	r3, [r7, #28]
 8003a6c:	4413      	add	r3, r2
 8003a6e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003a72:	461a      	mov	r2, r3
 8003a74:	2310      	movs	r3, #16
 8003a76:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003a78:	693b      	ldr	r3, [r7, #16]
 8003a7a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d008      	beq.n	8003a94 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003a82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a84:	015a      	lsls	r2, r3, #5
 8003a86:	69fb      	ldr	r3, [r7, #28]
 8003a88:	4413      	add	r3, r2
 8003a8a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003a8e:	461a      	mov	r2, r3
 8003a90:	2340      	movs	r3, #64	@ 0x40
 8003a92:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003a94:	693b      	ldr	r3, [r7, #16]
 8003a96:	f003 0302 	and.w	r3, r3, #2
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d023      	beq.n	8003ae6 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8003a9e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003aa0:	6a38      	ldr	r0, [r7, #32]
 8003aa2:	f001 fe09 	bl	80056b8 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8003aa6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003aa8:	4613      	mov	r3, r2
 8003aaa:	00db      	lsls	r3, r3, #3
 8003aac:	4413      	add	r3, r2
 8003aae:	009b      	lsls	r3, r3, #2
 8003ab0:	3310      	adds	r3, #16
 8003ab2:	687a      	ldr	r2, [r7, #4]
 8003ab4:	4413      	add	r3, r2
 8003ab6:	3304      	adds	r3, #4
 8003ab8:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003aba:	697b      	ldr	r3, [r7, #20]
 8003abc:	78db      	ldrb	r3, [r3, #3]
 8003abe:	2b01      	cmp	r3, #1
 8003ac0:	d108      	bne.n	8003ad4 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8003ac2:	697b      	ldr	r3, [r7, #20]
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003ac8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003aca:	b2db      	uxtb	r3, r3
 8003acc:	4619      	mov	r1, r3
 8003ace:	6878      	ldr	r0, [r7, #4]
 8003ad0:	f004 fe1c 	bl	800870c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003ad4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ad6:	015a      	lsls	r2, r3, #5
 8003ad8:	69fb      	ldr	r3, [r7, #28]
 8003ada:	4413      	add	r3, r2
 8003adc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003ae0:	461a      	mov	r2, r3
 8003ae2:	2302      	movs	r3, #2
 8003ae4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003ae6:	693b      	ldr	r3, [r7, #16]
 8003ae8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d003      	beq.n	8003af8 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003af0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003af2:	6878      	ldr	r0, [r7, #4]
 8003af4:	f000 fca5 	bl	8004442 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003af8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003afa:	3301      	adds	r3, #1
 8003afc:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8003afe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b00:	085b      	lsrs	r3, r3, #1
 8003b02:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8003b04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	f47f af2e 	bne.w	8003968 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	4618      	mov	r0, r3
 8003b12:	f002 fced 	bl	80064f0 <USB_ReadInterrupts>
 8003b16:	4603      	mov	r3, r0
 8003b18:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003b1c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003b20:	d122      	bne.n	8003b68 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003b22:	69fb      	ldr	r3, [r7, #28]
 8003b24:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003b28:	685b      	ldr	r3, [r3, #4]
 8003b2a:	69fa      	ldr	r2, [r7, #28]
 8003b2c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003b30:	f023 0301 	bic.w	r3, r3, #1
 8003b34:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8003b3c:	2b01      	cmp	r3, #1
 8003b3e:	d108      	bne.n	8003b52 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2200      	movs	r2, #0
 8003b44:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003b48:	2100      	movs	r1, #0
 8003b4a:	6878      	ldr	r0, [r7, #4]
 8003b4c:	f000 fe8c 	bl	8004868 <HAL_PCDEx_LPM_Callback>
 8003b50:	e002      	b.n	8003b58 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003b52:	6878      	ldr	r0, [r7, #4]
 8003b54:	f004 fdba 	bl	80086cc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	695a      	ldr	r2, [r3, #20]
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8003b66:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	f002 fcbf 	bl	80064f0 <USB_ReadInterrupts>
 8003b72:	4603      	mov	r3, r0
 8003b74:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003b78:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003b7c:	d112      	bne.n	8003ba4 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003b7e:	69fb      	ldr	r3, [r7, #28]
 8003b80:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003b84:	689b      	ldr	r3, [r3, #8]
 8003b86:	f003 0301 	and.w	r3, r3, #1
 8003b8a:	2b01      	cmp	r3, #1
 8003b8c:	d102      	bne.n	8003b94 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003b8e:	6878      	ldr	r0, [r7, #4]
 8003b90:	f004 fd76 	bl	8008680 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	695a      	ldr	r2, [r3, #20]
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8003ba2:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	4618      	mov	r0, r3
 8003baa:	f002 fca1 	bl	80064f0 <USB_ReadInterrupts>
 8003bae:	4603      	mov	r3, r0
 8003bb0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003bb4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003bb8:	f040 80b7 	bne.w	8003d2a <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003bbc:	69fb      	ldr	r3, [r7, #28]
 8003bbe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003bc2:	685b      	ldr	r3, [r3, #4]
 8003bc4:	69fa      	ldr	r2, [r7, #28]
 8003bc6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003bca:	f023 0301 	bic.w	r3, r3, #1
 8003bce:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	2110      	movs	r1, #16
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	f001 fd6e 	bl	80056b8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003bdc:	2300      	movs	r3, #0
 8003bde:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003be0:	e046      	b.n	8003c70 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003be2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003be4:	015a      	lsls	r2, r3, #5
 8003be6:	69fb      	ldr	r3, [r7, #28]
 8003be8:	4413      	add	r3, r2
 8003bea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003bee:	461a      	mov	r2, r3
 8003bf0:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003bf4:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003bf6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003bf8:	015a      	lsls	r2, r3, #5
 8003bfa:	69fb      	ldr	r3, [r7, #28]
 8003bfc:	4413      	add	r3, r2
 8003bfe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003c06:	0151      	lsls	r1, r2, #5
 8003c08:	69fa      	ldr	r2, [r7, #28]
 8003c0a:	440a      	add	r2, r1
 8003c0c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003c10:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003c14:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003c16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c18:	015a      	lsls	r2, r3, #5
 8003c1a:	69fb      	ldr	r3, [r7, #28]
 8003c1c:	4413      	add	r3, r2
 8003c1e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003c22:	461a      	mov	r2, r3
 8003c24:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003c28:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003c2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c2c:	015a      	lsls	r2, r3, #5
 8003c2e:	69fb      	ldr	r3, [r7, #28]
 8003c30:	4413      	add	r3, r2
 8003c32:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003c3a:	0151      	lsls	r1, r2, #5
 8003c3c:	69fa      	ldr	r2, [r7, #28]
 8003c3e:	440a      	add	r2, r1
 8003c40:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003c44:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003c48:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003c4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c4c:	015a      	lsls	r2, r3, #5
 8003c4e:	69fb      	ldr	r3, [r7, #28]
 8003c50:	4413      	add	r3, r2
 8003c52:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003c5a:	0151      	lsls	r1, r2, #5
 8003c5c:	69fa      	ldr	r2, [r7, #28]
 8003c5e:	440a      	add	r2, r1
 8003c60:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003c64:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003c68:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003c6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c6c:	3301      	adds	r3, #1
 8003c6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	791b      	ldrb	r3, [r3, #4]
 8003c74:	461a      	mov	r2, r3
 8003c76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c78:	4293      	cmp	r3, r2
 8003c7a:	d3b2      	bcc.n	8003be2 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003c7c:	69fb      	ldr	r3, [r7, #28]
 8003c7e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003c82:	69db      	ldr	r3, [r3, #28]
 8003c84:	69fa      	ldr	r2, [r7, #28]
 8003c86:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003c8a:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8003c8e:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	7bdb      	ldrb	r3, [r3, #15]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d016      	beq.n	8003cc6 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003c98:	69fb      	ldr	r3, [r7, #28]
 8003c9a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003c9e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003ca2:	69fa      	ldr	r2, [r7, #28]
 8003ca4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003ca8:	f043 030b 	orr.w	r3, r3, #11
 8003cac:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003cb0:	69fb      	ldr	r3, [r7, #28]
 8003cb2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003cb6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cb8:	69fa      	ldr	r2, [r7, #28]
 8003cba:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003cbe:	f043 030b 	orr.w	r3, r3, #11
 8003cc2:	6453      	str	r3, [r2, #68]	@ 0x44
 8003cc4:	e015      	b.n	8003cf2 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003cc6:	69fb      	ldr	r3, [r7, #28]
 8003cc8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003ccc:	695b      	ldr	r3, [r3, #20]
 8003cce:	69fa      	ldr	r2, [r7, #28]
 8003cd0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003cd4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003cd8:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8003cdc:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003cde:	69fb      	ldr	r3, [r7, #28]
 8003ce0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003ce4:	691b      	ldr	r3, [r3, #16]
 8003ce6:	69fa      	ldr	r2, [r7, #28]
 8003ce8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003cec:	f043 030b 	orr.w	r3, r3, #11
 8003cf0:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003cf2:	69fb      	ldr	r3, [r7, #28]
 8003cf4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	69fa      	ldr	r2, [r7, #28]
 8003cfc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003d00:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8003d04:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6818      	ldr	r0, [r3, #0]
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003d14:	461a      	mov	r2, r3
 8003d16:	f002 fcaf 	bl	8006678 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	695a      	ldr	r2, [r3, #20]
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8003d28:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	4618      	mov	r0, r3
 8003d30:	f002 fbde 	bl	80064f0 <USB_ReadInterrupts>
 8003d34:	4603      	mov	r3, r0
 8003d36:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003d3a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003d3e:	d123      	bne.n	8003d88 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	4618      	mov	r0, r3
 8003d46:	f002 fc74 	bl	8006632 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	4618      	mov	r0, r3
 8003d50:	f001 fd2b 	bl	80057aa <USB_GetDevSpeed>
 8003d54:	4603      	mov	r3, r0
 8003d56:	461a      	mov	r2, r3
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681c      	ldr	r4, [r3, #0]
 8003d60:	f001 f9b2 	bl	80050c8 <HAL_RCC_GetHCLKFreq>
 8003d64:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003d6a:	461a      	mov	r2, r3
 8003d6c:	4620      	mov	r0, r4
 8003d6e:	f001 fa2f 	bl	80051d0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003d72:	6878      	ldr	r0, [r7, #4]
 8003d74:	f004 fc5b 	bl	800862e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	695a      	ldr	r2, [r3, #20]
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8003d86:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	f002 fbaf 	bl	80064f0 <USB_ReadInterrupts>
 8003d92:	4603      	mov	r3, r0
 8003d94:	f003 0308 	and.w	r3, r3, #8
 8003d98:	2b08      	cmp	r3, #8
 8003d9a:	d10a      	bne.n	8003db2 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003d9c:	6878      	ldr	r0, [r7, #4]
 8003d9e:	f004 fc38 	bl	8008612 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	695a      	ldr	r2, [r3, #20]
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f002 0208 	and.w	r2, r2, #8
 8003db0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	4618      	mov	r0, r3
 8003db8:	f002 fb9a 	bl	80064f0 <USB_ReadInterrupts>
 8003dbc:	4603      	mov	r3, r0
 8003dbe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003dc2:	2b80      	cmp	r3, #128	@ 0x80
 8003dc4:	d123      	bne.n	8003e0e <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003dc6:	6a3b      	ldr	r3, [r7, #32]
 8003dc8:	699b      	ldr	r3, [r3, #24]
 8003dca:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003dce:	6a3b      	ldr	r3, [r7, #32]
 8003dd0:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003dd2:	2301      	movs	r3, #1
 8003dd4:	627b      	str	r3, [r7, #36]	@ 0x24
 8003dd6:	e014      	b.n	8003e02 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003dd8:	6879      	ldr	r1, [r7, #4]
 8003dda:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ddc:	4613      	mov	r3, r2
 8003dde:	00db      	lsls	r3, r3, #3
 8003de0:	4413      	add	r3, r2
 8003de2:	009b      	lsls	r3, r3, #2
 8003de4:	440b      	add	r3, r1
 8003de6:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8003dea:	781b      	ldrb	r3, [r3, #0]
 8003dec:	2b01      	cmp	r3, #1
 8003dee:	d105      	bne.n	8003dfc <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003df0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003df2:	b2db      	uxtb	r3, r3
 8003df4:	4619      	mov	r1, r3
 8003df6:	6878      	ldr	r0, [r7, #4]
 8003df8:	f000 faf2 	bl	80043e0 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003dfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dfe:	3301      	adds	r3, #1
 8003e00:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	791b      	ldrb	r3, [r3, #4]
 8003e06:	461a      	mov	r2, r3
 8003e08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d3e4      	bcc.n	8003dd8 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	4618      	mov	r0, r3
 8003e14:	f002 fb6c 	bl	80064f0 <USB_ReadInterrupts>
 8003e18:	4603      	mov	r3, r0
 8003e1a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003e1e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003e22:	d13c      	bne.n	8003e9e <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003e24:	2301      	movs	r3, #1
 8003e26:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e28:	e02b      	b.n	8003e82 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003e2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e2c:	015a      	lsls	r2, r3, #5
 8003e2e:	69fb      	ldr	r3, [r7, #28]
 8003e30:	4413      	add	r3, r2
 8003e32:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003e3a:	6879      	ldr	r1, [r7, #4]
 8003e3c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e3e:	4613      	mov	r3, r2
 8003e40:	00db      	lsls	r3, r3, #3
 8003e42:	4413      	add	r3, r2
 8003e44:	009b      	lsls	r3, r3, #2
 8003e46:	440b      	add	r3, r1
 8003e48:	3318      	adds	r3, #24
 8003e4a:	781b      	ldrb	r3, [r3, #0]
 8003e4c:	2b01      	cmp	r3, #1
 8003e4e:	d115      	bne.n	8003e7c <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003e50:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	da12      	bge.n	8003e7c <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003e56:	6879      	ldr	r1, [r7, #4]
 8003e58:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e5a:	4613      	mov	r3, r2
 8003e5c:	00db      	lsls	r3, r3, #3
 8003e5e:	4413      	add	r3, r2
 8003e60:	009b      	lsls	r3, r3, #2
 8003e62:	440b      	add	r3, r1
 8003e64:	3317      	adds	r3, #23
 8003e66:	2201      	movs	r2, #1
 8003e68:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003e6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e6c:	b2db      	uxtb	r3, r3
 8003e6e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003e72:	b2db      	uxtb	r3, r3
 8003e74:	4619      	mov	r1, r3
 8003e76:	6878      	ldr	r0, [r7, #4]
 8003e78:	f000 fab2 	bl	80043e0 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003e7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e7e:	3301      	adds	r3, #1
 8003e80:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	791b      	ldrb	r3, [r3, #4]
 8003e86:	461a      	mov	r2, r3
 8003e88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d3cd      	bcc.n	8003e2a <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	695a      	ldr	r2, [r3, #20]
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8003e9c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	f002 fb24 	bl	80064f0 <USB_ReadInterrupts>
 8003ea8:	4603      	mov	r3, r0
 8003eaa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003eae:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003eb2:	d156      	bne.n	8003f62 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003eb4:	2301      	movs	r3, #1
 8003eb6:	627b      	str	r3, [r7, #36]	@ 0x24
 8003eb8:	e045      	b.n	8003f46 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003eba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ebc:	015a      	lsls	r2, r3, #5
 8003ebe:	69fb      	ldr	r3, [r7, #28]
 8003ec0:	4413      	add	r3, r2
 8003ec2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003eca:	6879      	ldr	r1, [r7, #4]
 8003ecc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ece:	4613      	mov	r3, r2
 8003ed0:	00db      	lsls	r3, r3, #3
 8003ed2:	4413      	add	r3, r2
 8003ed4:	009b      	lsls	r3, r3, #2
 8003ed6:	440b      	add	r3, r1
 8003ed8:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003edc:	781b      	ldrb	r3, [r3, #0]
 8003ede:	2b01      	cmp	r3, #1
 8003ee0:	d12e      	bne.n	8003f40 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003ee2:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	da2b      	bge.n	8003f40 <HAL_PCD_IRQHandler+0x8ae>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 8003ee8:	69bb      	ldr	r3, [r7, #24]
 8003eea:	0c1a      	lsrs	r2, r3, #16
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8003ef2:	4053      	eors	r3, r2
 8003ef4:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d121      	bne.n	8003f40 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003efc:	6879      	ldr	r1, [r7, #4]
 8003efe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f00:	4613      	mov	r3, r2
 8003f02:	00db      	lsls	r3, r3, #3
 8003f04:	4413      	add	r3, r2
 8003f06:	009b      	lsls	r3, r3, #2
 8003f08:	440b      	add	r3, r1
 8003f0a:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8003f0e:	2201      	movs	r2, #1
 8003f10:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003f12:	6a3b      	ldr	r3, [r7, #32]
 8003f14:	699b      	ldr	r3, [r3, #24]
 8003f16:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8003f1a:	6a3b      	ldr	r3, [r7, #32]
 8003f1c:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003f1e:	6a3b      	ldr	r3, [r7, #32]
 8003f20:	695b      	ldr	r3, [r3, #20]
 8003f22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d10a      	bne.n	8003f40 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003f2a:	69fb      	ldr	r3, [r7, #28]
 8003f2c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003f30:	685b      	ldr	r3, [r3, #4]
 8003f32:	69fa      	ldr	r2, [r7, #28]
 8003f34:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003f38:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003f3c:	6053      	str	r3, [r2, #4]
            break;
 8003f3e:	e008      	b.n	8003f52 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003f40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f42:	3301      	adds	r3, #1
 8003f44:	627b      	str	r3, [r7, #36]	@ 0x24
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	791b      	ldrb	r3, [r3, #4]
 8003f4a:	461a      	mov	r2, r3
 8003f4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d3b3      	bcc.n	8003eba <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	695a      	ldr	r2, [r3, #20]
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8003f60:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	4618      	mov	r0, r3
 8003f68:	f002 fac2 	bl	80064f0 <USB_ReadInterrupts>
 8003f6c:	4603      	mov	r3, r0
 8003f6e:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8003f72:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f76:	d10a      	bne.n	8003f8e <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003f78:	6878      	ldr	r0, [r7, #4]
 8003f7a:	f004 fbd9 	bl	8008730 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	695a      	ldr	r2, [r3, #20]
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8003f8c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	4618      	mov	r0, r3
 8003f94:	f002 faac 	bl	80064f0 <USB_ReadInterrupts>
 8003f98:	4603      	mov	r3, r0
 8003f9a:	f003 0304 	and.w	r3, r3, #4
 8003f9e:	2b04      	cmp	r3, #4
 8003fa0:	d115      	bne.n	8003fce <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	685b      	ldr	r3, [r3, #4]
 8003fa8:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003faa:	69bb      	ldr	r3, [r7, #24]
 8003fac:	f003 0304 	and.w	r3, r3, #4
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d002      	beq.n	8003fba <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003fb4:	6878      	ldr	r0, [r7, #4]
 8003fb6:	f004 fbc9 	bl	800874c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	6859      	ldr	r1, [r3, #4]
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	69ba      	ldr	r2, [r7, #24]
 8003fc6:	430a      	orrs	r2, r1
 8003fc8:	605a      	str	r2, [r3, #4]
 8003fca:	e000      	b.n	8003fce <HAL_PCD_IRQHandler+0x93c>
      return;
 8003fcc:	bf00      	nop
    }
  }
}
 8003fce:	3734      	adds	r7, #52	@ 0x34
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	bd90      	pop	{r4, r7, pc}

08003fd4 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b082      	sub	sp, #8
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
 8003fdc:	460b      	mov	r3, r1
 8003fde:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003fe6:	2b01      	cmp	r3, #1
 8003fe8:	d101      	bne.n	8003fee <HAL_PCD_SetAddress+0x1a>
 8003fea:	2302      	movs	r3, #2
 8003fec:	e012      	b.n	8004014 <HAL_PCD_SetAddress+0x40>
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2201      	movs	r2, #1
 8003ff2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	78fa      	ldrb	r2, [r7, #3]
 8003ffa:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	78fa      	ldrb	r2, [r7, #3]
 8004002:	4611      	mov	r1, r2
 8004004:	4618      	mov	r0, r3
 8004006:	f002 fa0b 	bl	8006420 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	2200      	movs	r2, #0
 800400e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004012:	2300      	movs	r3, #0
}
 8004014:	4618      	mov	r0, r3
 8004016:	3708      	adds	r7, #8
 8004018:	46bd      	mov	sp, r7
 800401a:	bd80      	pop	{r7, pc}

0800401c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800401c:	b580      	push	{r7, lr}
 800401e:	b084      	sub	sp, #16
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
 8004024:	4608      	mov	r0, r1
 8004026:	4611      	mov	r1, r2
 8004028:	461a      	mov	r2, r3
 800402a:	4603      	mov	r3, r0
 800402c:	70fb      	strb	r3, [r7, #3]
 800402e:	460b      	mov	r3, r1
 8004030:	803b      	strh	r3, [r7, #0]
 8004032:	4613      	mov	r3, r2
 8004034:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8004036:	2300      	movs	r3, #0
 8004038:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800403a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800403e:	2b00      	cmp	r3, #0
 8004040:	da0f      	bge.n	8004062 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004042:	78fb      	ldrb	r3, [r7, #3]
 8004044:	f003 020f 	and.w	r2, r3, #15
 8004048:	4613      	mov	r3, r2
 800404a:	00db      	lsls	r3, r3, #3
 800404c:	4413      	add	r3, r2
 800404e:	009b      	lsls	r3, r3, #2
 8004050:	3310      	adds	r3, #16
 8004052:	687a      	ldr	r2, [r7, #4]
 8004054:	4413      	add	r3, r2
 8004056:	3304      	adds	r3, #4
 8004058:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	2201      	movs	r2, #1
 800405e:	705a      	strb	r2, [r3, #1]
 8004060:	e00f      	b.n	8004082 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004062:	78fb      	ldrb	r3, [r7, #3]
 8004064:	f003 020f 	and.w	r2, r3, #15
 8004068:	4613      	mov	r3, r2
 800406a:	00db      	lsls	r3, r3, #3
 800406c:	4413      	add	r3, r2
 800406e:	009b      	lsls	r3, r3, #2
 8004070:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004074:	687a      	ldr	r2, [r7, #4]
 8004076:	4413      	add	r3, r2
 8004078:	3304      	adds	r3, #4
 800407a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	2200      	movs	r2, #0
 8004080:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004082:	78fb      	ldrb	r3, [r7, #3]
 8004084:	f003 030f 	and.w	r3, r3, #15
 8004088:	b2da      	uxtb	r2, r3
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 800408e:	883b      	ldrh	r3, [r7, #0]
 8004090:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	78ba      	ldrb	r2, [r7, #2]
 800409c:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	785b      	ldrb	r3, [r3, #1]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d004      	beq.n	80040b0 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	781b      	ldrb	r3, [r3, #0]
 80040aa:	461a      	mov	r2, r3
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80040b0:	78bb      	ldrb	r3, [r7, #2]
 80040b2:	2b02      	cmp	r3, #2
 80040b4:	d102      	bne.n	80040bc <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	2200      	movs	r2, #0
 80040ba:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80040c2:	2b01      	cmp	r3, #1
 80040c4:	d101      	bne.n	80040ca <HAL_PCD_EP_Open+0xae>
 80040c6:	2302      	movs	r3, #2
 80040c8:	e00e      	b.n	80040e8 <HAL_PCD_EP_Open+0xcc>
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2201      	movs	r2, #1
 80040ce:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	68f9      	ldr	r1, [r7, #12]
 80040d8:	4618      	mov	r0, r3
 80040da:	f001 fb8b 	bl	80057f4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	2200      	movs	r2, #0
 80040e2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 80040e6:	7afb      	ldrb	r3, [r7, #11]
}
 80040e8:	4618      	mov	r0, r3
 80040ea:	3710      	adds	r7, #16
 80040ec:	46bd      	mov	sp, r7
 80040ee:	bd80      	pop	{r7, pc}

080040f0 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b084      	sub	sp, #16
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
 80040f8:	460b      	mov	r3, r1
 80040fa:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80040fc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004100:	2b00      	cmp	r3, #0
 8004102:	da0f      	bge.n	8004124 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004104:	78fb      	ldrb	r3, [r7, #3]
 8004106:	f003 020f 	and.w	r2, r3, #15
 800410a:	4613      	mov	r3, r2
 800410c:	00db      	lsls	r3, r3, #3
 800410e:	4413      	add	r3, r2
 8004110:	009b      	lsls	r3, r3, #2
 8004112:	3310      	adds	r3, #16
 8004114:	687a      	ldr	r2, [r7, #4]
 8004116:	4413      	add	r3, r2
 8004118:	3304      	adds	r3, #4
 800411a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	2201      	movs	r2, #1
 8004120:	705a      	strb	r2, [r3, #1]
 8004122:	e00f      	b.n	8004144 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004124:	78fb      	ldrb	r3, [r7, #3]
 8004126:	f003 020f 	and.w	r2, r3, #15
 800412a:	4613      	mov	r3, r2
 800412c:	00db      	lsls	r3, r3, #3
 800412e:	4413      	add	r3, r2
 8004130:	009b      	lsls	r3, r3, #2
 8004132:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004136:	687a      	ldr	r2, [r7, #4]
 8004138:	4413      	add	r3, r2
 800413a:	3304      	adds	r3, #4
 800413c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	2200      	movs	r2, #0
 8004142:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8004144:	78fb      	ldrb	r3, [r7, #3]
 8004146:	f003 030f 	and.w	r3, r3, #15
 800414a:	b2da      	uxtb	r2, r3
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004156:	2b01      	cmp	r3, #1
 8004158:	d101      	bne.n	800415e <HAL_PCD_EP_Close+0x6e>
 800415a:	2302      	movs	r3, #2
 800415c:	e00e      	b.n	800417c <HAL_PCD_EP_Close+0x8c>
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	2201      	movs	r2, #1
 8004162:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	68f9      	ldr	r1, [r7, #12]
 800416c:	4618      	mov	r0, r3
 800416e:	f001 fbc9 	bl	8005904 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	2200      	movs	r2, #0
 8004176:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 800417a:	2300      	movs	r3, #0
}
 800417c:	4618      	mov	r0, r3
 800417e:	3710      	adds	r7, #16
 8004180:	46bd      	mov	sp, r7
 8004182:	bd80      	pop	{r7, pc}

08004184 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004184:	b580      	push	{r7, lr}
 8004186:	b086      	sub	sp, #24
 8004188:	af00      	add	r7, sp, #0
 800418a:	60f8      	str	r0, [r7, #12]
 800418c:	607a      	str	r2, [r7, #4]
 800418e:	603b      	str	r3, [r7, #0]
 8004190:	460b      	mov	r3, r1
 8004192:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004194:	7afb      	ldrb	r3, [r7, #11]
 8004196:	f003 020f 	and.w	r2, r3, #15
 800419a:	4613      	mov	r3, r2
 800419c:	00db      	lsls	r3, r3, #3
 800419e:	4413      	add	r3, r2
 80041a0:	009b      	lsls	r3, r3, #2
 80041a2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80041a6:	68fa      	ldr	r2, [r7, #12]
 80041a8:	4413      	add	r3, r2
 80041aa:	3304      	adds	r3, #4
 80041ac:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80041ae:	697b      	ldr	r3, [r7, #20]
 80041b0:	687a      	ldr	r2, [r7, #4]
 80041b2:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80041b4:	697b      	ldr	r3, [r7, #20]
 80041b6:	683a      	ldr	r2, [r7, #0]
 80041b8:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80041ba:	697b      	ldr	r3, [r7, #20]
 80041bc:	2200      	movs	r2, #0
 80041be:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80041c0:	697b      	ldr	r3, [r7, #20]
 80041c2:	2200      	movs	r2, #0
 80041c4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80041c6:	7afb      	ldrb	r3, [r7, #11]
 80041c8:	f003 030f 	and.w	r3, r3, #15
 80041cc:	b2da      	uxtb	r2, r3
 80041ce:	697b      	ldr	r3, [r7, #20]
 80041d0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	799b      	ldrb	r3, [r3, #6]
 80041d6:	2b01      	cmp	r3, #1
 80041d8:	d102      	bne.n	80041e0 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80041da:	687a      	ldr	r2, [r7, #4]
 80041dc:	697b      	ldr	r3, [r7, #20]
 80041de:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	6818      	ldr	r0, [r3, #0]
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	799b      	ldrb	r3, [r3, #6]
 80041e8:	461a      	mov	r2, r3
 80041ea:	6979      	ldr	r1, [r7, #20]
 80041ec:	f001 fc66 	bl	8005abc <USB_EPStartXfer>

  return HAL_OK;
 80041f0:	2300      	movs	r3, #0
}
 80041f2:	4618      	mov	r0, r3
 80041f4:	3718      	adds	r7, #24
 80041f6:	46bd      	mov	sp, r7
 80041f8:	bd80      	pop	{r7, pc}

080041fa <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80041fa:	b580      	push	{r7, lr}
 80041fc:	b086      	sub	sp, #24
 80041fe:	af00      	add	r7, sp, #0
 8004200:	60f8      	str	r0, [r7, #12]
 8004202:	607a      	str	r2, [r7, #4]
 8004204:	603b      	str	r3, [r7, #0]
 8004206:	460b      	mov	r3, r1
 8004208:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800420a:	7afb      	ldrb	r3, [r7, #11]
 800420c:	f003 020f 	and.w	r2, r3, #15
 8004210:	4613      	mov	r3, r2
 8004212:	00db      	lsls	r3, r3, #3
 8004214:	4413      	add	r3, r2
 8004216:	009b      	lsls	r3, r3, #2
 8004218:	3310      	adds	r3, #16
 800421a:	68fa      	ldr	r2, [r7, #12]
 800421c:	4413      	add	r3, r2
 800421e:	3304      	adds	r3, #4
 8004220:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004222:	697b      	ldr	r3, [r7, #20]
 8004224:	687a      	ldr	r2, [r7, #4]
 8004226:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004228:	697b      	ldr	r3, [r7, #20]
 800422a:	683a      	ldr	r2, [r7, #0]
 800422c:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800422e:	697b      	ldr	r3, [r7, #20]
 8004230:	2200      	movs	r2, #0
 8004232:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8004234:	697b      	ldr	r3, [r7, #20]
 8004236:	2201      	movs	r2, #1
 8004238:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800423a:	7afb      	ldrb	r3, [r7, #11]
 800423c:	f003 030f 	and.w	r3, r3, #15
 8004240:	b2da      	uxtb	r2, r3
 8004242:	697b      	ldr	r3, [r7, #20]
 8004244:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	799b      	ldrb	r3, [r3, #6]
 800424a:	2b01      	cmp	r3, #1
 800424c:	d102      	bne.n	8004254 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800424e:	687a      	ldr	r2, [r7, #4]
 8004250:	697b      	ldr	r3, [r7, #20]
 8004252:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	6818      	ldr	r0, [r3, #0]
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	799b      	ldrb	r3, [r3, #6]
 800425c:	461a      	mov	r2, r3
 800425e:	6979      	ldr	r1, [r7, #20]
 8004260:	f001 fc2c 	bl	8005abc <USB_EPStartXfer>

  return HAL_OK;
 8004264:	2300      	movs	r3, #0
}
 8004266:	4618      	mov	r0, r3
 8004268:	3718      	adds	r7, #24
 800426a:	46bd      	mov	sp, r7
 800426c:	bd80      	pop	{r7, pc}

0800426e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800426e:	b580      	push	{r7, lr}
 8004270:	b084      	sub	sp, #16
 8004272:	af00      	add	r7, sp, #0
 8004274:	6078      	str	r0, [r7, #4]
 8004276:	460b      	mov	r3, r1
 8004278:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800427a:	78fb      	ldrb	r3, [r7, #3]
 800427c:	f003 030f 	and.w	r3, r3, #15
 8004280:	687a      	ldr	r2, [r7, #4]
 8004282:	7912      	ldrb	r2, [r2, #4]
 8004284:	4293      	cmp	r3, r2
 8004286:	d901      	bls.n	800428c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004288:	2301      	movs	r3, #1
 800428a:	e04f      	b.n	800432c <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800428c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004290:	2b00      	cmp	r3, #0
 8004292:	da0f      	bge.n	80042b4 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004294:	78fb      	ldrb	r3, [r7, #3]
 8004296:	f003 020f 	and.w	r2, r3, #15
 800429a:	4613      	mov	r3, r2
 800429c:	00db      	lsls	r3, r3, #3
 800429e:	4413      	add	r3, r2
 80042a0:	009b      	lsls	r3, r3, #2
 80042a2:	3310      	adds	r3, #16
 80042a4:	687a      	ldr	r2, [r7, #4]
 80042a6:	4413      	add	r3, r2
 80042a8:	3304      	adds	r3, #4
 80042aa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	2201      	movs	r2, #1
 80042b0:	705a      	strb	r2, [r3, #1]
 80042b2:	e00d      	b.n	80042d0 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80042b4:	78fa      	ldrb	r2, [r7, #3]
 80042b6:	4613      	mov	r3, r2
 80042b8:	00db      	lsls	r3, r3, #3
 80042ba:	4413      	add	r3, r2
 80042bc:	009b      	lsls	r3, r3, #2
 80042be:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80042c2:	687a      	ldr	r2, [r7, #4]
 80042c4:	4413      	add	r3, r2
 80042c6:	3304      	adds	r3, #4
 80042c8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	2200      	movs	r2, #0
 80042ce:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	2201      	movs	r2, #1
 80042d4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80042d6:	78fb      	ldrb	r3, [r7, #3]
 80042d8:	f003 030f 	and.w	r3, r3, #15
 80042dc:	b2da      	uxtb	r2, r3
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80042e8:	2b01      	cmp	r3, #1
 80042ea:	d101      	bne.n	80042f0 <HAL_PCD_EP_SetStall+0x82>
 80042ec:	2302      	movs	r3, #2
 80042ee:	e01d      	b.n	800432c <HAL_PCD_EP_SetStall+0xbe>
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2201      	movs	r2, #1
 80042f4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	68f9      	ldr	r1, [r7, #12]
 80042fe:	4618      	mov	r0, r3
 8004300:	f001 ffba 	bl	8006278 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004304:	78fb      	ldrb	r3, [r7, #3]
 8004306:	f003 030f 	and.w	r3, r3, #15
 800430a:	2b00      	cmp	r3, #0
 800430c:	d109      	bne.n	8004322 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6818      	ldr	r0, [r3, #0]
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	7999      	ldrb	r1, [r3, #6]
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800431c:	461a      	mov	r2, r3
 800431e:	f002 f9ab 	bl	8006678 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	2200      	movs	r2, #0
 8004326:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800432a:	2300      	movs	r3, #0
}
 800432c:	4618      	mov	r0, r3
 800432e:	3710      	adds	r7, #16
 8004330:	46bd      	mov	sp, r7
 8004332:	bd80      	pop	{r7, pc}

08004334 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	b084      	sub	sp, #16
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
 800433c:	460b      	mov	r3, r1
 800433e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004340:	78fb      	ldrb	r3, [r7, #3]
 8004342:	f003 030f 	and.w	r3, r3, #15
 8004346:	687a      	ldr	r2, [r7, #4]
 8004348:	7912      	ldrb	r2, [r2, #4]
 800434a:	4293      	cmp	r3, r2
 800434c:	d901      	bls.n	8004352 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800434e:	2301      	movs	r3, #1
 8004350:	e042      	b.n	80043d8 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004352:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004356:	2b00      	cmp	r3, #0
 8004358:	da0f      	bge.n	800437a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800435a:	78fb      	ldrb	r3, [r7, #3]
 800435c:	f003 020f 	and.w	r2, r3, #15
 8004360:	4613      	mov	r3, r2
 8004362:	00db      	lsls	r3, r3, #3
 8004364:	4413      	add	r3, r2
 8004366:	009b      	lsls	r3, r3, #2
 8004368:	3310      	adds	r3, #16
 800436a:	687a      	ldr	r2, [r7, #4]
 800436c:	4413      	add	r3, r2
 800436e:	3304      	adds	r3, #4
 8004370:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	2201      	movs	r2, #1
 8004376:	705a      	strb	r2, [r3, #1]
 8004378:	e00f      	b.n	800439a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800437a:	78fb      	ldrb	r3, [r7, #3]
 800437c:	f003 020f 	and.w	r2, r3, #15
 8004380:	4613      	mov	r3, r2
 8004382:	00db      	lsls	r3, r3, #3
 8004384:	4413      	add	r3, r2
 8004386:	009b      	lsls	r3, r3, #2
 8004388:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800438c:	687a      	ldr	r2, [r7, #4]
 800438e:	4413      	add	r3, r2
 8004390:	3304      	adds	r3, #4
 8004392:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	2200      	movs	r2, #0
 8004398:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	2200      	movs	r2, #0
 800439e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80043a0:	78fb      	ldrb	r3, [r7, #3]
 80043a2:	f003 030f 	and.w	r3, r3, #15
 80043a6:	b2da      	uxtb	r2, r3
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80043b2:	2b01      	cmp	r3, #1
 80043b4:	d101      	bne.n	80043ba <HAL_PCD_EP_ClrStall+0x86>
 80043b6:	2302      	movs	r3, #2
 80043b8:	e00e      	b.n	80043d8 <HAL_PCD_EP_ClrStall+0xa4>
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	2201      	movs	r2, #1
 80043be:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	68f9      	ldr	r1, [r7, #12]
 80043c8:	4618      	mov	r0, r3
 80043ca:	f001 ffc3 	bl	8006354 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	2200      	movs	r2, #0
 80043d2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80043d6:	2300      	movs	r3, #0
}
 80043d8:	4618      	mov	r0, r3
 80043da:	3710      	adds	r7, #16
 80043dc:	46bd      	mov	sp, r7
 80043de:	bd80      	pop	{r7, pc}

080043e0 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b084      	sub	sp, #16
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
 80043e8:	460b      	mov	r3, r1
 80043ea:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80043ec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	da0c      	bge.n	800440e <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80043f4:	78fb      	ldrb	r3, [r7, #3]
 80043f6:	f003 020f 	and.w	r2, r3, #15
 80043fa:	4613      	mov	r3, r2
 80043fc:	00db      	lsls	r3, r3, #3
 80043fe:	4413      	add	r3, r2
 8004400:	009b      	lsls	r3, r3, #2
 8004402:	3310      	adds	r3, #16
 8004404:	687a      	ldr	r2, [r7, #4]
 8004406:	4413      	add	r3, r2
 8004408:	3304      	adds	r3, #4
 800440a:	60fb      	str	r3, [r7, #12]
 800440c:	e00c      	b.n	8004428 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800440e:	78fb      	ldrb	r3, [r7, #3]
 8004410:	f003 020f 	and.w	r2, r3, #15
 8004414:	4613      	mov	r3, r2
 8004416:	00db      	lsls	r3, r3, #3
 8004418:	4413      	add	r3, r2
 800441a:	009b      	lsls	r3, r3, #2
 800441c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004420:	687a      	ldr	r2, [r7, #4]
 8004422:	4413      	add	r3, r2
 8004424:	3304      	adds	r3, #4
 8004426:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	68f9      	ldr	r1, [r7, #12]
 800442e:	4618      	mov	r0, r3
 8004430:	f001 fde2 	bl	8005ff8 <USB_EPStopXfer>
 8004434:	4603      	mov	r3, r0
 8004436:	72fb      	strb	r3, [r7, #11]

  return ret;
 8004438:	7afb      	ldrb	r3, [r7, #11]
}
 800443a:	4618      	mov	r0, r3
 800443c:	3710      	adds	r7, #16
 800443e:	46bd      	mov	sp, r7
 8004440:	bd80      	pop	{r7, pc}

08004442 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004442:	b580      	push	{r7, lr}
 8004444:	b08a      	sub	sp, #40	@ 0x28
 8004446:	af02      	add	r7, sp, #8
 8004448:	6078      	str	r0, [r7, #4]
 800444a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004452:	697b      	ldr	r3, [r7, #20]
 8004454:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004456:	683a      	ldr	r2, [r7, #0]
 8004458:	4613      	mov	r3, r2
 800445a:	00db      	lsls	r3, r3, #3
 800445c:	4413      	add	r3, r2
 800445e:	009b      	lsls	r3, r3, #2
 8004460:	3310      	adds	r3, #16
 8004462:	687a      	ldr	r2, [r7, #4]
 8004464:	4413      	add	r3, r2
 8004466:	3304      	adds	r3, #4
 8004468:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	695a      	ldr	r2, [r3, #20]
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	691b      	ldr	r3, [r3, #16]
 8004472:	429a      	cmp	r2, r3
 8004474:	d901      	bls.n	800447a <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004476:	2301      	movs	r3, #1
 8004478:	e06b      	b.n	8004552 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	691a      	ldr	r2, [r3, #16]
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	695b      	ldr	r3, [r3, #20]
 8004482:	1ad3      	subs	r3, r2, r3
 8004484:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	689b      	ldr	r3, [r3, #8]
 800448a:	69fa      	ldr	r2, [r7, #28]
 800448c:	429a      	cmp	r2, r3
 800448e:	d902      	bls.n	8004496 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	689b      	ldr	r3, [r3, #8]
 8004494:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004496:	69fb      	ldr	r3, [r7, #28]
 8004498:	3303      	adds	r3, #3
 800449a:	089b      	lsrs	r3, r3, #2
 800449c:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800449e:	e02a      	b.n	80044f6 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	691a      	ldr	r2, [r3, #16]
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	695b      	ldr	r3, [r3, #20]
 80044a8:	1ad3      	subs	r3, r2, r3
 80044aa:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	689b      	ldr	r3, [r3, #8]
 80044b0:	69fa      	ldr	r2, [r7, #28]
 80044b2:	429a      	cmp	r2, r3
 80044b4:	d902      	bls.n	80044bc <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	689b      	ldr	r3, [r3, #8]
 80044ba:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80044bc:	69fb      	ldr	r3, [r7, #28]
 80044be:	3303      	adds	r3, #3
 80044c0:	089b      	lsrs	r3, r3, #2
 80044c2:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	68d9      	ldr	r1, [r3, #12]
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	b2da      	uxtb	r2, r3
 80044cc:	69fb      	ldr	r3, [r7, #28]
 80044ce:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80044d4:	9300      	str	r3, [sp, #0]
 80044d6:	4603      	mov	r3, r0
 80044d8:	6978      	ldr	r0, [r7, #20]
 80044da:	f001 fe37 	bl	800614c <USB_WritePacket>

    ep->xfer_buff  += len;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	68da      	ldr	r2, [r3, #12]
 80044e2:	69fb      	ldr	r3, [r7, #28]
 80044e4:	441a      	add	r2, r3
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	695a      	ldr	r2, [r3, #20]
 80044ee:	69fb      	ldr	r3, [r7, #28]
 80044f0:	441a      	add	r2, r3
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	015a      	lsls	r2, r3, #5
 80044fa:	693b      	ldr	r3, [r7, #16]
 80044fc:	4413      	add	r3, r2
 80044fe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004502:	699b      	ldr	r3, [r3, #24]
 8004504:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004506:	69ba      	ldr	r2, [r7, #24]
 8004508:	429a      	cmp	r2, r3
 800450a:	d809      	bhi.n	8004520 <PCD_WriteEmptyTxFifo+0xde>
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	695a      	ldr	r2, [r3, #20]
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004514:	429a      	cmp	r2, r3
 8004516:	d203      	bcs.n	8004520 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	691b      	ldr	r3, [r3, #16]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d1bf      	bne.n	80044a0 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	691a      	ldr	r2, [r3, #16]
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	695b      	ldr	r3, [r3, #20]
 8004528:	429a      	cmp	r2, r3
 800452a:	d811      	bhi.n	8004550 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	f003 030f 	and.w	r3, r3, #15
 8004532:	2201      	movs	r2, #1
 8004534:	fa02 f303 	lsl.w	r3, r2, r3
 8004538:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800453a:	693b      	ldr	r3, [r7, #16]
 800453c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004540:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004542:	68bb      	ldr	r3, [r7, #8]
 8004544:	43db      	mvns	r3, r3
 8004546:	6939      	ldr	r1, [r7, #16]
 8004548:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800454c:	4013      	ands	r3, r2
 800454e:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8004550:	2300      	movs	r3, #0
}
 8004552:	4618      	mov	r0, r3
 8004554:	3720      	adds	r7, #32
 8004556:	46bd      	mov	sp, r7
 8004558:	bd80      	pop	{r7, pc}
	...

0800455c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800455c:	b580      	push	{r7, lr}
 800455e:	b088      	sub	sp, #32
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
 8004564:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800456c:	69fb      	ldr	r3, [r7, #28]
 800456e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004570:	69fb      	ldr	r3, [r7, #28]
 8004572:	333c      	adds	r3, #60	@ 0x3c
 8004574:	3304      	adds	r3, #4
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	015a      	lsls	r2, r3, #5
 800457e:	69bb      	ldr	r3, [r7, #24]
 8004580:	4413      	add	r3, r2
 8004582:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004586:	689b      	ldr	r3, [r3, #8]
 8004588:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	799b      	ldrb	r3, [r3, #6]
 800458e:	2b01      	cmp	r3, #1
 8004590:	d17b      	bne.n	800468a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004592:	693b      	ldr	r3, [r7, #16]
 8004594:	f003 0308 	and.w	r3, r3, #8
 8004598:	2b00      	cmp	r3, #0
 800459a:	d015      	beq.n	80045c8 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800459c:	697b      	ldr	r3, [r7, #20]
 800459e:	4a61      	ldr	r2, [pc, #388]	@ (8004724 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80045a0:	4293      	cmp	r3, r2
 80045a2:	f240 80b9 	bls.w	8004718 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80045a6:	693b      	ldr	r3, [r7, #16]
 80045a8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	f000 80b3 	beq.w	8004718 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	015a      	lsls	r2, r3, #5
 80045b6:	69bb      	ldr	r3, [r7, #24]
 80045b8:	4413      	add	r3, r2
 80045ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80045be:	461a      	mov	r2, r3
 80045c0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80045c4:	6093      	str	r3, [r2, #8]
 80045c6:	e0a7      	b.n	8004718 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80045c8:	693b      	ldr	r3, [r7, #16]
 80045ca:	f003 0320 	and.w	r3, r3, #32
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d009      	beq.n	80045e6 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	015a      	lsls	r2, r3, #5
 80045d6:	69bb      	ldr	r3, [r7, #24]
 80045d8:	4413      	add	r3, r2
 80045da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80045de:	461a      	mov	r2, r3
 80045e0:	2320      	movs	r3, #32
 80045e2:	6093      	str	r3, [r2, #8]
 80045e4:	e098      	b.n	8004718 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80045e6:	693b      	ldr	r3, [r7, #16]
 80045e8:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	f040 8093 	bne.w	8004718 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80045f2:	697b      	ldr	r3, [r7, #20]
 80045f4:	4a4b      	ldr	r2, [pc, #300]	@ (8004724 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d90f      	bls.n	800461a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80045fa:	693b      	ldr	r3, [r7, #16]
 80045fc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004600:	2b00      	cmp	r3, #0
 8004602:	d00a      	beq.n	800461a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	015a      	lsls	r2, r3, #5
 8004608:	69bb      	ldr	r3, [r7, #24]
 800460a:	4413      	add	r3, r2
 800460c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004610:	461a      	mov	r2, r3
 8004612:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004616:	6093      	str	r3, [r2, #8]
 8004618:	e07e      	b.n	8004718 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800461a:	683a      	ldr	r2, [r7, #0]
 800461c:	4613      	mov	r3, r2
 800461e:	00db      	lsls	r3, r3, #3
 8004620:	4413      	add	r3, r2
 8004622:	009b      	lsls	r3, r3, #2
 8004624:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004628:	687a      	ldr	r2, [r7, #4]
 800462a:	4413      	add	r3, r2
 800462c:	3304      	adds	r3, #4
 800462e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	6a1a      	ldr	r2, [r3, #32]
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	0159      	lsls	r1, r3, #5
 8004638:	69bb      	ldr	r3, [r7, #24]
 800463a:	440b      	add	r3, r1
 800463c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004640:	691b      	ldr	r3, [r3, #16]
 8004642:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004646:	1ad2      	subs	r2, r2, r3
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	2b00      	cmp	r3, #0
 8004650:	d114      	bne.n	800467c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	691b      	ldr	r3, [r3, #16]
 8004656:	2b00      	cmp	r3, #0
 8004658:	d109      	bne.n	800466e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6818      	ldr	r0, [r3, #0]
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004664:	461a      	mov	r2, r3
 8004666:	2101      	movs	r1, #1
 8004668:	f002 f806 	bl	8006678 <USB_EP0_OutStart>
 800466c:	e006      	b.n	800467c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	68da      	ldr	r2, [r3, #12]
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	695b      	ldr	r3, [r3, #20]
 8004676:	441a      	add	r2, r3
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	b2db      	uxtb	r3, r3
 8004680:	4619      	mov	r1, r3
 8004682:	6878      	ldr	r0, [r7, #4]
 8004684:	f003 ff90 	bl	80085a8 <HAL_PCD_DataOutStageCallback>
 8004688:	e046      	b.n	8004718 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800468a:	697b      	ldr	r3, [r7, #20]
 800468c:	4a26      	ldr	r2, [pc, #152]	@ (8004728 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800468e:	4293      	cmp	r3, r2
 8004690:	d124      	bne.n	80046dc <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004692:	693b      	ldr	r3, [r7, #16]
 8004694:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004698:	2b00      	cmp	r3, #0
 800469a:	d00a      	beq.n	80046b2 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	015a      	lsls	r2, r3, #5
 80046a0:	69bb      	ldr	r3, [r7, #24]
 80046a2:	4413      	add	r3, r2
 80046a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80046a8:	461a      	mov	r2, r3
 80046aa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80046ae:	6093      	str	r3, [r2, #8]
 80046b0:	e032      	b.n	8004718 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80046b2:	693b      	ldr	r3, [r7, #16]
 80046b4:	f003 0320 	and.w	r3, r3, #32
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d008      	beq.n	80046ce <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	015a      	lsls	r2, r3, #5
 80046c0:	69bb      	ldr	r3, [r7, #24]
 80046c2:	4413      	add	r3, r2
 80046c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80046c8:	461a      	mov	r2, r3
 80046ca:	2320      	movs	r3, #32
 80046cc:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	b2db      	uxtb	r3, r3
 80046d2:	4619      	mov	r1, r3
 80046d4:	6878      	ldr	r0, [r7, #4]
 80046d6:	f003 ff67 	bl	80085a8 <HAL_PCD_DataOutStageCallback>
 80046da:	e01d      	b.n	8004718 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d114      	bne.n	800470c <PCD_EP_OutXfrComplete_int+0x1b0>
 80046e2:	6879      	ldr	r1, [r7, #4]
 80046e4:	683a      	ldr	r2, [r7, #0]
 80046e6:	4613      	mov	r3, r2
 80046e8:	00db      	lsls	r3, r3, #3
 80046ea:	4413      	add	r3, r2
 80046ec:	009b      	lsls	r3, r3, #2
 80046ee:	440b      	add	r3, r1
 80046f0:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d108      	bne.n	800470c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6818      	ldr	r0, [r3, #0]
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004704:	461a      	mov	r2, r3
 8004706:	2100      	movs	r1, #0
 8004708:	f001 ffb6 	bl	8006678 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800470c:	683b      	ldr	r3, [r7, #0]
 800470e:	b2db      	uxtb	r3, r3
 8004710:	4619      	mov	r1, r3
 8004712:	6878      	ldr	r0, [r7, #4]
 8004714:	f003 ff48 	bl	80085a8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004718:	2300      	movs	r3, #0
}
 800471a:	4618      	mov	r0, r3
 800471c:	3720      	adds	r7, #32
 800471e:	46bd      	mov	sp, r7
 8004720:	bd80      	pop	{r7, pc}
 8004722:	bf00      	nop
 8004724:	4f54300a 	.word	0x4f54300a
 8004728:	4f54310a 	.word	0x4f54310a

0800472c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800472c:	b580      	push	{r7, lr}
 800472e:	b086      	sub	sp, #24
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
 8004734:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800473c:	697b      	ldr	r3, [r7, #20]
 800473e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004740:	697b      	ldr	r3, [r7, #20]
 8004742:	333c      	adds	r3, #60	@ 0x3c
 8004744:	3304      	adds	r3, #4
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	015a      	lsls	r2, r3, #5
 800474e:	693b      	ldr	r3, [r7, #16]
 8004750:	4413      	add	r3, r2
 8004752:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004756:	689b      	ldr	r3, [r3, #8]
 8004758:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	4a15      	ldr	r2, [pc, #84]	@ (80047b4 <PCD_EP_OutSetupPacket_int+0x88>)
 800475e:	4293      	cmp	r3, r2
 8004760:	d90e      	bls.n	8004780 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004762:	68bb      	ldr	r3, [r7, #8]
 8004764:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004768:	2b00      	cmp	r3, #0
 800476a:	d009      	beq.n	8004780 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	015a      	lsls	r2, r3, #5
 8004770:	693b      	ldr	r3, [r7, #16]
 8004772:	4413      	add	r3, r2
 8004774:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004778:	461a      	mov	r2, r3
 800477a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800477e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004780:	6878      	ldr	r0, [r7, #4]
 8004782:	f003 feff 	bl	8008584 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	4a0a      	ldr	r2, [pc, #40]	@ (80047b4 <PCD_EP_OutSetupPacket_int+0x88>)
 800478a:	4293      	cmp	r3, r2
 800478c:	d90c      	bls.n	80047a8 <PCD_EP_OutSetupPacket_int+0x7c>
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	799b      	ldrb	r3, [r3, #6]
 8004792:	2b01      	cmp	r3, #1
 8004794:	d108      	bne.n	80047a8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6818      	ldr	r0, [r3, #0]
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80047a0:	461a      	mov	r2, r3
 80047a2:	2101      	movs	r1, #1
 80047a4:	f001 ff68 	bl	8006678 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80047a8:	2300      	movs	r3, #0
}
 80047aa:	4618      	mov	r0, r3
 80047ac:	3718      	adds	r7, #24
 80047ae:	46bd      	mov	sp, r7
 80047b0:	bd80      	pop	{r7, pc}
 80047b2:	bf00      	nop
 80047b4:	4f54300a 	.word	0x4f54300a

080047b8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80047b8:	b480      	push	{r7}
 80047ba:	b085      	sub	sp, #20
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
 80047c0:	460b      	mov	r3, r1
 80047c2:	70fb      	strb	r3, [r7, #3]
 80047c4:	4613      	mov	r3, r2
 80047c6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047ce:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80047d0:	78fb      	ldrb	r3, [r7, #3]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d107      	bne.n	80047e6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80047d6:	883b      	ldrh	r3, [r7, #0]
 80047d8:	0419      	lsls	r1, r3, #16
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	68ba      	ldr	r2, [r7, #8]
 80047e0:	430a      	orrs	r2, r1
 80047e2:	629a      	str	r2, [r3, #40]	@ 0x28
 80047e4:	e028      	b.n	8004838 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047ec:	0c1b      	lsrs	r3, r3, #16
 80047ee:	68ba      	ldr	r2, [r7, #8]
 80047f0:	4413      	add	r3, r2
 80047f2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80047f4:	2300      	movs	r3, #0
 80047f6:	73fb      	strb	r3, [r7, #15]
 80047f8:	e00d      	b.n	8004816 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681a      	ldr	r2, [r3, #0]
 80047fe:	7bfb      	ldrb	r3, [r7, #15]
 8004800:	3340      	adds	r3, #64	@ 0x40
 8004802:	009b      	lsls	r3, r3, #2
 8004804:	4413      	add	r3, r2
 8004806:	685b      	ldr	r3, [r3, #4]
 8004808:	0c1b      	lsrs	r3, r3, #16
 800480a:	68ba      	ldr	r2, [r7, #8]
 800480c:	4413      	add	r3, r2
 800480e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004810:	7bfb      	ldrb	r3, [r7, #15]
 8004812:	3301      	adds	r3, #1
 8004814:	73fb      	strb	r3, [r7, #15]
 8004816:	7bfa      	ldrb	r2, [r7, #15]
 8004818:	78fb      	ldrb	r3, [r7, #3]
 800481a:	3b01      	subs	r3, #1
 800481c:	429a      	cmp	r2, r3
 800481e:	d3ec      	bcc.n	80047fa <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004820:	883b      	ldrh	r3, [r7, #0]
 8004822:	0418      	lsls	r0, r3, #16
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	6819      	ldr	r1, [r3, #0]
 8004828:	78fb      	ldrb	r3, [r7, #3]
 800482a:	3b01      	subs	r3, #1
 800482c:	68ba      	ldr	r2, [r7, #8]
 800482e:	4302      	orrs	r2, r0
 8004830:	3340      	adds	r3, #64	@ 0x40
 8004832:	009b      	lsls	r3, r3, #2
 8004834:	440b      	add	r3, r1
 8004836:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004838:	2300      	movs	r3, #0
}
 800483a:	4618      	mov	r0, r3
 800483c:	3714      	adds	r7, #20
 800483e:	46bd      	mov	sp, r7
 8004840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004844:	4770      	bx	lr

08004846 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004846:	b480      	push	{r7}
 8004848:	b083      	sub	sp, #12
 800484a:	af00      	add	r7, sp, #0
 800484c:	6078      	str	r0, [r7, #4]
 800484e:	460b      	mov	r3, r1
 8004850:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	887a      	ldrh	r2, [r7, #2]
 8004858:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800485a:	2300      	movs	r3, #0
}
 800485c:	4618      	mov	r0, r3
 800485e:	370c      	adds	r7, #12
 8004860:	46bd      	mov	sp, r7
 8004862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004866:	4770      	bx	lr

08004868 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004868:	b480      	push	{r7}
 800486a:	b083      	sub	sp, #12
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
 8004870:	460b      	mov	r3, r1
 8004872:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004874:	bf00      	nop
 8004876:	370c      	adds	r7, #12
 8004878:	46bd      	mov	sp, r7
 800487a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487e:	4770      	bx	lr

08004880 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004880:	b580      	push	{r7, lr}
 8004882:	b086      	sub	sp, #24
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2b00      	cmp	r3, #0
 800488c:	d101      	bne.n	8004892 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800488e:	2301      	movs	r3, #1
 8004890:	e267      	b.n	8004d62 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f003 0301 	and.w	r3, r3, #1
 800489a:	2b00      	cmp	r3, #0
 800489c:	d075      	beq.n	800498a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800489e:	4b88      	ldr	r3, [pc, #544]	@ (8004ac0 <HAL_RCC_OscConfig+0x240>)
 80048a0:	689b      	ldr	r3, [r3, #8]
 80048a2:	f003 030c 	and.w	r3, r3, #12
 80048a6:	2b04      	cmp	r3, #4
 80048a8:	d00c      	beq.n	80048c4 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80048aa:	4b85      	ldr	r3, [pc, #532]	@ (8004ac0 <HAL_RCC_OscConfig+0x240>)
 80048ac:	689b      	ldr	r3, [r3, #8]
 80048ae:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80048b2:	2b08      	cmp	r3, #8
 80048b4:	d112      	bne.n	80048dc <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80048b6:	4b82      	ldr	r3, [pc, #520]	@ (8004ac0 <HAL_RCC_OscConfig+0x240>)
 80048b8:	685b      	ldr	r3, [r3, #4]
 80048ba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80048be:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80048c2:	d10b      	bne.n	80048dc <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048c4:	4b7e      	ldr	r3, [pc, #504]	@ (8004ac0 <HAL_RCC_OscConfig+0x240>)
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d05b      	beq.n	8004988 <HAL_RCC_OscConfig+0x108>
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	685b      	ldr	r3, [r3, #4]
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d157      	bne.n	8004988 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80048d8:	2301      	movs	r3, #1
 80048da:	e242      	b.n	8004d62 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	685b      	ldr	r3, [r3, #4]
 80048e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80048e4:	d106      	bne.n	80048f4 <HAL_RCC_OscConfig+0x74>
 80048e6:	4b76      	ldr	r3, [pc, #472]	@ (8004ac0 <HAL_RCC_OscConfig+0x240>)
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	4a75      	ldr	r2, [pc, #468]	@ (8004ac0 <HAL_RCC_OscConfig+0x240>)
 80048ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80048f0:	6013      	str	r3, [r2, #0]
 80048f2:	e01d      	b.n	8004930 <HAL_RCC_OscConfig+0xb0>
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	685b      	ldr	r3, [r3, #4]
 80048f8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80048fc:	d10c      	bne.n	8004918 <HAL_RCC_OscConfig+0x98>
 80048fe:	4b70      	ldr	r3, [pc, #448]	@ (8004ac0 <HAL_RCC_OscConfig+0x240>)
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	4a6f      	ldr	r2, [pc, #444]	@ (8004ac0 <HAL_RCC_OscConfig+0x240>)
 8004904:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004908:	6013      	str	r3, [r2, #0]
 800490a:	4b6d      	ldr	r3, [pc, #436]	@ (8004ac0 <HAL_RCC_OscConfig+0x240>)
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	4a6c      	ldr	r2, [pc, #432]	@ (8004ac0 <HAL_RCC_OscConfig+0x240>)
 8004910:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004914:	6013      	str	r3, [r2, #0]
 8004916:	e00b      	b.n	8004930 <HAL_RCC_OscConfig+0xb0>
 8004918:	4b69      	ldr	r3, [pc, #420]	@ (8004ac0 <HAL_RCC_OscConfig+0x240>)
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	4a68      	ldr	r2, [pc, #416]	@ (8004ac0 <HAL_RCC_OscConfig+0x240>)
 800491e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004922:	6013      	str	r3, [r2, #0]
 8004924:	4b66      	ldr	r3, [pc, #408]	@ (8004ac0 <HAL_RCC_OscConfig+0x240>)
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	4a65      	ldr	r2, [pc, #404]	@ (8004ac0 <HAL_RCC_OscConfig+0x240>)
 800492a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800492e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	685b      	ldr	r3, [r3, #4]
 8004934:	2b00      	cmp	r3, #0
 8004936:	d013      	beq.n	8004960 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004938:	f7fd f9c2 	bl	8001cc0 <HAL_GetTick>
 800493c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800493e:	e008      	b.n	8004952 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004940:	f7fd f9be 	bl	8001cc0 <HAL_GetTick>
 8004944:	4602      	mov	r2, r0
 8004946:	693b      	ldr	r3, [r7, #16]
 8004948:	1ad3      	subs	r3, r2, r3
 800494a:	2b64      	cmp	r3, #100	@ 0x64
 800494c:	d901      	bls.n	8004952 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800494e:	2303      	movs	r3, #3
 8004950:	e207      	b.n	8004d62 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004952:	4b5b      	ldr	r3, [pc, #364]	@ (8004ac0 <HAL_RCC_OscConfig+0x240>)
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800495a:	2b00      	cmp	r3, #0
 800495c:	d0f0      	beq.n	8004940 <HAL_RCC_OscConfig+0xc0>
 800495e:	e014      	b.n	800498a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004960:	f7fd f9ae 	bl	8001cc0 <HAL_GetTick>
 8004964:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004966:	e008      	b.n	800497a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004968:	f7fd f9aa 	bl	8001cc0 <HAL_GetTick>
 800496c:	4602      	mov	r2, r0
 800496e:	693b      	ldr	r3, [r7, #16]
 8004970:	1ad3      	subs	r3, r2, r3
 8004972:	2b64      	cmp	r3, #100	@ 0x64
 8004974:	d901      	bls.n	800497a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004976:	2303      	movs	r3, #3
 8004978:	e1f3      	b.n	8004d62 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800497a:	4b51      	ldr	r3, [pc, #324]	@ (8004ac0 <HAL_RCC_OscConfig+0x240>)
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004982:	2b00      	cmp	r3, #0
 8004984:	d1f0      	bne.n	8004968 <HAL_RCC_OscConfig+0xe8>
 8004986:	e000      	b.n	800498a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004988:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f003 0302 	and.w	r3, r3, #2
 8004992:	2b00      	cmp	r3, #0
 8004994:	d063      	beq.n	8004a5e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004996:	4b4a      	ldr	r3, [pc, #296]	@ (8004ac0 <HAL_RCC_OscConfig+0x240>)
 8004998:	689b      	ldr	r3, [r3, #8]
 800499a:	f003 030c 	and.w	r3, r3, #12
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d00b      	beq.n	80049ba <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80049a2:	4b47      	ldr	r3, [pc, #284]	@ (8004ac0 <HAL_RCC_OscConfig+0x240>)
 80049a4:	689b      	ldr	r3, [r3, #8]
 80049a6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80049aa:	2b08      	cmp	r3, #8
 80049ac:	d11c      	bne.n	80049e8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80049ae:	4b44      	ldr	r3, [pc, #272]	@ (8004ac0 <HAL_RCC_OscConfig+0x240>)
 80049b0:	685b      	ldr	r3, [r3, #4]
 80049b2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d116      	bne.n	80049e8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80049ba:	4b41      	ldr	r3, [pc, #260]	@ (8004ac0 <HAL_RCC_OscConfig+0x240>)
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f003 0302 	and.w	r3, r3, #2
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d005      	beq.n	80049d2 <HAL_RCC_OscConfig+0x152>
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	68db      	ldr	r3, [r3, #12]
 80049ca:	2b01      	cmp	r3, #1
 80049cc:	d001      	beq.n	80049d2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80049ce:	2301      	movs	r3, #1
 80049d0:	e1c7      	b.n	8004d62 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049d2:	4b3b      	ldr	r3, [pc, #236]	@ (8004ac0 <HAL_RCC_OscConfig+0x240>)
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	691b      	ldr	r3, [r3, #16]
 80049de:	00db      	lsls	r3, r3, #3
 80049e0:	4937      	ldr	r1, [pc, #220]	@ (8004ac0 <HAL_RCC_OscConfig+0x240>)
 80049e2:	4313      	orrs	r3, r2
 80049e4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80049e6:	e03a      	b.n	8004a5e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	68db      	ldr	r3, [r3, #12]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d020      	beq.n	8004a32 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80049f0:	4b34      	ldr	r3, [pc, #208]	@ (8004ac4 <HAL_RCC_OscConfig+0x244>)
 80049f2:	2201      	movs	r2, #1
 80049f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049f6:	f7fd f963 	bl	8001cc0 <HAL_GetTick>
 80049fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049fc:	e008      	b.n	8004a10 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80049fe:	f7fd f95f 	bl	8001cc0 <HAL_GetTick>
 8004a02:	4602      	mov	r2, r0
 8004a04:	693b      	ldr	r3, [r7, #16]
 8004a06:	1ad3      	subs	r3, r2, r3
 8004a08:	2b02      	cmp	r3, #2
 8004a0a:	d901      	bls.n	8004a10 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004a0c:	2303      	movs	r3, #3
 8004a0e:	e1a8      	b.n	8004d62 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a10:	4b2b      	ldr	r3, [pc, #172]	@ (8004ac0 <HAL_RCC_OscConfig+0x240>)
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f003 0302 	and.w	r3, r3, #2
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d0f0      	beq.n	80049fe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a1c:	4b28      	ldr	r3, [pc, #160]	@ (8004ac0 <HAL_RCC_OscConfig+0x240>)
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	691b      	ldr	r3, [r3, #16]
 8004a28:	00db      	lsls	r3, r3, #3
 8004a2a:	4925      	ldr	r1, [pc, #148]	@ (8004ac0 <HAL_RCC_OscConfig+0x240>)
 8004a2c:	4313      	orrs	r3, r2
 8004a2e:	600b      	str	r3, [r1, #0]
 8004a30:	e015      	b.n	8004a5e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004a32:	4b24      	ldr	r3, [pc, #144]	@ (8004ac4 <HAL_RCC_OscConfig+0x244>)
 8004a34:	2200      	movs	r2, #0
 8004a36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a38:	f7fd f942 	bl	8001cc0 <HAL_GetTick>
 8004a3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a3e:	e008      	b.n	8004a52 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004a40:	f7fd f93e 	bl	8001cc0 <HAL_GetTick>
 8004a44:	4602      	mov	r2, r0
 8004a46:	693b      	ldr	r3, [r7, #16]
 8004a48:	1ad3      	subs	r3, r2, r3
 8004a4a:	2b02      	cmp	r3, #2
 8004a4c:	d901      	bls.n	8004a52 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004a4e:	2303      	movs	r3, #3
 8004a50:	e187      	b.n	8004d62 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a52:	4b1b      	ldr	r3, [pc, #108]	@ (8004ac0 <HAL_RCC_OscConfig+0x240>)
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f003 0302 	and.w	r3, r3, #2
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d1f0      	bne.n	8004a40 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f003 0308 	and.w	r3, r3, #8
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d036      	beq.n	8004ad8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	695b      	ldr	r3, [r3, #20]
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d016      	beq.n	8004aa0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004a72:	4b15      	ldr	r3, [pc, #84]	@ (8004ac8 <HAL_RCC_OscConfig+0x248>)
 8004a74:	2201      	movs	r2, #1
 8004a76:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a78:	f7fd f922 	bl	8001cc0 <HAL_GetTick>
 8004a7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a7e:	e008      	b.n	8004a92 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004a80:	f7fd f91e 	bl	8001cc0 <HAL_GetTick>
 8004a84:	4602      	mov	r2, r0
 8004a86:	693b      	ldr	r3, [r7, #16]
 8004a88:	1ad3      	subs	r3, r2, r3
 8004a8a:	2b02      	cmp	r3, #2
 8004a8c:	d901      	bls.n	8004a92 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004a8e:	2303      	movs	r3, #3
 8004a90:	e167      	b.n	8004d62 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a92:	4b0b      	ldr	r3, [pc, #44]	@ (8004ac0 <HAL_RCC_OscConfig+0x240>)
 8004a94:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004a96:	f003 0302 	and.w	r3, r3, #2
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d0f0      	beq.n	8004a80 <HAL_RCC_OscConfig+0x200>
 8004a9e:	e01b      	b.n	8004ad8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004aa0:	4b09      	ldr	r3, [pc, #36]	@ (8004ac8 <HAL_RCC_OscConfig+0x248>)
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004aa6:	f7fd f90b 	bl	8001cc0 <HAL_GetTick>
 8004aaa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004aac:	e00e      	b.n	8004acc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004aae:	f7fd f907 	bl	8001cc0 <HAL_GetTick>
 8004ab2:	4602      	mov	r2, r0
 8004ab4:	693b      	ldr	r3, [r7, #16]
 8004ab6:	1ad3      	subs	r3, r2, r3
 8004ab8:	2b02      	cmp	r3, #2
 8004aba:	d907      	bls.n	8004acc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004abc:	2303      	movs	r3, #3
 8004abe:	e150      	b.n	8004d62 <HAL_RCC_OscConfig+0x4e2>
 8004ac0:	40023800 	.word	0x40023800
 8004ac4:	42470000 	.word	0x42470000
 8004ac8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004acc:	4b88      	ldr	r3, [pc, #544]	@ (8004cf0 <HAL_RCC_OscConfig+0x470>)
 8004ace:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004ad0:	f003 0302 	and.w	r3, r3, #2
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d1ea      	bne.n	8004aae <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f003 0304 	and.w	r3, r3, #4
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	f000 8097 	beq.w	8004c14 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004aea:	4b81      	ldr	r3, [pc, #516]	@ (8004cf0 <HAL_RCC_OscConfig+0x470>)
 8004aec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004aee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d10f      	bne.n	8004b16 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004af6:	2300      	movs	r3, #0
 8004af8:	60bb      	str	r3, [r7, #8]
 8004afa:	4b7d      	ldr	r3, [pc, #500]	@ (8004cf0 <HAL_RCC_OscConfig+0x470>)
 8004afc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004afe:	4a7c      	ldr	r2, [pc, #496]	@ (8004cf0 <HAL_RCC_OscConfig+0x470>)
 8004b00:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004b04:	6413      	str	r3, [r2, #64]	@ 0x40
 8004b06:	4b7a      	ldr	r3, [pc, #488]	@ (8004cf0 <HAL_RCC_OscConfig+0x470>)
 8004b08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004b0e:	60bb      	str	r3, [r7, #8]
 8004b10:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b12:	2301      	movs	r3, #1
 8004b14:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b16:	4b77      	ldr	r3, [pc, #476]	@ (8004cf4 <HAL_RCC_OscConfig+0x474>)
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d118      	bne.n	8004b54 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004b22:	4b74      	ldr	r3, [pc, #464]	@ (8004cf4 <HAL_RCC_OscConfig+0x474>)
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	4a73      	ldr	r2, [pc, #460]	@ (8004cf4 <HAL_RCC_OscConfig+0x474>)
 8004b28:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004b2c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004b2e:	f7fd f8c7 	bl	8001cc0 <HAL_GetTick>
 8004b32:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b34:	e008      	b.n	8004b48 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b36:	f7fd f8c3 	bl	8001cc0 <HAL_GetTick>
 8004b3a:	4602      	mov	r2, r0
 8004b3c:	693b      	ldr	r3, [r7, #16]
 8004b3e:	1ad3      	subs	r3, r2, r3
 8004b40:	2b02      	cmp	r3, #2
 8004b42:	d901      	bls.n	8004b48 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004b44:	2303      	movs	r3, #3
 8004b46:	e10c      	b.n	8004d62 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b48:	4b6a      	ldr	r3, [pc, #424]	@ (8004cf4 <HAL_RCC_OscConfig+0x474>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d0f0      	beq.n	8004b36 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	689b      	ldr	r3, [r3, #8]
 8004b58:	2b01      	cmp	r3, #1
 8004b5a:	d106      	bne.n	8004b6a <HAL_RCC_OscConfig+0x2ea>
 8004b5c:	4b64      	ldr	r3, [pc, #400]	@ (8004cf0 <HAL_RCC_OscConfig+0x470>)
 8004b5e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b60:	4a63      	ldr	r2, [pc, #396]	@ (8004cf0 <HAL_RCC_OscConfig+0x470>)
 8004b62:	f043 0301 	orr.w	r3, r3, #1
 8004b66:	6713      	str	r3, [r2, #112]	@ 0x70
 8004b68:	e01c      	b.n	8004ba4 <HAL_RCC_OscConfig+0x324>
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	689b      	ldr	r3, [r3, #8]
 8004b6e:	2b05      	cmp	r3, #5
 8004b70:	d10c      	bne.n	8004b8c <HAL_RCC_OscConfig+0x30c>
 8004b72:	4b5f      	ldr	r3, [pc, #380]	@ (8004cf0 <HAL_RCC_OscConfig+0x470>)
 8004b74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b76:	4a5e      	ldr	r2, [pc, #376]	@ (8004cf0 <HAL_RCC_OscConfig+0x470>)
 8004b78:	f043 0304 	orr.w	r3, r3, #4
 8004b7c:	6713      	str	r3, [r2, #112]	@ 0x70
 8004b7e:	4b5c      	ldr	r3, [pc, #368]	@ (8004cf0 <HAL_RCC_OscConfig+0x470>)
 8004b80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b82:	4a5b      	ldr	r2, [pc, #364]	@ (8004cf0 <HAL_RCC_OscConfig+0x470>)
 8004b84:	f043 0301 	orr.w	r3, r3, #1
 8004b88:	6713      	str	r3, [r2, #112]	@ 0x70
 8004b8a:	e00b      	b.n	8004ba4 <HAL_RCC_OscConfig+0x324>
 8004b8c:	4b58      	ldr	r3, [pc, #352]	@ (8004cf0 <HAL_RCC_OscConfig+0x470>)
 8004b8e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b90:	4a57      	ldr	r2, [pc, #348]	@ (8004cf0 <HAL_RCC_OscConfig+0x470>)
 8004b92:	f023 0301 	bic.w	r3, r3, #1
 8004b96:	6713      	str	r3, [r2, #112]	@ 0x70
 8004b98:	4b55      	ldr	r3, [pc, #340]	@ (8004cf0 <HAL_RCC_OscConfig+0x470>)
 8004b9a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b9c:	4a54      	ldr	r2, [pc, #336]	@ (8004cf0 <HAL_RCC_OscConfig+0x470>)
 8004b9e:	f023 0304 	bic.w	r3, r3, #4
 8004ba2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	689b      	ldr	r3, [r3, #8]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d015      	beq.n	8004bd8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bac:	f7fd f888 	bl	8001cc0 <HAL_GetTick>
 8004bb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004bb2:	e00a      	b.n	8004bca <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004bb4:	f7fd f884 	bl	8001cc0 <HAL_GetTick>
 8004bb8:	4602      	mov	r2, r0
 8004bba:	693b      	ldr	r3, [r7, #16]
 8004bbc:	1ad3      	subs	r3, r2, r3
 8004bbe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004bc2:	4293      	cmp	r3, r2
 8004bc4:	d901      	bls.n	8004bca <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004bc6:	2303      	movs	r3, #3
 8004bc8:	e0cb      	b.n	8004d62 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004bca:	4b49      	ldr	r3, [pc, #292]	@ (8004cf0 <HAL_RCC_OscConfig+0x470>)
 8004bcc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004bce:	f003 0302 	and.w	r3, r3, #2
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d0ee      	beq.n	8004bb4 <HAL_RCC_OscConfig+0x334>
 8004bd6:	e014      	b.n	8004c02 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004bd8:	f7fd f872 	bl	8001cc0 <HAL_GetTick>
 8004bdc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004bde:	e00a      	b.n	8004bf6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004be0:	f7fd f86e 	bl	8001cc0 <HAL_GetTick>
 8004be4:	4602      	mov	r2, r0
 8004be6:	693b      	ldr	r3, [r7, #16]
 8004be8:	1ad3      	subs	r3, r2, r3
 8004bea:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	d901      	bls.n	8004bf6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004bf2:	2303      	movs	r3, #3
 8004bf4:	e0b5      	b.n	8004d62 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004bf6:	4b3e      	ldr	r3, [pc, #248]	@ (8004cf0 <HAL_RCC_OscConfig+0x470>)
 8004bf8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004bfa:	f003 0302 	and.w	r3, r3, #2
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d1ee      	bne.n	8004be0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004c02:	7dfb      	ldrb	r3, [r7, #23]
 8004c04:	2b01      	cmp	r3, #1
 8004c06:	d105      	bne.n	8004c14 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c08:	4b39      	ldr	r3, [pc, #228]	@ (8004cf0 <HAL_RCC_OscConfig+0x470>)
 8004c0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c0c:	4a38      	ldr	r2, [pc, #224]	@ (8004cf0 <HAL_RCC_OscConfig+0x470>)
 8004c0e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004c12:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	699b      	ldr	r3, [r3, #24]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	f000 80a1 	beq.w	8004d60 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004c1e:	4b34      	ldr	r3, [pc, #208]	@ (8004cf0 <HAL_RCC_OscConfig+0x470>)
 8004c20:	689b      	ldr	r3, [r3, #8]
 8004c22:	f003 030c 	and.w	r3, r3, #12
 8004c26:	2b08      	cmp	r3, #8
 8004c28:	d05c      	beq.n	8004ce4 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	699b      	ldr	r3, [r3, #24]
 8004c2e:	2b02      	cmp	r3, #2
 8004c30:	d141      	bne.n	8004cb6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c32:	4b31      	ldr	r3, [pc, #196]	@ (8004cf8 <HAL_RCC_OscConfig+0x478>)
 8004c34:	2200      	movs	r2, #0
 8004c36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c38:	f7fd f842 	bl	8001cc0 <HAL_GetTick>
 8004c3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c3e:	e008      	b.n	8004c52 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c40:	f7fd f83e 	bl	8001cc0 <HAL_GetTick>
 8004c44:	4602      	mov	r2, r0
 8004c46:	693b      	ldr	r3, [r7, #16]
 8004c48:	1ad3      	subs	r3, r2, r3
 8004c4a:	2b02      	cmp	r3, #2
 8004c4c:	d901      	bls.n	8004c52 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004c4e:	2303      	movs	r3, #3
 8004c50:	e087      	b.n	8004d62 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c52:	4b27      	ldr	r3, [pc, #156]	@ (8004cf0 <HAL_RCC_OscConfig+0x470>)
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d1f0      	bne.n	8004c40 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	69da      	ldr	r2, [r3, #28]
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6a1b      	ldr	r3, [r3, #32]
 8004c66:	431a      	orrs	r2, r3
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c6c:	019b      	lsls	r3, r3, #6
 8004c6e:	431a      	orrs	r2, r3
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c74:	085b      	lsrs	r3, r3, #1
 8004c76:	3b01      	subs	r3, #1
 8004c78:	041b      	lsls	r3, r3, #16
 8004c7a:	431a      	orrs	r2, r3
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c80:	061b      	lsls	r3, r3, #24
 8004c82:	491b      	ldr	r1, [pc, #108]	@ (8004cf0 <HAL_RCC_OscConfig+0x470>)
 8004c84:	4313      	orrs	r3, r2
 8004c86:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004c88:	4b1b      	ldr	r3, [pc, #108]	@ (8004cf8 <HAL_RCC_OscConfig+0x478>)
 8004c8a:	2201      	movs	r2, #1
 8004c8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c8e:	f7fd f817 	bl	8001cc0 <HAL_GetTick>
 8004c92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c94:	e008      	b.n	8004ca8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c96:	f7fd f813 	bl	8001cc0 <HAL_GetTick>
 8004c9a:	4602      	mov	r2, r0
 8004c9c:	693b      	ldr	r3, [r7, #16]
 8004c9e:	1ad3      	subs	r3, r2, r3
 8004ca0:	2b02      	cmp	r3, #2
 8004ca2:	d901      	bls.n	8004ca8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004ca4:	2303      	movs	r3, #3
 8004ca6:	e05c      	b.n	8004d62 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ca8:	4b11      	ldr	r3, [pc, #68]	@ (8004cf0 <HAL_RCC_OscConfig+0x470>)
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d0f0      	beq.n	8004c96 <HAL_RCC_OscConfig+0x416>
 8004cb4:	e054      	b.n	8004d60 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004cb6:	4b10      	ldr	r3, [pc, #64]	@ (8004cf8 <HAL_RCC_OscConfig+0x478>)
 8004cb8:	2200      	movs	r2, #0
 8004cba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cbc:	f7fd f800 	bl	8001cc0 <HAL_GetTick>
 8004cc0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004cc2:	e008      	b.n	8004cd6 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004cc4:	f7fc fffc 	bl	8001cc0 <HAL_GetTick>
 8004cc8:	4602      	mov	r2, r0
 8004cca:	693b      	ldr	r3, [r7, #16]
 8004ccc:	1ad3      	subs	r3, r2, r3
 8004cce:	2b02      	cmp	r3, #2
 8004cd0:	d901      	bls.n	8004cd6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004cd2:	2303      	movs	r3, #3
 8004cd4:	e045      	b.n	8004d62 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004cd6:	4b06      	ldr	r3, [pc, #24]	@ (8004cf0 <HAL_RCC_OscConfig+0x470>)
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d1f0      	bne.n	8004cc4 <HAL_RCC_OscConfig+0x444>
 8004ce2:	e03d      	b.n	8004d60 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	699b      	ldr	r3, [r3, #24]
 8004ce8:	2b01      	cmp	r3, #1
 8004cea:	d107      	bne.n	8004cfc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004cec:	2301      	movs	r3, #1
 8004cee:	e038      	b.n	8004d62 <HAL_RCC_OscConfig+0x4e2>
 8004cf0:	40023800 	.word	0x40023800
 8004cf4:	40007000 	.word	0x40007000
 8004cf8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004cfc:	4b1b      	ldr	r3, [pc, #108]	@ (8004d6c <HAL_RCC_OscConfig+0x4ec>)
 8004cfe:	685b      	ldr	r3, [r3, #4]
 8004d00:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	699b      	ldr	r3, [r3, #24]
 8004d06:	2b01      	cmp	r3, #1
 8004d08:	d028      	beq.n	8004d5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004d14:	429a      	cmp	r2, r3
 8004d16:	d121      	bne.n	8004d5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d22:	429a      	cmp	r2, r3
 8004d24:	d11a      	bne.n	8004d5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004d26:	68fa      	ldr	r2, [r7, #12]
 8004d28:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004d2c:	4013      	ands	r3, r2
 8004d2e:	687a      	ldr	r2, [r7, #4]
 8004d30:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004d32:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004d34:	4293      	cmp	r3, r2
 8004d36:	d111      	bne.n	8004d5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d42:	085b      	lsrs	r3, r3, #1
 8004d44:	3b01      	subs	r3, #1
 8004d46:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004d48:	429a      	cmp	r2, r3
 8004d4a:	d107      	bne.n	8004d5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d56:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004d58:	429a      	cmp	r2, r3
 8004d5a:	d001      	beq.n	8004d60 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004d5c:	2301      	movs	r3, #1
 8004d5e:	e000      	b.n	8004d62 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004d60:	2300      	movs	r3, #0
}
 8004d62:	4618      	mov	r0, r3
 8004d64:	3718      	adds	r7, #24
 8004d66:	46bd      	mov	sp, r7
 8004d68:	bd80      	pop	{r7, pc}
 8004d6a:	bf00      	nop
 8004d6c:	40023800 	.word	0x40023800

08004d70 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004d70:	b580      	push	{r7, lr}
 8004d72:	b084      	sub	sp, #16
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
 8004d78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d101      	bne.n	8004d84 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004d80:	2301      	movs	r3, #1
 8004d82:	e0cc      	b.n	8004f1e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004d84:	4b68      	ldr	r3, [pc, #416]	@ (8004f28 <HAL_RCC_ClockConfig+0x1b8>)
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f003 030f 	and.w	r3, r3, #15
 8004d8c:	683a      	ldr	r2, [r7, #0]
 8004d8e:	429a      	cmp	r2, r3
 8004d90:	d90c      	bls.n	8004dac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d92:	4b65      	ldr	r3, [pc, #404]	@ (8004f28 <HAL_RCC_ClockConfig+0x1b8>)
 8004d94:	683a      	ldr	r2, [r7, #0]
 8004d96:	b2d2      	uxtb	r2, r2
 8004d98:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d9a:	4b63      	ldr	r3, [pc, #396]	@ (8004f28 <HAL_RCC_ClockConfig+0x1b8>)
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f003 030f 	and.w	r3, r3, #15
 8004da2:	683a      	ldr	r2, [r7, #0]
 8004da4:	429a      	cmp	r2, r3
 8004da6:	d001      	beq.n	8004dac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004da8:	2301      	movs	r3, #1
 8004daa:	e0b8      	b.n	8004f1e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f003 0302 	and.w	r3, r3, #2
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d020      	beq.n	8004dfa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f003 0304 	and.w	r3, r3, #4
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d005      	beq.n	8004dd0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004dc4:	4b59      	ldr	r3, [pc, #356]	@ (8004f2c <HAL_RCC_ClockConfig+0x1bc>)
 8004dc6:	689b      	ldr	r3, [r3, #8]
 8004dc8:	4a58      	ldr	r2, [pc, #352]	@ (8004f2c <HAL_RCC_ClockConfig+0x1bc>)
 8004dca:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004dce:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f003 0308 	and.w	r3, r3, #8
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d005      	beq.n	8004de8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004ddc:	4b53      	ldr	r3, [pc, #332]	@ (8004f2c <HAL_RCC_ClockConfig+0x1bc>)
 8004dde:	689b      	ldr	r3, [r3, #8]
 8004de0:	4a52      	ldr	r2, [pc, #328]	@ (8004f2c <HAL_RCC_ClockConfig+0x1bc>)
 8004de2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004de6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004de8:	4b50      	ldr	r3, [pc, #320]	@ (8004f2c <HAL_RCC_ClockConfig+0x1bc>)
 8004dea:	689b      	ldr	r3, [r3, #8]
 8004dec:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	689b      	ldr	r3, [r3, #8]
 8004df4:	494d      	ldr	r1, [pc, #308]	@ (8004f2c <HAL_RCC_ClockConfig+0x1bc>)
 8004df6:	4313      	orrs	r3, r2
 8004df8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f003 0301 	and.w	r3, r3, #1
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d044      	beq.n	8004e90 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	685b      	ldr	r3, [r3, #4]
 8004e0a:	2b01      	cmp	r3, #1
 8004e0c:	d107      	bne.n	8004e1e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e0e:	4b47      	ldr	r3, [pc, #284]	@ (8004f2c <HAL_RCC_ClockConfig+0x1bc>)
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d119      	bne.n	8004e4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e1a:	2301      	movs	r3, #1
 8004e1c:	e07f      	b.n	8004f1e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	685b      	ldr	r3, [r3, #4]
 8004e22:	2b02      	cmp	r3, #2
 8004e24:	d003      	beq.n	8004e2e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004e2a:	2b03      	cmp	r3, #3
 8004e2c:	d107      	bne.n	8004e3e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e2e:	4b3f      	ldr	r3, [pc, #252]	@ (8004f2c <HAL_RCC_ClockConfig+0x1bc>)
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d109      	bne.n	8004e4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e3a:	2301      	movs	r3, #1
 8004e3c:	e06f      	b.n	8004f1e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e3e:	4b3b      	ldr	r3, [pc, #236]	@ (8004f2c <HAL_RCC_ClockConfig+0x1bc>)
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f003 0302 	and.w	r3, r3, #2
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d101      	bne.n	8004e4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e4a:	2301      	movs	r3, #1
 8004e4c:	e067      	b.n	8004f1e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004e4e:	4b37      	ldr	r3, [pc, #220]	@ (8004f2c <HAL_RCC_ClockConfig+0x1bc>)
 8004e50:	689b      	ldr	r3, [r3, #8]
 8004e52:	f023 0203 	bic.w	r2, r3, #3
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	685b      	ldr	r3, [r3, #4]
 8004e5a:	4934      	ldr	r1, [pc, #208]	@ (8004f2c <HAL_RCC_ClockConfig+0x1bc>)
 8004e5c:	4313      	orrs	r3, r2
 8004e5e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004e60:	f7fc ff2e 	bl	8001cc0 <HAL_GetTick>
 8004e64:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e66:	e00a      	b.n	8004e7e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e68:	f7fc ff2a 	bl	8001cc0 <HAL_GetTick>
 8004e6c:	4602      	mov	r2, r0
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	1ad3      	subs	r3, r2, r3
 8004e72:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d901      	bls.n	8004e7e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004e7a:	2303      	movs	r3, #3
 8004e7c:	e04f      	b.n	8004f1e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e7e:	4b2b      	ldr	r3, [pc, #172]	@ (8004f2c <HAL_RCC_ClockConfig+0x1bc>)
 8004e80:	689b      	ldr	r3, [r3, #8]
 8004e82:	f003 020c 	and.w	r2, r3, #12
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	685b      	ldr	r3, [r3, #4]
 8004e8a:	009b      	lsls	r3, r3, #2
 8004e8c:	429a      	cmp	r2, r3
 8004e8e:	d1eb      	bne.n	8004e68 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004e90:	4b25      	ldr	r3, [pc, #148]	@ (8004f28 <HAL_RCC_ClockConfig+0x1b8>)
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f003 030f 	and.w	r3, r3, #15
 8004e98:	683a      	ldr	r2, [r7, #0]
 8004e9a:	429a      	cmp	r2, r3
 8004e9c:	d20c      	bcs.n	8004eb8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e9e:	4b22      	ldr	r3, [pc, #136]	@ (8004f28 <HAL_RCC_ClockConfig+0x1b8>)
 8004ea0:	683a      	ldr	r2, [r7, #0]
 8004ea2:	b2d2      	uxtb	r2, r2
 8004ea4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ea6:	4b20      	ldr	r3, [pc, #128]	@ (8004f28 <HAL_RCC_ClockConfig+0x1b8>)
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f003 030f 	and.w	r3, r3, #15
 8004eae:	683a      	ldr	r2, [r7, #0]
 8004eb0:	429a      	cmp	r2, r3
 8004eb2:	d001      	beq.n	8004eb8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004eb4:	2301      	movs	r3, #1
 8004eb6:	e032      	b.n	8004f1e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f003 0304 	and.w	r3, r3, #4
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d008      	beq.n	8004ed6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004ec4:	4b19      	ldr	r3, [pc, #100]	@ (8004f2c <HAL_RCC_ClockConfig+0x1bc>)
 8004ec6:	689b      	ldr	r3, [r3, #8]
 8004ec8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	68db      	ldr	r3, [r3, #12]
 8004ed0:	4916      	ldr	r1, [pc, #88]	@ (8004f2c <HAL_RCC_ClockConfig+0x1bc>)
 8004ed2:	4313      	orrs	r3, r2
 8004ed4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f003 0308 	and.w	r3, r3, #8
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d009      	beq.n	8004ef6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004ee2:	4b12      	ldr	r3, [pc, #72]	@ (8004f2c <HAL_RCC_ClockConfig+0x1bc>)
 8004ee4:	689b      	ldr	r3, [r3, #8]
 8004ee6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	691b      	ldr	r3, [r3, #16]
 8004eee:	00db      	lsls	r3, r3, #3
 8004ef0:	490e      	ldr	r1, [pc, #56]	@ (8004f2c <HAL_RCC_ClockConfig+0x1bc>)
 8004ef2:	4313      	orrs	r3, r2
 8004ef4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004ef6:	f000 f821 	bl	8004f3c <HAL_RCC_GetSysClockFreq>
 8004efa:	4602      	mov	r2, r0
 8004efc:	4b0b      	ldr	r3, [pc, #44]	@ (8004f2c <HAL_RCC_ClockConfig+0x1bc>)
 8004efe:	689b      	ldr	r3, [r3, #8]
 8004f00:	091b      	lsrs	r3, r3, #4
 8004f02:	f003 030f 	and.w	r3, r3, #15
 8004f06:	490a      	ldr	r1, [pc, #40]	@ (8004f30 <HAL_RCC_ClockConfig+0x1c0>)
 8004f08:	5ccb      	ldrb	r3, [r1, r3]
 8004f0a:	fa22 f303 	lsr.w	r3, r2, r3
 8004f0e:	4a09      	ldr	r2, [pc, #36]	@ (8004f34 <HAL_RCC_ClockConfig+0x1c4>)
 8004f10:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004f12:	4b09      	ldr	r3, [pc, #36]	@ (8004f38 <HAL_RCC_ClockConfig+0x1c8>)
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	4618      	mov	r0, r3
 8004f18:	f7fc fe8e 	bl	8001c38 <HAL_InitTick>

  return HAL_OK;
 8004f1c:	2300      	movs	r3, #0
}
 8004f1e:	4618      	mov	r0, r3
 8004f20:	3710      	adds	r7, #16
 8004f22:	46bd      	mov	sp, r7
 8004f24:	bd80      	pop	{r7, pc}
 8004f26:	bf00      	nop
 8004f28:	40023c00 	.word	0x40023c00
 8004f2c:	40023800 	.word	0x40023800
 8004f30:	0800b440 	.word	0x0800b440
 8004f34:	20000000 	.word	0x20000000
 8004f38:	20000004 	.word	0x20000004

08004f3c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004f3c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004f40:	b090      	sub	sp, #64	@ 0x40
 8004f42:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004f44:	2300      	movs	r3, #0
 8004f46:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8004f48:	2300      	movs	r3, #0
 8004f4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8004f4c:	2300      	movs	r3, #0
 8004f4e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8004f50:	2300      	movs	r3, #0
 8004f52:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004f54:	4b59      	ldr	r3, [pc, #356]	@ (80050bc <HAL_RCC_GetSysClockFreq+0x180>)
 8004f56:	689b      	ldr	r3, [r3, #8]
 8004f58:	f003 030c 	and.w	r3, r3, #12
 8004f5c:	2b08      	cmp	r3, #8
 8004f5e:	d00d      	beq.n	8004f7c <HAL_RCC_GetSysClockFreq+0x40>
 8004f60:	2b08      	cmp	r3, #8
 8004f62:	f200 80a1 	bhi.w	80050a8 <HAL_RCC_GetSysClockFreq+0x16c>
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d002      	beq.n	8004f70 <HAL_RCC_GetSysClockFreq+0x34>
 8004f6a:	2b04      	cmp	r3, #4
 8004f6c:	d003      	beq.n	8004f76 <HAL_RCC_GetSysClockFreq+0x3a>
 8004f6e:	e09b      	b.n	80050a8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004f70:	4b53      	ldr	r3, [pc, #332]	@ (80050c0 <HAL_RCC_GetSysClockFreq+0x184>)
 8004f72:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004f74:	e09b      	b.n	80050ae <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004f76:	4b53      	ldr	r3, [pc, #332]	@ (80050c4 <HAL_RCC_GetSysClockFreq+0x188>)
 8004f78:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004f7a:	e098      	b.n	80050ae <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004f7c:	4b4f      	ldr	r3, [pc, #316]	@ (80050bc <HAL_RCC_GetSysClockFreq+0x180>)
 8004f7e:	685b      	ldr	r3, [r3, #4]
 8004f80:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004f84:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004f86:	4b4d      	ldr	r3, [pc, #308]	@ (80050bc <HAL_RCC_GetSysClockFreq+0x180>)
 8004f88:	685b      	ldr	r3, [r3, #4]
 8004f8a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d028      	beq.n	8004fe4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004f92:	4b4a      	ldr	r3, [pc, #296]	@ (80050bc <HAL_RCC_GetSysClockFreq+0x180>)
 8004f94:	685b      	ldr	r3, [r3, #4]
 8004f96:	099b      	lsrs	r3, r3, #6
 8004f98:	2200      	movs	r2, #0
 8004f9a:	623b      	str	r3, [r7, #32]
 8004f9c:	627a      	str	r2, [r7, #36]	@ 0x24
 8004f9e:	6a3b      	ldr	r3, [r7, #32]
 8004fa0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004fa4:	2100      	movs	r1, #0
 8004fa6:	4b47      	ldr	r3, [pc, #284]	@ (80050c4 <HAL_RCC_GetSysClockFreq+0x188>)
 8004fa8:	fb03 f201 	mul.w	r2, r3, r1
 8004fac:	2300      	movs	r3, #0
 8004fae:	fb00 f303 	mul.w	r3, r0, r3
 8004fb2:	4413      	add	r3, r2
 8004fb4:	4a43      	ldr	r2, [pc, #268]	@ (80050c4 <HAL_RCC_GetSysClockFreq+0x188>)
 8004fb6:	fba0 1202 	umull	r1, r2, r0, r2
 8004fba:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004fbc:	460a      	mov	r2, r1
 8004fbe:	62ba      	str	r2, [r7, #40]	@ 0x28
 8004fc0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004fc2:	4413      	add	r3, r2
 8004fc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004fc6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004fc8:	2200      	movs	r2, #0
 8004fca:	61bb      	str	r3, [r7, #24]
 8004fcc:	61fa      	str	r2, [r7, #28]
 8004fce:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004fd2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8004fd6:	f7fb fe47 	bl	8000c68 <__aeabi_uldivmod>
 8004fda:	4602      	mov	r2, r0
 8004fdc:	460b      	mov	r3, r1
 8004fde:	4613      	mov	r3, r2
 8004fe0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004fe2:	e053      	b.n	800508c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004fe4:	4b35      	ldr	r3, [pc, #212]	@ (80050bc <HAL_RCC_GetSysClockFreq+0x180>)
 8004fe6:	685b      	ldr	r3, [r3, #4]
 8004fe8:	099b      	lsrs	r3, r3, #6
 8004fea:	2200      	movs	r2, #0
 8004fec:	613b      	str	r3, [r7, #16]
 8004fee:	617a      	str	r2, [r7, #20]
 8004ff0:	693b      	ldr	r3, [r7, #16]
 8004ff2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004ff6:	f04f 0b00 	mov.w	fp, #0
 8004ffa:	4652      	mov	r2, sl
 8004ffc:	465b      	mov	r3, fp
 8004ffe:	f04f 0000 	mov.w	r0, #0
 8005002:	f04f 0100 	mov.w	r1, #0
 8005006:	0159      	lsls	r1, r3, #5
 8005008:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800500c:	0150      	lsls	r0, r2, #5
 800500e:	4602      	mov	r2, r0
 8005010:	460b      	mov	r3, r1
 8005012:	ebb2 080a 	subs.w	r8, r2, sl
 8005016:	eb63 090b 	sbc.w	r9, r3, fp
 800501a:	f04f 0200 	mov.w	r2, #0
 800501e:	f04f 0300 	mov.w	r3, #0
 8005022:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8005026:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800502a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800502e:	ebb2 0408 	subs.w	r4, r2, r8
 8005032:	eb63 0509 	sbc.w	r5, r3, r9
 8005036:	f04f 0200 	mov.w	r2, #0
 800503a:	f04f 0300 	mov.w	r3, #0
 800503e:	00eb      	lsls	r3, r5, #3
 8005040:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005044:	00e2      	lsls	r2, r4, #3
 8005046:	4614      	mov	r4, r2
 8005048:	461d      	mov	r5, r3
 800504a:	eb14 030a 	adds.w	r3, r4, sl
 800504e:	603b      	str	r3, [r7, #0]
 8005050:	eb45 030b 	adc.w	r3, r5, fp
 8005054:	607b      	str	r3, [r7, #4]
 8005056:	f04f 0200 	mov.w	r2, #0
 800505a:	f04f 0300 	mov.w	r3, #0
 800505e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005062:	4629      	mov	r1, r5
 8005064:	028b      	lsls	r3, r1, #10
 8005066:	4621      	mov	r1, r4
 8005068:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800506c:	4621      	mov	r1, r4
 800506e:	028a      	lsls	r2, r1, #10
 8005070:	4610      	mov	r0, r2
 8005072:	4619      	mov	r1, r3
 8005074:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005076:	2200      	movs	r2, #0
 8005078:	60bb      	str	r3, [r7, #8]
 800507a:	60fa      	str	r2, [r7, #12]
 800507c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005080:	f7fb fdf2 	bl	8000c68 <__aeabi_uldivmod>
 8005084:	4602      	mov	r2, r0
 8005086:	460b      	mov	r3, r1
 8005088:	4613      	mov	r3, r2
 800508a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800508c:	4b0b      	ldr	r3, [pc, #44]	@ (80050bc <HAL_RCC_GetSysClockFreq+0x180>)
 800508e:	685b      	ldr	r3, [r3, #4]
 8005090:	0c1b      	lsrs	r3, r3, #16
 8005092:	f003 0303 	and.w	r3, r3, #3
 8005096:	3301      	adds	r3, #1
 8005098:	005b      	lsls	r3, r3, #1
 800509a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 800509c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800509e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80050a4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80050a6:	e002      	b.n	80050ae <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80050a8:	4b05      	ldr	r3, [pc, #20]	@ (80050c0 <HAL_RCC_GetSysClockFreq+0x184>)
 80050aa:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80050ac:	bf00      	nop
    }
  }
  return sysclockfreq;
 80050ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80050b0:	4618      	mov	r0, r3
 80050b2:	3740      	adds	r7, #64	@ 0x40
 80050b4:	46bd      	mov	sp, r7
 80050b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80050ba:	bf00      	nop
 80050bc:	40023800 	.word	0x40023800
 80050c0:	00f42400 	.word	0x00f42400
 80050c4:	017d7840 	.word	0x017d7840

080050c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80050c8:	b480      	push	{r7}
 80050ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80050cc:	4b03      	ldr	r3, [pc, #12]	@ (80050dc <HAL_RCC_GetHCLKFreq+0x14>)
 80050ce:	681b      	ldr	r3, [r3, #0]
}
 80050d0:	4618      	mov	r0, r3
 80050d2:	46bd      	mov	sp, r7
 80050d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d8:	4770      	bx	lr
 80050da:	bf00      	nop
 80050dc:	20000000 	.word	0x20000000

080050e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80050e0:	b580      	push	{r7, lr}
 80050e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80050e4:	f7ff fff0 	bl	80050c8 <HAL_RCC_GetHCLKFreq>
 80050e8:	4602      	mov	r2, r0
 80050ea:	4b05      	ldr	r3, [pc, #20]	@ (8005100 <HAL_RCC_GetPCLK1Freq+0x20>)
 80050ec:	689b      	ldr	r3, [r3, #8]
 80050ee:	0a9b      	lsrs	r3, r3, #10
 80050f0:	f003 0307 	and.w	r3, r3, #7
 80050f4:	4903      	ldr	r1, [pc, #12]	@ (8005104 <HAL_RCC_GetPCLK1Freq+0x24>)
 80050f6:	5ccb      	ldrb	r3, [r1, r3]
 80050f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80050fc:	4618      	mov	r0, r3
 80050fe:	bd80      	pop	{r7, pc}
 8005100:	40023800 	.word	0x40023800
 8005104:	0800b450 	.word	0x0800b450

08005108 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005108:	b084      	sub	sp, #16
 800510a:	b580      	push	{r7, lr}
 800510c:	b084      	sub	sp, #16
 800510e:	af00      	add	r7, sp, #0
 8005110:	6078      	str	r0, [r7, #4]
 8005112:	f107 001c 	add.w	r0, r7, #28
 8005116:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800511a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800511e:	2b01      	cmp	r3, #1
 8005120:	d123      	bne.n	800516a <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005126:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	68db      	ldr	r3, [r3, #12]
 8005132:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8005136:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800513a:	687a      	ldr	r2, [r7, #4]
 800513c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	68db      	ldr	r3, [r3, #12]
 8005142:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800514a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800514e:	2b01      	cmp	r3, #1
 8005150:	d105      	bne.n	800515e <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	68db      	ldr	r3, [r3, #12]
 8005156:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800515e:	6878      	ldr	r0, [r7, #4]
 8005160:	f001 fae8 	bl	8006734 <USB_CoreReset>
 8005164:	4603      	mov	r3, r0
 8005166:	73fb      	strb	r3, [r7, #15]
 8005168:	e01b      	b.n	80051a2 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	68db      	ldr	r3, [r3, #12]
 800516e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005176:	6878      	ldr	r0, [r7, #4]
 8005178:	f001 fadc 	bl	8006734 <USB_CoreReset>
 800517c:	4603      	mov	r3, r0
 800517e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005180:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8005184:	2b00      	cmp	r3, #0
 8005186:	d106      	bne.n	8005196 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800518c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	639a      	str	r2, [r3, #56]	@ 0x38
 8005194:	e005      	b.n	80051a2 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800519a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80051a2:	7fbb      	ldrb	r3, [r7, #30]
 80051a4:	2b01      	cmp	r3, #1
 80051a6:	d10b      	bne.n	80051c0 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	689b      	ldr	r3, [r3, #8]
 80051ac:	f043 0206 	orr.w	r2, r3, #6
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	689b      	ldr	r3, [r3, #8]
 80051b8:	f043 0220 	orr.w	r2, r3, #32
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80051c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80051c2:	4618      	mov	r0, r3
 80051c4:	3710      	adds	r7, #16
 80051c6:	46bd      	mov	sp, r7
 80051c8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80051cc:	b004      	add	sp, #16
 80051ce:	4770      	bx	lr

080051d0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80051d0:	b480      	push	{r7}
 80051d2:	b087      	sub	sp, #28
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	60f8      	str	r0, [r7, #12]
 80051d8:	60b9      	str	r1, [r7, #8]
 80051da:	4613      	mov	r3, r2
 80051dc:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80051de:	79fb      	ldrb	r3, [r7, #7]
 80051e0:	2b02      	cmp	r3, #2
 80051e2:	d165      	bne.n	80052b0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80051e4:	68bb      	ldr	r3, [r7, #8]
 80051e6:	4a41      	ldr	r2, [pc, #260]	@ (80052ec <USB_SetTurnaroundTime+0x11c>)
 80051e8:	4293      	cmp	r3, r2
 80051ea:	d906      	bls.n	80051fa <USB_SetTurnaroundTime+0x2a>
 80051ec:	68bb      	ldr	r3, [r7, #8]
 80051ee:	4a40      	ldr	r2, [pc, #256]	@ (80052f0 <USB_SetTurnaroundTime+0x120>)
 80051f0:	4293      	cmp	r3, r2
 80051f2:	d202      	bcs.n	80051fa <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80051f4:	230f      	movs	r3, #15
 80051f6:	617b      	str	r3, [r7, #20]
 80051f8:	e062      	b.n	80052c0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80051fa:	68bb      	ldr	r3, [r7, #8]
 80051fc:	4a3c      	ldr	r2, [pc, #240]	@ (80052f0 <USB_SetTurnaroundTime+0x120>)
 80051fe:	4293      	cmp	r3, r2
 8005200:	d306      	bcc.n	8005210 <USB_SetTurnaroundTime+0x40>
 8005202:	68bb      	ldr	r3, [r7, #8]
 8005204:	4a3b      	ldr	r2, [pc, #236]	@ (80052f4 <USB_SetTurnaroundTime+0x124>)
 8005206:	4293      	cmp	r3, r2
 8005208:	d202      	bcs.n	8005210 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800520a:	230e      	movs	r3, #14
 800520c:	617b      	str	r3, [r7, #20]
 800520e:	e057      	b.n	80052c0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005210:	68bb      	ldr	r3, [r7, #8]
 8005212:	4a38      	ldr	r2, [pc, #224]	@ (80052f4 <USB_SetTurnaroundTime+0x124>)
 8005214:	4293      	cmp	r3, r2
 8005216:	d306      	bcc.n	8005226 <USB_SetTurnaroundTime+0x56>
 8005218:	68bb      	ldr	r3, [r7, #8]
 800521a:	4a37      	ldr	r2, [pc, #220]	@ (80052f8 <USB_SetTurnaroundTime+0x128>)
 800521c:	4293      	cmp	r3, r2
 800521e:	d202      	bcs.n	8005226 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005220:	230d      	movs	r3, #13
 8005222:	617b      	str	r3, [r7, #20]
 8005224:	e04c      	b.n	80052c0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8005226:	68bb      	ldr	r3, [r7, #8]
 8005228:	4a33      	ldr	r2, [pc, #204]	@ (80052f8 <USB_SetTurnaroundTime+0x128>)
 800522a:	4293      	cmp	r3, r2
 800522c:	d306      	bcc.n	800523c <USB_SetTurnaroundTime+0x6c>
 800522e:	68bb      	ldr	r3, [r7, #8]
 8005230:	4a32      	ldr	r2, [pc, #200]	@ (80052fc <USB_SetTurnaroundTime+0x12c>)
 8005232:	4293      	cmp	r3, r2
 8005234:	d802      	bhi.n	800523c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8005236:	230c      	movs	r3, #12
 8005238:	617b      	str	r3, [r7, #20]
 800523a:	e041      	b.n	80052c0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800523c:	68bb      	ldr	r3, [r7, #8]
 800523e:	4a2f      	ldr	r2, [pc, #188]	@ (80052fc <USB_SetTurnaroundTime+0x12c>)
 8005240:	4293      	cmp	r3, r2
 8005242:	d906      	bls.n	8005252 <USB_SetTurnaroundTime+0x82>
 8005244:	68bb      	ldr	r3, [r7, #8]
 8005246:	4a2e      	ldr	r2, [pc, #184]	@ (8005300 <USB_SetTurnaroundTime+0x130>)
 8005248:	4293      	cmp	r3, r2
 800524a:	d802      	bhi.n	8005252 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800524c:	230b      	movs	r3, #11
 800524e:	617b      	str	r3, [r7, #20]
 8005250:	e036      	b.n	80052c0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8005252:	68bb      	ldr	r3, [r7, #8]
 8005254:	4a2a      	ldr	r2, [pc, #168]	@ (8005300 <USB_SetTurnaroundTime+0x130>)
 8005256:	4293      	cmp	r3, r2
 8005258:	d906      	bls.n	8005268 <USB_SetTurnaroundTime+0x98>
 800525a:	68bb      	ldr	r3, [r7, #8]
 800525c:	4a29      	ldr	r2, [pc, #164]	@ (8005304 <USB_SetTurnaroundTime+0x134>)
 800525e:	4293      	cmp	r3, r2
 8005260:	d802      	bhi.n	8005268 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8005262:	230a      	movs	r3, #10
 8005264:	617b      	str	r3, [r7, #20]
 8005266:	e02b      	b.n	80052c0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005268:	68bb      	ldr	r3, [r7, #8]
 800526a:	4a26      	ldr	r2, [pc, #152]	@ (8005304 <USB_SetTurnaroundTime+0x134>)
 800526c:	4293      	cmp	r3, r2
 800526e:	d906      	bls.n	800527e <USB_SetTurnaroundTime+0xae>
 8005270:	68bb      	ldr	r3, [r7, #8]
 8005272:	4a25      	ldr	r2, [pc, #148]	@ (8005308 <USB_SetTurnaroundTime+0x138>)
 8005274:	4293      	cmp	r3, r2
 8005276:	d202      	bcs.n	800527e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005278:	2309      	movs	r3, #9
 800527a:	617b      	str	r3, [r7, #20]
 800527c:	e020      	b.n	80052c0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800527e:	68bb      	ldr	r3, [r7, #8]
 8005280:	4a21      	ldr	r2, [pc, #132]	@ (8005308 <USB_SetTurnaroundTime+0x138>)
 8005282:	4293      	cmp	r3, r2
 8005284:	d306      	bcc.n	8005294 <USB_SetTurnaroundTime+0xc4>
 8005286:	68bb      	ldr	r3, [r7, #8]
 8005288:	4a20      	ldr	r2, [pc, #128]	@ (800530c <USB_SetTurnaroundTime+0x13c>)
 800528a:	4293      	cmp	r3, r2
 800528c:	d802      	bhi.n	8005294 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800528e:	2308      	movs	r3, #8
 8005290:	617b      	str	r3, [r7, #20]
 8005292:	e015      	b.n	80052c0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005294:	68bb      	ldr	r3, [r7, #8]
 8005296:	4a1d      	ldr	r2, [pc, #116]	@ (800530c <USB_SetTurnaroundTime+0x13c>)
 8005298:	4293      	cmp	r3, r2
 800529a:	d906      	bls.n	80052aa <USB_SetTurnaroundTime+0xda>
 800529c:	68bb      	ldr	r3, [r7, #8]
 800529e:	4a1c      	ldr	r2, [pc, #112]	@ (8005310 <USB_SetTurnaroundTime+0x140>)
 80052a0:	4293      	cmp	r3, r2
 80052a2:	d202      	bcs.n	80052aa <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80052a4:	2307      	movs	r3, #7
 80052a6:	617b      	str	r3, [r7, #20]
 80052a8:	e00a      	b.n	80052c0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80052aa:	2306      	movs	r3, #6
 80052ac:	617b      	str	r3, [r7, #20]
 80052ae:	e007      	b.n	80052c0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80052b0:	79fb      	ldrb	r3, [r7, #7]
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d102      	bne.n	80052bc <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80052b6:	2309      	movs	r3, #9
 80052b8:	617b      	str	r3, [r7, #20]
 80052ba:	e001      	b.n	80052c0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80052bc:	2309      	movs	r3, #9
 80052be:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	68db      	ldr	r3, [r3, #12]
 80052c4:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	68da      	ldr	r2, [r3, #12]
 80052d0:	697b      	ldr	r3, [r7, #20]
 80052d2:	029b      	lsls	r3, r3, #10
 80052d4:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 80052d8:	431a      	orrs	r2, r3
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80052de:	2300      	movs	r3, #0
}
 80052e0:	4618      	mov	r0, r3
 80052e2:	371c      	adds	r7, #28
 80052e4:	46bd      	mov	sp, r7
 80052e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ea:	4770      	bx	lr
 80052ec:	00d8acbf 	.word	0x00d8acbf
 80052f0:	00e4e1c0 	.word	0x00e4e1c0
 80052f4:	00f42400 	.word	0x00f42400
 80052f8:	01067380 	.word	0x01067380
 80052fc:	011a499f 	.word	0x011a499f
 8005300:	01312cff 	.word	0x01312cff
 8005304:	014ca43f 	.word	0x014ca43f
 8005308:	016e3600 	.word	0x016e3600
 800530c:	01a6ab1f 	.word	0x01a6ab1f
 8005310:	01e84800 	.word	0x01e84800

08005314 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005314:	b480      	push	{r7}
 8005316:	b083      	sub	sp, #12
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	689b      	ldr	r3, [r3, #8]
 8005320:	f043 0201 	orr.w	r2, r3, #1
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005328:	2300      	movs	r3, #0
}
 800532a:	4618      	mov	r0, r3
 800532c:	370c      	adds	r7, #12
 800532e:	46bd      	mov	sp, r7
 8005330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005334:	4770      	bx	lr

08005336 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005336:	b480      	push	{r7}
 8005338:	b083      	sub	sp, #12
 800533a:	af00      	add	r7, sp, #0
 800533c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	689b      	ldr	r3, [r3, #8]
 8005342:	f023 0201 	bic.w	r2, r3, #1
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800534a:	2300      	movs	r3, #0
}
 800534c:	4618      	mov	r0, r3
 800534e:	370c      	adds	r7, #12
 8005350:	46bd      	mov	sp, r7
 8005352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005356:	4770      	bx	lr

08005358 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005358:	b580      	push	{r7, lr}
 800535a:	b084      	sub	sp, #16
 800535c:	af00      	add	r7, sp, #0
 800535e:	6078      	str	r0, [r7, #4]
 8005360:	460b      	mov	r3, r1
 8005362:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005364:	2300      	movs	r3, #0
 8005366:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	68db      	ldr	r3, [r3, #12]
 800536c:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005374:	78fb      	ldrb	r3, [r7, #3]
 8005376:	2b01      	cmp	r3, #1
 8005378:	d115      	bne.n	80053a6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	68db      	ldr	r3, [r3, #12]
 800537e:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005386:	200a      	movs	r0, #10
 8005388:	f7fc fca6 	bl	8001cd8 <HAL_Delay>
      ms += 10U;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	330a      	adds	r3, #10
 8005390:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005392:	6878      	ldr	r0, [r7, #4]
 8005394:	f001 f93f 	bl	8006616 <USB_GetMode>
 8005398:	4603      	mov	r3, r0
 800539a:	2b01      	cmp	r3, #1
 800539c:	d01e      	beq.n	80053dc <USB_SetCurrentMode+0x84>
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	2bc7      	cmp	r3, #199	@ 0xc7
 80053a2:	d9f0      	bls.n	8005386 <USB_SetCurrentMode+0x2e>
 80053a4:	e01a      	b.n	80053dc <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80053a6:	78fb      	ldrb	r3, [r7, #3]
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d115      	bne.n	80053d8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	68db      	ldr	r3, [r3, #12]
 80053b0:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80053b8:	200a      	movs	r0, #10
 80053ba:	f7fc fc8d 	bl	8001cd8 <HAL_Delay>
      ms += 10U;
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	330a      	adds	r3, #10
 80053c2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80053c4:	6878      	ldr	r0, [r7, #4]
 80053c6:	f001 f926 	bl	8006616 <USB_GetMode>
 80053ca:	4603      	mov	r3, r0
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d005      	beq.n	80053dc <USB_SetCurrentMode+0x84>
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	2bc7      	cmp	r3, #199	@ 0xc7
 80053d4:	d9f0      	bls.n	80053b8 <USB_SetCurrentMode+0x60>
 80053d6:	e001      	b.n	80053dc <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80053d8:	2301      	movs	r3, #1
 80053da:	e005      	b.n	80053e8 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	2bc8      	cmp	r3, #200	@ 0xc8
 80053e0:	d101      	bne.n	80053e6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80053e2:	2301      	movs	r3, #1
 80053e4:	e000      	b.n	80053e8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80053e6:	2300      	movs	r3, #0
}
 80053e8:	4618      	mov	r0, r3
 80053ea:	3710      	adds	r7, #16
 80053ec:	46bd      	mov	sp, r7
 80053ee:	bd80      	pop	{r7, pc}

080053f0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80053f0:	b084      	sub	sp, #16
 80053f2:	b580      	push	{r7, lr}
 80053f4:	b086      	sub	sp, #24
 80053f6:	af00      	add	r7, sp, #0
 80053f8:	6078      	str	r0, [r7, #4]
 80053fa:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80053fe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005402:	2300      	movs	r3, #0
 8005404:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800540a:	2300      	movs	r3, #0
 800540c:	613b      	str	r3, [r7, #16]
 800540e:	e009      	b.n	8005424 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005410:	687a      	ldr	r2, [r7, #4]
 8005412:	693b      	ldr	r3, [r7, #16]
 8005414:	3340      	adds	r3, #64	@ 0x40
 8005416:	009b      	lsls	r3, r3, #2
 8005418:	4413      	add	r3, r2
 800541a:	2200      	movs	r2, #0
 800541c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800541e:	693b      	ldr	r3, [r7, #16]
 8005420:	3301      	adds	r3, #1
 8005422:	613b      	str	r3, [r7, #16]
 8005424:	693b      	ldr	r3, [r7, #16]
 8005426:	2b0e      	cmp	r3, #14
 8005428:	d9f2      	bls.n	8005410 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800542a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800542e:	2b00      	cmp	r3, #0
 8005430:	d11c      	bne.n	800546c <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005438:	685b      	ldr	r3, [r3, #4]
 800543a:	68fa      	ldr	r2, [r7, #12]
 800543c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005440:	f043 0302 	orr.w	r3, r3, #2
 8005444:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800544a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005456:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005462:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	639a      	str	r2, [r3, #56]	@ 0x38
 800546a:	e00b      	b.n	8005484 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005470:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800547c:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800548a:	461a      	mov	r2, r3
 800548c:	2300      	movs	r3, #0
 800548e:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005490:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8005494:	2b01      	cmp	r3, #1
 8005496:	d10d      	bne.n	80054b4 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005498:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800549c:	2b00      	cmp	r3, #0
 800549e:	d104      	bne.n	80054aa <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80054a0:	2100      	movs	r1, #0
 80054a2:	6878      	ldr	r0, [r7, #4]
 80054a4:	f000 f968 	bl	8005778 <USB_SetDevSpeed>
 80054a8:	e008      	b.n	80054bc <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80054aa:	2101      	movs	r1, #1
 80054ac:	6878      	ldr	r0, [r7, #4]
 80054ae:	f000 f963 	bl	8005778 <USB_SetDevSpeed>
 80054b2:	e003      	b.n	80054bc <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80054b4:	2103      	movs	r1, #3
 80054b6:	6878      	ldr	r0, [r7, #4]
 80054b8:	f000 f95e 	bl	8005778 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80054bc:	2110      	movs	r1, #16
 80054be:	6878      	ldr	r0, [r7, #4]
 80054c0:	f000 f8fa 	bl	80056b8 <USB_FlushTxFifo>
 80054c4:	4603      	mov	r3, r0
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d001      	beq.n	80054ce <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 80054ca:	2301      	movs	r3, #1
 80054cc:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80054ce:	6878      	ldr	r0, [r7, #4]
 80054d0:	f000 f924 	bl	800571c <USB_FlushRxFifo>
 80054d4:	4603      	mov	r3, r0
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d001      	beq.n	80054de <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 80054da:	2301      	movs	r3, #1
 80054dc:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80054e4:	461a      	mov	r2, r3
 80054e6:	2300      	movs	r3, #0
 80054e8:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80054f0:	461a      	mov	r2, r3
 80054f2:	2300      	movs	r3, #0
 80054f4:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80054fc:	461a      	mov	r2, r3
 80054fe:	2300      	movs	r3, #0
 8005500:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005502:	2300      	movs	r3, #0
 8005504:	613b      	str	r3, [r7, #16]
 8005506:	e043      	b.n	8005590 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005508:	693b      	ldr	r3, [r7, #16]
 800550a:	015a      	lsls	r2, r3, #5
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	4413      	add	r3, r2
 8005510:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800551a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800551e:	d118      	bne.n	8005552 <USB_DevInit+0x162>
    {
      if (i == 0U)
 8005520:	693b      	ldr	r3, [r7, #16]
 8005522:	2b00      	cmp	r3, #0
 8005524:	d10a      	bne.n	800553c <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005526:	693b      	ldr	r3, [r7, #16]
 8005528:	015a      	lsls	r2, r3, #5
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	4413      	add	r3, r2
 800552e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005532:	461a      	mov	r2, r3
 8005534:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005538:	6013      	str	r3, [r2, #0]
 800553a:	e013      	b.n	8005564 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800553c:	693b      	ldr	r3, [r7, #16]
 800553e:	015a      	lsls	r2, r3, #5
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	4413      	add	r3, r2
 8005544:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005548:	461a      	mov	r2, r3
 800554a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800554e:	6013      	str	r3, [r2, #0]
 8005550:	e008      	b.n	8005564 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005552:	693b      	ldr	r3, [r7, #16]
 8005554:	015a      	lsls	r2, r3, #5
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	4413      	add	r3, r2
 800555a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800555e:	461a      	mov	r2, r3
 8005560:	2300      	movs	r3, #0
 8005562:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005564:	693b      	ldr	r3, [r7, #16]
 8005566:	015a      	lsls	r2, r3, #5
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	4413      	add	r3, r2
 800556c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005570:	461a      	mov	r2, r3
 8005572:	2300      	movs	r3, #0
 8005574:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005576:	693b      	ldr	r3, [r7, #16]
 8005578:	015a      	lsls	r2, r3, #5
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	4413      	add	r3, r2
 800557e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005582:	461a      	mov	r2, r3
 8005584:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005588:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800558a:	693b      	ldr	r3, [r7, #16]
 800558c:	3301      	adds	r3, #1
 800558e:	613b      	str	r3, [r7, #16]
 8005590:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005594:	461a      	mov	r2, r3
 8005596:	693b      	ldr	r3, [r7, #16]
 8005598:	4293      	cmp	r3, r2
 800559a:	d3b5      	bcc.n	8005508 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800559c:	2300      	movs	r3, #0
 800559e:	613b      	str	r3, [r7, #16]
 80055a0:	e043      	b.n	800562a <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80055a2:	693b      	ldr	r3, [r7, #16]
 80055a4:	015a      	lsls	r2, r3, #5
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	4413      	add	r3, r2
 80055aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80055b4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80055b8:	d118      	bne.n	80055ec <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 80055ba:	693b      	ldr	r3, [r7, #16]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d10a      	bne.n	80055d6 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80055c0:	693b      	ldr	r3, [r7, #16]
 80055c2:	015a      	lsls	r2, r3, #5
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	4413      	add	r3, r2
 80055c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80055cc:	461a      	mov	r2, r3
 80055ce:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80055d2:	6013      	str	r3, [r2, #0]
 80055d4:	e013      	b.n	80055fe <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80055d6:	693b      	ldr	r3, [r7, #16]
 80055d8:	015a      	lsls	r2, r3, #5
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	4413      	add	r3, r2
 80055de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80055e2:	461a      	mov	r2, r3
 80055e4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80055e8:	6013      	str	r3, [r2, #0]
 80055ea:	e008      	b.n	80055fe <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80055ec:	693b      	ldr	r3, [r7, #16]
 80055ee:	015a      	lsls	r2, r3, #5
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	4413      	add	r3, r2
 80055f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80055f8:	461a      	mov	r2, r3
 80055fa:	2300      	movs	r3, #0
 80055fc:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80055fe:	693b      	ldr	r3, [r7, #16]
 8005600:	015a      	lsls	r2, r3, #5
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	4413      	add	r3, r2
 8005606:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800560a:	461a      	mov	r2, r3
 800560c:	2300      	movs	r3, #0
 800560e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005610:	693b      	ldr	r3, [r7, #16]
 8005612:	015a      	lsls	r2, r3, #5
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	4413      	add	r3, r2
 8005618:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800561c:	461a      	mov	r2, r3
 800561e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005622:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005624:	693b      	ldr	r3, [r7, #16]
 8005626:	3301      	adds	r3, #1
 8005628:	613b      	str	r3, [r7, #16]
 800562a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800562e:	461a      	mov	r2, r3
 8005630:	693b      	ldr	r3, [r7, #16]
 8005632:	4293      	cmp	r3, r2
 8005634:	d3b5      	bcc.n	80055a2 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800563c:	691b      	ldr	r3, [r3, #16]
 800563e:	68fa      	ldr	r2, [r7, #12]
 8005640:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005644:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005648:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	2200      	movs	r2, #0
 800564e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8005656:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005658:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800565c:	2b00      	cmp	r3, #0
 800565e:	d105      	bne.n	800566c <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	699b      	ldr	r3, [r3, #24]
 8005664:	f043 0210 	orr.w	r2, r3, #16
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	699a      	ldr	r2, [r3, #24]
 8005670:	4b10      	ldr	r3, [pc, #64]	@ (80056b4 <USB_DevInit+0x2c4>)
 8005672:	4313      	orrs	r3, r2
 8005674:	687a      	ldr	r2, [r7, #4]
 8005676:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005678:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800567c:	2b00      	cmp	r3, #0
 800567e:	d005      	beq.n	800568c <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	699b      	ldr	r3, [r3, #24]
 8005684:	f043 0208 	orr.w	r2, r3, #8
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800568c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005690:	2b01      	cmp	r3, #1
 8005692:	d107      	bne.n	80056a4 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	699b      	ldr	r3, [r3, #24]
 8005698:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800569c:	f043 0304 	orr.w	r3, r3, #4
 80056a0:	687a      	ldr	r2, [r7, #4]
 80056a2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80056a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80056a6:	4618      	mov	r0, r3
 80056a8:	3718      	adds	r7, #24
 80056aa:	46bd      	mov	sp, r7
 80056ac:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80056b0:	b004      	add	sp, #16
 80056b2:	4770      	bx	lr
 80056b4:	803c3800 	.word	0x803c3800

080056b8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80056b8:	b480      	push	{r7}
 80056ba:	b085      	sub	sp, #20
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
 80056c0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80056c2:	2300      	movs	r3, #0
 80056c4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	3301      	adds	r3, #1
 80056ca:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80056d2:	d901      	bls.n	80056d8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80056d4:	2303      	movs	r3, #3
 80056d6:	e01b      	b.n	8005710 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	691b      	ldr	r3, [r3, #16]
 80056dc:	2b00      	cmp	r3, #0
 80056de:	daf2      	bge.n	80056c6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80056e0:	2300      	movs	r3, #0
 80056e2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80056e4:	683b      	ldr	r3, [r7, #0]
 80056e6:	019b      	lsls	r3, r3, #6
 80056e8:	f043 0220 	orr.w	r2, r3, #32
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	3301      	adds	r3, #1
 80056f4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80056fc:	d901      	bls.n	8005702 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80056fe:	2303      	movs	r3, #3
 8005700:	e006      	b.n	8005710 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	691b      	ldr	r3, [r3, #16]
 8005706:	f003 0320 	and.w	r3, r3, #32
 800570a:	2b20      	cmp	r3, #32
 800570c:	d0f0      	beq.n	80056f0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800570e:	2300      	movs	r3, #0
}
 8005710:	4618      	mov	r0, r3
 8005712:	3714      	adds	r7, #20
 8005714:	46bd      	mov	sp, r7
 8005716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571a:	4770      	bx	lr

0800571c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800571c:	b480      	push	{r7}
 800571e:	b085      	sub	sp, #20
 8005720:	af00      	add	r7, sp, #0
 8005722:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005724:	2300      	movs	r3, #0
 8005726:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	3301      	adds	r3, #1
 800572c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005734:	d901      	bls.n	800573a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005736:	2303      	movs	r3, #3
 8005738:	e018      	b.n	800576c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	691b      	ldr	r3, [r3, #16]
 800573e:	2b00      	cmp	r3, #0
 8005740:	daf2      	bge.n	8005728 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005742:	2300      	movs	r3, #0
 8005744:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	2210      	movs	r2, #16
 800574a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	3301      	adds	r3, #1
 8005750:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005758:	d901      	bls.n	800575e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800575a:	2303      	movs	r3, #3
 800575c:	e006      	b.n	800576c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	691b      	ldr	r3, [r3, #16]
 8005762:	f003 0310 	and.w	r3, r3, #16
 8005766:	2b10      	cmp	r3, #16
 8005768:	d0f0      	beq.n	800574c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800576a:	2300      	movs	r3, #0
}
 800576c:	4618      	mov	r0, r3
 800576e:	3714      	adds	r7, #20
 8005770:	46bd      	mov	sp, r7
 8005772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005776:	4770      	bx	lr

08005778 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005778:	b480      	push	{r7}
 800577a:	b085      	sub	sp, #20
 800577c:	af00      	add	r7, sp, #0
 800577e:	6078      	str	r0, [r7, #4]
 8005780:	460b      	mov	r3, r1
 8005782:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800578e:	681a      	ldr	r2, [r3, #0]
 8005790:	78fb      	ldrb	r3, [r7, #3]
 8005792:	68f9      	ldr	r1, [r7, #12]
 8005794:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005798:	4313      	orrs	r3, r2
 800579a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800579c:	2300      	movs	r3, #0
}
 800579e:	4618      	mov	r0, r3
 80057a0:	3714      	adds	r7, #20
 80057a2:	46bd      	mov	sp, r7
 80057a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a8:	4770      	bx	lr

080057aa <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 80057aa:	b480      	push	{r7}
 80057ac:	b087      	sub	sp, #28
 80057ae:	af00      	add	r7, sp, #0
 80057b0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80057b6:	693b      	ldr	r3, [r7, #16]
 80057b8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80057bc:	689b      	ldr	r3, [r3, #8]
 80057be:	f003 0306 	and.w	r3, r3, #6
 80057c2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d102      	bne.n	80057d0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80057ca:	2300      	movs	r3, #0
 80057cc:	75fb      	strb	r3, [r7, #23]
 80057ce:	e00a      	b.n	80057e6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	2b02      	cmp	r3, #2
 80057d4:	d002      	beq.n	80057dc <USB_GetDevSpeed+0x32>
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	2b06      	cmp	r3, #6
 80057da:	d102      	bne.n	80057e2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80057dc:	2302      	movs	r3, #2
 80057de:	75fb      	strb	r3, [r7, #23]
 80057e0:	e001      	b.n	80057e6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80057e2:	230f      	movs	r3, #15
 80057e4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80057e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80057e8:	4618      	mov	r0, r3
 80057ea:	371c      	adds	r7, #28
 80057ec:	46bd      	mov	sp, r7
 80057ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f2:	4770      	bx	lr

080057f4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80057f4:	b480      	push	{r7}
 80057f6:	b085      	sub	sp, #20
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	6078      	str	r0, [r7, #4]
 80057fc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005802:	683b      	ldr	r3, [r7, #0]
 8005804:	781b      	ldrb	r3, [r3, #0]
 8005806:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005808:	683b      	ldr	r3, [r7, #0]
 800580a:	785b      	ldrb	r3, [r3, #1]
 800580c:	2b01      	cmp	r3, #1
 800580e:	d13a      	bne.n	8005886 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005816:	69da      	ldr	r2, [r3, #28]
 8005818:	683b      	ldr	r3, [r7, #0]
 800581a:	781b      	ldrb	r3, [r3, #0]
 800581c:	f003 030f 	and.w	r3, r3, #15
 8005820:	2101      	movs	r1, #1
 8005822:	fa01 f303 	lsl.w	r3, r1, r3
 8005826:	b29b      	uxth	r3, r3
 8005828:	68f9      	ldr	r1, [r7, #12]
 800582a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800582e:	4313      	orrs	r3, r2
 8005830:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005832:	68bb      	ldr	r3, [r7, #8]
 8005834:	015a      	lsls	r2, r3, #5
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	4413      	add	r3, r2
 800583a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005844:	2b00      	cmp	r3, #0
 8005846:	d155      	bne.n	80058f4 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005848:	68bb      	ldr	r3, [r7, #8]
 800584a:	015a      	lsls	r2, r3, #5
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	4413      	add	r3, r2
 8005850:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005854:	681a      	ldr	r2, [r3, #0]
 8005856:	683b      	ldr	r3, [r7, #0]
 8005858:	689b      	ldr	r3, [r3, #8]
 800585a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800585e:	683b      	ldr	r3, [r7, #0]
 8005860:	791b      	ldrb	r3, [r3, #4]
 8005862:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005864:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005866:	68bb      	ldr	r3, [r7, #8]
 8005868:	059b      	lsls	r3, r3, #22
 800586a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800586c:	4313      	orrs	r3, r2
 800586e:	68ba      	ldr	r2, [r7, #8]
 8005870:	0151      	lsls	r1, r2, #5
 8005872:	68fa      	ldr	r2, [r7, #12]
 8005874:	440a      	add	r2, r1
 8005876:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800587a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800587e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005882:	6013      	str	r3, [r2, #0]
 8005884:	e036      	b.n	80058f4 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800588c:	69da      	ldr	r2, [r3, #28]
 800588e:	683b      	ldr	r3, [r7, #0]
 8005890:	781b      	ldrb	r3, [r3, #0]
 8005892:	f003 030f 	and.w	r3, r3, #15
 8005896:	2101      	movs	r1, #1
 8005898:	fa01 f303 	lsl.w	r3, r1, r3
 800589c:	041b      	lsls	r3, r3, #16
 800589e:	68f9      	ldr	r1, [r7, #12]
 80058a0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80058a4:	4313      	orrs	r3, r2
 80058a6:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80058a8:	68bb      	ldr	r3, [r7, #8]
 80058aa:	015a      	lsls	r2, r3, #5
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	4413      	add	r3, r2
 80058b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d11a      	bne.n	80058f4 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80058be:	68bb      	ldr	r3, [r7, #8]
 80058c0:	015a      	lsls	r2, r3, #5
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	4413      	add	r3, r2
 80058c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80058ca:	681a      	ldr	r2, [r3, #0]
 80058cc:	683b      	ldr	r3, [r7, #0]
 80058ce:	689b      	ldr	r3, [r3, #8]
 80058d0:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80058d4:	683b      	ldr	r3, [r7, #0]
 80058d6:	791b      	ldrb	r3, [r3, #4]
 80058d8:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80058da:	430b      	orrs	r3, r1
 80058dc:	4313      	orrs	r3, r2
 80058de:	68ba      	ldr	r2, [r7, #8]
 80058e0:	0151      	lsls	r1, r2, #5
 80058e2:	68fa      	ldr	r2, [r7, #12]
 80058e4:	440a      	add	r2, r1
 80058e6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80058ea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80058ee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80058f2:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80058f4:	2300      	movs	r3, #0
}
 80058f6:	4618      	mov	r0, r3
 80058f8:	3714      	adds	r7, #20
 80058fa:	46bd      	mov	sp, r7
 80058fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005900:	4770      	bx	lr
	...

08005904 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005904:	b480      	push	{r7}
 8005906:	b085      	sub	sp, #20
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]
 800590c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005912:	683b      	ldr	r3, [r7, #0]
 8005914:	781b      	ldrb	r3, [r3, #0]
 8005916:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005918:	683b      	ldr	r3, [r7, #0]
 800591a:	785b      	ldrb	r3, [r3, #1]
 800591c:	2b01      	cmp	r3, #1
 800591e:	d161      	bne.n	80059e4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005920:	68bb      	ldr	r3, [r7, #8]
 8005922:	015a      	lsls	r2, r3, #5
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	4413      	add	r3, r2
 8005928:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005932:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005936:	d11f      	bne.n	8005978 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005938:	68bb      	ldr	r3, [r7, #8]
 800593a:	015a      	lsls	r2, r3, #5
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	4413      	add	r3, r2
 8005940:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	68ba      	ldr	r2, [r7, #8]
 8005948:	0151      	lsls	r1, r2, #5
 800594a:	68fa      	ldr	r2, [r7, #12]
 800594c:	440a      	add	r2, r1
 800594e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005952:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005956:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005958:	68bb      	ldr	r3, [r7, #8]
 800595a:	015a      	lsls	r2, r3, #5
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	4413      	add	r3, r2
 8005960:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	68ba      	ldr	r2, [r7, #8]
 8005968:	0151      	lsls	r1, r2, #5
 800596a:	68fa      	ldr	r2, [r7, #12]
 800596c:	440a      	add	r2, r1
 800596e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005972:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005976:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800597e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	781b      	ldrb	r3, [r3, #0]
 8005984:	f003 030f 	and.w	r3, r3, #15
 8005988:	2101      	movs	r1, #1
 800598a:	fa01 f303 	lsl.w	r3, r1, r3
 800598e:	b29b      	uxth	r3, r3
 8005990:	43db      	mvns	r3, r3
 8005992:	68f9      	ldr	r1, [r7, #12]
 8005994:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005998:	4013      	ands	r3, r2
 800599a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80059a2:	69da      	ldr	r2, [r3, #28]
 80059a4:	683b      	ldr	r3, [r7, #0]
 80059a6:	781b      	ldrb	r3, [r3, #0]
 80059a8:	f003 030f 	and.w	r3, r3, #15
 80059ac:	2101      	movs	r1, #1
 80059ae:	fa01 f303 	lsl.w	r3, r1, r3
 80059b2:	b29b      	uxth	r3, r3
 80059b4:	43db      	mvns	r3, r3
 80059b6:	68f9      	ldr	r1, [r7, #12]
 80059b8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80059bc:	4013      	ands	r3, r2
 80059be:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80059c0:	68bb      	ldr	r3, [r7, #8]
 80059c2:	015a      	lsls	r2, r3, #5
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	4413      	add	r3, r2
 80059c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80059cc:	681a      	ldr	r2, [r3, #0]
 80059ce:	68bb      	ldr	r3, [r7, #8]
 80059d0:	0159      	lsls	r1, r3, #5
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	440b      	add	r3, r1
 80059d6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80059da:	4619      	mov	r1, r3
 80059dc:	4b35      	ldr	r3, [pc, #212]	@ (8005ab4 <USB_DeactivateEndpoint+0x1b0>)
 80059de:	4013      	ands	r3, r2
 80059e0:	600b      	str	r3, [r1, #0]
 80059e2:	e060      	b.n	8005aa6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80059e4:	68bb      	ldr	r3, [r7, #8]
 80059e6:	015a      	lsls	r2, r3, #5
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	4413      	add	r3, r2
 80059ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80059f6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80059fa:	d11f      	bne.n	8005a3c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80059fc:	68bb      	ldr	r3, [r7, #8]
 80059fe:	015a      	lsls	r2, r3, #5
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	4413      	add	r3, r2
 8005a04:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	68ba      	ldr	r2, [r7, #8]
 8005a0c:	0151      	lsls	r1, r2, #5
 8005a0e:	68fa      	ldr	r2, [r7, #12]
 8005a10:	440a      	add	r2, r1
 8005a12:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005a16:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005a1a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005a1c:	68bb      	ldr	r3, [r7, #8]
 8005a1e:	015a      	lsls	r2, r3, #5
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	4413      	add	r3, r2
 8005a24:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	68ba      	ldr	r2, [r7, #8]
 8005a2c:	0151      	lsls	r1, r2, #5
 8005a2e:	68fa      	ldr	r2, [r7, #12]
 8005a30:	440a      	add	r2, r1
 8005a32:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005a36:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005a3a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005a42:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005a44:	683b      	ldr	r3, [r7, #0]
 8005a46:	781b      	ldrb	r3, [r3, #0]
 8005a48:	f003 030f 	and.w	r3, r3, #15
 8005a4c:	2101      	movs	r1, #1
 8005a4e:	fa01 f303 	lsl.w	r3, r1, r3
 8005a52:	041b      	lsls	r3, r3, #16
 8005a54:	43db      	mvns	r3, r3
 8005a56:	68f9      	ldr	r1, [r7, #12]
 8005a58:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005a5c:	4013      	ands	r3, r2
 8005a5e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005a66:	69da      	ldr	r2, [r3, #28]
 8005a68:	683b      	ldr	r3, [r7, #0]
 8005a6a:	781b      	ldrb	r3, [r3, #0]
 8005a6c:	f003 030f 	and.w	r3, r3, #15
 8005a70:	2101      	movs	r1, #1
 8005a72:	fa01 f303 	lsl.w	r3, r1, r3
 8005a76:	041b      	lsls	r3, r3, #16
 8005a78:	43db      	mvns	r3, r3
 8005a7a:	68f9      	ldr	r1, [r7, #12]
 8005a7c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005a80:	4013      	ands	r3, r2
 8005a82:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005a84:	68bb      	ldr	r3, [r7, #8]
 8005a86:	015a      	lsls	r2, r3, #5
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	4413      	add	r3, r2
 8005a8c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a90:	681a      	ldr	r2, [r3, #0]
 8005a92:	68bb      	ldr	r3, [r7, #8]
 8005a94:	0159      	lsls	r1, r3, #5
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	440b      	add	r3, r1
 8005a9a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a9e:	4619      	mov	r1, r3
 8005aa0:	4b05      	ldr	r3, [pc, #20]	@ (8005ab8 <USB_DeactivateEndpoint+0x1b4>)
 8005aa2:	4013      	ands	r3, r2
 8005aa4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005aa6:	2300      	movs	r3, #0
}
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	3714      	adds	r7, #20
 8005aac:	46bd      	mov	sp, r7
 8005aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab2:	4770      	bx	lr
 8005ab4:	ec337800 	.word	0xec337800
 8005ab8:	eff37800 	.word	0xeff37800

08005abc <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005abc:	b580      	push	{r7, lr}
 8005abe:	b08a      	sub	sp, #40	@ 0x28
 8005ac0:	af02      	add	r7, sp, #8
 8005ac2:	60f8      	str	r0, [r7, #12]
 8005ac4:	60b9      	str	r1, [r7, #8]
 8005ac6:	4613      	mov	r3, r2
 8005ac8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005ace:	68bb      	ldr	r3, [r7, #8]
 8005ad0:	781b      	ldrb	r3, [r3, #0]
 8005ad2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005ad4:	68bb      	ldr	r3, [r7, #8]
 8005ad6:	785b      	ldrb	r3, [r3, #1]
 8005ad8:	2b01      	cmp	r3, #1
 8005ada:	f040 817f 	bne.w	8005ddc <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005ade:	68bb      	ldr	r3, [r7, #8]
 8005ae0:	691b      	ldr	r3, [r3, #16]
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d132      	bne.n	8005b4c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005ae6:	69bb      	ldr	r3, [r7, #24]
 8005ae8:	015a      	lsls	r2, r3, #5
 8005aea:	69fb      	ldr	r3, [r7, #28]
 8005aec:	4413      	add	r3, r2
 8005aee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005af2:	691b      	ldr	r3, [r3, #16]
 8005af4:	69ba      	ldr	r2, [r7, #24]
 8005af6:	0151      	lsls	r1, r2, #5
 8005af8:	69fa      	ldr	r2, [r7, #28]
 8005afa:	440a      	add	r2, r1
 8005afc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005b00:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8005b04:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8005b08:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005b0a:	69bb      	ldr	r3, [r7, #24]
 8005b0c:	015a      	lsls	r2, r3, #5
 8005b0e:	69fb      	ldr	r3, [r7, #28]
 8005b10:	4413      	add	r3, r2
 8005b12:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005b16:	691b      	ldr	r3, [r3, #16]
 8005b18:	69ba      	ldr	r2, [r7, #24]
 8005b1a:	0151      	lsls	r1, r2, #5
 8005b1c:	69fa      	ldr	r2, [r7, #28]
 8005b1e:	440a      	add	r2, r1
 8005b20:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005b24:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005b28:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005b2a:	69bb      	ldr	r3, [r7, #24]
 8005b2c:	015a      	lsls	r2, r3, #5
 8005b2e:	69fb      	ldr	r3, [r7, #28]
 8005b30:	4413      	add	r3, r2
 8005b32:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005b36:	691b      	ldr	r3, [r3, #16]
 8005b38:	69ba      	ldr	r2, [r7, #24]
 8005b3a:	0151      	lsls	r1, r2, #5
 8005b3c:	69fa      	ldr	r2, [r7, #28]
 8005b3e:	440a      	add	r2, r1
 8005b40:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005b44:	0cdb      	lsrs	r3, r3, #19
 8005b46:	04db      	lsls	r3, r3, #19
 8005b48:	6113      	str	r3, [r2, #16]
 8005b4a:	e097      	b.n	8005c7c <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005b4c:	69bb      	ldr	r3, [r7, #24]
 8005b4e:	015a      	lsls	r2, r3, #5
 8005b50:	69fb      	ldr	r3, [r7, #28]
 8005b52:	4413      	add	r3, r2
 8005b54:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005b58:	691b      	ldr	r3, [r3, #16]
 8005b5a:	69ba      	ldr	r2, [r7, #24]
 8005b5c:	0151      	lsls	r1, r2, #5
 8005b5e:	69fa      	ldr	r2, [r7, #28]
 8005b60:	440a      	add	r2, r1
 8005b62:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005b66:	0cdb      	lsrs	r3, r3, #19
 8005b68:	04db      	lsls	r3, r3, #19
 8005b6a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005b6c:	69bb      	ldr	r3, [r7, #24]
 8005b6e:	015a      	lsls	r2, r3, #5
 8005b70:	69fb      	ldr	r3, [r7, #28]
 8005b72:	4413      	add	r3, r2
 8005b74:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005b78:	691b      	ldr	r3, [r3, #16]
 8005b7a:	69ba      	ldr	r2, [r7, #24]
 8005b7c:	0151      	lsls	r1, r2, #5
 8005b7e:	69fa      	ldr	r2, [r7, #28]
 8005b80:	440a      	add	r2, r1
 8005b82:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005b86:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8005b8a:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8005b8e:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8005b90:	69bb      	ldr	r3, [r7, #24]
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d11a      	bne.n	8005bcc <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8005b96:	68bb      	ldr	r3, [r7, #8]
 8005b98:	691a      	ldr	r2, [r3, #16]
 8005b9a:	68bb      	ldr	r3, [r7, #8]
 8005b9c:	689b      	ldr	r3, [r3, #8]
 8005b9e:	429a      	cmp	r2, r3
 8005ba0:	d903      	bls.n	8005baa <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8005ba2:	68bb      	ldr	r3, [r7, #8]
 8005ba4:	689a      	ldr	r2, [r3, #8]
 8005ba6:	68bb      	ldr	r3, [r7, #8]
 8005ba8:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005baa:	69bb      	ldr	r3, [r7, #24]
 8005bac:	015a      	lsls	r2, r3, #5
 8005bae:	69fb      	ldr	r3, [r7, #28]
 8005bb0:	4413      	add	r3, r2
 8005bb2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005bb6:	691b      	ldr	r3, [r3, #16]
 8005bb8:	69ba      	ldr	r2, [r7, #24]
 8005bba:	0151      	lsls	r1, r2, #5
 8005bbc:	69fa      	ldr	r2, [r7, #28]
 8005bbe:	440a      	add	r2, r1
 8005bc0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005bc4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005bc8:	6113      	str	r3, [r2, #16]
 8005bca:	e044      	b.n	8005c56 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005bcc:	68bb      	ldr	r3, [r7, #8]
 8005bce:	691a      	ldr	r2, [r3, #16]
 8005bd0:	68bb      	ldr	r3, [r7, #8]
 8005bd2:	689b      	ldr	r3, [r3, #8]
 8005bd4:	4413      	add	r3, r2
 8005bd6:	1e5a      	subs	r2, r3, #1
 8005bd8:	68bb      	ldr	r3, [r7, #8]
 8005bda:	689b      	ldr	r3, [r3, #8]
 8005bdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005be0:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 8005be2:	69bb      	ldr	r3, [r7, #24]
 8005be4:	015a      	lsls	r2, r3, #5
 8005be6:	69fb      	ldr	r3, [r7, #28]
 8005be8:	4413      	add	r3, r2
 8005bea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005bee:	691a      	ldr	r2, [r3, #16]
 8005bf0:	8afb      	ldrh	r3, [r7, #22]
 8005bf2:	04d9      	lsls	r1, r3, #19
 8005bf4:	4ba4      	ldr	r3, [pc, #656]	@ (8005e88 <USB_EPStartXfer+0x3cc>)
 8005bf6:	400b      	ands	r3, r1
 8005bf8:	69b9      	ldr	r1, [r7, #24]
 8005bfa:	0148      	lsls	r0, r1, #5
 8005bfc:	69f9      	ldr	r1, [r7, #28]
 8005bfe:	4401      	add	r1, r0
 8005c00:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8005c04:	4313      	orrs	r3, r2
 8005c06:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8005c08:	68bb      	ldr	r3, [r7, #8]
 8005c0a:	791b      	ldrb	r3, [r3, #4]
 8005c0c:	2b01      	cmp	r3, #1
 8005c0e:	d122      	bne.n	8005c56 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005c10:	69bb      	ldr	r3, [r7, #24]
 8005c12:	015a      	lsls	r2, r3, #5
 8005c14:	69fb      	ldr	r3, [r7, #28]
 8005c16:	4413      	add	r3, r2
 8005c18:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c1c:	691b      	ldr	r3, [r3, #16]
 8005c1e:	69ba      	ldr	r2, [r7, #24]
 8005c20:	0151      	lsls	r1, r2, #5
 8005c22:	69fa      	ldr	r2, [r7, #28]
 8005c24:	440a      	add	r2, r1
 8005c26:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005c2a:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8005c2e:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 8005c30:	69bb      	ldr	r3, [r7, #24]
 8005c32:	015a      	lsls	r2, r3, #5
 8005c34:	69fb      	ldr	r3, [r7, #28]
 8005c36:	4413      	add	r3, r2
 8005c38:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c3c:	691a      	ldr	r2, [r3, #16]
 8005c3e:	8afb      	ldrh	r3, [r7, #22]
 8005c40:	075b      	lsls	r3, r3, #29
 8005c42:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8005c46:	69b9      	ldr	r1, [r7, #24]
 8005c48:	0148      	lsls	r0, r1, #5
 8005c4a:	69f9      	ldr	r1, [r7, #28]
 8005c4c:	4401      	add	r1, r0
 8005c4e:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8005c52:	4313      	orrs	r3, r2
 8005c54:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005c56:	69bb      	ldr	r3, [r7, #24]
 8005c58:	015a      	lsls	r2, r3, #5
 8005c5a:	69fb      	ldr	r3, [r7, #28]
 8005c5c:	4413      	add	r3, r2
 8005c5e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c62:	691a      	ldr	r2, [r3, #16]
 8005c64:	68bb      	ldr	r3, [r7, #8]
 8005c66:	691b      	ldr	r3, [r3, #16]
 8005c68:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005c6c:	69b9      	ldr	r1, [r7, #24]
 8005c6e:	0148      	lsls	r0, r1, #5
 8005c70:	69f9      	ldr	r1, [r7, #28]
 8005c72:	4401      	add	r1, r0
 8005c74:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8005c78:	4313      	orrs	r3, r2
 8005c7a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005c7c:	79fb      	ldrb	r3, [r7, #7]
 8005c7e:	2b01      	cmp	r3, #1
 8005c80:	d14b      	bne.n	8005d1a <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005c82:	68bb      	ldr	r3, [r7, #8]
 8005c84:	69db      	ldr	r3, [r3, #28]
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d009      	beq.n	8005c9e <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005c8a:	69bb      	ldr	r3, [r7, #24]
 8005c8c:	015a      	lsls	r2, r3, #5
 8005c8e:	69fb      	ldr	r3, [r7, #28]
 8005c90:	4413      	add	r3, r2
 8005c92:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c96:	461a      	mov	r2, r3
 8005c98:	68bb      	ldr	r3, [r7, #8]
 8005c9a:	69db      	ldr	r3, [r3, #28]
 8005c9c:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005c9e:	68bb      	ldr	r3, [r7, #8]
 8005ca0:	791b      	ldrb	r3, [r3, #4]
 8005ca2:	2b01      	cmp	r3, #1
 8005ca4:	d128      	bne.n	8005cf8 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005ca6:	69fb      	ldr	r3, [r7, #28]
 8005ca8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005cac:	689b      	ldr	r3, [r3, #8]
 8005cae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d110      	bne.n	8005cd8 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005cb6:	69bb      	ldr	r3, [r7, #24]
 8005cb8:	015a      	lsls	r2, r3, #5
 8005cba:	69fb      	ldr	r3, [r7, #28]
 8005cbc:	4413      	add	r3, r2
 8005cbe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	69ba      	ldr	r2, [r7, #24]
 8005cc6:	0151      	lsls	r1, r2, #5
 8005cc8:	69fa      	ldr	r2, [r7, #28]
 8005cca:	440a      	add	r2, r1
 8005ccc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005cd0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005cd4:	6013      	str	r3, [r2, #0]
 8005cd6:	e00f      	b.n	8005cf8 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005cd8:	69bb      	ldr	r3, [r7, #24]
 8005cda:	015a      	lsls	r2, r3, #5
 8005cdc:	69fb      	ldr	r3, [r7, #28]
 8005cde:	4413      	add	r3, r2
 8005ce0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	69ba      	ldr	r2, [r7, #24]
 8005ce8:	0151      	lsls	r1, r2, #5
 8005cea:	69fa      	ldr	r2, [r7, #28]
 8005cec:	440a      	add	r2, r1
 8005cee:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005cf2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005cf6:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005cf8:	69bb      	ldr	r3, [r7, #24]
 8005cfa:	015a      	lsls	r2, r3, #5
 8005cfc:	69fb      	ldr	r3, [r7, #28]
 8005cfe:	4413      	add	r3, r2
 8005d00:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	69ba      	ldr	r2, [r7, #24]
 8005d08:	0151      	lsls	r1, r2, #5
 8005d0a:	69fa      	ldr	r2, [r7, #28]
 8005d0c:	440a      	add	r2, r1
 8005d0e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005d12:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8005d16:	6013      	str	r3, [r2, #0]
 8005d18:	e166      	b.n	8005fe8 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005d1a:	69bb      	ldr	r3, [r7, #24]
 8005d1c:	015a      	lsls	r2, r3, #5
 8005d1e:	69fb      	ldr	r3, [r7, #28]
 8005d20:	4413      	add	r3, r2
 8005d22:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	69ba      	ldr	r2, [r7, #24]
 8005d2a:	0151      	lsls	r1, r2, #5
 8005d2c:	69fa      	ldr	r2, [r7, #28]
 8005d2e:	440a      	add	r2, r1
 8005d30:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005d34:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8005d38:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005d3a:	68bb      	ldr	r3, [r7, #8]
 8005d3c:	791b      	ldrb	r3, [r3, #4]
 8005d3e:	2b01      	cmp	r3, #1
 8005d40:	d015      	beq.n	8005d6e <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005d42:	68bb      	ldr	r3, [r7, #8]
 8005d44:	691b      	ldr	r3, [r3, #16]
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	f000 814e 	beq.w	8005fe8 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005d4c:	69fb      	ldr	r3, [r7, #28]
 8005d4e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005d52:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005d54:	68bb      	ldr	r3, [r7, #8]
 8005d56:	781b      	ldrb	r3, [r3, #0]
 8005d58:	f003 030f 	and.w	r3, r3, #15
 8005d5c:	2101      	movs	r1, #1
 8005d5e:	fa01 f303 	lsl.w	r3, r1, r3
 8005d62:	69f9      	ldr	r1, [r7, #28]
 8005d64:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005d68:	4313      	orrs	r3, r2
 8005d6a:	634b      	str	r3, [r1, #52]	@ 0x34
 8005d6c:	e13c      	b.n	8005fe8 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005d6e:	69fb      	ldr	r3, [r7, #28]
 8005d70:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005d74:	689b      	ldr	r3, [r3, #8]
 8005d76:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d110      	bne.n	8005da0 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005d7e:	69bb      	ldr	r3, [r7, #24]
 8005d80:	015a      	lsls	r2, r3, #5
 8005d82:	69fb      	ldr	r3, [r7, #28]
 8005d84:	4413      	add	r3, r2
 8005d86:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	69ba      	ldr	r2, [r7, #24]
 8005d8e:	0151      	lsls	r1, r2, #5
 8005d90:	69fa      	ldr	r2, [r7, #28]
 8005d92:	440a      	add	r2, r1
 8005d94:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005d98:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005d9c:	6013      	str	r3, [r2, #0]
 8005d9e:	e00f      	b.n	8005dc0 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005da0:	69bb      	ldr	r3, [r7, #24]
 8005da2:	015a      	lsls	r2, r3, #5
 8005da4:	69fb      	ldr	r3, [r7, #28]
 8005da6:	4413      	add	r3, r2
 8005da8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	69ba      	ldr	r2, [r7, #24]
 8005db0:	0151      	lsls	r1, r2, #5
 8005db2:	69fa      	ldr	r2, [r7, #28]
 8005db4:	440a      	add	r2, r1
 8005db6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005dba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005dbe:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005dc0:	68bb      	ldr	r3, [r7, #8]
 8005dc2:	68d9      	ldr	r1, [r3, #12]
 8005dc4:	68bb      	ldr	r3, [r7, #8]
 8005dc6:	781a      	ldrb	r2, [r3, #0]
 8005dc8:	68bb      	ldr	r3, [r7, #8]
 8005dca:	691b      	ldr	r3, [r3, #16]
 8005dcc:	b298      	uxth	r0, r3
 8005dce:	79fb      	ldrb	r3, [r7, #7]
 8005dd0:	9300      	str	r3, [sp, #0]
 8005dd2:	4603      	mov	r3, r0
 8005dd4:	68f8      	ldr	r0, [r7, #12]
 8005dd6:	f000 f9b9 	bl	800614c <USB_WritePacket>
 8005dda:	e105      	b.n	8005fe8 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005ddc:	69bb      	ldr	r3, [r7, #24]
 8005dde:	015a      	lsls	r2, r3, #5
 8005de0:	69fb      	ldr	r3, [r7, #28]
 8005de2:	4413      	add	r3, r2
 8005de4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005de8:	691b      	ldr	r3, [r3, #16]
 8005dea:	69ba      	ldr	r2, [r7, #24]
 8005dec:	0151      	lsls	r1, r2, #5
 8005dee:	69fa      	ldr	r2, [r7, #28]
 8005df0:	440a      	add	r2, r1
 8005df2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005df6:	0cdb      	lsrs	r3, r3, #19
 8005df8:	04db      	lsls	r3, r3, #19
 8005dfa:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005dfc:	69bb      	ldr	r3, [r7, #24]
 8005dfe:	015a      	lsls	r2, r3, #5
 8005e00:	69fb      	ldr	r3, [r7, #28]
 8005e02:	4413      	add	r3, r2
 8005e04:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005e08:	691b      	ldr	r3, [r3, #16]
 8005e0a:	69ba      	ldr	r2, [r7, #24]
 8005e0c:	0151      	lsls	r1, r2, #5
 8005e0e:	69fa      	ldr	r2, [r7, #28]
 8005e10:	440a      	add	r2, r1
 8005e12:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005e16:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8005e1a:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8005e1e:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8005e20:	69bb      	ldr	r3, [r7, #24]
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d132      	bne.n	8005e8c <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 8005e26:	68bb      	ldr	r3, [r7, #8]
 8005e28:	691b      	ldr	r3, [r3, #16]
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d003      	beq.n	8005e36 <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 8005e2e:	68bb      	ldr	r3, [r7, #8]
 8005e30:	689a      	ldr	r2, [r3, #8]
 8005e32:	68bb      	ldr	r3, [r7, #8]
 8005e34:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8005e36:	68bb      	ldr	r3, [r7, #8]
 8005e38:	689a      	ldr	r2, [r3, #8]
 8005e3a:	68bb      	ldr	r3, [r7, #8]
 8005e3c:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8005e3e:	69bb      	ldr	r3, [r7, #24]
 8005e40:	015a      	lsls	r2, r3, #5
 8005e42:	69fb      	ldr	r3, [r7, #28]
 8005e44:	4413      	add	r3, r2
 8005e46:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005e4a:	691a      	ldr	r2, [r3, #16]
 8005e4c:	68bb      	ldr	r3, [r7, #8]
 8005e4e:	6a1b      	ldr	r3, [r3, #32]
 8005e50:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005e54:	69b9      	ldr	r1, [r7, #24]
 8005e56:	0148      	lsls	r0, r1, #5
 8005e58:	69f9      	ldr	r1, [r7, #28]
 8005e5a:	4401      	add	r1, r0
 8005e5c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005e60:	4313      	orrs	r3, r2
 8005e62:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005e64:	69bb      	ldr	r3, [r7, #24]
 8005e66:	015a      	lsls	r2, r3, #5
 8005e68:	69fb      	ldr	r3, [r7, #28]
 8005e6a:	4413      	add	r3, r2
 8005e6c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005e70:	691b      	ldr	r3, [r3, #16]
 8005e72:	69ba      	ldr	r2, [r7, #24]
 8005e74:	0151      	lsls	r1, r2, #5
 8005e76:	69fa      	ldr	r2, [r7, #28]
 8005e78:	440a      	add	r2, r1
 8005e7a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005e7e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005e82:	6113      	str	r3, [r2, #16]
 8005e84:	e062      	b.n	8005f4c <USB_EPStartXfer+0x490>
 8005e86:	bf00      	nop
 8005e88:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8005e8c:	68bb      	ldr	r3, [r7, #8]
 8005e8e:	691b      	ldr	r3, [r3, #16]
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d123      	bne.n	8005edc <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005e94:	69bb      	ldr	r3, [r7, #24]
 8005e96:	015a      	lsls	r2, r3, #5
 8005e98:	69fb      	ldr	r3, [r7, #28]
 8005e9a:	4413      	add	r3, r2
 8005e9c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ea0:	691a      	ldr	r2, [r3, #16]
 8005ea2:	68bb      	ldr	r3, [r7, #8]
 8005ea4:	689b      	ldr	r3, [r3, #8]
 8005ea6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005eaa:	69b9      	ldr	r1, [r7, #24]
 8005eac:	0148      	lsls	r0, r1, #5
 8005eae:	69f9      	ldr	r1, [r7, #28]
 8005eb0:	4401      	add	r1, r0
 8005eb2:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005eb6:	4313      	orrs	r3, r2
 8005eb8:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005eba:	69bb      	ldr	r3, [r7, #24]
 8005ebc:	015a      	lsls	r2, r3, #5
 8005ebe:	69fb      	ldr	r3, [r7, #28]
 8005ec0:	4413      	add	r3, r2
 8005ec2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ec6:	691b      	ldr	r3, [r3, #16]
 8005ec8:	69ba      	ldr	r2, [r7, #24]
 8005eca:	0151      	lsls	r1, r2, #5
 8005ecc:	69fa      	ldr	r2, [r7, #28]
 8005ece:	440a      	add	r2, r1
 8005ed0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005ed4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005ed8:	6113      	str	r3, [r2, #16]
 8005eda:	e037      	b.n	8005f4c <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005edc:	68bb      	ldr	r3, [r7, #8]
 8005ede:	691a      	ldr	r2, [r3, #16]
 8005ee0:	68bb      	ldr	r3, [r7, #8]
 8005ee2:	689b      	ldr	r3, [r3, #8]
 8005ee4:	4413      	add	r3, r2
 8005ee6:	1e5a      	subs	r2, r3, #1
 8005ee8:	68bb      	ldr	r3, [r7, #8]
 8005eea:	689b      	ldr	r3, [r3, #8]
 8005eec:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ef0:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8005ef2:	68bb      	ldr	r3, [r7, #8]
 8005ef4:	689b      	ldr	r3, [r3, #8]
 8005ef6:	8afa      	ldrh	r2, [r7, #22]
 8005ef8:	fb03 f202 	mul.w	r2, r3, r2
 8005efc:	68bb      	ldr	r3, [r7, #8]
 8005efe:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005f00:	69bb      	ldr	r3, [r7, #24]
 8005f02:	015a      	lsls	r2, r3, #5
 8005f04:	69fb      	ldr	r3, [r7, #28]
 8005f06:	4413      	add	r3, r2
 8005f08:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f0c:	691a      	ldr	r2, [r3, #16]
 8005f0e:	8afb      	ldrh	r3, [r7, #22]
 8005f10:	04d9      	lsls	r1, r3, #19
 8005f12:	4b38      	ldr	r3, [pc, #224]	@ (8005ff4 <USB_EPStartXfer+0x538>)
 8005f14:	400b      	ands	r3, r1
 8005f16:	69b9      	ldr	r1, [r7, #24]
 8005f18:	0148      	lsls	r0, r1, #5
 8005f1a:	69f9      	ldr	r1, [r7, #28]
 8005f1c:	4401      	add	r1, r0
 8005f1e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005f22:	4313      	orrs	r3, r2
 8005f24:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8005f26:	69bb      	ldr	r3, [r7, #24]
 8005f28:	015a      	lsls	r2, r3, #5
 8005f2a:	69fb      	ldr	r3, [r7, #28]
 8005f2c:	4413      	add	r3, r2
 8005f2e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f32:	691a      	ldr	r2, [r3, #16]
 8005f34:	68bb      	ldr	r3, [r7, #8]
 8005f36:	6a1b      	ldr	r3, [r3, #32]
 8005f38:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005f3c:	69b9      	ldr	r1, [r7, #24]
 8005f3e:	0148      	lsls	r0, r1, #5
 8005f40:	69f9      	ldr	r1, [r7, #28]
 8005f42:	4401      	add	r1, r0
 8005f44:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005f48:	4313      	orrs	r3, r2
 8005f4a:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8005f4c:	79fb      	ldrb	r3, [r7, #7]
 8005f4e:	2b01      	cmp	r3, #1
 8005f50:	d10d      	bne.n	8005f6e <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005f52:	68bb      	ldr	r3, [r7, #8]
 8005f54:	68db      	ldr	r3, [r3, #12]
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d009      	beq.n	8005f6e <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005f5a:	68bb      	ldr	r3, [r7, #8]
 8005f5c:	68d9      	ldr	r1, [r3, #12]
 8005f5e:	69bb      	ldr	r3, [r7, #24]
 8005f60:	015a      	lsls	r2, r3, #5
 8005f62:	69fb      	ldr	r3, [r7, #28]
 8005f64:	4413      	add	r3, r2
 8005f66:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f6a:	460a      	mov	r2, r1
 8005f6c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005f6e:	68bb      	ldr	r3, [r7, #8]
 8005f70:	791b      	ldrb	r3, [r3, #4]
 8005f72:	2b01      	cmp	r3, #1
 8005f74:	d128      	bne.n	8005fc8 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005f76:	69fb      	ldr	r3, [r7, #28]
 8005f78:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005f7c:	689b      	ldr	r3, [r3, #8]
 8005f7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d110      	bne.n	8005fa8 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005f86:	69bb      	ldr	r3, [r7, #24]
 8005f88:	015a      	lsls	r2, r3, #5
 8005f8a:	69fb      	ldr	r3, [r7, #28]
 8005f8c:	4413      	add	r3, r2
 8005f8e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	69ba      	ldr	r2, [r7, #24]
 8005f96:	0151      	lsls	r1, r2, #5
 8005f98:	69fa      	ldr	r2, [r7, #28]
 8005f9a:	440a      	add	r2, r1
 8005f9c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005fa0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005fa4:	6013      	str	r3, [r2, #0]
 8005fa6:	e00f      	b.n	8005fc8 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005fa8:	69bb      	ldr	r3, [r7, #24]
 8005faa:	015a      	lsls	r2, r3, #5
 8005fac:	69fb      	ldr	r3, [r7, #28]
 8005fae:	4413      	add	r3, r2
 8005fb0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	69ba      	ldr	r2, [r7, #24]
 8005fb8:	0151      	lsls	r1, r2, #5
 8005fba:	69fa      	ldr	r2, [r7, #28]
 8005fbc:	440a      	add	r2, r1
 8005fbe:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005fc2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005fc6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005fc8:	69bb      	ldr	r3, [r7, #24]
 8005fca:	015a      	lsls	r2, r3, #5
 8005fcc:	69fb      	ldr	r3, [r7, #28]
 8005fce:	4413      	add	r3, r2
 8005fd0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	69ba      	ldr	r2, [r7, #24]
 8005fd8:	0151      	lsls	r1, r2, #5
 8005fda:	69fa      	ldr	r2, [r7, #28]
 8005fdc:	440a      	add	r2, r1
 8005fde:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005fe2:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8005fe6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005fe8:	2300      	movs	r3, #0
}
 8005fea:	4618      	mov	r0, r3
 8005fec:	3720      	adds	r7, #32
 8005fee:	46bd      	mov	sp, r7
 8005ff0:	bd80      	pop	{r7, pc}
 8005ff2:	bf00      	nop
 8005ff4:	1ff80000 	.word	0x1ff80000

08005ff8 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005ff8:	b480      	push	{r7}
 8005ffa:	b087      	sub	sp, #28
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	6078      	str	r0, [r7, #4]
 8006000:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006002:	2300      	movs	r3, #0
 8006004:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8006006:	2300      	movs	r3, #0
 8006008:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800600e:	683b      	ldr	r3, [r7, #0]
 8006010:	785b      	ldrb	r3, [r3, #1]
 8006012:	2b01      	cmp	r3, #1
 8006014:	d14a      	bne.n	80060ac <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006016:	683b      	ldr	r3, [r7, #0]
 8006018:	781b      	ldrb	r3, [r3, #0]
 800601a:	015a      	lsls	r2, r3, #5
 800601c:	693b      	ldr	r3, [r7, #16]
 800601e:	4413      	add	r3, r2
 8006020:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800602a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800602e:	f040 8086 	bne.w	800613e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8006032:	683b      	ldr	r3, [r7, #0]
 8006034:	781b      	ldrb	r3, [r3, #0]
 8006036:	015a      	lsls	r2, r3, #5
 8006038:	693b      	ldr	r3, [r7, #16]
 800603a:	4413      	add	r3, r2
 800603c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	683a      	ldr	r2, [r7, #0]
 8006044:	7812      	ldrb	r2, [r2, #0]
 8006046:	0151      	lsls	r1, r2, #5
 8006048:	693a      	ldr	r2, [r7, #16]
 800604a:	440a      	add	r2, r1
 800604c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006050:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006054:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8006056:	683b      	ldr	r3, [r7, #0]
 8006058:	781b      	ldrb	r3, [r3, #0]
 800605a:	015a      	lsls	r2, r3, #5
 800605c:	693b      	ldr	r3, [r7, #16]
 800605e:	4413      	add	r3, r2
 8006060:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	683a      	ldr	r2, [r7, #0]
 8006068:	7812      	ldrb	r2, [r2, #0]
 800606a:	0151      	lsls	r1, r2, #5
 800606c:	693a      	ldr	r2, [r7, #16]
 800606e:	440a      	add	r2, r1
 8006070:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006074:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006078:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	3301      	adds	r3, #1
 800607e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	f242 7210 	movw	r2, #10000	@ 0x2710
 8006086:	4293      	cmp	r3, r2
 8006088:	d902      	bls.n	8006090 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800608a:	2301      	movs	r3, #1
 800608c:	75fb      	strb	r3, [r7, #23]
          break;
 800608e:	e056      	b.n	800613e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8006090:	683b      	ldr	r3, [r7, #0]
 8006092:	781b      	ldrb	r3, [r3, #0]
 8006094:	015a      	lsls	r2, r3, #5
 8006096:	693b      	ldr	r3, [r7, #16]
 8006098:	4413      	add	r3, r2
 800609a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80060a4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80060a8:	d0e7      	beq.n	800607a <USB_EPStopXfer+0x82>
 80060aa:	e048      	b.n	800613e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80060ac:	683b      	ldr	r3, [r7, #0]
 80060ae:	781b      	ldrb	r3, [r3, #0]
 80060b0:	015a      	lsls	r2, r3, #5
 80060b2:	693b      	ldr	r3, [r7, #16]
 80060b4:	4413      	add	r3, r2
 80060b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80060c0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80060c4:	d13b      	bne.n	800613e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80060c6:	683b      	ldr	r3, [r7, #0]
 80060c8:	781b      	ldrb	r3, [r3, #0]
 80060ca:	015a      	lsls	r2, r3, #5
 80060cc:	693b      	ldr	r3, [r7, #16]
 80060ce:	4413      	add	r3, r2
 80060d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	683a      	ldr	r2, [r7, #0]
 80060d8:	7812      	ldrb	r2, [r2, #0]
 80060da:	0151      	lsls	r1, r2, #5
 80060dc:	693a      	ldr	r2, [r7, #16]
 80060de:	440a      	add	r2, r1
 80060e0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80060e4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80060e8:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80060ea:	683b      	ldr	r3, [r7, #0]
 80060ec:	781b      	ldrb	r3, [r3, #0]
 80060ee:	015a      	lsls	r2, r3, #5
 80060f0:	693b      	ldr	r3, [r7, #16]
 80060f2:	4413      	add	r3, r2
 80060f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	683a      	ldr	r2, [r7, #0]
 80060fc:	7812      	ldrb	r2, [r2, #0]
 80060fe:	0151      	lsls	r1, r2, #5
 8006100:	693a      	ldr	r2, [r7, #16]
 8006102:	440a      	add	r2, r1
 8006104:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006108:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800610c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	3301      	adds	r3, #1
 8006112:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	f242 7210 	movw	r2, #10000	@ 0x2710
 800611a:	4293      	cmp	r3, r2
 800611c:	d902      	bls.n	8006124 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800611e:	2301      	movs	r3, #1
 8006120:	75fb      	strb	r3, [r7, #23]
          break;
 8006122:	e00c      	b.n	800613e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8006124:	683b      	ldr	r3, [r7, #0]
 8006126:	781b      	ldrb	r3, [r3, #0]
 8006128:	015a      	lsls	r2, r3, #5
 800612a:	693b      	ldr	r3, [r7, #16]
 800612c:	4413      	add	r3, r2
 800612e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006138:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800613c:	d0e7      	beq.n	800610e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800613e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006140:	4618      	mov	r0, r3
 8006142:	371c      	adds	r7, #28
 8006144:	46bd      	mov	sp, r7
 8006146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614a:	4770      	bx	lr

0800614c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800614c:	b480      	push	{r7}
 800614e:	b089      	sub	sp, #36	@ 0x24
 8006150:	af00      	add	r7, sp, #0
 8006152:	60f8      	str	r0, [r7, #12]
 8006154:	60b9      	str	r1, [r7, #8]
 8006156:	4611      	mov	r1, r2
 8006158:	461a      	mov	r2, r3
 800615a:	460b      	mov	r3, r1
 800615c:	71fb      	strb	r3, [r7, #7]
 800615e:	4613      	mov	r3, r2
 8006160:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006166:	68bb      	ldr	r3, [r7, #8]
 8006168:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800616a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800616e:	2b00      	cmp	r3, #0
 8006170:	d123      	bne.n	80061ba <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006172:	88bb      	ldrh	r3, [r7, #4]
 8006174:	3303      	adds	r3, #3
 8006176:	089b      	lsrs	r3, r3, #2
 8006178:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800617a:	2300      	movs	r3, #0
 800617c:	61bb      	str	r3, [r7, #24]
 800617e:	e018      	b.n	80061b2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006180:	79fb      	ldrb	r3, [r7, #7]
 8006182:	031a      	lsls	r2, r3, #12
 8006184:	697b      	ldr	r3, [r7, #20]
 8006186:	4413      	add	r3, r2
 8006188:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800618c:	461a      	mov	r2, r3
 800618e:	69fb      	ldr	r3, [r7, #28]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006194:	69fb      	ldr	r3, [r7, #28]
 8006196:	3301      	adds	r3, #1
 8006198:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800619a:	69fb      	ldr	r3, [r7, #28]
 800619c:	3301      	adds	r3, #1
 800619e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80061a0:	69fb      	ldr	r3, [r7, #28]
 80061a2:	3301      	adds	r3, #1
 80061a4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80061a6:	69fb      	ldr	r3, [r7, #28]
 80061a8:	3301      	adds	r3, #1
 80061aa:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80061ac:	69bb      	ldr	r3, [r7, #24]
 80061ae:	3301      	adds	r3, #1
 80061b0:	61bb      	str	r3, [r7, #24]
 80061b2:	69ba      	ldr	r2, [r7, #24]
 80061b4:	693b      	ldr	r3, [r7, #16]
 80061b6:	429a      	cmp	r2, r3
 80061b8:	d3e2      	bcc.n	8006180 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80061ba:	2300      	movs	r3, #0
}
 80061bc:	4618      	mov	r0, r3
 80061be:	3724      	adds	r7, #36	@ 0x24
 80061c0:	46bd      	mov	sp, r7
 80061c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c6:	4770      	bx	lr

080061c8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80061c8:	b480      	push	{r7}
 80061ca:	b08b      	sub	sp, #44	@ 0x2c
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	60f8      	str	r0, [r7, #12]
 80061d0:	60b9      	str	r1, [r7, #8]
 80061d2:	4613      	mov	r3, r2
 80061d4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80061da:	68bb      	ldr	r3, [r7, #8]
 80061dc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80061de:	88fb      	ldrh	r3, [r7, #6]
 80061e0:	089b      	lsrs	r3, r3, #2
 80061e2:	b29b      	uxth	r3, r3
 80061e4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80061e6:	88fb      	ldrh	r3, [r7, #6]
 80061e8:	f003 0303 	and.w	r3, r3, #3
 80061ec:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80061ee:	2300      	movs	r3, #0
 80061f0:	623b      	str	r3, [r7, #32]
 80061f2:	e014      	b.n	800621e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80061f4:	69bb      	ldr	r3, [r7, #24]
 80061f6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80061fa:	681a      	ldr	r2, [r3, #0]
 80061fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061fe:	601a      	str	r2, [r3, #0]
    pDest++;
 8006200:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006202:	3301      	adds	r3, #1
 8006204:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006206:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006208:	3301      	adds	r3, #1
 800620a:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800620c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800620e:	3301      	adds	r3, #1
 8006210:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006212:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006214:	3301      	adds	r3, #1
 8006216:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8006218:	6a3b      	ldr	r3, [r7, #32]
 800621a:	3301      	adds	r3, #1
 800621c:	623b      	str	r3, [r7, #32]
 800621e:	6a3a      	ldr	r2, [r7, #32]
 8006220:	697b      	ldr	r3, [r7, #20]
 8006222:	429a      	cmp	r2, r3
 8006224:	d3e6      	bcc.n	80061f4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006226:	8bfb      	ldrh	r3, [r7, #30]
 8006228:	2b00      	cmp	r3, #0
 800622a:	d01e      	beq.n	800626a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800622c:	2300      	movs	r3, #0
 800622e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006230:	69bb      	ldr	r3, [r7, #24]
 8006232:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006236:	461a      	mov	r2, r3
 8006238:	f107 0310 	add.w	r3, r7, #16
 800623c:	6812      	ldr	r2, [r2, #0]
 800623e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006240:	693a      	ldr	r2, [r7, #16]
 8006242:	6a3b      	ldr	r3, [r7, #32]
 8006244:	b2db      	uxtb	r3, r3
 8006246:	00db      	lsls	r3, r3, #3
 8006248:	fa22 f303 	lsr.w	r3, r2, r3
 800624c:	b2da      	uxtb	r2, r3
 800624e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006250:	701a      	strb	r2, [r3, #0]
      i++;
 8006252:	6a3b      	ldr	r3, [r7, #32]
 8006254:	3301      	adds	r3, #1
 8006256:	623b      	str	r3, [r7, #32]
      pDest++;
 8006258:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800625a:	3301      	adds	r3, #1
 800625c:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800625e:	8bfb      	ldrh	r3, [r7, #30]
 8006260:	3b01      	subs	r3, #1
 8006262:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006264:	8bfb      	ldrh	r3, [r7, #30]
 8006266:	2b00      	cmp	r3, #0
 8006268:	d1ea      	bne.n	8006240 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800626a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800626c:	4618      	mov	r0, r3
 800626e:	372c      	adds	r7, #44	@ 0x2c
 8006270:	46bd      	mov	sp, r7
 8006272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006276:	4770      	bx	lr

08006278 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006278:	b480      	push	{r7}
 800627a:	b085      	sub	sp, #20
 800627c:	af00      	add	r7, sp, #0
 800627e:	6078      	str	r0, [r7, #4]
 8006280:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006286:	683b      	ldr	r3, [r7, #0]
 8006288:	781b      	ldrb	r3, [r3, #0]
 800628a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800628c:	683b      	ldr	r3, [r7, #0]
 800628e:	785b      	ldrb	r3, [r3, #1]
 8006290:	2b01      	cmp	r3, #1
 8006292:	d12c      	bne.n	80062ee <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006294:	68bb      	ldr	r3, [r7, #8]
 8006296:	015a      	lsls	r2, r3, #5
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	4413      	add	r3, r2
 800629c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	db12      	blt.n	80062cc <USB_EPSetStall+0x54>
 80062a6:	68bb      	ldr	r3, [r7, #8]
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d00f      	beq.n	80062cc <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80062ac:	68bb      	ldr	r3, [r7, #8]
 80062ae:	015a      	lsls	r2, r3, #5
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	4413      	add	r3, r2
 80062b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	68ba      	ldr	r2, [r7, #8]
 80062bc:	0151      	lsls	r1, r2, #5
 80062be:	68fa      	ldr	r2, [r7, #12]
 80062c0:	440a      	add	r2, r1
 80062c2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80062c6:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80062ca:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80062cc:	68bb      	ldr	r3, [r7, #8]
 80062ce:	015a      	lsls	r2, r3, #5
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	4413      	add	r3, r2
 80062d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	68ba      	ldr	r2, [r7, #8]
 80062dc:	0151      	lsls	r1, r2, #5
 80062de:	68fa      	ldr	r2, [r7, #12]
 80062e0:	440a      	add	r2, r1
 80062e2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80062e6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80062ea:	6013      	str	r3, [r2, #0]
 80062ec:	e02b      	b.n	8006346 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80062ee:	68bb      	ldr	r3, [r7, #8]
 80062f0:	015a      	lsls	r2, r3, #5
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	4413      	add	r3, r2
 80062f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	db12      	blt.n	8006326 <USB_EPSetStall+0xae>
 8006300:	68bb      	ldr	r3, [r7, #8]
 8006302:	2b00      	cmp	r3, #0
 8006304:	d00f      	beq.n	8006326 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006306:	68bb      	ldr	r3, [r7, #8]
 8006308:	015a      	lsls	r2, r3, #5
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	4413      	add	r3, r2
 800630e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	68ba      	ldr	r2, [r7, #8]
 8006316:	0151      	lsls	r1, r2, #5
 8006318:	68fa      	ldr	r2, [r7, #12]
 800631a:	440a      	add	r2, r1
 800631c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006320:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006324:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8006326:	68bb      	ldr	r3, [r7, #8]
 8006328:	015a      	lsls	r2, r3, #5
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	4413      	add	r3, r2
 800632e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	68ba      	ldr	r2, [r7, #8]
 8006336:	0151      	lsls	r1, r2, #5
 8006338:	68fa      	ldr	r2, [r7, #12]
 800633a:	440a      	add	r2, r1
 800633c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006340:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006344:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006346:	2300      	movs	r3, #0
}
 8006348:	4618      	mov	r0, r3
 800634a:	3714      	adds	r7, #20
 800634c:	46bd      	mov	sp, r7
 800634e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006352:	4770      	bx	lr

08006354 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006354:	b480      	push	{r7}
 8006356:	b085      	sub	sp, #20
 8006358:	af00      	add	r7, sp, #0
 800635a:	6078      	str	r0, [r7, #4]
 800635c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006362:	683b      	ldr	r3, [r7, #0]
 8006364:	781b      	ldrb	r3, [r3, #0]
 8006366:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006368:	683b      	ldr	r3, [r7, #0]
 800636a:	785b      	ldrb	r3, [r3, #1]
 800636c:	2b01      	cmp	r3, #1
 800636e:	d128      	bne.n	80063c2 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006370:	68bb      	ldr	r3, [r7, #8]
 8006372:	015a      	lsls	r2, r3, #5
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	4413      	add	r3, r2
 8006378:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	68ba      	ldr	r2, [r7, #8]
 8006380:	0151      	lsls	r1, r2, #5
 8006382:	68fa      	ldr	r2, [r7, #12]
 8006384:	440a      	add	r2, r1
 8006386:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800638a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800638e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006390:	683b      	ldr	r3, [r7, #0]
 8006392:	791b      	ldrb	r3, [r3, #4]
 8006394:	2b03      	cmp	r3, #3
 8006396:	d003      	beq.n	80063a0 <USB_EPClearStall+0x4c>
 8006398:	683b      	ldr	r3, [r7, #0]
 800639a:	791b      	ldrb	r3, [r3, #4]
 800639c:	2b02      	cmp	r3, #2
 800639e:	d138      	bne.n	8006412 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80063a0:	68bb      	ldr	r3, [r7, #8]
 80063a2:	015a      	lsls	r2, r3, #5
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	4413      	add	r3, r2
 80063a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	68ba      	ldr	r2, [r7, #8]
 80063b0:	0151      	lsls	r1, r2, #5
 80063b2:	68fa      	ldr	r2, [r7, #12]
 80063b4:	440a      	add	r2, r1
 80063b6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80063ba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80063be:	6013      	str	r3, [r2, #0]
 80063c0:	e027      	b.n	8006412 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80063c2:	68bb      	ldr	r3, [r7, #8]
 80063c4:	015a      	lsls	r2, r3, #5
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	4413      	add	r3, r2
 80063ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	68ba      	ldr	r2, [r7, #8]
 80063d2:	0151      	lsls	r1, r2, #5
 80063d4:	68fa      	ldr	r2, [r7, #12]
 80063d6:	440a      	add	r2, r1
 80063d8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80063dc:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80063e0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80063e2:	683b      	ldr	r3, [r7, #0]
 80063e4:	791b      	ldrb	r3, [r3, #4]
 80063e6:	2b03      	cmp	r3, #3
 80063e8:	d003      	beq.n	80063f2 <USB_EPClearStall+0x9e>
 80063ea:	683b      	ldr	r3, [r7, #0]
 80063ec:	791b      	ldrb	r3, [r3, #4]
 80063ee:	2b02      	cmp	r3, #2
 80063f0:	d10f      	bne.n	8006412 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80063f2:	68bb      	ldr	r3, [r7, #8]
 80063f4:	015a      	lsls	r2, r3, #5
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	4413      	add	r3, r2
 80063fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	68ba      	ldr	r2, [r7, #8]
 8006402:	0151      	lsls	r1, r2, #5
 8006404:	68fa      	ldr	r2, [r7, #12]
 8006406:	440a      	add	r2, r1
 8006408:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800640c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006410:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8006412:	2300      	movs	r3, #0
}
 8006414:	4618      	mov	r0, r3
 8006416:	3714      	adds	r7, #20
 8006418:	46bd      	mov	sp, r7
 800641a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641e:	4770      	bx	lr

08006420 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006420:	b480      	push	{r7}
 8006422:	b085      	sub	sp, #20
 8006424:	af00      	add	r7, sp, #0
 8006426:	6078      	str	r0, [r7, #4]
 8006428:	460b      	mov	r3, r1
 800642a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	68fa      	ldr	r2, [r7, #12]
 800643a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800643e:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8006442:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800644a:	681a      	ldr	r2, [r3, #0]
 800644c:	78fb      	ldrb	r3, [r7, #3]
 800644e:	011b      	lsls	r3, r3, #4
 8006450:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8006454:	68f9      	ldr	r1, [r7, #12]
 8006456:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800645a:	4313      	orrs	r3, r2
 800645c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800645e:	2300      	movs	r3, #0
}
 8006460:	4618      	mov	r0, r3
 8006462:	3714      	adds	r7, #20
 8006464:	46bd      	mov	sp, r7
 8006466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646a:	4770      	bx	lr

0800646c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800646c:	b480      	push	{r7}
 800646e:	b085      	sub	sp, #20
 8006470:	af00      	add	r7, sp, #0
 8006472:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	68fa      	ldr	r2, [r7, #12]
 8006482:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8006486:	f023 0303 	bic.w	r3, r3, #3
 800648a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006492:	685b      	ldr	r3, [r3, #4]
 8006494:	68fa      	ldr	r2, [r7, #12]
 8006496:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800649a:	f023 0302 	bic.w	r3, r3, #2
 800649e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80064a0:	2300      	movs	r3, #0
}
 80064a2:	4618      	mov	r0, r3
 80064a4:	3714      	adds	r7, #20
 80064a6:	46bd      	mov	sp, r7
 80064a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ac:	4770      	bx	lr

080064ae <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80064ae:	b480      	push	{r7}
 80064b0:	b085      	sub	sp, #20
 80064b2:	af00      	add	r7, sp, #0
 80064b4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	68fa      	ldr	r2, [r7, #12]
 80064c4:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80064c8:	f023 0303 	bic.w	r3, r3, #3
 80064cc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80064d4:	685b      	ldr	r3, [r3, #4]
 80064d6:	68fa      	ldr	r2, [r7, #12]
 80064d8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80064dc:	f043 0302 	orr.w	r3, r3, #2
 80064e0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80064e2:	2300      	movs	r3, #0
}
 80064e4:	4618      	mov	r0, r3
 80064e6:	3714      	adds	r7, #20
 80064e8:	46bd      	mov	sp, r7
 80064ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ee:	4770      	bx	lr

080064f0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80064f0:	b480      	push	{r7}
 80064f2:	b085      	sub	sp, #20
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	695b      	ldr	r3, [r3, #20]
 80064fc:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	699b      	ldr	r3, [r3, #24]
 8006502:	68fa      	ldr	r2, [r7, #12]
 8006504:	4013      	ands	r3, r2
 8006506:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006508:	68fb      	ldr	r3, [r7, #12]
}
 800650a:	4618      	mov	r0, r3
 800650c:	3714      	adds	r7, #20
 800650e:	46bd      	mov	sp, r7
 8006510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006514:	4770      	bx	lr

08006516 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8006516:	b480      	push	{r7}
 8006518:	b085      	sub	sp, #20
 800651a:	af00      	add	r7, sp, #0
 800651c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006528:	699b      	ldr	r3, [r3, #24]
 800652a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006532:	69db      	ldr	r3, [r3, #28]
 8006534:	68ba      	ldr	r2, [r7, #8]
 8006536:	4013      	ands	r3, r2
 8006538:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800653a:	68bb      	ldr	r3, [r7, #8]
 800653c:	0c1b      	lsrs	r3, r3, #16
}
 800653e:	4618      	mov	r0, r3
 8006540:	3714      	adds	r7, #20
 8006542:	46bd      	mov	sp, r7
 8006544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006548:	4770      	bx	lr

0800654a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800654a:	b480      	push	{r7}
 800654c:	b085      	sub	sp, #20
 800654e:	af00      	add	r7, sp, #0
 8006550:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800655c:	699b      	ldr	r3, [r3, #24]
 800655e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006566:	69db      	ldr	r3, [r3, #28]
 8006568:	68ba      	ldr	r2, [r7, #8]
 800656a:	4013      	ands	r3, r2
 800656c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800656e:	68bb      	ldr	r3, [r7, #8]
 8006570:	b29b      	uxth	r3, r3
}
 8006572:	4618      	mov	r0, r3
 8006574:	3714      	adds	r7, #20
 8006576:	46bd      	mov	sp, r7
 8006578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657c:	4770      	bx	lr

0800657e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800657e:	b480      	push	{r7}
 8006580:	b085      	sub	sp, #20
 8006582:	af00      	add	r7, sp, #0
 8006584:	6078      	str	r0, [r7, #4]
 8006586:	460b      	mov	r3, r1
 8006588:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800658e:	78fb      	ldrb	r3, [r7, #3]
 8006590:	015a      	lsls	r2, r3, #5
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	4413      	add	r3, r2
 8006596:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800659a:	689b      	ldr	r3, [r3, #8]
 800659c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80065a4:	695b      	ldr	r3, [r3, #20]
 80065a6:	68ba      	ldr	r2, [r7, #8]
 80065a8:	4013      	ands	r3, r2
 80065aa:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80065ac:	68bb      	ldr	r3, [r7, #8]
}
 80065ae:	4618      	mov	r0, r3
 80065b0:	3714      	adds	r7, #20
 80065b2:	46bd      	mov	sp, r7
 80065b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b8:	4770      	bx	lr

080065ba <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80065ba:	b480      	push	{r7}
 80065bc:	b087      	sub	sp, #28
 80065be:	af00      	add	r7, sp, #0
 80065c0:	6078      	str	r0, [r7, #4]
 80065c2:	460b      	mov	r3, r1
 80065c4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80065ca:	697b      	ldr	r3, [r7, #20]
 80065cc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80065d0:	691b      	ldr	r3, [r3, #16]
 80065d2:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80065d4:	697b      	ldr	r3, [r7, #20]
 80065d6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80065da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80065dc:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80065de:	78fb      	ldrb	r3, [r7, #3]
 80065e0:	f003 030f 	and.w	r3, r3, #15
 80065e4:	68fa      	ldr	r2, [r7, #12]
 80065e6:	fa22 f303 	lsr.w	r3, r2, r3
 80065ea:	01db      	lsls	r3, r3, #7
 80065ec:	b2db      	uxtb	r3, r3
 80065ee:	693a      	ldr	r2, [r7, #16]
 80065f0:	4313      	orrs	r3, r2
 80065f2:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80065f4:	78fb      	ldrb	r3, [r7, #3]
 80065f6:	015a      	lsls	r2, r3, #5
 80065f8:	697b      	ldr	r3, [r7, #20]
 80065fa:	4413      	add	r3, r2
 80065fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006600:	689b      	ldr	r3, [r3, #8]
 8006602:	693a      	ldr	r2, [r7, #16]
 8006604:	4013      	ands	r3, r2
 8006606:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006608:	68bb      	ldr	r3, [r7, #8]
}
 800660a:	4618      	mov	r0, r3
 800660c:	371c      	adds	r7, #28
 800660e:	46bd      	mov	sp, r7
 8006610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006614:	4770      	bx	lr

08006616 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8006616:	b480      	push	{r7}
 8006618:	b083      	sub	sp, #12
 800661a:	af00      	add	r7, sp, #0
 800661c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	695b      	ldr	r3, [r3, #20]
 8006622:	f003 0301 	and.w	r3, r3, #1
}
 8006626:	4618      	mov	r0, r3
 8006628:	370c      	adds	r7, #12
 800662a:	46bd      	mov	sp, r7
 800662c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006630:	4770      	bx	lr

08006632 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8006632:	b480      	push	{r7}
 8006634:	b085      	sub	sp, #20
 8006636:	af00      	add	r7, sp, #0
 8006638:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	68fa      	ldr	r2, [r7, #12]
 8006648:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800664c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8006650:	f023 0307 	bic.w	r3, r3, #7
 8006654:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800665c:	685b      	ldr	r3, [r3, #4]
 800665e:	68fa      	ldr	r2, [r7, #12]
 8006660:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006664:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006668:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800666a:	2300      	movs	r3, #0
}
 800666c:	4618      	mov	r0, r3
 800666e:	3714      	adds	r7, #20
 8006670:	46bd      	mov	sp, r7
 8006672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006676:	4770      	bx	lr

08006678 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8006678:	b480      	push	{r7}
 800667a:	b087      	sub	sp, #28
 800667c:	af00      	add	r7, sp, #0
 800667e:	60f8      	str	r0, [r7, #12]
 8006680:	460b      	mov	r3, r1
 8006682:	607a      	str	r2, [r7, #4]
 8006684:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	333c      	adds	r3, #60	@ 0x3c
 800668e:	3304      	adds	r3, #4
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006694:	693b      	ldr	r3, [r7, #16]
 8006696:	4a26      	ldr	r2, [pc, #152]	@ (8006730 <USB_EP0_OutStart+0xb8>)
 8006698:	4293      	cmp	r3, r2
 800669a:	d90a      	bls.n	80066b2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800669c:	697b      	ldr	r3, [r7, #20]
 800669e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80066a8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80066ac:	d101      	bne.n	80066b2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80066ae:	2300      	movs	r3, #0
 80066b0:	e037      	b.n	8006722 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80066b2:	697b      	ldr	r3, [r7, #20]
 80066b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80066b8:	461a      	mov	r2, r3
 80066ba:	2300      	movs	r3, #0
 80066bc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80066be:	697b      	ldr	r3, [r7, #20]
 80066c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80066c4:	691b      	ldr	r3, [r3, #16]
 80066c6:	697a      	ldr	r2, [r7, #20]
 80066c8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80066cc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80066d0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80066d2:	697b      	ldr	r3, [r7, #20]
 80066d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80066d8:	691b      	ldr	r3, [r3, #16]
 80066da:	697a      	ldr	r2, [r7, #20]
 80066dc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80066e0:	f043 0318 	orr.w	r3, r3, #24
 80066e4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80066e6:	697b      	ldr	r3, [r7, #20]
 80066e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80066ec:	691b      	ldr	r3, [r3, #16]
 80066ee:	697a      	ldr	r2, [r7, #20]
 80066f0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80066f4:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 80066f8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80066fa:	7afb      	ldrb	r3, [r7, #11]
 80066fc:	2b01      	cmp	r3, #1
 80066fe:	d10f      	bne.n	8006720 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006700:	697b      	ldr	r3, [r7, #20]
 8006702:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006706:	461a      	mov	r2, r3
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800670c:	697b      	ldr	r3, [r7, #20]
 800670e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	697a      	ldr	r2, [r7, #20]
 8006716:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800671a:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800671e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006720:	2300      	movs	r3, #0
}
 8006722:	4618      	mov	r0, r3
 8006724:	371c      	adds	r7, #28
 8006726:	46bd      	mov	sp, r7
 8006728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672c:	4770      	bx	lr
 800672e:	bf00      	nop
 8006730:	4f54300a 	.word	0x4f54300a

08006734 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006734:	b480      	push	{r7}
 8006736:	b085      	sub	sp, #20
 8006738:	af00      	add	r7, sp, #0
 800673a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800673c:	2300      	movs	r3, #0
 800673e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	3301      	adds	r3, #1
 8006744:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800674c:	d901      	bls.n	8006752 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800674e:	2303      	movs	r3, #3
 8006750:	e022      	b.n	8006798 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	691b      	ldr	r3, [r3, #16]
 8006756:	2b00      	cmp	r3, #0
 8006758:	daf2      	bge.n	8006740 <USB_CoreReset+0xc>

  count = 10U;
 800675a:	230a      	movs	r3, #10
 800675c:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 800675e:	e002      	b.n	8006766 <USB_CoreReset+0x32>
  {
    count--;
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	3b01      	subs	r3, #1
 8006764:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	2b00      	cmp	r3, #0
 800676a:	d1f9      	bne.n	8006760 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	691b      	ldr	r3, [r3, #16]
 8006770:	f043 0201 	orr.w	r2, r3, #1
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	3301      	adds	r3, #1
 800677c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006784:	d901      	bls.n	800678a <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 8006786:	2303      	movs	r3, #3
 8006788:	e006      	b.n	8006798 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	691b      	ldr	r3, [r3, #16]
 800678e:	f003 0301 	and.w	r3, r3, #1
 8006792:	2b01      	cmp	r3, #1
 8006794:	d0f0      	beq.n	8006778 <USB_CoreReset+0x44>

  return HAL_OK;
 8006796:	2300      	movs	r3, #0
}
 8006798:	4618      	mov	r0, r3
 800679a:	3714      	adds	r7, #20
 800679c:	46bd      	mov	sp, r7
 800679e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a2:	4770      	bx	lr

080067a4 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80067a4:	b580      	push	{r7, lr}
 80067a6:	b084      	sub	sp, #16
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	6078      	str	r0, [r7, #4]
 80067ac:	460b      	mov	r3, r1
 80067ae:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_HID_HandleTypeDef *hhid;

  hhid = (USBD_HID_HandleTypeDef *)USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 80067b0:	2010      	movs	r0, #16
 80067b2:	f002 f951 	bl	8008a58 <USBD_static_malloc>
 80067b6:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d109      	bne.n	80067d2 <USBD_HID_Init+0x2e>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	32b0      	adds	r2, #176	@ 0xb0
 80067c8:	2100      	movs	r1, #0
 80067ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80067ce:	2302      	movs	r3, #2
 80067d0:	e048      	b.n	8006864 <USBD_HID_Init+0xc0>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hhid;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	32b0      	adds	r2, #176	@ 0xb0
 80067dc:	68f9      	ldr	r1, [r7, #12]
 80067de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	32b0      	adds	r2, #176	@ 0xb0
 80067ec:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	7c1b      	ldrb	r3, [r3, #16]
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d10d      	bne.n	800681a <USBD_HID_Init+0x76>
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_HS_BINTERVAL;
 80067fe:	4b1b      	ldr	r3, [pc, #108]	@ (800686c <USBD_HID_Init+0xc8>)
 8006800:	781b      	ldrb	r3, [r3, #0]
 8006802:	f003 020f 	and.w	r2, r3, #15
 8006806:	6879      	ldr	r1, [r7, #4]
 8006808:	4613      	mov	r3, r2
 800680a:	009b      	lsls	r3, r3, #2
 800680c:	4413      	add	r3, r2
 800680e:	009b      	lsls	r3, r3, #2
 8006810:	440b      	add	r3, r1
 8006812:	331c      	adds	r3, #28
 8006814:	2207      	movs	r2, #7
 8006816:	601a      	str	r2, [r3, #0]
 8006818:	e00c      	b.n	8006834 <USBD_HID_Init+0x90>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_FS_BINTERVAL;
 800681a:	4b14      	ldr	r3, [pc, #80]	@ (800686c <USBD_HID_Init+0xc8>)
 800681c:	781b      	ldrb	r3, [r3, #0]
 800681e:	f003 020f 	and.w	r2, r3, #15
 8006822:	6879      	ldr	r1, [r7, #4]
 8006824:	4613      	mov	r3, r2
 8006826:	009b      	lsls	r3, r3, #2
 8006828:	4413      	add	r3, r2
 800682a:	009b      	lsls	r3, r3, #2
 800682c:	440b      	add	r3, r1
 800682e:	331c      	adds	r3, #28
 8006830:	220a      	movs	r2, #10
 8006832:	601a      	str	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HIDInEpAdd, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 8006834:	4b0d      	ldr	r3, [pc, #52]	@ (800686c <USBD_HID_Init+0xc8>)
 8006836:	7819      	ldrb	r1, [r3, #0]
 8006838:	2304      	movs	r3, #4
 800683a:	2203      	movs	r2, #3
 800683c:	6878      	ldr	r0, [r7, #4]
 800683e:	f001 fffa 	bl	8008836 <USBD_LL_OpenEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 1U;
 8006842:	4b0a      	ldr	r3, [pc, #40]	@ (800686c <USBD_HID_Init+0xc8>)
 8006844:	781b      	ldrb	r3, [r3, #0]
 8006846:	f003 020f 	and.w	r2, r3, #15
 800684a:	6879      	ldr	r1, [r7, #4]
 800684c:	4613      	mov	r3, r2
 800684e:	009b      	lsls	r3, r3, #2
 8006850:	4413      	add	r3, r2
 8006852:	009b      	lsls	r3, r3, #2
 8006854:	440b      	add	r3, r1
 8006856:	3323      	adds	r3, #35	@ 0x23
 8006858:	2201      	movs	r2, #1
 800685a:	701a      	strb	r2, [r3, #0]

  hhid->state = USBD_HID_IDLE;
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	2200      	movs	r2, #0
 8006860:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8006862:	2300      	movs	r3, #0
}
 8006864:	4618      	mov	r0, r3
 8006866:	3710      	adds	r7, #16
 8006868:	46bd      	mov	sp, r7
 800686a:	bd80      	pop	{r7, pc}
 800686c:	200000ca 	.word	0x200000ca

08006870 <USBD_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006870:	b580      	push	{r7, lr}
 8006872:	b082      	sub	sp, #8
 8006874:	af00      	add	r7, sp, #0
 8006876:	6078      	str	r0, [r7, #4]
 8006878:	460b      	mov	r3, r1
 800687a:	70fb      	strb	r3, [r7, #3]
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HIDInEpAdd);
 800687c:	4b1f      	ldr	r3, [pc, #124]	@ (80068fc <USBD_HID_DeInit+0x8c>)
 800687e:	781b      	ldrb	r3, [r3, #0]
 8006880:	4619      	mov	r1, r3
 8006882:	6878      	ldr	r0, [r7, #4]
 8006884:	f001 fffd 	bl	8008882 <USBD_LL_CloseEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 0U;
 8006888:	4b1c      	ldr	r3, [pc, #112]	@ (80068fc <USBD_HID_DeInit+0x8c>)
 800688a:	781b      	ldrb	r3, [r3, #0]
 800688c:	f003 020f 	and.w	r2, r3, #15
 8006890:	6879      	ldr	r1, [r7, #4]
 8006892:	4613      	mov	r3, r2
 8006894:	009b      	lsls	r3, r3, #2
 8006896:	4413      	add	r3, r2
 8006898:	009b      	lsls	r3, r3, #2
 800689a:	440b      	add	r3, r1
 800689c:	3323      	adds	r3, #35	@ 0x23
 800689e:	2200      	movs	r2, #0
 80068a0:	701a      	strb	r2, [r3, #0]
  pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = 0U;
 80068a2:	4b16      	ldr	r3, [pc, #88]	@ (80068fc <USBD_HID_DeInit+0x8c>)
 80068a4:	781b      	ldrb	r3, [r3, #0]
 80068a6:	f003 020f 	and.w	r2, r3, #15
 80068aa:	6879      	ldr	r1, [r7, #4]
 80068ac:	4613      	mov	r3, r2
 80068ae:	009b      	lsls	r3, r3, #2
 80068b0:	4413      	add	r3, r2
 80068b2:	009b      	lsls	r3, r3, #2
 80068b4:	440b      	add	r3, r1
 80068b6:	331c      	adds	r3, #28
 80068b8:	2200      	movs	r2, #0
 80068ba:	601a      	str	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	32b0      	adds	r2, #176	@ 0xb0
 80068c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d011      	beq.n	80068f2 <USBD_HID_DeInit+0x82>
  {
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	32b0      	adds	r2, #176	@ 0xb0
 80068d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068dc:	4618      	mov	r0, r3
 80068de:	f002 f8c9 	bl	8008a74 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	32b0      	adds	r2, #176	@ 0xb0
 80068ec:	2100      	movs	r1, #0
 80068ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return (uint8_t)USBD_OK;
 80068f2:	2300      	movs	r3, #0
}
 80068f4:	4618      	mov	r0, r3
 80068f6:	3708      	adds	r7, #8
 80068f8:	46bd      	mov	sp, r7
 80068fa:	bd80      	pop	{r7, pc}
 80068fc:	200000ca 	.word	0x200000ca

08006900 <USBD_HID_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006900:	b580      	push	{r7, lr}
 8006902:	b086      	sub	sp, #24
 8006904:	af00      	add	r7, sp, #0
 8006906:	6078      	str	r0, [r7, #4]
 8006908:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	32b0      	adds	r2, #176	@ 0xb0
 8006914:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006918:	60fb      	str	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 800691a:	2300      	movs	r3, #0
 800691c:	75fb      	strb	r3, [r7, #23]
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 800691e:	2300      	movs	r3, #0
 8006920:	817b      	strh	r3, [r7, #10]

  if (hhid == NULL)
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	2b00      	cmp	r3, #0
 8006926:	d101      	bne.n	800692c <USBD_HID_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 8006928:	2303      	movs	r3, #3
 800692a:	e0e8      	b.n	8006afe <USBD_HID_Setup+0x1fe>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800692c:	683b      	ldr	r3, [r7, #0]
 800692e:	781b      	ldrb	r3, [r3, #0]
 8006930:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006934:	2b00      	cmp	r3, #0
 8006936:	d046      	beq.n	80069c6 <USBD_HID_Setup+0xc6>
 8006938:	2b20      	cmp	r3, #32
 800693a:	f040 80d8 	bne.w	8006aee <USBD_HID_Setup+0x1ee>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 800693e:	683b      	ldr	r3, [r7, #0]
 8006940:	785b      	ldrb	r3, [r3, #1]
 8006942:	3b02      	subs	r3, #2
 8006944:	2b09      	cmp	r3, #9
 8006946:	d836      	bhi.n	80069b6 <USBD_HID_Setup+0xb6>
 8006948:	a201      	add	r2, pc, #4	@ (adr r2, 8006950 <USBD_HID_Setup+0x50>)
 800694a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800694e:	bf00      	nop
 8006950:	080069a7 	.word	0x080069a7
 8006954:	08006987 	.word	0x08006987
 8006958:	080069b7 	.word	0x080069b7
 800695c:	080069b7 	.word	0x080069b7
 8006960:	080069b7 	.word	0x080069b7
 8006964:	080069b7 	.word	0x080069b7
 8006968:	080069b7 	.word	0x080069b7
 800696c:	080069b7 	.word	0x080069b7
 8006970:	08006995 	.word	0x08006995
 8006974:	08006979 	.word	0x08006979
      {
        case USBD_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8006978:	683b      	ldr	r3, [r7, #0]
 800697a:	885b      	ldrh	r3, [r3, #2]
 800697c:	b2db      	uxtb	r3, r3
 800697e:	461a      	mov	r2, r3
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	601a      	str	r2, [r3, #0]
          break;
 8006984:	e01e      	b.n	80069c4 <USBD_HID_Setup+0xc4>

        case USBD_HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	2201      	movs	r2, #1
 800698a:	4619      	mov	r1, r3
 800698c:	6878      	ldr	r0, [r7, #4]
 800698e:	f001 fbfb 	bl	8008188 <USBD_CtlSendData>
          break;
 8006992:	e017      	b.n	80069c4 <USBD_HID_Setup+0xc4>

        case USBD_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8006994:	683b      	ldr	r3, [r7, #0]
 8006996:	885b      	ldrh	r3, [r3, #2]
 8006998:	0a1b      	lsrs	r3, r3, #8
 800699a:	b29b      	uxth	r3, r3
 800699c:	b2db      	uxtb	r3, r3
 800699e:	461a      	mov	r2, r3
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	605a      	str	r2, [r3, #4]
          break;
 80069a4:	e00e      	b.n	80069c4 <USBD_HID_Setup+0xc4>

        case USBD_HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	3304      	adds	r3, #4
 80069aa:	2201      	movs	r2, #1
 80069ac:	4619      	mov	r1, r3
 80069ae:	6878      	ldr	r0, [r7, #4]
 80069b0:	f001 fbea 	bl	8008188 <USBD_CtlSendData>
          break;
 80069b4:	e006      	b.n	80069c4 <USBD_HID_Setup+0xc4>

        default:
          USBD_CtlError(pdev, req);
 80069b6:	6839      	ldr	r1, [r7, #0]
 80069b8:	6878      	ldr	r0, [r7, #4]
 80069ba:	f001 fb68 	bl	800808e <USBD_CtlError>
          ret = USBD_FAIL;
 80069be:	2303      	movs	r3, #3
 80069c0:	75fb      	strb	r3, [r7, #23]
          break;
 80069c2:	bf00      	nop
      }
      break;
 80069c4:	e09a      	b.n	8006afc <USBD_HID_Setup+0x1fc>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80069c6:	683b      	ldr	r3, [r7, #0]
 80069c8:	785b      	ldrb	r3, [r3, #1]
 80069ca:	2b0b      	cmp	r3, #11
 80069cc:	f200 8086 	bhi.w	8006adc <USBD_HID_Setup+0x1dc>
 80069d0:	a201      	add	r2, pc, #4	@ (adr r2, 80069d8 <USBD_HID_Setup+0xd8>)
 80069d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069d6:	bf00      	nop
 80069d8:	08006a09 	.word	0x08006a09
 80069dc:	08006aeb 	.word	0x08006aeb
 80069e0:	08006add 	.word	0x08006add
 80069e4:	08006add 	.word	0x08006add
 80069e8:	08006add 	.word	0x08006add
 80069ec:	08006add 	.word	0x08006add
 80069f0:	08006a33 	.word	0x08006a33
 80069f4:	08006add 	.word	0x08006add
 80069f8:	08006add 	.word	0x08006add
 80069fc:	08006add 	.word	0x08006add
 8006a00:	08006a8b 	.word	0x08006a8b
 8006a04:	08006ab5 	.word	0x08006ab5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006a0e:	b2db      	uxtb	r3, r3
 8006a10:	2b03      	cmp	r3, #3
 8006a12:	d107      	bne.n	8006a24 <USBD_HID_Setup+0x124>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006a14:	f107 030a 	add.w	r3, r7, #10
 8006a18:	2202      	movs	r2, #2
 8006a1a:	4619      	mov	r1, r3
 8006a1c:	6878      	ldr	r0, [r7, #4]
 8006a1e:	f001 fbb3 	bl	8008188 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006a22:	e063      	b.n	8006aec <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 8006a24:	6839      	ldr	r1, [r7, #0]
 8006a26:	6878      	ldr	r0, [r7, #4]
 8006a28:	f001 fb31 	bl	800808e <USBD_CtlError>
            ret = USBD_FAIL;
 8006a2c:	2303      	movs	r3, #3
 8006a2e:	75fb      	strb	r3, [r7, #23]
          break;
 8006a30:	e05c      	b.n	8006aec <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == HID_REPORT_DESC)
 8006a32:	683b      	ldr	r3, [r7, #0]
 8006a34:	885b      	ldrh	r3, [r3, #2]
 8006a36:	0a1b      	lsrs	r3, r3, #8
 8006a38:	b29b      	uxth	r3, r3
 8006a3a:	2b22      	cmp	r3, #34	@ 0x22
 8006a3c:	d108      	bne.n	8006a50 <USBD_HID_Setup+0x150>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 8006a3e:	683b      	ldr	r3, [r7, #0]
 8006a40:	88db      	ldrh	r3, [r3, #6]
 8006a42:	2b4a      	cmp	r3, #74	@ 0x4a
 8006a44:	bf28      	it	cs
 8006a46:	234a      	movcs	r3, #74	@ 0x4a
 8006a48:	82bb      	strh	r3, [r7, #20]
            pbuf = HID_MOUSE_ReportDesc;
 8006a4a:	4b2f      	ldr	r3, [pc, #188]	@ (8006b08 <USBD_HID_Setup+0x208>)
 8006a4c:	613b      	str	r3, [r7, #16]
 8006a4e:	e015      	b.n	8006a7c <USBD_HID_Setup+0x17c>
          }
          else if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 8006a50:	683b      	ldr	r3, [r7, #0]
 8006a52:	885b      	ldrh	r3, [r3, #2]
 8006a54:	0a1b      	lsrs	r3, r3, #8
 8006a56:	b29b      	uxth	r3, r3
 8006a58:	2b21      	cmp	r3, #33	@ 0x21
 8006a5a:	d108      	bne.n	8006a6e <USBD_HID_Setup+0x16e>
          {
            pbuf = USBD_HID_Desc;
 8006a5c:	4b2b      	ldr	r3, [pc, #172]	@ (8006b0c <USBD_HID_Setup+0x20c>)
 8006a5e:	613b      	str	r3, [r7, #16]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 8006a60:	683b      	ldr	r3, [r7, #0]
 8006a62:	88db      	ldrh	r3, [r3, #6]
 8006a64:	2b09      	cmp	r3, #9
 8006a66:	bf28      	it	cs
 8006a68:	2309      	movcs	r3, #9
 8006a6a:	82bb      	strh	r3, [r7, #20]
 8006a6c:	e006      	b.n	8006a7c <USBD_HID_Setup+0x17c>
          }
          else
          {
            USBD_CtlError(pdev, req);
 8006a6e:	6839      	ldr	r1, [r7, #0]
 8006a70:	6878      	ldr	r0, [r7, #4]
 8006a72:	f001 fb0c 	bl	800808e <USBD_CtlError>
            ret = USBD_FAIL;
 8006a76:	2303      	movs	r3, #3
 8006a78:	75fb      	strb	r3, [r7, #23]
            break;
 8006a7a:	e037      	b.n	8006aec <USBD_HID_Setup+0x1ec>
          }
          (void)USBD_CtlSendData(pdev, pbuf, len);
 8006a7c:	8abb      	ldrh	r3, [r7, #20]
 8006a7e:	461a      	mov	r2, r3
 8006a80:	6939      	ldr	r1, [r7, #16]
 8006a82:	6878      	ldr	r0, [r7, #4]
 8006a84:	f001 fb80 	bl	8008188 <USBD_CtlSendData>
          break;
 8006a88:	e030      	b.n	8006aec <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006a90:	b2db      	uxtb	r3, r3
 8006a92:	2b03      	cmp	r3, #3
 8006a94:	d107      	bne.n	8006aa6 <USBD_HID_Setup+0x1a6>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	3308      	adds	r3, #8
 8006a9a:	2201      	movs	r2, #1
 8006a9c:	4619      	mov	r1, r3
 8006a9e:	6878      	ldr	r0, [r7, #4]
 8006aa0:	f001 fb72 	bl	8008188 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006aa4:	e022      	b.n	8006aec <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 8006aa6:	6839      	ldr	r1, [r7, #0]
 8006aa8:	6878      	ldr	r0, [r7, #4]
 8006aaa:	f001 faf0 	bl	800808e <USBD_CtlError>
            ret = USBD_FAIL;
 8006aae:	2303      	movs	r3, #3
 8006ab0:	75fb      	strb	r3, [r7, #23]
          break;
 8006ab2:	e01b      	b.n	8006aec <USBD_HID_Setup+0x1ec>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006aba:	b2db      	uxtb	r3, r3
 8006abc:	2b03      	cmp	r3, #3
 8006abe:	d106      	bne.n	8006ace <USBD_HID_Setup+0x1ce>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8006ac0:	683b      	ldr	r3, [r7, #0]
 8006ac2:	885b      	ldrh	r3, [r3, #2]
 8006ac4:	b2db      	uxtb	r3, r3
 8006ac6:	461a      	mov	r2, r3
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006acc:	e00e      	b.n	8006aec <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 8006ace:	6839      	ldr	r1, [r7, #0]
 8006ad0:	6878      	ldr	r0, [r7, #4]
 8006ad2:	f001 fadc 	bl	800808e <USBD_CtlError>
            ret = USBD_FAIL;
 8006ad6:	2303      	movs	r3, #3
 8006ad8:	75fb      	strb	r3, [r7, #23]
          break;
 8006ada:	e007      	b.n	8006aec <USBD_HID_Setup+0x1ec>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006adc:	6839      	ldr	r1, [r7, #0]
 8006ade:	6878      	ldr	r0, [r7, #4]
 8006ae0:	f001 fad5 	bl	800808e <USBD_CtlError>
          ret = USBD_FAIL;
 8006ae4:	2303      	movs	r3, #3
 8006ae6:	75fb      	strb	r3, [r7, #23]
          break;
 8006ae8:	e000      	b.n	8006aec <USBD_HID_Setup+0x1ec>
          break;
 8006aea:	bf00      	nop
      }
      break;
 8006aec:	e006      	b.n	8006afc <USBD_HID_Setup+0x1fc>

    default:
      USBD_CtlError(pdev, req);
 8006aee:	6839      	ldr	r1, [r7, #0]
 8006af0:	6878      	ldr	r0, [r7, #4]
 8006af2:	f001 facc 	bl	800808e <USBD_CtlError>
      ret = USBD_FAIL;
 8006af6:	2303      	movs	r3, #3
 8006af8:	75fb      	strb	r3, [r7, #23]
      break;
 8006afa:	bf00      	nop
  }

  return (uint8_t)ret;
 8006afc:	7dfb      	ldrb	r3, [r7, #23]
}
 8006afe:	4618      	mov	r0, r3
 8006b00:	3718      	adds	r7, #24
 8006b02:	46bd      	mov	sp, r7
 8006b04:	bd80      	pop	{r7, pc}
 8006b06:	bf00      	nop
 8006b08:	20000080 	.word	0x20000080
 8006b0c:	20000068 	.word	0x20000068

08006b10 <USBD_HID_SendReport>:
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len, uint8_t ClassId)
{
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len)
{
 8006b10:	b580      	push	{r7, lr}
 8006b12:	b086      	sub	sp, #24
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	60f8      	str	r0, [r7, #12]
 8006b18:	60b9      	str	r1, [r7, #8]
 8006b1a:	4613      	mov	r3, r2
 8006b1c:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	32b0      	adds	r2, #176	@ 0xb0
 8006b28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b2c:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hhid == NULL)
 8006b2e:	697b      	ldr	r3, [r7, #20]
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d101      	bne.n	8006b38 <USBD_HID_SendReport+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8006b34:	2303      	movs	r3, #3
 8006b36:	e014      	b.n	8006b62 <USBD_HID_SendReport+0x52>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, ClassId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006b3e:	b2db      	uxtb	r3, r3
 8006b40:	2b03      	cmp	r3, #3
 8006b42:	d10d      	bne.n	8006b60 <USBD_HID_SendReport+0x50>
  {
    if (hhid->state == USBD_HID_IDLE)
 8006b44:	697b      	ldr	r3, [r7, #20]
 8006b46:	7b1b      	ldrb	r3, [r3, #12]
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d109      	bne.n	8006b60 <USBD_HID_SendReport+0x50>
    {
      hhid->state = USBD_HID_BUSY;
 8006b4c:	697b      	ldr	r3, [r7, #20]
 8006b4e:	2201      	movs	r2, #1
 8006b50:	731a      	strb	r2, [r3, #12]
      (void)USBD_LL_Transmit(pdev, HIDInEpAdd, report, len);
 8006b52:	4b06      	ldr	r3, [pc, #24]	@ (8006b6c <USBD_HID_SendReport+0x5c>)
 8006b54:	7819      	ldrb	r1, [r3, #0]
 8006b56:	88fb      	ldrh	r3, [r7, #6]
 8006b58:	68ba      	ldr	r2, [r7, #8]
 8006b5a:	68f8      	ldr	r0, [r7, #12]
 8006b5c:	f001 ff39 	bl	80089d2 <USBD_LL_Transmit>
    }
  }

  return (uint8_t)USBD_OK;
 8006b60:	2300      	movs	r3, #0
}
 8006b62:	4618      	mov	r0, r3
 8006b64:	3718      	adds	r7, #24
 8006b66:	46bd      	mov	sp, r7
 8006b68:	bd80      	pop	{r7, pc}
 8006b6a:	bf00      	nop
 8006b6c:	200000ca 	.word	0x200000ca

08006b70 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 8006b70:	b580      	push	{r7, lr}
 8006b72:	b084      	sub	sp, #16
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 8006b78:	2181      	movs	r1, #129	@ 0x81
 8006b7a:	4809      	ldr	r0, [pc, #36]	@ (8006ba0 <USBD_HID_GetFSCfgDesc+0x30>)
 8006b7c:	f000 fc4e 	bl	800741c <USBD_GetEpDesc>
 8006b80:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d002      	beq.n	8006b8e <USBD_HID_GetFSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	220a      	movs	r2, #10
 8006b8c:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	2222      	movs	r2, #34	@ 0x22
 8006b92:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 8006b94:	4b02      	ldr	r3, [pc, #8]	@ (8006ba0 <USBD_HID_GetFSCfgDesc+0x30>)
}
 8006b96:	4618      	mov	r0, r3
 8006b98:	3710      	adds	r7, #16
 8006b9a:	46bd      	mov	sp, r7
 8006b9c:	bd80      	pop	{r7, pc}
 8006b9e:	bf00      	nop
 8006ba0:	20000044 	.word	0x20000044

08006ba4 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 8006ba4:	b580      	push	{r7, lr}
 8006ba6:	b084      	sub	sp, #16
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 8006bac:	2181      	movs	r1, #129	@ 0x81
 8006bae:	4809      	ldr	r0, [pc, #36]	@ (8006bd4 <USBD_HID_GetHSCfgDesc+0x30>)
 8006bb0:	f000 fc34 	bl	800741c <USBD_GetEpDesc>
 8006bb4:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d002      	beq.n	8006bc2 <USBD_HID_GetHSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_HS_BINTERVAL;
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	2207      	movs	r2, #7
 8006bc0:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	2222      	movs	r2, #34	@ 0x22
 8006bc6:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 8006bc8:	4b02      	ldr	r3, [pc, #8]	@ (8006bd4 <USBD_HID_GetHSCfgDesc+0x30>)
}
 8006bca:	4618      	mov	r0, r3
 8006bcc:	3710      	adds	r7, #16
 8006bce:	46bd      	mov	sp, r7
 8006bd0:	bd80      	pop	{r7, pc}
 8006bd2:	bf00      	nop
 8006bd4:	20000044 	.word	0x20000044

08006bd8 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006bd8:	b580      	push	{r7, lr}
 8006bda:	b084      	sub	sp, #16
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 8006be0:	2181      	movs	r1, #129	@ 0x81
 8006be2:	4809      	ldr	r0, [pc, #36]	@ (8006c08 <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
 8006be4:	f000 fc1a 	bl	800741c <USBD_GetEpDesc>
 8006be8:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d002      	beq.n	8006bf6 <USBD_HID_GetOtherSpeedCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	220a      	movs	r2, #10
 8006bf4:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	2222      	movs	r2, #34	@ 0x22
 8006bfa:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 8006bfc:	4b02      	ldr	r3, [pc, #8]	@ (8006c08 <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
}
 8006bfe:	4618      	mov	r0, r3
 8006c00:	3710      	adds	r7, #16
 8006c02:	46bd      	mov	sp, r7
 8006c04:	bd80      	pop	{r7, pc}
 8006c06:	bf00      	nop
 8006c08:	20000044 	.word	0x20000044

08006c0c <USBD_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006c0c:	b480      	push	{r7}
 8006c0e:	b083      	sub	sp, #12
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	6078      	str	r0, [r7, #4]
 8006c14:	460b      	mov	r3, r1
 8006c16:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId])->state = USBD_HID_IDLE;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	32b0      	adds	r2, #176	@ 0xb0
 8006c22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c26:	2200      	movs	r2, #0
 8006c28:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8006c2a:	2300      	movs	r3, #0
}
 8006c2c:	4618      	mov	r0, r3
 8006c2e:	370c      	adds	r7, #12
 8006c30:	46bd      	mov	sp, r7
 8006c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c36:	4770      	bx	lr

08006c38 <USBD_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8006c38:	b480      	push	{r7}
 8006c3a:	b083      	sub	sp, #12
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	220a      	movs	r2, #10
 8006c44:	801a      	strh	r2, [r3, #0]

  return USBD_HID_DeviceQualifierDesc;
 8006c46:	4b03      	ldr	r3, [pc, #12]	@ (8006c54 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 8006c48:	4618      	mov	r0, r3
 8006c4a:	370c      	adds	r7, #12
 8006c4c:	46bd      	mov	sp, r7
 8006c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c52:	4770      	bx	lr
 8006c54:	20000074 	.word	0x20000074

08006c58 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006c58:	b580      	push	{r7, lr}
 8006c5a:	b086      	sub	sp, #24
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	60f8      	str	r0, [r7, #12]
 8006c60:	60b9      	str	r1, [r7, #8]
 8006c62:	4613      	mov	r3, r2
 8006c64:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d101      	bne.n	8006c70 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006c6c:	2303      	movs	r3, #3
 8006c6e:	e01f      	b.n	8006cb0 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	2200      	movs	r2, #0
 8006c74:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	2200      	movs	r2, #0
 8006c7c:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	2200      	movs	r2, #0
 8006c84:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006c88:	68bb      	ldr	r3, [r7, #8]
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d003      	beq.n	8006c96 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	68ba      	ldr	r2, [r7, #8]
 8006c92:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	2201      	movs	r2, #1
 8006c9a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	79fa      	ldrb	r2, [r7, #7]
 8006ca2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006ca4:	68f8      	ldr	r0, [r7, #12]
 8006ca6:	f001 fd5f 	bl	8008768 <USBD_LL_Init>
 8006caa:	4603      	mov	r3, r0
 8006cac:	75fb      	strb	r3, [r7, #23]

  return ret;
 8006cae:	7dfb      	ldrb	r3, [r7, #23]
}
 8006cb0:	4618      	mov	r0, r3
 8006cb2:	3718      	adds	r7, #24
 8006cb4:	46bd      	mov	sp, r7
 8006cb6:	bd80      	pop	{r7, pc}

08006cb8 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006cb8:	b580      	push	{r7, lr}
 8006cba:	b084      	sub	sp, #16
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	6078      	str	r0, [r7, #4]
 8006cc0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006cc2:	2300      	movs	r3, #0
 8006cc4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8006cc6:	683b      	ldr	r3, [r7, #0]
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d101      	bne.n	8006cd0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006ccc:	2303      	movs	r3, #3
 8006cce:	e025      	b.n	8006d1c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	683a      	ldr	r2, [r7, #0]
 8006cd4:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	32ae      	adds	r2, #174	@ 0xae
 8006ce2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ce6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d00f      	beq.n	8006d0c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	32ae      	adds	r2, #174	@ 0xae
 8006cf6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006cfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cfc:	f107 020e 	add.w	r2, r7, #14
 8006d00:	4610      	mov	r0, r2
 8006d02:	4798      	blx	r3
 8006d04:	4602      	mov	r2, r0
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8006d12:	1c5a      	adds	r2, r3, #1
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8006d1a:	2300      	movs	r3, #0
}
 8006d1c:	4618      	mov	r0, r3
 8006d1e:	3710      	adds	r7, #16
 8006d20:	46bd      	mov	sp, r7
 8006d22:	bd80      	pop	{r7, pc}

08006d24 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006d24:	b580      	push	{r7, lr}
 8006d26:	b082      	sub	sp, #8
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006d2c:	6878      	ldr	r0, [r7, #4]
 8006d2e:	f001 fd67 	bl	8008800 <USBD_LL_Start>
 8006d32:	4603      	mov	r3, r0
}
 8006d34:	4618      	mov	r0, r3
 8006d36:	3708      	adds	r7, #8
 8006d38:	46bd      	mov	sp, r7
 8006d3a:	bd80      	pop	{r7, pc}

08006d3c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8006d3c:	b480      	push	{r7}
 8006d3e:	b083      	sub	sp, #12
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006d44:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8006d46:	4618      	mov	r0, r3
 8006d48:	370c      	adds	r7, #12
 8006d4a:	46bd      	mov	sp, r7
 8006d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d50:	4770      	bx	lr

08006d52 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006d52:	b580      	push	{r7, lr}
 8006d54:	b084      	sub	sp, #16
 8006d56:	af00      	add	r7, sp, #0
 8006d58:	6078      	str	r0, [r7, #4]
 8006d5a:	460b      	mov	r3, r1
 8006d5c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006d5e:	2300      	movs	r3, #0
 8006d60:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d009      	beq.n	8006d80 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	78fa      	ldrb	r2, [r7, #3]
 8006d76:	4611      	mov	r1, r2
 8006d78:	6878      	ldr	r0, [r7, #4]
 8006d7a:	4798      	blx	r3
 8006d7c:	4603      	mov	r3, r0
 8006d7e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006d80:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d82:	4618      	mov	r0, r3
 8006d84:	3710      	adds	r7, #16
 8006d86:	46bd      	mov	sp, r7
 8006d88:	bd80      	pop	{r7, pc}

08006d8a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006d8a:	b580      	push	{r7, lr}
 8006d8c:	b084      	sub	sp, #16
 8006d8e:	af00      	add	r7, sp, #0
 8006d90:	6078      	str	r0, [r7, #4]
 8006d92:	460b      	mov	r3, r1
 8006d94:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006d96:	2300      	movs	r3, #0
 8006d98:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006da0:	685b      	ldr	r3, [r3, #4]
 8006da2:	78fa      	ldrb	r2, [r7, #3]
 8006da4:	4611      	mov	r1, r2
 8006da6:	6878      	ldr	r0, [r7, #4]
 8006da8:	4798      	blx	r3
 8006daa:	4603      	mov	r3, r0
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d001      	beq.n	8006db4 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8006db0:	2303      	movs	r3, #3
 8006db2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006db4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006db6:	4618      	mov	r0, r3
 8006db8:	3710      	adds	r7, #16
 8006dba:	46bd      	mov	sp, r7
 8006dbc:	bd80      	pop	{r7, pc}

08006dbe <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006dbe:	b580      	push	{r7, lr}
 8006dc0:	b084      	sub	sp, #16
 8006dc2:	af00      	add	r7, sp, #0
 8006dc4:	6078      	str	r0, [r7, #4]
 8006dc6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8006dce:	6839      	ldr	r1, [r7, #0]
 8006dd0:	4618      	mov	r0, r3
 8006dd2:	f001 f922 	bl	800801a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	2201      	movs	r2, #1
 8006dda:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8006de4:	461a      	mov	r2, r3
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8006df2:	f003 031f 	and.w	r3, r3, #31
 8006df6:	2b02      	cmp	r3, #2
 8006df8:	d01a      	beq.n	8006e30 <USBD_LL_SetupStage+0x72>
 8006dfa:	2b02      	cmp	r3, #2
 8006dfc:	d822      	bhi.n	8006e44 <USBD_LL_SetupStage+0x86>
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d002      	beq.n	8006e08 <USBD_LL_SetupStage+0x4a>
 8006e02:	2b01      	cmp	r3, #1
 8006e04:	d00a      	beq.n	8006e1c <USBD_LL_SetupStage+0x5e>
 8006e06:	e01d      	b.n	8006e44 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8006e0e:	4619      	mov	r1, r3
 8006e10:	6878      	ldr	r0, [r7, #4]
 8006e12:	f000 fb77 	bl	8007504 <USBD_StdDevReq>
 8006e16:	4603      	mov	r3, r0
 8006e18:	73fb      	strb	r3, [r7, #15]
      break;
 8006e1a:	e020      	b.n	8006e5e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8006e22:	4619      	mov	r1, r3
 8006e24:	6878      	ldr	r0, [r7, #4]
 8006e26:	f000 fbdf 	bl	80075e8 <USBD_StdItfReq>
 8006e2a:	4603      	mov	r3, r0
 8006e2c:	73fb      	strb	r3, [r7, #15]
      break;
 8006e2e:	e016      	b.n	8006e5e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8006e36:	4619      	mov	r1, r3
 8006e38:	6878      	ldr	r0, [r7, #4]
 8006e3a:	f000 fc41 	bl	80076c0 <USBD_StdEPReq>
 8006e3e:	4603      	mov	r3, r0
 8006e40:	73fb      	strb	r3, [r7, #15]
      break;
 8006e42:	e00c      	b.n	8006e5e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8006e4a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8006e4e:	b2db      	uxtb	r3, r3
 8006e50:	4619      	mov	r1, r3
 8006e52:	6878      	ldr	r0, [r7, #4]
 8006e54:	f001 fd34 	bl	80088c0 <USBD_LL_StallEP>
 8006e58:	4603      	mov	r3, r0
 8006e5a:	73fb      	strb	r3, [r7, #15]
      break;
 8006e5c:	bf00      	nop
  }

  return ret;
 8006e5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e60:	4618      	mov	r0, r3
 8006e62:	3710      	adds	r7, #16
 8006e64:	46bd      	mov	sp, r7
 8006e66:	bd80      	pop	{r7, pc}

08006e68 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006e68:	b580      	push	{r7, lr}
 8006e6a:	b086      	sub	sp, #24
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	60f8      	str	r0, [r7, #12]
 8006e70:	460b      	mov	r3, r1
 8006e72:	607a      	str	r2, [r7, #4]
 8006e74:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8006e76:	2300      	movs	r3, #0
 8006e78:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 8006e7a:	7afb      	ldrb	r3, [r7, #11]
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d177      	bne.n	8006f70 <USBD_LL_DataOutStage+0x108>
  {
    pep = &pdev->ep_out[0];
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8006e86:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8006e8e:	2b03      	cmp	r3, #3
 8006e90:	f040 80a1 	bne.w	8006fd6 <USBD_LL_DataOutStage+0x16e>
    {
      if (pep->rem_length > pep->maxpacket)
 8006e94:	693b      	ldr	r3, [r7, #16]
 8006e96:	685b      	ldr	r3, [r3, #4]
 8006e98:	693a      	ldr	r2, [r7, #16]
 8006e9a:	8992      	ldrh	r2, [r2, #12]
 8006e9c:	4293      	cmp	r3, r2
 8006e9e:	d91c      	bls.n	8006eda <USBD_LL_DataOutStage+0x72>
      {
        pep->rem_length -= pep->maxpacket;
 8006ea0:	693b      	ldr	r3, [r7, #16]
 8006ea2:	685b      	ldr	r3, [r3, #4]
 8006ea4:	693a      	ldr	r2, [r7, #16]
 8006ea6:	8992      	ldrh	r2, [r2, #12]
 8006ea8:	1a9a      	subs	r2, r3, r2
 8006eaa:	693b      	ldr	r3, [r7, #16]
 8006eac:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 8006eae:	693b      	ldr	r3, [r7, #16]
 8006eb0:	691b      	ldr	r3, [r3, #16]
 8006eb2:	693a      	ldr	r2, [r7, #16]
 8006eb4:	8992      	ldrh	r2, [r2, #12]
 8006eb6:	441a      	add	r2, r3
 8006eb8:	693b      	ldr	r3, [r7, #16]
 8006eba:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueRx(pdev, pep->pbuffer, MAX(pep->rem_length, pep->maxpacket));
 8006ebc:	693b      	ldr	r3, [r7, #16]
 8006ebe:	6919      	ldr	r1, [r3, #16]
 8006ec0:	693b      	ldr	r3, [r7, #16]
 8006ec2:	899b      	ldrh	r3, [r3, #12]
 8006ec4:	461a      	mov	r2, r3
 8006ec6:	693b      	ldr	r3, [r7, #16]
 8006ec8:	685b      	ldr	r3, [r3, #4]
 8006eca:	4293      	cmp	r3, r2
 8006ecc:	bf38      	it	cc
 8006ece:	4613      	movcc	r3, r2
 8006ed0:	461a      	mov	r2, r3
 8006ed2:	68f8      	ldr	r0, [r7, #12]
 8006ed4:	f001 f987 	bl	80081e6 <USBD_CtlContinueRx>
 8006ed8:	e07d      	b.n	8006fd6 <USBD_LL_DataOutStage+0x16e>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8006ee0:	f003 031f 	and.w	r3, r3, #31
 8006ee4:	2b02      	cmp	r3, #2
 8006ee6:	d014      	beq.n	8006f12 <USBD_LL_DataOutStage+0xaa>
 8006ee8:	2b02      	cmp	r3, #2
 8006eea:	d81d      	bhi.n	8006f28 <USBD_LL_DataOutStage+0xc0>
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d002      	beq.n	8006ef6 <USBD_LL_DataOutStage+0x8e>
 8006ef0:	2b01      	cmp	r3, #1
 8006ef2:	d003      	beq.n	8006efc <USBD_LL_DataOutStage+0x94>
 8006ef4:	e018      	b.n	8006f28 <USBD_LL_DataOutStage+0xc0>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8006ef6:	2300      	movs	r3, #0
 8006ef8:	75bb      	strb	r3, [r7, #22]
            break;
 8006efa:	e018      	b.n	8006f2e <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8006f02:	b2db      	uxtb	r3, r3
 8006f04:	4619      	mov	r1, r3
 8006f06:	68f8      	ldr	r0, [r7, #12]
 8006f08:	f000 fa6e 	bl	80073e8 <USBD_CoreFindIF>
 8006f0c:	4603      	mov	r3, r0
 8006f0e:	75bb      	strb	r3, [r7, #22]
            break;
 8006f10:	e00d      	b.n	8006f2e <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8006f18:	b2db      	uxtb	r3, r3
 8006f1a:	4619      	mov	r1, r3
 8006f1c:	68f8      	ldr	r0, [r7, #12]
 8006f1e:	f000 fa70 	bl	8007402 <USBD_CoreFindEP>
 8006f22:	4603      	mov	r3, r0
 8006f24:	75bb      	strb	r3, [r7, #22]
            break;
 8006f26:	e002      	b.n	8006f2e <USBD_LL_DataOutStage+0xc6>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8006f28:	2300      	movs	r3, #0
 8006f2a:	75bb      	strb	r3, [r7, #22]
            break;
 8006f2c:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8006f2e:	7dbb      	ldrb	r3, [r7, #22]
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d119      	bne.n	8006f68 <USBD_LL_DataOutStage+0x100>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006f3a:	b2db      	uxtb	r3, r3
 8006f3c:	2b03      	cmp	r3, #3
 8006f3e:	d113      	bne.n	8006f68 <USBD_LL_DataOutStage+0x100>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8006f40:	7dba      	ldrb	r2, [r7, #22]
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	32ae      	adds	r2, #174	@ 0xae
 8006f46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f4a:	691b      	ldr	r3, [r3, #16]
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d00b      	beq.n	8006f68 <USBD_LL_DataOutStage+0x100>
            {
              pdev->classId = idx;
 8006f50:	7dba      	ldrb	r2, [r7, #22]
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8006f58:	7dba      	ldrb	r2, [r7, #22]
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	32ae      	adds	r2, #174	@ 0xae
 8006f5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f62:	691b      	ldr	r3, [r3, #16]
 8006f64:	68f8      	ldr	r0, [r7, #12]
 8006f66:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006f68:	68f8      	ldr	r0, [r7, #12]
 8006f6a:	f001 f94d 	bl	8008208 <USBD_CtlSendStatus>
 8006f6e:	e032      	b.n	8006fd6 <USBD_LL_DataOutStage+0x16e>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8006f70:	7afb      	ldrb	r3, [r7, #11]
 8006f72:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006f76:	b2db      	uxtb	r3, r3
 8006f78:	4619      	mov	r1, r3
 8006f7a:	68f8      	ldr	r0, [r7, #12]
 8006f7c:	f000 fa41 	bl	8007402 <USBD_CoreFindEP>
 8006f80:	4603      	mov	r3, r0
 8006f82:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006f84:	7dbb      	ldrb	r3, [r7, #22]
 8006f86:	2bff      	cmp	r3, #255	@ 0xff
 8006f88:	d025      	beq.n	8006fd6 <USBD_LL_DataOutStage+0x16e>
 8006f8a:	7dbb      	ldrb	r3, [r7, #22]
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d122      	bne.n	8006fd6 <USBD_LL_DataOutStage+0x16e>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006f96:	b2db      	uxtb	r3, r3
 8006f98:	2b03      	cmp	r3, #3
 8006f9a:	d117      	bne.n	8006fcc <USBD_LL_DataOutStage+0x164>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8006f9c:	7dba      	ldrb	r2, [r7, #22]
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	32ae      	adds	r2, #174	@ 0xae
 8006fa2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006fa6:	699b      	ldr	r3, [r3, #24]
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d00f      	beq.n	8006fcc <USBD_LL_DataOutStage+0x164>
        {
          pdev->classId = idx;
 8006fac:	7dba      	ldrb	r2, [r7, #22]
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8006fb4:	7dba      	ldrb	r2, [r7, #22]
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	32ae      	adds	r2, #174	@ 0xae
 8006fba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006fbe:	699b      	ldr	r3, [r3, #24]
 8006fc0:	7afa      	ldrb	r2, [r7, #11]
 8006fc2:	4611      	mov	r1, r2
 8006fc4:	68f8      	ldr	r0, [r7, #12]
 8006fc6:	4798      	blx	r3
 8006fc8:	4603      	mov	r3, r0
 8006fca:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8006fcc:	7dfb      	ldrb	r3, [r7, #23]
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d001      	beq.n	8006fd6 <USBD_LL_DataOutStage+0x16e>
      {
        return ret;
 8006fd2:	7dfb      	ldrb	r3, [r7, #23]
 8006fd4:	e000      	b.n	8006fd8 <USBD_LL_DataOutStage+0x170>
      }
    }
  }

  return USBD_OK;
 8006fd6:	2300      	movs	r3, #0
}
 8006fd8:	4618      	mov	r0, r3
 8006fda:	3718      	adds	r7, #24
 8006fdc:	46bd      	mov	sp, r7
 8006fde:	bd80      	pop	{r7, pc}

08006fe0 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006fe0:	b580      	push	{r7, lr}
 8006fe2:	b086      	sub	sp, #24
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	60f8      	str	r0, [r7, #12]
 8006fe8:	460b      	mov	r3, r1
 8006fea:	607a      	str	r2, [r7, #4]
 8006fec:	72fb      	strb	r3, [r7, #11]
  USBD_StatusTypeDef ret;
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 8006fee:	7afb      	ldrb	r3, [r7, #11]
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d178      	bne.n	80070e6 <USBD_LL_DataInStage+0x106>
  {
    pep = &pdev->ep_in[0];
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	3314      	adds	r3, #20
 8006ff8:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007000:	2b02      	cmp	r3, #2
 8007002:	d163      	bne.n	80070cc <USBD_LL_DataInStage+0xec>
    {
      if (pep->rem_length > pep->maxpacket)
 8007004:	693b      	ldr	r3, [r7, #16]
 8007006:	685b      	ldr	r3, [r3, #4]
 8007008:	693a      	ldr	r2, [r7, #16]
 800700a:	8992      	ldrh	r2, [r2, #12]
 800700c:	4293      	cmp	r3, r2
 800700e:	d91c      	bls.n	800704a <USBD_LL_DataInStage+0x6a>
      {
        pep->rem_length -= pep->maxpacket;
 8007010:	693b      	ldr	r3, [r7, #16]
 8007012:	685b      	ldr	r3, [r3, #4]
 8007014:	693a      	ldr	r2, [r7, #16]
 8007016:	8992      	ldrh	r2, [r2, #12]
 8007018:	1a9a      	subs	r2, r3, r2
 800701a:	693b      	ldr	r3, [r7, #16]
 800701c:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 800701e:	693b      	ldr	r3, [r7, #16]
 8007020:	691b      	ldr	r3, [r3, #16]
 8007022:	693a      	ldr	r2, [r7, #16]
 8007024:	8992      	ldrh	r2, [r2, #12]
 8007026:	441a      	add	r2, r3
 8007028:	693b      	ldr	r3, [r7, #16]
 800702a:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueSendData(pdev, pep->pbuffer, pep->rem_length);
 800702c:	693b      	ldr	r3, [r7, #16]
 800702e:	6919      	ldr	r1, [r3, #16]
 8007030:	693b      	ldr	r3, [r7, #16]
 8007032:	685b      	ldr	r3, [r3, #4]
 8007034:	461a      	mov	r2, r3
 8007036:	68f8      	ldr	r0, [r7, #12]
 8007038:	f001 f8c4 	bl	80081c4 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800703c:	2300      	movs	r3, #0
 800703e:	2200      	movs	r2, #0
 8007040:	2100      	movs	r1, #0
 8007042:	68f8      	ldr	r0, [r7, #12]
 8007044:	f001 fce6 	bl	8008a14 <USBD_LL_PrepareReceive>
 8007048:	e040      	b.n	80070cc <USBD_LL_DataInStage+0xec>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800704a:	693b      	ldr	r3, [r7, #16]
 800704c:	899b      	ldrh	r3, [r3, #12]
 800704e:	461a      	mov	r2, r3
 8007050:	693b      	ldr	r3, [r7, #16]
 8007052:	685b      	ldr	r3, [r3, #4]
 8007054:	429a      	cmp	r2, r3
 8007056:	d11c      	bne.n	8007092 <USBD_LL_DataInStage+0xb2>
            (pep->total_length >= pep->maxpacket) &&
 8007058:	693b      	ldr	r3, [r7, #16]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	693a      	ldr	r2, [r7, #16]
 800705e:	8992      	ldrh	r2, [r2, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007060:	4293      	cmp	r3, r2
 8007062:	d316      	bcc.n	8007092 <USBD_LL_DataInStage+0xb2>
            (pep->total_length < pdev->ep0_data_len))
 8007064:	693b      	ldr	r3, [r7, #16]
 8007066:	681a      	ldr	r2, [r3, #0]
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800706e:	429a      	cmp	r2, r3
 8007070:	d20f      	bcs.n	8007092 <USBD_LL_DataInStage+0xb2>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007072:	2200      	movs	r2, #0
 8007074:	2100      	movs	r1, #0
 8007076:	68f8      	ldr	r0, [r7, #12]
 8007078:	f001 f8a4 	bl	80081c4 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	2200      	movs	r2, #0
 8007080:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007084:	2300      	movs	r3, #0
 8007086:	2200      	movs	r2, #0
 8007088:	2100      	movs	r1, #0
 800708a:	68f8      	ldr	r0, [r7, #12]
 800708c:	f001 fcc2 	bl	8008a14 <USBD_LL_PrepareReceive>
 8007090:	e01c      	b.n	80070cc <USBD_LL_DataInStage+0xec>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007098:	b2db      	uxtb	r3, r3
 800709a:	2b03      	cmp	r3, #3
 800709c:	d10f      	bne.n	80070be <USBD_LL_DataInStage+0xde>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80070a4:	68db      	ldr	r3, [r3, #12]
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d009      	beq.n	80070be <USBD_LL_DataInStage+0xde>
            {
              pdev->classId = 0U;
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	2200      	movs	r2, #0
 80070ae:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80070b8:	68db      	ldr	r3, [r3, #12]
 80070ba:	68f8      	ldr	r0, [r7, #12]
 80070bc:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80070be:	2180      	movs	r1, #128	@ 0x80
 80070c0:	68f8      	ldr	r0, [r7, #12]
 80070c2:	f001 fbfd 	bl	80088c0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80070c6:	68f8      	ldr	r0, [r7, #12]
 80070c8:	f001 f8b1 	bl	800822e <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d03a      	beq.n	800714c <USBD_LL_DataInStage+0x16c>
    {
      (void)USBD_RunTestMode(pdev);
 80070d6:	68f8      	ldr	r0, [r7, #12]
 80070d8:	f7ff fe30 	bl	8006d3c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	2200      	movs	r2, #0
 80070e0:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 80070e4:	e032      	b.n	800714c <USBD_LL_DataInStage+0x16c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80070e6:	7afb      	ldrb	r3, [r7, #11]
 80070e8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80070ec:	b2db      	uxtb	r3, r3
 80070ee:	4619      	mov	r1, r3
 80070f0:	68f8      	ldr	r0, [r7, #12]
 80070f2:	f000 f986 	bl	8007402 <USBD_CoreFindEP>
 80070f6:	4603      	mov	r3, r0
 80070f8:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80070fa:	7dfb      	ldrb	r3, [r7, #23]
 80070fc:	2bff      	cmp	r3, #255	@ 0xff
 80070fe:	d025      	beq.n	800714c <USBD_LL_DataInStage+0x16c>
 8007100:	7dfb      	ldrb	r3, [r7, #23]
 8007102:	2b00      	cmp	r3, #0
 8007104:	d122      	bne.n	800714c <USBD_LL_DataInStage+0x16c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800710c:	b2db      	uxtb	r3, r3
 800710e:	2b03      	cmp	r3, #3
 8007110:	d11c      	bne.n	800714c <USBD_LL_DataInStage+0x16c>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8007112:	7dfa      	ldrb	r2, [r7, #23]
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	32ae      	adds	r2, #174	@ 0xae
 8007118:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800711c:	695b      	ldr	r3, [r3, #20]
 800711e:	2b00      	cmp	r3, #0
 8007120:	d014      	beq.n	800714c <USBD_LL_DataInStage+0x16c>
        {
          pdev->classId = idx;
 8007122:	7dfa      	ldrb	r2, [r7, #23]
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800712a:	7dfa      	ldrb	r2, [r7, #23]
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	32ae      	adds	r2, #174	@ 0xae
 8007130:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007134:	695b      	ldr	r3, [r3, #20]
 8007136:	7afa      	ldrb	r2, [r7, #11]
 8007138:	4611      	mov	r1, r2
 800713a:	68f8      	ldr	r0, [r7, #12]
 800713c:	4798      	blx	r3
 800713e:	4603      	mov	r3, r0
 8007140:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8007142:	7dbb      	ldrb	r3, [r7, #22]
 8007144:	2b00      	cmp	r3, #0
 8007146:	d001      	beq.n	800714c <USBD_LL_DataInStage+0x16c>
          {
            return ret;
 8007148:	7dbb      	ldrb	r3, [r7, #22]
 800714a:	e000      	b.n	800714e <USBD_LL_DataInStage+0x16e>
        }
      }
    }
  }

  return USBD_OK;
 800714c:	2300      	movs	r3, #0
}
 800714e:	4618      	mov	r0, r3
 8007150:	3718      	adds	r7, #24
 8007152:	46bd      	mov	sp, r7
 8007154:	bd80      	pop	{r7, pc}

08007156 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007156:	b580      	push	{r7, lr}
 8007158:	b084      	sub	sp, #16
 800715a:	af00      	add	r7, sp, #0
 800715c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800715e:	2300      	movs	r3, #0
 8007160:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	2201      	movs	r2, #1
 8007166:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	2200      	movs	r2, #0
 800716e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	2200      	movs	r2, #0
 8007176:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	2200      	movs	r2, #0
 800717c:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	2200      	movs	r2, #0
 8007184:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800718e:	2b00      	cmp	r3, #0
 8007190:	d014      	beq.n	80071bc <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007198:	685b      	ldr	r3, [r3, #4]
 800719a:	2b00      	cmp	r3, #0
 800719c:	d00e      	beq.n	80071bc <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80071a4:	685b      	ldr	r3, [r3, #4]
 80071a6:	687a      	ldr	r2, [r7, #4]
 80071a8:	6852      	ldr	r2, [r2, #4]
 80071aa:	b2d2      	uxtb	r2, r2
 80071ac:	4611      	mov	r1, r2
 80071ae:	6878      	ldr	r0, [r7, #4]
 80071b0:	4798      	blx	r3
 80071b2:	4603      	mov	r3, r0
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d001      	beq.n	80071bc <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80071b8:	2303      	movs	r3, #3
 80071ba:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80071bc:	2340      	movs	r3, #64	@ 0x40
 80071be:	2200      	movs	r2, #0
 80071c0:	2100      	movs	r1, #0
 80071c2:	6878      	ldr	r0, [r7, #4]
 80071c4:	f001 fb37 	bl	8008836 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	2201      	movs	r2, #1
 80071cc:	f883 2163 	strb.w	r2, [r3, #355]	@ 0x163

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	2240      	movs	r2, #64	@ 0x40
 80071d4:	f8a3 2160 	strh.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80071d8:	2340      	movs	r3, #64	@ 0x40
 80071da:	2200      	movs	r2, #0
 80071dc:	2180      	movs	r1, #128	@ 0x80
 80071de:	6878      	ldr	r0, [r7, #4]
 80071e0:	f001 fb29 	bl	8008836 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	2201      	movs	r2, #1
 80071e8:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	2240      	movs	r2, #64	@ 0x40
 80071f0:	841a      	strh	r2, [r3, #32]

  return ret;
 80071f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80071f4:	4618      	mov	r0, r3
 80071f6:	3710      	adds	r7, #16
 80071f8:	46bd      	mov	sp, r7
 80071fa:	bd80      	pop	{r7, pc}

080071fc <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80071fc:	b480      	push	{r7}
 80071fe:	b083      	sub	sp, #12
 8007200:	af00      	add	r7, sp, #0
 8007202:	6078      	str	r0, [r7, #4]
 8007204:	460b      	mov	r3, r1
 8007206:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	78fa      	ldrb	r2, [r7, #3]
 800720c:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800720e:	2300      	movs	r3, #0
}
 8007210:	4618      	mov	r0, r3
 8007212:	370c      	adds	r7, #12
 8007214:	46bd      	mov	sp, r7
 8007216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800721a:	4770      	bx	lr

0800721c <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800721c:	b480      	push	{r7}
 800721e:	b083      	sub	sp, #12
 8007220:	af00      	add	r7, sp, #0
 8007222:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800722a:	b2db      	uxtb	r3, r3
 800722c:	2b04      	cmp	r3, #4
 800722e:	d006      	beq.n	800723e <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007236:	b2da      	uxtb	r2, r3
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	2204      	movs	r2, #4
 8007242:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8007246:	2300      	movs	r3, #0
}
 8007248:	4618      	mov	r0, r3
 800724a:	370c      	adds	r7, #12
 800724c:	46bd      	mov	sp, r7
 800724e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007252:	4770      	bx	lr

08007254 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007254:	b480      	push	{r7}
 8007256:	b083      	sub	sp, #12
 8007258:	af00      	add	r7, sp, #0
 800725a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007262:	b2db      	uxtb	r3, r3
 8007264:	2b04      	cmp	r3, #4
 8007266:	d106      	bne.n	8007276 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800726e:	b2da      	uxtb	r2, r3
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8007276:	2300      	movs	r3, #0
}
 8007278:	4618      	mov	r0, r3
 800727a:	370c      	adds	r7, #12
 800727c:	46bd      	mov	sp, r7
 800727e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007282:	4770      	bx	lr

08007284 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007284:	b580      	push	{r7, lr}
 8007286:	b082      	sub	sp, #8
 8007288:	af00      	add	r7, sp, #0
 800728a:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007292:	b2db      	uxtb	r3, r3
 8007294:	2b03      	cmp	r3, #3
 8007296:	d110      	bne.n	80072ba <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d00b      	beq.n	80072ba <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80072a8:	69db      	ldr	r3, [r3, #28]
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d005      	beq.n	80072ba <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80072b4:	69db      	ldr	r3, [r3, #28]
 80072b6:	6878      	ldr	r0, [r7, #4]
 80072b8:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80072ba:	2300      	movs	r3, #0
}
 80072bc:	4618      	mov	r0, r3
 80072be:	3708      	adds	r7, #8
 80072c0:	46bd      	mov	sp, r7
 80072c2:	bd80      	pop	{r7, pc}

080072c4 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80072c4:	b580      	push	{r7, lr}
 80072c6:	b082      	sub	sp, #8
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	6078      	str	r0, [r7, #4]
 80072cc:	460b      	mov	r3, r1
 80072ce:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	32ae      	adds	r2, #174	@ 0xae
 80072da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d101      	bne.n	80072e6 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80072e2:	2303      	movs	r3, #3
 80072e4:	e01c      	b.n	8007320 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80072ec:	b2db      	uxtb	r3, r3
 80072ee:	2b03      	cmp	r3, #3
 80072f0:	d115      	bne.n	800731e <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	32ae      	adds	r2, #174	@ 0xae
 80072fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007300:	6a1b      	ldr	r3, [r3, #32]
 8007302:	2b00      	cmp	r3, #0
 8007304:	d00b      	beq.n	800731e <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	32ae      	adds	r2, #174	@ 0xae
 8007310:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007314:	6a1b      	ldr	r3, [r3, #32]
 8007316:	78fa      	ldrb	r2, [r7, #3]
 8007318:	4611      	mov	r1, r2
 800731a:	6878      	ldr	r0, [r7, #4]
 800731c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800731e:	2300      	movs	r3, #0
}
 8007320:	4618      	mov	r0, r3
 8007322:	3708      	adds	r7, #8
 8007324:	46bd      	mov	sp, r7
 8007326:	bd80      	pop	{r7, pc}

08007328 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8007328:	b580      	push	{r7, lr}
 800732a:	b082      	sub	sp, #8
 800732c:	af00      	add	r7, sp, #0
 800732e:	6078      	str	r0, [r7, #4]
 8007330:	460b      	mov	r3, r1
 8007332:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	32ae      	adds	r2, #174	@ 0xae
 800733e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007342:	2b00      	cmp	r3, #0
 8007344:	d101      	bne.n	800734a <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8007346:	2303      	movs	r3, #3
 8007348:	e01c      	b.n	8007384 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007350:	b2db      	uxtb	r3, r3
 8007352:	2b03      	cmp	r3, #3
 8007354:	d115      	bne.n	8007382 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	32ae      	adds	r2, #174	@ 0xae
 8007360:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007364:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007366:	2b00      	cmp	r3, #0
 8007368:	d00b      	beq.n	8007382 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	32ae      	adds	r2, #174	@ 0xae
 8007374:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007378:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800737a:	78fa      	ldrb	r2, [r7, #3]
 800737c:	4611      	mov	r1, r2
 800737e:	6878      	ldr	r0, [r7, #4]
 8007380:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007382:	2300      	movs	r3, #0
}
 8007384:	4618      	mov	r0, r3
 8007386:	3708      	adds	r7, #8
 8007388:	46bd      	mov	sp, r7
 800738a:	bd80      	pop	{r7, pc}

0800738c <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800738c:	b480      	push	{r7}
 800738e:	b083      	sub	sp, #12
 8007390:	af00      	add	r7, sp, #0
 8007392:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007394:	2300      	movs	r3, #0
}
 8007396:	4618      	mov	r0, r3
 8007398:	370c      	adds	r7, #12
 800739a:	46bd      	mov	sp, r7
 800739c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a0:	4770      	bx	lr

080073a2 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80073a2:	b580      	push	{r7, lr}
 80073a4:	b084      	sub	sp, #16
 80073a6:	af00      	add	r7, sp, #0
 80073a8:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80073aa:	2300      	movs	r3, #0
 80073ac:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	2201      	movs	r2, #1
 80073b2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d00e      	beq.n	80073de <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80073c6:	685b      	ldr	r3, [r3, #4]
 80073c8:	687a      	ldr	r2, [r7, #4]
 80073ca:	6852      	ldr	r2, [r2, #4]
 80073cc:	b2d2      	uxtb	r2, r2
 80073ce:	4611      	mov	r1, r2
 80073d0:	6878      	ldr	r0, [r7, #4]
 80073d2:	4798      	blx	r3
 80073d4:	4603      	mov	r3, r0
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d001      	beq.n	80073de <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80073da:	2303      	movs	r3, #3
 80073dc:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80073de:	7bfb      	ldrb	r3, [r7, #15]
}
 80073e0:	4618      	mov	r0, r3
 80073e2:	3710      	adds	r7, #16
 80073e4:	46bd      	mov	sp, r7
 80073e6:	bd80      	pop	{r7, pc}

080073e8 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80073e8:	b480      	push	{r7}
 80073ea:	b083      	sub	sp, #12
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	6078      	str	r0, [r7, #4]
 80073f0:	460b      	mov	r3, r1
 80073f2:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80073f4:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80073f6:	4618      	mov	r0, r3
 80073f8:	370c      	adds	r7, #12
 80073fa:	46bd      	mov	sp, r7
 80073fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007400:	4770      	bx	lr

08007402 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007402:	b480      	push	{r7}
 8007404:	b083      	sub	sp, #12
 8007406:	af00      	add	r7, sp, #0
 8007408:	6078      	str	r0, [r7, #4]
 800740a:	460b      	mov	r3, r1
 800740c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800740e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007410:	4618      	mov	r0, r3
 8007412:	370c      	adds	r7, #12
 8007414:	46bd      	mov	sp, r7
 8007416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800741a:	4770      	bx	lr

0800741c <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800741c:	b580      	push	{r7, lr}
 800741e:	b086      	sub	sp, #24
 8007420:	af00      	add	r7, sp, #0
 8007422:	6078      	str	r0, [r7, #4]
 8007424:	460b      	mov	r3, r1
 8007426:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8007430:	2300      	movs	r3, #0
 8007432:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	885b      	ldrh	r3, [r3, #2]
 8007438:	b29b      	uxth	r3, r3
 800743a:	68fa      	ldr	r2, [r7, #12]
 800743c:	7812      	ldrb	r2, [r2, #0]
 800743e:	4293      	cmp	r3, r2
 8007440:	d91f      	bls.n	8007482 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	781b      	ldrb	r3, [r3, #0]
 8007446:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8007448:	e013      	b.n	8007472 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800744a:	f107 030a 	add.w	r3, r7, #10
 800744e:	4619      	mov	r1, r3
 8007450:	6978      	ldr	r0, [r7, #20]
 8007452:	f000 f81b 	bl	800748c <USBD_GetNextDesc>
 8007456:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8007458:	697b      	ldr	r3, [r7, #20]
 800745a:	785b      	ldrb	r3, [r3, #1]
 800745c:	2b05      	cmp	r3, #5
 800745e:	d108      	bne.n	8007472 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8007460:	697b      	ldr	r3, [r7, #20]
 8007462:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8007464:	693b      	ldr	r3, [r7, #16]
 8007466:	789b      	ldrb	r3, [r3, #2]
 8007468:	78fa      	ldrb	r2, [r7, #3]
 800746a:	429a      	cmp	r2, r3
 800746c:	d008      	beq.n	8007480 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800746e:	2300      	movs	r3, #0
 8007470:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	885b      	ldrh	r3, [r3, #2]
 8007476:	b29a      	uxth	r2, r3
 8007478:	897b      	ldrh	r3, [r7, #10]
 800747a:	429a      	cmp	r2, r3
 800747c:	d8e5      	bhi.n	800744a <USBD_GetEpDesc+0x2e>
 800747e:	e000      	b.n	8007482 <USBD_GetEpDesc+0x66>
          break;
 8007480:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8007482:	693b      	ldr	r3, [r7, #16]
}
 8007484:	4618      	mov	r0, r3
 8007486:	3718      	adds	r7, #24
 8007488:	46bd      	mov	sp, r7
 800748a:	bd80      	pop	{r7, pc}

0800748c <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800748c:	b480      	push	{r7}
 800748e:	b085      	sub	sp, #20
 8007490:	af00      	add	r7, sp, #0
 8007492:	6078      	str	r0, [r7, #4]
 8007494:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800749a:	683b      	ldr	r3, [r7, #0]
 800749c:	881b      	ldrh	r3, [r3, #0]
 800749e:	68fa      	ldr	r2, [r7, #12]
 80074a0:	7812      	ldrb	r2, [r2, #0]
 80074a2:	4413      	add	r3, r2
 80074a4:	b29a      	uxth	r2, r3
 80074a6:	683b      	ldr	r3, [r7, #0]
 80074a8:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	781b      	ldrb	r3, [r3, #0]
 80074ae:	461a      	mov	r2, r3
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	4413      	add	r3, r2
 80074b4:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80074b6:	68fb      	ldr	r3, [r7, #12]
}
 80074b8:	4618      	mov	r0, r3
 80074ba:	3714      	adds	r7, #20
 80074bc:	46bd      	mov	sp, r7
 80074be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c2:	4770      	bx	lr

080074c4 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80074c4:	b480      	push	{r7}
 80074c6:	b087      	sub	sp, #28
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80074d0:	697b      	ldr	r3, [r7, #20]
 80074d2:	781b      	ldrb	r3, [r3, #0]
 80074d4:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80074d6:	697b      	ldr	r3, [r7, #20]
 80074d8:	3301      	adds	r3, #1
 80074da:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80074dc:	697b      	ldr	r3, [r7, #20]
 80074de:	781b      	ldrb	r3, [r3, #0]
 80074e0:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80074e2:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80074e6:	021b      	lsls	r3, r3, #8
 80074e8:	b21a      	sxth	r2, r3
 80074ea:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80074ee:	4313      	orrs	r3, r2
 80074f0:	b21b      	sxth	r3, r3
 80074f2:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80074f4:	89fb      	ldrh	r3, [r7, #14]
}
 80074f6:	4618      	mov	r0, r3
 80074f8:	371c      	adds	r7, #28
 80074fa:	46bd      	mov	sp, r7
 80074fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007500:	4770      	bx	lr
	...

08007504 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007504:	b580      	push	{r7, lr}
 8007506:	b084      	sub	sp, #16
 8007508:	af00      	add	r7, sp, #0
 800750a:	6078      	str	r0, [r7, #4]
 800750c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800750e:	2300      	movs	r3, #0
 8007510:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007512:	683b      	ldr	r3, [r7, #0]
 8007514:	781b      	ldrb	r3, [r3, #0]
 8007516:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800751a:	2b40      	cmp	r3, #64	@ 0x40
 800751c:	d005      	beq.n	800752a <USBD_StdDevReq+0x26>
 800751e:	2b40      	cmp	r3, #64	@ 0x40
 8007520:	d857      	bhi.n	80075d2 <USBD_StdDevReq+0xce>
 8007522:	2b00      	cmp	r3, #0
 8007524:	d00f      	beq.n	8007546 <USBD_StdDevReq+0x42>
 8007526:	2b20      	cmp	r3, #32
 8007528:	d153      	bne.n	80075d2 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	32ae      	adds	r2, #174	@ 0xae
 8007534:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007538:	689b      	ldr	r3, [r3, #8]
 800753a:	6839      	ldr	r1, [r7, #0]
 800753c:	6878      	ldr	r0, [r7, #4]
 800753e:	4798      	blx	r3
 8007540:	4603      	mov	r3, r0
 8007542:	73fb      	strb	r3, [r7, #15]
      break;
 8007544:	e04a      	b.n	80075dc <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007546:	683b      	ldr	r3, [r7, #0]
 8007548:	785b      	ldrb	r3, [r3, #1]
 800754a:	2b09      	cmp	r3, #9
 800754c:	d83b      	bhi.n	80075c6 <USBD_StdDevReq+0xc2>
 800754e:	a201      	add	r2, pc, #4	@ (adr r2, 8007554 <USBD_StdDevReq+0x50>)
 8007550:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007554:	080075a9 	.word	0x080075a9
 8007558:	080075bd 	.word	0x080075bd
 800755c:	080075c7 	.word	0x080075c7
 8007560:	080075b3 	.word	0x080075b3
 8007564:	080075c7 	.word	0x080075c7
 8007568:	08007587 	.word	0x08007587
 800756c:	0800757d 	.word	0x0800757d
 8007570:	080075c7 	.word	0x080075c7
 8007574:	0800759f 	.word	0x0800759f
 8007578:	08007591 	.word	0x08007591
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800757c:	6839      	ldr	r1, [r7, #0]
 800757e:	6878      	ldr	r0, [r7, #4]
 8007580:	f000 fa3e 	bl	8007a00 <USBD_GetDescriptor>
          break;
 8007584:	e024      	b.n	80075d0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007586:	6839      	ldr	r1, [r7, #0]
 8007588:	6878      	ldr	r0, [r7, #4]
 800758a:	f000 fba3 	bl	8007cd4 <USBD_SetAddress>
          break;
 800758e:	e01f      	b.n	80075d0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007590:	6839      	ldr	r1, [r7, #0]
 8007592:	6878      	ldr	r0, [r7, #4]
 8007594:	f000 fbe2 	bl	8007d5c <USBD_SetConfig>
 8007598:	4603      	mov	r3, r0
 800759a:	73fb      	strb	r3, [r7, #15]
          break;
 800759c:	e018      	b.n	80075d0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800759e:	6839      	ldr	r1, [r7, #0]
 80075a0:	6878      	ldr	r0, [r7, #4]
 80075a2:	f000 fc85 	bl	8007eb0 <USBD_GetConfig>
          break;
 80075a6:	e013      	b.n	80075d0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80075a8:	6839      	ldr	r1, [r7, #0]
 80075aa:	6878      	ldr	r0, [r7, #4]
 80075ac:	f000 fcb6 	bl	8007f1c <USBD_GetStatus>
          break;
 80075b0:	e00e      	b.n	80075d0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80075b2:	6839      	ldr	r1, [r7, #0]
 80075b4:	6878      	ldr	r0, [r7, #4]
 80075b6:	f000 fce5 	bl	8007f84 <USBD_SetFeature>
          break;
 80075ba:	e009      	b.n	80075d0 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80075bc:	6839      	ldr	r1, [r7, #0]
 80075be:	6878      	ldr	r0, [r7, #4]
 80075c0:	f000 fd09 	bl	8007fd6 <USBD_ClrFeature>
          break;
 80075c4:	e004      	b.n	80075d0 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80075c6:	6839      	ldr	r1, [r7, #0]
 80075c8:	6878      	ldr	r0, [r7, #4]
 80075ca:	f000 fd60 	bl	800808e <USBD_CtlError>
          break;
 80075ce:	bf00      	nop
      }
      break;
 80075d0:	e004      	b.n	80075dc <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80075d2:	6839      	ldr	r1, [r7, #0]
 80075d4:	6878      	ldr	r0, [r7, #4]
 80075d6:	f000 fd5a 	bl	800808e <USBD_CtlError>
      break;
 80075da:	bf00      	nop
  }

  return ret;
 80075dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80075de:	4618      	mov	r0, r3
 80075e0:	3710      	adds	r7, #16
 80075e2:	46bd      	mov	sp, r7
 80075e4:	bd80      	pop	{r7, pc}
 80075e6:	bf00      	nop

080075e8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80075e8:	b580      	push	{r7, lr}
 80075ea:	b084      	sub	sp, #16
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	6078      	str	r0, [r7, #4]
 80075f0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80075f2:	2300      	movs	r3, #0
 80075f4:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80075f6:	683b      	ldr	r3, [r7, #0]
 80075f8:	781b      	ldrb	r3, [r3, #0]
 80075fa:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80075fe:	2b40      	cmp	r3, #64	@ 0x40
 8007600:	d005      	beq.n	800760e <USBD_StdItfReq+0x26>
 8007602:	2b40      	cmp	r3, #64	@ 0x40
 8007604:	d852      	bhi.n	80076ac <USBD_StdItfReq+0xc4>
 8007606:	2b00      	cmp	r3, #0
 8007608:	d001      	beq.n	800760e <USBD_StdItfReq+0x26>
 800760a:	2b20      	cmp	r3, #32
 800760c:	d14e      	bne.n	80076ac <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007614:	b2db      	uxtb	r3, r3
 8007616:	3b01      	subs	r3, #1
 8007618:	2b02      	cmp	r3, #2
 800761a:	d840      	bhi.n	800769e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800761c:	683b      	ldr	r3, [r7, #0]
 800761e:	889b      	ldrh	r3, [r3, #4]
 8007620:	b2db      	uxtb	r3, r3
 8007622:	2b01      	cmp	r3, #1
 8007624:	d836      	bhi.n	8007694 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8007626:	683b      	ldr	r3, [r7, #0]
 8007628:	889b      	ldrh	r3, [r3, #4]
 800762a:	b2db      	uxtb	r3, r3
 800762c:	4619      	mov	r1, r3
 800762e:	6878      	ldr	r0, [r7, #4]
 8007630:	f7ff feda 	bl	80073e8 <USBD_CoreFindIF>
 8007634:	4603      	mov	r3, r0
 8007636:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007638:	7bbb      	ldrb	r3, [r7, #14]
 800763a:	2bff      	cmp	r3, #255	@ 0xff
 800763c:	d01d      	beq.n	800767a <USBD_StdItfReq+0x92>
 800763e:	7bbb      	ldrb	r3, [r7, #14]
 8007640:	2b00      	cmp	r3, #0
 8007642:	d11a      	bne.n	800767a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8007644:	7bba      	ldrb	r2, [r7, #14]
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	32ae      	adds	r2, #174	@ 0xae
 800764a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800764e:	689b      	ldr	r3, [r3, #8]
 8007650:	2b00      	cmp	r3, #0
 8007652:	d00f      	beq.n	8007674 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8007654:	7bba      	ldrb	r2, [r7, #14]
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800765c:	7bba      	ldrb	r2, [r7, #14]
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	32ae      	adds	r2, #174	@ 0xae
 8007662:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007666:	689b      	ldr	r3, [r3, #8]
 8007668:	6839      	ldr	r1, [r7, #0]
 800766a:	6878      	ldr	r0, [r7, #4]
 800766c:	4798      	blx	r3
 800766e:	4603      	mov	r3, r0
 8007670:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007672:	e004      	b.n	800767e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8007674:	2303      	movs	r3, #3
 8007676:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007678:	e001      	b.n	800767e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800767a:	2303      	movs	r3, #3
 800767c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800767e:	683b      	ldr	r3, [r7, #0]
 8007680:	88db      	ldrh	r3, [r3, #6]
 8007682:	2b00      	cmp	r3, #0
 8007684:	d110      	bne.n	80076a8 <USBD_StdItfReq+0xc0>
 8007686:	7bfb      	ldrb	r3, [r7, #15]
 8007688:	2b00      	cmp	r3, #0
 800768a:	d10d      	bne.n	80076a8 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800768c:	6878      	ldr	r0, [r7, #4]
 800768e:	f000 fdbb 	bl	8008208 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007692:	e009      	b.n	80076a8 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8007694:	6839      	ldr	r1, [r7, #0]
 8007696:	6878      	ldr	r0, [r7, #4]
 8007698:	f000 fcf9 	bl	800808e <USBD_CtlError>
          break;
 800769c:	e004      	b.n	80076a8 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800769e:	6839      	ldr	r1, [r7, #0]
 80076a0:	6878      	ldr	r0, [r7, #4]
 80076a2:	f000 fcf4 	bl	800808e <USBD_CtlError>
          break;
 80076a6:	e000      	b.n	80076aa <USBD_StdItfReq+0xc2>
          break;
 80076a8:	bf00      	nop
      }
      break;
 80076aa:	e004      	b.n	80076b6 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80076ac:	6839      	ldr	r1, [r7, #0]
 80076ae:	6878      	ldr	r0, [r7, #4]
 80076b0:	f000 fced 	bl	800808e <USBD_CtlError>
      break;
 80076b4:	bf00      	nop
  }

  return ret;
 80076b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80076b8:	4618      	mov	r0, r3
 80076ba:	3710      	adds	r7, #16
 80076bc:	46bd      	mov	sp, r7
 80076be:	bd80      	pop	{r7, pc}

080076c0 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80076c0:	b580      	push	{r7, lr}
 80076c2:	b084      	sub	sp, #16
 80076c4:	af00      	add	r7, sp, #0
 80076c6:	6078      	str	r0, [r7, #4]
 80076c8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80076ca:	2300      	movs	r3, #0
 80076cc:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80076ce:	683b      	ldr	r3, [r7, #0]
 80076d0:	889b      	ldrh	r3, [r3, #4]
 80076d2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80076d4:	683b      	ldr	r3, [r7, #0]
 80076d6:	781b      	ldrb	r3, [r3, #0]
 80076d8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80076dc:	2b40      	cmp	r3, #64	@ 0x40
 80076de:	d007      	beq.n	80076f0 <USBD_StdEPReq+0x30>
 80076e0:	2b40      	cmp	r3, #64	@ 0x40
 80076e2:	f200 8181 	bhi.w	80079e8 <USBD_StdEPReq+0x328>
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d02a      	beq.n	8007740 <USBD_StdEPReq+0x80>
 80076ea:	2b20      	cmp	r3, #32
 80076ec:	f040 817c 	bne.w	80079e8 <USBD_StdEPReq+0x328>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80076f0:	7bbb      	ldrb	r3, [r7, #14]
 80076f2:	4619      	mov	r1, r3
 80076f4:	6878      	ldr	r0, [r7, #4]
 80076f6:	f7ff fe84 	bl	8007402 <USBD_CoreFindEP>
 80076fa:	4603      	mov	r3, r0
 80076fc:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80076fe:	7b7b      	ldrb	r3, [r7, #13]
 8007700:	2bff      	cmp	r3, #255	@ 0xff
 8007702:	f000 8176 	beq.w	80079f2 <USBD_StdEPReq+0x332>
 8007706:	7b7b      	ldrb	r3, [r7, #13]
 8007708:	2b00      	cmp	r3, #0
 800770a:	f040 8172 	bne.w	80079f2 <USBD_StdEPReq+0x332>
      {
        pdev->classId = idx;
 800770e:	7b7a      	ldrb	r2, [r7, #13]
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8007716:	7b7a      	ldrb	r2, [r7, #13]
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	32ae      	adds	r2, #174	@ 0xae
 800771c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007720:	689b      	ldr	r3, [r3, #8]
 8007722:	2b00      	cmp	r3, #0
 8007724:	f000 8165 	beq.w	80079f2 <USBD_StdEPReq+0x332>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8007728:	7b7a      	ldrb	r2, [r7, #13]
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	32ae      	adds	r2, #174	@ 0xae
 800772e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007732:	689b      	ldr	r3, [r3, #8]
 8007734:	6839      	ldr	r1, [r7, #0]
 8007736:	6878      	ldr	r0, [r7, #4]
 8007738:	4798      	blx	r3
 800773a:	4603      	mov	r3, r0
 800773c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800773e:	e158      	b.n	80079f2 <USBD_StdEPReq+0x332>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007740:	683b      	ldr	r3, [r7, #0]
 8007742:	785b      	ldrb	r3, [r3, #1]
 8007744:	2b03      	cmp	r3, #3
 8007746:	d008      	beq.n	800775a <USBD_StdEPReq+0x9a>
 8007748:	2b03      	cmp	r3, #3
 800774a:	f300 8147 	bgt.w	80079dc <USBD_StdEPReq+0x31c>
 800774e:	2b00      	cmp	r3, #0
 8007750:	f000 809b 	beq.w	800788a <USBD_StdEPReq+0x1ca>
 8007754:	2b01      	cmp	r3, #1
 8007756:	d03c      	beq.n	80077d2 <USBD_StdEPReq+0x112>
 8007758:	e140      	b.n	80079dc <USBD_StdEPReq+0x31c>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007760:	b2db      	uxtb	r3, r3
 8007762:	2b02      	cmp	r3, #2
 8007764:	d002      	beq.n	800776c <USBD_StdEPReq+0xac>
 8007766:	2b03      	cmp	r3, #3
 8007768:	d016      	beq.n	8007798 <USBD_StdEPReq+0xd8>
 800776a:	e02c      	b.n	80077c6 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800776c:	7bbb      	ldrb	r3, [r7, #14]
 800776e:	2b00      	cmp	r3, #0
 8007770:	d00d      	beq.n	800778e <USBD_StdEPReq+0xce>
 8007772:	7bbb      	ldrb	r3, [r7, #14]
 8007774:	2b80      	cmp	r3, #128	@ 0x80
 8007776:	d00a      	beq.n	800778e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007778:	7bbb      	ldrb	r3, [r7, #14]
 800777a:	4619      	mov	r1, r3
 800777c:	6878      	ldr	r0, [r7, #4]
 800777e:	f001 f89f 	bl	80088c0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007782:	2180      	movs	r1, #128	@ 0x80
 8007784:	6878      	ldr	r0, [r7, #4]
 8007786:	f001 f89b 	bl	80088c0 <USBD_LL_StallEP>
 800778a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800778c:	e020      	b.n	80077d0 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800778e:	6839      	ldr	r1, [r7, #0]
 8007790:	6878      	ldr	r0, [r7, #4]
 8007792:	f000 fc7c 	bl	800808e <USBD_CtlError>
              break;
 8007796:	e01b      	b.n	80077d0 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007798:	683b      	ldr	r3, [r7, #0]
 800779a:	885b      	ldrh	r3, [r3, #2]
 800779c:	2b00      	cmp	r3, #0
 800779e:	d10e      	bne.n	80077be <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80077a0:	7bbb      	ldrb	r3, [r7, #14]
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d00b      	beq.n	80077be <USBD_StdEPReq+0xfe>
 80077a6:	7bbb      	ldrb	r3, [r7, #14]
 80077a8:	2b80      	cmp	r3, #128	@ 0x80
 80077aa:	d008      	beq.n	80077be <USBD_StdEPReq+0xfe>
 80077ac:	683b      	ldr	r3, [r7, #0]
 80077ae:	88db      	ldrh	r3, [r3, #6]
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d104      	bne.n	80077be <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80077b4:	7bbb      	ldrb	r3, [r7, #14]
 80077b6:	4619      	mov	r1, r3
 80077b8:	6878      	ldr	r0, [r7, #4]
 80077ba:	f001 f881 	bl	80088c0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80077be:	6878      	ldr	r0, [r7, #4]
 80077c0:	f000 fd22 	bl	8008208 <USBD_CtlSendStatus>

              break;
 80077c4:	e004      	b.n	80077d0 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80077c6:	6839      	ldr	r1, [r7, #0]
 80077c8:	6878      	ldr	r0, [r7, #4]
 80077ca:	f000 fc60 	bl	800808e <USBD_CtlError>
              break;
 80077ce:	bf00      	nop
          }
          break;
 80077d0:	e109      	b.n	80079e6 <USBD_StdEPReq+0x326>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80077d8:	b2db      	uxtb	r3, r3
 80077da:	2b02      	cmp	r3, #2
 80077dc:	d002      	beq.n	80077e4 <USBD_StdEPReq+0x124>
 80077de:	2b03      	cmp	r3, #3
 80077e0:	d016      	beq.n	8007810 <USBD_StdEPReq+0x150>
 80077e2:	e04b      	b.n	800787c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80077e4:	7bbb      	ldrb	r3, [r7, #14]
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d00d      	beq.n	8007806 <USBD_StdEPReq+0x146>
 80077ea:	7bbb      	ldrb	r3, [r7, #14]
 80077ec:	2b80      	cmp	r3, #128	@ 0x80
 80077ee:	d00a      	beq.n	8007806 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80077f0:	7bbb      	ldrb	r3, [r7, #14]
 80077f2:	4619      	mov	r1, r3
 80077f4:	6878      	ldr	r0, [r7, #4]
 80077f6:	f001 f863 	bl	80088c0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80077fa:	2180      	movs	r1, #128	@ 0x80
 80077fc:	6878      	ldr	r0, [r7, #4]
 80077fe:	f001 f85f 	bl	80088c0 <USBD_LL_StallEP>
 8007802:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007804:	e040      	b.n	8007888 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8007806:	6839      	ldr	r1, [r7, #0]
 8007808:	6878      	ldr	r0, [r7, #4]
 800780a:	f000 fc40 	bl	800808e <USBD_CtlError>
              break;
 800780e:	e03b      	b.n	8007888 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007810:	683b      	ldr	r3, [r7, #0]
 8007812:	885b      	ldrh	r3, [r3, #2]
 8007814:	2b00      	cmp	r3, #0
 8007816:	d136      	bne.n	8007886 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007818:	7bbb      	ldrb	r3, [r7, #14]
 800781a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800781e:	2b00      	cmp	r3, #0
 8007820:	d004      	beq.n	800782c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007822:	7bbb      	ldrb	r3, [r7, #14]
 8007824:	4619      	mov	r1, r3
 8007826:	6878      	ldr	r0, [r7, #4]
 8007828:	f001 f869 	bl	80088fe <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800782c:	6878      	ldr	r0, [r7, #4]
 800782e:	f000 fceb 	bl	8008208 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8007832:	7bbb      	ldrb	r3, [r7, #14]
 8007834:	4619      	mov	r1, r3
 8007836:	6878      	ldr	r0, [r7, #4]
 8007838:	f7ff fde3 	bl	8007402 <USBD_CoreFindEP>
 800783c:	4603      	mov	r3, r0
 800783e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007840:	7b7b      	ldrb	r3, [r7, #13]
 8007842:	2bff      	cmp	r3, #255	@ 0xff
 8007844:	d01f      	beq.n	8007886 <USBD_StdEPReq+0x1c6>
 8007846:	7b7b      	ldrb	r3, [r7, #13]
 8007848:	2b00      	cmp	r3, #0
 800784a:	d11c      	bne.n	8007886 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800784c:	7b7a      	ldrb	r2, [r7, #13]
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8007854:	7b7a      	ldrb	r2, [r7, #13]
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	32ae      	adds	r2, #174	@ 0xae
 800785a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800785e:	689b      	ldr	r3, [r3, #8]
 8007860:	2b00      	cmp	r3, #0
 8007862:	d010      	beq.n	8007886 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007864:	7b7a      	ldrb	r2, [r7, #13]
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	32ae      	adds	r2, #174	@ 0xae
 800786a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800786e:	689b      	ldr	r3, [r3, #8]
 8007870:	6839      	ldr	r1, [r7, #0]
 8007872:	6878      	ldr	r0, [r7, #4]
 8007874:	4798      	blx	r3
 8007876:	4603      	mov	r3, r0
 8007878:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800787a:	e004      	b.n	8007886 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800787c:	6839      	ldr	r1, [r7, #0]
 800787e:	6878      	ldr	r0, [r7, #4]
 8007880:	f000 fc05 	bl	800808e <USBD_CtlError>
              break;
 8007884:	e000      	b.n	8007888 <USBD_StdEPReq+0x1c8>
              break;
 8007886:	bf00      	nop
          }
          break;
 8007888:	e0ad      	b.n	80079e6 <USBD_StdEPReq+0x326>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007890:	b2db      	uxtb	r3, r3
 8007892:	2b02      	cmp	r3, #2
 8007894:	d002      	beq.n	800789c <USBD_StdEPReq+0x1dc>
 8007896:	2b03      	cmp	r3, #3
 8007898:	d033      	beq.n	8007902 <USBD_StdEPReq+0x242>
 800789a:	e099      	b.n	80079d0 <USBD_StdEPReq+0x310>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800789c:	7bbb      	ldrb	r3, [r7, #14]
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d007      	beq.n	80078b2 <USBD_StdEPReq+0x1f2>
 80078a2:	7bbb      	ldrb	r3, [r7, #14]
 80078a4:	2b80      	cmp	r3, #128	@ 0x80
 80078a6:	d004      	beq.n	80078b2 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80078a8:	6839      	ldr	r1, [r7, #0]
 80078aa:	6878      	ldr	r0, [r7, #4]
 80078ac:	f000 fbef 	bl	800808e <USBD_CtlError>
                break;
 80078b0:	e093      	b.n	80079da <USBD_StdEPReq+0x31a>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80078b2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	da0b      	bge.n	80078d2 <USBD_StdEPReq+0x212>
 80078ba:	7bbb      	ldrb	r3, [r7, #14]
 80078bc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80078c0:	4613      	mov	r3, r2
 80078c2:	009b      	lsls	r3, r3, #2
 80078c4:	4413      	add	r3, r2
 80078c6:	009b      	lsls	r3, r3, #2
 80078c8:	3310      	adds	r3, #16
 80078ca:	687a      	ldr	r2, [r7, #4]
 80078cc:	4413      	add	r3, r2
 80078ce:	3304      	adds	r3, #4
 80078d0:	e00b      	b.n	80078ea <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80078d2:	7bbb      	ldrb	r3, [r7, #14]
 80078d4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80078d8:	4613      	mov	r3, r2
 80078da:	009b      	lsls	r3, r3, #2
 80078dc:	4413      	add	r3, r2
 80078de:	009b      	lsls	r3, r3, #2
 80078e0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80078e4:	687a      	ldr	r2, [r7, #4]
 80078e6:	4413      	add	r3, r2
 80078e8:	3304      	adds	r3, #4
 80078ea:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80078ec:	68bb      	ldr	r3, [r7, #8]
 80078ee:	2200      	movs	r2, #0
 80078f0:	739a      	strb	r2, [r3, #14]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80078f2:	68bb      	ldr	r3, [r7, #8]
 80078f4:	330e      	adds	r3, #14
 80078f6:	2202      	movs	r2, #2
 80078f8:	4619      	mov	r1, r3
 80078fa:	6878      	ldr	r0, [r7, #4]
 80078fc:	f000 fc44 	bl	8008188 <USBD_CtlSendData>
              break;
 8007900:	e06b      	b.n	80079da <USBD_StdEPReq+0x31a>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007902:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007906:	2b00      	cmp	r3, #0
 8007908:	da11      	bge.n	800792e <USBD_StdEPReq+0x26e>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800790a:	7bbb      	ldrb	r3, [r7, #14]
 800790c:	f003 020f 	and.w	r2, r3, #15
 8007910:	6879      	ldr	r1, [r7, #4]
 8007912:	4613      	mov	r3, r2
 8007914:	009b      	lsls	r3, r3, #2
 8007916:	4413      	add	r3, r2
 8007918:	009b      	lsls	r3, r3, #2
 800791a:	440b      	add	r3, r1
 800791c:	3323      	adds	r3, #35	@ 0x23
 800791e:	781b      	ldrb	r3, [r3, #0]
 8007920:	2b00      	cmp	r3, #0
 8007922:	d117      	bne.n	8007954 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 8007924:	6839      	ldr	r1, [r7, #0]
 8007926:	6878      	ldr	r0, [r7, #4]
 8007928:	f000 fbb1 	bl	800808e <USBD_CtlError>
                  break;
 800792c:	e055      	b.n	80079da <USBD_StdEPReq+0x31a>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800792e:	7bbb      	ldrb	r3, [r7, #14]
 8007930:	f003 020f 	and.w	r2, r3, #15
 8007934:	6879      	ldr	r1, [r7, #4]
 8007936:	4613      	mov	r3, r2
 8007938:	009b      	lsls	r3, r3, #2
 800793a:	4413      	add	r3, r2
 800793c:	009b      	lsls	r3, r3, #2
 800793e:	440b      	add	r3, r1
 8007940:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8007944:	781b      	ldrb	r3, [r3, #0]
 8007946:	2b00      	cmp	r3, #0
 8007948:	d104      	bne.n	8007954 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 800794a:	6839      	ldr	r1, [r7, #0]
 800794c:	6878      	ldr	r0, [r7, #4]
 800794e:	f000 fb9e 	bl	800808e <USBD_CtlError>
                  break;
 8007952:	e042      	b.n	80079da <USBD_StdEPReq+0x31a>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007954:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007958:	2b00      	cmp	r3, #0
 800795a:	da0b      	bge.n	8007974 <USBD_StdEPReq+0x2b4>
 800795c:	7bbb      	ldrb	r3, [r7, #14]
 800795e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007962:	4613      	mov	r3, r2
 8007964:	009b      	lsls	r3, r3, #2
 8007966:	4413      	add	r3, r2
 8007968:	009b      	lsls	r3, r3, #2
 800796a:	3310      	adds	r3, #16
 800796c:	687a      	ldr	r2, [r7, #4]
 800796e:	4413      	add	r3, r2
 8007970:	3304      	adds	r3, #4
 8007972:	e00b      	b.n	800798c <USBD_StdEPReq+0x2cc>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007974:	7bbb      	ldrb	r3, [r7, #14]
 8007976:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800797a:	4613      	mov	r3, r2
 800797c:	009b      	lsls	r3, r3, #2
 800797e:	4413      	add	r3, r2
 8007980:	009b      	lsls	r3, r3, #2
 8007982:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007986:	687a      	ldr	r2, [r7, #4]
 8007988:	4413      	add	r3, r2
 800798a:	3304      	adds	r3, #4
 800798c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800798e:	7bbb      	ldrb	r3, [r7, #14]
 8007990:	2b00      	cmp	r3, #0
 8007992:	d002      	beq.n	800799a <USBD_StdEPReq+0x2da>
 8007994:	7bbb      	ldrb	r3, [r7, #14]
 8007996:	2b80      	cmp	r3, #128	@ 0x80
 8007998:	d103      	bne.n	80079a2 <USBD_StdEPReq+0x2e2>
              {
                pep->status = 0x0000U;
 800799a:	68bb      	ldr	r3, [r7, #8]
 800799c:	2200      	movs	r2, #0
 800799e:	739a      	strb	r2, [r3, #14]
 80079a0:	e00e      	b.n	80079c0 <USBD_StdEPReq+0x300>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80079a2:	7bbb      	ldrb	r3, [r7, #14]
 80079a4:	4619      	mov	r1, r3
 80079a6:	6878      	ldr	r0, [r7, #4]
 80079a8:	f000 ffc8 	bl	800893c <USBD_LL_IsStallEP>
 80079ac:	4603      	mov	r3, r0
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d003      	beq.n	80079ba <USBD_StdEPReq+0x2fa>
              {
                pep->status = 0x0001U;
 80079b2:	68bb      	ldr	r3, [r7, #8]
 80079b4:	2201      	movs	r2, #1
 80079b6:	739a      	strb	r2, [r3, #14]
 80079b8:	e002      	b.n	80079c0 <USBD_StdEPReq+0x300>
              }
              else
              {
                pep->status = 0x0000U;
 80079ba:	68bb      	ldr	r3, [r7, #8]
 80079bc:	2200      	movs	r2, #0
 80079be:	739a      	strb	r2, [r3, #14]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80079c0:	68bb      	ldr	r3, [r7, #8]
 80079c2:	330e      	adds	r3, #14
 80079c4:	2202      	movs	r2, #2
 80079c6:	4619      	mov	r1, r3
 80079c8:	6878      	ldr	r0, [r7, #4]
 80079ca:	f000 fbdd 	bl	8008188 <USBD_CtlSendData>
              break;
 80079ce:	e004      	b.n	80079da <USBD_StdEPReq+0x31a>

            default:
              USBD_CtlError(pdev, req);
 80079d0:	6839      	ldr	r1, [r7, #0]
 80079d2:	6878      	ldr	r0, [r7, #4]
 80079d4:	f000 fb5b 	bl	800808e <USBD_CtlError>
              break;
 80079d8:	bf00      	nop
          }
          break;
 80079da:	e004      	b.n	80079e6 <USBD_StdEPReq+0x326>

        default:
          USBD_CtlError(pdev, req);
 80079dc:	6839      	ldr	r1, [r7, #0]
 80079de:	6878      	ldr	r0, [r7, #4]
 80079e0:	f000 fb55 	bl	800808e <USBD_CtlError>
          break;
 80079e4:	bf00      	nop
      }
      break;
 80079e6:	e005      	b.n	80079f4 <USBD_StdEPReq+0x334>

    default:
      USBD_CtlError(pdev, req);
 80079e8:	6839      	ldr	r1, [r7, #0]
 80079ea:	6878      	ldr	r0, [r7, #4]
 80079ec:	f000 fb4f 	bl	800808e <USBD_CtlError>
      break;
 80079f0:	e000      	b.n	80079f4 <USBD_StdEPReq+0x334>
      break;
 80079f2:	bf00      	nop
  }

  return ret;
 80079f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80079f6:	4618      	mov	r0, r3
 80079f8:	3710      	adds	r7, #16
 80079fa:	46bd      	mov	sp, r7
 80079fc:	bd80      	pop	{r7, pc}
	...

08007a00 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007a00:	b580      	push	{r7, lr}
 8007a02:	b084      	sub	sp, #16
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	6078      	str	r0, [r7, #4]
 8007a08:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007a0a:	2300      	movs	r3, #0
 8007a0c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007a0e:	2300      	movs	r3, #0
 8007a10:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007a12:	2300      	movs	r3, #0
 8007a14:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007a16:	683b      	ldr	r3, [r7, #0]
 8007a18:	885b      	ldrh	r3, [r3, #2]
 8007a1a:	0a1b      	lsrs	r3, r3, #8
 8007a1c:	b29b      	uxth	r3, r3
 8007a1e:	3b01      	subs	r3, #1
 8007a20:	2b06      	cmp	r3, #6
 8007a22:	f200 8128 	bhi.w	8007c76 <USBD_GetDescriptor+0x276>
 8007a26:	a201      	add	r2, pc, #4	@ (adr r2, 8007a2c <USBD_GetDescriptor+0x2c>)
 8007a28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a2c:	08007a49 	.word	0x08007a49
 8007a30:	08007a61 	.word	0x08007a61
 8007a34:	08007aa1 	.word	0x08007aa1
 8007a38:	08007c77 	.word	0x08007c77
 8007a3c:	08007c77 	.word	0x08007c77
 8007a40:	08007c17 	.word	0x08007c17
 8007a44:	08007c43 	.word	0x08007c43
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	687a      	ldr	r2, [r7, #4]
 8007a52:	7c12      	ldrb	r2, [r2, #16]
 8007a54:	f107 0108 	add.w	r1, r7, #8
 8007a58:	4610      	mov	r0, r2
 8007a5a:	4798      	blx	r3
 8007a5c:	60f8      	str	r0, [r7, #12]
      break;
 8007a5e:	e112      	b.n	8007c86 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	7c1b      	ldrb	r3, [r3, #16]
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d10d      	bne.n	8007a84 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007a6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a70:	f107 0208 	add.w	r2, r7, #8
 8007a74:	4610      	mov	r0, r2
 8007a76:	4798      	blx	r3
 8007a78:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	3301      	adds	r3, #1
 8007a7e:	2202      	movs	r2, #2
 8007a80:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007a82:	e100      	b.n	8007c86 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007a8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a8c:	f107 0208 	add.w	r2, r7, #8
 8007a90:	4610      	mov	r0, r2
 8007a92:	4798      	blx	r3
 8007a94:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	3301      	adds	r3, #1
 8007a9a:	2202      	movs	r2, #2
 8007a9c:	701a      	strb	r2, [r3, #0]
      break;
 8007a9e:	e0f2      	b.n	8007c86 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007aa0:	683b      	ldr	r3, [r7, #0]
 8007aa2:	885b      	ldrh	r3, [r3, #2]
 8007aa4:	b2db      	uxtb	r3, r3
 8007aa6:	2b05      	cmp	r3, #5
 8007aa8:	f200 80ac 	bhi.w	8007c04 <USBD_GetDescriptor+0x204>
 8007aac:	a201      	add	r2, pc, #4	@ (adr r2, 8007ab4 <USBD_GetDescriptor+0xb4>)
 8007aae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ab2:	bf00      	nop
 8007ab4:	08007acd 	.word	0x08007acd
 8007ab8:	08007b01 	.word	0x08007b01
 8007abc:	08007b35 	.word	0x08007b35
 8007ac0:	08007b69 	.word	0x08007b69
 8007ac4:	08007b9d 	.word	0x08007b9d
 8007ac8:	08007bd1 	.word	0x08007bd1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007ad2:	685b      	ldr	r3, [r3, #4]
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d00b      	beq.n	8007af0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007ade:	685b      	ldr	r3, [r3, #4]
 8007ae0:	687a      	ldr	r2, [r7, #4]
 8007ae2:	7c12      	ldrb	r2, [r2, #16]
 8007ae4:	f107 0108 	add.w	r1, r7, #8
 8007ae8:	4610      	mov	r0, r2
 8007aea:	4798      	blx	r3
 8007aec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007aee:	e091      	b.n	8007c14 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007af0:	6839      	ldr	r1, [r7, #0]
 8007af2:	6878      	ldr	r0, [r7, #4]
 8007af4:	f000 facb 	bl	800808e <USBD_CtlError>
            err++;
 8007af8:	7afb      	ldrb	r3, [r7, #11]
 8007afa:	3301      	adds	r3, #1
 8007afc:	72fb      	strb	r3, [r7, #11]
          break;
 8007afe:	e089      	b.n	8007c14 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007b06:	689b      	ldr	r3, [r3, #8]
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d00b      	beq.n	8007b24 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007b12:	689b      	ldr	r3, [r3, #8]
 8007b14:	687a      	ldr	r2, [r7, #4]
 8007b16:	7c12      	ldrb	r2, [r2, #16]
 8007b18:	f107 0108 	add.w	r1, r7, #8
 8007b1c:	4610      	mov	r0, r2
 8007b1e:	4798      	blx	r3
 8007b20:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007b22:	e077      	b.n	8007c14 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007b24:	6839      	ldr	r1, [r7, #0]
 8007b26:	6878      	ldr	r0, [r7, #4]
 8007b28:	f000 fab1 	bl	800808e <USBD_CtlError>
            err++;
 8007b2c:	7afb      	ldrb	r3, [r7, #11]
 8007b2e:	3301      	adds	r3, #1
 8007b30:	72fb      	strb	r3, [r7, #11]
          break;
 8007b32:	e06f      	b.n	8007c14 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007b3a:	68db      	ldr	r3, [r3, #12]
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d00b      	beq.n	8007b58 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007b46:	68db      	ldr	r3, [r3, #12]
 8007b48:	687a      	ldr	r2, [r7, #4]
 8007b4a:	7c12      	ldrb	r2, [r2, #16]
 8007b4c:	f107 0108 	add.w	r1, r7, #8
 8007b50:	4610      	mov	r0, r2
 8007b52:	4798      	blx	r3
 8007b54:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007b56:	e05d      	b.n	8007c14 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007b58:	6839      	ldr	r1, [r7, #0]
 8007b5a:	6878      	ldr	r0, [r7, #4]
 8007b5c:	f000 fa97 	bl	800808e <USBD_CtlError>
            err++;
 8007b60:	7afb      	ldrb	r3, [r7, #11]
 8007b62:	3301      	adds	r3, #1
 8007b64:	72fb      	strb	r3, [r7, #11]
          break;
 8007b66:	e055      	b.n	8007c14 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007b6e:	691b      	ldr	r3, [r3, #16]
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d00b      	beq.n	8007b8c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007b7a:	691b      	ldr	r3, [r3, #16]
 8007b7c:	687a      	ldr	r2, [r7, #4]
 8007b7e:	7c12      	ldrb	r2, [r2, #16]
 8007b80:	f107 0108 	add.w	r1, r7, #8
 8007b84:	4610      	mov	r0, r2
 8007b86:	4798      	blx	r3
 8007b88:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007b8a:	e043      	b.n	8007c14 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007b8c:	6839      	ldr	r1, [r7, #0]
 8007b8e:	6878      	ldr	r0, [r7, #4]
 8007b90:	f000 fa7d 	bl	800808e <USBD_CtlError>
            err++;
 8007b94:	7afb      	ldrb	r3, [r7, #11]
 8007b96:	3301      	adds	r3, #1
 8007b98:	72fb      	strb	r3, [r7, #11]
          break;
 8007b9a:	e03b      	b.n	8007c14 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007ba2:	695b      	ldr	r3, [r3, #20]
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d00b      	beq.n	8007bc0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007bae:	695b      	ldr	r3, [r3, #20]
 8007bb0:	687a      	ldr	r2, [r7, #4]
 8007bb2:	7c12      	ldrb	r2, [r2, #16]
 8007bb4:	f107 0108 	add.w	r1, r7, #8
 8007bb8:	4610      	mov	r0, r2
 8007bba:	4798      	blx	r3
 8007bbc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007bbe:	e029      	b.n	8007c14 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007bc0:	6839      	ldr	r1, [r7, #0]
 8007bc2:	6878      	ldr	r0, [r7, #4]
 8007bc4:	f000 fa63 	bl	800808e <USBD_CtlError>
            err++;
 8007bc8:	7afb      	ldrb	r3, [r7, #11]
 8007bca:	3301      	adds	r3, #1
 8007bcc:	72fb      	strb	r3, [r7, #11]
          break;
 8007bce:	e021      	b.n	8007c14 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007bd6:	699b      	ldr	r3, [r3, #24]
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d00b      	beq.n	8007bf4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007be2:	699b      	ldr	r3, [r3, #24]
 8007be4:	687a      	ldr	r2, [r7, #4]
 8007be6:	7c12      	ldrb	r2, [r2, #16]
 8007be8:	f107 0108 	add.w	r1, r7, #8
 8007bec:	4610      	mov	r0, r2
 8007bee:	4798      	blx	r3
 8007bf0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007bf2:	e00f      	b.n	8007c14 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007bf4:	6839      	ldr	r1, [r7, #0]
 8007bf6:	6878      	ldr	r0, [r7, #4]
 8007bf8:	f000 fa49 	bl	800808e <USBD_CtlError>
            err++;
 8007bfc:	7afb      	ldrb	r3, [r7, #11]
 8007bfe:	3301      	adds	r3, #1
 8007c00:	72fb      	strb	r3, [r7, #11]
          break;
 8007c02:	e007      	b.n	8007c14 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007c04:	6839      	ldr	r1, [r7, #0]
 8007c06:	6878      	ldr	r0, [r7, #4]
 8007c08:	f000 fa41 	bl	800808e <USBD_CtlError>
          err++;
 8007c0c:	7afb      	ldrb	r3, [r7, #11]
 8007c0e:	3301      	adds	r3, #1
 8007c10:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8007c12:	bf00      	nop
      }
      break;
 8007c14:	e037      	b.n	8007c86 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	7c1b      	ldrb	r3, [r3, #16]
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d109      	bne.n	8007c32 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007c24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007c26:	f107 0208 	add.w	r2, r7, #8
 8007c2a:	4610      	mov	r0, r2
 8007c2c:	4798      	blx	r3
 8007c2e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007c30:	e029      	b.n	8007c86 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007c32:	6839      	ldr	r1, [r7, #0]
 8007c34:	6878      	ldr	r0, [r7, #4]
 8007c36:	f000 fa2a 	bl	800808e <USBD_CtlError>
        err++;
 8007c3a:	7afb      	ldrb	r3, [r7, #11]
 8007c3c:	3301      	adds	r3, #1
 8007c3e:	72fb      	strb	r3, [r7, #11]
      break;
 8007c40:	e021      	b.n	8007c86 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	7c1b      	ldrb	r3, [r3, #16]
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d10d      	bne.n	8007c66 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007c50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c52:	f107 0208 	add.w	r2, r7, #8
 8007c56:	4610      	mov	r0, r2
 8007c58:	4798      	blx	r3
 8007c5a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	3301      	adds	r3, #1
 8007c60:	2207      	movs	r2, #7
 8007c62:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007c64:	e00f      	b.n	8007c86 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007c66:	6839      	ldr	r1, [r7, #0]
 8007c68:	6878      	ldr	r0, [r7, #4]
 8007c6a:	f000 fa10 	bl	800808e <USBD_CtlError>
        err++;
 8007c6e:	7afb      	ldrb	r3, [r7, #11]
 8007c70:	3301      	adds	r3, #1
 8007c72:	72fb      	strb	r3, [r7, #11]
      break;
 8007c74:	e007      	b.n	8007c86 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007c76:	6839      	ldr	r1, [r7, #0]
 8007c78:	6878      	ldr	r0, [r7, #4]
 8007c7a:	f000 fa08 	bl	800808e <USBD_CtlError>
      err++;
 8007c7e:	7afb      	ldrb	r3, [r7, #11]
 8007c80:	3301      	adds	r3, #1
 8007c82:	72fb      	strb	r3, [r7, #11]
      break;
 8007c84:	bf00      	nop
  }

  if (err != 0U)
 8007c86:	7afb      	ldrb	r3, [r7, #11]
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d11e      	bne.n	8007cca <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8007c8c:	683b      	ldr	r3, [r7, #0]
 8007c8e:	88db      	ldrh	r3, [r3, #6]
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d016      	beq.n	8007cc2 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8007c94:	893b      	ldrh	r3, [r7, #8]
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d00e      	beq.n	8007cb8 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8007c9a:	683b      	ldr	r3, [r7, #0]
 8007c9c:	88da      	ldrh	r2, [r3, #6]
 8007c9e:	893b      	ldrh	r3, [r7, #8]
 8007ca0:	4293      	cmp	r3, r2
 8007ca2:	bf28      	it	cs
 8007ca4:	4613      	movcs	r3, r2
 8007ca6:	b29b      	uxth	r3, r3
 8007ca8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007caa:	893b      	ldrh	r3, [r7, #8]
 8007cac:	461a      	mov	r2, r3
 8007cae:	68f9      	ldr	r1, [r7, #12]
 8007cb0:	6878      	ldr	r0, [r7, #4]
 8007cb2:	f000 fa69 	bl	8008188 <USBD_CtlSendData>
 8007cb6:	e009      	b.n	8007ccc <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007cb8:	6839      	ldr	r1, [r7, #0]
 8007cba:	6878      	ldr	r0, [r7, #4]
 8007cbc:	f000 f9e7 	bl	800808e <USBD_CtlError>
 8007cc0:	e004      	b.n	8007ccc <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8007cc2:	6878      	ldr	r0, [r7, #4]
 8007cc4:	f000 faa0 	bl	8008208 <USBD_CtlSendStatus>
 8007cc8:	e000      	b.n	8007ccc <USBD_GetDescriptor+0x2cc>
    return;
 8007cca:	bf00      	nop
  }
}
 8007ccc:	3710      	adds	r7, #16
 8007cce:	46bd      	mov	sp, r7
 8007cd0:	bd80      	pop	{r7, pc}
 8007cd2:	bf00      	nop

08007cd4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007cd4:	b580      	push	{r7, lr}
 8007cd6:	b084      	sub	sp, #16
 8007cd8:	af00      	add	r7, sp, #0
 8007cda:	6078      	str	r0, [r7, #4]
 8007cdc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007cde:	683b      	ldr	r3, [r7, #0]
 8007ce0:	889b      	ldrh	r3, [r3, #4]
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d131      	bne.n	8007d4a <USBD_SetAddress+0x76>
 8007ce6:	683b      	ldr	r3, [r7, #0]
 8007ce8:	88db      	ldrh	r3, [r3, #6]
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d12d      	bne.n	8007d4a <USBD_SetAddress+0x76>
 8007cee:	683b      	ldr	r3, [r7, #0]
 8007cf0:	885b      	ldrh	r3, [r3, #2]
 8007cf2:	2b7f      	cmp	r3, #127	@ 0x7f
 8007cf4:	d829      	bhi.n	8007d4a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007cf6:	683b      	ldr	r3, [r7, #0]
 8007cf8:	885b      	ldrh	r3, [r3, #2]
 8007cfa:	b2db      	uxtb	r3, r3
 8007cfc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007d00:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007d08:	b2db      	uxtb	r3, r3
 8007d0a:	2b03      	cmp	r3, #3
 8007d0c:	d104      	bne.n	8007d18 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8007d0e:	6839      	ldr	r1, [r7, #0]
 8007d10:	6878      	ldr	r0, [r7, #4]
 8007d12:	f000 f9bc 	bl	800808e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d16:	e01d      	b.n	8007d54 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	7bfa      	ldrb	r2, [r7, #15]
 8007d1c:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007d20:	7bfb      	ldrb	r3, [r7, #15]
 8007d22:	4619      	mov	r1, r3
 8007d24:	6878      	ldr	r0, [r7, #4]
 8007d26:	f000 fe35 	bl	8008994 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007d2a:	6878      	ldr	r0, [r7, #4]
 8007d2c:	f000 fa6c 	bl	8008208 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007d30:	7bfb      	ldrb	r3, [r7, #15]
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d004      	beq.n	8007d40 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	2202      	movs	r2, #2
 8007d3a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d3e:	e009      	b.n	8007d54 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	2201      	movs	r2, #1
 8007d44:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d48:	e004      	b.n	8007d54 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007d4a:	6839      	ldr	r1, [r7, #0]
 8007d4c:	6878      	ldr	r0, [r7, #4]
 8007d4e:	f000 f99e 	bl	800808e <USBD_CtlError>
  }
}
 8007d52:	bf00      	nop
 8007d54:	bf00      	nop
 8007d56:	3710      	adds	r7, #16
 8007d58:	46bd      	mov	sp, r7
 8007d5a:	bd80      	pop	{r7, pc}

08007d5c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007d5c:	b580      	push	{r7, lr}
 8007d5e:	b084      	sub	sp, #16
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	6078      	str	r0, [r7, #4]
 8007d64:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007d66:	2300      	movs	r3, #0
 8007d68:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007d6a:	683b      	ldr	r3, [r7, #0]
 8007d6c:	885b      	ldrh	r3, [r3, #2]
 8007d6e:	b2da      	uxtb	r2, r3
 8007d70:	4b4e      	ldr	r3, [pc, #312]	@ (8007eac <USBD_SetConfig+0x150>)
 8007d72:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007d74:	4b4d      	ldr	r3, [pc, #308]	@ (8007eac <USBD_SetConfig+0x150>)
 8007d76:	781b      	ldrb	r3, [r3, #0]
 8007d78:	2b01      	cmp	r3, #1
 8007d7a:	d905      	bls.n	8007d88 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007d7c:	6839      	ldr	r1, [r7, #0]
 8007d7e:	6878      	ldr	r0, [r7, #4]
 8007d80:	f000 f985 	bl	800808e <USBD_CtlError>
    return USBD_FAIL;
 8007d84:	2303      	movs	r3, #3
 8007d86:	e08c      	b.n	8007ea2 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007d8e:	b2db      	uxtb	r3, r3
 8007d90:	2b02      	cmp	r3, #2
 8007d92:	d002      	beq.n	8007d9a <USBD_SetConfig+0x3e>
 8007d94:	2b03      	cmp	r3, #3
 8007d96:	d029      	beq.n	8007dec <USBD_SetConfig+0x90>
 8007d98:	e075      	b.n	8007e86 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8007d9a:	4b44      	ldr	r3, [pc, #272]	@ (8007eac <USBD_SetConfig+0x150>)
 8007d9c:	781b      	ldrb	r3, [r3, #0]
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d020      	beq.n	8007de4 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8007da2:	4b42      	ldr	r3, [pc, #264]	@ (8007eac <USBD_SetConfig+0x150>)
 8007da4:	781b      	ldrb	r3, [r3, #0]
 8007da6:	461a      	mov	r2, r3
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007dac:	4b3f      	ldr	r3, [pc, #252]	@ (8007eac <USBD_SetConfig+0x150>)
 8007dae:	781b      	ldrb	r3, [r3, #0]
 8007db0:	4619      	mov	r1, r3
 8007db2:	6878      	ldr	r0, [r7, #4]
 8007db4:	f7fe ffcd 	bl	8006d52 <USBD_SetClassConfig>
 8007db8:	4603      	mov	r3, r0
 8007dba:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007dbc:	7bfb      	ldrb	r3, [r7, #15]
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d008      	beq.n	8007dd4 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8007dc2:	6839      	ldr	r1, [r7, #0]
 8007dc4:	6878      	ldr	r0, [r7, #4]
 8007dc6:	f000 f962 	bl	800808e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	2202      	movs	r2, #2
 8007dce:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007dd2:	e065      	b.n	8007ea0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007dd4:	6878      	ldr	r0, [r7, #4]
 8007dd6:	f000 fa17 	bl	8008208 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	2203      	movs	r2, #3
 8007dde:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8007de2:	e05d      	b.n	8007ea0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007de4:	6878      	ldr	r0, [r7, #4]
 8007de6:	f000 fa0f 	bl	8008208 <USBD_CtlSendStatus>
      break;
 8007dea:	e059      	b.n	8007ea0 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007dec:	4b2f      	ldr	r3, [pc, #188]	@ (8007eac <USBD_SetConfig+0x150>)
 8007dee:	781b      	ldrb	r3, [r3, #0]
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d112      	bne.n	8007e1a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	2202      	movs	r2, #2
 8007df8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8007dfc:	4b2b      	ldr	r3, [pc, #172]	@ (8007eac <USBD_SetConfig+0x150>)
 8007dfe:	781b      	ldrb	r3, [r3, #0]
 8007e00:	461a      	mov	r2, r3
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007e06:	4b29      	ldr	r3, [pc, #164]	@ (8007eac <USBD_SetConfig+0x150>)
 8007e08:	781b      	ldrb	r3, [r3, #0]
 8007e0a:	4619      	mov	r1, r3
 8007e0c:	6878      	ldr	r0, [r7, #4]
 8007e0e:	f7fe ffbc 	bl	8006d8a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8007e12:	6878      	ldr	r0, [r7, #4]
 8007e14:	f000 f9f8 	bl	8008208 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007e18:	e042      	b.n	8007ea0 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8007e1a:	4b24      	ldr	r3, [pc, #144]	@ (8007eac <USBD_SetConfig+0x150>)
 8007e1c:	781b      	ldrb	r3, [r3, #0]
 8007e1e:	461a      	mov	r2, r3
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	685b      	ldr	r3, [r3, #4]
 8007e24:	429a      	cmp	r2, r3
 8007e26:	d02a      	beq.n	8007e7e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	685b      	ldr	r3, [r3, #4]
 8007e2c:	b2db      	uxtb	r3, r3
 8007e2e:	4619      	mov	r1, r3
 8007e30:	6878      	ldr	r0, [r7, #4]
 8007e32:	f7fe ffaa 	bl	8006d8a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007e36:	4b1d      	ldr	r3, [pc, #116]	@ (8007eac <USBD_SetConfig+0x150>)
 8007e38:	781b      	ldrb	r3, [r3, #0]
 8007e3a:	461a      	mov	r2, r3
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007e40:	4b1a      	ldr	r3, [pc, #104]	@ (8007eac <USBD_SetConfig+0x150>)
 8007e42:	781b      	ldrb	r3, [r3, #0]
 8007e44:	4619      	mov	r1, r3
 8007e46:	6878      	ldr	r0, [r7, #4]
 8007e48:	f7fe ff83 	bl	8006d52 <USBD_SetClassConfig>
 8007e4c:	4603      	mov	r3, r0
 8007e4e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007e50:	7bfb      	ldrb	r3, [r7, #15]
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d00f      	beq.n	8007e76 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8007e56:	6839      	ldr	r1, [r7, #0]
 8007e58:	6878      	ldr	r0, [r7, #4]
 8007e5a:	f000 f918 	bl	800808e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	685b      	ldr	r3, [r3, #4]
 8007e62:	b2db      	uxtb	r3, r3
 8007e64:	4619      	mov	r1, r3
 8007e66:	6878      	ldr	r0, [r7, #4]
 8007e68:	f7fe ff8f 	bl	8006d8a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	2202      	movs	r2, #2
 8007e70:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8007e74:	e014      	b.n	8007ea0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007e76:	6878      	ldr	r0, [r7, #4]
 8007e78:	f000 f9c6 	bl	8008208 <USBD_CtlSendStatus>
      break;
 8007e7c:	e010      	b.n	8007ea0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007e7e:	6878      	ldr	r0, [r7, #4]
 8007e80:	f000 f9c2 	bl	8008208 <USBD_CtlSendStatus>
      break;
 8007e84:	e00c      	b.n	8007ea0 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8007e86:	6839      	ldr	r1, [r7, #0]
 8007e88:	6878      	ldr	r0, [r7, #4]
 8007e8a:	f000 f900 	bl	800808e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007e8e:	4b07      	ldr	r3, [pc, #28]	@ (8007eac <USBD_SetConfig+0x150>)
 8007e90:	781b      	ldrb	r3, [r3, #0]
 8007e92:	4619      	mov	r1, r3
 8007e94:	6878      	ldr	r0, [r7, #4]
 8007e96:	f7fe ff78 	bl	8006d8a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8007e9a:	2303      	movs	r3, #3
 8007e9c:	73fb      	strb	r3, [r7, #15]
      break;
 8007e9e:	bf00      	nop
  }

  return ret;
 8007ea0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ea2:	4618      	mov	r0, r3
 8007ea4:	3710      	adds	r7, #16
 8007ea6:	46bd      	mov	sp, r7
 8007ea8:	bd80      	pop	{r7, pc}
 8007eaa:	bf00      	nop
 8007eac:	20000460 	.word	0x20000460

08007eb0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007eb0:	b580      	push	{r7, lr}
 8007eb2:	b082      	sub	sp, #8
 8007eb4:	af00      	add	r7, sp, #0
 8007eb6:	6078      	str	r0, [r7, #4]
 8007eb8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007eba:	683b      	ldr	r3, [r7, #0]
 8007ebc:	88db      	ldrh	r3, [r3, #6]
 8007ebe:	2b01      	cmp	r3, #1
 8007ec0:	d004      	beq.n	8007ecc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007ec2:	6839      	ldr	r1, [r7, #0]
 8007ec4:	6878      	ldr	r0, [r7, #4]
 8007ec6:	f000 f8e2 	bl	800808e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007eca:	e023      	b.n	8007f14 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007ed2:	b2db      	uxtb	r3, r3
 8007ed4:	2b02      	cmp	r3, #2
 8007ed6:	dc02      	bgt.n	8007ede <USBD_GetConfig+0x2e>
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	dc03      	bgt.n	8007ee4 <USBD_GetConfig+0x34>
 8007edc:	e015      	b.n	8007f0a <USBD_GetConfig+0x5a>
 8007ede:	2b03      	cmp	r3, #3
 8007ee0:	d00b      	beq.n	8007efa <USBD_GetConfig+0x4a>
 8007ee2:	e012      	b.n	8007f0a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	2200      	movs	r2, #0
 8007ee8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	3308      	adds	r3, #8
 8007eee:	2201      	movs	r2, #1
 8007ef0:	4619      	mov	r1, r3
 8007ef2:	6878      	ldr	r0, [r7, #4]
 8007ef4:	f000 f948 	bl	8008188 <USBD_CtlSendData>
        break;
 8007ef8:	e00c      	b.n	8007f14 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	3304      	adds	r3, #4
 8007efe:	2201      	movs	r2, #1
 8007f00:	4619      	mov	r1, r3
 8007f02:	6878      	ldr	r0, [r7, #4]
 8007f04:	f000 f940 	bl	8008188 <USBD_CtlSendData>
        break;
 8007f08:	e004      	b.n	8007f14 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8007f0a:	6839      	ldr	r1, [r7, #0]
 8007f0c:	6878      	ldr	r0, [r7, #4]
 8007f0e:	f000 f8be 	bl	800808e <USBD_CtlError>
        break;
 8007f12:	bf00      	nop
}
 8007f14:	bf00      	nop
 8007f16:	3708      	adds	r7, #8
 8007f18:	46bd      	mov	sp, r7
 8007f1a:	bd80      	pop	{r7, pc}

08007f1c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007f1c:	b580      	push	{r7, lr}
 8007f1e:	b082      	sub	sp, #8
 8007f20:	af00      	add	r7, sp, #0
 8007f22:	6078      	str	r0, [r7, #4]
 8007f24:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007f2c:	b2db      	uxtb	r3, r3
 8007f2e:	3b01      	subs	r3, #1
 8007f30:	2b02      	cmp	r3, #2
 8007f32:	d81e      	bhi.n	8007f72 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007f34:	683b      	ldr	r3, [r7, #0]
 8007f36:	88db      	ldrh	r3, [r3, #6]
 8007f38:	2b02      	cmp	r3, #2
 8007f3a:	d004      	beq.n	8007f46 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007f3c:	6839      	ldr	r1, [r7, #0]
 8007f3e:	6878      	ldr	r0, [r7, #4]
 8007f40:	f000 f8a5 	bl	800808e <USBD_CtlError>
        break;
 8007f44:	e01a      	b.n	8007f7c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	2201      	movs	r2, #1
 8007f4a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d005      	beq.n	8007f62 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	68db      	ldr	r3, [r3, #12]
 8007f5a:	f043 0202 	orr.w	r2, r3, #2
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	330c      	adds	r3, #12
 8007f66:	2202      	movs	r2, #2
 8007f68:	4619      	mov	r1, r3
 8007f6a:	6878      	ldr	r0, [r7, #4]
 8007f6c:	f000 f90c 	bl	8008188 <USBD_CtlSendData>
      break;
 8007f70:	e004      	b.n	8007f7c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8007f72:	6839      	ldr	r1, [r7, #0]
 8007f74:	6878      	ldr	r0, [r7, #4]
 8007f76:	f000 f88a 	bl	800808e <USBD_CtlError>
      break;
 8007f7a:	bf00      	nop
  }
}
 8007f7c:	bf00      	nop
 8007f7e:	3708      	adds	r7, #8
 8007f80:	46bd      	mov	sp, r7
 8007f82:	bd80      	pop	{r7, pc}

08007f84 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007f84:	b580      	push	{r7, lr}
 8007f86:	b082      	sub	sp, #8
 8007f88:	af00      	add	r7, sp, #0
 8007f8a:	6078      	str	r0, [r7, #4]
 8007f8c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007f8e:	683b      	ldr	r3, [r7, #0]
 8007f90:	885b      	ldrh	r3, [r3, #2]
 8007f92:	2b01      	cmp	r3, #1
 8007f94:	d107      	bne.n	8007fa6 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	2201      	movs	r2, #1
 8007f9a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007f9e:	6878      	ldr	r0, [r7, #4]
 8007fa0:	f000 f932 	bl	8008208 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8007fa4:	e013      	b.n	8007fce <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8007fa6:	683b      	ldr	r3, [r7, #0]
 8007fa8:	885b      	ldrh	r3, [r3, #2]
 8007faa:	2b02      	cmp	r3, #2
 8007fac:	d10b      	bne.n	8007fc6 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8007fae:	683b      	ldr	r3, [r7, #0]
 8007fb0:	889b      	ldrh	r3, [r3, #4]
 8007fb2:	0a1b      	lsrs	r3, r3, #8
 8007fb4:	b29b      	uxth	r3, r3
 8007fb6:	b2da      	uxtb	r2, r3
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8007fbe:	6878      	ldr	r0, [r7, #4]
 8007fc0:	f000 f922 	bl	8008208 <USBD_CtlSendStatus>
}
 8007fc4:	e003      	b.n	8007fce <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8007fc6:	6839      	ldr	r1, [r7, #0]
 8007fc8:	6878      	ldr	r0, [r7, #4]
 8007fca:	f000 f860 	bl	800808e <USBD_CtlError>
}
 8007fce:	bf00      	nop
 8007fd0:	3708      	adds	r7, #8
 8007fd2:	46bd      	mov	sp, r7
 8007fd4:	bd80      	pop	{r7, pc}

08007fd6 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007fd6:	b580      	push	{r7, lr}
 8007fd8:	b082      	sub	sp, #8
 8007fda:	af00      	add	r7, sp, #0
 8007fdc:	6078      	str	r0, [r7, #4]
 8007fde:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007fe6:	b2db      	uxtb	r3, r3
 8007fe8:	3b01      	subs	r3, #1
 8007fea:	2b02      	cmp	r3, #2
 8007fec:	d80b      	bhi.n	8008006 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007fee:	683b      	ldr	r3, [r7, #0]
 8007ff0:	885b      	ldrh	r3, [r3, #2]
 8007ff2:	2b01      	cmp	r3, #1
 8007ff4:	d10c      	bne.n	8008010 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	2200      	movs	r2, #0
 8007ffa:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007ffe:	6878      	ldr	r0, [r7, #4]
 8008000:	f000 f902 	bl	8008208 <USBD_CtlSendStatus>
      }
      break;
 8008004:	e004      	b.n	8008010 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8008006:	6839      	ldr	r1, [r7, #0]
 8008008:	6878      	ldr	r0, [r7, #4]
 800800a:	f000 f840 	bl	800808e <USBD_CtlError>
      break;
 800800e:	e000      	b.n	8008012 <USBD_ClrFeature+0x3c>
      break;
 8008010:	bf00      	nop
  }
}
 8008012:	bf00      	nop
 8008014:	3708      	adds	r7, #8
 8008016:	46bd      	mov	sp, r7
 8008018:	bd80      	pop	{r7, pc}

0800801a <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800801a:	b580      	push	{r7, lr}
 800801c:	b084      	sub	sp, #16
 800801e:	af00      	add	r7, sp, #0
 8008020:	6078      	str	r0, [r7, #4]
 8008022:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008024:	683b      	ldr	r3, [r7, #0]
 8008026:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	781a      	ldrb	r2, [r3, #0]
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	3301      	adds	r3, #1
 8008034:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	781a      	ldrb	r2, [r3, #0]
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	3301      	adds	r3, #1
 8008042:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008044:	68f8      	ldr	r0, [r7, #12]
 8008046:	f7ff fa3d 	bl	80074c4 <SWAPBYTE>
 800804a:	4603      	mov	r3, r0
 800804c:	461a      	mov	r2, r3
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	3301      	adds	r3, #1
 8008056:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	3301      	adds	r3, #1
 800805c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800805e:	68f8      	ldr	r0, [r7, #12]
 8008060:	f7ff fa30 	bl	80074c4 <SWAPBYTE>
 8008064:	4603      	mov	r3, r0
 8008066:	461a      	mov	r2, r3
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	3301      	adds	r3, #1
 8008070:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	3301      	adds	r3, #1
 8008076:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008078:	68f8      	ldr	r0, [r7, #12]
 800807a:	f7ff fa23 	bl	80074c4 <SWAPBYTE>
 800807e:	4603      	mov	r3, r0
 8008080:	461a      	mov	r2, r3
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	80da      	strh	r2, [r3, #6]
}
 8008086:	bf00      	nop
 8008088:	3710      	adds	r7, #16
 800808a:	46bd      	mov	sp, r7
 800808c:	bd80      	pop	{r7, pc}

0800808e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800808e:	b580      	push	{r7, lr}
 8008090:	b082      	sub	sp, #8
 8008092:	af00      	add	r7, sp, #0
 8008094:	6078      	str	r0, [r7, #4]
 8008096:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008098:	2180      	movs	r1, #128	@ 0x80
 800809a:	6878      	ldr	r0, [r7, #4]
 800809c:	f000 fc10 	bl	80088c0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80080a0:	2100      	movs	r1, #0
 80080a2:	6878      	ldr	r0, [r7, #4]
 80080a4:	f000 fc0c 	bl	80088c0 <USBD_LL_StallEP>
}
 80080a8:	bf00      	nop
 80080aa:	3708      	adds	r7, #8
 80080ac:	46bd      	mov	sp, r7
 80080ae:	bd80      	pop	{r7, pc}

080080b0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80080b0:	b580      	push	{r7, lr}
 80080b2:	b086      	sub	sp, #24
 80080b4:	af00      	add	r7, sp, #0
 80080b6:	60f8      	str	r0, [r7, #12]
 80080b8:	60b9      	str	r1, [r7, #8]
 80080ba:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80080bc:	2300      	movs	r3, #0
 80080be:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d042      	beq.n	800814c <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 80080ca:	6938      	ldr	r0, [r7, #16]
 80080cc:	f000 f842 	bl	8008154 <USBD_GetLen>
 80080d0:	4603      	mov	r3, r0
 80080d2:	3301      	adds	r3, #1
 80080d4:	005b      	lsls	r3, r3, #1
 80080d6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80080da:	d808      	bhi.n	80080ee <USBD_GetString+0x3e>
 80080dc:	6938      	ldr	r0, [r7, #16]
 80080de:	f000 f839 	bl	8008154 <USBD_GetLen>
 80080e2:	4603      	mov	r3, r0
 80080e4:	3301      	adds	r3, #1
 80080e6:	b29b      	uxth	r3, r3
 80080e8:	005b      	lsls	r3, r3, #1
 80080ea:	b29a      	uxth	r2, r3
 80080ec:	e001      	b.n	80080f2 <USBD_GetString+0x42>
 80080ee:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80080f6:	7dfb      	ldrb	r3, [r7, #23]
 80080f8:	68ba      	ldr	r2, [r7, #8]
 80080fa:	4413      	add	r3, r2
 80080fc:	687a      	ldr	r2, [r7, #4]
 80080fe:	7812      	ldrb	r2, [r2, #0]
 8008100:	701a      	strb	r2, [r3, #0]
  idx++;
 8008102:	7dfb      	ldrb	r3, [r7, #23]
 8008104:	3301      	adds	r3, #1
 8008106:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008108:	7dfb      	ldrb	r3, [r7, #23]
 800810a:	68ba      	ldr	r2, [r7, #8]
 800810c:	4413      	add	r3, r2
 800810e:	2203      	movs	r2, #3
 8008110:	701a      	strb	r2, [r3, #0]
  idx++;
 8008112:	7dfb      	ldrb	r3, [r7, #23]
 8008114:	3301      	adds	r3, #1
 8008116:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008118:	e013      	b.n	8008142 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800811a:	7dfb      	ldrb	r3, [r7, #23]
 800811c:	68ba      	ldr	r2, [r7, #8]
 800811e:	4413      	add	r3, r2
 8008120:	693a      	ldr	r2, [r7, #16]
 8008122:	7812      	ldrb	r2, [r2, #0]
 8008124:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008126:	693b      	ldr	r3, [r7, #16]
 8008128:	3301      	adds	r3, #1
 800812a:	613b      	str	r3, [r7, #16]
    idx++;
 800812c:	7dfb      	ldrb	r3, [r7, #23]
 800812e:	3301      	adds	r3, #1
 8008130:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008132:	7dfb      	ldrb	r3, [r7, #23]
 8008134:	68ba      	ldr	r2, [r7, #8]
 8008136:	4413      	add	r3, r2
 8008138:	2200      	movs	r2, #0
 800813a:	701a      	strb	r2, [r3, #0]
    idx++;
 800813c:	7dfb      	ldrb	r3, [r7, #23]
 800813e:	3301      	adds	r3, #1
 8008140:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008142:	693b      	ldr	r3, [r7, #16]
 8008144:	781b      	ldrb	r3, [r3, #0]
 8008146:	2b00      	cmp	r3, #0
 8008148:	d1e7      	bne.n	800811a <USBD_GetString+0x6a>
 800814a:	e000      	b.n	800814e <USBD_GetString+0x9e>
    return;
 800814c:	bf00      	nop
  }
}
 800814e:	3718      	adds	r7, #24
 8008150:	46bd      	mov	sp, r7
 8008152:	bd80      	pop	{r7, pc}

08008154 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008154:	b480      	push	{r7}
 8008156:	b085      	sub	sp, #20
 8008158:	af00      	add	r7, sp, #0
 800815a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800815c:	2300      	movs	r3, #0
 800815e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008164:	e005      	b.n	8008172 <USBD_GetLen+0x1e>
  {
    len++;
 8008166:	7bfb      	ldrb	r3, [r7, #15]
 8008168:	3301      	adds	r3, #1
 800816a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800816c:	68bb      	ldr	r3, [r7, #8]
 800816e:	3301      	adds	r3, #1
 8008170:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008172:	68bb      	ldr	r3, [r7, #8]
 8008174:	781b      	ldrb	r3, [r3, #0]
 8008176:	2b00      	cmp	r3, #0
 8008178:	d1f5      	bne.n	8008166 <USBD_GetLen+0x12>
  }

  return len;
 800817a:	7bfb      	ldrb	r3, [r7, #15]
}
 800817c:	4618      	mov	r0, r3
 800817e:	3714      	adds	r7, #20
 8008180:	46bd      	mov	sp, r7
 8008182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008186:	4770      	bx	lr

08008188 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008188:	b580      	push	{r7, lr}
 800818a:	b084      	sub	sp, #16
 800818c:	af00      	add	r7, sp, #0
 800818e:	60f8      	str	r0, [r7, #12]
 8008190:	60b9      	str	r1, [r7, #8]
 8008192:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	2202      	movs	r2, #2
 8008198:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	687a      	ldr	r2, [r7, #4]
 80081a0:	615a      	str	r2, [r3, #20]
  pdev->ep_in[0].pbuffer = pbuf;
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	68ba      	ldr	r2, [r7, #8]
 80081a6:	625a      	str	r2, [r3, #36]	@ 0x24

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	687a      	ldr	r2, [r7, #4]
 80081ac:	619a      	str	r2, [r3, #24]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	68ba      	ldr	r2, [r7, #8]
 80081b2:	2100      	movs	r1, #0
 80081b4:	68f8      	ldr	r0, [r7, #12]
 80081b6:	f000 fc0c 	bl	80089d2 <USBD_LL_Transmit>

  return USBD_OK;
 80081ba:	2300      	movs	r3, #0
}
 80081bc:	4618      	mov	r0, r3
 80081be:	3710      	adds	r7, #16
 80081c0:	46bd      	mov	sp, r7
 80081c2:	bd80      	pop	{r7, pc}

080081c4 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80081c4:	b580      	push	{r7, lr}
 80081c6:	b084      	sub	sp, #16
 80081c8:	af00      	add	r7, sp, #0
 80081ca:	60f8      	str	r0, [r7, #12]
 80081cc:	60b9      	str	r1, [r7, #8]
 80081ce:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	68ba      	ldr	r2, [r7, #8]
 80081d4:	2100      	movs	r1, #0
 80081d6:	68f8      	ldr	r0, [r7, #12]
 80081d8:	f000 fbfb 	bl	80089d2 <USBD_LL_Transmit>

  return USBD_OK;
 80081dc:	2300      	movs	r3, #0
}
 80081de:	4618      	mov	r0, r3
 80081e0:	3710      	adds	r7, #16
 80081e2:	46bd      	mov	sp, r7
 80081e4:	bd80      	pop	{r7, pc}

080081e6 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80081e6:	b580      	push	{r7, lr}
 80081e8:	b084      	sub	sp, #16
 80081ea:	af00      	add	r7, sp, #0
 80081ec:	60f8      	str	r0, [r7, #12]
 80081ee:	60b9      	str	r1, [r7, #8]
 80081f0:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	68ba      	ldr	r2, [r7, #8]
 80081f6:	2100      	movs	r1, #0
 80081f8:	68f8      	ldr	r0, [r7, #12]
 80081fa:	f000 fc0b 	bl	8008a14 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80081fe:	2300      	movs	r3, #0
}
 8008200:	4618      	mov	r0, r3
 8008202:	3710      	adds	r7, #16
 8008204:	46bd      	mov	sp, r7
 8008206:	bd80      	pop	{r7, pc}

08008208 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008208:	b580      	push	{r7, lr}
 800820a:	b082      	sub	sp, #8
 800820c:	af00      	add	r7, sp, #0
 800820e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	2204      	movs	r2, #4
 8008214:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008218:	2300      	movs	r3, #0
 800821a:	2200      	movs	r2, #0
 800821c:	2100      	movs	r1, #0
 800821e:	6878      	ldr	r0, [r7, #4]
 8008220:	f000 fbd7 	bl	80089d2 <USBD_LL_Transmit>

  return USBD_OK;
 8008224:	2300      	movs	r3, #0
}
 8008226:	4618      	mov	r0, r3
 8008228:	3708      	adds	r7, #8
 800822a:	46bd      	mov	sp, r7
 800822c:	bd80      	pop	{r7, pc}

0800822e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800822e:	b580      	push	{r7, lr}
 8008230:	b082      	sub	sp, #8
 8008232:	af00      	add	r7, sp, #0
 8008234:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	2205      	movs	r2, #5
 800823a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800823e:	2300      	movs	r3, #0
 8008240:	2200      	movs	r2, #0
 8008242:	2100      	movs	r1, #0
 8008244:	6878      	ldr	r0, [r7, #4]
 8008246:	f000 fbe5 	bl	8008a14 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800824a:	2300      	movs	r3, #0
}
 800824c:	4618      	mov	r0, r3
 800824e:	3708      	adds	r7, #8
 8008250:	46bd      	mov	sp, r7
 8008252:	bd80      	pop	{r7, pc}

08008254 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008254:	b580      	push	{r7, lr}
 8008256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008258:	2200      	movs	r2, #0
 800825a:	490e      	ldr	r1, [pc, #56]	@ (8008294 <MX_USB_DEVICE_Init+0x40>)
 800825c:	480e      	ldr	r0, [pc, #56]	@ (8008298 <MX_USB_DEVICE_Init+0x44>)
 800825e:	f7fe fcfb 	bl	8006c58 <USBD_Init>
 8008262:	4603      	mov	r3, r0
 8008264:	2b00      	cmp	r3, #0
 8008266:	d001      	beq.n	800826c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008268:	f7f9 fb12 	bl	8001890 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 800826c:	490b      	ldr	r1, [pc, #44]	@ (800829c <MX_USB_DEVICE_Init+0x48>)
 800826e:	480a      	ldr	r0, [pc, #40]	@ (8008298 <MX_USB_DEVICE_Init+0x44>)
 8008270:	f7fe fd22 	bl	8006cb8 <USBD_RegisterClass>
 8008274:	4603      	mov	r3, r0
 8008276:	2b00      	cmp	r3, #0
 8008278:	d001      	beq.n	800827e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800827a:	f7f9 fb09 	bl	8001890 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800827e:	4806      	ldr	r0, [pc, #24]	@ (8008298 <MX_USB_DEVICE_Init+0x44>)
 8008280:	f7fe fd50 	bl	8006d24 <USBD_Start>
 8008284:	4603      	mov	r3, r0
 8008286:	2b00      	cmp	r3, #0
 8008288:	d001      	beq.n	800828e <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 800828a:	f7f9 fb01 	bl	8001890 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800828e:	bf00      	nop
 8008290:	bd80      	pop	{r7, pc}
 8008292:	bf00      	nop
 8008294:	200000cc 	.word	0x200000cc
 8008298:	20000464 	.word	0x20000464
 800829c:	2000000c 	.word	0x2000000c

080082a0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80082a0:	b480      	push	{r7}
 80082a2:	b083      	sub	sp, #12
 80082a4:	af00      	add	r7, sp, #0
 80082a6:	4603      	mov	r3, r0
 80082a8:	6039      	str	r1, [r7, #0]
 80082aa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80082ac:	683b      	ldr	r3, [r7, #0]
 80082ae:	2212      	movs	r2, #18
 80082b0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80082b2:	4b03      	ldr	r3, [pc, #12]	@ (80082c0 <USBD_FS_DeviceDescriptor+0x20>)
}
 80082b4:	4618      	mov	r0, r3
 80082b6:	370c      	adds	r7, #12
 80082b8:	46bd      	mov	sp, r7
 80082ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082be:	4770      	bx	lr
 80082c0:	200000e8 	.word	0x200000e8

080082c4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80082c4:	b480      	push	{r7}
 80082c6:	b083      	sub	sp, #12
 80082c8:	af00      	add	r7, sp, #0
 80082ca:	4603      	mov	r3, r0
 80082cc:	6039      	str	r1, [r7, #0]
 80082ce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80082d0:	683b      	ldr	r3, [r7, #0]
 80082d2:	2204      	movs	r2, #4
 80082d4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80082d6:	4b03      	ldr	r3, [pc, #12]	@ (80082e4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80082d8:	4618      	mov	r0, r3
 80082da:	370c      	adds	r7, #12
 80082dc:	46bd      	mov	sp, r7
 80082de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e2:	4770      	bx	lr
 80082e4:	200000fc 	.word	0x200000fc

080082e8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80082e8:	b580      	push	{r7, lr}
 80082ea:	b082      	sub	sp, #8
 80082ec:	af00      	add	r7, sp, #0
 80082ee:	4603      	mov	r3, r0
 80082f0:	6039      	str	r1, [r7, #0]
 80082f2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80082f4:	79fb      	ldrb	r3, [r7, #7]
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d105      	bne.n	8008306 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80082fa:	683a      	ldr	r2, [r7, #0]
 80082fc:	4907      	ldr	r1, [pc, #28]	@ (800831c <USBD_FS_ProductStrDescriptor+0x34>)
 80082fe:	4808      	ldr	r0, [pc, #32]	@ (8008320 <USBD_FS_ProductStrDescriptor+0x38>)
 8008300:	f7ff fed6 	bl	80080b0 <USBD_GetString>
 8008304:	e004      	b.n	8008310 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008306:	683a      	ldr	r2, [r7, #0]
 8008308:	4904      	ldr	r1, [pc, #16]	@ (800831c <USBD_FS_ProductStrDescriptor+0x34>)
 800830a:	4805      	ldr	r0, [pc, #20]	@ (8008320 <USBD_FS_ProductStrDescriptor+0x38>)
 800830c:	f7ff fed0 	bl	80080b0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008310:	4b02      	ldr	r3, [pc, #8]	@ (800831c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008312:	4618      	mov	r0, r3
 8008314:	3708      	adds	r7, #8
 8008316:	46bd      	mov	sp, r7
 8008318:	bd80      	pop	{r7, pc}
 800831a:	bf00      	nop
 800831c:	20000740 	.word	0x20000740
 8008320:	0800b3f8 	.word	0x0800b3f8

08008324 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008324:	b580      	push	{r7, lr}
 8008326:	b082      	sub	sp, #8
 8008328:	af00      	add	r7, sp, #0
 800832a:	4603      	mov	r3, r0
 800832c:	6039      	str	r1, [r7, #0]
 800832e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008330:	683a      	ldr	r2, [r7, #0]
 8008332:	4904      	ldr	r1, [pc, #16]	@ (8008344 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008334:	4804      	ldr	r0, [pc, #16]	@ (8008348 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008336:	f7ff febb 	bl	80080b0 <USBD_GetString>
  return USBD_StrDesc;
 800833a:	4b02      	ldr	r3, [pc, #8]	@ (8008344 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800833c:	4618      	mov	r0, r3
 800833e:	3708      	adds	r7, #8
 8008340:	46bd      	mov	sp, r7
 8008342:	bd80      	pop	{r7, pc}
 8008344:	20000740 	.word	0x20000740
 8008348:	0800b410 	.word	0x0800b410

0800834c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800834c:	b580      	push	{r7, lr}
 800834e:	b082      	sub	sp, #8
 8008350:	af00      	add	r7, sp, #0
 8008352:	4603      	mov	r3, r0
 8008354:	6039      	str	r1, [r7, #0]
 8008356:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008358:	683b      	ldr	r3, [r7, #0]
 800835a:	221a      	movs	r2, #26
 800835c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800835e:	f000 f843 	bl	80083e8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008362:	4b02      	ldr	r3, [pc, #8]	@ (800836c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008364:	4618      	mov	r0, r3
 8008366:	3708      	adds	r7, #8
 8008368:	46bd      	mov	sp, r7
 800836a:	bd80      	pop	{r7, pc}
 800836c:	20000100 	.word	0x20000100

08008370 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008370:	b580      	push	{r7, lr}
 8008372:	b082      	sub	sp, #8
 8008374:	af00      	add	r7, sp, #0
 8008376:	4603      	mov	r3, r0
 8008378:	6039      	str	r1, [r7, #0]
 800837a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800837c:	79fb      	ldrb	r3, [r7, #7]
 800837e:	2b00      	cmp	r3, #0
 8008380:	d105      	bne.n	800838e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008382:	683a      	ldr	r2, [r7, #0]
 8008384:	4907      	ldr	r1, [pc, #28]	@ (80083a4 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008386:	4808      	ldr	r0, [pc, #32]	@ (80083a8 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008388:	f7ff fe92 	bl	80080b0 <USBD_GetString>
 800838c:	e004      	b.n	8008398 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800838e:	683a      	ldr	r2, [r7, #0]
 8008390:	4904      	ldr	r1, [pc, #16]	@ (80083a4 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008392:	4805      	ldr	r0, [pc, #20]	@ (80083a8 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008394:	f7ff fe8c 	bl	80080b0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008398:	4b02      	ldr	r3, [pc, #8]	@ (80083a4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800839a:	4618      	mov	r0, r3
 800839c:	3708      	adds	r7, #8
 800839e:	46bd      	mov	sp, r7
 80083a0:	bd80      	pop	{r7, pc}
 80083a2:	bf00      	nop
 80083a4:	20000740 	.word	0x20000740
 80083a8:	0800b424 	.word	0x0800b424

080083ac <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80083ac:	b580      	push	{r7, lr}
 80083ae:	b082      	sub	sp, #8
 80083b0:	af00      	add	r7, sp, #0
 80083b2:	4603      	mov	r3, r0
 80083b4:	6039      	str	r1, [r7, #0]
 80083b6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80083b8:	79fb      	ldrb	r3, [r7, #7]
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d105      	bne.n	80083ca <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80083be:	683a      	ldr	r2, [r7, #0]
 80083c0:	4907      	ldr	r1, [pc, #28]	@ (80083e0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80083c2:	4808      	ldr	r0, [pc, #32]	@ (80083e4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80083c4:	f7ff fe74 	bl	80080b0 <USBD_GetString>
 80083c8:	e004      	b.n	80083d4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80083ca:	683a      	ldr	r2, [r7, #0]
 80083cc:	4904      	ldr	r1, [pc, #16]	@ (80083e0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80083ce:	4805      	ldr	r0, [pc, #20]	@ (80083e4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80083d0:	f7ff fe6e 	bl	80080b0 <USBD_GetString>
  }
  return USBD_StrDesc;
 80083d4:	4b02      	ldr	r3, [pc, #8]	@ (80083e0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80083d6:	4618      	mov	r0, r3
 80083d8:	3708      	adds	r7, #8
 80083da:	46bd      	mov	sp, r7
 80083dc:	bd80      	pop	{r7, pc}
 80083de:	bf00      	nop
 80083e0:	20000740 	.word	0x20000740
 80083e4:	0800b430 	.word	0x0800b430

080083e8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80083e8:	b580      	push	{r7, lr}
 80083ea:	b084      	sub	sp, #16
 80083ec:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80083ee:	4b0f      	ldr	r3, [pc, #60]	@ (800842c <Get_SerialNum+0x44>)
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80083f4:	4b0e      	ldr	r3, [pc, #56]	@ (8008430 <Get_SerialNum+0x48>)
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80083fa:	4b0e      	ldr	r3, [pc, #56]	@ (8008434 <Get_SerialNum+0x4c>)
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008400:	68fa      	ldr	r2, [r7, #12]
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	4413      	add	r3, r2
 8008406:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	2b00      	cmp	r3, #0
 800840c:	d009      	beq.n	8008422 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800840e:	2208      	movs	r2, #8
 8008410:	4909      	ldr	r1, [pc, #36]	@ (8008438 <Get_SerialNum+0x50>)
 8008412:	68f8      	ldr	r0, [r7, #12]
 8008414:	f000 f814 	bl	8008440 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008418:	2204      	movs	r2, #4
 800841a:	4908      	ldr	r1, [pc, #32]	@ (800843c <Get_SerialNum+0x54>)
 800841c:	68b8      	ldr	r0, [r7, #8]
 800841e:	f000 f80f 	bl	8008440 <IntToUnicode>
  }
}
 8008422:	bf00      	nop
 8008424:	3710      	adds	r7, #16
 8008426:	46bd      	mov	sp, r7
 8008428:	bd80      	pop	{r7, pc}
 800842a:	bf00      	nop
 800842c:	1fff7a10 	.word	0x1fff7a10
 8008430:	1fff7a14 	.word	0x1fff7a14
 8008434:	1fff7a18 	.word	0x1fff7a18
 8008438:	20000102 	.word	0x20000102
 800843c:	20000112 	.word	0x20000112

08008440 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008440:	b480      	push	{r7}
 8008442:	b087      	sub	sp, #28
 8008444:	af00      	add	r7, sp, #0
 8008446:	60f8      	str	r0, [r7, #12]
 8008448:	60b9      	str	r1, [r7, #8]
 800844a:	4613      	mov	r3, r2
 800844c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800844e:	2300      	movs	r3, #0
 8008450:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008452:	2300      	movs	r3, #0
 8008454:	75fb      	strb	r3, [r7, #23]
 8008456:	e027      	b.n	80084a8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	0f1b      	lsrs	r3, r3, #28
 800845c:	2b09      	cmp	r3, #9
 800845e:	d80b      	bhi.n	8008478 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	0f1b      	lsrs	r3, r3, #28
 8008464:	b2da      	uxtb	r2, r3
 8008466:	7dfb      	ldrb	r3, [r7, #23]
 8008468:	005b      	lsls	r3, r3, #1
 800846a:	4619      	mov	r1, r3
 800846c:	68bb      	ldr	r3, [r7, #8]
 800846e:	440b      	add	r3, r1
 8008470:	3230      	adds	r2, #48	@ 0x30
 8008472:	b2d2      	uxtb	r2, r2
 8008474:	701a      	strb	r2, [r3, #0]
 8008476:	e00a      	b.n	800848e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	0f1b      	lsrs	r3, r3, #28
 800847c:	b2da      	uxtb	r2, r3
 800847e:	7dfb      	ldrb	r3, [r7, #23]
 8008480:	005b      	lsls	r3, r3, #1
 8008482:	4619      	mov	r1, r3
 8008484:	68bb      	ldr	r3, [r7, #8]
 8008486:	440b      	add	r3, r1
 8008488:	3237      	adds	r2, #55	@ 0x37
 800848a:	b2d2      	uxtb	r2, r2
 800848c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	011b      	lsls	r3, r3, #4
 8008492:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008494:	7dfb      	ldrb	r3, [r7, #23]
 8008496:	005b      	lsls	r3, r3, #1
 8008498:	3301      	adds	r3, #1
 800849a:	68ba      	ldr	r2, [r7, #8]
 800849c:	4413      	add	r3, r2
 800849e:	2200      	movs	r2, #0
 80084a0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80084a2:	7dfb      	ldrb	r3, [r7, #23]
 80084a4:	3301      	adds	r3, #1
 80084a6:	75fb      	strb	r3, [r7, #23]
 80084a8:	7dfa      	ldrb	r2, [r7, #23]
 80084aa:	79fb      	ldrb	r3, [r7, #7]
 80084ac:	429a      	cmp	r2, r3
 80084ae:	d3d3      	bcc.n	8008458 <IntToUnicode+0x18>
  }
}
 80084b0:	bf00      	nop
 80084b2:	bf00      	nop
 80084b4:	371c      	adds	r7, #28
 80084b6:	46bd      	mov	sp, r7
 80084b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084bc:	4770      	bx	lr
	...

080084c0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80084c0:	b580      	push	{r7, lr}
 80084c2:	b08a      	sub	sp, #40	@ 0x28
 80084c4:	af00      	add	r7, sp, #0
 80084c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80084c8:	f107 0314 	add.w	r3, r7, #20
 80084cc:	2200      	movs	r2, #0
 80084ce:	601a      	str	r2, [r3, #0]
 80084d0:	605a      	str	r2, [r3, #4]
 80084d2:	609a      	str	r2, [r3, #8]
 80084d4:	60da      	str	r2, [r3, #12]
 80084d6:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80084e0:	d147      	bne.n	8008572 <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80084e2:	2300      	movs	r3, #0
 80084e4:	613b      	str	r3, [r7, #16]
 80084e6:	4b25      	ldr	r3, [pc, #148]	@ (800857c <HAL_PCD_MspInit+0xbc>)
 80084e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80084ea:	4a24      	ldr	r2, [pc, #144]	@ (800857c <HAL_PCD_MspInit+0xbc>)
 80084ec:	f043 0301 	orr.w	r3, r3, #1
 80084f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80084f2:	4b22      	ldr	r3, [pc, #136]	@ (800857c <HAL_PCD_MspInit+0xbc>)
 80084f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80084f6:	f003 0301 	and.w	r3, r3, #1
 80084fa:	613b      	str	r3, [r7, #16]
 80084fc:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80084fe:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008502:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008504:	2300      	movs	r3, #0
 8008506:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008508:	2300      	movs	r3, #0
 800850a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800850c:	f107 0314 	add.w	r3, r7, #20
 8008510:	4619      	mov	r1, r3
 8008512:	481b      	ldr	r0, [pc, #108]	@ (8008580 <HAL_PCD_MspInit+0xc0>)
 8008514:	f7f9 fd16 	bl	8001f44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8008518:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800851c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800851e:	2302      	movs	r3, #2
 8008520:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008522:	2300      	movs	r3, #0
 8008524:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008526:	2303      	movs	r3, #3
 8008528:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800852a:	230a      	movs	r3, #10
 800852c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800852e:	f107 0314 	add.w	r3, r7, #20
 8008532:	4619      	mov	r1, r3
 8008534:	4812      	ldr	r0, [pc, #72]	@ (8008580 <HAL_PCD_MspInit+0xc0>)
 8008536:	f7f9 fd05 	bl	8001f44 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800853a:	4b10      	ldr	r3, [pc, #64]	@ (800857c <HAL_PCD_MspInit+0xbc>)
 800853c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800853e:	4a0f      	ldr	r2, [pc, #60]	@ (800857c <HAL_PCD_MspInit+0xbc>)
 8008540:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008544:	6353      	str	r3, [r2, #52]	@ 0x34
 8008546:	2300      	movs	r3, #0
 8008548:	60fb      	str	r3, [r7, #12]
 800854a:	4b0c      	ldr	r3, [pc, #48]	@ (800857c <HAL_PCD_MspInit+0xbc>)
 800854c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800854e:	4a0b      	ldr	r2, [pc, #44]	@ (800857c <HAL_PCD_MspInit+0xbc>)
 8008550:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8008554:	6453      	str	r3, [r2, #68]	@ 0x44
 8008556:	4b09      	ldr	r3, [pc, #36]	@ (800857c <HAL_PCD_MspInit+0xbc>)
 8008558:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800855a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800855e:	60fb      	str	r3, [r7, #12]
 8008560:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008562:	2200      	movs	r2, #0
 8008564:	2100      	movs	r1, #0
 8008566:	2043      	movs	r0, #67	@ 0x43
 8008568:	f7f9 fcb5 	bl	8001ed6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800856c:	2043      	movs	r0, #67	@ 0x43
 800856e:	f7f9 fcce 	bl	8001f0e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008572:	bf00      	nop
 8008574:	3728      	adds	r7, #40	@ 0x28
 8008576:	46bd      	mov	sp, r7
 8008578:	bd80      	pop	{r7, pc}
 800857a:	bf00      	nop
 800857c:	40023800 	.word	0x40023800
 8008580:	40020000 	.word	0x40020000

08008584 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008584:	b580      	push	{r7, lr}
 8008586:	b082      	sub	sp, #8
 8008588:	af00      	add	r7, sp, #0
 800858a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8008598:	4619      	mov	r1, r3
 800859a:	4610      	mov	r0, r2
 800859c:	f7fe fc0f 	bl	8006dbe <USBD_LL_SetupStage>
}
 80085a0:	bf00      	nop
 80085a2:	3708      	adds	r7, #8
 80085a4:	46bd      	mov	sp, r7
 80085a6:	bd80      	pop	{r7, pc}

080085a8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80085a8:	b580      	push	{r7, lr}
 80085aa:	b082      	sub	sp, #8
 80085ac:	af00      	add	r7, sp, #0
 80085ae:	6078      	str	r0, [r7, #4]
 80085b0:	460b      	mov	r3, r1
 80085b2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 80085ba:	78fa      	ldrb	r2, [r7, #3]
 80085bc:	6879      	ldr	r1, [r7, #4]
 80085be:	4613      	mov	r3, r2
 80085c0:	00db      	lsls	r3, r3, #3
 80085c2:	4413      	add	r3, r2
 80085c4:	009b      	lsls	r3, r3, #2
 80085c6:	440b      	add	r3, r1
 80085c8:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80085cc:	681a      	ldr	r2, [r3, #0]
 80085ce:	78fb      	ldrb	r3, [r7, #3]
 80085d0:	4619      	mov	r1, r3
 80085d2:	f7fe fc49 	bl	8006e68 <USBD_LL_DataOutStage>
}
 80085d6:	bf00      	nop
 80085d8:	3708      	adds	r7, #8
 80085da:	46bd      	mov	sp, r7
 80085dc:	bd80      	pop	{r7, pc}

080085de <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80085de:	b580      	push	{r7, lr}
 80085e0:	b082      	sub	sp, #8
 80085e2:	af00      	add	r7, sp, #0
 80085e4:	6078      	str	r0, [r7, #4]
 80085e6:	460b      	mov	r3, r1
 80085e8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 80085f0:	78fa      	ldrb	r2, [r7, #3]
 80085f2:	6879      	ldr	r1, [r7, #4]
 80085f4:	4613      	mov	r3, r2
 80085f6:	00db      	lsls	r3, r3, #3
 80085f8:	4413      	add	r3, r2
 80085fa:	009b      	lsls	r3, r3, #2
 80085fc:	440b      	add	r3, r1
 80085fe:	3320      	adds	r3, #32
 8008600:	681a      	ldr	r2, [r3, #0]
 8008602:	78fb      	ldrb	r3, [r7, #3]
 8008604:	4619      	mov	r1, r3
 8008606:	f7fe fceb 	bl	8006fe0 <USBD_LL_DataInStage>
}
 800860a:	bf00      	nop
 800860c:	3708      	adds	r7, #8
 800860e:	46bd      	mov	sp, r7
 8008610:	bd80      	pop	{r7, pc}

08008612 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008612:	b580      	push	{r7, lr}
 8008614:	b082      	sub	sp, #8
 8008616:	af00      	add	r7, sp, #0
 8008618:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008620:	4618      	mov	r0, r3
 8008622:	f7fe fe2f 	bl	8007284 <USBD_LL_SOF>
}
 8008626:	bf00      	nop
 8008628:	3708      	adds	r7, #8
 800862a:	46bd      	mov	sp, r7
 800862c:	bd80      	pop	{r7, pc}

0800862e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800862e:	b580      	push	{r7, lr}
 8008630:	b084      	sub	sp, #16
 8008632:	af00      	add	r7, sp, #0
 8008634:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008636:	2301      	movs	r3, #1
 8008638:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	79db      	ldrb	r3, [r3, #7]
 800863e:	2b00      	cmp	r3, #0
 8008640:	d102      	bne.n	8008648 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8008642:	2300      	movs	r3, #0
 8008644:	73fb      	strb	r3, [r7, #15]
 8008646:	e008      	b.n	800865a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	79db      	ldrb	r3, [r3, #7]
 800864c:	2b02      	cmp	r3, #2
 800864e:	d102      	bne.n	8008656 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8008650:	2301      	movs	r3, #1
 8008652:	73fb      	strb	r3, [r7, #15]
 8008654:	e001      	b.n	800865a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8008656:	f7f9 f91b 	bl	8001890 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008660:	7bfa      	ldrb	r2, [r7, #15]
 8008662:	4611      	mov	r1, r2
 8008664:	4618      	mov	r0, r3
 8008666:	f7fe fdc9 	bl	80071fc <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008670:	4618      	mov	r0, r3
 8008672:	f7fe fd70 	bl	8007156 <USBD_LL_Reset>
}
 8008676:	bf00      	nop
 8008678:	3710      	adds	r7, #16
 800867a:	46bd      	mov	sp, r7
 800867c:	bd80      	pop	{r7, pc}
	...

08008680 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008680:	b580      	push	{r7, lr}
 8008682:	b082      	sub	sp, #8
 8008684:	af00      	add	r7, sp, #0
 8008686:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800868e:	4618      	mov	r0, r3
 8008690:	f7fe fdc4 	bl	800721c <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	687a      	ldr	r2, [r7, #4]
 80086a0:	6812      	ldr	r2, [r2, #0]
 80086a2:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80086a6:	f043 0301 	orr.w	r3, r3, #1
 80086aa:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	7adb      	ldrb	r3, [r3, #11]
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d005      	beq.n	80086c0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80086b4:	4b04      	ldr	r3, [pc, #16]	@ (80086c8 <HAL_PCD_SuspendCallback+0x48>)
 80086b6:	691b      	ldr	r3, [r3, #16]
 80086b8:	4a03      	ldr	r2, [pc, #12]	@ (80086c8 <HAL_PCD_SuspendCallback+0x48>)
 80086ba:	f043 0306 	orr.w	r3, r3, #6
 80086be:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80086c0:	bf00      	nop
 80086c2:	3708      	adds	r7, #8
 80086c4:	46bd      	mov	sp, r7
 80086c6:	bd80      	pop	{r7, pc}
 80086c8:	e000ed00 	.word	0xe000ed00

080086cc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80086cc:	b580      	push	{r7, lr}
 80086ce:	b082      	sub	sp, #8
 80086d0:	af00      	add	r7, sp, #0
 80086d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80086da:	4618      	mov	r0, r3
 80086dc:	f7fe fdba 	bl	8007254 <USBD_LL_Resume>
}
 80086e0:	bf00      	nop
 80086e2:	3708      	adds	r7, #8
 80086e4:	46bd      	mov	sp, r7
 80086e6:	bd80      	pop	{r7, pc}

080086e8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80086e8:	b580      	push	{r7, lr}
 80086ea:	b082      	sub	sp, #8
 80086ec:	af00      	add	r7, sp, #0
 80086ee:	6078      	str	r0, [r7, #4]
 80086f0:	460b      	mov	r3, r1
 80086f2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80086fa:	78fa      	ldrb	r2, [r7, #3]
 80086fc:	4611      	mov	r1, r2
 80086fe:	4618      	mov	r0, r3
 8008700:	f7fe fe12 	bl	8007328 <USBD_LL_IsoOUTIncomplete>
}
 8008704:	bf00      	nop
 8008706:	3708      	adds	r7, #8
 8008708:	46bd      	mov	sp, r7
 800870a:	bd80      	pop	{r7, pc}

0800870c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800870c:	b580      	push	{r7, lr}
 800870e:	b082      	sub	sp, #8
 8008710:	af00      	add	r7, sp, #0
 8008712:	6078      	str	r0, [r7, #4]
 8008714:	460b      	mov	r3, r1
 8008716:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800871e:	78fa      	ldrb	r2, [r7, #3]
 8008720:	4611      	mov	r1, r2
 8008722:	4618      	mov	r0, r3
 8008724:	f7fe fdce 	bl	80072c4 <USBD_LL_IsoINIncomplete>
}
 8008728:	bf00      	nop
 800872a:	3708      	adds	r7, #8
 800872c:	46bd      	mov	sp, r7
 800872e:	bd80      	pop	{r7, pc}

08008730 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008730:	b580      	push	{r7, lr}
 8008732:	b082      	sub	sp, #8
 8008734:	af00      	add	r7, sp, #0
 8008736:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800873e:	4618      	mov	r0, r3
 8008740:	f7fe fe24 	bl	800738c <USBD_LL_DevConnected>
}
 8008744:	bf00      	nop
 8008746:	3708      	adds	r7, #8
 8008748:	46bd      	mov	sp, r7
 800874a:	bd80      	pop	{r7, pc}

0800874c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800874c:	b580      	push	{r7, lr}
 800874e:	b082      	sub	sp, #8
 8008750:	af00      	add	r7, sp, #0
 8008752:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800875a:	4618      	mov	r0, r3
 800875c:	f7fe fe21 	bl	80073a2 <USBD_LL_DevDisconnected>
}
 8008760:	bf00      	nop
 8008762:	3708      	adds	r7, #8
 8008764:	46bd      	mov	sp, r7
 8008766:	bd80      	pop	{r7, pc}

08008768 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008768:	b580      	push	{r7, lr}
 800876a:	b082      	sub	sp, #8
 800876c:	af00      	add	r7, sp, #0
 800876e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	781b      	ldrb	r3, [r3, #0]
 8008774:	2b00      	cmp	r3, #0
 8008776:	d13c      	bne.n	80087f2 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8008778:	4a20      	ldr	r2, [pc, #128]	@ (80087fc <USBD_LL_Init+0x94>)
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	4a1e      	ldr	r2, [pc, #120]	@ (80087fc <USBD_LL_Init+0x94>)
 8008784:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008788:	4b1c      	ldr	r3, [pc, #112]	@ (80087fc <USBD_LL_Init+0x94>)
 800878a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800878e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8008790:	4b1a      	ldr	r3, [pc, #104]	@ (80087fc <USBD_LL_Init+0x94>)
 8008792:	2204      	movs	r2, #4
 8008794:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8008796:	4b19      	ldr	r3, [pc, #100]	@ (80087fc <USBD_LL_Init+0x94>)
 8008798:	2202      	movs	r2, #2
 800879a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800879c:	4b17      	ldr	r3, [pc, #92]	@ (80087fc <USBD_LL_Init+0x94>)
 800879e:	2200      	movs	r2, #0
 80087a0:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80087a2:	4b16      	ldr	r3, [pc, #88]	@ (80087fc <USBD_LL_Init+0x94>)
 80087a4:	2202      	movs	r2, #2
 80087a6:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80087a8:	4b14      	ldr	r3, [pc, #80]	@ (80087fc <USBD_LL_Init+0x94>)
 80087aa:	2200      	movs	r2, #0
 80087ac:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80087ae:	4b13      	ldr	r3, [pc, #76]	@ (80087fc <USBD_LL_Init+0x94>)
 80087b0:	2200      	movs	r2, #0
 80087b2:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80087b4:	4b11      	ldr	r3, [pc, #68]	@ (80087fc <USBD_LL_Init+0x94>)
 80087b6:	2200      	movs	r2, #0
 80087b8:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80087ba:	4b10      	ldr	r3, [pc, #64]	@ (80087fc <USBD_LL_Init+0x94>)
 80087bc:	2201      	movs	r2, #1
 80087be:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80087c0:	4b0e      	ldr	r3, [pc, #56]	@ (80087fc <USBD_LL_Init+0x94>)
 80087c2:	2200      	movs	r2, #0
 80087c4:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80087c6:	480d      	ldr	r0, [pc, #52]	@ (80087fc <USBD_LL_Init+0x94>)
 80087c8:	f7fa fe1f 	bl	800340a <HAL_PCD_Init>
 80087cc:	4603      	mov	r3, r0
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d001      	beq.n	80087d6 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80087d2:	f7f9 f85d 	bl	8001890 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80087d6:	2180      	movs	r1, #128	@ 0x80
 80087d8:	4808      	ldr	r0, [pc, #32]	@ (80087fc <USBD_LL_Init+0x94>)
 80087da:	f7fc f834 	bl	8004846 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80087de:	2240      	movs	r2, #64	@ 0x40
 80087e0:	2100      	movs	r1, #0
 80087e2:	4806      	ldr	r0, [pc, #24]	@ (80087fc <USBD_LL_Init+0x94>)
 80087e4:	f7fb ffe8 	bl	80047b8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80087e8:	2280      	movs	r2, #128	@ 0x80
 80087ea:	2101      	movs	r1, #1
 80087ec:	4803      	ldr	r0, [pc, #12]	@ (80087fc <USBD_LL_Init+0x94>)
 80087ee:	f7fb ffe3 	bl	80047b8 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80087f2:	2300      	movs	r3, #0
}
 80087f4:	4618      	mov	r0, r3
 80087f6:	3708      	adds	r7, #8
 80087f8:	46bd      	mov	sp, r7
 80087fa:	bd80      	pop	{r7, pc}
 80087fc:	20000940 	.word	0x20000940

08008800 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008800:	b580      	push	{r7, lr}
 8008802:	b084      	sub	sp, #16
 8008804:	af00      	add	r7, sp, #0
 8008806:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008808:	2300      	movs	r3, #0
 800880a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800880c:	2300      	movs	r3, #0
 800880e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008816:	4618      	mov	r0, r3
 8008818:	f7fa ff06 	bl	8003628 <HAL_PCD_Start>
 800881c:	4603      	mov	r3, r0
 800881e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008820:	7bfb      	ldrb	r3, [r7, #15]
 8008822:	4618      	mov	r0, r3
 8008824:	f000 f930 	bl	8008a88 <USBD_Get_USB_Status>
 8008828:	4603      	mov	r3, r0
 800882a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800882c:	7bbb      	ldrb	r3, [r7, #14]
}
 800882e:	4618      	mov	r0, r3
 8008830:	3710      	adds	r7, #16
 8008832:	46bd      	mov	sp, r7
 8008834:	bd80      	pop	{r7, pc}

08008836 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008836:	b580      	push	{r7, lr}
 8008838:	b084      	sub	sp, #16
 800883a:	af00      	add	r7, sp, #0
 800883c:	6078      	str	r0, [r7, #4]
 800883e:	4608      	mov	r0, r1
 8008840:	4611      	mov	r1, r2
 8008842:	461a      	mov	r2, r3
 8008844:	4603      	mov	r3, r0
 8008846:	70fb      	strb	r3, [r7, #3]
 8008848:	460b      	mov	r3, r1
 800884a:	70bb      	strb	r3, [r7, #2]
 800884c:	4613      	mov	r3, r2
 800884e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008850:	2300      	movs	r3, #0
 8008852:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008854:	2300      	movs	r3, #0
 8008856:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800885e:	78bb      	ldrb	r3, [r7, #2]
 8008860:	883a      	ldrh	r2, [r7, #0]
 8008862:	78f9      	ldrb	r1, [r7, #3]
 8008864:	f7fb fbda 	bl	800401c <HAL_PCD_EP_Open>
 8008868:	4603      	mov	r3, r0
 800886a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800886c:	7bfb      	ldrb	r3, [r7, #15]
 800886e:	4618      	mov	r0, r3
 8008870:	f000 f90a 	bl	8008a88 <USBD_Get_USB_Status>
 8008874:	4603      	mov	r3, r0
 8008876:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008878:	7bbb      	ldrb	r3, [r7, #14]
}
 800887a:	4618      	mov	r0, r3
 800887c:	3710      	adds	r7, #16
 800887e:	46bd      	mov	sp, r7
 8008880:	bd80      	pop	{r7, pc}

08008882 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008882:	b580      	push	{r7, lr}
 8008884:	b084      	sub	sp, #16
 8008886:	af00      	add	r7, sp, #0
 8008888:	6078      	str	r0, [r7, #4]
 800888a:	460b      	mov	r3, r1
 800888c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800888e:	2300      	movs	r3, #0
 8008890:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008892:	2300      	movs	r3, #0
 8008894:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800889c:	78fa      	ldrb	r2, [r7, #3]
 800889e:	4611      	mov	r1, r2
 80088a0:	4618      	mov	r0, r3
 80088a2:	f7fb fc25 	bl	80040f0 <HAL_PCD_EP_Close>
 80088a6:	4603      	mov	r3, r0
 80088a8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80088aa:	7bfb      	ldrb	r3, [r7, #15]
 80088ac:	4618      	mov	r0, r3
 80088ae:	f000 f8eb 	bl	8008a88 <USBD_Get_USB_Status>
 80088b2:	4603      	mov	r3, r0
 80088b4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80088b6:	7bbb      	ldrb	r3, [r7, #14]
}
 80088b8:	4618      	mov	r0, r3
 80088ba:	3710      	adds	r7, #16
 80088bc:	46bd      	mov	sp, r7
 80088be:	bd80      	pop	{r7, pc}

080088c0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80088c0:	b580      	push	{r7, lr}
 80088c2:	b084      	sub	sp, #16
 80088c4:	af00      	add	r7, sp, #0
 80088c6:	6078      	str	r0, [r7, #4]
 80088c8:	460b      	mov	r3, r1
 80088ca:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80088cc:	2300      	movs	r3, #0
 80088ce:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80088d0:	2300      	movs	r3, #0
 80088d2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80088da:	78fa      	ldrb	r2, [r7, #3]
 80088dc:	4611      	mov	r1, r2
 80088de:	4618      	mov	r0, r3
 80088e0:	f7fb fcc5 	bl	800426e <HAL_PCD_EP_SetStall>
 80088e4:	4603      	mov	r3, r0
 80088e6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80088e8:	7bfb      	ldrb	r3, [r7, #15]
 80088ea:	4618      	mov	r0, r3
 80088ec:	f000 f8cc 	bl	8008a88 <USBD_Get_USB_Status>
 80088f0:	4603      	mov	r3, r0
 80088f2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80088f4:	7bbb      	ldrb	r3, [r7, #14]
}
 80088f6:	4618      	mov	r0, r3
 80088f8:	3710      	adds	r7, #16
 80088fa:	46bd      	mov	sp, r7
 80088fc:	bd80      	pop	{r7, pc}

080088fe <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80088fe:	b580      	push	{r7, lr}
 8008900:	b084      	sub	sp, #16
 8008902:	af00      	add	r7, sp, #0
 8008904:	6078      	str	r0, [r7, #4]
 8008906:	460b      	mov	r3, r1
 8008908:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800890a:	2300      	movs	r3, #0
 800890c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800890e:	2300      	movs	r3, #0
 8008910:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008918:	78fa      	ldrb	r2, [r7, #3]
 800891a:	4611      	mov	r1, r2
 800891c:	4618      	mov	r0, r3
 800891e:	f7fb fd09 	bl	8004334 <HAL_PCD_EP_ClrStall>
 8008922:	4603      	mov	r3, r0
 8008924:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008926:	7bfb      	ldrb	r3, [r7, #15]
 8008928:	4618      	mov	r0, r3
 800892a:	f000 f8ad 	bl	8008a88 <USBD_Get_USB_Status>
 800892e:	4603      	mov	r3, r0
 8008930:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008932:	7bbb      	ldrb	r3, [r7, #14]
}
 8008934:	4618      	mov	r0, r3
 8008936:	3710      	adds	r7, #16
 8008938:	46bd      	mov	sp, r7
 800893a:	bd80      	pop	{r7, pc}

0800893c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800893c:	b480      	push	{r7}
 800893e:	b085      	sub	sp, #20
 8008940:	af00      	add	r7, sp, #0
 8008942:	6078      	str	r0, [r7, #4]
 8008944:	460b      	mov	r3, r1
 8008946:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800894e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008950:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008954:	2b00      	cmp	r3, #0
 8008956:	da0b      	bge.n	8008970 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008958:	78fb      	ldrb	r3, [r7, #3]
 800895a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800895e:	68f9      	ldr	r1, [r7, #12]
 8008960:	4613      	mov	r3, r2
 8008962:	00db      	lsls	r3, r3, #3
 8008964:	4413      	add	r3, r2
 8008966:	009b      	lsls	r3, r3, #2
 8008968:	440b      	add	r3, r1
 800896a:	3316      	adds	r3, #22
 800896c:	781b      	ldrb	r3, [r3, #0]
 800896e:	e00b      	b.n	8008988 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008970:	78fb      	ldrb	r3, [r7, #3]
 8008972:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008976:	68f9      	ldr	r1, [r7, #12]
 8008978:	4613      	mov	r3, r2
 800897a:	00db      	lsls	r3, r3, #3
 800897c:	4413      	add	r3, r2
 800897e:	009b      	lsls	r3, r3, #2
 8008980:	440b      	add	r3, r1
 8008982:	f203 2356 	addw	r3, r3, #598	@ 0x256
 8008986:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008988:	4618      	mov	r0, r3
 800898a:	3714      	adds	r7, #20
 800898c:	46bd      	mov	sp, r7
 800898e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008992:	4770      	bx	lr

08008994 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008994:	b580      	push	{r7, lr}
 8008996:	b084      	sub	sp, #16
 8008998:	af00      	add	r7, sp, #0
 800899a:	6078      	str	r0, [r7, #4]
 800899c:	460b      	mov	r3, r1
 800899e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80089a0:	2300      	movs	r3, #0
 80089a2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80089a4:	2300      	movs	r3, #0
 80089a6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80089ae:	78fa      	ldrb	r2, [r7, #3]
 80089b0:	4611      	mov	r1, r2
 80089b2:	4618      	mov	r0, r3
 80089b4:	f7fb fb0e 	bl	8003fd4 <HAL_PCD_SetAddress>
 80089b8:	4603      	mov	r3, r0
 80089ba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80089bc:	7bfb      	ldrb	r3, [r7, #15]
 80089be:	4618      	mov	r0, r3
 80089c0:	f000 f862 	bl	8008a88 <USBD_Get_USB_Status>
 80089c4:	4603      	mov	r3, r0
 80089c6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80089c8:	7bbb      	ldrb	r3, [r7, #14]
}
 80089ca:	4618      	mov	r0, r3
 80089cc:	3710      	adds	r7, #16
 80089ce:	46bd      	mov	sp, r7
 80089d0:	bd80      	pop	{r7, pc}

080089d2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80089d2:	b580      	push	{r7, lr}
 80089d4:	b086      	sub	sp, #24
 80089d6:	af00      	add	r7, sp, #0
 80089d8:	60f8      	str	r0, [r7, #12]
 80089da:	607a      	str	r2, [r7, #4]
 80089dc:	603b      	str	r3, [r7, #0]
 80089de:	460b      	mov	r3, r1
 80089e0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80089e2:	2300      	movs	r3, #0
 80089e4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80089e6:	2300      	movs	r3, #0
 80089e8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80089f0:	7af9      	ldrb	r1, [r7, #11]
 80089f2:	683b      	ldr	r3, [r7, #0]
 80089f4:	687a      	ldr	r2, [r7, #4]
 80089f6:	f7fb fc00 	bl	80041fa <HAL_PCD_EP_Transmit>
 80089fa:	4603      	mov	r3, r0
 80089fc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80089fe:	7dfb      	ldrb	r3, [r7, #23]
 8008a00:	4618      	mov	r0, r3
 8008a02:	f000 f841 	bl	8008a88 <USBD_Get_USB_Status>
 8008a06:	4603      	mov	r3, r0
 8008a08:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008a0a:	7dbb      	ldrb	r3, [r7, #22]
}
 8008a0c:	4618      	mov	r0, r3
 8008a0e:	3718      	adds	r7, #24
 8008a10:	46bd      	mov	sp, r7
 8008a12:	bd80      	pop	{r7, pc}

08008a14 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008a14:	b580      	push	{r7, lr}
 8008a16:	b086      	sub	sp, #24
 8008a18:	af00      	add	r7, sp, #0
 8008a1a:	60f8      	str	r0, [r7, #12]
 8008a1c:	607a      	str	r2, [r7, #4]
 8008a1e:	603b      	str	r3, [r7, #0]
 8008a20:	460b      	mov	r3, r1
 8008a22:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a24:	2300      	movs	r3, #0
 8008a26:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008a28:	2300      	movs	r3, #0
 8008a2a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8008a32:	7af9      	ldrb	r1, [r7, #11]
 8008a34:	683b      	ldr	r3, [r7, #0]
 8008a36:	687a      	ldr	r2, [r7, #4]
 8008a38:	f7fb fba4 	bl	8004184 <HAL_PCD_EP_Receive>
 8008a3c:	4603      	mov	r3, r0
 8008a3e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008a40:	7dfb      	ldrb	r3, [r7, #23]
 8008a42:	4618      	mov	r0, r3
 8008a44:	f000 f820 	bl	8008a88 <USBD_Get_USB_Status>
 8008a48:	4603      	mov	r3, r0
 8008a4a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008a4c:	7dbb      	ldrb	r3, [r7, #22]
}
 8008a4e:	4618      	mov	r0, r3
 8008a50:	3718      	adds	r7, #24
 8008a52:	46bd      	mov	sp, r7
 8008a54:	bd80      	pop	{r7, pc}
	...

08008a58 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008a58:	b480      	push	{r7}
 8008a5a:	b083      	sub	sp, #12
 8008a5c:	af00      	add	r7, sp, #0
 8008a5e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008a60:	4b03      	ldr	r3, [pc, #12]	@ (8008a70 <USBD_static_malloc+0x18>)
}
 8008a62:	4618      	mov	r0, r3
 8008a64:	370c      	adds	r7, #12
 8008a66:	46bd      	mov	sp, r7
 8008a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a6c:	4770      	bx	lr
 8008a6e:	bf00      	nop
 8008a70:	20000e24 	.word	0x20000e24

08008a74 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008a74:	b480      	push	{r7}
 8008a76:	b083      	sub	sp, #12
 8008a78:	af00      	add	r7, sp, #0
 8008a7a:	6078      	str	r0, [r7, #4]

}
 8008a7c:	bf00      	nop
 8008a7e:	370c      	adds	r7, #12
 8008a80:	46bd      	mov	sp, r7
 8008a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a86:	4770      	bx	lr

08008a88 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008a88:	b480      	push	{r7}
 8008a8a:	b085      	sub	sp, #20
 8008a8c:	af00      	add	r7, sp, #0
 8008a8e:	4603      	mov	r3, r0
 8008a90:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008a92:	2300      	movs	r3, #0
 8008a94:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008a96:	79fb      	ldrb	r3, [r7, #7]
 8008a98:	2b03      	cmp	r3, #3
 8008a9a:	d817      	bhi.n	8008acc <USBD_Get_USB_Status+0x44>
 8008a9c:	a201      	add	r2, pc, #4	@ (adr r2, 8008aa4 <USBD_Get_USB_Status+0x1c>)
 8008a9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008aa2:	bf00      	nop
 8008aa4:	08008ab5 	.word	0x08008ab5
 8008aa8:	08008abb 	.word	0x08008abb
 8008aac:	08008ac1 	.word	0x08008ac1
 8008ab0:	08008ac7 	.word	0x08008ac7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008ab4:	2300      	movs	r3, #0
 8008ab6:	73fb      	strb	r3, [r7, #15]
    break;
 8008ab8:	e00b      	b.n	8008ad2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008aba:	2303      	movs	r3, #3
 8008abc:	73fb      	strb	r3, [r7, #15]
    break;
 8008abe:	e008      	b.n	8008ad2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008ac0:	2301      	movs	r3, #1
 8008ac2:	73fb      	strb	r3, [r7, #15]
    break;
 8008ac4:	e005      	b.n	8008ad2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008ac6:	2303      	movs	r3, #3
 8008ac8:	73fb      	strb	r3, [r7, #15]
    break;
 8008aca:	e002      	b.n	8008ad2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008acc:	2303      	movs	r3, #3
 8008ace:	73fb      	strb	r3, [r7, #15]
    break;
 8008ad0:	bf00      	nop
  }
  return usb_status;
 8008ad2:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ad4:	4618      	mov	r0, r3
 8008ad6:	3714      	adds	r7, #20
 8008ad8:	46bd      	mov	sp, r7
 8008ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ade:	4770      	bx	lr

08008ae0 <__cvt>:
 8008ae0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008ae4:	ec57 6b10 	vmov	r6, r7, d0
 8008ae8:	2f00      	cmp	r7, #0
 8008aea:	460c      	mov	r4, r1
 8008aec:	4619      	mov	r1, r3
 8008aee:	463b      	mov	r3, r7
 8008af0:	bfbb      	ittet	lt
 8008af2:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8008af6:	461f      	movlt	r7, r3
 8008af8:	2300      	movge	r3, #0
 8008afa:	232d      	movlt	r3, #45	@ 0x2d
 8008afc:	700b      	strb	r3, [r1, #0]
 8008afe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008b00:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8008b04:	4691      	mov	r9, r2
 8008b06:	f023 0820 	bic.w	r8, r3, #32
 8008b0a:	bfbc      	itt	lt
 8008b0c:	4632      	movlt	r2, r6
 8008b0e:	4616      	movlt	r6, r2
 8008b10:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008b14:	d005      	beq.n	8008b22 <__cvt+0x42>
 8008b16:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8008b1a:	d100      	bne.n	8008b1e <__cvt+0x3e>
 8008b1c:	3401      	adds	r4, #1
 8008b1e:	2102      	movs	r1, #2
 8008b20:	e000      	b.n	8008b24 <__cvt+0x44>
 8008b22:	2103      	movs	r1, #3
 8008b24:	ab03      	add	r3, sp, #12
 8008b26:	9301      	str	r3, [sp, #4]
 8008b28:	ab02      	add	r3, sp, #8
 8008b2a:	9300      	str	r3, [sp, #0]
 8008b2c:	ec47 6b10 	vmov	d0, r6, r7
 8008b30:	4653      	mov	r3, sl
 8008b32:	4622      	mov	r2, r4
 8008b34:	f000 fe38 	bl	80097a8 <_dtoa_r>
 8008b38:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8008b3c:	4605      	mov	r5, r0
 8008b3e:	d119      	bne.n	8008b74 <__cvt+0x94>
 8008b40:	f019 0f01 	tst.w	r9, #1
 8008b44:	d00e      	beq.n	8008b64 <__cvt+0x84>
 8008b46:	eb00 0904 	add.w	r9, r0, r4
 8008b4a:	2200      	movs	r2, #0
 8008b4c:	2300      	movs	r3, #0
 8008b4e:	4630      	mov	r0, r6
 8008b50:	4639      	mov	r1, r7
 8008b52:	f7f7 ffc9 	bl	8000ae8 <__aeabi_dcmpeq>
 8008b56:	b108      	cbz	r0, 8008b5c <__cvt+0x7c>
 8008b58:	f8cd 900c 	str.w	r9, [sp, #12]
 8008b5c:	2230      	movs	r2, #48	@ 0x30
 8008b5e:	9b03      	ldr	r3, [sp, #12]
 8008b60:	454b      	cmp	r3, r9
 8008b62:	d31e      	bcc.n	8008ba2 <__cvt+0xc2>
 8008b64:	9b03      	ldr	r3, [sp, #12]
 8008b66:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008b68:	1b5b      	subs	r3, r3, r5
 8008b6a:	4628      	mov	r0, r5
 8008b6c:	6013      	str	r3, [r2, #0]
 8008b6e:	b004      	add	sp, #16
 8008b70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b74:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008b78:	eb00 0904 	add.w	r9, r0, r4
 8008b7c:	d1e5      	bne.n	8008b4a <__cvt+0x6a>
 8008b7e:	7803      	ldrb	r3, [r0, #0]
 8008b80:	2b30      	cmp	r3, #48	@ 0x30
 8008b82:	d10a      	bne.n	8008b9a <__cvt+0xba>
 8008b84:	2200      	movs	r2, #0
 8008b86:	2300      	movs	r3, #0
 8008b88:	4630      	mov	r0, r6
 8008b8a:	4639      	mov	r1, r7
 8008b8c:	f7f7 ffac 	bl	8000ae8 <__aeabi_dcmpeq>
 8008b90:	b918      	cbnz	r0, 8008b9a <__cvt+0xba>
 8008b92:	f1c4 0401 	rsb	r4, r4, #1
 8008b96:	f8ca 4000 	str.w	r4, [sl]
 8008b9a:	f8da 3000 	ldr.w	r3, [sl]
 8008b9e:	4499      	add	r9, r3
 8008ba0:	e7d3      	b.n	8008b4a <__cvt+0x6a>
 8008ba2:	1c59      	adds	r1, r3, #1
 8008ba4:	9103      	str	r1, [sp, #12]
 8008ba6:	701a      	strb	r2, [r3, #0]
 8008ba8:	e7d9      	b.n	8008b5e <__cvt+0x7e>

08008baa <__exponent>:
 8008baa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008bac:	2900      	cmp	r1, #0
 8008bae:	bfba      	itte	lt
 8008bb0:	4249      	neglt	r1, r1
 8008bb2:	232d      	movlt	r3, #45	@ 0x2d
 8008bb4:	232b      	movge	r3, #43	@ 0x2b
 8008bb6:	2909      	cmp	r1, #9
 8008bb8:	7002      	strb	r2, [r0, #0]
 8008bba:	7043      	strb	r3, [r0, #1]
 8008bbc:	dd29      	ble.n	8008c12 <__exponent+0x68>
 8008bbe:	f10d 0307 	add.w	r3, sp, #7
 8008bc2:	461d      	mov	r5, r3
 8008bc4:	270a      	movs	r7, #10
 8008bc6:	461a      	mov	r2, r3
 8008bc8:	fbb1 f6f7 	udiv	r6, r1, r7
 8008bcc:	fb07 1416 	mls	r4, r7, r6, r1
 8008bd0:	3430      	adds	r4, #48	@ 0x30
 8008bd2:	f802 4c01 	strb.w	r4, [r2, #-1]
 8008bd6:	460c      	mov	r4, r1
 8008bd8:	2c63      	cmp	r4, #99	@ 0x63
 8008bda:	f103 33ff 	add.w	r3, r3, #4294967295
 8008bde:	4631      	mov	r1, r6
 8008be0:	dcf1      	bgt.n	8008bc6 <__exponent+0x1c>
 8008be2:	3130      	adds	r1, #48	@ 0x30
 8008be4:	1e94      	subs	r4, r2, #2
 8008be6:	f803 1c01 	strb.w	r1, [r3, #-1]
 8008bea:	1c41      	adds	r1, r0, #1
 8008bec:	4623      	mov	r3, r4
 8008bee:	42ab      	cmp	r3, r5
 8008bf0:	d30a      	bcc.n	8008c08 <__exponent+0x5e>
 8008bf2:	f10d 0309 	add.w	r3, sp, #9
 8008bf6:	1a9b      	subs	r3, r3, r2
 8008bf8:	42ac      	cmp	r4, r5
 8008bfa:	bf88      	it	hi
 8008bfc:	2300      	movhi	r3, #0
 8008bfe:	3302      	adds	r3, #2
 8008c00:	4403      	add	r3, r0
 8008c02:	1a18      	subs	r0, r3, r0
 8008c04:	b003      	add	sp, #12
 8008c06:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008c08:	f813 6b01 	ldrb.w	r6, [r3], #1
 8008c0c:	f801 6f01 	strb.w	r6, [r1, #1]!
 8008c10:	e7ed      	b.n	8008bee <__exponent+0x44>
 8008c12:	2330      	movs	r3, #48	@ 0x30
 8008c14:	3130      	adds	r1, #48	@ 0x30
 8008c16:	7083      	strb	r3, [r0, #2]
 8008c18:	70c1      	strb	r1, [r0, #3]
 8008c1a:	1d03      	adds	r3, r0, #4
 8008c1c:	e7f1      	b.n	8008c02 <__exponent+0x58>
	...

08008c20 <_printf_float>:
 8008c20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c24:	b08d      	sub	sp, #52	@ 0x34
 8008c26:	460c      	mov	r4, r1
 8008c28:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8008c2c:	4616      	mov	r6, r2
 8008c2e:	461f      	mov	r7, r3
 8008c30:	4605      	mov	r5, r0
 8008c32:	f000 fcb9 	bl	80095a8 <_localeconv_r>
 8008c36:	6803      	ldr	r3, [r0, #0]
 8008c38:	9304      	str	r3, [sp, #16]
 8008c3a:	4618      	mov	r0, r3
 8008c3c:	f7f7 fb28 	bl	8000290 <strlen>
 8008c40:	2300      	movs	r3, #0
 8008c42:	930a      	str	r3, [sp, #40]	@ 0x28
 8008c44:	f8d8 3000 	ldr.w	r3, [r8]
 8008c48:	9005      	str	r0, [sp, #20]
 8008c4a:	3307      	adds	r3, #7
 8008c4c:	f023 0307 	bic.w	r3, r3, #7
 8008c50:	f103 0208 	add.w	r2, r3, #8
 8008c54:	f894 a018 	ldrb.w	sl, [r4, #24]
 8008c58:	f8d4 b000 	ldr.w	fp, [r4]
 8008c5c:	f8c8 2000 	str.w	r2, [r8]
 8008c60:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008c64:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8008c68:	9307      	str	r3, [sp, #28]
 8008c6a:	f8cd 8018 	str.w	r8, [sp, #24]
 8008c6e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8008c72:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008c76:	4b9c      	ldr	r3, [pc, #624]	@ (8008ee8 <_printf_float+0x2c8>)
 8008c78:	f04f 32ff 	mov.w	r2, #4294967295
 8008c7c:	f7f7 ff66 	bl	8000b4c <__aeabi_dcmpun>
 8008c80:	bb70      	cbnz	r0, 8008ce0 <_printf_float+0xc0>
 8008c82:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008c86:	4b98      	ldr	r3, [pc, #608]	@ (8008ee8 <_printf_float+0x2c8>)
 8008c88:	f04f 32ff 	mov.w	r2, #4294967295
 8008c8c:	f7f7 ff40 	bl	8000b10 <__aeabi_dcmple>
 8008c90:	bb30      	cbnz	r0, 8008ce0 <_printf_float+0xc0>
 8008c92:	2200      	movs	r2, #0
 8008c94:	2300      	movs	r3, #0
 8008c96:	4640      	mov	r0, r8
 8008c98:	4649      	mov	r1, r9
 8008c9a:	f7f7 ff2f 	bl	8000afc <__aeabi_dcmplt>
 8008c9e:	b110      	cbz	r0, 8008ca6 <_printf_float+0x86>
 8008ca0:	232d      	movs	r3, #45	@ 0x2d
 8008ca2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008ca6:	4a91      	ldr	r2, [pc, #580]	@ (8008eec <_printf_float+0x2cc>)
 8008ca8:	4b91      	ldr	r3, [pc, #580]	@ (8008ef0 <_printf_float+0x2d0>)
 8008caa:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8008cae:	bf8c      	ite	hi
 8008cb0:	4690      	movhi	r8, r2
 8008cb2:	4698      	movls	r8, r3
 8008cb4:	2303      	movs	r3, #3
 8008cb6:	6123      	str	r3, [r4, #16]
 8008cb8:	f02b 0304 	bic.w	r3, fp, #4
 8008cbc:	6023      	str	r3, [r4, #0]
 8008cbe:	f04f 0900 	mov.w	r9, #0
 8008cc2:	9700      	str	r7, [sp, #0]
 8008cc4:	4633      	mov	r3, r6
 8008cc6:	aa0b      	add	r2, sp, #44	@ 0x2c
 8008cc8:	4621      	mov	r1, r4
 8008cca:	4628      	mov	r0, r5
 8008ccc:	f000 f9d2 	bl	8009074 <_printf_common>
 8008cd0:	3001      	adds	r0, #1
 8008cd2:	f040 808d 	bne.w	8008df0 <_printf_float+0x1d0>
 8008cd6:	f04f 30ff 	mov.w	r0, #4294967295
 8008cda:	b00d      	add	sp, #52	@ 0x34
 8008cdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ce0:	4642      	mov	r2, r8
 8008ce2:	464b      	mov	r3, r9
 8008ce4:	4640      	mov	r0, r8
 8008ce6:	4649      	mov	r1, r9
 8008ce8:	f7f7 ff30 	bl	8000b4c <__aeabi_dcmpun>
 8008cec:	b140      	cbz	r0, 8008d00 <_printf_float+0xe0>
 8008cee:	464b      	mov	r3, r9
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	bfbc      	itt	lt
 8008cf4:	232d      	movlt	r3, #45	@ 0x2d
 8008cf6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8008cfa:	4a7e      	ldr	r2, [pc, #504]	@ (8008ef4 <_printf_float+0x2d4>)
 8008cfc:	4b7e      	ldr	r3, [pc, #504]	@ (8008ef8 <_printf_float+0x2d8>)
 8008cfe:	e7d4      	b.n	8008caa <_printf_float+0x8a>
 8008d00:	6863      	ldr	r3, [r4, #4]
 8008d02:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8008d06:	9206      	str	r2, [sp, #24]
 8008d08:	1c5a      	adds	r2, r3, #1
 8008d0a:	d13b      	bne.n	8008d84 <_printf_float+0x164>
 8008d0c:	2306      	movs	r3, #6
 8008d0e:	6063      	str	r3, [r4, #4]
 8008d10:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8008d14:	2300      	movs	r3, #0
 8008d16:	6022      	str	r2, [r4, #0]
 8008d18:	9303      	str	r3, [sp, #12]
 8008d1a:	ab0a      	add	r3, sp, #40	@ 0x28
 8008d1c:	e9cd a301 	strd	sl, r3, [sp, #4]
 8008d20:	ab09      	add	r3, sp, #36	@ 0x24
 8008d22:	9300      	str	r3, [sp, #0]
 8008d24:	6861      	ldr	r1, [r4, #4]
 8008d26:	ec49 8b10 	vmov	d0, r8, r9
 8008d2a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8008d2e:	4628      	mov	r0, r5
 8008d30:	f7ff fed6 	bl	8008ae0 <__cvt>
 8008d34:	9b06      	ldr	r3, [sp, #24]
 8008d36:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008d38:	2b47      	cmp	r3, #71	@ 0x47
 8008d3a:	4680      	mov	r8, r0
 8008d3c:	d129      	bne.n	8008d92 <_printf_float+0x172>
 8008d3e:	1cc8      	adds	r0, r1, #3
 8008d40:	db02      	blt.n	8008d48 <_printf_float+0x128>
 8008d42:	6863      	ldr	r3, [r4, #4]
 8008d44:	4299      	cmp	r1, r3
 8008d46:	dd41      	ble.n	8008dcc <_printf_float+0x1ac>
 8008d48:	f1aa 0a02 	sub.w	sl, sl, #2
 8008d4c:	fa5f fa8a 	uxtb.w	sl, sl
 8008d50:	3901      	subs	r1, #1
 8008d52:	4652      	mov	r2, sl
 8008d54:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8008d58:	9109      	str	r1, [sp, #36]	@ 0x24
 8008d5a:	f7ff ff26 	bl	8008baa <__exponent>
 8008d5e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008d60:	1813      	adds	r3, r2, r0
 8008d62:	2a01      	cmp	r2, #1
 8008d64:	4681      	mov	r9, r0
 8008d66:	6123      	str	r3, [r4, #16]
 8008d68:	dc02      	bgt.n	8008d70 <_printf_float+0x150>
 8008d6a:	6822      	ldr	r2, [r4, #0]
 8008d6c:	07d2      	lsls	r2, r2, #31
 8008d6e:	d501      	bpl.n	8008d74 <_printf_float+0x154>
 8008d70:	3301      	adds	r3, #1
 8008d72:	6123      	str	r3, [r4, #16]
 8008d74:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d0a2      	beq.n	8008cc2 <_printf_float+0xa2>
 8008d7c:	232d      	movs	r3, #45	@ 0x2d
 8008d7e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008d82:	e79e      	b.n	8008cc2 <_printf_float+0xa2>
 8008d84:	9a06      	ldr	r2, [sp, #24]
 8008d86:	2a47      	cmp	r2, #71	@ 0x47
 8008d88:	d1c2      	bne.n	8008d10 <_printf_float+0xf0>
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d1c0      	bne.n	8008d10 <_printf_float+0xf0>
 8008d8e:	2301      	movs	r3, #1
 8008d90:	e7bd      	b.n	8008d0e <_printf_float+0xee>
 8008d92:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008d96:	d9db      	bls.n	8008d50 <_printf_float+0x130>
 8008d98:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8008d9c:	d118      	bne.n	8008dd0 <_printf_float+0x1b0>
 8008d9e:	2900      	cmp	r1, #0
 8008da0:	6863      	ldr	r3, [r4, #4]
 8008da2:	dd0b      	ble.n	8008dbc <_printf_float+0x19c>
 8008da4:	6121      	str	r1, [r4, #16]
 8008da6:	b913      	cbnz	r3, 8008dae <_printf_float+0x18e>
 8008da8:	6822      	ldr	r2, [r4, #0]
 8008daa:	07d0      	lsls	r0, r2, #31
 8008dac:	d502      	bpl.n	8008db4 <_printf_float+0x194>
 8008dae:	3301      	adds	r3, #1
 8008db0:	440b      	add	r3, r1
 8008db2:	6123      	str	r3, [r4, #16]
 8008db4:	65a1      	str	r1, [r4, #88]	@ 0x58
 8008db6:	f04f 0900 	mov.w	r9, #0
 8008dba:	e7db      	b.n	8008d74 <_printf_float+0x154>
 8008dbc:	b913      	cbnz	r3, 8008dc4 <_printf_float+0x1a4>
 8008dbe:	6822      	ldr	r2, [r4, #0]
 8008dc0:	07d2      	lsls	r2, r2, #31
 8008dc2:	d501      	bpl.n	8008dc8 <_printf_float+0x1a8>
 8008dc4:	3302      	adds	r3, #2
 8008dc6:	e7f4      	b.n	8008db2 <_printf_float+0x192>
 8008dc8:	2301      	movs	r3, #1
 8008dca:	e7f2      	b.n	8008db2 <_printf_float+0x192>
 8008dcc:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8008dd0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008dd2:	4299      	cmp	r1, r3
 8008dd4:	db05      	blt.n	8008de2 <_printf_float+0x1c2>
 8008dd6:	6823      	ldr	r3, [r4, #0]
 8008dd8:	6121      	str	r1, [r4, #16]
 8008dda:	07d8      	lsls	r0, r3, #31
 8008ddc:	d5ea      	bpl.n	8008db4 <_printf_float+0x194>
 8008dde:	1c4b      	adds	r3, r1, #1
 8008de0:	e7e7      	b.n	8008db2 <_printf_float+0x192>
 8008de2:	2900      	cmp	r1, #0
 8008de4:	bfd4      	ite	le
 8008de6:	f1c1 0202 	rsble	r2, r1, #2
 8008dea:	2201      	movgt	r2, #1
 8008dec:	4413      	add	r3, r2
 8008dee:	e7e0      	b.n	8008db2 <_printf_float+0x192>
 8008df0:	6823      	ldr	r3, [r4, #0]
 8008df2:	055a      	lsls	r2, r3, #21
 8008df4:	d407      	bmi.n	8008e06 <_printf_float+0x1e6>
 8008df6:	6923      	ldr	r3, [r4, #16]
 8008df8:	4642      	mov	r2, r8
 8008dfa:	4631      	mov	r1, r6
 8008dfc:	4628      	mov	r0, r5
 8008dfe:	47b8      	blx	r7
 8008e00:	3001      	adds	r0, #1
 8008e02:	d12b      	bne.n	8008e5c <_printf_float+0x23c>
 8008e04:	e767      	b.n	8008cd6 <_printf_float+0xb6>
 8008e06:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008e0a:	f240 80dd 	bls.w	8008fc8 <_printf_float+0x3a8>
 8008e0e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008e12:	2200      	movs	r2, #0
 8008e14:	2300      	movs	r3, #0
 8008e16:	f7f7 fe67 	bl	8000ae8 <__aeabi_dcmpeq>
 8008e1a:	2800      	cmp	r0, #0
 8008e1c:	d033      	beq.n	8008e86 <_printf_float+0x266>
 8008e1e:	4a37      	ldr	r2, [pc, #220]	@ (8008efc <_printf_float+0x2dc>)
 8008e20:	2301      	movs	r3, #1
 8008e22:	4631      	mov	r1, r6
 8008e24:	4628      	mov	r0, r5
 8008e26:	47b8      	blx	r7
 8008e28:	3001      	adds	r0, #1
 8008e2a:	f43f af54 	beq.w	8008cd6 <_printf_float+0xb6>
 8008e2e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8008e32:	4543      	cmp	r3, r8
 8008e34:	db02      	blt.n	8008e3c <_printf_float+0x21c>
 8008e36:	6823      	ldr	r3, [r4, #0]
 8008e38:	07d8      	lsls	r0, r3, #31
 8008e3a:	d50f      	bpl.n	8008e5c <_printf_float+0x23c>
 8008e3c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008e40:	4631      	mov	r1, r6
 8008e42:	4628      	mov	r0, r5
 8008e44:	47b8      	blx	r7
 8008e46:	3001      	adds	r0, #1
 8008e48:	f43f af45 	beq.w	8008cd6 <_printf_float+0xb6>
 8008e4c:	f04f 0900 	mov.w	r9, #0
 8008e50:	f108 38ff 	add.w	r8, r8, #4294967295
 8008e54:	f104 0a1a 	add.w	sl, r4, #26
 8008e58:	45c8      	cmp	r8, r9
 8008e5a:	dc09      	bgt.n	8008e70 <_printf_float+0x250>
 8008e5c:	6823      	ldr	r3, [r4, #0]
 8008e5e:	079b      	lsls	r3, r3, #30
 8008e60:	f100 8103 	bmi.w	800906a <_printf_float+0x44a>
 8008e64:	68e0      	ldr	r0, [r4, #12]
 8008e66:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008e68:	4298      	cmp	r0, r3
 8008e6a:	bfb8      	it	lt
 8008e6c:	4618      	movlt	r0, r3
 8008e6e:	e734      	b.n	8008cda <_printf_float+0xba>
 8008e70:	2301      	movs	r3, #1
 8008e72:	4652      	mov	r2, sl
 8008e74:	4631      	mov	r1, r6
 8008e76:	4628      	mov	r0, r5
 8008e78:	47b8      	blx	r7
 8008e7a:	3001      	adds	r0, #1
 8008e7c:	f43f af2b 	beq.w	8008cd6 <_printf_float+0xb6>
 8008e80:	f109 0901 	add.w	r9, r9, #1
 8008e84:	e7e8      	b.n	8008e58 <_printf_float+0x238>
 8008e86:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	dc39      	bgt.n	8008f00 <_printf_float+0x2e0>
 8008e8c:	4a1b      	ldr	r2, [pc, #108]	@ (8008efc <_printf_float+0x2dc>)
 8008e8e:	2301      	movs	r3, #1
 8008e90:	4631      	mov	r1, r6
 8008e92:	4628      	mov	r0, r5
 8008e94:	47b8      	blx	r7
 8008e96:	3001      	adds	r0, #1
 8008e98:	f43f af1d 	beq.w	8008cd6 <_printf_float+0xb6>
 8008e9c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8008ea0:	ea59 0303 	orrs.w	r3, r9, r3
 8008ea4:	d102      	bne.n	8008eac <_printf_float+0x28c>
 8008ea6:	6823      	ldr	r3, [r4, #0]
 8008ea8:	07d9      	lsls	r1, r3, #31
 8008eaa:	d5d7      	bpl.n	8008e5c <_printf_float+0x23c>
 8008eac:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008eb0:	4631      	mov	r1, r6
 8008eb2:	4628      	mov	r0, r5
 8008eb4:	47b8      	blx	r7
 8008eb6:	3001      	adds	r0, #1
 8008eb8:	f43f af0d 	beq.w	8008cd6 <_printf_float+0xb6>
 8008ebc:	f04f 0a00 	mov.w	sl, #0
 8008ec0:	f104 0b1a 	add.w	fp, r4, #26
 8008ec4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008ec6:	425b      	negs	r3, r3
 8008ec8:	4553      	cmp	r3, sl
 8008eca:	dc01      	bgt.n	8008ed0 <_printf_float+0x2b0>
 8008ecc:	464b      	mov	r3, r9
 8008ece:	e793      	b.n	8008df8 <_printf_float+0x1d8>
 8008ed0:	2301      	movs	r3, #1
 8008ed2:	465a      	mov	r2, fp
 8008ed4:	4631      	mov	r1, r6
 8008ed6:	4628      	mov	r0, r5
 8008ed8:	47b8      	blx	r7
 8008eda:	3001      	adds	r0, #1
 8008edc:	f43f aefb 	beq.w	8008cd6 <_printf_float+0xb6>
 8008ee0:	f10a 0a01 	add.w	sl, sl, #1
 8008ee4:	e7ee      	b.n	8008ec4 <_printf_float+0x2a4>
 8008ee6:	bf00      	nop
 8008ee8:	7fefffff 	.word	0x7fefffff
 8008eec:	0800b45c 	.word	0x0800b45c
 8008ef0:	0800b458 	.word	0x0800b458
 8008ef4:	0800b464 	.word	0x0800b464
 8008ef8:	0800b460 	.word	0x0800b460
 8008efc:	0800b468 	.word	0x0800b468
 8008f00:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008f02:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008f06:	4553      	cmp	r3, sl
 8008f08:	bfa8      	it	ge
 8008f0a:	4653      	movge	r3, sl
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	4699      	mov	r9, r3
 8008f10:	dc36      	bgt.n	8008f80 <_printf_float+0x360>
 8008f12:	f04f 0b00 	mov.w	fp, #0
 8008f16:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008f1a:	f104 021a 	add.w	r2, r4, #26
 8008f1e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008f20:	9306      	str	r3, [sp, #24]
 8008f22:	eba3 0309 	sub.w	r3, r3, r9
 8008f26:	455b      	cmp	r3, fp
 8008f28:	dc31      	bgt.n	8008f8e <_printf_float+0x36e>
 8008f2a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008f2c:	459a      	cmp	sl, r3
 8008f2e:	dc3a      	bgt.n	8008fa6 <_printf_float+0x386>
 8008f30:	6823      	ldr	r3, [r4, #0]
 8008f32:	07da      	lsls	r2, r3, #31
 8008f34:	d437      	bmi.n	8008fa6 <_printf_float+0x386>
 8008f36:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008f38:	ebaa 0903 	sub.w	r9, sl, r3
 8008f3c:	9b06      	ldr	r3, [sp, #24]
 8008f3e:	ebaa 0303 	sub.w	r3, sl, r3
 8008f42:	4599      	cmp	r9, r3
 8008f44:	bfa8      	it	ge
 8008f46:	4699      	movge	r9, r3
 8008f48:	f1b9 0f00 	cmp.w	r9, #0
 8008f4c:	dc33      	bgt.n	8008fb6 <_printf_float+0x396>
 8008f4e:	f04f 0800 	mov.w	r8, #0
 8008f52:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008f56:	f104 0b1a 	add.w	fp, r4, #26
 8008f5a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008f5c:	ebaa 0303 	sub.w	r3, sl, r3
 8008f60:	eba3 0309 	sub.w	r3, r3, r9
 8008f64:	4543      	cmp	r3, r8
 8008f66:	f77f af79 	ble.w	8008e5c <_printf_float+0x23c>
 8008f6a:	2301      	movs	r3, #1
 8008f6c:	465a      	mov	r2, fp
 8008f6e:	4631      	mov	r1, r6
 8008f70:	4628      	mov	r0, r5
 8008f72:	47b8      	blx	r7
 8008f74:	3001      	adds	r0, #1
 8008f76:	f43f aeae 	beq.w	8008cd6 <_printf_float+0xb6>
 8008f7a:	f108 0801 	add.w	r8, r8, #1
 8008f7e:	e7ec      	b.n	8008f5a <_printf_float+0x33a>
 8008f80:	4642      	mov	r2, r8
 8008f82:	4631      	mov	r1, r6
 8008f84:	4628      	mov	r0, r5
 8008f86:	47b8      	blx	r7
 8008f88:	3001      	adds	r0, #1
 8008f8a:	d1c2      	bne.n	8008f12 <_printf_float+0x2f2>
 8008f8c:	e6a3      	b.n	8008cd6 <_printf_float+0xb6>
 8008f8e:	2301      	movs	r3, #1
 8008f90:	4631      	mov	r1, r6
 8008f92:	4628      	mov	r0, r5
 8008f94:	9206      	str	r2, [sp, #24]
 8008f96:	47b8      	blx	r7
 8008f98:	3001      	adds	r0, #1
 8008f9a:	f43f ae9c 	beq.w	8008cd6 <_printf_float+0xb6>
 8008f9e:	9a06      	ldr	r2, [sp, #24]
 8008fa0:	f10b 0b01 	add.w	fp, fp, #1
 8008fa4:	e7bb      	b.n	8008f1e <_printf_float+0x2fe>
 8008fa6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008faa:	4631      	mov	r1, r6
 8008fac:	4628      	mov	r0, r5
 8008fae:	47b8      	blx	r7
 8008fb0:	3001      	adds	r0, #1
 8008fb2:	d1c0      	bne.n	8008f36 <_printf_float+0x316>
 8008fb4:	e68f      	b.n	8008cd6 <_printf_float+0xb6>
 8008fb6:	9a06      	ldr	r2, [sp, #24]
 8008fb8:	464b      	mov	r3, r9
 8008fba:	4442      	add	r2, r8
 8008fbc:	4631      	mov	r1, r6
 8008fbe:	4628      	mov	r0, r5
 8008fc0:	47b8      	blx	r7
 8008fc2:	3001      	adds	r0, #1
 8008fc4:	d1c3      	bne.n	8008f4e <_printf_float+0x32e>
 8008fc6:	e686      	b.n	8008cd6 <_printf_float+0xb6>
 8008fc8:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008fcc:	f1ba 0f01 	cmp.w	sl, #1
 8008fd0:	dc01      	bgt.n	8008fd6 <_printf_float+0x3b6>
 8008fd2:	07db      	lsls	r3, r3, #31
 8008fd4:	d536      	bpl.n	8009044 <_printf_float+0x424>
 8008fd6:	2301      	movs	r3, #1
 8008fd8:	4642      	mov	r2, r8
 8008fda:	4631      	mov	r1, r6
 8008fdc:	4628      	mov	r0, r5
 8008fde:	47b8      	blx	r7
 8008fe0:	3001      	adds	r0, #1
 8008fe2:	f43f ae78 	beq.w	8008cd6 <_printf_float+0xb6>
 8008fe6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008fea:	4631      	mov	r1, r6
 8008fec:	4628      	mov	r0, r5
 8008fee:	47b8      	blx	r7
 8008ff0:	3001      	adds	r0, #1
 8008ff2:	f43f ae70 	beq.w	8008cd6 <_printf_float+0xb6>
 8008ff6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008ffa:	2200      	movs	r2, #0
 8008ffc:	2300      	movs	r3, #0
 8008ffe:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009002:	f7f7 fd71 	bl	8000ae8 <__aeabi_dcmpeq>
 8009006:	b9c0      	cbnz	r0, 800903a <_printf_float+0x41a>
 8009008:	4653      	mov	r3, sl
 800900a:	f108 0201 	add.w	r2, r8, #1
 800900e:	4631      	mov	r1, r6
 8009010:	4628      	mov	r0, r5
 8009012:	47b8      	blx	r7
 8009014:	3001      	adds	r0, #1
 8009016:	d10c      	bne.n	8009032 <_printf_float+0x412>
 8009018:	e65d      	b.n	8008cd6 <_printf_float+0xb6>
 800901a:	2301      	movs	r3, #1
 800901c:	465a      	mov	r2, fp
 800901e:	4631      	mov	r1, r6
 8009020:	4628      	mov	r0, r5
 8009022:	47b8      	blx	r7
 8009024:	3001      	adds	r0, #1
 8009026:	f43f ae56 	beq.w	8008cd6 <_printf_float+0xb6>
 800902a:	f108 0801 	add.w	r8, r8, #1
 800902e:	45d0      	cmp	r8, sl
 8009030:	dbf3      	blt.n	800901a <_printf_float+0x3fa>
 8009032:	464b      	mov	r3, r9
 8009034:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8009038:	e6df      	b.n	8008dfa <_printf_float+0x1da>
 800903a:	f04f 0800 	mov.w	r8, #0
 800903e:	f104 0b1a 	add.w	fp, r4, #26
 8009042:	e7f4      	b.n	800902e <_printf_float+0x40e>
 8009044:	2301      	movs	r3, #1
 8009046:	4642      	mov	r2, r8
 8009048:	e7e1      	b.n	800900e <_printf_float+0x3ee>
 800904a:	2301      	movs	r3, #1
 800904c:	464a      	mov	r2, r9
 800904e:	4631      	mov	r1, r6
 8009050:	4628      	mov	r0, r5
 8009052:	47b8      	blx	r7
 8009054:	3001      	adds	r0, #1
 8009056:	f43f ae3e 	beq.w	8008cd6 <_printf_float+0xb6>
 800905a:	f108 0801 	add.w	r8, r8, #1
 800905e:	68e3      	ldr	r3, [r4, #12]
 8009060:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009062:	1a5b      	subs	r3, r3, r1
 8009064:	4543      	cmp	r3, r8
 8009066:	dcf0      	bgt.n	800904a <_printf_float+0x42a>
 8009068:	e6fc      	b.n	8008e64 <_printf_float+0x244>
 800906a:	f04f 0800 	mov.w	r8, #0
 800906e:	f104 0919 	add.w	r9, r4, #25
 8009072:	e7f4      	b.n	800905e <_printf_float+0x43e>

08009074 <_printf_common>:
 8009074:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009078:	4616      	mov	r6, r2
 800907a:	4698      	mov	r8, r3
 800907c:	688a      	ldr	r2, [r1, #8]
 800907e:	690b      	ldr	r3, [r1, #16]
 8009080:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009084:	4293      	cmp	r3, r2
 8009086:	bfb8      	it	lt
 8009088:	4613      	movlt	r3, r2
 800908a:	6033      	str	r3, [r6, #0]
 800908c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009090:	4607      	mov	r7, r0
 8009092:	460c      	mov	r4, r1
 8009094:	b10a      	cbz	r2, 800909a <_printf_common+0x26>
 8009096:	3301      	adds	r3, #1
 8009098:	6033      	str	r3, [r6, #0]
 800909a:	6823      	ldr	r3, [r4, #0]
 800909c:	0699      	lsls	r1, r3, #26
 800909e:	bf42      	ittt	mi
 80090a0:	6833      	ldrmi	r3, [r6, #0]
 80090a2:	3302      	addmi	r3, #2
 80090a4:	6033      	strmi	r3, [r6, #0]
 80090a6:	6825      	ldr	r5, [r4, #0]
 80090a8:	f015 0506 	ands.w	r5, r5, #6
 80090ac:	d106      	bne.n	80090bc <_printf_common+0x48>
 80090ae:	f104 0a19 	add.w	sl, r4, #25
 80090b2:	68e3      	ldr	r3, [r4, #12]
 80090b4:	6832      	ldr	r2, [r6, #0]
 80090b6:	1a9b      	subs	r3, r3, r2
 80090b8:	42ab      	cmp	r3, r5
 80090ba:	dc26      	bgt.n	800910a <_printf_common+0x96>
 80090bc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80090c0:	6822      	ldr	r2, [r4, #0]
 80090c2:	3b00      	subs	r3, #0
 80090c4:	bf18      	it	ne
 80090c6:	2301      	movne	r3, #1
 80090c8:	0692      	lsls	r2, r2, #26
 80090ca:	d42b      	bmi.n	8009124 <_printf_common+0xb0>
 80090cc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80090d0:	4641      	mov	r1, r8
 80090d2:	4638      	mov	r0, r7
 80090d4:	47c8      	blx	r9
 80090d6:	3001      	adds	r0, #1
 80090d8:	d01e      	beq.n	8009118 <_printf_common+0xa4>
 80090da:	6823      	ldr	r3, [r4, #0]
 80090dc:	6922      	ldr	r2, [r4, #16]
 80090de:	f003 0306 	and.w	r3, r3, #6
 80090e2:	2b04      	cmp	r3, #4
 80090e4:	bf02      	ittt	eq
 80090e6:	68e5      	ldreq	r5, [r4, #12]
 80090e8:	6833      	ldreq	r3, [r6, #0]
 80090ea:	1aed      	subeq	r5, r5, r3
 80090ec:	68a3      	ldr	r3, [r4, #8]
 80090ee:	bf0c      	ite	eq
 80090f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80090f4:	2500      	movne	r5, #0
 80090f6:	4293      	cmp	r3, r2
 80090f8:	bfc4      	itt	gt
 80090fa:	1a9b      	subgt	r3, r3, r2
 80090fc:	18ed      	addgt	r5, r5, r3
 80090fe:	2600      	movs	r6, #0
 8009100:	341a      	adds	r4, #26
 8009102:	42b5      	cmp	r5, r6
 8009104:	d11a      	bne.n	800913c <_printf_common+0xc8>
 8009106:	2000      	movs	r0, #0
 8009108:	e008      	b.n	800911c <_printf_common+0xa8>
 800910a:	2301      	movs	r3, #1
 800910c:	4652      	mov	r2, sl
 800910e:	4641      	mov	r1, r8
 8009110:	4638      	mov	r0, r7
 8009112:	47c8      	blx	r9
 8009114:	3001      	adds	r0, #1
 8009116:	d103      	bne.n	8009120 <_printf_common+0xac>
 8009118:	f04f 30ff 	mov.w	r0, #4294967295
 800911c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009120:	3501      	adds	r5, #1
 8009122:	e7c6      	b.n	80090b2 <_printf_common+0x3e>
 8009124:	18e1      	adds	r1, r4, r3
 8009126:	1c5a      	adds	r2, r3, #1
 8009128:	2030      	movs	r0, #48	@ 0x30
 800912a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800912e:	4422      	add	r2, r4
 8009130:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009134:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009138:	3302      	adds	r3, #2
 800913a:	e7c7      	b.n	80090cc <_printf_common+0x58>
 800913c:	2301      	movs	r3, #1
 800913e:	4622      	mov	r2, r4
 8009140:	4641      	mov	r1, r8
 8009142:	4638      	mov	r0, r7
 8009144:	47c8      	blx	r9
 8009146:	3001      	adds	r0, #1
 8009148:	d0e6      	beq.n	8009118 <_printf_common+0xa4>
 800914a:	3601      	adds	r6, #1
 800914c:	e7d9      	b.n	8009102 <_printf_common+0x8e>
	...

08009150 <_printf_i>:
 8009150:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009154:	7e0f      	ldrb	r7, [r1, #24]
 8009156:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009158:	2f78      	cmp	r7, #120	@ 0x78
 800915a:	4691      	mov	r9, r2
 800915c:	4680      	mov	r8, r0
 800915e:	460c      	mov	r4, r1
 8009160:	469a      	mov	sl, r3
 8009162:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009166:	d807      	bhi.n	8009178 <_printf_i+0x28>
 8009168:	2f62      	cmp	r7, #98	@ 0x62
 800916a:	d80a      	bhi.n	8009182 <_printf_i+0x32>
 800916c:	2f00      	cmp	r7, #0
 800916e:	f000 80d1 	beq.w	8009314 <_printf_i+0x1c4>
 8009172:	2f58      	cmp	r7, #88	@ 0x58
 8009174:	f000 80b8 	beq.w	80092e8 <_printf_i+0x198>
 8009178:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800917c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009180:	e03a      	b.n	80091f8 <_printf_i+0xa8>
 8009182:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009186:	2b15      	cmp	r3, #21
 8009188:	d8f6      	bhi.n	8009178 <_printf_i+0x28>
 800918a:	a101      	add	r1, pc, #4	@ (adr r1, 8009190 <_printf_i+0x40>)
 800918c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009190:	080091e9 	.word	0x080091e9
 8009194:	080091fd 	.word	0x080091fd
 8009198:	08009179 	.word	0x08009179
 800919c:	08009179 	.word	0x08009179
 80091a0:	08009179 	.word	0x08009179
 80091a4:	08009179 	.word	0x08009179
 80091a8:	080091fd 	.word	0x080091fd
 80091ac:	08009179 	.word	0x08009179
 80091b0:	08009179 	.word	0x08009179
 80091b4:	08009179 	.word	0x08009179
 80091b8:	08009179 	.word	0x08009179
 80091bc:	080092fb 	.word	0x080092fb
 80091c0:	08009227 	.word	0x08009227
 80091c4:	080092b5 	.word	0x080092b5
 80091c8:	08009179 	.word	0x08009179
 80091cc:	08009179 	.word	0x08009179
 80091d0:	0800931d 	.word	0x0800931d
 80091d4:	08009179 	.word	0x08009179
 80091d8:	08009227 	.word	0x08009227
 80091dc:	08009179 	.word	0x08009179
 80091e0:	08009179 	.word	0x08009179
 80091e4:	080092bd 	.word	0x080092bd
 80091e8:	6833      	ldr	r3, [r6, #0]
 80091ea:	1d1a      	adds	r2, r3, #4
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	6032      	str	r2, [r6, #0]
 80091f0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80091f4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80091f8:	2301      	movs	r3, #1
 80091fa:	e09c      	b.n	8009336 <_printf_i+0x1e6>
 80091fc:	6833      	ldr	r3, [r6, #0]
 80091fe:	6820      	ldr	r0, [r4, #0]
 8009200:	1d19      	adds	r1, r3, #4
 8009202:	6031      	str	r1, [r6, #0]
 8009204:	0606      	lsls	r6, r0, #24
 8009206:	d501      	bpl.n	800920c <_printf_i+0xbc>
 8009208:	681d      	ldr	r5, [r3, #0]
 800920a:	e003      	b.n	8009214 <_printf_i+0xc4>
 800920c:	0645      	lsls	r5, r0, #25
 800920e:	d5fb      	bpl.n	8009208 <_printf_i+0xb8>
 8009210:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009214:	2d00      	cmp	r5, #0
 8009216:	da03      	bge.n	8009220 <_printf_i+0xd0>
 8009218:	232d      	movs	r3, #45	@ 0x2d
 800921a:	426d      	negs	r5, r5
 800921c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009220:	4858      	ldr	r0, [pc, #352]	@ (8009384 <_printf_i+0x234>)
 8009222:	230a      	movs	r3, #10
 8009224:	e011      	b.n	800924a <_printf_i+0xfa>
 8009226:	6821      	ldr	r1, [r4, #0]
 8009228:	6833      	ldr	r3, [r6, #0]
 800922a:	0608      	lsls	r0, r1, #24
 800922c:	f853 5b04 	ldr.w	r5, [r3], #4
 8009230:	d402      	bmi.n	8009238 <_printf_i+0xe8>
 8009232:	0649      	lsls	r1, r1, #25
 8009234:	bf48      	it	mi
 8009236:	b2ad      	uxthmi	r5, r5
 8009238:	2f6f      	cmp	r7, #111	@ 0x6f
 800923a:	4852      	ldr	r0, [pc, #328]	@ (8009384 <_printf_i+0x234>)
 800923c:	6033      	str	r3, [r6, #0]
 800923e:	bf14      	ite	ne
 8009240:	230a      	movne	r3, #10
 8009242:	2308      	moveq	r3, #8
 8009244:	2100      	movs	r1, #0
 8009246:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800924a:	6866      	ldr	r6, [r4, #4]
 800924c:	60a6      	str	r6, [r4, #8]
 800924e:	2e00      	cmp	r6, #0
 8009250:	db05      	blt.n	800925e <_printf_i+0x10e>
 8009252:	6821      	ldr	r1, [r4, #0]
 8009254:	432e      	orrs	r6, r5
 8009256:	f021 0104 	bic.w	r1, r1, #4
 800925a:	6021      	str	r1, [r4, #0]
 800925c:	d04b      	beq.n	80092f6 <_printf_i+0x1a6>
 800925e:	4616      	mov	r6, r2
 8009260:	fbb5 f1f3 	udiv	r1, r5, r3
 8009264:	fb03 5711 	mls	r7, r3, r1, r5
 8009268:	5dc7      	ldrb	r7, [r0, r7]
 800926a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800926e:	462f      	mov	r7, r5
 8009270:	42bb      	cmp	r3, r7
 8009272:	460d      	mov	r5, r1
 8009274:	d9f4      	bls.n	8009260 <_printf_i+0x110>
 8009276:	2b08      	cmp	r3, #8
 8009278:	d10b      	bne.n	8009292 <_printf_i+0x142>
 800927a:	6823      	ldr	r3, [r4, #0]
 800927c:	07df      	lsls	r7, r3, #31
 800927e:	d508      	bpl.n	8009292 <_printf_i+0x142>
 8009280:	6923      	ldr	r3, [r4, #16]
 8009282:	6861      	ldr	r1, [r4, #4]
 8009284:	4299      	cmp	r1, r3
 8009286:	bfde      	ittt	le
 8009288:	2330      	movle	r3, #48	@ 0x30
 800928a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800928e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009292:	1b92      	subs	r2, r2, r6
 8009294:	6122      	str	r2, [r4, #16]
 8009296:	f8cd a000 	str.w	sl, [sp]
 800929a:	464b      	mov	r3, r9
 800929c:	aa03      	add	r2, sp, #12
 800929e:	4621      	mov	r1, r4
 80092a0:	4640      	mov	r0, r8
 80092a2:	f7ff fee7 	bl	8009074 <_printf_common>
 80092a6:	3001      	adds	r0, #1
 80092a8:	d14a      	bne.n	8009340 <_printf_i+0x1f0>
 80092aa:	f04f 30ff 	mov.w	r0, #4294967295
 80092ae:	b004      	add	sp, #16
 80092b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80092b4:	6823      	ldr	r3, [r4, #0]
 80092b6:	f043 0320 	orr.w	r3, r3, #32
 80092ba:	6023      	str	r3, [r4, #0]
 80092bc:	4832      	ldr	r0, [pc, #200]	@ (8009388 <_printf_i+0x238>)
 80092be:	2778      	movs	r7, #120	@ 0x78
 80092c0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80092c4:	6823      	ldr	r3, [r4, #0]
 80092c6:	6831      	ldr	r1, [r6, #0]
 80092c8:	061f      	lsls	r7, r3, #24
 80092ca:	f851 5b04 	ldr.w	r5, [r1], #4
 80092ce:	d402      	bmi.n	80092d6 <_printf_i+0x186>
 80092d0:	065f      	lsls	r7, r3, #25
 80092d2:	bf48      	it	mi
 80092d4:	b2ad      	uxthmi	r5, r5
 80092d6:	6031      	str	r1, [r6, #0]
 80092d8:	07d9      	lsls	r1, r3, #31
 80092da:	bf44      	itt	mi
 80092dc:	f043 0320 	orrmi.w	r3, r3, #32
 80092e0:	6023      	strmi	r3, [r4, #0]
 80092e2:	b11d      	cbz	r5, 80092ec <_printf_i+0x19c>
 80092e4:	2310      	movs	r3, #16
 80092e6:	e7ad      	b.n	8009244 <_printf_i+0xf4>
 80092e8:	4826      	ldr	r0, [pc, #152]	@ (8009384 <_printf_i+0x234>)
 80092ea:	e7e9      	b.n	80092c0 <_printf_i+0x170>
 80092ec:	6823      	ldr	r3, [r4, #0]
 80092ee:	f023 0320 	bic.w	r3, r3, #32
 80092f2:	6023      	str	r3, [r4, #0]
 80092f4:	e7f6      	b.n	80092e4 <_printf_i+0x194>
 80092f6:	4616      	mov	r6, r2
 80092f8:	e7bd      	b.n	8009276 <_printf_i+0x126>
 80092fa:	6833      	ldr	r3, [r6, #0]
 80092fc:	6825      	ldr	r5, [r4, #0]
 80092fe:	6961      	ldr	r1, [r4, #20]
 8009300:	1d18      	adds	r0, r3, #4
 8009302:	6030      	str	r0, [r6, #0]
 8009304:	062e      	lsls	r6, r5, #24
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	d501      	bpl.n	800930e <_printf_i+0x1be>
 800930a:	6019      	str	r1, [r3, #0]
 800930c:	e002      	b.n	8009314 <_printf_i+0x1c4>
 800930e:	0668      	lsls	r0, r5, #25
 8009310:	d5fb      	bpl.n	800930a <_printf_i+0x1ba>
 8009312:	8019      	strh	r1, [r3, #0]
 8009314:	2300      	movs	r3, #0
 8009316:	6123      	str	r3, [r4, #16]
 8009318:	4616      	mov	r6, r2
 800931a:	e7bc      	b.n	8009296 <_printf_i+0x146>
 800931c:	6833      	ldr	r3, [r6, #0]
 800931e:	1d1a      	adds	r2, r3, #4
 8009320:	6032      	str	r2, [r6, #0]
 8009322:	681e      	ldr	r6, [r3, #0]
 8009324:	6862      	ldr	r2, [r4, #4]
 8009326:	2100      	movs	r1, #0
 8009328:	4630      	mov	r0, r6
 800932a:	f7f6 ff61 	bl	80001f0 <memchr>
 800932e:	b108      	cbz	r0, 8009334 <_printf_i+0x1e4>
 8009330:	1b80      	subs	r0, r0, r6
 8009332:	6060      	str	r0, [r4, #4]
 8009334:	6863      	ldr	r3, [r4, #4]
 8009336:	6123      	str	r3, [r4, #16]
 8009338:	2300      	movs	r3, #0
 800933a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800933e:	e7aa      	b.n	8009296 <_printf_i+0x146>
 8009340:	6923      	ldr	r3, [r4, #16]
 8009342:	4632      	mov	r2, r6
 8009344:	4649      	mov	r1, r9
 8009346:	4640      	mov	r0, r8
 8009348:	47d0      	blx	sl
 800934a:	3001      	adds	r0, #1
 800934c:	d0ad      	beq.n	80092aa <_printf_i+0x15a>
 800934e:	6823      	ldr	r3, [r4, #0]
 8009350:	079b      	lsls	r3, r3, #30
 8009352:	d413      	bmi.n	800937c <_printf_i+0x22c>
 8009354:	68e0      	ldr	r0, [r4, #12]
 8009356:	9b03      	ldr	r3, [sp, #12]
 8009358:	4298      	cmp	r0, r3
 800935a:	bfb8      	it	lt
 800935c:	4618      	movlt	r0, r3
 800935e:	e7a6      	b.n	80092ae <_printf_i+0x15e>
 8009360:	2301      	movs	r3, #1
 8009362:	4632      	mov	r2, r6
 8009364:	4649      	mov	r1, r9
 8009366:	4640      	mov	r0, r8
 8009368:	47d0      	blx	sl
 800936a:	3001      	adds	r0, #1
 800936c:	d09d      	beq.n	80092aa <_printf_i+0x15a>
 800936e:	3501      	adds	r5, #1
 8009370:	68e3      	ldr	r3, [r4, #12]
 8009372:	9903      	ldr	r1, [sp, #12]
 8009374:	1a5b      	subs	r3, r3, r1
 8009376:	42ab      	cmp	r3, r5
 8009378:	dcf2      	bgt.n	8009360 <_printf_i+0x210>
 800937a:	e7eb      	b.n	8009354 <_printf_i+0x204>
 800937c:	2500      	movs	r5, #0
 800937e:	f104 0619 	add.w	r6, r4, #25
 8009382:	e7f5      	b.n	8009370 <_printf_i+0x220>
 8009384:	0800b46a 	.word	0x0800b46a
 8009388:	0800b47b 	.word	0x0800b47b

0800938c <std>:
 800938c:	2300      	movs	r3, #0
 800938e:	b510      	push	{r4, lr}
 8009390:	4604      	mov	r4, r0
 8009392:	e9c0 3300 	strd	r3, r3, [r0]
 8009396:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800939a:	6083      	str	r3, [r0, #8]
 800939c:	8181      	strh	r1, [r0, #12]
 800939e:	6643      	str	r3, [r0, #100]	@ 0x64
 80093a0:	81c2      	strh	r2, [r0, #14]
 80093a2:	6183      	str	r3, [r0, #24]
 80093a4:	4619      	mov	r1, r3
 80093a6:	2208      	movs	r2, #8
 80093a8:	305c      	adds	r0, #92	@ 0x5c
 80093aa:	f000 f8f4 	bl	8009596 <memset>
 80093ae:	4b0d      	ldr	r3, [pc, #52]	@ (80093e4 <std+0x58>)
 80093b0:	6263      	str	r3, [r4, #36]	@ 0x24
 80093b2:	4b0d      	ldr	r3, [pc, #52]	@ (80093e8 <std+0x5c>)
 80093b4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80093b6:	4b0d      	ldr	r3, [pc, #52]	@ (80093ec <std+0x60>)
 80093b8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80093ba:	4b0d      	ldr	r3, [pc, #52]	@ (80093f0 <std+0x64>)
 80093bc:	6323      	str	r3, [r4, #48]	@ 0x30
 80093be:	4b0d      	ldr	r3, [pc, #52]	@ (80093f4 <std+0x68>)
 80093c0:	6224      	str	r4, [r4, #32]
 80093c2:	429c      	cmp	r4, r3
 80093c4:	d006      	beq.n	80093d4 <std+0x48>
 80093c6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80093ca:	4294      	cmp	r4, r2
 80093cc:	d002      	beq.n	80093d4 <std+0x48>
 80093ce:	33d0      	adds	r3, #208	@ 0xd0
 80093d0:	429c      	cmp	r4, r3
 80093d2:	d105      	bne.n	80093e0 <std+0x54>
 80093d4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80093d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80093dc:	f000 b958 	b.w	8009690 <__retarget_lock_init_recursive>
 80093e0:	bd10      	pop	{r4, pc}
 80093e2:	bf00      	nop
 80093e4:	08009511 	.word	0x08009511
 80093e8:	08009533 	.word	0x08009533
 80093ec:	0800956b 	.word	0x0800956b
 80093f0:	0800958f 	.word	0x0800958f
 80093f4:	20000e38 	.word	0x20000e38

080093f8 <stdio_exit_handler>:
 80093f8:	4a02      	ldr	r2, [pc, #8]	@ (8009404 <stdio_exit_handler+0xc>)
 80093fa:	4903      	ldr	r1, [pc, #12]	@ (8009408 <stdio_exit_handler+0x10>)
 80093fc:	4803      	ldr	r0, [pc, #12]	@ (800940c <stdio_exit_handler+0x14>)
 80093fe:	f000 b869 	b.w	80094d4 <_fwalk_sglue>
 8009402:	bf00      	nop
 8009404:	2000011c 	.word	0x2000011c
 8009408:	0800ad45 	.word	0x0800ad45
 800940c:	2000012c 	.word	0x2000012c

08009410 <cleanup_stdio>:
 8009410:	6841      	ldr	r1, [r0, #4]
 8009412:	4b0c      	ldr	r3, [pc, #48]	@ (8009444 <cleanup_stdio+0x34>)
 8009414:	4299      	cmp	r1, r3
 8009416:	b510      	push	{r4, lr}
 8009418:	4604      	mov	r4, r0
 800941a:	d001      	beq.n	8009420 <cleanup_stdio+0x10>
 800941c:	f001 fc92 	bl	800ad44 <_fflush_r>
 8009420:	68a1      	ldr	r1, [r4, #8]
 8009422:	4b09      	ldr	r3, [pc, #36]	@ (8009448 <cleanup_stdio+0x38>)
 8009424:	4299      	cmp	r1, r3
 8009426:	d002      	beq.n	800942e <cleanup_stdio+0x1e>
 8009428:	4620      	mov	r0, r4
 800942a:	f001 fc8b 	bl	800ad44 <_fflush_r>
 800942e:	68e1      	ldr	r1, [r4, #12]
 8009430:	4b06      	ldr	r3, [pc, #24]	@ (800944c <cleanup_stdio+0x3c>)
 8009432:	4299      	cmp	r1, r3
 8009434:	d004      	beq.n	8009440 <cleanup_stdio+0x30>
 8009436:	4620      	mov	r0, r4
 8009438:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800943c:	f001 bc82 	b.w	800ad44 <_fflush_r>
 8009440:	bd10      	pop	{r4, pc}
 8009442:	bf00      	nop
 8009444:	20000e38 	.word	0x20000e38
 8009448:	20000ea0 	.word	0x20000ea0
 800944c:	20000f08 	.word	0x20000f08

08009450 <global_stdio_init.part.0>:
 8009450:	b510      	push	{r4, lr}
 8009452:	4b0b      	ldr	r3, [pc, #44]	@ (8009480 <global_stdio_init.part.0+0x30>)
 8009454:	4c0b      	ldr	r4, [pc, #44]	@ (8009484 <global_stdio_init.part.0+0x34>)
 8009456:	4a0c      	ldr	r2, [pc, #48]	@ (8009488 <global_stdio_init.part.0+0x38>)
 8009458:	601a      	str	r2, [r3, #0]
 800945a:	4620      	mov	r0, r4
 800945c:	2200      	movs	r2, #0
 800945e:	2104      	movs	r1, #4
 8009460:	f7ff ff94 	bl	800938c <std>
 8009464:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8009468:	2201      	movs	r2, #1
 800946a:	2109      	movs	r1, #9
 800946c:	f7ff ff8e 	bl	800938c <std>
 8009470:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8009474:	2202      	movs	r2, #2
 8009476:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800947a:	2112      	movs	r1, #18
 800947c:	f7ff bf86 	b.w	800938c <std>
 8009480:	20000f70 	.word	0x20000f70
 8009484:	20000e38 	.word	0x20000e38
 8009488:	080093f9 	.word	0x080093f9

0800948c <__sfp_lock_acquire>:
 800948c:	4801      	ldr	r0, [pc, #4]	@ (8009494 <__sfp_lock_acquire+0x8>)
 800948e:	f000 b900 	b.w	8009692 <__retarget_lock_acquire_recursive>
 8009492:	bf00      	nop
 8009494:	20000f79 	.word	0x20000f79

08009498 <__sfp_lock_release>:
 8009498:	4801      	ldr	r0, [pc, #4]	@ (80094a0 <__sfp_lock_release+0x8>)
 800949a:	f000 b8fb 	b.w	8009694 <__retarget_lock_release_recursive>
 800949e:	bf00      	nop
 80094a0:	20000f79 	.word	0x20000f79

080094a4 <__sinit>:
 80094a4:	b510      	push	{r4, lr}
 80094a6:	4604      	mov	r4, r0
 80094a8:	f7ff fff0 	bl	800948c <__sfp_lock_acquire>
 80094ac:	6a23      	ldr	r3, [r4, #32]
 80094ae:	b11b      	cbz	r3, 80094b8 <__sinit+0x14>
 80094b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80094b4:	f7ff bff0 	b.w	8009498 <__sfp_lock_release>
 80094b8:	4b04      	ldr	r3, [pc, #16]	@ (80094cc <__sinit+0x28>)
 80094ba:	6223      	str	r3, [r4, #32]
 80094bc:	4b04      	ldr	r3, [pc, #16]	@ (80094d0 <__sinit+0x2c>)
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d1f5      	bne.n	80094b0 <__sinit+0xc>
 80094c4:	f7ff ffc4 	bl	8009450 <global_stdio_init.part.0>
 80094c8:	e7f2      	b.n	80094b0 <__sinit+0xc>
 80094ca:	bf00      	nop
 80094cc:	08009411 	.word	0x08009411
 80094d0:	20000f70 	.word	0x20000f70

080094d4 <_fwalk_sglue>:
 80094d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80094d8:	4607      	mov	r7, r0
 80094da:	4688      	mov	r8, r1
 80094dc:	4614      	mov	r4, r2
 80094de:	2600      	movs	r6, #0
 80094e0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80094e4:	f1b9 0901 	subs.w	r9, r9, #1
 80094e8:	d505      	bpl.n	80094f6 <_fwalk_sglue+0x22>
 80094ea:	6824      	ldr	r4, [r4, #0]
 80094ec:	2c00      	cmp	r4, #0
 80094ee:	d1f7      	bne.n	80094e0 <_fwalk_sglue+0xc>
 80094f0:	4630      	mov	r0, r6
 80094f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80094f6:	89ab      	ldrh	r3, [r5, #12]
 80094f8:	2b01      	cmp	r3, #1
 80094fa:	d907      	bls.n	800950c <_fwalk_sglue+0x38>
 80094fc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009500:	3301      	adds	r3, #1
 8009502:	d003      	beq.n	800950c <_fwalk_sglue+0x38>
 8009504:	4629      	mov	r1, r5
 8009506:	4638      	mov	r0, r7
 8009508:	47c0      	blx	r8
 800950a:	4306      	orrs	r6, r0
 800950c:	3568      	adds	r5, #104	@ 0x68
 800950e:	e7e9      	b.n	80094e4 <_fwalk_sglue+0x10>

08009510 <__sread>:
 8009510:	b510      	push	{r4, lr}
 8009512:	460c      	mov	r4, r1
 8009514:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009518:	f000 f86c 	bl	80095f4 <_read_r>
 800951c:	2800      	cmp	r0, #0
 800951e:	bfab      	itete	ge
 8009520:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8009522:	89a3      	ldrhlt	r3, [r4, #12]
 8009524:	181b      	addge	r3, r3, r0
 8009526:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800952a:	bfac      	ite	ge
 800952c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800952e:	81a3      	strhlt	r3, [r4, #12]
 8009530:	bd10      	pop	{r4, pc}

08009532 <__swrite>:
 8009532:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009536:	461f      	mov	r7, r3
 8009538:	898b      	ldrh	r3, [r1, #12]
 800953a:	05db      	lsls	r3, r3, #23
 800953c:	4605      	mov	r5, r0
 800953e:	460c      	mov	r4, r1
 8009540:	4616      	mov	r6, r2
 8009542:	d505      	bpl.n	8009550 <__swrite+0x1e>
 8009544:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009548:	2302      	movs	r3, #2
 800954a:	2200      	movs	r2, #0
 800954c:	f000 f840 	bl	80095d0 <_lseek_r>
 8009550:	89a3      	ldrh	r3, [r4, #12]
 8009552:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009556:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800955a:	81a3      	strh	r3, [r4, #12]
 800955c:	4632      	mov	r2, r6
 800955e:	463b      	mov	r3, r7
 8009560:	4628      	mov	r0, r5
 8009562:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009566:	f000 b857 	b.w	8009618 <_write_r>

0800956a <__sseek>:
 800956a:	b510      	push	{r4, lr}
 800956c:	460c      	mov	r4, r1
 800956e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009572:	f000 f82d 	bl	80095d0 <_lseek_r>
 8009576:	1c43      	adds	r3, r0, #1
 8009578:	89a3      	ldrh	r3, [r4, #12]
 800957a:	bf15      	itete	ne
 800957c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800957e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8009582:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8009586:	81a3      	strheq	r3, [r4, #12]
 8009588:	bf18      	it	ne
 800958a:	81a3      	strhne	r3, [r4, #12]
 800958c:	bd10      	pop	{r4, pc}

0800958e <__sclose>:
 800958e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009592:	f000 b80d 	b.w	80095b0 <_close_r>

08009596 <memset>:
 8009596:	4402      	add	r2, r0
 8009598:	4603      	mov	r3, r0
 800959a:	4293      	cmp	r3, r2
 800959c:	d100      	bne.n	80095a0 <memset+0xa>
 800959e:	4770      	bx	lr
 80095a0:	f803 1b01 	strb.w	r1, [r3], #1
 80095a4:	e7f9      	b.n	800959a <memset+0x4>
	...

080095a8 <_localeconv_r>:
 80095a8:	4800      	ldr	r0, [pc, #0]	@ (80095ac <_localeconv_r+0x4>)
 80095aa:	4770      	bx	lr
 80095ac:	20000268 	.word	0x20000268

080095b0 <_close_r>:
 80095b0:	b538      	push	{r3, r4, r5, lr}
 80095b2:	4d06      	ldr	r5, [pc, #24]	@ (80095cc <_close_r+0x1c>)
 80095b4:	2300      	movs	r3, #0
 80095b6:	4604      	mov	r4, r0
 80095b8:	4608      	mov	r0, r1
 80095ba:	602b      	str	r3, [r5, #0]
 80095bc:	f7f8 fa74 	bl	8001aa8 <_close>
 80095c0:	1c43      	adds	r3, r0, #1
 80095c2:	d102      	bne.n	80095ca <_close_r+0x1a>
 80095c4:	682b      	ldr	r3, [r5, #0]
 80095c6:	b103      	cbz	r3, 80095ca <_close_r+0x1a>
 80095c8:	6023      	str	r3, [r4, #0]
 80095ca:	bd38      	pop	{r3, r4, r5, pc}
 80095cc:	20000f74 	.word	0x20000f74

080095d0 <_lseek_r>:
 80095d0:	b538      	push	{r3, r4, r5, lr}
 80095d2:	4d07      	ldr	r5, [pc, #28]	@ (80095f0 <_lseek_r+0x20>)
 80095d4:	4604      	mov	r4, r0
 80095d6:	4608      	mov	r0, r1
 80095d8:	4611      	mov	r1, r2
 80095da:	2200      	movs	r2, #0
 80095dc:	602a      	str	r2, [r5, #0]
 80095de:	461a      	mov	r2, r3
 80095e0:	f7f8 fa89 	bl	8001af6 <_lseek>
 80095e4:	1c43      	adds	r3, r0, #1
 80095e6:	d102      	bne.n	80095ee <_lseek_r+0x1e>
 80095e8:	682b      	ldr	r3, [r5, #0]
 80095ea:	b103      	cbz	r3, 80095ee <_lseek_r+0x1e>
 80095ec:	6023      	str	r3, [r4, #0]
 80095ee:	bd38      	pop	{r3, r4, r5, pc}
 80095f0:	20000f74 	.word	0x20000f74

080095f4 <_read_r>:
 80095f4:	b538      	push	{r3, r4, r5, lr}
 80095f6:	4d07      	ldr	r5, [pc, #28]	@ (8009614 <_read_r+0x20>)
 80095f8:	4604      	mov	r4, r0
 80095fa:	4608      	mov	r0, r1
 80095fc:	4611      	mov	r1, r2
 80095fe:	2200      	movs	r2, #0
 8009600:	602a      	str	r2, [r5, #0]
 8009602:	461a      	mov	r2, r3
 8009604:	f7f8 fa17 	bl	8001a36 <_read>
 8009608:	1c43      	adds	r3, r0, #1
 800960a:	d102      	bne.n	8009612 <_read_r+0x1e>
 800960c:	682b      	ldr	r3, [r5, #0]
 800960e:	b103      	cbz	r3, 8009612 <_read_r+0x1e>
 8009610:	6023      	str	r3, [r4, #0]
 8009612:	bd38      	pop	{r3, r4, r5, pc}
 8009614:	20000f74 	.word	0x20000f74

08009618 <_write_r>:
 8009618:	b538      	push	{r3, r4, r5, lr}
 800961a:	4d07      	ldr	r5, [pc, #28]	@ (8009638 <_write_r+0x20>)
 800961c:	4604      	mov	r4, r0
 800961e:	4608      	mov	r0, r1
 8009620:	4611      	mov	r1, r2
 8009622:	2200      	movs	r2, #0
 8009624:	602a      	str	r2, [r5, #0]
 8009626:	461a      	mov	r2, r3
 8009628:	f7f8 fa22 	bl	8001a70 <_write>
 800962c:	1c43      	adds	r3, r0, #1
 800962e:	d102      	bne.n	8009636 <_write_r+0x1e>
 8009630:	682b      	ldr	r3, [r5, #0]
 8009632:	b103      	cbz	r3, 8009636 <_write_r+0x1e>
 8009634:	6023      	str	r3, [r4, #0]
 8009636:	bd38      	pop	{r3, r4, r5, pc}
 8009638:	20000f74 	.word	0x20000f74

0800963c <__errno>:
 800963c:	4b01      	ldr	r3, [pc, #4]	@ (8009644 <__errno+0x8>)
 800963e:	6818      	ldr	r0, [r3, #0]
 8009640:	4770      	bx	lr
 8009642:	bf00      	nop
 8009644:	20000128 	.word	0x20000128

08009648 <__libc_init_array>:
 8009648:	b570      	push	{r4, r5, r6, lr}
 800964a:	4d0d      	ldr	r5, [pc, #52]	@ (8009680 <__libc_init_array+0x38>)
 800964c:	4c0d      	ldr	r4, [pc, #52]	@ (8009684 <__libc_init_array+0x3c>)
 800964e:	1b64      	subs	r4, r4, r5
 8009650:	10a4      	asrs	r4, r4, #2
 8009652:	2600      	movs	r6, #0
 8009654:	42a6      	cmp	r6, r4
 8009656:	d109      	bne.n	800966c <__libc_init_array+0x24>
 8009658:	4d0b      	ldr	r5, [pc, #44]	@ (8009688 <__libc_init_array+0x40>)
 800965a:	4c0c      	ldr	r4, [pc, #48]	@ (800968c <__libc_init_array+0x44>)
 800965c:	f001 fec0 	bl	800b3e0 <_init>
 8009660:	1b64      	subs	r4, r4, r5
 8009662:	10a4      	asrs	r4, r4, #2
 8009664:	2600      	movs	r6, #0
 8009666:	42a6      	cmp	r6, r4
 8009668:	d105      	bne.n	8009676 <__libc_init_array+0x2e>
 800966a:	bd70      	pop	{r4, r5, r6, pc}
 800966c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009670:	4798      	blx	r3
 8009672:	3601      	adds	r6, #1
 8009674:	e7ee      	b.n	8009654 <__libc_init_array+0xc>
 8009676:	f855 3b04 	ldr.w	r3, [r5], #4
 800967a:	4798      	blx	r3
 800967c:	3601      	adds	r6, #1
 800967e:	e7f2      	b.n	8009666 <__libc_init_array+0x1e>
 8009680:	0800b7d4 	.word	0x0800b7d4
 8009684:	0800b7d4 	.word	0x0800b7d4
 8009688:	0800b7d4 	.word	0x0800b7d4
 800968c:	0800b7d8 	.word	0x0800b7d8

08009690 <__retarget_lock_init_recursive>:
 8009690:	4770      	bx	lr

08009692 <__retarget_lock_acquire_recursive>:
 8009692:	4770      	bx	lr

08009694 <__retarget_lock_release_recursive>:
 8009694:	4770      	bx	lr

08009696 <quorem>:
 8009696:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800969a:	6903      	ldr	r3, [r0, #16]
 800969c:	690c      	ldr	r4, [r1, #16]
 800969e:	42a3      	cmp	r3, r4
 80096a0:	4607      	mov	r7, r0
 80096a2:	db7e      	blt.n	80097a2 <quorem+0x10c>
 80096a4:	3c01      	subs	r4, #1
 80096a6:	f101 0814 	add.w	r8, r1, #20
 80096aa:	00a3      	lsls	r3, r4, #2
 80096ac:	f100 0514 	add.w	r5, r0, #20
 80096b0:	9300      	str	r3, [sp, #0]
 80096b2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80096b6:	9301      	str	r3, [sp, #4]
 80096b8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80096bc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80096c0:	3301      	adds	r3, #1
 80096c2:	429a      	cmp	r2, r3
 80096c4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80096c8:	fbb2 f6f3 	udiv	r6, r2, r3
 80096cc:	d32e      	bcc.n	800972c <quorem+0x96>
 80096ce:	f04f 0a00 	mov.w	sl, #0
 80096d2:	46c4      	mov	ip, r8
 80096d4:	46ae      	mov	lr, r5
 80096d6:	46d3      	mov	fp, sl
 80096d8:	f85c 3b04 	ldr.w	r3, [ip], #4
 80096dc:	b298      	uxth	r0, r3
 80096de:	fb06 a000 	mla	r0, r6, r0, sl
 80096e2:	0c02      	lsrs	r2, r0, #16
 80096e4:	0c1b      	lsrs	r3, r3, #16
 80096e6:	fb06 2303 	mla	r3, r6, r3, r2
 80096ea:	f8de 2000 	ldr.w	r2, [lr]
 80096ee:	b280      	uxth	r0, r0
 80096f0:	b292      	uxth	r2, r2
 80096f2:	1a12      	subs	r2, r2, r0
 80096f4:	445a      	add	r2, fp
 80096f6:	f8de 0000 	ldr.w	r0, [lr]
 80096fa:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80096fe:	b29b      	uxth	r3, r3
 8009700:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8009704:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8009708:	b292      	uxth	r2, r2
 800970a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800970e:	45e1      	cmp	r9, ip
 8009710:	f84e 2b04 	str.w	r2, [lr], #4
 8009714:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8009718:	d2de      	bcs.n	80096d8 <quorem+0x42>
 800971a:	9b00      	ldr	r3, [sp, #0]
 800971c:	58eb      	ldr	r3, [r5, r3]
 800971e:	b92b      	cbnz	r3, 800972c <quorem+0x96>
 8009720:	9b01      	ldr	r3, [sp, #4]
 8009722:	3b04      	subs	r3, #4
 8009724:	429d      	cmp	r5, r3
 8009726:	461a      	mov	r2, r3
 8009728:	d32f      	bcc.n	800978a <quorem+0xf4>
 800972a:	613c      	str	r4, [r7, #16]
 800972c:	4638      	mov	r0, r7
 800972e:	f001 f97d 	bl	800aa2c <__mcmp>
 8009732:	2800      	cmp	r0, #0
 8009734:	db25      	blt.n	8009782 <quorem+0xec>
 8009736:	4629      	mov	r1, r5
 8009738:	2000      	movs	r0, #0
 800973a:	f858 2b04 	ldr.w	r2, [r8], #4
 800973e:	f8d1 c000 	ldr.w	ip, [r1]
 8009742:	fa1f fe82 	uxth.w	lr, r2
 8009746:	fa1f f38c 	uxth.w	r3, ip
 800974a:	eba3 030e 	sub.w	r3, r3, lr
 800974e:	4403      	add	r3, r0
 8009750:	0c12      	lsrs	r2, r2, #16
 8009752:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8009756:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800975a:	b29b      	uxth	r3, r3
 800975c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009760:	45c1      	cmp	r9, r8
 8009762:	f841 3b04 	str.w	r3, [r1], #4
 8009766:	ea4f 4022 	mov.w	r0, r2, asr #16
 800976a:	d2e6      	bcs.n	800973a <quorem+0xa4>
 800976c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009770:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009774:	b922      	cbnz	r2, 8009780 <quorem+0xea>
 8009776:	3b04      	subs	r3, #4
 8009778:	429d      	cmp	r5, r3
 800977a:	461a      	mov	r2, r3
 800977c:	d30b      	bcc.n	8009796 <quorem+0x100>
 800977e:	613c      	str	r4, [r7, #16]
 8009780:	3601      	adds	r6, #1
 8009782:	4630      	mov	r0, r6
 8009784:	b003      	add	sp, #12
 8009786:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800978a:	6812      	ldr	r2, [r2, #0]
 800978c:	3b04      	subs	r3, #4
 800978e:	2a00      	cmp	r2, #0
 8009790:	d1cb      	bne.n	800972a <quorem+0x94>
 8009792:	3c01      	subs	r4, #1
 8009794:	e7c6      	b.n	8009724 <quorem+0x8e>
 8009796:	6812      	ldr	r2, [r2, #0]
 8009798:	3b04      	subs	r3, #4
 800979a:	2a00      	cmp	r2, #0
 800979c:	d1ef      	bne.n	800977e <quorem+0xe8>
 800979e:	3c01      	subs	r4, #1
 80097a0:	e7ea      	b.n	8009778 <quorem+0xe2>
 80097a2:	2000      	movs	r0, #0
 80097a4:	e7ee      	b.n	8009784 <quorem+0xee>
	...

080097a8 <_dtoa_r>:
 80097a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097ac:	69c7      	ldr	r7, [r0, #28]
 80097ae:	b097      	sub	sp, #92	@ 0x5c
 80097b0:	ed8d 0b04 	vstr	d0, [sp, #16]
 80097b4:	ec55 4b10 	vmov	r4, r5, d0
 80097b8:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 80097ba:	9107      	str	r1, [sp, #28]
 80097bc:	4681      	mov	r9, r0
 80097be:	920c      	str	r2, [sp, #48]	@ 0x30
 80097c0:	9311      	str	r3, [sp, #68]	@ 0x44
 80097c2:	b97f      	cbnz	r7, 80097e4 <_dtoa_r+0x3c>
 80097c4:	2010      	movs	r0, #16
 80097c6:	f000 fe09 	bl	800a3dc <malloc>
 80097ca:	4602      	mov	r2, r0
 80097cc:	f8c9 001c 	str.w	r0, [r9, #28]
 80097d0:	b920      	cbnz	r0, 80097dc <_dtoa_r+0x34>
 80097d2:	4ba9      	ldr	r3, [pc, #676]	@ (8009a78 <_dtoa_r+0x2d0>)
 80097d4:	21ef      	movs	r1, #239	@ 0xef
 80097d6:	48a9      	ldr	r0, [pc, #676]	@ (8009a7c <_dtoa_r+0x2d4>)
 80097d8:	f001 fafa 	bl	800add0 <__assert_func>
 80097dc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80097e0:	6007      	str	r7, [r0, #0]
 80097e2:	60c7      	str	r7, [r0, #12]
 80097e4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80097e8:	6819      	ldr	r1, [r3, #0]
 80097ea:	b159      	cbz	r1, 8009804 <_dtoa_r+0x5c>
 80097ec:	685a      	ldr	r2, [r3, #4]
 80097ee:	604a      	str	r2, [r1, #4]
 80097f0:	2301      	movs	r3, #1
 80097f2:	4093      	lsls	r3, r2
 80097f4:	608b      	str	r3, [r1, #8]
 80097f6:	4648      	mov	r0, r9
 80097f8:	f000 fee6 	bl	800a5c8 <_Bfree>
 80097fc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8009800:	2200      	movs	r2, #0
 8009802:	601a      	str	r2, [r3, #0]
 8009804:	1e2b      	subs	r3, r5, #0
 8009806:	bfb9      	ittee	lt
 8009808:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800980c:	9305      	strlt	r3, [sp, #20]
 800980e:	2300      	movge	r3, #0
 8009810:	6033      	strge	r3, [r6, #0]
 8009812:	9f05      	ldr	r7, [sp, #20]
 8009814:	4b9a      	ldr	r3, [pc, #616]	@ (8009a80 <_dtoa_r+0x2d8>)
 8009816:	bfbc      	itt	lt
 8009818:	2201      	movlt	r2, #1
 800981a:	6032      	strlt	r2, [r6, #0]
 800981c:	43bb      	bics	r3, r7
 800981e:	d112      	bne.n	8009846 <_dtoa_r+0x9e>
 8009820:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8009822:	f242 730f 	movw	r3, #9999	@ 0x270f
 8009826:	6013      	str	r3, [r2, #0]
 8009828:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800982c:	4323      	orrs	r3, r4
 800982e:	f000 855a 	beq.w	800a2e6 <_dtoa_r+0xb3e>
 8009832:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009834:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8009a94 <_dtoa_r+0x2ec>
 8009838:	2b00      	cmp	r3, #0
 800983a:	f000 855c 	beq.w	800a2f6 <_dtoa_r+0xb4e>
 800983e:	f10a 0303 	add.w	r3, sl, #3
 8009842:	f000 bd56 	b.w	800a2f2 <_dtoa_r+0xb4a>
 8009846:	ed9d 7b04 	vldr	d7, [sp, #16]
 800984a:	2200      	movs	r2, #0
 800984c:	ec51 0b17 	vmov	r0, r1, d7
 8009850:	2300      	movs	r3, #0
 8009852:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8009856:	f7f7 f947 	bl	8000ae8 <__aeabi_dcmpeq>
 800985a:	4680      	mov	r8, r0
 800985c:	b158      	cbz	r0, 8009876 <_dtoa_r+0xce>
 800985e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8009860:	2301      	movs	r3, #1
 8009862:	6013      	str	r3, [r2, #0]
 8009864:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009866:	b113      	cbz	r3, 800986e <_dtoa_r+0xc6>
 8009868:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800986a:	4b86      	ldr	r3, [pc, #536]	@ (8009a84 <_dtoa_r+0x2dc>)
 800986c:	6013      	str	r3, [r2, #0]
 800986e:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8009a98 <_dtoa_r+0x2f0>
 8009872:	f000 bd40 	b.w	800a2f6 <_dtoa_r+0xb4e>
 8009876:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800987a:	aa14      	add	r2, sp, #80	@ 0x50
 800987c:	a915      	add	r1, sp, #84	@ 0x54
 800987e:	4648      	mov	r0, r9
 8009880:	f001 f984 	bl	800ab8c <__d2b>
 8009884:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8009888:	9002      	str	r0, [sp, #8]
 800988a:	2e00      	cmp	r6, #0
 800988c:	d078      	beq.n	8009980 <_dtoa_r+0x1d8>
 800988e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009890:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8009894:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009898:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800989c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80098a0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80098a4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80098a8:	4619      	mov	r1, r3
 80098aa:	2200      	movs	r2, #0
 80098ac:	4b76      	ldr	r3, [pc, #472]	@ (8009a88 <_dtoa_r+0x2e0>)
 80098ae:	f7f6 fcfb 	bl	80002a8 <__aeabi_dsub>
 80098b2:	a36b      	add	r3, pc, #428	@ (adr r3, 8009a60 <_dtoa_r+0x2b8>)
 80098b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098b8:	f7f6 feae 	bl	8000618 <__aeabi_dmul>
 80098bc:	a36a      	add	r3, pc, #424	@ (adr r3, 8009a68 <_dtoa_r+0x2c0>)
 80098be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098c2:	f7f6 fcf3 	bl	80002ac <__adddf3>
 80098c6:	4604      	mov	r4, r0
 80098c8:	4630      	mov	r0, r6
 80098ca:	460d      	mov	r5, r1
 80098cc:	f7f6 fe3a 	bl	8000544 <__aeabi_i2d>
 80098d0:	a367      	add	r3, pc, #412	@ (adr r3, 8009a70 <_dtoa_r+0x2c8>)
 80098d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098d6:	f7f6 fe9f 	bl	8000618 <__aeabi_dmul>
 80098da:	4602      	mov	r2, r0
 80098dc:	460b      	mov	r3, r1
 80098de:	4620      	mov	r0, r4
 80098e0:	4629      	mov	r1, r5
 80098e2:	f7f6 fce3 	bl	80002ac <__adddf3>
 80098e6:	4604      	mov	r4, r0
 80098e8:	460d      	mov	r5, r1
 80098ea:	f7f7 f945 	bl	8000b78 <__aeabi_d2iz>
 80098ee:	2200      	movs	r2, #0
 80098f0:	4607      	mov	r7, r0
 80098f2:	2300      	movs	r3, #0
 80098f4:	4620      	mov	r0, r4
 80098f6:	4629      	mov	r1, r5
 80098f8:	f7f7 f900 	bl	8000afc <__aeabi_dcmplt>
 80098fc:	b140      	cbz	r0, 8009910 <_dtoa_r+0x168>
 80098fe:	4638      	mov	r0, r7
 8009900:	f7f6 fe20 	bl	8000544 <__aeabi_i2d>
 8009904:	4622      	mov	r2, r4
 8009906:	462b      	mov	r3, r5
 8009908:	f7f7 f8ee 	bl	8000ae8 <__aeabi_dcmpeq>
 800990c:	b900      	cbnz	r0, 8009910 <_dtoa_r+0x168>
 800990e:	3f01      	subs	r7, #1
 8009910:	2f16      	cmp	r7, #22
 8009912:	d852      	bhi.n	80099ba <_dtoa_r+0x212>
 8009914:	4b5d      	ldr	r3, [pc, #372]	@ (8009a8c <_dtoa_r+0x2e4>)
 8009916:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800991a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800991e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8009922:	f7f7 f8eb 	bl	8000afc <__aeabi_dcmplt>
 8009926:	2800      	cmp	r0, #0
 8009928:	d049      	beq.n	80099be <_dtoa_r+0x216>
 800992a:	3f01      	subs	r7, #1
 800992c:	2300      	movs	r3, #0
 800992e:	9310      	str	r3, [sp, #64]	@ 0x40
 8009930:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8009932:	1b9b      	subs	r3, r3, r6
 8009934:	1e5a      	subs	r2, r3, #1
 8009936:	bf45      	ittet	mi
 8009938:	f1c3 0301 	rsbmi	r3, r3, #1
 800993c:	9300      	strmi	r3, [sp, #0]
 800993e:	2300      	movpl	r3, #0
 8009940:	2300      	movmi	r3, #0
 8009942:	9206      	str	r2, [sp, #24]
 8009944:	bf54      	ite	pl
 8009946:	9300      	strpl	r3, [sp, #0]
 8009948:	9306      	strmi	r3, [sp, #24]
 800994a:	2f00      	cmp	r7, #0
 800994c:	db39      	blt.n	80099c2 <_dtoa_r+0x21a>
 800994e:	9b06      	ldr	r3, [sp, #24]
 8009950:	970d      	str	r7, [sp, #52]	@ 0x34
 8009952:	443b      	add	r3, r7
 8009954:	9306      	str	r3, [sp, #24]
 8009956:	2300      	movs	r3, #0
 8009958:	9308      	str	r3, [sp, #32]
 800995a:	9b07      	ldr	r3, [sp, #28]
 800995c:	2b09      	cmp	r3, #9
 800995e:	d863      	bhi.n	8009a28 <_dtoa_r+0x280>
 8009960:	2b05      	cmp	r3, #5
 8009962:	bfc4      	itt	gt
 8009964:	3b04      	subgt	r3, #4
 8009966:	9307      	strgt	r3, [sp, #28]
 8009968:	9b07      	ldr	r3, [sp, #28]
 800996a:	f1a3 0302 	sub.w	r3, r3, #2
 800996e:	bfcc      	ite	gt
 8009970:	2400      	movgt	r4, #0
 8009972:	2401      	movle	r4, #1
 8009974:	2b03      	cmp	r3, #3
 8009976:	d863      	bhi.n	8009a40 <_dtoa_r+0x298>
 8009978:	e8df f003 	tbb	[pc, r3]
 800997c:	2b375452 	.word	0x2b375452
 8009980:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8009984:	441e      	add	r6, r3
 8009986:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800998a:	2b20      	cmp	r3, #32
 800998c:	bfc1      	itttt	gt
 800998e:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8009992:	409f      	lslgt	r7, r3
 8009994:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8009998:	fa24 f303 	lsrgt.w	r3, r4, r3
 800999c:	bfd6      	itet	le
 800999e:	f1c3 0320 	rsble	r3, r3, #32
 80099a2:	ea47 0003 	orrgt.w	r0, r7, r3
 80099a6:	fa04 f003 	lslle.w	r0, r4, r3
 80099aa:	f7f6 fdbb 	bl	8000524 <__aeabi_ui2d>
 80099ae:	2201      	movs	r2, #1
 80099b0:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80099b4:	3e01      	subs	r6, #1
 80099b6:	9212      	str	r2, [sp, #72]	@ 0x48
 80099b8:	e776      	b.n	80098a8 <_dtoa_r+0x100>
 80099ba:	2301      	movs	r3, #1
 80099bc:	e7b7      	b.n	800992e <_dtoa_r+0x186>
 80099be:	9010      	str	r0, [sp, #64]	@ 0x40
 80099c0:	e7b6      	b.n	8009930 <_dtoa_r+0x188>
 80099c2:	9b00      	ldr	r3, [sp, #0]
 80099c4:	1bdb      	subs	r3, r3, r7
 80099c6:	9300      	str	r3, [sp, #0]
 80099c8:	427b      	negs	r3, r7
 80099ca:	9308      	str	r3, [sp, #32]
 80099cc:	2300      	movs	r3, #0
 80099ce:	930d      	str	r3, [sp, #52]	@ 0x34
 80099d0:	e7c3      	b.n	800995a <_dtoa_r+0x1b2>
 80099d2:	2301      	movs	r3, #1
 80099d4:	9309      	str	r3, [sp, #36]	@ 0x24
 80099d6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80099d8:	eb07 0b03 	add.w	fp, r7, r3
 80099dc:	f10b 0301 	add.w	r3, fp, #1
 80099e0:	2b01      	cmp	r3, #1
 80099e2:	9303      	str	r3, [sp, #12]
 80099e4:	bfb8      	it	lt
 80099e6:	2301      	movlt	r3, #1
 80099e8:	e006      	b.n	80099f8 <_dtoa_r+0x250>
 80099ea:	2301      	movs	r3, #1
 80099ec:	9309      	str	r3, [sp, #36]	@ 0x24
 80099ee:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	dd28      	ble.n	8009a46 <_dtoa_r+0x29e>
 80099f4:	469b      	mov	fp, r3
 80099f6:	9303      	str	r3, [sp, #12]
 80099f8:	f8d9 001c 	ldr.w	r0, [r9, #28]
 80099fc:	2100      	movs	r1, #0
 80099fe:	2204      	movs	r2, #4
 8009a00:	f102 0514 	add.w	r5, r2, #20
 8009a04:	429d      	cmp	r5, r3
 8009a06:	d926      	bls.n	8009a56 <_dtoa_r+0x2ae>
 8009a08:	6041      	str	r1, [r0, #4]
 8009a0a:	4648      	mov	r0, r9
 8009a0c:	f000 fd9c 	bl	800a548 <_Balloc>
 8009a10:	4682      	mov	sl, r0
 8009a12:	2800      	cmp	r0, #0
 8009a14:	d142      	bne.n	8009a9c <_dtoa_r+0x2f4>
 8009a16:	4b1e      	ldr	r3, [pc, #120]	@ (8009a90 <_dtoa_r+0x2e8>)
 8009a18:	4602      	mov	r2, r0
 8009a1a:	f240 11af 	movw	r1, #431	@ 0x1af
 8009a1e:	e6da      	b.n	80097d6 <_dtoa_r+0x2e>
 8009a20:	2300      	movs	r3, #0
 8009a22:	e7e3      	b.n	80099ec <_dtoa_r+0x244>
 8009a24:	2300      	movs	r3, #0
 8009a26:	e7d5      	b.n	80099d4 <_dtoa_r+0x22c>
 8009a28:	2401      	movs	r4, #1
 8009a2a:	2300      	movs	r3, #0
 8009a2c:	9307      	str	r3, [sp, #28]
 8009a2e:	9409      	str	r4, [sp, #36]	@ 0x24
 8009a30:	f04f 3bff 	mov.w	fp, #4294967295
 8009a34:	2200      	movs	r2, #0
 8009a36:	f8cd b00c 	str.w	fp, [sp, #12]
 8009a3a:	2312      	movs	r3, #18
 8009a3c:	920c      	str	r2, [sp, #48]	@ 0x30
 8009a3e:	e7db      	b.n	80099f8 <_dtoa_r+0x250>
 8009a40:	2301      	movs	r3, #1
 8009a42:	9309      	str	r3, [sp, #36]	@ 0x24
 8009a44:	e7f4      	b.n	8009a30 <_dtoa_r+0x288>
 8009a46:	f04f 0b01 	mov.w	fp, #1
 8009a4a:	f8cd b00c 	str.w	fp, [sp, #12]
 8009a4e:	465b      	mov	r3, fp
 8009a50:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8009a54:	e7d0      	b.n	80099f8 <_dtoa_r+0x250>
 8009a56:	3101      	adds	r1, #1
 8009a58:	0052      	lsls	r2, r2, #1
 8009a5a:	e7d1      	b.n	8009a00 <_dtoa_r+0x258>
 8009a5c:	f3af 8000 	nop.w
 8009a60:	636f4361 	.word	0x636f4361
 8009a64:	3fd287a7 	.word	0x3fd287a7
 8009a68:	8b60c8b3 	.word	0x8b60c8b3
 8009a6c:	3fc68a28 	.word	0x3fc68a28
 8009a70:	509f79fb 	.word	0x509f79fb
 8009a74:	3fd34413 	.word	0x3fd34413
 8009a78:	0800b499 	.word	0x0800b499
 8009a7c:	0800b4b0 	.word	0x0800b4b0
 8009a80:	7ff00000 	.word	0x7ff00000
 8009a84:	0800b469 	.word	0x0800b469
 8009a88:	3ff80000 	.word	0x3ff80000
 8009a8c:	0800b600 	.word	0x0800b600
 8009a90:	0800b508 	.word	0x0800b508
 8009a94:	0800b495 	.word	0x0800b495
 8009a98:	0800b468 	.word	0x0800b468
 8009a9c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8009aa0:	6018      	str	r0, [r3, #0]
 8009aa2:	9b03      	ldr	r3, [sp, #12]
 8009aa4:	2b0e      	cmp	r3, #14
 8009aa6:	f200 80a1 	bhi.w	8009bec <_dtoa_r+0x444>
 8009aaa:	2c00      	cmp	r4, #0
 8009aac:	f000 809e 	beq.w	8009bec <_dtoa_r+0x444>
 8009ab0:	2f00      	cmp	r7, #0
 8009ab2:	dd33      	ble.n	8009b1c <_dtoa_r+0x374>
 8009ab4:	4b9c      	ldr	r3, [pc, #624]	@ (8009d28 <_dtoa_r+0x580>)
 8009ab6:	f007 020f 	and.w	r2, r7, #15
 8009aba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009abe:	ed93 7b00 	vldr	d7, [r3]
 8009ac2:	05f8      	lsls	r0, r7, #23
 8009ac4:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8009ac8:	ea4f 1427 	mov.w	r4, r7, asr #4
 8009acc:	d516      	bpl.n	8009afc <_dtoa_r+0x354>
 8009ace:	4b97      	ldr	r3, [pc, #604]	@ (8009d2c <_dtoa_r+0x584>)
 8009ad0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8009ad4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009ad8:	f7f6 fec8 	bl	800086c <__aeabi_ddiv>
 8009adc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009ae0:	f004 040f 	and.w	r4, r4, #15
 8009ae4:	2603      	movs	r6, #3
 8009ae6:	4d91      	ldr	r5, [pc, #580]	@ (8009d2c <_dtoa_r+0x584>)
 8009ae8:	b954      	cbnz	r4, 8009b00 <_dtoa_r+0x358>
 8009aea:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8009aee:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009af2:	f7f6 febb 	bl	800086c <__aeabi_ddiv>
 8009af6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009afa:	e028      	b.n	8009b4e <_dtoa_r+0x3a6>
 8009afc:	2602      	movs	r6, #2
 8009afe:	e7f2      	b.n	8009ae6 <_dtoa_r+0x33e>
 8009b00:	07e1      	lsls	r1, r4, #31
 8009b02:	d508      	bpl.n	8009b16 <_dtoa_r+0x36e>
 8009b04:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8009b08:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009b0c:	f7f6 fd84 	bl	8000618 <__aeabi_dmul>
 8009b10:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8009b14:	3601      	adds	r6, #1
 8009b16:	1064      	asrs	r4, r4, #1
 8009b18:	3508      	adds	r5, #8
 8009b1a:	e7e5      	b.n	8009ae8 <_dtoa_r+0x340>
 8009b1c:	f000 80af 	beq.w	8009c7e <_dtoa_r+0x4d6>
 8009b20:	427c      	negs	r4, r7
 8009b22:	4b81      	ldr	r3, [pc, #516]	@ (8009d28 <_dtoa_r+0x580>)
 8009b24:	4d81      	ldr	r5, [pc, #516]	@ (8009d2c <_dtoa_r+0x584>)
 8009b26:	f004 020f 	and.w	r2, r4, #15
 8009b2a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009b2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b32:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8009b36:	f7f6 fd6f 	bl	8000618 <__aeabi_dmul>
 8009b3a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009b3e:	1124      	asrs	r4, r4, #4
 8009b40:	2300      	movs	r3, #0
 8009b42:	2602      	movs	r6, #2
 8009b44:	2c00      	cmp	r4, #0
 8009b46:	f040 808f 	bne.w	8009c68 <_dtoa_r+0x4c0>
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d1d3      	bne.n	8009af6 <_dtoa_r+0x34e>
 8009b4e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009b50:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	f000 8094 	beq.w	8009c82 <_dtoa_r+0x4da>
 8009b5a:	4b75      	ldr	r3, [pc, #468]	@ (8009d30 <_dtoa_r+0x588>)
 8009b5c:	2200      	movs	r2, #0
 8009b5e:	4620      	mov	r0, r4
 8009b60:	4629      	mov	r1, r5
 8009b62:	f7f6 ffcb 	bl	8000afc <__aeabi_dcmplt>
 8009b66:	2800      	cmp	r0, #0
 8009b68:	f000 808b 	beq.w	8009c82 <_dtoa_r+0x4da>
 8009b6c:	9b03      	ldr	r3, [sp, #12]
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	f000 8087 	beq.w	8009c82 <_dtoa_r+0x4da>
 8009b74:	f1bb 0f00 	cmp.w	fp, #0
 8009b78:	dd34      	ble.n	8009be4 <_dtoa_r+0x43c>
 8009b7a:	4620      	mov	r0, r4
 8009b7c:	4b6d      	ldr	r3, [pc, #436]	@ (8009d34 <_dtoa_r+0x58c>)
 8009b7e:	2200      	movs	r2, #0
 8009b80:	4629      	mov	r1, r5
 8009b82:	f7f6 fd49 	bl	8000618 <__aeabi_dmul>
 8009b86:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009b8a:	f107 38ff 	add.w	r8, r7, #4294967295
 8009b8e:	3601      	adds	r6, #1
 8009b90:	465c      	mov	r4, fp
 8009b92:	4630      	mov	r0, r6
 8009b94:	f7f6 fcd6 	bl	8000544 <__aeabi_i2d>
 8009b98:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009b9c:	f7f6 fd3c 	bl	8000618 <__aeabi_dmul>
 8009ba0:	4b65      	ldr	r3, [pc, #404]	@ (8009d38 <_dtoa_r+0x590>)
 8009ba2:	2200      	movs	r2, #0
 8009ba4:	f7f6 fb82 	bl	80002ac <__adddf3>
 8009ba8:	4605      	mov	r5, r0
 8009baa:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8009bae:	2c00      	cmp	r4, #0
 8009bb0:	d16a      	bne.n	8009c88 <_dtoa_r+0x4e0>
 8009bb2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009bb6:	4b61      	ldr	r3, [pc, #388]	@ (8009d3c <_dtoa_r+0x594>)
 8009bb8:	2200      	movs	r2, #0
 8009bba:	f7f6 fb75 	bl	80002a8 <__aeabi_dsub>
 8009bbe:	4602      	mov	r2, r0
 8009bc0:	460b      	mov	r3, r1
 8009bc2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009bc6:	462a      	mov	r2, r5
 8009bc8:	4633      	mov	r3, r6
 8009bca:	f7f6 ffb5 	bl	8000b38 <__aeabi_dcmpgt>
 8009bce:	2800      	cmp	r0, #0
 8009bd0:	f040 8298 	bne.w	800a104 <_dtoa_r+0x95c>
 8009bd4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009bd8:	462a      	mov	r2, r5
 8009bda:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8009bde:	f7f6 ff8d 	bl	8000afc <__aeabi_dcmplt>
 8009be2:	bb38      	cbnz	r0, 8009c34 <_dtoa_r+0x48c>
 8009be4:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8009be8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8009bec:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	f2c0 8157 	blt.w	8009ea2 <_dtoa_r+0x6fa>
 8009bf4:	2f0e      	cmp	r7, #14
 8009bf6:	f300 8154 	bgt.w	8009ea2 <_dtoa_r+0x6fa>
 8009bfa:	4b4b      	ldr	r3, [pc, #300]	@ (8009d28 <_dtoa_r+0x580>)
 8009bfc:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009c00:	ed93 7b00 	vldr	d7, [r3]
 8009c04:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	ed8d 7b00 	vstr	d7, [sp]
 8009c0c:	f280 80e5 	bge.w	8009dda <_dtoa_r+0x632>
 8009c10:	9b03      	ldr	r3, [sp, #12]
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	f300 80e1 	bgt.w	8009dda <_dtoa_r+0x632>
 8009c18:	d10c      	bne.n	8009c34 <_dtoa_r+0x48c>
 8009c1a:	4b48      	ldr	r3, [pc, #288]	@ (8009d3c <_dtoa_r+0x594>)
 8009c1c:	2200      	movs	r2, #0
 8009c1e:	ec51 0b17 	vmov	r0, r1, d7
 8009c22:	f7f6 fcf9 	bl	8000618 <__aeabi_dmul>
 8009c26:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009c2a:	f7f6 ff7b 	bl	8000b24 <__aeabi_dcmpge>
 8009c2e:	2800      	cmp	r0, #0
 8009c30:	f000 8266 	beq.w	800a100 <_dtoa_r+0x958>
 8009c34:	2400      	movs	r4, #0
 8009c36:	4625      	mov	r5, r4
 8009c38:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009c3a:	4656      	mov	r6, sl
 8009c3c:	ea6f 0803 	mvn.w	r8, r3
 8009c40:	2700      	movs	r7, #0
 8009c42:	4621      	mov	r1, r4
 8009c44:	4648      	mov	r0, r9
 8009c46:	f000 fcbf 	bl	800a5c8 <_Bfree>
 8009c4a:	2d00      	cmp	r5, #0
 8009c4c:	f000 80bd 	beq.w	8009dca <_dtoa_r+0x622>
 8009c50:	b12f      	cbz	r7, 8009c5e <_dtoa_r+0x4b6>
 8009c52:	42af      	cmp	r7, r5
 8009c54:	d003      	beq.n	8009c5e <_dtoa_r+0x4b6>
 8009c56:	4639      	mov	r1, r7
 8009c58:	4648      	mov	r0, r9
 8009c5a:	f000 fcb5 	bl	800a5c8 <_Bfree>
 8009c5e:	4629      	mov	r1, r5
 8009c60:	4648      	mov	r0, r9
 8009c62:	f000 fcb1 	bl	800a5c8 <_Bfree>
 8009c66:	e0b0      	b.n	8009dca <_dtoa_r+0x622>
 8009c68:	07e2      	lsls	r2, r4, #31
 8009c6a:	d505      	bpl.n	8009c78 <_dtoa_r+0x4d0>
 8009c6c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009c70:	f7f6 fcd2 	bl	8000618 <__aeabi_dmul>
 8009c74:	3601      	adds	r6, #1
 8009c76:	2301      	movs	r3, #1
 8009c78:	1064      	asrs	r4, r4, #1
 8009c7a:	3508      	adds	r5, #8
 8009c7c:	e762      	b.n	8009b44 <_dtoa_r+0x39c>
 8009c7e:	2602      	movs	r6, #2
 8009c80:	e765      	b.n	8009b4e <_dtoa_r+0x3a6>
 8009c82:	9c03      	ldr	r4, [sp, #12]
 8009c84:	46b8      	mov	r8, r7
 8009c86:	e784      	b.n	8009b92 <_dtoa_r+0x3ea>
 8009c88:	4b27      	ldr	r3, [pc, #156]	@ (8009d28 <_dtoa_r+0x580>)
 8009c8a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009c8c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009c90:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009c94:	4454      	add	r4, sl
 8009c96:	2900      	cmp	r1, #0
 8009c98:	d054      	beq.n	8009d44 <_dtoa_r+0x59c>
 8009c9a:	4929      	ldr	r1, [pc, #164]	@ (8009d40 <_dtoa_r+0x598>)
 8009c9c:	2000      	movs	r0, #0
 8009c9e:	f7f6 fde5 	bl	800086c <__aeabi_ddiv>
 8009ca2:	4633      	mov	r3, r6
 8009ca4:	462a      	mov	r2, r5
 8009ca6:	f7f6 faff 	bl	80002a8 <__aeabi_dsub>
 8009caa:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8009cae:	4656      	mov	r6, sl
 8009cb0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009cb4:	f7f6 ff60 	bl	8000b78 <__aeabi_d2iz>
 8009cb8:	4605      	mov	r5, r0
 8009cba:	f7f6 fc43 	bl	8000544 <__aeabi_i2d>
 8009cbe:	4602      	mov	r2, r0
 8009cc0:	460b      	mov	r3, r1
 8009cc2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009cc6:	f7f6 faef 	bl	80002a8 <__aeabi_dsub>
 8009cca:	3530      	adds	r5, #48	@ 0x30
 8009ccc:	4602      	mov	r2, r0
 8009cce:	460b      	mov	r3, r1
 8009cd0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009cd4:	f806 5b01 	strb.w	r5, [r6], #1
 8009cd8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8009cdc:	f7f6 ff0e 	bl	8000afc <__aeabi_dcmplt>
 8009ce0:	2800      	cmp	r0, #0
 8009ce2:	d172      	bne.n	8009dca <_dtoa_r+0x622>
 8009ce4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009ce8:	4911      	ldr	r1, [pc, #68]	@ (8009d30 <_dtoa_r+0x588>)
 8009cea:	2000      	movs	r0, #0
 8009cec:	f7f6 fadc 	bl	80002a8 <__aeabi_dsub>
 8009cf0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8009cf4:	f7f6 ff02 	bl	8000afc <__aeabi_dcmplt>
 8009cf8:	2800      	cmp	r0, #0
 8009cfa:	f040 80b4 	bne.w	8009e66 <_dtoa_r+0x6be>
 8009cfe:	42a6      	cmp	r6, r4
 8009d00:	f43f af70 	beq.w	8009be4 <_dtoa_r+0x43c>
 8009d04:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8009d08:	4b0a      	ldr	r3, [pc, #40]	@ (8009d34 <_dtoa_r+0x58c>)
 8009d0a:	2200      	movs	r2, #0
 8009d0c:	f7f6 fc84 	bl	8000618 <__aeabi_dmul>
 8009d10:	4b08      	ldr	r3, [pc, #32]	@ (8009d34 <_dtoa_r+0x58c>)
 8009d12:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8009d16:	2200      	movs	r2, #0
 8009d18:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009d1c:	f7f6 fc7c 	bl	8000618 <__aeabi_dmul>
 8009d20:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009d24:	e7c4      	b.n	8009cb0 <_dtoa_r+0x508>
 8009d26:	bf00      	nop
 8009d28:	0800b600 	.word	0x0800b600
 8009d2c:	0800b5d8 	.word	0x0800b5d8
 8009d30:	3ff00000 	.word	0x3ff00000
 8009d34:	40240000 	.word	0x40240000
 8009d38:	401c0000 	.word	0x401c0000
 8009d3c:	40140000 	.word	0x40140000
 8009d40:	3fe00000 	.word	0x3fe00000
 8009d44:	4631      	mov	r1, r6
 8009d46:	4628      	mov	r0, r5
 8009d48:	f7f6 fc66 	bl	8000618 <__aeabi_dmul>
 8009d4c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8009d50:	9413      	str	r4, [sp, #76]	@ 0x4c
 8009d52:	4656      	mov	r6, sl
 8009d54:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009d58:	f7f6 ff0e 	bl	8000b78 <__aeabi_d2iz>
 8009d5c:	4605      	mov	r5, r0
 8009d5e:	f7f6 fbf1 	bl	8000544 <__aeabi_i2d>
 8009d62:	4602      	mov	r2, r0
 8009d64:	460b      	mov	r3, r1
 8009d66:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009d6a:	f7f6 fa9d 	bl	80002a8 <__aeabi_dsub>
 8009d6e:	3530      	adds	r5, #48	@ 0x30
 8009d70:	f806 5b01 	strb.w	r5, [r6], #1
 8009d74:	4602      	mov	r2, r0
 8009d76:	460b      	mov	r3, r1
 8009d78:	42a6      	cmp	r6, r4
 8009d7a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009d7e:	f04f 0200 	mov.w	r2, #0
 8009d82:	d124      	bne.n	8009dce <_dtoa_r+0x626>
 8009d84:	4baf      	ldr	r3, [pc, #700]	@ (800a044 <_dtoa_r+0x89c>)
 8009d86:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8009d8a:	f7f6 fa8f 	bl	80002ac <__adddf3>
 8009d8e:	4602      	mov	r2, r0
 8009d90:	460b      	mov	r3, r1
 8009d92:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009d96:	f7f6 fecf 	bl	8000b38 <__aeabi_dcmpgt>
 8009d9a:	2800      	cmp	r0, #0
 8009d9c:	d163      	bne.n	8009e66 <_dtoa_r+0x6be>
 8009d9e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8009da2:	49a8      	ldr	r1, [pc, #672]	@ (800a044 <_dtoa_r+0x89c>)
 8009da4:	2000      	movs	r0, #0
 8009da6:	f7f6 fa7f 	bl	80002a8 <__aeabi_dsub>
 8009daa:	4602      	mov	r2, r0
 8009dac:	460b      	mov	r3, r1
 8009dae:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009db2:	f7f6 fea3 	bl	8000afc <__aeabi_dcmplt>
 8009db6:	2800      	cmp	r0, #0
 8009db8:	f43f af14 	beq.w	8009be4 <_dtoa_r+0x43c>
 8009dbc:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8009dbe:	1e73      	subs	r3, r6, #1
 8009dc0:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009dc2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009dc6:	2b30      	cmp	r3, #48	@ 0x30
 8009dc8:	d0f8      	beq.n	8009dbc <_dtoa_r+0x614>
 8009dca:	4647      	mov	r7, r8
 8009dcc:	e03b      	b.n	8009e46 <_dtoa_r+0x69e>
 8009dce:	4b9e      	ldr	r3, [pc, #632]	@ (800a048 <_dtoa_r+0x8a0>)
 8009dd0:	f7f6 fc22 	bl	8000618 <__aeabi_dmul>
 8009dd4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009dd8:	e7bc      	b.n	8009d54 <_dtoa_r+0x5ac>
 8009dda:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8009dde:	4656      	mov	r6, sl
 8009de0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009de4:	4620      	mov	r0, r4
 8009de6:	4629      	mov	r1, r5
 8009de8:	f7f6 fd40 	bl	800086c <__aeabi_ddiv>
 8009dec:	f7f6 fec4 	bl	8000b78 <__aeabi_d2iz>
 8009df0:	4680      	mov	r8, r0
 8009df2:	f7f6 fba7 	bl	8000544 <__aeabi_i2d>
 8009df6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009dfa:	f7f6 fc0d 	bl	8000618 <__aeabi_dmul>
 8009dfe:	4602      	mov	r2, r0
 8009e00:	460b      	mov	r3, r1
 8009e02:	4620      	mov	r0, r4
 8009e04:	4629      	mov	r1, r5
 8009e06:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8009e0a:	f7f6 fa4d 	bl	80002a8 <__aeabi_dsub>
 8009e0e:	f806 4b01 	strb.w	r4, [r6], #1
 8009e12:	9d03      	ldr	r5, [sp, #12]
 8009e14:	eba6 040a 	sub.w	r4, r6, sl
 8009e18:	42a5      	cmp	r5, r4
 8009e1a:	4602      	mov	r2, r0
 8009e1c:	460b      	mov	r3, r1
 8009e1e:	d133      	bne.n	8009e88 <_dtoa_r+0x6e0>
 8009e20:	f7f6 fa44 	bl	80002ac <__adddf3>
 8009e24:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009e28:	4604      	mov	r4, r0
 8009e2a:	460d      	mov	r5, r1
 8009e2c:	f7f6 fe84 	bl	8000b38 <__aeabi_dcmpgt>
 8009e30:	b9c0      	cbnz	r0, 8009e64 <_dtoa_r+0x6bc>
 8009e32:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009e36:	4620      	mov	r0, r4
 8009e38:	4629      	mov	r1, r5
 8009e3a:	f7f6 fe55 	bl	8000ae8 <__aeabi_dcmpeq>
 8009e3e:	b110      	cbz	r0, 8009e46 <_dtoa_r+0x69e>
 8009e40:	f018 0f01 	tst.w	r8, #1
 8009e44:	d10e      	bne.n	8009e64 <_dtoa_r+0x6bc>
 8009e46:	9902      	ldr	r1, [sp, #8]
 8009e48:	4648      	mov	r0, r9
 8009e4a:	f000 fbbd 	bl	800a5c8 <_Bfree>
 8009e4e:	2300      	movs	r3, #0
 8009e50:	7033      	strb	r3, [r6, #0]
 8009e52:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009e54:	3701      	adds	r7, #1
 8009e56:	601f      	str	r7, [r3, #0]
 8009e58:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	f000 824b 	beq.w	800a2f6 <_dtoa_r+0xb4e>
 8009e60:	601e      	str	r6, [r3, #0]
 8009e62:	e248      	b.n	800a2f6 <_dtoa_r+0xb4e>
 8009e64:	46b8      	mov	r8, r7
 8009e66:	4633      	mov	r3, r6
 8009e68:	461e      	mov	r6, r3
 8009e6a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009e6e:	2a39      	cmp	r2, #57	@ 0x39
 8009e70:	d106      	bne.n	8009e80 <_dtoa_r+0x6d8>
 8009e72:	459a      	cmp	sl, r3
 8009e74:	d1f8      	bne.n	8009e68 <_dtoa_r+0x6c0>
 8009e76:	2230      	movs	r2, #48	@ 0x30
 8009e78:	f108 0801 	add.w	r8, r8, #1
 8009e7c:	f88a 2000 	strb.w	r2, [sl]
 8009e80:	781a      	ldrb	r2, [r3, #0]
 8009e82:	3201      	adds	r2, #1
 8009e84:	701a      	strb	r2, [r3, #0]
 8009e86:	e7a0      	b.n	8009dca <_dtoa_r+0x622>
 8009e88:	4b6f      	ldr	r3, [pc, #444]	@ (800a048 <_dtoa_r+0x8a0>)
 8009e8a:	2200      	movs	r2, #0
 8009e8c:	f7f6 fbc4 	bl	8000618 <__aeabi_dmul>
 8009e90:	2200      	movs	r2, #0
 8009e92:	2300      	movs	r3, #0
 8009e94:	4604      	mov	r4, r0
 8009e96:	460d      	mov	r5, r1
 8009e98:	f7f6 fe26 	bl	8000ae8 <__aeabi_dcmpeq>
 8009e9c:	2800      	cmp	r0, #0
 8009e9e:	d09f      	beq.n	8009de0 <_dtoa_r+0x638>
 8009ea0:	e7d1      	b.n	8009e46 <_dtoa_r+0x69e>
 8009ea2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009ea4:	2a00      	cmp	r2, #0
 8009ea6:	f000 80ea 	beq.w	800a07e <_dtoa_r+0x8d6>
 8009eaa:	9a07      	ldr	r2, [sp, #28]
 8009eac:	2a01      	cmp	r2, #1
 8009eae:	f300 80cd 	bgt.w	800a04c <_dtoa_r+0x8a4>
 8009eb2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8009eb4:	2a00      	cmp	r2, #0
 8009eb6:	f000 80c1 	beq.w	800a03c <_dtoa_r+0x894>
 8009eba:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8009ebe:	9c08      	ldr	r4, [sp, #32]
 8009ec0:	9e00      	ldr	r6, [sp, #0]
 8009ec2:	9a00      	ldr	r2, [sp, #0]
 8009ec4:	441a      	add	r2, r3
 8009ec6:	9200      	str	r2, [sp, #0]
 8009ec8:	9a06      	ldr	r2, [sp, #24]
 8009eca:	2101      	movs	r1, #1
 8009ecc:	441a      	add	r2, r3
 8009ece:	4648      	mov	r0, r9
 8009ed0:	9206      	str	r2, [sp, #24]
 8009ed2:	f000 fc2d 	bl	800a730 <__i2b>
 8009ed6:	4605      	mov	r5, r0
 8009ed8:	b166      	cbz	r6, 8009ef4 <_dtoa_r+0x74c>
 8009eda:	9b06      	ldr	r3, [sp, #24]
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	dd09      	ble.n	8009ef4 <_dtoa_r+0x74c>
 8009ee0:	42b3      	cmp	r3, r6
 8009ee2:	9a00      	ldr	r2, [sp, #0]
 8009ee4:	bfa8      	it	ge
 8009ee6:	4633      	movge	r3, r6
 8009ee8:	1ad2      	subs	r2, r2, r3
 8009eea:	9200      	str	r2, [sp, #0]
 8009eec:	9a06      	ldr	r2, [sp, #24]
 8009eee:	1af6      	subs	r6, r6, r3
 8009ef0:	1ad3      	subs	r3, r2, r3
 8009ef2:	9306      	str	r3, [sp, #24]
 8009ef4:	9b08      	ldr	r3, [sp, #32]
 8009ef6:	b30b      	cbz	r3, 8009f3c <_dtoa_r+0x794>
 8009ef8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	f000 80c6 	beq.w	800a08c <_dtoa_r+0x8e4>
 8009f00:	2c00      	cmp	r4, #0
 8009f02:	f000 80c0 	beq.w	800a086 <_dtoa_r+0x8de>
 8009f06:	4629      	mov	r1, r5
 8009f08:	4622      	mov	r2, r4
 8009f0a:	4648      	mov	r0, r9
 8009f0c:	f000 fcc8 	bl	800a8a0 <__pow5mult>
 8009f10:	9a02      	ldr	r2, [sp, #8]
 8009f12:	4601      	mov	r1, r0
 8009f14:	4605      	mov	r5, r0
 8009f16:	4648      	mov	r0, r9
 8009f18:	f000 fc20 	bl	800a75c <__multiply>
 8009f1c:	9902      	ldr	r1, [sp, #8]
 8009f1e:	4680      	mov	r8, r0
 8009f20:	4648      	mov	r0, r9
 8009f22:	f000 fb51 	bl	800a5c8 <_Bfree>
 8009f26:	9b08      	ldr	r3, [sp, #32]
 8009f28:	1b1b      	subs	r3, r3, r4
 8009f2a:	9308      	str	r3, [sp, #32]
 8009f2c:	f000 80b1 	beq.w	800a092 <_dtoa_r+0x8ea>
 8009f30:	9a08      	ldr	r2, [sp, #32]
 8009f32:	4641      	mov	r1, r8
 8009f34:	4648      	mov	r0, r9
 8009f36:	f000 fcb3 	bl	800a8a0 <__pow5mult>
 8009f3a:	9002      	str	r0, [sp, #8]
 8009f3c:	2101      	movs	r1, #1
 8009f3e:	4648      	mov	r0, r9
 8009f40:	f000 fbf6 	bl	800a730 <__i2b>
 8009f44:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009f46:	4604      	mov	r4, r0
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	f000 81d8 	beq.w	800a2fe <_dtoa_r+0xb56>
 8009f4e:	461a      	mov	r2, r3
 8009f50:	4601      	mov	r1, r0
 8009f52:	4648      	mov	r0, r9
 8009f54:	f000 fca4 	bl	800a8a0 <__pow5mult>
 8009f58:	9b07      	ldr	r3, [sp, #28]
 8009f5a:	2b01      	cmp	r3, #1
 8009f5c:	4604      	mov	r4, r0
 8009f5e:	f300 809f 	bgt.w	800a0a0 <_dtoa_r+0x8f8>
 8009f62:	9b04      	ldr	r3, [sp, #16]
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	f040 8097 	bne.w	800a098 <_dtoa_r+0x8f0>
 8009f6a:	9b05      	ldr	r3, [sp, #20]
 8009f6c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	f040 8093 	bne.w	800a09c <_dtoa_r+0x8f4>
 8009f76:	9b05      	ldr	r3, [sp, #20]
 8009f78:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009f7c:	0d1b      	lsrs	r3, r3, #20
 8009f7e:	051b      	lsls	r3, r3, #20
 8009f80:	b133      	cbz	r3, 8009f90 <_dtoa_r+0x7e8>
 8009f82:	9b00      	ldr	r3, [sp, #0]
 8009f84:	3301      	adds	r3, #1
 8009f86:	9300      	str	r3, [sp, #0]
 8009f88:	9b06      	ldr	r3, [sp, #24]
 8009f8a:	3301      	adds	r3, #1
 8009f8c:	9306      	str	r3, [sp, #24]
 8009f8e:	2301      	movs	r3, #1
 8009f90:	9308      	str	r3, [sp, #32]
 8009f92:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	f000 81b8 	beq.w	800a30a <_dtoa_r+0xb62>
 8009f9a:	6923      	ldr	r3, [r4, #16]
 8009f9c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009fa0:	6918      	ldr	r0, [r3, #16]
 8009fa2:	f000 fb79 	bl	800a698 <__hi0bits>
 8009fa6:	f1c0 0020 	rsb	r0, r0, #32
 8009faa:	9b06      	ldr	r3, [sp, #24]
 8009fac:	4418      	add	r0, r3
 8009fae:	f010 001f 	ands.w	r0, r0, #31
 8009fb2:	f000 8082 	beq.w	800a0ba <_dtoa_r+0x912>
 8009fb6:	f1c0 0320 	rsb	r3, r0, #32
 8009fba:	2b04      	cmp	r3, #4
 8009fbc:	dd73      	ble.n	800a0a6 <_dtoa_r+0x8fe>
 8009fbe:	9b00      	ldr	r3, [sp, #0]
 8009fc0:	f1c0 001c 	rsb	r0, r0, #28
 8009fc4:	4403      	add	r3, r0
 8009fc6:	9300      	str	r3, [sp, #0]
 8009fc8:	9b06      	ldr	r3, [sp, #24]
 8009fca:	4403      	add	r3, r0
 8009fcc:	4406      	add	r6, r0
 8009fce:	9306      	str	r3, [sp, #24]
 8009fd0:	9b00      	ldr	r3, [sp, #0]
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	dd05      	ble.n	8009fe2 <_dtoa_r+0x83a>
 8009fd6:	9902      	ldr	r1, [sp, #8]
 8009fd8:	461a      	mov	r2, r3
 8009fda:	4648      	mov	r0, r9
 8009fdc:	f000 fcba 	bl	800a954 <__lshift>
 8009fe0:	9002      	str	r0, [sp, #8]
 8009fe2:	9b06      	ldr	r3, [sp, #24]
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	dd05      	ble.n	8009ff4 <_dtoa_r+0x84c>
 8009fe8:	4621      	mov	r1, r4
 8009fea:	461a      	mov	r2, r3
 8009fec:	4648      	mov	r0, r9
 8009fee:	f000 fcb1 	bl	800a954 <__lshift>
 8009ff2:	4604      	mov	r4, r0
 8009ff4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d061      	beq.n	800a0be <_dtoa_r+0x916>
 8009ffa:	9802      	ldr	r0, [sp, #8]
 8009ffc:	4621      	mov	r1, r4
 8009ffe:	f000 fd15 	bl	800aa2c <__mcmp>
 800a002:	2800      	cmp	r0, #0
 800a004:	da5b      	bge.n	800a0be <_dtoa_r+0x916>
 800a006:	2300      	movs	r3, #0
 800a008:	9902      	ldr	r1, [sp, #8]
 800a00a:	220a      	movs	r2, #10
 800a00c:	4648      	mov	r0, r9
 800a00e:	f000 fafd 	bl	800a60c <__multadd>
 800a012:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a014:	9002      	str	r0, [sp, #8]
 800a016:	f107 38ff 	add.w	r8, r7, #4294967295
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	f000 8177 	beq.w	800a30e <_dtoa_r+0xb66>
 800a020:	4629      	mov	r1, r5
 800a022:	2300      	movs	r3, #0
 800a024:	220a      	movs	r2, #10
 800a026:	4648      	mov	r0, r9
 800a028:	f000 faf0 	bl	800a60c <__multadd>
 800a02c:	f1bb 0f00 	cmp.w	fp, #0
 800a030:	4605      	mov	r5, r0
 800a032:	dc6f      	bgt.n	800a114 <_dtoa_r+0x96c>
 800a034:	9b07      	ldr	r3, [sp, #28]
 800a036:	2b02      	cmp	r3, #2
 800a038:	dc49      	bgt.n	800a0ce <_dtoa_r+0x926>
 800a03a:	e06b      	b.n	800a114 <_dtoa_r+0x96c>
 800a03c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800a03e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800a042:	e73c      	b.n	8009ebe <_dtoa_r+0x716>
 800a044:	3fe00000 	.word	0x3fe00000
 800a048:	40240000 	.word	0x40240000
 800a04c:	9b03      	ldr	r3, [sp, #12]
 800a04e:	1e5c      	subs	r4, r3, #1
 800a050:	9b08      	ldr	r3, [sp, #32]
 800a052:	42a3      	cmp	r3, r4
 800a054:	db09      	blt.n	800a06a <_dtoa_r+0x8c2>
 800a056:	1b1c      	subs	r4, r3, r4
 800a058:	9b03      	ldr	r3, [sp, #12]
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	f6bf af30 	bge.w	8009ec0 <_dtoa_r+0x718>
 800a060:	9b00      	ldr	r3, [sp, #0]
 800a062:	9a03      	ldr	r2, [sp, #12]
 800a064:	1a9e      	subs	r6, r3, r2
 800a066:	2300      	movs	r3, #0
 800a068:	e72b      	b.n	8009ec2 <_dtoa_r+0x71a>
 800a06a:	9b08      	ldr	r3, [sp, #32]
 800a06c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800a06e:	9408      	str	r4, [sp, #32]
 800a070:	1ae3      	subs	r3, r4, r3
 800a072:	441a      	add	r2, r3
 800a074:	9e00      	ldr	r6, [sp, #0]
 800a076:	9b03      	ldr	r3, [sp, #12]
 800a078:	920d      	str	r2, [sp, #52]	@ 0x34
 800a07a:	2400      	movs	r4, #0
 800a07c:	e721      	b.n	8009ec2 <_dtoa_r+0x71a>
 800a07e:	9c08      	ldr	r4, [sp, #32]
 800a080:	9e00      	ldr	r6, [sp, #0]
 800a082:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800a084:	e728      	b.n	8009ed8 <_dtoa_r+0x730>
 800a086:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800a08a:	e751      	b.n	8009f30 <_dtoa_r+0x788>
 800a08c:	9a08      	ldr	r2, [sp, #32]
 800a08e:	9902      	ldr	r1, [sp, #8]
 800a090:	e750      	b.n	8009f34 <_dtoa_r+0x78c>
 800a092:	f8cd 8008 	str.w	r8, [sp, #8]
 800a096:	e751      	b.n	8009f3c <_dtoa_r+0x794>
 800a098:	2300      	movs	r3, #0
 800a09a:	e779      	b.n	8009f90 <_dtoa_r+0x7e8>
 800a09c:	9b04      	ldr	r3, [sp, #16]
 800a09e:	e777      	b.n	8009f90 <_dtoa_r+0x7e8>
 800a0a0:	2300      	movs	r3, #0
 800a0a2:	9308      	str	r3, [sp, #32]
 800a0a4:	e779      	b.n	8009f9a <_dtoa_r+0x7f2>
 800a0a6:	d093      	beq.n	8009fd0 <_dtoa_r+0x828>
 800a0a8:	9a00      	ldr	r2, [sp, #0]
 800a0aa:	331c      	adds	r3, #28
 800a0ac:	441a      	add	r2, r3
 800a0ae:	9200      	str	r2, [sp, #0]
 800a0b0:	9a06      	ldr	r2, [sp, #24]
 800a0b2:	441a      	add	r2, r3
 800a0b4:	441e      	add	r6, r3
 800a0b6:	9206      	str	r2, [sp, #24]
 800a0b8:	e78a      	b.n	8009fd0 <_dtoa_r+0x828>
 800a0ba:	4603      	mov	r3, r0
 800a0bc:	e7f4      	b.n	800a0a8 <_dtoa_r+0x900>
 800a0be:	9b03      	ldr	r3, [sp, #12]
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	46b8      	mov	r8, r7
 800a0c4:	dc20      	bgt.n	800a108 <_dtoa_r+0x960>
 800a0c6:	469b      	mov	fp, r3
 800a0c8:	9b07      	ldr	r3, [sp, #28]
 800a0ca:	2b02      	cmp	r3, #2
 800a0cc:	dd1e      	ble.n	800a10c <_dtoa_r+0x964>
 800a0ce:	f1bb 0f00 	cmp.w	fp, #0
 800a0d2:	f47f adb1 	bne.w	8009c38 <_dtoa_r+0x490>
 800a0d6:	4621      	mov	r1, r4
 800a0d8:	465b      	mov	r3, fp
 800a0da:	2205      	movs	r2, #5
 800a0dc:	4648      	mov	r0, r9
 800a0de:	f000 fa95 	bl	800a60c <__multadd>
 800a0e2:	4601      	mov	r1, r0
 800a0e4:	4604      	mov	r4, r0
 800a0e6:	9802      	ldr	r0, [sp, #8]
 800a0e8:	f000 fca0 	bl	800aa2c <__mcmp>
 800a0ec:	2800      	cmp	r0, #0
 800a0ee:	f77f ada3 	ble.w	8009c38 <_dtoa_r+0x490>
 800a0f2:	4656      	mov	r6, sl
 800a0f4:	2331      	movs	r3, #49	@ 0x31
 800a0f6:	f806 3b01 	strb.w	r3, [r6], #1
 800a0fa:	f108 0801 	add.w	r8, r8, #1
 800a0fe:	e59f      	b.n	8009c40 <_dtoa_r+0x498>
 800a100:	9c03      	ldr	r4, [sp, #12]
 800a102:	46b8      	mov	r8, r7
 800a104:	4625      	mov	r5, r4
 800a106:	e7f4      	b.n	800a0f2 <_dtoa_r+0x94a>
 800a108:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800a10c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a10e:	2b00      	cmp	r3, #0
 800a110:	f000 8101 	beq.w	800a316 <_dtoa_r+0xb6e>
 800a114:	2e00      	cmp	r6, #0
 800a116:	dd05      	ble.n	800a124 <_dtoa_r+0x97c>
 800a118:	4629      	mov	r1, r5
 800a11a:	4632      	mov	r2, r6
 800a11c:	4648      	mov	r0, r9
 800a11e:	f000 fc19 	bl	800a954 <__lshift>
 800a122:	4605      	mov	r5, r0
 800a124:	9b08      	ldr	r3, [sp, #32]
 800a126:	2b00      	cmp	r3, #0
 800a128:	d05c      	beq.n	800a1e4 <_dtoa_r+0xa3c>
 800a12a:	6869      	ldr	r1, [r5, #4]
 800a12c:	4648      	mov	r0, r9
 800a12e:	f000 fa0b 	bl	800a548 <_Balloc>
 800a132:	4606      	mov	r6, r0
 800a134:	b928      	cbnz	r0, 800a142 <_dtoa_r+0x99a>
 800a136:	4b82      	ldr	r3, [pc, #520]	@ (800a340 <_dtoa_r+0xb98>)
 800a138:	4602      	mov	r2, r0
 800a13a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800a13e:	f7ff bb4a 	b.w	80097d6 <_dtoa_r+0x2e>
 800a142:	692a      	ldr	r2, [r5, #16]
 800a144:	3202      	adds	r2, #2
 800a146:	0092      	lsls	r2, r2, #2
 800a148:	f105 010c 	add.w	r1, r5, #12
 800a14c:	300c      	adds	r0, #12
 800a14e:	f000 fe31 	bl	800adb4 <memcpy>
 800a152:	2201      	movs	r2, #1
 800a154:	4631      	mov	r1, r6
 800a156:	4648      	mov	r0, r9
 800a158:	f000 fbfc 	bl	800a954 <__lshift>
 800a15c:	f10a 0301 	add.w	r3, sl, #1
 800a160:	9300      	str	r3, [sp, #0]
 800a162:	eb0a 030b 	add.w	r3, sl, fp
 800a166:	9308      	str	r3, [sp, #32]
 800a168:	9b04      	ldr	r3, [sp, #16]
 800a16a:	f003 0301 	and.w	r3, r3, #1
 800a16e:	462f      	mov	r7, r5
 800a170:	9306      	str	r3, [sp, #24]
 800a172:	4605      	mov	r5, r0
 800a174:	9b00      	ldr	r3, [sp, #0]
 800a176:	9802      	ldr	r0, [sp, #8]
 800a178:	4621      	mov	r1, r4
 800a17a:	f103 3bff 	add.w	fp, r3, #4294967295
 800a17e:	f7ff fa8a 	bl	8009696 <quorem>
 800a182:	4603      	mov	r3, r0
 800a184:	3330      	adds	r3, #48	@ 0x30
 800a186:	9003      	str	r0, [sp, #12]
 800a188:	4639      	mov	r1, r7
 800a18a:	9802      	ldr	r0, [sp, #8]
 800a18c:	9309      	str	r3, [sp, #36]	@ 0x24
 800a18e:	f000 fc4d 	bl	800aa2c <__mcmp>
 800a192:	462a      	mov	r2, r5
 800a194:	9004      	str	r0, [sp, #16]
 800a196:	4621      	mov	r1, r4
 800a198:	4648      	mov	r0, r9
 800a19a:	f000 fc63 	bl	800aa64 <__mdiff>
 800a19e:	68c2      	ldr	r2, [r0, #12]
 800a1a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a1a2:	4606      	mov	r6, r0
 800a1a4:	bb02      	cbnz	r2, 800a1e8 <_dtoa_r+0xa40>
 800a1a6:	4601      	mov	r1, r0
 800a1a8:	9802      	ldr	r0, [sp, #8]
 800a1aa:	f000 fc3f 	bl	800aa2c <__mcmp>
 800a1ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a1b0:	4602      	mov	r2, r0
 800a1b2:	4631      	mov	r1, r6
 800a1b4:	4648      	mov	r0, r9
 800a1b6:	920c      	str	r2, [sp, #48]	@ 0x30
 800a1b8:	9309      	str	r3, [sp, #36]	@ 0x24
 800a1ba:	f000 fa05 	bl	800a5c8 <_Bfree>
 800a1be:	9b07      	ldr	r3, [sp, #28]
 800a1c0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800a1c2:	9e00      	ldr	r6, [sp, #0]
 800a1c4:	ea42 0103 	orr.w	r1, r2, r3
 800a1c8:	9b06      	ldr	r3, [sp, #24]
 800a1ca:	4319      	orrs	r1, r3
 800a1cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a1ce:	d10d      	bne.n	800a1ec <_dtoa_r+0xa44>
 800a1d0:	2b39      	cmp	r3, #57	@ 0x39
 800a1d2:	d027      	beq.n	800a224 <_dtoa_r+0xa7c>
 800a1d4:	9a04      	ldr	r2, [sp, #16]
 800a1d6:	2a00      	cmp	r2, #0
 800a1d8:	dd01      	ble.n	800a1de <_dtoa_r+0xa36>
 800a1da:	9b03      	ldr	r3, [sp, #12]
 800a1dc:	3331      	adds	r3, #49	@ 0x31
 800a1de:	f88b 3000 	strb.w	r3, [fp]
 800a1e2:	e52e      	b.n	8009c42 <_dtoa_r+0x49a>
 800a1e4:	4628      	mov	r0, r5
 800a1e6:	e7b9      	b.n	800a15c <_dtoa_r+0x9b4>
 800a1e8:	2201      	movs	r2, #1
 800a1ea:	e7e2      	b.n	800a1b2 <_dtoa_r+0xa0a>
 800a1ec:	9904      	ldr	r1, [sp, #16]
 800a1ee:	2900      	cmp	r1, #0
 800a1f0:	db04      	blt.n	800a1fc <_dtoa_r+0xa54>
 800a1f2:	9807      	ldr	r0, [sp, #28]
 800a1f4:	4301      	orrs	r1, r0
 800a1f6:	9806      	ldr	r0, [sp, #24]
 800a1f8:	4301      	orrs	r1, r0
 800a1fa:	d120      	bne.n	800a23e <_dtoa_r+0xa96>
 800a1fc:	2a00      	cmp	r2, #0
 800a1fe:	ddee      	ble.n	800a1de <_dtoa_r+0xa36>
 800a200:	9902      	ldr	r1, [sp, #8]
 800a202:	9300      	str	r3, [sp, #0]
 800a204:	2201      	movs	r2, #1
 800a206:	4648      	mov	r0, r9
 800a208:	f000 fba4 	bl	800a954 <__lshift>
 800a20c:	4621      	mov	r1, r4
 800a20e:	9002      	str	r0, [sp, #8]
 800a210:	f000 fc0c 	bl	800aa2c <__mcmp>
 800a214:	2800      	cmp	r0, #0
 800a216:	9b00      	ldr	r3, [sp, #0]
 800a218:	dc02      	bgt.n	800a220 <_dtoa_r+0xa78>
 800a21a:	d1e0      	bne.n	800a1de <_dtoa_r+0xa36>
 800a21c:	07da      	lsls	r2, r3, #31
 800a21e:	d5de      	bpl.n	800a1de <_dtoa_r+0xa36>
 800a220:	2b39      	cmp	r3, #57	@ 0x39
 800a222:	d1da      	bne.n	800a1da <_dtoa_r+0xa32>
 800a224:	2339      	movs	r3, #57	@ 0x39
 800a226:	f88b 3000 	strb.w	r3, [fp]
 800a22a:	4633      	mov	r3, r6
 800a22c:	461e      	mov	r6, r3
 800a22e:	3b01      	subs	r3, #1
 800a230:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800a234:	2a39      	cmp	r2, #57	@ 0x39
 800a236:	d04e      	beq.n	800a2d6 <_dtoa_r+0xb2e>
 800a238:	3201      	adds	r2, #1
 800a23a:	701a      	strb	r2, [r3, #0]
 800a23c:	e501      	b.n	8009c42 <_dtoa_r+0x49a>
 800a23e:	2a00      	cmp	r2, #0
 800a240:	dd03      	ble.n	800a24a <_dtoa_r+0xaa2>
 800a242:	2b39      	cmp	r3, #57	@ 0x39
 800a244:	d0ee      	beq.n	800a224 <_dtoa_r+0xa7c>
 800a246:	3301      	adds	r3, #1
 800a248:	e7c9      	b.n	800a1de <_dtoa_r+0xa36>
 800a24a:	9a00      	ldr	r2, [sp, #0]
 800a24c:	9908      	ldr	r1, [sp, #32]
 800a24e:	f802 3c01 	strb.w	r3, [r2, #-1]
 800a252:	428a      	cmp	r2, r1
 800a254:	d028      	beq.n	800a2a8 <_dtoa_r+0xb00>
 800a256:	9902      	ldr	r1, [sp, #8]
 800a258:	2300      	movs	r3, #0
 800a25a:	220a      	movs	r2, #10
 800a25c:	4648      	mov	r0, r9
 800a25e:	f000 f9d5 	bl	800a60c <__multadd>
 800a262:	42af      	cmp	r7, r5
 800a264:	9002      	str	r0, [sp, #8]
 800a266:	f04f 0300 	mov.w	r3, #0
 800a26a:	f04f 020a 	mov.w	r2, #10
 800a26e:	4639      	mov	r1, r7
 800a270:	4648      	mov	r0, r9
 800a272:	d107      	bne.n	800a284 <_dtoa_r+0xadc>
 800a274:	f000 f9ca 	bl	800a60c <__multadd>
 800a278:	4607      	mov	r7, r0
 800a27a:	4605      	mov	r5, r0
 800a27c:	9b00      	ldr	r3, [sp, #0]
 800a27e:	3301      	adds	r3, #1
 800a280:	9300      	str	r3, [sp, #0]
 800a282:	e777      	b.n	800a174 <_dtoa_r+0x9cc>
 800a284:	f000 f9c2 	bl	800a60c <__multadd>
 800a288:	4629      	mov	r1, r5
 800a28a:	4607      	mov	r7, r0
 800a28c:	2300      	movs	r3, #0
 800a28e:	220a      	movs	r2, #10
 800a290:	4648      	mov	r0, r9
 800a292:	f000 f9bb 	bl	800a60c <__multadd>
 800a296:	4605      	mov	r5, r0
 800a298:	e7f0      	b.n	800a27c <_dtoa_r+0xad4>
 800a29a:	f1bb 0f00 	cmp.w	fp, #0
 800a29e:	bfcc      	ite	gt
 800a2a0:	465e      	movgt	r6, fp
 800a2a2:	2601      	movle	r6, #1
 800a2a4:	4456      	add	r6, sl
 800a2a6:	2700      	movs	r7, #0
 800a2a8:	9902      	ldr	r1, [sp, #8]
 800a2aa:	9300      	str	r3, [sp, #0]
 800a2ac:	2201      	movs	r2, #1
 800a2ae:	4648      	mov	r0, r9
 800a2b0:	f000 fb50 	bl	800a954 <__lshift>
 800a2b4:	4621      	mov	r1, r4
 800a2b6:	9002      	str	r0, [sp, #8]
 800a2b8:	f000 fbb8 	bl	800aa2c <__mcmp>
 800a2bc:	2800      	cmp	r0, #0
 800a2be:	dcb4      	bgt.n	800a22a <_dtoa_r+0xa82>
 800a2c0:	d102      	bne.n	800a2c8 <_dtoa_r+0xb20>
 800a2c2:	9b00      	ldr	r3, [sp, #0]
 800a2c4:	07db      	lsls	r3, r3, #31
 800a2c6:	d4b0      	bmi.n	800a22a <_dtoa_r+0xa82>
 800a2c8:	4633      	mov	r3, r6
 800a2ca:	461e      	mov	r6, r3
 800a2cc:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a2d0:	2a30      	cmp	r2, #48	@ 0x30
 800a2d2:	d0fa      	beq.n	800a2ca <_dtoa_r+0xb22>
 800a2d4:	e4b5      	b.n	8009c42 <_dtoa_r+0x49a>
 800a2d6:	459a      	cmp	sl, r3
 800a2d8:	d1a8      	bne.n	800a22c <_dtoa_r+0xa84>
 800a2da:	2331      	movs	r3, #49	@ 0x31
 800a2dc:	f108 0801 	add.w	r8, r8, #1
 800a2e0:	f88a 3000 	strb.w	r3, [sl]
 800a2e4:	e4ad      	b.n	8009c42 <_dtoa_r+0x49a>
 800a2e6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800a2e8:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800a344 <_dtoa_r+0xb9c>
 800a2ec:	b11b      	cbz	r3, 800a2f6 <_dtoa_r+0xb4e>
 800a2ee:	f10a 0308 	add.w	r3, sl, #8
 800a2f2:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800a2f4:	6013      	str	r3, [r2, #0]
 800a2f6:	4650      	mov	r0, sl
 800a2f8:	b017      	add	sp, #92	@ 0x5c
 800a2fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2fe:	9b07      	ldr	r3, [sp, #28]
 800a300:	2b01      	cmp	r3, #1
 800a302:	f77f ae2e 	ble.w	8009f62 <_dtoa_r+0x7ba>
 800a306:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a308:	9308      	str	r3, [sp, #32]
 800a30a:	2001      	movs	r0, #1
 800a30c:	e64d      	b.n	8009faa <_dtoa_r+0x802>
 800a30e:	f1bb 0f00 	cmp.w	fp, #0
 800a312:	f77f aed9 	ble.w	800a0c8 <_dtoa_r+0x920>
 800a316:	4656      	mov	r6, sl
 800a318:	9802      	ldr	r0, [sp, #8]
 800a31a:	4621      	mov	r1, r4
 800a31c:	f7ff f9bb 	bl	8009696 <quorem>
 800a320:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800a324:	f806 3b01 	strb.w	r3, [r6], #1
 800a328:	eba6 020a 	sub.w	r2, r6, sl
 800a32c:	4593      	cmp	fp, r2
 800a32e:	ddb4      	ble.n	800a29a <_dtoa_r+0xaf2>
 800a330:	9902      	ldr	r1, [sp, #8]
 800a332:	2300      	movs	r3, #0
 800a334:	220a      	movs	r2, #10
 800a336:	4648      	mov	r0, r9
 800a338:	f000 f968 	bl	800a60c <__multadd>
 800a33c:	9002      	str	r0, [sp, #8]
 800a33e:	e7eb      	b.n	800a318 <_dtoa_r+0xb70>
 800a340:	0800b508 	.word	0x0800b508
 800a344:	0800b48c 	.word	0x0800b48c

0800a348 <_free_r>:
 800a348:	b538      	push	{r3, r4, r5, lr}
 800a34a:	4605      	mov	r5, r0
 800a34c:	2900      	cmp	r1, #0
 800a34e:	d041      	beq.n	800a3d4 <_free_r+0x8c>
 800a350:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a354:	1f0c      	subs	r4, r1, #4
 800a356:	2b00      	cmp	r3, #0
 800a358:	bfb8      	it	lt
 800a35a:	18e4      	addlt	r4, r4, r3
 800a35c:	f000 f8e8 	bl	800a530 <__malloc_lock>
 800a360:	4a1d      	ldr	r2, [pc, #116]	@ (800a3d8 <_free_r+0x90>)
 800a362:	6813      	ldr	r3, [r2, #0]
 800a364:	b933      	cbnz	r3, 800a374 <_free_r+0x2c>
 800a366:	6063      	str	r3, [r4, #4]
 800a368:	6014      	str	r4, [r2, #0]
 800a36a:	4628      	mov	r0, r5
 800a36c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a370:	f000 b8e4 	b.w	800a53c <__malloc_unlock>
 800a374:	42a3      	cmp	r3, r4
 800a376:	d908      	bls.n	800a38a <_free_r+0x42>
 800a378:	6820      	ldr	r0, [r4, #0]
 800a37a:	1821      	adds	r1, r4, r0
 800a37c:	428b      	cmp	r3, r1
 800a37e:	bf01      	itttt	eq
 800a380:	6819      	ldreq	r1, [r3, #0]
 800a382:	685b      	ldreq	r3, [r3, #4]
 800a384:	1809      	addeq	r1, r1, r0
 800a386:	6021      	streq	r1, [r4, #0]
 800a388:	e7ed      	b.n	800a366 <_free_r+0x1e>
 800a38a:	461a      	mov	r2, r3
 800a38c:	685b      	ldr	r3, [r3, #4]
 800a38e:	b10b      	cbz	r3, 800a394 <_free_r+0x4c>
 800a390:	42a3      	cmp	r3, r4
 800a392:	d9fa      	bls.n	800a38a <_free_r+0x42>
 800a394:	6811      	ldr	r1, [r2, #0]
 800a396:	1850      	adds	r0, r2, r1
 800a398:	42a0      	cmp	r0, r4
 800a39a:	d10b      	bne.n	800a3b4 <_free_r+0x6c>
 800a39c:	6820      	ldr	r0, [r4, #0]
 800a39e:	4401      	add	r1, r0
 800a3a0:	1850      	adds	r0, r2, r1
 800a3a2:	4283      	cmp	r3, r0
 800a3a4:	6011      	str	r1, [r2, #0]
 800a3a6:	d1e0      	bne.n	800a36a <_free_r+0x22>
 800a3a8:	6818      	ldr	r0, [r3, #0]
 800a3aa:	685b      	ldr	r3, [r3, #4]
 800a3ac:	6053      	str	r3, [r2, #4]
 800a3ae:	4408      	add	r0, r1
 800a3b0:	6010      	str	r0, [r2, #0]
 800a3b2:	e7da      	b.n	800a36a <_free_r+0x22>
 800a3b4:	d902      	bls.n	800a3bc <_free_r+0x74>
 800a3b6:	230c      	movs	r3, #12
 800a3b8:	602b      	str	r3, [r5, #0]
 800a3ba:	e7d6      	b.n	800a36a <_free_r+0x22>
 800a3bc:	6820      	ldr	r0, [r4, #0]
 800a3be:	1821      	adds	r1, r4, r0
 800a3c0:	428b      	cmp	r3, r1
 800a3c2:	bf04      	itt	eq
 800a3c4:	6819      	ldreq	r1, [r3, #0]
 800a3c6:	685b      	ldreq	r3, [r3, #4]
 800a3c8:	6063      	str	r3, [r4, #4]
 800a3ca:	bf04      	itt	eq
 800a3cc:	1809      	addeq	r1, r1, r0
 800a3ce:	6021      	streq	r1, [r4, #0]
 800a3d0:	6054      	str	r4, [r2, #4]
 800a3d2:	e7ca      	b.n	800a36a <_free_r+0x22>
 800a3d4:	bd38      	pop	{r3, r4, r5, pc}
 800a3d6:	bf00      	nop
 800a3d8:	20000f80 	.word	0x20000f80

0800a3dc <malloc>:
 800a3dc:	4b02      	ldr	r3, [pc, #8]	@ (800a3e8 <malloc+0xc>)
 800a3de:	4601      	mov	r1, r0
 800a3e0:	6818      	ldr	r0, [r3, #0]
 800a3e2:	f000 b825 	b.w	800a430 <_malloc_r>
 800a3e6:	bf00      	nop
 800a3e8:	20000128 	.word	0x20000128

0800a3ec <sbrk_aligned>:
 800a3ec:	b570      	push	{r4, r5, r6, lr}
 800a3ee:	4e0f      	ldr	r6, [pc, #60]	@ (800a42c <sbrk_aligned+0x40>)
 800a3f0:	460c      	mov	r4, r1
 800a3f2:	6831      	ldr	r1, [r6, #0]
 800a3f4:	4605      	mov	r5, r0
 800a3f6:	b911      	cbnz	r1, 800a3fe <sbrk_aligned+0x12>
 800a3f8:	f000 fccc 	bl	800ad94 <_sbrk_r>
 800a3fc:	6030      	str	r0, [r6, #0]
 800a3fe:	4621      	mov	r1, r4
 800a400:	4628      	mov	r0, r5
 800a402:	f000 fcc7 	bl	800ad94 <_sbrk_r>
 800a406:	1c43      	adds	r3, r0, #1
 800a408:	d103      	bne.n	800a412 <sbrk_aligned+0x26>
 800a40a:	f04f 34ff 	mov.w	r4, #4294967295
 800a40e:	4620      	mov	r0, r4
 800a410:	bd70      	pop	{r4, r5, r6, pc}
 800a412:	1cc4      	adds	r4, r0, #3
 800a414:	f024 0403 	bic.w	r4, r4, #3
 800a418:	42a0      	cmp	r0, r4
 800a41a:	d0f8      	beq.n	800a40e <sbrk_aligned+0x22>
 800a41c:	1a21      	subs	r1, r4, r0
 800a41e:	4628      	mov	r0, r5
 800a420:	f000 fcb8 	bl	800ad94 <_sbrk_r>
 800a424:	3001      	adds	r0, #1
 800a426:	d1f2      	bne.n	800a40e <sbrk_aligned+0x22>
 800a428:	e7ef      	b.n	800a40a <sbrk_aligned+0x1e>
 800a42a:	bf00      	nop
 800a42c:	20000f7c 	.word	0x20000f7c

0800a430 <_malloc_r>:
 800a430:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a434:	1ccd      	adds	r5, r1, #3
 800a436:	f025 0503 	bic.w	r5, r5, #3
 800a43a:	3508      	adds	r5, #8
 800a43c:	2d0c      	cmp	r5, #12
 800a43e:	bf38      	it	cc
 800a440:	250c      	movcc	r5, #12
 800a442:	2d00      	cmp	r5, #0
 800a444:	4606      	mov	r6, r0
 800a446:	db01      	blt.n	800a44c <_malloc_r+0x1c>
 800a448:	42a9      	cmp	r1, r5
 800a44a:	d904      	bls.n	800a456 <_malloc_r+0x26>
 800a44c:	230c      	movs	r3, #12
 800a44e:	6033      	str	r3, [r6, #0]
 800a450:	2000      	movs	r0, #0
 800a452:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a456:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a52c <_malloc_r+0xfc>
 800a45a:	f000 f869 	bl	800a530 <__malloc_lock>
 800a45e:	f8d8 3000 	ldr.w	r3, [r8]
 800a462:	461c      	mov	r4, r3
 800a464:	bb44      	cbnz	r4, 800a4b8 <_malloc_r+0x88>
 800a466:	4629      	mov	r1, r5
 800a468:	4630      	mov	r0, r6
 800a46a:	f7ff ffbf 	bl	800a3ec <sbrk_aligned>
 800a46e:	1c43      	adds	r3, r0, #1
 800a470:	4604      	mov	r4, r0
 800a472:	d158      	bne.n	800a526 <_malloc_r+0xf6>
 800a474:	f8d8 4000 	ldr.w	r4, [r8]
 800a478:	4627      	mov	r7, r4
 800a47a:	2f00      	cmp	r7, #0
 800a47c:	d143      	bne.n	800a506 <_malloc_r+0xd6>
 800a47e:	2c00      	cmp	r4, #0
 800a480:	d04b      	beq.n	800a51a <_malloc_r+0xea>
 800a482:	6823      	ldr	r3, [r4, #0]
 800a484:	4639      	mov	r1, r7
 800a486:	4630      	mov	r0, r6
 800a488:	eb04 0903 	add.w	r9, r4, r3
 800a48c:	f000 fc82 	bl	800ad94 <_sbrk_r>
 800a490:	4581      	cmp	r9, r0
 800a492:	d142      	bne.n	800a51a <_malloc_r+0xea>
 800a494:	6821      	ldr	r1, [r4, #0]
 800a496:	1a6d      	subs	r5, r5, r1
 800a498:	4629      	mov	r1, r5
 800a49a:	4630      	mov	r0, r6
 800a49c:	f7ff ffa6 	bl	800a3ec <sbrk_aligned>
 800a4a0:	3001      	adds	r0, #1
 800a4a2:	d03a      	beq.n	800a51a <_malloc_r+0xea>
 800a4a4:	6823      	ldr	r3, [r4, #0]
 800a4a6:	442b      	add	r3, r5
 800a4a8:	6023      	str	r3, [r4, #0]
 800a4aa:	f8d8 3000 	ldr.w	r3, [r8]
 800a4ae:	685a      	ldr	r2, [r3, #4]
 800a4b0:	bb62      	cbnz	r2, 800a50c <_malloc_r+0xdc>
 800a4b2:	f8c8 7000 	str.w	r7, [r8]
 800a4b6:	e00f      	b.n	800a4d8 <_malloc_r+0xa8>
 800a4b8:	6822      	ldr	r2, [r4, #0]
 800a4ba:	1b52      	subs	r2, r2, r5
 800a4bc:	d420      	bmi.n	800a500 <_malloc_r+0xd0>
 800a4be:	2a0b      	cmp	r2, #11
 800a4c0:	d917      	bls.n	800a4f2 <_malloc_r+0xc2>
 800a4c2:	1961      	adds	r1, r4, r5
 800a4c4:	42a3      	cmp	r3, r4
 800a4c6:	6025      	str	r5, [r4, #0]
 800a4c8:	bf18      	it	ne
 800a4ca:	6059      	strne	r1, [r3, #4]
 800a4cc:	6863      	ldr	r3, [r4, #4]
 800a4ce:	bf08      	it	eq
 800a4d0:	f8c8 1000 	streq.w	r1, [r8]
 800a4d4:	5162      	str	r2, [r4, r5]
 800a4d6:	604b      	str	r3, [r1, #4]
 800a4d8:	4630      	mov	r0, r6
 800a4da:	f000 f82f 	bl	800a53c <__malloc_unlock>
 800a4de:	f104 000b 	add.w	r0, r4, #11
 800a4e2:	1d23      	adds	r3, r4, #4
 800a4e4:	f020 0007 	bic.w	r0, r0, #7
 800a4e8:	1ac2      	subs	r2, r0, r3
 800a4ea:	bf1c      	itt	ne
 800a4ec:	1a1b      	subne	r3, r3, r0
 800a4ee:	50a3      	strne	r3, [r4, r2]
 800a4f0:	e7af      	b.n	800a452 <_malloc_r+0x22>
 800a4f2:	6862      	ldr	r2, [r4, #4]
 800a4f4:	42a3      	cmp	r3, r4
 800a4f6:	bf0c      	ite	eq
 800a4f8:	f8c8 2000 	streq.w	r2, [r8]
 800a4fc:	605a      	strne	r2, [r3, #4]
 800a4fe:	e7eb      	b.n	800a4d8 <_malloc_r+0xa8>
 800a500:	4623      	mov	r3, r4
 800a502:	6864      	ldr	r4, [r4, #4]
 800a504:	e7ae      	b.n	800a464 <_malloc_r+0x34>
 800a506:	463c      	mov	r4, r7
 800a508:	687f      	ldr	r7, [r7, #4]
 800a50a:	e7b6      	b.n	800a47a <_malloc_r+0x4a>
 800a50c:	461a      	mov	r2, r3
 800a50e:	685b      	ldr	r3, [r3, #4]
 800a510:	42a3      	cmp	r3, r4
 800a512:	d1fb      	bne.n	800a50c <_malloc_r+0xdc>
 800a514:	2300      	movs	r3, #0
 800a516:	6053      	str	r3, [r2, #4]
 800a518:	e7de      	b.n	800a4d8 <_malloc_r+0xa8>
 800a51a:	230c      	movs	r3, #12
 800a51c:	6033      	str	r3, [r6, #0]
 800a51e:	4630      	mov	r0, r6
 800a520:	f000 f80c 	bl	800a53c <__malloc_unlock>
 800a524:	e794      	b.n	800a450 <_malloc_r+0x20>
 800a526:	6005      	str	r5, [r0, #0]
 800a528:	e7d6      	b.n	800a4d8 <_malloc_r+0xa8>
 800a52a:	bf00      	nop
 800a52c:	20000f80 	.word	0x20000f80

0800a530 <__malloc_lock>:
 800a530:	4801      	ldr	r0, [pc, #4]	@ (800a538 <__malloc_lock+0x8>)
 800a532:	f7ff b8ae 	b.w	8009692 <__retarget_lock_acquire_recursive>
 800a536:	bf00      	nop
 800a538:	20000f78 	.word	0x20000f78

0800a53c <__malloc_unlock>:
 800a53c:	4801      	ldr	r0, [pc, #4]	@ (800a544 <__malloc_unlock+0x8>)
 800a53e:	f7ff b8a9 	b.w	8009694 <__retarget_lock_release_recursive>
 800a542:	bf00      	nop
 800a544:	20000f78 	.word	0x20000f78

0800a548 <_Balloc>:
 800a548:	b570      	push	{r4, r5, r6, lr}
 800a54a:	69c6      	ldr	r6, [r0, #28]
 800a54c:	4604      	mov	r4, r0
 800a54e:	460d      	mov	r5, r1
 800a550:	b976      	cbnz	r6, 800a570 <_Balloc+0x28>
 800a552:	2010      	movs	r0, #16
 800a554:	f7ff ff42 	bl	800a3dc <malloc>
 800a558:	4602      	mov	r2, r0
 800a55a:	61e0      	str	r0, [r4, #28]
 800a55c:	b920      	cbnz	r0, 800a568 <_Balloc+0x20>
 800a55e:	4b18      	ldr	r3, [pc, #96]	@ (800a5c0 <_Balloc+0x78>)
 800a560:	4818      	ldr	r0, [pc, #96]	@ (800a5c4 <_Balloc+0x7c>)
 800a562:	216b      	movs	r1, #107	@ 0x6b
 800a564:	f000 fc34 	bl	800add0 <__assert_func>
 800a568:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a56c:	6006      	str	r6, [r0, #0]
 800a56e:	60c6      	str	r6, [r0, #12]
 800a570:	69e6      	ldr	r6, [r4, #28]
 800a572:	68f3      	ldr	r3, [r6, #12]
 800a574:	b183      	cbz	r3, 800a598 <_Balloc+0x50>
 800a576:	69e3      	ldr	r3, [r4, #28]
 800a578:	68db      	ldr	r3, [r3, #12]
 800a57a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a57e:	b9b8      	cbnz	r0, 800a5b0 <_Balloc+0x68>
 800a580:	2101      	movs	r1, #1
 800a582:	fa01 f605 	lsl.w	r6, r1, r5
 800a586:	1d72      	adds	r2, r6, #5
 800a588:	0092      	lsls	r2, r2, #2
 800a58a:	4620      	mov	r0, r4
 800a58c:	f000 fc3e 	bl	800ae0c <_calloc_r>
 800a590:	b160      	cbz	r0, 800a5ac <_Balloc+0x64>
 800a592:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a596:	e00e      	b.n	800a5b6 <_Balloc+0x6e>
 800a598:	2221      	movs	r2, #33	@ 0x21
 800a59a:	2104      	movs	r1, #4
 800a59c:	4620      	mov	r0, r4
 800a59e:	f000 fc35 	bl	800ae0c <_calloc_r>
 800a5a2:	69e3      	ldr	r3, [r4, #28]
 800a5a4:	60f0      	str	r0, [r6, #12]
 800a5a6:	68db      	ldr	r3, [r3, #12]
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	d1e4      	bne.n	800a576 <_Balloc+0x2e>
 800a5ac:	2000      	movs	r0, #0
 800a5ae:	bd70      	pop	{r4, r5, r6, pc}
 800a5b0:	6802      	ldr	r2, [r0, #0]
 800a5b2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a5b6:	2300      	movs	r3, #0
 800a5b8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a5bc:	e7f7      	b.n	800a5ae <_Balloc+0x66>
 800a5be:	bf00      	nop
 800a5c0:	0800b499 	.word	0x0800b499
 800a5c4:	0800b519 	.word	0x0800b519

0800a5c8 <_Bfree>:
 800a5c8:	b570      	push	{r4, r5, r6, lr}
 800a5ca:	69c6      	ldr	r6, [r0, #28]
 800a5cc:	4605      	mov	r5, r0
 800a5ce:	460c      	mov	r4, r1
 800a5d0:	b976      	cbnz	r6, 800a5f0 <_Bfree+0x28>
 800a5d2:	2010      	movs	r0, #16
 800a5d4:	f7ff ff02 	bl	800a3dc <malloc>
 800a5d8:	4602      	mov	r2, r0
 800a5da:	61e8      	str	r0, [r5, #28]
 800a5dc:	b920      	cbnz	r0, 800a5e8 <_Bfree+0x20>
 800a5de:	4b09      	ldr	r3, [pc, #36]	@ (800a604 <_Bfree+0x3c>)
 800a5e0:	4809      	ldr	r0, [pc, #36]	@ (800a608 <_Bfree+0x40>)
 800a5e2:	218f      	movs	r1, #143	@ 0x8f
 800a5e4:	f000 fbf4 	bl	800add0 <__assert_func>
 800a5e8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a5ec:	6006      	str	r6, [r0, #0]
 800a5ee:	60c6      	str	r6, [r0, #12]
 800a5f0:	b13c      	cbz	r4, 800a602 <_Bfree+0x3a>
 800a5f2:	69eb      	ldr	r3, [r5, #28]
 800a5f4:	6862      	ldr	r2, [r4, #4]
 800a5f6:	68db      	ldr	r3, [r3, #12]
 800a5f8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a5fc:	6021      	str	r1, [r4, #0]
 800a5fe:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a602:	bd70      	pop	{r4, r5, r6, pc}
 800a604:	0800b499 	.word	0x0800b499
 800a608:	0800b519 	.word	0x0800b519

0800a60c <__multadd>:
 800a60c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a610:	690d      	ldr	r5, [r1, #16]
 800a612:	4607      	mov	r7, r0
 800a614:	460c      	mov	r4, r1
 800a616:	461e      	mov	r6, r3
 800a618:	f101 0c14 	add.w	ip, r1, #20
 800a61c:	2000      	movs	r0, #0
 800a61e:	f8dc 3000 	ldr.w	r3, [ip]
 800a622:	b299      	uxth	r1, r3
 800a624:	fb02 6101 	mla	r1, r2, r1, r6
 800a628:	0c1e      	lsrs	r6, r3, #16
 800a62a:	0c0b      	lsrs	r3, r1, #16
 800a62c:	fb02 3306 	mla	r3, r2, r6, r3
 800a630:	b289      	uxth	r1, r1
 800a632:	3001      	adds	r0, #1
 800a634:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a638:	4285      	cmp	r5, r0
 800a63a:	f84c 1b04 	str.w	r1, [ip], #4
 800a63e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a642:	dcec      	bgt.n	800a61e <__multadd+0x12>
 800a644:	b30e      	cbz	r6, 800a68a <__multadd+0x7e>
 800a646:	68a3      	ldr	r3, [r4, #8]
 800a648:	42ab      	cmp	r3, r5
 800a64a:	dc19      	bgt.n	800a680 <__multadd+0x74>
 800a64c:	6861      	ldr	r1, [r4, #4]
 800a64e:	4638      	mov	r0, r7
 800a650:	3101      	adds	r1, #1
 800a652:	f7ff ff79 	bl	800a548 <_Balloc>
 800a656:	4680      	mov	r8, r0
 800a658:	b928      	cbnz	r0, 800a666 <__multadd+0x5a>
 800a65a:	4602      	mov	r2, r0
 800a65c:	4b0c      	ldr	r3, [pc, #48]	@ (800a690 <__multadd+0x84>)
 800a65e:	480d      	ldr	r0, [pc, #52]	@ (800a694 <__multadd+0x88>)
 800a660:	21ba      	movs	r1, #186	@ 0xba
 800a662:	f000 fbb5 	bl	800add0 <__assert_func>
 800a666:	6922      	ldr	r2, [r4, #16]
 800a668:	3202      	adds	r2, #2
 800a66a:	f104 010c 	add.w	r1, r4, #12
 800a66e:	0092      	lsls	r2, r2, #2
 800a670:	300c      	adds	r0, #12
 800a672:	f000 fb9f 	bl	800adb4 <memcpy>
 800a676:	4621      	mov	r1, r4
 800a678:	4638      	mov	r0, r7
 800a67a:	f7ff ffa5 	bl	800a5c8 <_Bfree>
 800a67e:	4644      	mov	r4, r8
 800a680:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a684:	3501      	adds	r5, #1
 800a686:	615e      	str	r6, [r3, #20]
 800a688:	6125      	str	r5, [r4, #16]
 800a68a:	4620      	mov	r0, r4
 800a68c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a690:	0800b508 	.word	0x0800b508
 800a694:	0800b519 	.word	0x0800b519

0800a698 <__hi0bits>:
 800a698:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800a69c:	4603      	mov	r3, r0
 800a69e:	bf36      	itet	cc
 800a6a0:	0403      	lslcc	r3, r0, #16
 800a6a2:	2000      	movcs	r0, #0
 800a6a4:	2010      	movcc	r0, #16
 800a6a6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a6aa:	bf3c      	itt	cc
 800a6ac:	021b      	lslcc	r3, r3, #8
 800a6ae:	3008      	addcc	r0, #8
 800a6b0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a6b4:	bf3c      	itt	cc
 800a6b6:	011b      	lslcc	r3, r3, #4
 800a6b8:	3004      	addcc	r0, #4
 800a6ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a6be:	bf3c      	itt	cc
 800a6c0:	009b      	lslcc	r3, r3, #2
 800a6c2:	3002      	addcc	r0, #2
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	db05      	blt.n	800a6d4 <__hi0bits+0x3c>
 800a6c8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800a6cc:	f100 0001 	add.w	r0, r0, #1
 800a6d0:	bf08      	it	eq
 800a6d2:	2020      	moveq	r0, #32
 800a6d4:	4770      	bx	lr

0800a6d6 <__lo0bits>:
 800a6d6:	6803      	ldr	r3, [r0, #0]
 800a6d8:	4602      	mov	r2, r0
 800a6da:	f013 0007 	ands.w	r0, r3, #7
 800a6de:	d00b      	beq.n	800a6f8 <__lo0bits+0x22>
 800a6e0:	07d9      	lsls	r1, r3, #31
 800a6e2:	d421      	bmi.n	800a728 <__lo0bits+0x52>
 800a6e4:	0798      	lsls	r0, r3, #30
 800a6e6:	bf49      	itett	mi
 800a6e8:	085b      	lsrmi	r3, r3, #1
 800a6ea:	089b      	lsrpl	r3, r3, #2
 800a6ec:	2001      	movmi	r0, #1
 800a6ee:	6013      	strmi	r3, [r2, #0]
 800a6f0:	bf5c      	itt	pl
 800a6f2:	6013      	strpl	r3, [r2, #0]
 800a6f4:	2002      	movpl	r0, #2
 800a6f6:	4770      	bx	lr
 800a6f8:	b299      	uxth	r1, r3
 800a6fa:	b909      	cbnz	r1, 800a700 <__lo0bits+0x2a>
 800a6fc:	0c1b      	lsrs	r3, r3, #16
 800a6fe:	2010      	movs	r0, #16
 800a700:	b2d9      	uxtb	r1, r3
 800a702:	b909      	cbnz	r1, 800a708 <__lo0bits+0x32>
 800a704:	3008      	adds	r0, #8
 800a706:	0a1b      	lsrs	r3, r3, #8
 800a708:	0719      	lsls	r1, r3, #28
 800a70a:	bf04      	itt	eq
 800a70c:	091b      	lsreq	r3, r3, #4
 800a70e:	3004      	addeq	r0, #4
 800a710:	0799      	lsls	r1, r3, #30
 800a712:	bf04      	itt	eq
 800a714:	089b      	lsreq	r3, r3, #2
 800a716:	3002      	addeq	r0, #2
 800a718:	07d9      	lsls	r1, r3, #31
 800a71a:	d403      	bmi.n	800a724 <__lo0bits+0x4e>
 800a71c:	085b      	lsrs	r3, r3, #1
 800a71e:	f100 0001 	add.w	r0, r0, #1
 800a722:	d003      	beq.n	800a72c <__lo0bits+0x56>
 800a724:	6013      	str	r3, [r2, #0]
 800a726:	4770      	bx	lr
 800a728:	2000      	movs	r0, #0
 800a72a:	4770      	bx	lr
 800a72c:	2020      	movs	r0, #32
 800a72e:	4770      	bx	lr

0800a730 <__i2b>:
 800a730:	b510      	push	{r4, lr}
 800a732:	460c      	mov	r4, r1
 800a734:	2101      	movs	r1, #1
 800a736:	f7ff ff07 	bl	800a548 <_Balloc>
 800a73a:	4602      	mov	r2, r0
 800a73c:	b928      	cbnz	r0, 800a74a <__i2b+0x1a>
 800a73e:	4b05      	ldr	r3, [pc, #20]	@ (800a754 <__i2b+0x24>)
 800a740:	4805      	ldr	r0, [pc, #20]	@ (800a758 <__i2b+0x28>)
 800a742:	f240 1145 	movw	r1, #325	@ 0x145
 800a746:	f000 fb43 	bl	800add0 <__assert_func>
 800a74a:	2301      	movs	r3, #1
 800a74c:	6144      	str	r4, [r0, #20]
 800a74e:	6103      	str	r3, [r0, #16]
 800a750:	bd10      	pop	{r4, pc}
 800a752:	bf00      	nop
 800a754:	0800b508 	.word	0x0800b508
 800a758:	0800b519 	.word	0x0800b519

0800a75c <__multiply>:
 800a75c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a760:	4617      	mov	r7, r2
 800a762:	690a      	ldr	r2, [r1, #16]
 800a764:	693b      	ldr	r3, [r7, #16]
 800a766:	429a      	cmp	r2, r3
 800a768:	bfa8      	it	ge
 800a76a:	463b      	movge	r3, r7
 800a76c:	4689      	mov	r9, r1
 800a76e:	bfa4      	itt	ge
 800a770:	460f      	movge	r7, r1
 800a772:	4699      	movge	r9, r3
 800a774:	693d      	ldr	r5, [r7, #16]
 800a776:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a77a:	68bb      	ldr	r3, [r7, #8]
 800a77c:	6879      	ldr	r1, [r7, #4]
 800a77e:	eb05 060a 	add.w	r6, r5, sl
 800a782:	42b3      	cmp	r3, r6
 800a784:	b085      	sub	sp, #20
 800a786:	bfb8      	it	lt
 800a788:	3101      	addlt	r1, #1
 800a78a:	f7ff fedd 	bl	800a548 <_Balloc>
 800a78e:	b930      	cbnz	r0, 800a79e <__multiply+0x42>
 800a790:	4602      	mov	r2, r0
 800a792:	4b41      	ldr	r3, [pc, #260]	@ (800a898 <__multiply+0x13c>)
 800a794:	4841      	ldr	r0, [pc, #260]	@ (800a89c <__multiply+0x140>)
 800a796:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800a79a:	f000 fb19 	bl	800add0 <__assert_func>
 800a79e:	f100 0414 	add.w	r4, r0, #20
 800a7a2:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800a7a6:	4623      	mov	r3, r4
 800a7a8:	2200      	movs	r2, #0
 800a7aa:	4573      	cmp	r3, lr
 800a7ac:	d320      	bcc.n	800a7f0 <__multiply+0x94>
 800a7ae:	f107 0814 	add.w	r8, r7, #20
 800a7b2:	f109 0114 	add.w	r1, r9, #20
 800a7b6:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800a7ba:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800a7be:	9302      	str	r3, [sp, #8]
 800a7c0:	1beb      	subs	r3, r5, r7
 800a7c2:	3b15      	subs	r3, #21
 800a7c4:	f023 0303 	bic.w	r3, r3, #3
 800a7c8:	3304      	adds	r3, #4
 800a7ca:	3715      	adds	r7, #21
 800a7cc:	42bd      	cmp	r5, r7
 800a7ce:	bf38      	it	cc
 800a7d0:	2304      	movcc	r3, #4
 800a7d2:	9301      	str	r3, [sp, #4]
 800a7d4:	9b02      	ldr	r3, [sp, #8]
 800a7d6:	9103      	str	r1, [sp, #12]
 800a7d8:	428b      	cmp	r3, r1
 800a7da:	d80c      	bhi.n	800a7f6 <__multiply+0x9a>
 800a7dc:	2e00      	cmp	r6, #0
 800a7de:	dd03      	ble.n	800a7e8 <__multiply+0x8c>
 800a7e0:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	d055      	beq.n	800a894 <__multiply+0x138>
 800a7e8:	6106      	str	r6, [r0, #16]
 800a7ea:	b005      	add	sp, #20
 800a7ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a7f0:	f843 2b04 	str.w	r2, [r3], #4
 800a7f4:	e7d9      	b.n	800a7aa <__multiply+0x4e>
 800a7f6:	f8b1 a000 	ldrh.w	sl, [r1]
 800a7fa:	f1ba 0f00 	cmp.w	sl, #0
 800a7fe:	d01f      	beq.n	800a840 <__multiply+0xe4>
 800a800:	46c4      	mov	ip, r8
 800a802:	46a1      	mov	r9, r4
 800a804:	2700      	movs	r7, #0
 800a806:	f85c 2b04 	ldr.w	r2, [ip], #4
 800a80a:	f8d9 3000 	ldr.w	r3, [r9]
 800a80e:	fa1f fb82 	uxth.w	fp, r2
 800a812:	b29b      	uxth	r3, r3
 800a814:	fb0a 330b 	mla	r3, sl, fp, r3
 800a818:	443b      	add	r3, r7
 800a81a:	f8d9 7000 	ldr.w	r7, [r9]
 800a81e:	0c12      	lsrs	r2, r2, #16
 800a820:	0c3f      	lsrs	r7, r7, #16
 800a822:	fb0a 7202 	mla	r2, sl, r2, r7
 800a826:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800a82a:	b29b      	uxth	r3, r3
 800a82c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a830:	4565      	cmp	r5, ip
 800a832:	f849 3b04 	str.w	r3, [r9], #4
 800a836:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800a83a:	d8e4      	bhi.n	800a806 <__multiply+0xaa>
 800a83c:	9b01      	ldr	r3, [sp, #4]
 800a83e:	50e7      	str	r7, [r4, r3]
 800a840:	9b03      	ldr	r3, [sp, #12]
 800a842:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800a846:	3104      	adds	r1, #4
 800a848:	f1b9 0f00 	cmp.w	r9, #0
 800a84c:	d020      	beq.n	800a890 <__multiply+0x134>
 800a84e:	6823      	ldr	r3, [r4, #0]
 800a850:	4647      	mov	r7, r8
 800a852:	46a4      	mov	ip, r4
 800a854:	f04f 0a00 	mov.w	sl, #0
 800a858:	f8b7 b000 	ldrh.w	fp, [r7]
 800a85c:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800a860:	fb09 220b 	mla	r2, r9, fp, r2
 800a864:	4452      	add	r2, sl
 800a866:	b29b      	uxth	r3, r3
 800a868:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a86c:	f84c 3b04 	str.w	r3, [ip], #4
 800a870:	f857 3b04 	ldr.w	r3, [r7], #4
 800a874:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a878:	f8bc 3000 	ldrh.w	r3, [ip]
 800a87c:	fb09 330a 	mla	r3, r9, sl, r3
 800a880:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800a884:	42bd      	cmp	r5, r7
 800a886:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a88a:	d8e5      	bhi.n	800a858 <__multiply+0xfc>
 800a88c:	9a01      	ldr	r2, [sp, #4]
 800a88e:	50a3      	str	r3, [r4, r2]
 800a890:	3404      	adds	r4, #4
 800a892:	e79f      	b.n	800a7d4 <__multiply+0x78>
 800a894:	3e01      	subs	r6, #1
 800a896:	e7a1      	b.n	800a7dc <__multiply+0x80>
 800a898:	0800b508 	.word	0x0800b508
 800a89c:	0800b519 	.word	0x0800b519

0800a8a0 <__pow5mult>:
 800a8a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a8a4:	4615      	mov	r5, r2
 800a8a6:	f012 0203 	ands.w	r2, r2, #3
 800a8aa:	4607      	mov	r7, r0
 800a8ac:	460e      	mov	r6, r1
 800a8ae:	d007      	beq.n	800a8c0 <__pow5mult+0x20>
 800a8b0:	4c25      	ldr	r4, [pc, #148]	@ (800a948 <__pow5mult+0xa8>)
 800a8b2:	3a01      	subs	r2, #1
 800a8b4:	2300      	movs	r3, #0
 800a8b6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a8ba:	f7ff fea7 	bl	800a60c <__multadd>
 800a8be:	4606      	mov	r6, r0
 800a8c0:	10ad      	asrs	r5, r5, #2
 800a8c2:	d03d      	beq.n	800a940 <__pow5mult+0xa0>
 800a8c4:	69fc      	ldr	r4, [r7, #28]
 800a8c6:	b97c      	cbnz	r4, 800a8e8 <__pow5mult+0x48>
 800a8c8:	2010      	movs	r0, #16
 800a8ca:	f7ff fd87 	bl	800a3dc <malloc>
 800a8ce:	4602      	mov	r2, r0
 800a8d0:	61f8      	str	r0, [r7, #28]
 800a8d2:	b928      	cbnz	r0, 800a8e0 <__pow5mult+0x40>
 800a8d4:	4b1d      	ldr	r3, [pc, #116]	@ (800a94c <__pow5mult+0xac>)
 800a8d6:	481e      	ldr	r0, [pc, #120]	@ (800a950 <__pow5mult+0xb0>)
 800a8d8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800a8dc:	f000 fa78 	bl	800add0 <__assert_func>
 800a8e0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a8e4:	6004      	str	r4, [r0, #0]
 800a8e6:	60c4      	str	r4, [r0, #12]
 800a8e8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800a8ec:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a8f0:	b94c      	cbnz	r4, 800a906 <__pow5mult+0x66>
 800a8f2:	f240 2171 	movw	r1, #625	@ 0x271
 800a8f6:	4638      	mov	r0, r7
 800a8f8:	f7ff ff1a 	bl	800a730 <__i2b>
 800a8fc:	2300      	movs	r3, #0
 800a8fe:	f8c8 0008 	str.w	r0, [r8, #8]
 800a902:	4604      	mov	r4, r0
 800a904:	6003      	str	r3, [r0, #0]
 800a906:	f04f 0900 	mov.w	r9, #0
 800a90a:	07eb      	lsls	r3, r5, #31
 800a90c:	d50a      	bpl.n	800a924 <__pow5mult+0x84>
 800a90e:	4631      	mov	r1, r6
 800a910:	4622      	mov	r2, r4
 800a912:	4638      	mov	r0, r7
 800a914:	f7ff ff22 	bl	800a75c <__multiply>
 800a918:	4631      	mov	r1, r6
 800a91a:	4680      	mov	r8, r0
 800a91c:	4638      	mov	r0, r7
 800a91e:	f7ff fe53 	bl	800a5c8 <_Bfree>
 800a922:	4646      	mov	r6, r8
 800a924:	106d      	asrs	r5, r5, #1
 800a926:	d00b      	beq.n	800a940 <__pow5mult+0xa0>
 800a928:	6820      	ldr	r0, [r4, #0]
 800a92a:	b938      	cbnz	r0, 800a93c <__pow5mult+0x9c>
 800a92c:	4622      	mov	r2, r4
 800a92e:	4621      	mov	r1, r4
 800a930:	4638      	mov	r0, r7
 800a932:	f7ff ff13 	bl	800a75c <__multiply>
 800a936:	6020      	str	r0, [r4, #0]
 800a938:	f8c0 9000 	str.w	r9, [r0]
 800a93c:	4604      	mov	r4, r0
 800a93e:	e7e4      	b.n	800a90a <__pow5mult+0x6a>
 800a940:	4630      	mov	r0, r6
 800a942:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a946:	bf00      	nop
 800a948:	0800b5cc 	.word	0x0800b5cc
 800a94c:	0800b499 	.word	0x0800b499
 800a950:	0800b519 	.word	0x0800b519

0800a954 <__lshift>:
 800a954:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a958:	460c      	mov	r4, r1
 800a95a:	6849      	ldr	r1, [r1, #4]
 800a95c:	6923      	ldr	r3, [r4, #16]
 800a95e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a962:	68a3      	ldr	r3, [r4, #8]
 800a964:	4607      	mov	r7, r0
 800a966:	4691      	mov	r9, r2
 800a968:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a96c:	f108 0601 	add.w	r6, r8, #1
 800a970:	42b3      	cmp	r3, r6
 800a972:	db0b      	blt.n	800a98c <__lshift+0x38>
 800a974:	4638      	mov	r0, r7
 800a976:	f7ff fde7 	bl	800a548 <_Balloc>
 800a97a:	4605      	mov	r5, r0
 800a97c:	b948      	cbnz	r0, 800a992 <__lshift+0x3e>
 800a97e:	4602      	mov	r2, r0
 800a980:	4b28      	ldr	r3, [pc, #160]	@ (800aa24 <__lshift+0xd0>)
 800a982:	4829      	ldr	r0, [pc, #164]	@ (800aa28 <__lshift+0xd4>)
 800a984:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800a988:	f000 fa22 	bl	800add0 <__assert_func>
 800a98c:	3101      	adds	r1, #1
 800a98e:	005b      	lsls	r3, r3, #1
 800a990:	e7ee      	b.n	800a970 <__lshift+0x1c>
 800a992:	2300      	movs	r3, #0
 800a994:	f100 0114 	add.w	r1, r0, #20
 800a998:	f100 0210 	add.w	r2, r0, #16
 800a99c:	4618      	mov	r0, r3
 800a99e:	4553      	cmp	r3, sl
 800a9a0:	db33      	blt.n	800aa0a <__lshift+0xb6>
 800a9a2:	6920      	ldr	r0, [r4, #16]
 800a9a4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a9a8:	f104 0314 	add.w	r3, r4, #20
 800a9ac:	f019 091f 	ands.w	r9, r9, #31
 800a9b0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a9b4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a9b8:	d02b      	beq.n	800aa12 <__lshift+0xbe>
 800a9ba:	f1c9 0e20 	rsb	lr, r9, #32
 800a9be:	468a      	mov	sl, r1
 800a9c0:	2200      	movs	r2, #0
 800a9c2:	6818      	ldr	r0, [r3, #0]
 800a9c4:	fa00 f009 	lsl.w	r0, r0, r9
 800a9c8:	4310      	orrs	r0, r2
 800a9ca:	f84a 0b04 	str.w	r0, [sl], #4
 800a9ce:	f853 2b04 	ldr.w	r2, [r3], #4
 800a9d2:	459c      	cmp	ip, r3
 800a9d4:	fa22 f20e 	lsr.w	r2, r2, lr
 800a9d8:	d8f3      	bhi.n	800a9c2 <__lshift+0x6e>
 800a9da:	ebac 0304 	sub.w	r3, ip, r4
 800a9de:	3b15      	subs	r3, #21
 800a9e0:	f023 0303 	bic.w	r3, r3, #3
 800a9e4:	3304      	adds	r3, #4
 800a9e6:	f104 0015 	add.w	r0, r4, #21
 800a9ea:	4560      	cmp	r0, ip
 800a9ec:	bf88      	it	hi
 800a9ee:	2304      	movhi	r3, #4
 800a9f0:	50ca      	str	r2, [r1, r3]
 800a9f2:	b10a      	cbz	r2, 800a9f8 <__lshift+0xa4>
 800a9f4:	f108 0602 	add.w	r6, r8, #2
 800a9f8:	3e01      	subs	r6, #1
 800a9fa:	4638      	mov	r0, r7
 800a9fc:	612e      	str	r6, [r5, #16]
 800a9fe:	4621      	mov	r1, r4
 800aa00:	f7ff fde2 	bl	800a5c8 <_Bfree>
 800aa04:	4628      	mov	r0, r5
 800aa06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aa0a:	f842 0f04 	str.w	r0, [r2, #4]!
 800aa0e:	3301      	adds	r3, #1
 800aa10:	e7c5      	b.n	800a99e <__lshift+0x4a>
 800aa12:	3904      	subs	r1, #4
 800aa14:	f853 2b04 	ldr.w	r2, [r3], #4
 800aa18:	f841 2f04 	str.w	r2, [r1, #4]!
 800aa1c:	459c      	cmp	ip, r3
 800aa1e:	d8f9      	bhi.n	800aa14 <__lshift+0xc0>
 800aa20:	e7ea      	b.n	800a9f8 <__lshift+0xa4>
 800aa22:	bf00      	nop
 800aa24:	0800b508 	.word	0x0800b508
 800aa28:	0800b519 	.word	0x0800b519

0800aa2c <__mcmp>:
 800aa2c:	690a      	ldr	r2, [r1, #16]
 800aa2e:	4603      	mov	r3, r0
 800aa30:	6900      	ldr	r0, [r0, #16]
 800aa32:	1a80      	subs	r0, r0, r2
 800aa34:	b530      	push	{r4, r5, lr}
 800aa36:	d10e      	bne.n	800aa56 <__mcmp+0x2a>
 800aa38:	3314      	adds	r3, #20
 800aa3a:	3114      	adds	r1, #20
 800aa3c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800aa40:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800aa44:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800aa48:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800aa4c:	4295      	cmp	r5, r2
 800aa4e:	d003      	beq.n	800aa58 <__mcmp+0x2c>
 800aa50:	d205      	bcs.n	800aa5e <__mcmp+0x32>
 800aa52:	f04f 30ff 	mov.w	r0, #4294967295
 800aa56:	bd30      	pop	{r4, r5, pc}
 800aa58:	42a3      	cmp	r3, r4
 800aa5a:	d3f3      	bcc.n	800aa44 <__mcmp+0x18>
 800aa5c:	e7fb      	b.n	800aa56 <__mcmp+0x2a>
 800aa5e:	2001      	movs	r0, #1
 800aa60:	e7f9      	b.n	800aa56 <__mcmp+0x2a>
	...

0800aa64 <__mdiff>:
 800aa64:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa68:	4689      	mov	r9, r1
 800aa6a:	4606      	mov	r6, r0
 800aa6c:	4611      	mov	r1, r2
 800aa6e:	4648      	mov	r0, r9
 800aa70:	4614      	mov	r4, r2
 800aa72:	f7ff ffdb 	bl	800aa2c <__mcmp>
 800aa76:	1e05      	subs	r5, r0, #0
 800aa78:	d112      	bne.n	800aaa0 <__mdiff+0x3c>
 800aa7a:	4629      	mov	r1, r5
 800aa7c:	4630      	mov	r0, r6
 800aa7e:	f7ff fd63 	bl	800a548 <_Balloc>
 800aa82:	4602      	mov	r2, r0
 800aa84:	b928      	cbnz	r0, 800aa92 <__mdiff+0x2e>
 800aa86:	4b3f      	ldr	r3, [pc, #252]	@ (800ab84 <__mdiff+0x120>)
 800aa88:	f240 2137 	movw	r1, #567	@ 0x237
 800aa8c:	483e      	ldr	r0, [pc, #248]	@ (800ab88 <__mdiff+0x124>)
 800aa8e:	f000 f99f 	bl	800add0 <__assert_func>
 800aa92:	2301      	movs	r3, #1
 800aa94:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800aa98:	4610      	mov	r0, r2
 800aa9a:	b003      	add	sp, #12
 800aa9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aaa0:	bfbc      	itt	lt
 800aaa2:	464b      	movlt	r3, r9
 800aaa4:	46a1      	movlt	r9, r4
 800aaa6:	4630      	mov	r0, r6
 800aaa8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800aaac:	bfba      	itte	lt
 800aaae:	461c      	movlt	r4, r3
 800aab0:	2501      	movlt	r5, #1
 800aab2:	2500      	movge	r5, #0
 800aab4:	f7ff fd48 	bl	800a548 <_Balloc>
 800aab8:	4602      	mov	r2, r0
 800aaba:	b918      	cbnz	r0, 800aac4 <__mdiff+0x60>
 800aabc:	4b31      	ldr	r3, [pc, #196]	@ (800ab84 <__mdiff+0x120>)
 800aabe:	f240 2145 	movw	r1, #581	@ 0x245
 800aac2:	e7e3      	b.n	800aa8c <__mdiff+0x28>
 800aac4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800aac8:	6926      	ldr	r6, [r4, #16]
 800aaca:	60c5      	str	r5, [r0, #12]
 800aacc:	f109 0310 	add.w	r3, r9, #16
 800aad0:	f109 0514 	add.w	r5, r9, #20
 800aad4:	f104 0e14 	add.w	lr, r4, #20
 800aad8:	f100 0b14 	add.w	fp, r0, #20
 800aadc:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800aae0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800aae4:	9301      	str	r3, [sp, #4]
 800aae6:	46d9      	mov	r9, fp
 800aae8:	f04f 0c00 	mov.w	ip, #0
 800aaec:	9b01      	ldr	r3, [sp, #4]
 800aaee:	f85e 0b04 	ldr.w	r0, [lr], #4
 800aaf2:	f853 af04 	ldr.w	sl, [r3, #4]!
 800aaf6:	9301      	str	r3, [sp, #4]
 800aaf8:	fa1f f38a 	uxth.w	r3, sl
 800aafc:	4619      	mov	r1, r3
 800aafe:	b283      	uxth	r3, r0
 800ab00:	1acb      	subs	r3, r1, r3
 800ab02:	0c00      	lsrs	r0, r0, #16
 800ab04:	4463      	add	r3, ip
 800ab06:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800ab0a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800ab0e:	b29b      	uxth	r3, r3
 800ab10:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800ab14:	4576      	cmp	r6, lr
 800ab16:	f849 3b04 	str.w	r3, [r9], #4
 800ab1a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800ab1e:	d8e5      	bhi.n	800aaec <__mdiff+0x88>
 800ab20:	1b33      	subs	r3, r6, r4
 800ab22:	3b15      	subs	r3, #21
 800ab24:	f023 0303 	bic.w	r3, r3, #3
 800ab28:	3415      	adds	r4, #21
 800ab2a:	3304      	adds	r3, #4
 800ab2c:	42a6      	cmp	r6, r4
 800ab2e:	bf38      	it	cc
 800ab30:	2304      	movcc	r3, #4
 800ab32:	441d      	add	r5, r3
 800ab34:	445b      	add	r3, fp
 800ab36:	461e      	mov	r6, r3
 800ab38:	462c      	mov	r4, r5
 800ab3a:	4544      	cmp	r4, r8
 800ab3c:	d30e      	bcc.n	800ab5c <__mdiff+0xf8>
 800ab3e:	f108 0103 	add.w	r1, r8, #3
 800ab42:	1b49      	subs	r1, r1, r5
 800ab44:	f021 0103 	bic.w	r1, r1, #3
 800ab48:	3d03      	subs	r5, #3
 800ab4a:	45a8      	cmp	r8, r5
 800ab4c:	bf38      	it	cc
 800ab4e:	2100      	movcc	r1, #0
 800ab50:	440b      	add	r3, r1
 800ab52:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ab56:	b191      	cbz	r1, 800ab7e <__mdiff+0x11a>
 800ab58:	6117      	str	r7, [r2, #16]
 800ab5a:	e79d      	b.n	800aa98 <__mdiff+0x34>
 800ab5c:	f854 1b04 	ldr.w	r1, [r4], #4
 800ab60:	46e6      	mov	lr, ip
 800ab62:	0c08      	lsrs	r0, r1, #16
 800ab64:	fa1c fc81 	uxtah	ip, ip, r1
 800ab68:	4471      	add	r1, lr
 800ab6a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800ab6e:	b289      	uxth	r1, r1
 800ab70:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800ab74:	f846 1b04 	str.w	r1, [r6], #4
 800ab78:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800ab7c:	e7dd      	b.n	800ab3a <__mdiff+0xd6>
 800ab7e:	3f01      	subs	r7, #1
 800ab80:	e7e7      	b.n	800ab52 <__mdiff+0xee>
 800ab82:	bf00      	nop
 800ab84:	0800b508 	.word	0x0800b508
 800ab88:	0800b519 	.word	0x0800b519

0800ab8c <__d2b>:
 800ab8c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ab90:	460f      	mov	r7, r1
 800ab92:	2101      	movs	r1, #1
 800ab94:	ec59 8b10 	vmov	r8, r9, d0
 800ab98:	4616      	mov	r6, r2
 800ab9a:	f7ff fcd5 	bl	800a548 <_Balloc>
 800ab9e:	4604      	mov	r4, r0
 800aba0:	b930      	cbnz	r0, 800abb0 <__d2b+0x24>
 800aba2:	4602      	mov	r2, r0
 800aba4:	4b23      	ldr	r3, [pc, #140]	@ (800ac34 <__d2b+0xa8>)
 800aba6:	4824      	ldr	r0, [pc, #144]	@ (800ac38 <__d2b+0xac>)
 800aba8:	f240 310f 	movw	r1, #783	@ 0x30f
 800abac:	f000 f910 	bl	800add0 <__assert_func>
 800abb0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800abb4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800abb8:	b10d      	cbz	r5, 800abbe <__d2b+0x32>
 800abba:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800abbe:	9301      	str	r3, [sp, #4]
 800abc0:	f1b8 0300 	subs.w	r3, r8, #0
 800abc4:	d023      	beq.n	800ac0e <__d2b+0x82>
 800abc6:	4668      	mov	r0, sp
 800abc8:	9300      	str	r3, [sp, #0]
 800abca:	f7ff fd84 	bl	800a6d6 <__lo0bits>
 800abce:	e9dd 1200 	ldrd	r1, r2, [sp]
 800abd2:	b1d0      	cbz	r0, 800ac0a <__d2b+0x7e>
 800abd4:	f1c0 0320 	rsb	r3, r0, #32
 800abd8:	fa02 f303 	lsl.w	r3, r2, r3
 800abdc:	430b      	orrs	r3, r1
 800abde:	40c2      	lsrs	r2, r0
 800abe0:	6163      	str	r3, [r4, #20]
 800abe2:	9201      	str	r2, [sp, #4]
 800abe4:	9b01      	ldr	r3, [sp, #4]
 800abe6:	61a3      	str	r3, [r4, #24]
 800abe8:	2b00      	cmp	r3, #0
 800abea:	bf0c      	ite	eq
 800abec:	2201      	moveq	r2, #1
 800abee:	2202      	movne	r2, #2
 800abf0:	6122      	str	r2, [r4, #16]
 800abf2:	b1a5      	cbz	r5, 800ac1e <__d2b+0x92>
 800abf4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800abf8:	4405      	add	r5, r0
 800abfa:	603d      	str	r5, [r7, #0]
 800abfc:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800ac00:	6030      	str	r0, [r6, #0]
 800ac02:	4620      	mov	r0, r4
 800ac04:	b003      	add	sp, #12
 800ac06:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ac0a:	6161      	str	r1, [r4, #20]
 800ac0c:	e7ea      	b.n	800abe4 <__d2b+0x58>
 800ac0e:	a801      	add	r0, sp, #4
 800ac10:	f7ff fd61 	bl	800a6d6 <__lo0bits>
 800ac14:	9b01      	ldr	r3, [sp, #4]
 800ac16:	6163      	str	r3, [r4, #20]
 800ac18:	3020      	adds	r0, #32
 800ac1a:	2201      	movs	r2, #1
 800ac1c:	e7e8      	b.n	800abf0 <__d2b+0x64>
 800ac1e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ac22:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800ac26:	6038      	str	r0, [r7, #0]
 800ac28:	6918      	ldr	r0, [r3, #16]
 800ac2a:	f7ff fd35 	bl	800a698 <__hi0bits>
 800ac2e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ac32:	e7e5      	b.n	800ac00 <__d2b+0x74>
 800ac34:	0800b508 	.word	0x0800b508
 800ac38:	0800b519 	.word	0x0800b519

0800ac3c <__sflush_r>:
 800ac3c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ac40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac44:	0716      	lsls	r6, r2, #28
 800ac46:	4605      	mov	r5, r0
 800ac48:	460c      	mov	r4, r1
 800ac4a:	d454      	bmi.n	800acf6 <__sflush_r+0xba>
 800ac4c:	684b      	ldr	r3, [r1, #4]
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	dc02      	bgt.n	800ac58 <__sflush_r+0x1c>
 800ac52:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	dd48      	ble.n	800acea <__sflush_r+0xae>
 800ac58:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ac5a:	2e00      	cmp	r6, #0
 800ac5c:	d045      	beq.n	800acea <__sflush_r+0xae>
 800ac5e:	2300      	movs	r3, #0
 800ac60:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800ac64:	682f      	ldr	r7, [r5, #0]
 800ac66:	6a21      	ldr	r1, [r4, #32]
 800ac68:	602b      	str	r3, [r5, #0]
 800ac6a:	d030      	beq.n	800acce <__sflush_r+0x92>
 800ac6c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800ac6e:	89a3      	ldrh	r3, [r4, #12]
 800ac70:	0759      	lsls	r1, r3, #29
 800ac72:	d505      	bpl.n	800ac80 <__sflush_r+0x44>
 800ac74:	6863      	ldr	r3, [r4, #4]
 800ac76:	1ad2      	subs	r2, r2, r3
 800ac78:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800ac7a:	b10b      	cbz	r3, 800ac80 <__sflush_r+0x44>
 800ac7c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800ac7e:	1ad2      	subs	r2, r2, r3
 800ac80:	2300      	movs	r3, #0
 800ac82:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ac84:	6a21      	ldr	r1, [r4, #32]
 800ac86:	4628      	mov	r0, r5
 800ac88:	47b0      	blx	r6
 800ac8a:	1c43      	adds	r3, r0, #1
 800ac8c:	89a3      	ldrh	r3, [r4, #12]
 800ac8e:	d106      	bne.n	800ac9e <__sflush_r+0x62>
 800ac90:	6829      	ldr	r1, [r5, #0]
 800ac92:	291d      	cmp	r1, #29
 800ac94:	d82b      	bhi.n	800acee <__sflush_r+0xb2>
 800ac96:	4a2a      	ldr	r2, [pc, #168]	@ (800ad40 <__sflush_r+0x104>)
 800ac98:	40ca      	lsrs	r2, r1
 800ac9a:	07d6      	lsls	r6, r2, #31
 800ac9c:	d527      	bpl.n	800acee <__sflush_r+0xb2>
 800ac9e:	2200      	movs	r2, #0
 800aca0:	6062      	str	r2, [r4, #4]
 800aca2:	04d9      	lsls	r1, r3, #19
 800aca4:	6922      	ldr	r2, [r4, #16]
 800aca6:	6022      	str	r2, [r4, #0]
 800aca8:	d504      	bpl.n	800acb4 <__sflush_r+0x78>
 800acaa:	1c42      	adds	r2, r0, #1
 800acac:	d101      	bne.n	800acb2 <__sflush_r+0x76>
 800acae:	682b      	ldr	r3, [r5, #0]
 800acb0:	b903      	cbnz	r3, 800acb4 <__sflush_r+0x78>
 800acb2:	6560      	str	r0, [r4, #84]	@ 0x54
 800acb4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800acb6:	602f      	str	r7, [r5, #0]
 800acb8:	b1b9      	cbz	r1, 800acea <__sflush_r+0xae>
 800acba:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800acbe:	4299      	cmp	r1, r3
 800acc0:	d002      	beq.n	800acc8 <__sflush_r+0x8c>
 800acc2:	4628      	mov	r0, r5
 800acc4:	f7ff fb40 	bl	800a348 <_free_r>
 800acc8:	2300      	movs	r3, #0
 800acca:	6363      	str	r3, [r4, #52]	@ 0x34
 800accc:	e00d      	b.n	800acea <__sflush_r+0xae>
 800acce:	2301      	movs	r3, #1
 800acd0:	4628      	mov	r0, r5
 800acd2:	47b0      	blx	r6
 800acd4:	4602      	mov	r2, r0
 800acd6:	1c50      	adds	r0, r2, #1
 800acd8:	d1c9      	bne.n	800ac6e <__sflush_r+0x32>
 800acda:	682b      	ldr	r3, [r5, #0]
 800acdc:	2b00      	cmp	r3, #0
 800acde:	d0c6      	beq.n	800ac6e <__sflush_r+0x32>
 800ace0:	2b1d      	cmp	r3, #29
 800ace2:	d001      	beq.n	800ace8 <__sflush_r+0xac>
 800ace4:	2b16      	cmp	r3, #22
 800ace6:	d11e      	bne.n	800ad26 <__sflush_r+0xea>
 800ace8:	602f      	str	r7, [r5, #0]
 800acea:	2000      	movs	r0, #0
 800acec:	e022      	b.n	800ad34 <__sflush_r+0xf8>
 800acee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800acf2:	b21b      	sxth	r3, r3
 800acf4:	e01b      	b.n	800ad2e <__sflush_r+0xf2>
 800acf6:	690f      	ldr	r7, [r1, #16]
 800acf8:	2f00      	cmp	r7, #0
 800acfa:	d0f6      	beq.n	800acea <__sflush_r+0xae>
 800acfc:	0793      	lsls	r3, r2, #30
 800acfe:	680e      	ldr	r6, [r1, #0]
 800ad00:	bf08      	it	eq
 800ad02:	694b      	ldreq	r3, [r1, #20]
 800ad04:	600f      	str	r7, [r1, #0]
 800ad06:	bf18      	it	ne
 800ad08:	2300      	movne	r3, #0
 800ad0a:	eba6 0807 	sub.w	r8, r6, r7
 800ad0e:	608b      	str	r3, [r1, #8]
 800ad10:	f1b8 0f00 	cmp.w	r8, #0
 800ad14:	dde9      	ble.n	800acea <__sflush_r+0xae>
 800ad16:	6a21      	ldr	r1, [r4, #32]
 800ad18:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800ad1a:	4643      	mov	r3, r8
 800ad1c:	463a      	mov	r2, r7
 800ad1e:	4628      	mov	r0, r5
 800ad20:	47b0      	blx	r6
 800ad22:	2800      	cmp	r0, #0
 800ad24:	dc08      	bgt.n	800ad38 <__sflush_r+0xfc>
 800ad26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ad2a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ad2e:	81a3      	strh	r3, [r4, #12]
 800ad30:	f04f 30ff 	mov.w	r0, #4294967295
 800ad34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ad38:	4407      	add	r7, r0
 800ad3a:	eba8 0800 	sub.w	r8, r8, r0
 800ad3e:	e7e7      	b.n	800ad10 <__sflush_r+0xd4>
 800ad40:	20400001 	.word	0x20400001

0800ad44 <_fflush_r>:
 800ad44:	b538      	push	{r3, r4, r5, lr}
 800ad46:	690b      	ldr	r3, [r1, #16]
 800ad48:	4605      	mov	r5, r0
 800ad4a:	460c      	mov	r4, r1
 800ad4c:	b913      	cbnz	r3, 800ad54 <_fflush_r+0x10>
 800ad4e:	2500      	movs	r5, #0
 800ad50:	4628      	mov	r0, r5
 800ad52:	bd38      	pop	{r3, r4, r5, pc}
 800ad54:	b118      	cbz	r0, 800ad5e <_fflush_r+0x1a>
 800ad56:	6a03      	ldr	r3, [r0, #32]
 800ad58:	b90b      	cbnz	r3, 800ad5e <_fflush_r+0x1a>
 800ad5a:	f7fe fba3 	bl	80094a4 <__sinit>
 800ad5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	d0f3      	beq.n	800ad4e <_fflush_r+0xa>
 800ad66:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800ad68:	07d0      	lsls	r0, r2, #31
 800ad6a:	d404      	bmi.n	800ad76 <_fflush_r+0x32>
 800ad6c:	0599      	lsls	r1, r3, #22
 800ad6e:	d402      	bmi.n	800ad76 <_fflush_r+0x32>
 800ad70:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ad72:	f7fe fc8e 	bl	8009692 <__retarget_lock_acquire_recursive>
 800ad76:	4628      	mov	r0, r5
 800ad78:	4621      	mov	r1, r4
 800ad7a:	f7ff ff5f 	bl	800ac3c <__sflush_r>
 800ad7e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ad80:	07da      	lsls	r2, r3, #31
 800ad82:	4605      	mov	r5, r0
 800ad84:	d4e4      	bmi.n	800ad50 <_fflush_r+0xc>
 800ad86:	89a3      	ldrh	r3, [r4, #12]
 800ad88:	059b      	lsls	r3, r3, #22
 800ad8a:	d4e1      	bmi.n	800ad50 <_fflush_r+0xc>
 800ad8c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ad8e:	f7fe fc81 	bl	8009694 <__retarget_lock_release_recursive>
 800ad92:	e7dd      	b.n	800ad50 <_fflush_r+0xc>

0800ad94 <_sbrk_r>:
 800ad94:	b538      	push	{r3, r4, r5, lr}
 800ad96:	4d06      	ldr	r5, [pc, #24]	@ (800adb0 <_sbrk_r+0x1c>)
 800ad98:	2300      	movs	r3, #0
 800ad9a:	4604      	mov	r4, r0
 800ad9c:	4608      	mov	r0, r1
 800ad9e:	602b      	str	r3, [r5, #0]
 800ada0:	f7f6 feb6 	bl	8001b10 <_sbrk>
 800ada4:	1c43      	adds	r3, r0, #1
 800ada6:	d102      	bne.n	800adae <_sbrk_r+0x1a>
 800ada8:	682b      	ldr	r3, [r5, #0]
 800adaa:	b103      	cbz	r3, 800adae <_sbrk_r+0x1a>
 800adac:	6023      	str	r3, [r4, #0]
 800adae:	bd38      	pop	{r3, r4, r5, pc}
 800adb0:	20000f74 	.word	0x20000f74

0800adb4 <memcpy>:
 800adb4:	440a      	add	r2, r1
 800adb6:	4291      	cmp	r1, r2
 800adb8:	f100 33ff 	add.w	r3, r0, #4294967295
 800adbc:	d100      	bne.n	800adc0 <memcpy+0xc>
 800adbe:	4770      	bx	lr
 800adc0:	b510      	push	{r4, lr}
 800adc2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800adc6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800adca:	4291      	cmp	r1, r2
 800adcc:	d1f9      	bne.n	800adc2 <memcpy+0xe>
 800adce:	bd10      	pop	{r4, pc}

0800add0 <__assert_func>:
 800add0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800add2:	4614      	mov	r4, r2
 800add4:	461a      	mov	r2, r3
 800add6:	4b09      	ldr	r3, [pc, #36]	@ (800adfc <__assert_func+0x2c>)
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	4605      	mov	r5, r0
 800addc:	68d8      	ldr	r0, [r3, #12]
 800adde:	b14c      	cbz	r4, 800adf4 <__assert_func+0x24>
 800ade0:	4b07      	ldr	r3, [pc, #28]	@ (800ae00 <__assert_func+0x30>)
 800ade2:	9100      	str	r1, [sp, #0]
 800ade4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ade8:	4906      	ldr	r1, [pc, #24]	@ (800ae04 <__assert_func+0x34>)
 800adea:	462b      	mov	r3, r5
 800adec:	f000 f842 	bl	800ae74 <fiprintf>
 800adf0:	f000 f852 	bl	800ae98 <abort>
 800adf4:	4b04      	ldr	r3, [pc, #16]	@ (800ae08 <__assert_func+0x38>)
 800adf6:	461c      	mov	r4, r3
 800adf8:	e7f3      	b.n	800ade2 <__assert_func+0x12>
 800adfa:	bf00      	nop
 800adfc:	20000128 	.word	0x20000128
 800ae00:	0800b57c 	.word	0x0800b57c
 800ae04:	0800b589 	.word	0x0800b589
 800ae08:	0800b5b7 	.word	0x0800b5b7

0800ae0c <_calloc_r>:
 800ae0c:	b570      	push	{r4, r5, r6, lr}
 800ae0e:	fba1 5402 	umull	r5, r4, r1, r2
 800ae12:	b934      	cbnz	r4, 800ae22 <_calloc_r+0x16>
 800ae14:	4629      	mov	r1, r5
 800ae16:	f7ff fb0b 	bl	800a430 <_malloc_r>
 800ae1a:	4606      	mov	r6, r0
 800ae1c:	b928      	cbnz	r0, 800ae2a <_calloc_r+0x1e>
 800ae1e:	4630      	mov	r0, r6
 800ae20:	bd70      	pop	{r4, r5, r6, pc}
 800ae22:	220c      	movs	r2, #12
 800ae24:	6002      	str	r2, [r0, #0]
 800ae26:	2600      	movs	r6, #0
 800ae28:	e7f9      	b.n	800ae1e <_calloc_r+0x12>
 800ae2a:	462a      	mov	r2, r5
 800ae2c:	4621      	mov	r1, r4
 800ae2e:	f7fe fbb2 	bl	8009596 <memset>
 800ae32:	e7f4      	b.n	800ae1e <_calloc_r+0x12>

0800ae34 <__ascii_mbtowc>:
 800ae34:	b082      	sub	sp, #8
 800ae36:	b901      	cbnz	r1, 800ae3a <__ascii_mbtowc+0x6>
 800ae38:	a901      	add	r1, sp, #4
 800ae3a:	b142      	cbz	r2, 800ae4e <__ascii_mbtowc+0x1a>
 800ae3c:	b14b      	cbz	r3, 800ae52 <__ascii_mbtowc+0x1e>
 800ae3e:	7813      	ldrb	r3, [r2, #0]
 800ae40:	600b      	str	r3, [r1, #0]
 800ae42:	7812      	ldrb	r2, [r2, #0]
 800ae44:	1e10      	subs	r0, r2, #0
 800ae46:	bf18      	it	ne
 800ae48:	2001      	movne	r0, #1
 800ae4a:	b002      	add	sp, #8
 800ae4c:	4770      	bx	lr
 800ae4e:	4610      	mov	r0, r2
 800ae50:	e7fb      	b.n	800ae4a <__ascii_mbtowc+0x16>
 800ae52:	f06f 0001 	mvn.w	r0, #1
 800ae56:	e7f8      	b.n	800ae4a <__ascii_mbtowc+0x16>

0800ae58 <__ascii_wctomb>:
 800ae58:	4603      	mov	r3, r0
 800ae5a:	4608      	mov	r0, r1
 800ae5c:	b141      	cbz	r1, 800ae70 <__ascii_wctomb+0x18>
 800ae5e:	2aff      	cmp	r2, #255	@ 0xff
 800ae60:	d904      	bls.n	800ae6c <__ascii_wctomb+0x14>
 800ae62:	228a      	movs	r2, #138	@ 0x8a
 800ae64:	601a      	str	r2, [r3, #0]
 800ae66:	f04f 30ff 	mov.w	r0, #4294967295
 800ae6a:	4770      	bx	lr
 800ae6c:	700a      	strb	r2, [r1, #0]
 800ae6e:	2001      	movs	r0, #1
 800ae70:	4770      	bx	lr
	...

0800ae74 <fiprintf>:
 800ae74:	b40e      	push	{r1, r2, r3}
 800ae76:	b503      	push	{r0, r1, lr}
 800ae78:	4601      	mov	r1, r0
 800ae7a:	ab03      	add	r3, sp, #12
 800ae7c:	4805      	ldr	r0, [pc, #20]	@ (800ae94 <fiprintf+0x20>)
 800ae7e:	f853 2b04 	ldr.w	r2, [r3], #4
 800ae82:	6800      	ldr	r0, [r0, #0]
 800ae84:	9301      	str	r3, [sp, #4]
 800ae86:	f000 f837 	bl	800aef8 <_vfiprintf_r>
 800ae8a:	b002      	add	sp, #8
 800ae8c:	f85d eb04 	ldr.w	lr, [sp], #4
 800ae90:	b003      	add	sp, #12
 800ae92:	4770      	bx	lr
 800ae94:	20000128 	.word	0x20000128

0800ae98 <abort>:
 800ae98:	b508      	push	{r3, lr}
 800ae9a:	2006      	movs	r0, #6
 800ae9c:	f000 fa00 	bl	800b2a0 <raise>
 800aea0:	2001      	movs	r0, #1
 800aea2:	f7f6 fdbd 	bl	8001a20 <_exit>

0800aea6 <__sfputc_r>:
 800aea6:	6893      	ldr	r3, [r2, #8]
 800aea8:	3b01      	subs	r3, #1
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	b410      	push	{r4}
 800aeae:	6093      	str	r3, [r2, #8]
 800aeb0:	da08      	bge.n	800aec4 <__sfputc_r+0x1e>
 800aeb2:	6994      	ldr	r4, [r2, #24]
 800aeb4:	42a3      	cmp	r3, r4
 800aeb6:	db01      	blt.n	800aebc <__sfputc_r+0x16>
 800aeb8:	290a      	cmp	r1, #10
 800aeba:	d103      	bne.n	800aec4 <__sfputc_r+0x1e>
 800aebc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800aec0:	f000 b932 	b.w	800b128 <__swbuf_r>
 800aec4:	6813      	ldr	r3, [r2, #0]
 800aec6:	1c58      	adds	r0, r3, #1
 800aec8:	6010      	str	r0, [r2, #0]
 800aeca:	7019      	strb	r1, [r3, #0]
 800aecc:	4608      	mov	r0, r1
 800aece:	f85d 4b04 	ldr.w	r4, [sp], #4
 800aed2:	4770      	bx	lr

0800aed4 <__sfputs_r>:
 800aed4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aed6:	4606      	mov	r6, r0
 800aed8:	460f      	mov	r7, r1
 800aeda:	4614      	mov	r4, r2
 800aedc:	18d5      	adds	r5, r2, r3
 800aede:	42ac      	cmp	r4, r5
 800aee0:	d101      	bne.n	800aee6 <__sfputs_r+0x12>
 800aee2:	2000      	movs	r0, #0
 800aee4:	e007      	b.n	800aef6 <__sfputs_r+0x22>
 800aee6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aeea:	463a      	mov	r2, r7
 800aeec:	4630      	mov	r0, r6
 800aeee:	f7ff ffda 	bl	800aea6 <__sfputc_r>
 800aef2:	1c43      	adds	r3, r0, #1
 800aef4:	d1f3      	bne.n	800aede <__sfputs_r+0xa>
 800aef6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800aef8 <_vfiprintf_r>:
 800aef8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aefc:	460d      	mov	r5, r1
 800aefe:	b09d      	sub	sp, #116	@ 0x74
 800af00:	4614      	mov	r4, r2
 800af02:	4698      	mov	r8, r3
 800af04:	4606      	mov	r6, r0
 800af06:	b118      	cbz	r0, 800af10 <_vfiprintf_r+0x18>
 800af08:	6a03      	ldr	r3, [r0, #32]
 800af0a:	b90b      	cbnz	r3, 800af10 <_vfiprintf_r+0x18>
 800af0c:	f7fe faca 	bl	80094a4 <__sinit>
 800af10:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800af12:	07d9      	lsls	r1, r3, #31
 800af14:	d405      	bmi.n	800af22 <_vfiprintf_r+0x2a>
 800af16:	89ab      	ldrh	r3, [r5, #12]
 800af18:	059a      	lsls	r2, r3, #22
 800af1a:	d402      	bmi.n	800af22 <_vfiprintf_r+0x2a>
 800af1c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800af1e:	f7fe fbb8 	bl	8009692 <__retarget_lock_acquire_recursive>
 800af22:	89ab      	ldrh	r3, [r5, #12]
 800af24:	071b      	lsls	r3, r3, #28
 800af26:	d501      	bpl.n	800af2c <_vfiprintf_r+0x34>
 800af28:	692b      	ldr	r3, [r5, #16]
 800af2a:	b99b      	cbnz	r3, 800af54 <_vfiprintf_r+0x5c>
 800af2c:	4629      	mov	r1, r5
 800af2e:	4630      	mov	r0, r6
 800af30:	f000 f938 	bl	800b1a4 <__swsetup_r>
 800af34:	b170      	cbz	r0, 800af54 <_vfiprintf_r+0x5c>
 800af36:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800af38:	07dc      	lsls	r4, r3, #31
 800af3a:	d504      	bpl.n	800af46 <_vfiprintf_r+0x4e>
 800af3c:	f04f 30ff 	mov.w	r0, #4294967295
 800af40:	b01d      	add	sp, #116	@ 0x74
 800af42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af46:	89ab      	ldrh	r3, [r5, #12]
 800af48:	0598      	lsls	r0, r3, #22
 800af4a:	d4f7      	bmi.n	800af3c <_vfiprintf_r+0x44>
 800af4c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800af4e:	f7fe fba1 	bl	8009694 <__retarget_lock_release_recursive>
 800af52:	e7f3      	b.n	800af3c <_vfiprintf_r+0x44>
 800af54:	2300      	movs	r3, #0
 800af56:	9309      	str	r3, [sp, #36]	@ 0x24
 800af58:	2320      	movs	r3, #32
 800af5a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800af5e:	f8cd 800c 	str.w	r8, [sp, #12]
 800af62:	2330      	movs	r3, #48	@ 0x30
 800af64:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800b114 <_vfiprintf_r+0x21c>
 800af68:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800af6c:	f04f 0901 	mov.w	r9, #1
 800af70:	4623      	mov	r3, r4
 800af72:	469a      	mov	sl, r3
 800af74:	f813 2b01 	ldrb.w	r2, [r3], #1
 800af78:	b10a      	cbz	r2, 800af7e <_vfiprintf_r+0x86>
 800af7a:	2a25      	cmp	r2, #37	@ 0x25
 800af7c:	d1f9      	bne.n	800af72 <_vfiprintf_r+0x7a>
 800af7e:	ebba 0b04 	subs.w	fp, sl, r4
 800af82:	d00b      	beq.n	800af9c <_vfiprintf_r+0xa4>
 800af84:	465b      	mov	r3, fp
 800af86:	4622      	mov	r2, r4
 800af88:	4629      	mov	r1, r5
 800af8a:	4630      	mov	r0, r6
 800af8c:	f7ff ffa2 	bl	800aed4 <__sfputs_r>
 800af90:	3001      	adds	r0, #1
 800af92:	f000 80a7 	beq.w	800b0e4 <_vfiprintf_r+0x1ec>
 800af96:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800af98:	445a      	add	r2, fp
 800af9a:	9209      	str	r2, [sp, #36]	@ 0x24
 800af9c:	f89a 3000 	ldrb.w	r3, [sl]
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	f000 809f 	beq.w	800b0e4 <_vfiprintf_r+0x1ec>
 800afa6:	2300      	movs	r3, #0
 800afa8:	f04f 32ff 	mov.w	r2, #4294967295
 800afac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800afb0:	f10a 0a01 	add.w	sl, sl, #1
 800afb4:	9304      	str	r3, [sp, #16]
 800afb6:	9307      	str	r3, [sp, #28]
 800afb8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800afbc:	931a      	str	r3, [sp, #104]	@ 0x68
 800afbe:	4654      	mov	r4, sl
 800afc0:	2205      	movs	r2, #5
 800afc2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800afc6:	4853      	ldr	r0, [pc, #332]	@ (800b114 <_vfiprintf_r+0x21c>)
 800afc8:	f7f5 f912 	bl	80001f0 <memchr>
 800afcc:	9a04      	ldr	r2, [sp, #16]
 800afce:	b9d8      	cbnz	r0, 800b008 <_vfiprintf_r+0x110>
 800afd0:	06d1      	lsls	r1, r2, #27
 800afd2:	bf44      	itt	mi
 800afd4:	2320      	movmi	r3, #32
 800afd6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800afda:	0713      	lsls	r3, r2, #28
 800afdc:	bf44      	itt	mi
 800afde:	232b      	movmi	r3, #43	@ 0x2b
 800afe0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800afe4:	f89a 3000 	ldrb.w	r3, [sl]
 800afe8:	2b2a      	cmp	r3, #42	@ 0x2a
 800afea:	d015      	beq.n	800b018 <_vfiprintf_r+0x120>
 800afec:	9a07      	ldr	r2, [sp, #28]
 800afee:	4654      	mov	r4, sl
 800aff0:	2000      	movs	r0, #0
 800aff2:	f04f 0c0a 	mov.w	ip, #10
 800aff6:	4621      	mov	r1, r4
 800aff8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800affc:	3b30      	subs	r3, #48	@ 0x30
 800affe:	2b09      	cmp	r3, #9
 800b000:	d94b      	bls.n	800b09a <_vfiprintf_r+0x1a2>
 800b002:	b1b0      	cbz	r0, 800b032 <_vfiprintf_r+0x13a>
 800b004:	9207      	str	r2, [sp, #28]
 800b006:	e014      	b.n	800b032 <_vfiprintf_r+0x13a>
 800b008:	eba0 0308 	sub.w	r3, r0, r8
 800b00c:	fa09 f303 	lsl.w	r3, r9, r3
 800b010:	4313      	orrs	r3, r2
 800b012:	9304      	str	r3, [sp, #16]
 800b014:	46a2      	mov	sl, r4
 800b016:	e7d2      	b.n	800afbe <_vfiprintf_r+0xc6>
 800b018:	9b03      	ldr	r3, [sp, #12]
 800b01a:	1d19      	adds	r1, r3, #4
 800b01c:	681b      	ldr	r3, [r3, #0]
 800b01e:	9103      	str	r1, [sp, #12]
 800b020:	2b00      	cmp	r3, #0
 800b022:	bfbb      	ittet	lt
 800b024:	425b      	neglt	r3, r3
 800b026:	f042 0202 	orrlt.w	r2, r2, #2
 800b02a:	9307      	strge	r3, [sp, #28]
 800b02c:	9307      	strlt	r3, [sp, #28]
 800b02e:	bfb8      	it	lt
 800b030:	9204      	strlt	r2, [sp, #16]
 800b032:	7823      	ldrb	r3, [r4, #0]
 800b034:	2b2e      	cmp	r3, #46	@ 0x2e
 800b036:	d10a      	bne.n	800b04e <_vfiprintf_r+0x156>
 800b038:	7863      	ldrb	r3, [r4, #1]
 800b03a:	2b2a      	cmp	r3, #42	@ 0x2a
 800b03c:	d132      	bne.n	800b0a4 <_vfiprintf_r+0x1ac>
 800b03e:	9b03      	ldr	r3, [sp, #12]
 800b040:	1d1a      	adds	r2, r3, #4
 800b042:	681b      	ldr	r3, [r3, #0]
 800b044:	9203      	str	r2, [sp, #12]
 800b046:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b04a:	3402      	adds	r4, #2
 800b04c:	9305      	str	r3, [sp, #20]
 800b04e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800b124 <_vfiprintf_r+0x22c>
 800b052:	7821      	ldrb	r1, [r4, #0]
 800b054:	2203      	movs	r2, #3
 800b056:	4650      	mov	r0, sl
 800b058:	f7f5 f8ca 	bl	80001f0 <memchr>
 800b05c:	b138      	cbz	r0, 800b06e <_vfiprintf_r+0x176>
 800b05e:	9b04      	ldr	r3, [sp, #16]
 800b060:	eba0 000a 	sub.w	r0, r0, sl
 800b064:	2240      	movs	r2, #64	@ 0x40
 800b066:	4082      	lsls	r2, r0
 800b068:	4313      	orrs	r3, r2
 800b06a:	3401      	adds	r4, #1
 800b06c:	9304      	str	r3, [sp, #16]
 800b06e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b072:	4829      	ldr	r0, [pc, #164]	@ (800b118 <_vfiprintf_r+0x220>)
 800b074:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b078:	2206      	movs	r2, #6
 800b07a:	f7f5 f8b9 	bl	80001f0 <memchr>
 800b07e:	2800      	cmp	r0, #0
 800b080:	d03f      	beq.n	800b102 <_vfiprintf_r+0x20a>
 800b082:	4b26      	ldr	r3, [pc, #152]	@ (800b11c <_vfiprintf_r+0x224>)
 800b084:	bb1b      	cbnz	r3, 800b0ce <_vfiprintf_r+0x1d6>
 800b086:	9b03      	ldr	r3, [sp, #12]
 800b088:	3307      	adds	r3, #7
 800b08a:	f023 0307 	bic.w	r3, r3, #7
 800b08e:	3308      	adds	r3, #8
 800b090:	9303      	str	r3, [sp, #12]
 800b092:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b094:	443b      	add	r3, r7
 800b096:	9309      	str	r3, [sp, #36]	@ 0x24
 800b098:	e76a      	b.n	800af70 <_vfiprintf_r+0x78>
 800b09a:	fb0c 3202 	mla	r2, ip, r2, r3
 800b09e:	460c      	mov	r4, r1
 800b0a0:	2001      	movs	r0, #1
 800b0a2:	e7a8      	b.n	800aff6 <_vfiprintf_r+0xfe>
 800b0a4:	2300      	movs	r3, #0
 800b0a6:	3401      	adds	r4, #1
 800b0a8:	9305      	str	r3, [sp, #20]
 800b0aa:	4619      	mov	r1, r3
 800b0ac:	f04f 0c0a 	mov.w	ip, #10
 800b0b0:	4620      	mov	r0, r4
 800b0b2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b0b6:	3a30      	subs	r2, #48	@ 0x30
 800b0b8:	2a09      	cmp	r2, #9
 800b0ba:	d903      	bls.n	800b0c4 <_vfiprintf_r+0x1cc>
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	d0c6      	beq.n	800b04e <_vfiprintf_r+0x156>
 800b0c0:	9105      	str	r1, [sp, #20]
 800b0c2:	e7c4      	b.n	800b04e <_vfiprintf_r+0x156>
 800b0c4:	fb0c 2101 	mla	r1, ip, r1, r2
 800b0c8:	4604      	mov	r4, r0
 800b0ca:	2301      	movs	r3, #1
 800b0cc:	e7f0      	b.n	800b0b0 <_vfiprintf_r+0x1b8>
 800b0ce:	ab03      	add	r3, sp, #12
 800b0d0:	9300      	str	r3, [sp, #0]
 800b0d2:	462a      	mov	r2, r5
 800b0d4:	4b12      	ldr	r3, [pc, #72]	@ (800b120 <_vfiprintf_r+0x228>)
 800b0d6:	a904      	add	r1, sp, #16
 800b0d8:	4630      	mov	r0, r6
 800b0da:	f7fd fda1 	bl	8008c20 <_printf_float>
 800b0de:	4607      	mov	r7, r0
 800b0e0:	1c78      	adds	r0, r7, #1
 800b0e2:	d1d6      	bne.n	800b092 <_vfiprintf_r+0x19a>
 800b0e4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b0e6:	07d9      	lsls	r1, r3, #31
 800b0e8:	d405      	bmi.n	800b0f6 <_vfiprintf_r+0x1fe>
 800b0ea:	89ab      	ldrh	r3, [r5, #12]
 800b0ec:	059a      	lsls	r2, r3, #22
 800b0ee:	d402      	bmi.n	800b0f6 <_vfiprintf_r+0x1fe>
 800b0f0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b0f2:	f7fe facf 	bl	8009694 <__retarget_lock_release_recursive>
 800b0f6:	89ab      	ldrh	r3, [r5, #12]
 800b0f8:	065b      	lsls	r3, r3, #25
 800b0fa:	f53f af1f 	bmi.w	800af3c <_vfiprintf_r+0x44>
 800b0fe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b100:	e71e      	b.n	800af40 <_vfiprintf_r+0x48>
 800b102:	ab03      	add	r3, sp, #12
 800b104:	9300      	str	r3, [sp, #0]
 800b106:	462a      	mov	r2, r5
 800b108:	4b05      	ldr	r3, [pc, #20]	@ (800b120 <_vfiprintf_r+0x228>)
 800b10a:	a904      	add	r1, sp, #16
 800b10c:	4630      	mov	r0, r6
 800b10e:	f7fe f81f 	bl	8009150 <_printf_i>
 800b112:	e7e4      	b.n	800b0de <_vfiprintf_r+0x1e6>
 800b114:	0800b5b8 	.word	0x0800b5b8
 800b118:	0800b5c2 	.word	0x0800b5c2
 800b11c:	08008c21 	.word	0x08008c21
 800b120:	0800aed5 	.word	0x0800aed5
 800b124:	0800b5be 	.word	0x0800b5be

0800b128 <__swbuf_r>:
 800b128:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b12a:	460e      	mov	r6, r1
 800b12c:	4614      	mov	r4, r2
 800b12e:	4605      	mov	r5, r0
 800b130:	b118      	cbz	r0, 800b13a <__swbuf_r+0x12>
 800b132:	6a03      	ldr	r3, [r0, #32]
 800b134:	b90b      	cbnz	r3, 800b13a <__swbuf_r+0x12>
 800b136:	f7fe f9b5 	bl	80094a4 <__sinit>
 800b13a:	69a3      	ldr	r3, [r4, #24]
 800b13c:	60a3      	str	r3, [r4, #8]
 800b13e:	89a3      	ldrh	r3, [r4, #12]
 800b140:	071a      	lsls	r2, r3, #28
 800b142:	d501      	bpl.n	800b148 <__swbuf_r+0x20>
 800b144:	6923      	ldr	r3, [r4, #16]
 800b146:	b943      	cbnz	r3, 800b15a <__swbuf_r+0x32>
 800b148:	4621      	mov	r1, r4
 800b14a:	4628      	mov	r0, r5
 800b14c:	f000 f82a 	bl	800b1a4 <__swsetup_r>
 800b150:	b118      	cbz	r0, 800b15a <__swbuf_r+0x32>
 800b152:	f04f 37ff 	mov.w	r7, #4294967295
 800b156:	4638      	mov	r0, r7
 800b158:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b15a:	6823      	ldr	r3, [r4, #0]
 800b15c:	6922      	ldr	r2, [r4, #16]
 800b15e:	1a98      	subs	r0, r3, r2
 800b160:	6963      	ldr	r3, [r4, #20]
 800b162:	b2f6      	uxtb	r6, r6
 800b164:	4283      	cmp	r3, r0
 800b166:	4637      	mov	r7, r6
 800b168:	dc05      	bgt.n	800b176 <__swbuf_r+0x4e>
 800b16a:	4621      	mov	r1, r4
 800b16c:	4628      	mov	r0, r5
 800b16e:	f7ff fde9 	bl	800ad44 <_fflush_r>
 800b172:	2800      	cmp	r0, #0
 800b174:	d1ed      	bne.n	800b152 <__swbuf_r+0x2a>
 800b176:	68a3      	ldr	r3, [r4, #8]
 800b178:	3b01      	subs	r3, #1
 800b17a:	60a3      	str	r3, [r4, #8]
 800b17c:	6823      	ldr	r3, [r4, #0]
 800b17e:	1c5a      	adds	r2, r3, #1
 800b180:	6022      	str	r2, [r4, #0]
 800b182:	701e      	strb	r6, [r3, #0]
 800b184:	6962      	ldr	r2, [r4, #20]
 800b186:	1c43      	adds	r3, r0, #1
 800b188:	429a      	cmp	r2, r3
 800b18a:	d004      	beq.n	800b196 <__swbuf_r+0x6e>
 800b18c:	89a3      	ldrh	r3, [r4, #12]
 800b18e:	07db      	lsls	r3, r3, #31
 800b190:	d5e1      	bpl.n	800b156 <__swbuf_r+0x2e>
 800b192:	2e0a      	cmp	r6, #10
 800b194:	d1df      	bne.n	800b156 <__swbuf_r+0x2e>
 800b196:	4621      	mov	r1, r4
 800b198:	4628      	mov	r0, r5
 800b19a:	f7ff fdd3 	bl	800ad44 <_fflush_r>
 800b19e:	2800      	cmp	r0, #0
 800b1a0:	d0d9      	beq.n	800b156 <__swbuf_r+0x2e>
 800b1a2:	e7d6      	b.n	800b152 <__swbuf_r+0x2a>

0800b1a4 <__swsetup_r>:
 800b1a4:	b538      	push	{r3, r4, r5, lr}
 800b1a6:	4b29      	ldr	r3, [pc, #164]	@ (800b24c <__swsetup_r+0xa8>)
 800b1a8:	4605      	mov	r5, r0
 800b1aa:	6818      	ldr	r0, [r3, #0]
 800b1ac:	460c      	mov	r4, r1
 800b1ae:	b118      	cbz	r0, 800b1b8 <__swsetup_r+0x14>
 800b1b0:	6a03      	ldr	r3, [r0, #32]
 800b1b2:	b90b      	cbnz	r3, 800b1b8 <__swsetup_r+0x14>
 800b1b4:	f7fe f976 	bl	80094a4 <__sinit>
 800b1b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b1bc:	0719      	lsls	r1, r3, #28
 800b1be:	d422      	bmi.n	800b206 <__swsetup_r+0x62>
 800b1c0:	06da      	lsls	r2, r3, #27
 800b1c2:	d407      	bmi.n	800b1d4 <__swsetup_r+0x30>
 800b1c4:	2209      	movs	r2, #9
 800b1c6:	602a      	str	r2, [r5, #0]
 800b1c8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b1cc:	81a3      	strh	r3, [r4, #12]
 800b1ce:	f04f 30ff 	mov.w	r0, #4294967295
 800b1d2:	e033      	b.n	800b23c <__swsetup_r+0x98>
 800b1d4:	0758      	lsls	r0, r3, #29
 800b1d6:	d512      	bpl.n	800b1fe <__swsetup_r+0x5a>
 800b1d8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b1da:	b141      	cbz	r1, 800b1ee <__swsetup_r+0x4a>
 800b1dc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b1e0:	4299      	cmp	r1, r3
 800b1e2:	d002      	beq.n	800b1ea <__swsetup_r+0x46>
 800b1e4:	4628      	mov	r0, r5
 800b1e6:	f7ff f8af 	bl	800a348 <_free_r>
 800b1ea:	2300      	movs	r3, #0
 800b1ec:	6363      	str	r3, [r4, #52]	@ 0x34
 800b1ee:	89a3      	ldrh	r3, [r4, #12]
 800b1f0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b1f4:	81a3      	strh	r3, [r4, #12]
 800b1f6:	2300      	movs	r3, #0
 800b1f8:	6063      	str	r3, [r4, #4]
 800b1fa:	6923      	ldr	r3, [r4, #16]
 800b1fc:	6023      	str	r3, [r4, #0]
 800b1fe:	89a3      	ldrh	r3, [r4, #12]
 800b200:	f043 0308 	orr.w	r3, r3, #8
 800b204:	81a3      	strh	r3, [r4, #12]
 800b206:	6923      	ldr	r3, [r4, #16]
 800b208:	b94b      	cbnz	r3, 800b21e <__swsetup_r+0x7a>
 800b20a:	89a3      	ldrh	r3, [r4, #12]
 800b20c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b210:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b214:	d003      	beq.n	800b21e <__swsetup_r+0x7a>
 800b216:	4621      	mov	r1, r4
 800b218:	4628      	mov	r0, r5
 800b21a:	f000 f883 	bl	800b324 <__smakebuf_r>
 800b21e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b222:	f013 0201 	ands.w	r2, r3, #1
 800b226:	d00a      	beq.n	800b23e <__swsetup_r+0x9a>
 800b228:	2200      	movs	r2, #0
 800b22a:	60a2      	str	r2, [r4, #8]
 800b22c:	6962      	ldr	r2, [r4, #20]
 800b22e:	4252      	negs	r2, r2
 800b230:	61a2      	str	r2, [r4, #24]
 800b232:	6922      	ldr	r2, [r4, #16]
 800b234:	b942      	cbnz	r2, 800b248 <__swsetup_r+0xa4>
 800b236:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b23a:	d1c5      	bne.n	800b1c8 <__swsetup_r+0x24>
 800b23c:	bd38      	pop	{r3, r4, r5, pc}
 800b23e:	0799      	lsls	r1, r3, #30
 800b240:	bf58      	it	pl
 800b242:	6962      	ldrpl	r2, [r4, #20]
 800b244:	60a2      	str	r2, [r4, #8]
 800b246:	e7f4      	b.n	800b232 <__swsetup_r+0x8e>
 800b248:	2000      	movs	r0, #0
 800b24a:	e7f7      	b.n	800b23c <__swsetup_r+0x98>
 800b24c:	20000128 	.word	0x20000128

0800b250 <_raise_r>:
 800b250:	291f      	cmp	r1, #31
 800b252:	b538      	push	{r3, r4, r5, lr}
 800b254:	4605      	mov	r5, r0
 800b256:	460c      	mov	r4, r1
 800b258:	d904      	bls.n	800b264 <_raise_r+0x14>
 800b25a:	2316      	movs	r3, #22
 800b25c:	6003      	str	r3, [r0, #0]
 800b25e:	f04f 30ff 	mov.w	r0, #4294967295
 800b262:	bd38      	pop	{r3, r4, r5, pc}
 800b264:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800b266:	b112      	cbz	r2, 800b26e <_raise_r+0x1e>
 800b268:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b26c:	b94b      	cbnz	r3, 800b282 <_raise_r+0x32>
 800b26e:	4628      	mov	r0, r5
 800b270:	f000 f830 	bl	800b2d4 <_getpid_r>
 800b274:	4622      	mov	r2, r4
 800b276:	4601      	mov	r1, r0
 800b278:	4628      	mov	r0, r5
 800b27a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b27e:	f000 b817 	b.w	800b2b0 <_kill_r>
 800b282:	2b01      	cmp	r3, #1
 800b284:	d00a      	beq.n	800b29c <_raise_r+0x4c>
 800b286:	1c59      	adds	r1, r3, #1
 800b288:	d103      	bne.n	800b292 <_raise_r+0x42>
 800b28a:	2316      	movs	r3, #22
 800b28c:	6003      	str	r3, [r0, #0]
 800b28e:	2001      	movs	r0, #1
 800b290:	e7e7      	b.n	800b262 <_raise_r+0x12>
 800b292:	2100      	movs	r1, #0
 800b294:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800b298:	4620      	mov	r0, r4
 800b29a:	4798      	blx	r3
 800b29c:	2000      	movs	r0, #0
 800b29e:	e7e0      	b.n	800b262 <_raise_r+0x12>

0800b2a0 <raise>:
 800b2a0:	4b02      	ldr	r3, [pc, #8]	@ (800b2ac <raise+0xc>)
 800b2a2:	4601      	mov	r1, r0
 800b2a4:	6818      	ldr	r0, [r3, #0]
 800b2a6:	f7ff bfd3 	b.w	800b250 <_raise_r>
 800b2aa:	bf00      	nop
 800b2ac:	20000128 	.word	0x20000128

0800b2b0 <_kill_r>:
 800b2b0:	b538      	push	{r3, r4, r5, lr}
 800b2b2:	4d07      	ldr	r5, [pc, #28]	@ (800b2d0 <_kill_r+0x20>)
 800b2b4:	2300      	movs	r3, #0
 800b2b6:	4604      	mov	r4, r0
 800b2b8:	4608      	mov	r0, r1
 800b2ba:	4611      	mov	r1, r2
 800b2bc:	602b      	str	r3, [r5, #0]
 800b2be:	f7f6 fb9f 	bl	8001a00 <_kill>
 800b2c2:	1c43      	adds	r3, r0, #1
 800b2c4:	d102      	bne.n	800b2cc <_kill_r+0x1c>
 800b2c6:	682b      	ldr	r3, [r5, #0]
 800b2c8:	b103      	cbz	r3, 800b2cc <_kill_r+0x1c>
 800b2ca:	6023      	str	r3, [r4, #0]
 800b2cc:	bd38      	pop	{r3, r4, r5, pc}
 800b2ce:	bf00      	nop
 800b2d0:	20000f74 	.word	0x20000f74

0800b2d4 <_getpid_r>:
 800b2d4:	f7f6 bb8c 	b.w	80019f0 <_getpid>

0800b2d8 <__swhatbuf_r>:
 800b2d8:	b570      	push	{r4, r5, r6, lr}
 800b2da:	460c      	mov	r4, r1
 800b2dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b2e0:	2900      	cmp	r1, #0
 800b2e2:	b096      	sub	sp, #88	@ 0x58
 800b2e4:	4615      	mov	r5, r2
 800b2e6:	461e      	mov	r6, r3
 800b2e8:	da0d      	bge.n	800b306 <__swhatbuf_r+0x2e>
 800b2ea:	89a3      	ldrh	r3, [r4, #12]
 800b2ec:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b2f0:	f04f 0100 	mov.w	r1, #0
 800b2f4:	bf14      	ite	ne
 800b2f6:	2340      	movne	r3, #64	@ 0x40
 800b2f8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b2fc:	2000      	movs	r0, #0
 800b2fe:	6031      	str	r1, [r6, #0]
 800b300:	602b      	str	r3, [r5, #0]
 800b302:	b016      	add	sp, #88	@ 0x58
 800b304:	bd70      	pop	{r4, r5, r6, pc}
 800b306:	466a      	mov	r2, sp
 800b308:	f000 f848 	bl	800b39c <_fstat_r>
 800b30c:	2800      	cmp	r0, #0
 800b30e:	dbec      	blt.n	800b2ea <__swhatbuf_r+0x12>
 800b310:	9901      	ldr	r1, [sp, #4]
 800b312:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b316:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b31a:	4259      	negs	r1, r3
 800b31c:	4159      	adcs	r1, r3
 800b31e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b322:	e7eb      	b.n	800b2fc <__swhatbuf_r+0x24>

0800b324 <__smakebuf_r>:
 800b324:	898b      	ldrh	r3, [r1, #12]
 800b326:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b328:	079d      	lsls	r5, r3, #30
 800b32a:	4606      	mov	r6, r0
 800b32c:	460c      	mov	r4, r1
 800b32e:	d507      	bpl.n	800b340 <__smakebuf_r+0x1c>
 800b330:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b334:	6023      	str	r3, [r4, #0]
 800b336:	6123      	str	r3, [r4, #16]
 800b338:	2301      	movs	r3, #1
 800b33a:	6163      	str	r3, [r4, #20]
 800b33c:	b003      	add	sp, #12
 800b33e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b340:	ab01      	add	r3, sp, #4
 800b342:	466a      	mov	r2, sp
 800b344:	f7ff ffc8 	bl	800b2d8 <__swhatbuf_r>
 800b348:	9f00      	ldr	r7, [sp, #0]
 800b34a:	4605      	mov	r5, r0
 800b34c:	4639      	mov	r1, r7
 800b34e:	4630      	mov	r0, r6
 800b350:	f7ff f86e 	bl	800a430 <_malloc_r>
 800b354:	b948      	cbnz	r0, 800b36a <__smakebuf_r+0x46>
 800b356:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b35a:	059a      	lsls	r2, r3, #22
 800b35c:	d4ee      	bmi.n	800b33c <__smakebuf_r+0x18>
 800b35e:	f023 0303 	bic.w	r3, r3, #3
 800b362:	f043 0302 	orr.w	r3, r3, #2
 800b366:	81a3      	strh	r3, [r4, #12]
 800b368:	e7e2      	b.n	800b330 <__smakebuf_r+0xc>
 800b36a:	89a3      	ldrh	r3, [r4, #12]
 800b36c:	6020      	str	r0, [r4, #0]
 800b36e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b372:	81a3      	strh	r3, [r4, #12]
 800b374:	9b01      	ldr	r3, [sp, #4]
 800b376:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b37a:	b15b      	cbz	r3, 800b394 <__smakebuf_r+0x70>
 800b37c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b380:	4630      	mov	r0, r6
 800b382:	f000 f81d 	bl	800b3c0 <_isatty_r>
 800b386:	b128      	cbz	r0, 800b394 <__smakebuf_r+0x70>
 800b388:	89a3      	ldrh	r3, [r4, #12]
 800b38a:	f023 0303 	bic.w	r3, r3, #3
 800b38e:	f043 0301 	orr.w	r3, r3, #1
 800b392:	81a3      	strh	r3, [r4, #12]
 800b394:	89a3      	ldrh	r3, [r4, #12]
 800b396:	431d      	orrs	r5, r3
 800b398:	81a5      	strh	r5, [r4, #12]
 800b39a:	e7cf      	b.n	800b33c <__smakebuf_r+0x18>

0800b39c <_fstat_r>:
 800b39c:	b538      	push	{r3, r4, r5, lr}
 800b39e:	4d07      	ldr	r5, [pc, #28]	@ (800b3bc <_fstat_r+0x20>)
 800b3a0:	2300      	movs	r3, #0
 800b3a2:	4604      	mov	r4, r0
 800b3a4:	4608      	mov	r0, r1
 800b3a6:	4611      	mov	r1, r2
 800b3a8:	602b      	str	r3, [r5, #0]
 800b3aa:	f7f6 fb89 	bl	8001ac0 <_fstat>
 800b3ae:	1c43      	adds	r3, r0, #1
 800b3b0:	d102      	bne.n	800b3b8 <_fstat_r+0x1c>
 800b3b2:	682b      	ldr	r3, [r5, #0]
 800b3b4:	b103      	cbz	r3, 800b3b8 <_fstat_r+0x1c>
 800b3b6:	6023      	str	r3, [r4, #0]
 800b3b8:	bd38      	pop	{r3, r4, r5, pc}
 800b3ba:	bf00      	nop
 800b3bc:	20000f74 	.word	0x20000f74

0800b3c0 <_isatty_r>:
 800b3c0:	b538      	push	{r3, r4, r5, lr}
 800b3c2:	4d06      	ldr	r5, [pc, #24]	@ (800b3dc <_isatty_r+0x1c>)
 800b3c4:	2300      	movs	r3, #0
 800b3c6:	4604      	mov	r4, r0
 800b3c8:	4608      	mov	r0, r1
 800b3ca:	602b      	str	r3, [r5, #0]
 800b3cc:	f7f6 fb88 	bl	8001ae0 <_isatty>
 800b3d0:	1c43      	adds	r3, r0, #1
 800b3d2:	d102      	bne.n	800b3da <_isatty_r+0x1a>
 800b3d4:	682b      	ldr	r3, [r5, #0]
 800b3d6:	b103      	cbz	r3, 800b3da <_isatty_r+0x1a>
 800b3d8:	6023      	str	r3, [r4, #0]
 800b3da:	bd38      	pop	{r3, r4, r5, pc}
 800b3dc:	20000f74 	.word	0x20000f74

0800b3e0 <_init>:
 800b3e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b3e2:	bf00      	nop
 800b3e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b3e6:	bc08      	pop	{r3}
 800b3e8:	469e      	mov	lr, r3
 800b3ea:	4770      	bx	lr

0800b3ec <_fini>:
 800b3ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b3ee:	bf00      	nop
 800b3f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b3f2:	bc08      	pop	{r3}
 800b3f4:	469e      	mov	lr, r3
 800b3f6:	4770      	bx	lr
