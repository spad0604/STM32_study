
BTL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003dc4  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08003f74  08003f74  00004f74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003fe4  08003fe4  0000505c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08003fe4  08003fe4  00004fe4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003fec  08003fec  0000505c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003fec  08003fec  00004fec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003ff0  08003ff0  00004ff0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08003ff4  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000505c  2**0
                  CONTENTS
 10 .bss          00000220  2000005c  2000005c  0000505c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000027c  2000027c  0000505c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000505c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a4d4  00000000  00000000  0000508c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000017bb  00000000  00000000  0000f560  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000958  00000000  00000000  00010d20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000074d  00000000  00000000  00011678  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022ff1  00000000  00000000  00011dc5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000c33a  00000000  00000000  00034db6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d4306  00000000  00000000  000410f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001153f6  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002bb8  00000000  00000000  0011543c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000003b  00000000  00000000  00117ff4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000005c 	.word	0x2000005c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08003f5c 	.word	0x08003f5c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000060 	.word	0x20000060
 80001ec:	08003f5c 	.word	0x08003f5c

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b988 	b.w	80005c8 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	468e      	mov	lr, r1
 80002d8:	4604      	mov	r4, r0
 80002da:	4688      	mov	r8, r1
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d14a      	bne.n	8000376 <__udivmoddi4+0xa6>
 80002e0:	428a      	cmp	r2, r1
 80002e2:	4617      	mov	r7, r2
 80002e4:	d962      	bls.n	80003ac <__udivmoddi4+0xdc>
 80002e6:	fab2 f682 	clz	r6, r2
 80002ea:	b14e      	cbz	r6, 8000300 <__udivmoddi4+0x30>
 80002ec:	f1c6 0320 	rsb	r3, r6, #32
 80002f0:	fa01 f806 	lsl.w	r8, r1, r6
 80002f4:	fa20 f303 	lsr.w	r3, r0, r3
 80002f8:	40b7      	lsls	r7, r6
 80002fa:	ea43 0808 	orr.w	r8, r3, r8
 80002fe:	40b4      	lsls	r4, r6
 8000300:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000304:	fa1f fc87 	uxth.w	ip, r7
 8000308:	fbb8 f1fe 	udiv	r1, r8, lr
 800030c:	0c23      	lsrs	r3, r4, #16
 800030e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000312:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000316:	fb01 f20c 	mul.w	r2, r1, ip
 800031a:	429a      	cmp	r2, r3
 800031c:	d909      	bls.n	8000332 <__udivmoddi4+0x62>
 800031e:	18fb      	adds	r3, r7, r3
 8000320:	f101 30ff 	add.w	r0, r1, #4294967295
 8000324:	f080 80ea 	bcs.w	80004fc <__udivmoddi4+0x22c>
 8000328:	429a      	cmp	r2, r3
 800032a:	f240 80e7 	bls.w	80004fc <__udivmoddi4+0x22c>
 800032e:	3902      	subs	r1, #2
 8000330:	443b      	add	r3, r7
 8000332:	1a9a      	subs	r2, r3, r2
 8000334:	b2a3      	uxth	r3, r4
 8000336:	fbb2 f0fe 	udiv	r0, r2, lr
 800033a:	fb0e 2210 	mls	r2, lr, r0, r2
 800033e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000342:	fb00 fc0c 	mul.w	ip, r0, ip
 8000346:	459c      	cmp	ip, r3
 8000348:	d909      	bls.n	800035e <__udivmoddi4+0x8e>
 800034a:	18fb      	adds	r3, r7, r3
 800034c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000350:	f080 80d6 	bcs.w	8000500 <__udivmoddi4+0x230>
 8000354:	459c      	cmp	ip, r3
 8000356:	f240 80d3 	bls.w	8000500 <__udivmoddi4+0x230>
 800035a:	443b      	add	r3, r7
 800035c:	3802      	subs	r0, #2
 800035e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000362:	eba3 030c 	sub.w	r3, r3, ip
 8000366:	2100      	movs	r1, #0
 8000368:	b11d      	cbz	r5, 8000372 <__udivmoddi4+0xa2>
 800036a:	40f3      	lsrs	r3, r6
 800036c:	2200      	movs	r2, #0
 800036e:	e9c5 3200 	strd	r3, r2, [r5]
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	428b      	cmp	r3, r1
 8000378:	d905      	bls.n	8000386 <__udivmoddi4+0xb6>
 800037a:	b10d      	cbz	r5, 8000380 <__udivmoddi4+0xb0>
 800037c:	e9c5 0100 	strd	r0, r1, [r5]
 8000380:	2100      	movs	r1, #0
 8000382:	4608      	mov	r0, r1
 8000384:	e7f5      	b.n	8000372 <__udivmoddi4+0xa2>
 8000386:	fab3 f183 	clz	r1, r3
 800038a:	2900      	cmp	r1, #0
 800038c:	d146      	bne.n	800041c <__udivmoddi4+0x14c>
 800038e:	4573      	cmp	r3, lr
 8000390:	d302      	bcc.n	8000398 <__udivmoddi4+0xc8>
 8000392:	4282      	cmp	r2, r0
 8000394:	f200 8105 	bhi.w	80005a2 <__udivmoddi4+0x2d2>
 8000398:	1a84      	subs	r4, r0, r2
 800039a:	eb6e 0203 	sbc.w	r2, lr, r3
 800039e:	2001      	movs	r0, #1
 80003a0:	4690      	mov	r8, r2
 80003a2:	2d00      	cmp	r5, #0
 80003a4:	d0e5      	beq.n	8000372 <__udivmoddi4+0xa2>
 80003a6:	e9c5 4800 	strd	r4, r8, [r5]
 80003aa:	e7e2      	b.n	8000372 <__udivmoddi4+0xa2>
 80003ac:	2a00      	cmp	r2, #0
 80003ae:	f000 8090 	beq.w	80004d2 <__udivmoddi4+0x202>
 80003b2:	fab2 f682 	clz	r6, r2
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	f040 80a4 	bne.w	8000504 <__udivmoddi4+0x234>
 80003bc:	1a8a      	subs	r2, r1, r2
 80003be:	0c03      	lsrs	r3, r0, #16
 80003c0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c4:	b280      	uxth	r0, r0
 80003c6:	b2bc      	uxth	r4, r7
 80003c8:	2101      	movs	r1, #1
 80003ca:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ce:	fb0e 221c 	mls	r2, lr, ip, r2
 80003d2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003d6:	fb04 f20c 	mul.w	r2, r4, ip
 80003da:	429a      	cmp	r2, r3
 80003dc:	d907      	bls.n	80003ee <__udivmoddi4+0x11e>
 80003de:	18fb      	adds	r3, r7, r3
 80003e0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x11c>
 80003e6:	429a      	cmp	r2, r3
 80003e8:	f200 80e0 	bhi.w	80005ac <__udivmoddi4+0x2dc>
 80003ec:	46c4      	mov	ip, r8
 80003ee:	1a9b      	subs	r3, r3, r2
 80003f0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003f4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003f8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003fc:	fb02 f404 	mul.w	r4, r2, r4
 8000400:	429c      	cmp	r4, r3
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x144>
 8000404:	18fb      	adds	r3, r7, r3
 8000406:	f102 30ff 	add.w	r0, r2, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x142>
 800040c:	429c      	cmp	r4, r3
 800040e:	f200 80ca 	bhi.w	80005a6 <__udivmoddi4+0x2d6>
 8000412:	4602      	mov	r2, r0
 8000414:	1b1b      	subs	r3, r3, r4
 8000416:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800041a:	e7a5      	b.n	8000368 <__udivmoddi4+0x98>
 800041c:	f1c1 0620 	rsb	r6, r1, #32
 8000420:	408b      	lsls	r3, r1
 8000422:	fa22 f706 	lsr.w	r7, r2, r6
 8000426:	431f      	orrs	r7, r3
 8000428:	fa0e f401 	lsl.w	r4, lr, r1
 800042c:	fa20 f306 	lsr.w	r3, r0, r6
 8000430:	fa2e fe06 	lsr.w	lr, lr, r6
 8000434:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000438:	4323      	orrs	r3, r4
 800043a:	fa00 f801 	lsl.w	r8, r0, r1
 800043e:	fa1f fc87 	uxth.w	ip, r7
 8000442:	fbbe f0f9 	udiv	r0, lr, r9
 8000446:	0c1c      	lsrs	r4, r3, #16
 8000448:	fb09 ee10 	mls	lr, r9, r0, lr
 800044c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000450:	fb00 fe0c 	mul.w	lr, r0, ip
 8000454:	45a6      	cmp	lr, r4
 8000456:	fa02 f201 	lsl.w	r2, r2, r1
 800045a:	d909      	bls.n	8000470 <__udivmoddi4+0x1a0>
 800045c:	193c      	adds	r4, r7, r4
 800045e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000462:	f080 809c 	bcs.w	800059e <__udivmoddi4+0x2ce>
 8000466:	45a6      	cmp	lr, r4
 8000468:	f240 8099 	bls.w	800059e <__udivmoddi4+0x2ce>
 800046c:	3802      	subs	r0, #2
 800046e:	443c      	add	r4, r7
 8000470:	eba4 040e 	sub.w	r4, r4, lr
 8000474:	fa1f fe83 	uxth.w	lr, r3
 8000478:	fbb4 f3f9 	udiv	r3, r4, r9
 800047c:	fb09 4413 	mls	r4, r9, r3, r4
 8000480:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000484:	fb03 fc0c 	mul.w	ip, r3, ip
 8000488:	45a4      	cmp	ip, r4
 800048a:	d908      	bls.n	800049e <__udivmoddi4+0x1ce>
 800048c:	193c      	adds	r4, r7, r4
 800048e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000492:	f080 8082 	bcs.w	800059a <__udivmoddi4+0x2ca>
 8000496:	45a4      	cmp	ip, r4
 8000498:	d97f      	bls.n	800059a <__udivmoddi4+0x2ca>
 800049a:	3b02      	subs	r3, #2
 800049c:	443c      	add	r4, r7
 800049e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004a2:	eba4 040c 	sub.w	r4, r4, ip
 80004a6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004aa:	4564      	cmp	r4, ip
 80004ac:	4673      	mov	r3, lr
 80004ae:	46e1      	mov	r9, ip
 80004b0:	d362      	bcc.n	8000578 <__udivmoddi4+0x2a8>
 80004b2:	d05f      	beq.n	8000574 <__udivmoddi4+0x2a4>
 80004b4:	b15d      	cbz	r5, 80004ce <__udivmoddi4+0x1fe>
 80004b6:	ebb8 0203 	subs.w	r2, r8, r3
 80004ba:	eb64 0409 	sbc.w	r4, r4, r9
 80004be:	fa04 f606 	lsl.w	r6, r4, r6
 80004c2:	fa22 f301 	lsr.w	r3, r2, r1
 80004c6:	431e      	orrs	r6, r3
 80004c8:	40cc      	lsrs	r4, r1
 80004ca:	e9c5 6400 	strd	r6, r4, [r5]
 80004ce:	2100      	movs	r1, #0
 80004d0:	e74f      	b.n	8000372 <__udivmoddi4+0xa2>
 80004d2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004d6:	0c01      	lsrs	r1, r0, #16
 80004d8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004dc:	b280      	uxth	r0, r0
 80004de:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004e2:	463b      	mov	r3, r7
 80004e4:	4638      	mov	r0, r7
 80004e6:	463c      	mov	r4, r7
 80004e8:	46b8      	mov	r8, r7
 80004ea:	46be      	mov	lr, r7
 80004ec:	2620      	movs	r6, #32
 80004ee:	fbb1 f1f7 	udiv	r1, r1, r7
 80004f2:	eba2 0208 	sub.w	r2, r2, r8
 80004f6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004fa:	e766      	b.n	80003ca <__udivmoddi4+0xfa>
 80004fc:	4601      	mov	r1, r0
 80004fe:	e718      	b.n	8000332 <__udivmoddi4+0x62>
 8000500:	4610      	mov	r0, r2
 8000502:	e72c      	b.n	800035e <__udivmoddi4+0x8e>
 8000504:	f1c6 0220 	rsb	r2, r6, #32
 8000508:	fa2e f302 	lsr.w	r3, lr, r2
 800050c:	40b7      	lsls	r7, r6
 800050e:	40b1      	lsls	r1, r6
 8000510:	fa20 f202 	lsr.w	r2, r0, r2
 8000514:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000518:	430a      	orrs	r2, r1
 800051a:	fbb3 f8fe 	udiv	r8, r3, lr
 800051e:	b2bc      	uxth	r4, r7
 8000520:	fb0e 3318 	mls	r3, lr, r8, r3
 8000524:	0c11      	lsrs	r1, r2, #16
 8000526:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800052a:	fb08 f904 	mul.w	r9, r8, r4
 800052e:	40b0      	lsls	r0, r6
 8000530:	4589      	cmp	r9, r1
 8000532:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000536:	b280      	uxth	r0, r0
 8000538:	d93e      	bls.n	80005b8 <__udivmoddi4+0x2e8>
 800053a:	1879      	adds	r1, r7, r1
 800053c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000540:	d201      	bcs.n	8000546 <__udivmoddi4+0x276>
 8000542:	4589      	cmp	r9, r1
 8000544:	d81f      	bhi.n	8000586 <__udivmoddi4+0x2b6>
 8000546:	eba1 0109 	sub.w	r1, r1, r9
 800054a:	fbb1 f9fe 	udiv	r9, r1, lr
 800054e:	fb09 f804 	mul.w	r8, r9, r4
 8000552:	fb0e 1119 	mls	r1, lr, r9, r1
 8000556:	b292      	uxth	r2, r2
 8000558:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800055c:	4542      	cmp	r2, r8
 800055e:	d229      	bcs.n	80005b4 <__udivmoddi4+0x2e4>
 8000560:	18ba      	adds	r2, r7, r2
 8000562:	f109 31ff 	add.w	r1, r9, #4294967295
 8000566:	d2c4      	bcs.n	80004f2 <__udivmoddi4+0x222>
 8000568:	4542      	cmp	r2, r8
 800056a:	d2c2      	bcs.n	80004f2 <__udivmoddi4+0x222>
 800056c:	f1a9 0102 	sub.w	r1, r9, #2
 8000570:	443a      	add	r2, r7
 8000572:	e7be      	b.n	80004f2 <__udivmoddi4+0x222>
 8000574:	45f0      	cmp	r8, lr
 8000576:	d29d      	bcs.n	80004b4 <__udivmoddi4+0x1e4>
 8000578:	ebbe 0302 	subs.w	r3, lr, r2
 800057c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000580:	3801      	subs	r0, #1
 8000582:	46e1      	mov	r9, ip
 8000584:	e796      	b.n	80004b4 <__udivmoddi4+0x1e4>
 8000586:	eba7 0909 	sub.w	r9, r7, r9
 800058a:	4449      	add	r1, r9
 800058c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000590:	fbb1 f9fe 	udiv	r9, r1, lr
 8000594:	fb09 f804 	mul.w	r8, r9, r4
 8000598:	e7db      	b.n	8000552 <__udivmoddi4+0x282>
 800059a:	4673      	mov	r3, lr
 800059c:	e77f      	b.n	800049e <__udivmoddi4+0x1ce>
 800059e:	4650      	mov	r0, sl
 80005a0:	e766      	b.n	8000470 <__udivmoddi4+0x1a0>
 80005a2:	4608      	mov	r0, r1
 80005a4:	e6fd      	b.n	80003a2 <__udivmoddi4+0xd2>
 80005a6:	443b      	add	r3, r7
 80005a8:	3a02      	subs	r2, #2
 80005aa:	e733      	b.n	8000414 <__udivmoddi4+0x144>
 80005ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80005b0:	443b      	add	r3, r7
 80005b2:	e71c      	b.n	80003ee <__udivmoddi4+0x11e>
 80005b4:	4649      	mov	r1, r9
 80005b6:	e79c      	b.n	80004f2 <__udivmoddi4+0x222>
 80005b8:	eba1 0109 	sub.w	r1, r1, r9
 80005bc:	46c4      	mov	ip, r8
 80005be:	fbb1 f9fe 	udiv	r9, r1, lr
 80005c2:	fb09 f804 	mul.w	r8, r9, r4
 80005c6:	e7c4      	b.n	8000552 <__udivmoddi4+0x282>

080005c8 <__aeabi_idiv0>:
 80005c8:	4770      	bx	lr
 80005ca:	bf00      	nop

080005cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005ce:	b09f      	sub	sp, #124	@ 0x7c
 80005d0:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005d2:	f000 fbf7 	bl	8000dc4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005d6:	f000 f905 	bl	80007e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005da:	f000 f9cd 	bl	8000978 <MX_GPIO_Init>
  MX_I2C1_Init();
 80005de:	f000 f961 	bl	80008a4 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 80005e2:	f000 f99f 	bl	8000924 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  // Initialize MPU6050
  if(MPU6050_Init() != 0) {
 80005e6:	f000 f9ef 	bl	80009c8 <MPU6050_Init>
 80005ea:	4603      	mov	r3, r0
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d001      	beq.n	80005f4 <main+0x28>
    Error_Handler();
 80005f0:	f000 fa88 	bl	8000b04 <Error_Handler>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    // Read MPU6050 data
    MPU6050_Read_Accel();
 80005f4:	f000 fa12 	bl	8000a1c <MPU6050_Read_Accel>
    MPU6050_Read_Gyro();
 80005f8:	f000 fa4a 	bl	8000a90 <MPU6050_Read_Gyro>
    
    // Convert raw values to actual values (multiply by 100 to keep 2 decimal places)
    Ax = (Accel_X_RAW * 100) / 16384;
 80005fc:	4b69      	ldr	r3, [pc, #420]	@ (80007a4 <main+0x1d8>)
 80005fe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000602:	461a      	mov	r2, r3
 8000604:	2364      	movs	r3, #100	@ 0x64
 8000606:	fb02 f303 	mul.w	r3, r2, r3
 800060a:	2b00      	cmp	r3, #0
 800060c:	da02      	bge.n	8000614 <main+0x48>
 800060e:	f503 537f 	add.w	r3, r3, #16320	@ 0x3fc0
 8000612:	333f      	adds	r3, #63	@ 0x3f
 8000614:	139b      	asrs	r3, r3, #14
 8000616:	b21a      	sxth	r2, r3
 8000618:	4b63      	ldr	r3, [pc, #396]	@ (80007a8 <main+0x1dc>)
 800061a:	801a      	strh	r2, [r3, #0]
    Ay = (Accel_Y_RAW * 100) / 16384;
 800061c:	4b63      	ldr	r3, [pc, #396]	@ (80007ac <main+0x1e0>)
 800061e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000622:	461a      	mov	r2, r3
 8000624:	2364      	movs	r3, #100	@ 0x64
 8000626:	fb02 f303 	mul.w	r3, r2, r3
 800062a:	2b00      	cmp	r3, #0
 800062c:	da02      	bge.n	8000634 <main+0x68>
 800062e:	f503 537f 	add.w	r3, r3, #16320	@ 0x3fc0
 8000632:	333f      	adds	r3, #63	@ 0x3f
 8000634:	139b      	asrs	r3, r3, #14
 8000636:	b21a      	sxth	r2, r3
 8000638:	4b5d      	ldr	r3, [pc, #372]	@ (80007b0 <main+0x1e4>)
 800063a:	801a      	strh	r2, [r3, #0]
    Az = (Accel_Z_RAW * 100) / 16384;
 800063c:	4b5d      	ldr	r3, [pc, #372]	@ (80007b4 <main+0x1e8>)
 800063e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000642:	461a      	mov	r2, r3
 8000644:	2364      	movs	r3, #100	@ 0x64
 8000646:	fb02 f303 	mul.w	r3, r2, r3
 800064a:	2b00      	cmp	r3, #0
 800064c:	da02      	bge.n	8000654 <main+0x88>
 800064e:	f503 537f 	add.w	r3, r3, #16320	@ 0x3fc0
 8000652:	333f      	adds	r3, #63	@ 0x3f
 8000654:	139b      	asrs	r3, r3, #14
 8000656:	b21a      	sxth	r2, r3
 8000658:	4b57      	ldr	r3, [pc, #348]	@ (80007b8 <main+0x1ec>)
 800065a:	801a      	strh	r2, [r3, #0]
    
    Gx = (Gyro_X_RAW * 100) / 131;
 800065c:	4b57      	ldr	r3, [pc, #348]	@ (80007bc <main+0x1f0>)
 800065e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000662:	461a      	mov	r2, r3
 8000664:	2364      	movs	r3, #100	@ 0x64
 8000666:	fb02 f303 	mul.w	r3, r2, r3
 800066a:	4a55      	ldr	r2, [pc, #340]	@ (80007c0 <main+0x1f4>)
 800066c:	fb82 1203 	smull	r1, r2, r2, r3
 8000670:	1152      	asrs	r2, r2, #5
 8000672:	17db      	asrs	r3, r3, #31
 8000674:	1ad3      	subs	r3, r2, r3
 8000676:	b21a      	sxth	r2, r3
 8000678:	4b52      	ldr	r3, [pc, #328]	@ (80007c4 <main+0x1f8>)
 800067a:	801a      	strh	r2, [r3, #0]
    Gy = (Gyro_Y_RAW * 100) / 131;
 800067c:	4b52      	ldr	r3, [pc, #328]	@ (80007c8 <main+0x1fc>)
 800067e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000682:	461a      	mov	r2, r3
 8000684:	2364      	movs	r3, #100	@ 0x64
 8000686:	fb02 f303 	mul.w	r3, r2, r3
 800068a:	4a4d      	ldr	r2, [pc, #308]	@ (80007c0 <main+0x1f4>)
 800068c:	fb82 1203 	smull	r1, r2, r2, r3
 8000690:	1152      	asrs	r2, r2, #5
 8000692:	17db      	asrs	r3, r3, #31
 8000694:	1ad3      	subs	r3, r2, r3
 8000696:	b21a      	sxth	r2, r3
 8000698:	4b4c      	ldr	r3, [pc, #304]	@ (80007cc <main+0x200>)
 800069a:	801a      	strh	r2, [r3, #0]
    Gz = (Gyro_Z_RAW * 100) / 131;
 800069c:	4b4c      	ldr	r3, [pc, #304]	@ (80007d0 <main+0x204>)
 800069e:	f9b3 3000 	ldrsh.w	r3, [r3]
 80006a2:	461a      	mov	r2, r3
 80006a4:	2364      	movs	r3, #100	@ 0x64
 80006a6:	fb02 f303 	mul.w	r3, r2, r3
 80006aa:	4a45      	ldr	r2, [pc, #276]	@ (80007c0 <main+0x1f4>)
 80006ac:	fb82 1203 	smull	r1, r2, r2, r3
 80006b0:	1152      	asrs	r2, r2, #5
 80006b2:	17db      	asrs	r3, r3, #31
 80006b4:	1ad3      	subs	r3, r2, r3
 80006b6:	b21a      	sxth	r2, r3
 80006b8:	4b46      	ldr	r3, [pc, #280]	@ (80007d4 <main+0x208>)
 80006ba:	801a      	strh	r2, [r3, #0]
    
    // Print values through UART
    char buffer[100];
    sprintf(buffer, "X:%d.%02d, Y:%d.%02d, Z:%d.%02d\r\n",
 80006bc:	4b41      	ldr	r3, [pc, #260]	@ (80007c4 <main+0x1f8>)
 80006be:	f9b3 3000 	ldrsh.w	r3, [r3]
 80006c2:	4a45      	ldr	r2, [pc, #276]	@ (80007d8 <main+0x20c>)
 80006c4:	fb82 1203 	smull	r1, r2, r2, r3
 80006c8:	1152      	asrs	r2, r2, #5
 80006ca:	17db      	asrs	r3, r3, #31
 80006cc:	1ad3      	subs	r3, r2, r3
 80006ce:	b21b      	sxth	r3, r3
 80006d0:	469c      	mov	ip, r3
//            Ax/100, abs(Ax%100),
//            Ay/100, abs(Ay%100),
//            Az/100, abs(Az%100),
            Gx/100, abs(Gx%100),
 80006d2:	4b3c      	ldr	r3, [pc, #240]	@ (80007c4 <main+0x1f8>)
 80006d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80006d8:	4a3f      	ldr	r2, [pc, #252]	@ (80007d8 <main+0x20c>)
 80006da:	fb82 1203 	smull	r1, r2, r2, r3
 80006de:	1151      	asrs	r1, r2, #5
 80006e0:	17da      	asrs	r2, r3, #31
 80006e2:	1a8a      	subs	r2, r1, r2
 80006e4:	2164      	movs	r1, #100	@ 0x64
 80006e6:	fb01 f202 	mul.w	r2, r1, r2
 80006ea:	1a9b      	subs	r3, r3, r2
 80006ec:	b21b      	sxth	r3, r3
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	bfb8      	it	lt
 80006f2:	425b      	neglt	r3, r3
 80006f4:	b29b      	uxth	r3, r3
    sprintf(buffer, "X:%d.%02d, Y:%d.%02d, Z:%d.%02d\r\n",
 80006f6:	469e      	mov	lr, r3
 80006f8:	4b34      	ldr	r3, [pc, #208]	@ (80007cc <main+0x200>)
 80006fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80006fe:	4a36      	ldr	r2, [pc, #216]	@ (80007d8 <main+0x20c>)
 8000700:	fb82 1203 	smull	r1, r2, r2, r3
 8000704:	1152      	asrs	r2, r2, #5
 8000706:	17db      	asrs	r3, r3, #31
 8000708:	1ad3      	subs	r3, r2, r3
 800070a:	b21b      	sxth	r3, r3
 800070c:	461c      	mov	r4, r3
            Gy/100, abs(Gy%100),
 800070e:	4b2f      	ldr	r3, [pc, #188]	@ (80007cc <main+0x200>)
 8000710:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000714:	4a30      	ldr	r2, [pc, #192]	@ (80007d8 <main+0x20c>)
 8000716:	fb82 1203 	smull	r1, r2, r2, r3
 800071a:	1151      	asrs	r1, r2, #5
 800071c:	17da      	asrs	r2, r3, #31
 800071e:	1a8a      	subs	r2, r1, r2
 8000720:	2164      	movs	r1, #100	@ 0x64
 8000722:	fb01 f202 	mul.w	r2, r1, r2
 8000726:	1a9b      	subs	r3, r3, r2
 8000728:	b21b      	sxth	r3, r3
 800072a:	2b00      	cmp	r3, #0
 800072c:	bfb8      	it	lt
 800072e:	425b      	neglt	r3, r3
 8000730:	b29b      	uxth	r3, r3
    sprintf(buffer, "X:%d.%02d, Y:%d.%02d, Z:%d.%02d\r\n",
 8000732:	461d      	mov	r5, r3
 8000734:	4b27      	ldr	r3, [pc, #156]	@ (80007d4 <main+0x208>)
 8000736:	f9b3 3000 	ldrsh.w	r3, [r3]
 800073a:	4a27      	ldr	r2, [pc, #156]	@ (80007d8 <main+0x20c>)
 800073c:	fb82 1203 	smull	r1, r2, r2, r3
 8000740:	1152      	asrs	r2, r2, #5
 8000742:	17db      	asrs	r3, r3, #31
 8000744:	1ad3      	subs	r3, r2, r3
 8000746:	b21b      	sxth	r3, r3
 8000748:	461e      	mov	r6, r3
            Gz/100, abs(Gz%100));
 800074a:	4b22      	ldr	r3, [pc, #136]	@ (80007d4 <main+0x208>)
 800074c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000750:	4a21      	ldr	r2, [pc, #132]	@ (80007d8 <main+0x20c>)
 8000752:	fb82 1203 	smull	r1, r2, r2, r3
 8000756:	1151      	asrs	r1, r2, #5
 8000758:	17da      	asrs	r2, r3, #31
 800075a:	1a8a      	subs	r2, r1, r2
 800075c:	2164      	movs	r1, #100	@ 0x64
 800075e:	fb01 f202 	mul.w	r2, r1, r2
 8000762:	1a9b      	subs	r3, r3, r2
 8000764:	b21b      	sxth	r3, r3
 8000766:	2b00      	cmp	r3, #0
 8000768:	bfb8      	it	lt
 800076a:	425b      	neglt	r3, r3
 800076c:	b29b      	uxth	r3, r3
    sprintf(buffer, "X:%d.%02d, Y:%d.%02d, Z:%d.%02d\r\n",
 800076e:	1d38      	adds	r0, r7, #4
 8000770:	9303      	str	r3, [sp, #12]
 8000772:	9602      	str	r6, [sp, #8]
 8000774:	9501      	str	r5, [sp, #4]
 8000776:	9400      	str	r4, [sp, #0]
 8000778:	4673      	mov	r3, lr
 800077a:	4662      	mov	r2, ip
 800077c:	4917      	ldr	r1, [pc, #92]	@ (80007dc <main+0x210>)
 800077e:	f002 ff4d 	bl	800361c <siprintf>
    HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), 100);
 8000782:	1d3b      	adds	r3, r7, #4
 8000784:	4618      	mov	r0, r3
 8000786:	f7ff fd33 	bl	80001f0 <strlen>
 800078a:	4603      	mov	r3, r0
 800078c:	b29a      	uxth	r2, r3
 800078e:	1d39      	adds	r1, r7, #4
 8000790:	2364      	movs	r3, #100	@ 0x64
 8000792:	4813      	ldr	r0, [pc, #76]	@ (80007e0 <main+0x214>)
 8000794:	f002 fb86 	bl	8002ea4 <HAL_UART_Transmit>
    
    HAL_Delay(100); // Read every 100ms
 8000798:	2064      	movs	r0, #100	@ 0x64
 800079a:	f000 fb85 	bl	8000ea8 <HAL_Delay>
  {
 800079e:	bf00      	nop
 80007a0:	e728      	b.n	80005f4 <main+0x28>
 80007a2:	bf00      	nop
 80007a4:	20000114 	.word	0x20000114
 80007a8:	20000120 	.word	0x20000120
 80007ac:	20000116 	.word	0x20000116
 80007b0:	20000122 	.word	0x20000122
 80007b4:	20000118 	.word	0x20000118
 80007b8:	20000124 	.word	0x20000124
 80007bc:	2000011a 	.word	0x2000011a
 80007c0:	3e88cb3d 	.word	0x3e88cb3d
 80007c4:	20000126 	.word	0x20000126
 80007c8:	2000011c 	.word	0x2000011c
 80007cc:	20000128 	.word	0x20000128
 80007d0:	2000011e 	.word	0x2000011e
 80007d4:	2000012a 	.word	0x2000012a
 80007d8:	51eb851f 	.word	0x51eb851f
 80007dc:	08003f74 	.word	0x08003f74
 80007e0:	200000cc 	.word	0x200000cc

080007e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b094      	sub	sp, #80	@ 0x50
 80007e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007ea:	f107 0320 	add.w	r3, r7, #32
 80007ee:	2230      	movs	r2, #48	@ 0x30
 80007f0:	2100      	movs	r1, #0
 80007f2:	4618      	mov	r0, r3
 80007f4:	f002 ff34 	bl	8003660 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007f8:	f107 030c 	add.w	r3, r7, #12
 80007fc:	2200      	movs	r2, #0
 80007fe:	601a      	str	r2, [r3, #0]
 8000800:	605a      	str	r2, [r3, #4]
 8000802:	609a      	str	r2, [r3, #8]
 8000804:	60da      	str	r2, [r3, #12]
 8000806:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000808:	2300      	movs	r3, #0
 800080a:	60bb      	str	r3, [r7, #8]
 800080c:	4b23      	ldr	r3, [pc, #140]	@ (800089c <SystemClock_Config+0xb8>)
 800080e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000810:	4a22      	ldr	r2, [pc, #136]	@ (800089c <SystemClock_Config+0xb8>)
 8000812:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000816:	6413      	str	r3, [r2, #64]	@ 0x40
 8000818:	4b20      	ldr	r3, [pc, #128]	@ (800089c <SystemClock_Config+0xb8>)
 800081a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800081c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000820:	60bb      	str	r3, [r7, #8]
 8000822:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000824:	2300      	movs	r3, #0
 8000826:	607b      	str	r3, [r7, #4]
 8000828:	4b1d      	ldr	r3, [pc, #116]	@ (80008a0 <SystemClock_Config+0xbc>)
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000830:	4a1b      	ldr	r2, [pc, #108]	@ (80008a0 <SystemClock_Config+0xbc>)
 8000832:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000836:	6013      	str	r3, [r2, #0]
 8000838:	4b19      	ldr	r3, [pc, #100]	@ (80008a0 <SystemClock_Config+0xbc>)
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000840:	607b      	str	r3, [r7, #4]
 8000842:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000844:	2302      	movs	r3, #2
 8000846:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000848:	2301      	movs	r3, #1
 800084a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800084c:	2310      	movs	r3, #16
 800084e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000850:	2300      	movs	r3, #0
 8000852:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000854:	f107 0320 	add.w	r3, r7, #32
 8000858:	4618      	mov	r0, r3
 800085a:	f001 fe7b 	bl	8002554 <HAL_RCC_OscConfig>
 800085e:	4603      	mov	r3, r0
 8000860:	2b00      	cmp	r3, #0
 8000862:	d001      	beq.n	8000868 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000864:	f000 f94e 	bl	8000b04 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000868:	230f      	movs	r3, #15
 800086a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800086c:	2300      	movs	r3, #0
 800086e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000870:	2300      	movs	r3, #0
 8000872:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000874:	2300      	movs	r3, #0
 8000876:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000878:	2300      	movs	r3, #0
 800087a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800087c:	f107 030c 	add.w	r3, r7, #12
 8000880:	2100      	movs	r1, #0
 8000882:	4618      	mov	r0, r3
 8000884:	f002 f8de 	bl	8002a44 <HAL_RCC_ClockConfig>
 8000888:	4603      	mov	r3, r0
 800088a:	2b00      	cmp	r3, #0
 800088c:	d001      	beq.n	8000892 <SystemClock_Config+0xae>
  {
    Error_Handler();
 800088e:	f000 f939 	bl	8000b04 <Error_Handler>
  }
}
 8000892:	bf00      	nop
 8000894:	3750      	adds	r7, #80	@ 0x50
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	40023800 	.word	0x40023800
 80008a0:	40007000 	.word	0x40007000

080008a4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80008a8:	4b1b      	ldr	r3, [pc, #108]	@ (8000918 <MX_I2C1_Init+0x74>)
 80008aa:	4a1c      	ldr	r2, [pc, #112]	@ (800091c <MX_I2C1_Init+0x78>)
 80008ac:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80008ae:	4b1a      	ldr	r3, [pc, #104]	@ (8000918 <MX_I2C1_Init+0x74>)
 80008b0:	4a1b      	ldr	r2, [pc, #108]	@ (8000920 <MX_I2C1_Init+0x7c>)
 80008b2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80008b4:	4b18      	ldr	r3, [pc, #96]	@ (8000918 <MX_I2C1_Init+0x74>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80008ba:	4b17      	ldr	r3, [pc, #92]	@ (8000918 <MX_I2C1_Init+0x74>)
 80008bc:	2200      	movs	r2, #0
 80008be:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008c0:	4b15      	ldr	r3, [pc, #84]	@ (8000918 <MX_I2C1_Init+0x74>)
 80008c2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80008c6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008c8:	4b13      	ldr	r3, [pc, #76]	@ (8000918 <MX_I2C1_Init+0x74>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80008ce:	4b12      	ldr	r3, [pc, #72]	@ (8000918 <MX_I2C1_Init+0x74>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008d4:	4b10      	ldr	r3, [pc, #64]	@ (8000918 <MX_I2C1_Init+0x74>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008da:	4b0f      	ldr	r3, [pc, #60]	@ (8000918 <MX_I2C1_Init+0x74>)
 80008dc:	2200      	movs	r2, #0
 80008de:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80008e0:	480d      	ldr	r0, [pc, #52]	@ (8000918 <MX_I2C1_Init+0x74>)
 80008e2:	f000 fd97 	bl	8001414 <HAL_I2C_Init>
 80008e6:	4603      	mov	r3, r0
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d001      	beq.n	80008f0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80008ec:	f000 f90a 	bl	8000b04 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80008f0:	2100      	movs	r1, #0
 80008f2:	4809      	ldr	r0, [pc, #36]	@ (8000918 <MX_I2C1_Init+0x74>)
 80008f4:	f001 fdb2 	bl	800245c <HAL_I2CEx_ConfigAnalogFilter>
 80008f8:	4603      	mov	r3, r0
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d001      	beq.n	8000902 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 80008fe:	f000 f901 	bl	8000b04 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000902:	2100      	movs	r1, #0
 8000904:	4804      	ldr	r0, [pc, #16]	@ (8000918 <MX_I2C1_Init+0x74>)
 8000906:	f001 fde5 	bl	80024d4 <HAL_I2CEx_ConfigDigitalFilter>
 800090a:	4603      	mov	r3, r0
 800090c:	2b00      	cmp	r3, #0
 800090e:	d001      	beq.n	8000914 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8000910:	f000 f8f8 	bl	8000b04 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000914:	bf00      	nop
 8000916:	bd80      	pop	{r7, pc}
 8000918:	20000078 	.word	0x20000078
 800091c:	40005400 	.word	0x40005400
 8000920:	000186a0 	.word	0x000186a0

08000924 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000928:	4b11      	ldr	r3, [pc, #68]	@ (8000970 <MX_USART1_UART_Init+0x4c>)
 800092a:	4a12      	ldr	r2, [pc, #72]	@ (8000974 <MX_USART1_UART_Init+0x50>)
 800092c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800092e:	4b10      	ldr	r3, [pc, #64]	@ (8000970 <MX_USART1_UART_Init+0x4c>)
 8000930:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000934:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000936:	4b0e      	ldr	r3, [pc, #56]	@ (8000970 <MX_USART1_UART_Init+0x4c>)
 8000938:	2200      	movs	r2, #0
 800093a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800093c:	4b0c      	ldr	r3, [pc, #48]	@ (8000970 <MX_USART1_UART_Init+0x4c>)
 800093e:	2200      	movs	r2, #0
 8000940:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000942:	4b0b      	ldr	r3, [pc, #44]	@ (8000970 <MX_USART1_UART_Init+0x4c>)
 8000944:	2200      	movs	r2, #0
 8000946:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000948:	4b09      	ldr	r3, [pc, #36]	@ (8000970 <MX_USART1_UART_Init+0x4c>)
 800094a:	220c      	movs	r2, #12
 800094c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800094e:	4b08      	ldr	r3, [pc, #32]	@ (8000970 <MX_USART1_UART_Init+0x4c>)
 8000950:	2200      	movs	r2, #0
 8000952:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000954:	4b06      	ldr	r3, [pc, #24]	@ (8000970 <MX_USART1_UART_Init+0x4c>)
 8000956:	2200      	movs	r2, #0
 8000958:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800095a:	4805      	ldr	r0, [pc, #20]	@ (8000970 <MX_USART1_UART_Init+0x4c>)
 800095c:	f002 fa52 	bl	8002e04 <HAL_UART_Init>
 8000960:	4603      	mov	r3, r0
 8000962:	2b00      	cmp	r3, #0
 8000964:	d001      	beq.n	800096a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000966:	f000 f8cd 	bl	8000b04 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800096a:	bf00      	nop
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	200000cc 	.word	0x200000cc
 8000974:	40011000 	.word	0x40011000

08000978 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000978:	b480      	push	{r7}
 800097a:	b083      	sub	sp, #12
 800097c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800097e:	2300      	movs	r3, #0
 8000980:	607b      	str	r3, [r7, #4]
 8000982:	4b10      	ldr	r3, [pc, #64]	@ (80009c4 <MX_GPIO_Init+0x4c>)
 8000984:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000986:	4a0f      	ldr	r2, [pc, #60]	@ (80009c4 <MX_GPIO_Init+0x4c>)
 8000988:	f043 0301 	orr.w	r3, r3, #1
 800098c:	6313      	str	r3, [r2, #48]	@ 0x30
 800098e:	4b0d      	ldr	r3, [pc, #52]	@ (80009c4 <MX_GPIO_Init+0x4c>)
 8000990:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000992:	f003 0301 	and.w	r3, r3, #1
 8000996:	607b      	str	r3, [r7, #4]
 8000998:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800099a:	2300      	movs	r3, #0
 800099c:	603b      	str	r3, [r7, #0]
 800099e:	4b09      	ldr	r3, [pc, #36]	@ (80009c4 <MX_GPIO_Init+0x4c>)
 80009a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009a2:	4a08      	ldr	r2, [pc, #32]	@ (80009c4 <MX_GPIO_Init+0x4c>)
 80009a4:	f043 0302 	orr.w	r3, r3, #2
 80009a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80009aa:	4b06      	ldr	r3, [pc, #24]	@ (80009c4 <MX_GPIO_Init+0x4c>)
 80009ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ae:	f003 0302 	and.w	r3, r3, #2
 80009b2:	603b      	str	r3, [r7, #0]
 80009b4:	683b      	ldr	r3, [r7, #0]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80009b6:	bf00      	nop
 80009b8:	370c      	adds	r7, #12
 80009ba:	46bd      	mov	sp, r7
 80009bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c0:	4770      	bx	lr
 80009c2:	bf00      	nop
 80009c4:	40023800 	.word	0x40023800

080009c8 <MPU6050_Init>:

/* USER CODE BEGIN 4 */
static uint8_t MPU6050_Init(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b086      	sub	sp, #24
 80009cc:	af04      	add	r7, sp, #16
  uint8_t check;
  uint8_t data;
  
  // Check device ID
  HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, MPU6050_WHO_AM_I, 1, &check, 1, 100);
 80009ce:	2364      	movs	r3, #100	@ 0x64
 80009d0:	9302      	str	r3, [sp, #8]
 80009d2:	2301      	movs	r3, #1
 80009d4:	9301      	str	r3, [sp, #4]
 80009d6:	1dfb      	adds	r3, r7, #7
 80009d8:	9300      	str	r3, [sp, #0]
 80009da:	2301      	movs	r3, #1
 80009dc:	2275      	movs	r2, #117	@ 0x75
 80009de:	21d0      	movs	r1, #208	@ 0xd0
 80009e0:	480d      	ldr	r0, [pc, #52]	@ (8000a18 <MPU6050_Init+0x50>)
 80009e2:	f000 ff55 	bl	8001890 <HAL_I2C_Mem_Read>
  if(check != MPU6050_WHO_AM_I_VALUE) {
 80009e6:	79fb      	ldrb	r3, [r7, #7]
 80009e8:	2b68      	cmp	r3, #104	@ 0x68
 80009ea:	d001      	beq.n	80009f0 <MPU6050_Init+0x28>
    return 1; // Error
 80009ec:	2301      	movs	r3, #1
 80009ee:	e00e      	b.n	8000a0e <MPU6050_Init+0x46>
  }
  
  // Wake up MPU6050
  data = 0;
 80009f0:	2300      	movs	r3, #0
 80009f2:	71bb      	strb	r3, [r7, #6]
  HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, MPU6050_PWR_MGMT_1, 1, &data, 1, 100);
 80009f4:	2364      	movs	r3, #100	@ 0x64
 80009f6:	9302      	str	r3, [sp, #8]
 80009f8:	2301      	movs	r3, #1
 80009fa:	9301      	str	r3, [sp, #4]
 80009fc:	1dbb      	adds	r3, r7, #6
 80009fe:	9300      	str	r3, [sp, #0]
 8000a00:	2301      	movs	r3, #1
 8000a02:	226b      	movs	r2, #107	@ 0x6b
 8000a04:	21d0      	movs	r1, #208	@ 0xd0
 8000a06:	4804      	ldr	r0, [pc, #16]	@ (8000a18 <MPU6050_Init+0x50>)
 8000a08:	f000 fe48 	bl	800169c <HAL_I2C_Mem_Write>
  
  return 0; // Success
 8000a0c:	2300      	movs	r3, #0
}
 8000a0e:	4618      	mov	r0, r3
 8000a10:	3708      	adds	r7, #8
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop
 8000a18:	20000078 	.word	0x20000078

08000a1c <MPU6050_Read_Accel>:

static void MPU6050_Read_Accel(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b086      	sub	sp, #24
 8000a20:	af04      	add	r7, sp, #16
  uint8_t Rec_Data[6];
  
  // Read 6 bytes starting from ACCEL_XOUT_H register
  HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, MPU6050_ACCEL_XOUT_H, 1, Rec_Data, 6, 100);
 8000a22:	2364      	movs	r3, #100	@ 0x64
 8000a24:	9302      	str	r3, [sp, #8]
 8000a26:	2306      	movs	r3, #6
 8000a28:	9301      	str	r3, [sp, #4]
 8000a2a:	463b      	mov	r3, r7
 8000a2c:	9300      	str	r3, [sp, #0]
 8000a2e:	2301      	movs	r3, #1
 8000a30:	223b      	movs	r2, #59	@ 0x3b
 8000a32:	21d0      	movs	r1, #208	@ 0xd0
 8000a34:	4812      	ldr	r0, [pc, #72]	@ (8000a80 <MPU6050_Read_Accel+0x64>)
 8000a36:	f000 ff2b 	bl	8001890 <HAL_I2C_Mem_Read>
  
  Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
 8000a3a:	783b      	ldrb	r3, [r7, #0]
 8000a3c:	b21b      	sxth	r3, r3
 8000a3e:	021b      	lsls	r3, r3, #8
 8000a40:	b21a      	sxth	r2, r3
 8000a42:	787b      	ldrb	r3, [r7, #1]
 8000a44:	b21b      	sxth	r3, r3
 8000a46:	4313      	orrs	r3, r2
 8000a48:	b21a      	sxth	r2, r3
 8000a4a:	4b0e      	ldr	r3, [pc, #56]	@ (8000a84 <MPU6050_Read_Accel+0x68>)
 8000a4c:	801a      	strh	r2, [r3, #0]
  Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data[3]);
 8000a4e:	78bb      	ldrb	r3, [r7, #2]
 8000a50:	b21b      	sxth	r3, r3
 8000a52:	021b      	lsls	r3, r3, #8
 8000a54:	b21a      	sxth	r2, r3
 8000a56:	78fb      	ldrb	r3, [r7, #3]
 8000a58:	b21b      	sxth	r3, r3
 8000a5a:	4313      	orrs	r3, r2
 8000a5c:	b21a      	sxth	r2, r3
 8000a5e:	4b0a      	ldr	r3, [pc, #40]	@ (8000a88 <MPU6050_Read_Accel+0x6c>)
 8000a60:	801a      	strh	r2, [r3, #0]
  Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data[5]);
 8000a62:	793b      	ldrb	r3, [r7, #4]
 8000a64:	b21b      	sxth	r3, r3
 8000a66:	021b      	lsls	r3, r3, #8
 8000a68:	b21a      	sxth	r2, r3
 8000a6a:	797b      	ldrb	r3, [r7, #5]
 8000a6c:	b21b      	sxth	r3, r3
 8000a6e:	4313      	orrs	r3, r2
 8000a70:	b21a      	sxth	r2, r3
 8000a72:	4b06      	ldr	r3, [pc, #24]	@ (8000a8c <MPU6050_Read_Accel+0x70>)
 8000a74:	801a      	strh	r2, [r3, #0]
}
 8000a76:	bf00      	nop
 8000a78:	3708      	adds	r7, #8
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	20000078 	.word	0x20000078
 8000a84:	20000114 	.word	0x20000114
 8000a88:	20000116 	.word	0x20000116
 8000a8c:	20000118 	.word	0x20000118

08000a90 <MPU6050_Read_Gyro>:

static void MPU6050_Read_Gyro(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b086      	sub	sp, #24
 8000a94:	af04      	add	r7, sp, #16
  uint8_t Rec_Data[6];
  
  // Read 6 bytes starting from GYRO_XOUT_H register
  HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, MPU6050_GYRO_XOUT_H, 1, Rec_Data, 6, 100);
 8000a96:	2364      	movs	r3, #100	@ 0x64
 8000a98:	9302      	str	r3, [sp, #8]
 8000a9a:	2306      	movs	r3, #6
 8000a9c:	9301      	str	r3, [sp, #4]
 8000a9e:	463b      	mov	r3, r7
 8000aa0:	9300      	str	r3, [sp, #0]
 8000aa2:	2301      	movs	r3, #1
 8000aa4:	2243      	movs	r2, #67	@ 0x43
 8000aa6:	21d0      	movs	r1, #208	@ 0xd0
 8000aa8:	4812      	ldr	r0, [pc, #72]	@ (8000af4 <MPU6050_Read_Gyro+0x64>)
 8000aaa:	f000 fef1 	bl	8001890 <HAL_I2C_Mem_Read>
  
  Gyro_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
 8000aae:	783b      	ldrb	r3, [r7, #0]
 8000ab0:	b21b      	sxth	r3, r3
 8000ab2:	021b      	lsls	r3, r3, #8
 8000ab4:	b21a      	sxth	r2, r3
 8000ab6:	787b      	ldrb	r3, [r7, #1]
 8000ab8:	b21b      	sxth	r3, r3
 8000aba:	4313      	orrs	r3, r2
 8000abc:	b21a      	sxth	r2, r3
 8000abe:	4b0e      	ldr	r3, [pc, #56]	@ (8000af8 <MPU6050_Read_Gyro+0x68>)
 8000ac0:	801a      	strh	r2, [r3, #0]
  Gyro_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data[3]);
 8000ac2:	78bb      	ldrb	r3, [r7, #2]
 8000ac4:	b21b      	sxth	r3, r3
 8000ac6:	021b      	lsls	r3, r3, #8
 8000ac8:	b21a      	sxth	r2, r3
 8000aca:	78fb      	ldrb	r3, [r7, #3]
 8000acc:	b21b      	sxth	r3, r3
 8000ace:	4313      	orrs	r3, r2
 8000ad0:	b21a      	sxth	r2, r3
 8000ad2:	4b0a      	ldr	r3, [pc, #40]	@ (8000afc <MPU6050_Read_Gyro+0x6c>)
 8000ad4:	801a      	strh	r2, [r3, #0]
  Gyro_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data[5]);
 8000ad6:	793b      	ldrb	r3, [r7, #4]
 8000ad8:	b21b      	sxth	r3, r3
 8000ada:	021b      	lsls	r3, r3, #8
 8000adc:	b21a      	sxth	r2, r3
 8000ade:	797b      	ldrb	r3, [r7, #5]
 8000ae0:	b21b      	sxth	r3, r3
 8000ae2:	4313      	orrs	r3, r2
 8000ae4:	b21a      	sxth	r2, r3
 8000ae6:	4b06      	ldr	r3, [pc, #24]	@ (8000b00 <MPU6050_Read_Gyro+0x70>)
 8000ae8:	801a      	strh	r2, [r3, #0]
}
 8000aea:	bf00      	nop
 8000aec:	3708      	adds	r7, #8
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	bf00      	nop
 8000af4:	20000078 	.word	0x20000078
 8000af8:	2000011a 	.word	0x2000011a
 8000afc:	2000011c 	.word	0x2000011c
 8000b00:	2000011e 	.word	0x2000011e

08000b04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b04:	b480      	push	{r7}
 8000b06:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b08:	b672      	cpsid	i
}
 8000b0a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b0c:	bf00      	nop
 8000b0e:	e7fd      	b.n	8000b0c <Error_Handler+0x8>

08000b10 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	b083      	sub	sp, #12
 8000b14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b16:	2300      	movs	r3, #0
 8000b18:	607b      	str	r3, [r7, #4]
 8000b1a:	4b10      	ldr	r3, [pc, #64]	@ (8000b5c <HAL_MspInit+0x4c>)
 8000b1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b1e:	4a0f      	ldr	r2, [pc, #60]	@ (8000b5c <HAL_MspInit+0x4c>)
 8000b20:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b24:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b26:	4b0d      	ldr	r3, [pc, #52]	@ (8000b5c <HAL_MspInit+0x4c>)
 8000b28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b2a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b2e:	607b      	str	r3, [r7, #4]
 8000b30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b32:	2300      	movs	r3, #0
 8000b34:	603b      	str	r3, [r7, #0]
 8000b36:	4b09      	ldr	r3, [pc, #36]	@ (8000b5c <HAL_MspInit+0x4c>)
 8000b38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b3a:	4a08      	ldr	r2, [pc, #32]	@ (8000b5c <HAL_MspInit+0x4c>)
 8000b3c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b40:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b42:	4b06      	ldr	r3, [pc, #24]	@ (8000b5c <HAL_MspInit+0x4c>)
 8000b44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b46:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b4a:	603b      	str	r3, [r7, #0]
 8000b4c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b4e:	bf00      	nop
 8000b50:	370c      	adds	r7, #12
 8000b52:	46bd      	mov	sp, r7
 8000b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b58:	4770      	bx	lr
 8000b5a:	bf00      	nop
 8000b5c:	40023800 	.word	0x40023800

08000b60 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b08a      	sub	sp, #40	@ 0x28
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b68:	f107 0314 	add.w	r3, r7, #20
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	601a      	str	r2, [r3, #0]
 8000b70:	605a      	str	r2, [r3, #4]
 8000b72:	609a      	str	r2, [r3, #8]
 8000b74:	60da      	str	r2, [r3, #12]
 8000b76:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	4a19      	ldr	r2, [pc, #100]	@ (8000be4 <HAL_I2C_MspInit+0x84>)
 8000b7e:	4293      	cmp	r3, r2
 8000b80:	d12b      	bne.n	8000bda <HAL_I2C_MspInit+0x7a>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b82:	2300      	movs	r3, #0
 8000b84:	613b      	str	r3, [r7, #16]
 8000b86:	4b18      	ldr	r3, [pc, #96]	@ (8000be8 <HAL_I2C_MspInit+0x88>)
 8000b88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b8a:	4a17      	ldr	r2, [pc, #92]	@ (8000be8 <HAL_I2C_MspInit+0x88>)
 8000b8c:	f043 0302 	orr.w	r3, r3, #2
 8000b90:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b92:	4b15      	ldr	r3, [pc, #84]	@ (8000be8 <HAL_I2C_MspInit+0x88>)
 8000b94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b96:	f003 0302 	and.w	r3, r3, #2
 8000b9a:	613b      	str	r3, [r7, #16]
 8000b9c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000b9e:	23c0      	movs	r3, #192	@ 0xc0
 8000ba0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ba2:	2312      	movs	r3, #18
 8000ba4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000baa:	2303      	movs	r3, #3
 8000bac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000bae:	2304      	movs	r3, #4
 8000bb0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bb2:	f107 0314 	add.w	r3, r7, #20
 8000bb6:	4619      	mov	r1, r3
 8000bb8:	480c      	ldr	r0, [pc, #48]	@ (8000bec <HAL_I2C_MspInit+0x8c>)
 8000bba:	f000 fa7f 	bl	80010bc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	60fb      	str	r3, [r7, #12]
 8000bc2:	4b09      	ldr	r3, [pc, #36]	@ (8000be8 <HAL_I2C_MspInit+0x88>)
 8000bc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bc6:	4a08      	ldr	r2, [pc, #32]	@ (8000be8 <HAL_I2C_MspInit+0x88>)
 8000bc8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000bcc:	6413      	str	r3, [r2, #64]	@ 0x40
 8000bce:	4b06      	ldr	r3, [pc, #24]	@ (8000be8 <HAL_I2C_MspInit+0x88>)
 8000bd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bd2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000bd6:	60fb      	str	r3, [r7, #12]
 8000bd8:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000bda:	bf00      	nop
 8000bdc:	3728      	adds	r7, #40	@ 0x28
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	40005400 	.word	0x40005400
 8000be8:	40023800 	.word	0x40023800
 8000bec:	40020400 	.word	0x40020400

08000bf0 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b08a      	sub	sp, #40	@ 0x28
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bf8:	f107 0314 	add.w	r3, r7, #20
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	601a      	str	r2, [r3, #0]
 8000c00:	605a      	str	r2, [r3, #4]
 8000c02:	609a      	str	r2, [r3, #8]
 8000c04:	60da      	str	r2, [r3, #12]
 8000c06:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	4a19      	ldr	r2, [pc, #100]	@ (8000c74 <HAL_UART_MspInit+0x84>)
 8000c0e:	4293      	cmp	r3, r2
 8000c10:	d12c      	bne.n	8000c6c <HAL_UART_MspInit+0x7c>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c12:	2300      	movs	r3, #0
 8000c14:	613b      	str	r3, [r7, #16]
 8000c16:	4b18      	ldr	r3, [pc, #96]	@ (8000c78 <HAL_UART_MspInit+0x88>)
 8000c18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c1a:	4a17      	ldr	r2, [pc, #92]	@ (8000c78 <HAL_UART_MspInit+0x88>)
 8000c1c:	f043 0310 	orr.w	r3, r3, #16
 8000c20:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c22:	4b15      	ldr	r3, [pc, #84]	@ (8000c78 <HAL_UART_MspInit+0x88>)
 8000c24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c26:	f003 0310 	and.w	r3, r3, #16
 8000c2a:	613b      	str	r3, [r7, #16]
 8000c2c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c2e:	2300      	movs	r3, #0
 8000c30:	60fb      	str	r3, [r7, #12]
 8000c32:	4b11      	ldr	r3, [pc, #68]	@ (8000c78 <HAL_UART_MspInit+0x88>)
 8000c34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c36:	4a10      	ldr	r2, [pc, #64]	@ (8000c78 <HAL_UART_MspInit+0x88>)
 8000c38:	f043 0301 	orr.w	r3, r3, #1
 8000c3c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c3e:	4b0e      	ldr	r3, [pc, #56]	@ (8000c78 <HAL_UART_MspInit+0x88>)
 8000c40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c42:	f003 0301 	and.w	r3, r3, #1
 8000c46:	60fb      	str	r3, [r7, #12]
 8000c48:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000c4a:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000c4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c50:	2302      	movs	r3, #2
 8000c52:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c54:	2300      	movs	r3, #0
 8000c56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c58:	2303      	movs	r3, #3
 8000c5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000c5c:	2307      	movs	r3, #7
 8000c5e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c60:	f107 0314 	add.w	r3, r7, #20
 8000c64:	4619      	mov	r1, r3
 8000c66:	4805      	ldr	r0, [pc, #20]	@ (8000c7c <HAL_UART_MspInit+0x8c>)
 8000c68:	f000 fa28 	bl	80010bc <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8000c6c:	bf00      	nop
 8000c6e:	3728      	adds	r7, #40	@ 0x28
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bd80      	pop	{r7, pc}
 8000c74:	40011000 	.word	0x40011000
 8000c78:	40023800 	.word	0x40023800
 8000c7c:	40020000 	.word	0x40020000

08000c80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c84:	bf00      	nop
 8000c86:	e7fd      	b.n	8000c84 <NMI_Handler+0x4>

08000c88 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c8c:	bf00      	nop
 8000c8e:	e7fd      	b.n	8000c8c <HardFault_Handler+0x4>

08000c90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c94:	bf00      	nop
 8000c96:	e7fd      	b.n	8000c94 <MemManage_Handler+0x4>

08000c98 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c9c:	bf00      	nop
 8000c9e:	e7fd      	b.n	8000c9c <BusFault_Handler+0x4>

08000ca0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ca4:	bf00      	nop
 8000ca6:	e7fd      	b.n	8000ca4 <UsageFault_Handler+0x4>

08000ca8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cac:	bf00      	nop
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb4:	4770      	bx	lr

08000cb6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cb6:	b480      	push	{r7}
 8000cb8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cba:	bf00      	nop
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc2:	4770      	bx	lr

08000cc4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cc8:	bf00      	nop
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd0:	4770      	bx	lr

08000cd2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cd2:	b580      	push	{r7, lr}
 8000cd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cd6:	f000 f8c7 	bl	8000e68 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cda:	bf00      	nop
 8000cdc:	bd80      	pop	{r7, pc}
	...

08000ce0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b086      	sub	sp, #24
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ce8:	4a14      	ldr	r2, [pc, #80]	@ (8000d3c <_sbrk+0x5c>)
 8000cea:	4b15      	ldr	r3, [pc, #84]	@ (8000d40 <_sbrk+0x60>)
 8000cec:	1ad3      	subs	r3, r2, r3
 8000cee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000cf0:	697b      	ldr	r3, [r7, #20]
 8000cf2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000cf4:	4b13      	ldr	r3, [pc, #76]	@ (8000d44 <_sbrk+0x64>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d102      	bne.n	8000d02 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000cfc:	4b11      	ldr	r3, [pc, #68]	@ (8000d44 <_sbrk+0x64>)
 8000cfe:	4a12      	ldr	r2, [pc, #72]	@ (8000d48 <_sbrk+0x68>)
 8000d00:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d02:	4b10      	ldr	r3, [pc, #64]	@ (8000d44 <_sbrk+0x64>)
 8000d04:	681a      	ldr	r2, [r3, #0]
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	4413      	add	r3, r2
 8000d0a:	693a      	ldr	r2, [r7, #16]
 8000d0c:	429a      	cmp	r2, r3
 8000d0e:	d207      	bcs.n	8000d20 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d10:	f002 fcae 	bl	8003670 <__errno>
 8000d14:	4603      	mov	r3, r0
 8000d16:	220c      	movs	r2, #12
 8000d18:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d1a:	f04f 33ff 	mov.w	r3, #4294967295
 8000d1e:	e009      	b.n	8000d34 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d20:	4b08      	ldr	r3, [pc, #32]	@ (8000d44 <_sbrk+0x64>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d26:	4b07      	ldr	r3, [pc, #28]	@ (8000d44 <_sbrk+0x64>)
 8000d28:	681a      	ldr	r2, [r3, #0]
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	4413      	add	r3, r2
 8000d2e:	4a05      	ldr	r2, [pc, #20]	@ (8000d44 <_sbrk+0x64>)
 8000d30:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d32:	68fb      	ldr	r3, [r7, #12]
}
 8000d34:	4618      	mov	r0, r3
 8000d36:	3718      	adds	r7, #24
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd80      	pop	{r7, pc}
 8000d3c:	20030000 	.word	0x20030000
 8000d40:	00000400 	.word	0x00000400
 8000d44:	2000012c 	.word	0x2000012c
 8000d48:	20000280 	.word	0x20000280

08000d4c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d50:	4b06      	ldr	r3, [pc, #24]	@ (8000d6c <SystemInit+0x20>)
 8000d52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d56:	4a05      	ldr	r2, [pc, #20]	@ (8000d6c <SystemInit+0x20>)
 8000d58:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000d5c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d60:	bf00      	nop
 8000d62:	46bd      	mov	sp, r7
 8000d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d68:	4770      	bx	lr
 8000d6a:	bf00      	nop
 8000d6c:	e000ed00 	.word	0xe000ed00

08000d70 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000d70:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000da8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000d74:	f7ff ffea 	bl	8000d4c <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d78:	480c      	ldr	r0, [pc, #48]	@ (8000dac <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000d7a:	490d      	ldr	r1, [pc, #52]	@ (8000db0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000d7c:	4a0d      	ldr	r2, [pc, #52]	@ (8000db4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000d7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d80:	e002      	b.n	8000d88 <LoopCopyDataInit>

08000d82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d86:	3304      	adds	r3, #4

08000d88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d8c:	d3f9      	bcc.n	8000d82 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d8e:	4a0a      	ldr	r2, [pc, #40]	@ (8000db8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000d90:	4c0a      	ldr	r4, [pc, #40]	@ (8000dbc <LoopFillZerobss+0x22>)
  movs r3, #0
 8000d92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d94:	e001      	b.n	8000d9a <LoopFillZerobss>

08000d96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d98:	3204      	adds	r2, #4

08000d9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d9c:	d3fb      	bcc.n	8000d96 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000d9e:	f002 fc6d 	bl	800367c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000da2:	f7ff fc13 	bl	80005cc <main>
  bx  lr    
 8000da6:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000da8:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000dac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000db0:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000db4:	08003ff4 	.word	0x08003ff4
  ldr r2, =_sbss
 8000db8:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000dbc:	2000027c 	.word	0x2000027c

08000dc0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000dc0:	e7fe      	b.n	8000dc0 <ADC_IRQHandler>
	...

08000dc4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000dc8:	4b0e      	ldr	r3, [pc, #56]	@ (8000e04 <HAL_Init+0x40>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	4a0d      	ldr	r2, [pc, #52]	@ (8000e04 <HAL_Init+0x40>)
 8000dce:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000dd2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000dd4:	4b0b      	ldr	r3, [pc, #44]	@ (8000e04 <HAL_Init+0x40>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	4a0a      	ldr	r2, [pc, #40]	@ (8000e04 <HAL_Init+0x40>)
 8000dda:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000dde:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000de0:	4b08      	ldr	r3, [pc, #32]	@ (8000e04 <HAL_Init+0x40>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	4a07      	ldr	r2, [pc, #28]	@ (8000e04 <HAL_Init+0x40>)
 8000de6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000dea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dec:	2003      	movs	r0, #3
 8000dee:	f000 f931 	bl	8001054 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000df2:	200f      	movs	r0, #15
 8000df4:	f000 f808 	bl	8000e08 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000df8:	f7ff fe8a 	bl	8000b10 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000dfc:	2300      	movs	r3, #0
}
 8000dfe:	4618      	mov	r0, r3
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	bf00      	nop
 8000e04:	40023c00 	.word	0x40023c00

08000e08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b082      	sub	sp, #8
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e10:	4b12      	ldr	r3, [pc, #72]	@ (8000e5c <HAL_InitTick+0x54>)
 8000e12:	681a      	ldr	r2, [r3, #0]
 8000e14:	4b12      	ldr	r3, [pc, #72]	@ (8000e60 <HAL_InitTick+0x58>)
 8000e16:	781b      	ldrb	r3, [r3, #0]
 8000e18:	4619      	mov	r1, r3
 8000e1a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e1e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e22:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e26:	4618      	mov	r0, r3
 8000e28:	f000 f93b 	bl	80010a2 <HAL_SYSTICK_Config>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d001      	beq.n	8000e36 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e32:	2301      	movs	r3, #1
 8000e34:	e00e      	b.n	8000e54 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	2b0f      	cmp	r3, #15
 8000e3a:	d80a      	bhi.n	8000e52 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	6879      	ldr	r1, [r7, #4]
 8000e40:	f04f 30ff 	mov.w	r0, #4294967295
 8000e44:	f000 f911 	bl	800106a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e48:	4a06      	ldr	r2, [pc, #24]	@ (8000e64 <HAL_InitTick+0x5c>)
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	e000      	b.n	8000e54 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e52:	2301      	movs	r3, #1
}
 8000e54:	4618      	mov	r0, r3
 8000e56:	3708      	adds	r7, #8
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bd80      	pop	{r7, pc}
 8000e5c:	20000000 	.word	0x20000000
 8000e60:	20000008 	.word	0x20000008
 8000e64:	20000004 	.word	0x20000004

08000e68 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e6c:	4b06      	ldr	r3, [pc, #24]	@ (8000e88 <HAL_IncTick+0x20>)
 8000e6e:	781b      	ldrb	r3, [r3, #0]
 8000e70:	461a      	mov	r2, r3
 8000e72:	4b06      	ldr	r3, [pc, #24]	@ (8000e8c <HAL_IncTick+0x24>)
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	4413      	add	r3, r2
 8000e78:	4a04      	ldr	r2, [pc, #16]	@ (8000e8c <HAL_IncTick+0x24>)
 8000e7a:	6013      	str	r3, [r2, #0]
}
 8000e7c:	bf00      	nop
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e84:	4770      	bx	lr
 8000e86:	bf00      	nop
 8000e88:	20000008 	.word	0x20000008
 8000e8c:	20000130 	.word	0x20000130

08000e90 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0
  return uwTick;
 8000e94:	4b03      	ldr	r3, [pc, #12]	@ (8000ea4 <HAL_GetTick+0x14>)
 8000e96:	681b      	ldr	r3, [r3, #0]
}
 8000e98:	4618      	mov	r0, r3
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop
 8000ea4:	20000130 	.word	0x20000130

08000ea8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b084      	sub	sp, #16
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000eb0:	f7ff ffee 	bl	8000e90 <HAL_GetTick>
 8000eb4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000eba:	68fb      	ldr	r3, [r7, #12]
 8000ebc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ec0:	d005      	beq.n	8000ece <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ec2:	4b0a      	ldr	r3, [pc, #40]	@ (8000eec <HAL_Delay+0x44>)
 8000ec4:	781b      	ldrb	r3, [r3, #0]
 8000ec6:	461a      	mov	r2, r3
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	4413      	add	r3, r2
 8000ecc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000ece:	bf00      	nop
 8000ed0:	f7ff ffde 	bl	8000e90 <HAL_GetTick>
 8000ed4:	4602      	mov	r2, r0
 8000ed6:	68bb      	ldr	r3, [r7, #8]
 8000ed8:	1ad3      	subs	r3, r2, r3
 8000eda:	68fa      	ldr	r2, [r7, #12]
 8000edc:	429a      	cmp	r2, r3
 8000ede:	d8f7      	bhi.n	8000ed0 <HAL_Delay+0x28>
  {
  }
}
 8000ee0:	bf00      	nop
 8000ee2:	bf00      	nop
 8000ee4:	3710      	adds	r7, #16
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	20000008 	.word	0x20000008

08000ef0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	b085      	sub	sp, #20
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	f003 0307 	and.w	r3, r3, #7
 8000efe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f00:	4b0c      	ldr	r3, [pc, #48]	@ (8000f34 <__NVIC_SetPriorityGrouping+0x44>)
 8000f02:	68db      	ldr	r3, [r3, #12]
 8000f04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f06:	68ba      	ldr	r2, [r7, #8]
 8000f08:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000f0c:	4013      	ands	r3, r2
 8000f0e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f14:	68bb      	ldr	r3, [r7, #8]
 8000f16:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f18:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000f1c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f22:	4a04      	ldr	r2, [pc, #16]	@ (8000f34 <__NVIC_SetPriorityGrouping+0x44>)
 8000f24:	68bb      	ldr	r3, [r7, #8]
 8000f26:	60d3      	str	r3, [r2, #12]
}
 8000f28:	bf00      	nop
 8000f2a:	3714      	adds	r7, #20
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f32:	4770      	bx	lr
 8000f34:	e000ed00 	.word	0xe000ed00

08000f38 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f3c:	4b04      	ldr	r3, [pc, #16]	@ (8000f50 <__NVIC_GetPriorityGrouping+0x18>)
 8000f3e:	68db      	ldr	r3, [r3, #12]
 8000f40:	0a1b      	lsrs	r3, r3, #8
 8000f42:	f003 0307 	and.w	r3, r3, #7
}
 8000f46:	4618      	mov	r0, r3
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4e:	4770      	bx	lr
 8000f50:	e000ed00 	.word	0xe000ed00

08000f54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f54:	b480      	push	{r7}
 8000f56:	b083      	sub	sp, #12
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	6039      	str	r1, [r7, #0]
 8000f5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	db0a      	blt.n	8000f7e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	b2da      	uxtb	r2, r3
 8000f6c:	490c      	ldr	r1, [pc, #48]	@ (8000fa0 <__NVIC_SetPriority+0x4c>)
 8000f6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f72:	0112      	lsls	r2, r2, #4
 8000f74:	b2d2      	uxtb	r2, r2
 8000f76:	440b      	add	r3, r1
 8000f78:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f7c:	e00a      	b.n	8000f94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f7e:	683b      	ldr	r3, [r7, #0]
 8000f80:	b2da      	uxtb	r2, r3
 8000f82:	4908      	ldr	r1, [pc, #32]	@ (8000fa4 <__NVIC_SetPriority+0x50>)
 8000f84:	79fb      	ldrb	r3, [r7, #7]
 8000f86:	f003 030f 	and.w	r3, r3, #15
 8000f8a:	3b04      	subs	r3, #4
 8000f8c:	0112      	lsls	r2, r2, #4
 8000f8e:	b2d2      	uxtb	r2, r2
 8000f90:	440b      	add	r3, r1
 8000f92:	761a      	strb	r2, [r3, #24]
}
 8000f94:	bf00      	nop
 8000f96:	370c      	adds	r7, #12
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9e:	4770      	bx	lr
 8000fa0:	e000e100 	.word	0xe000e100
 8000fa4:	e000ed00 	.word	0xe000ed00

08000fa8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	b089      	sub	sp, #36	@ 0x24
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	60f8      	str	r0, [r7, #12]
 8000fb0:	60b9      	str	r1, [r7, #8]
 8000fb2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	f003 0307 	and.w	r3, r3, #7
 8000fba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fbc:	69fb      	ldr	r3, [r7, #28]
 8000fbe:	f1c3 0307 	rsb	r3, r3, #7
 8000fc2:	2b04      	cmp	r3, #4
 8000fc4:	bf28      	it	cs
 8000fc6:	2304      	movcs	r3, #4
 8000fc8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fca:	69fb      	ldr	r3, [r7, #28]
 8000fcc:	3304      	adds	r3, #4
 8000fce:	2b06      	cmp	r3, #6
 8000fd0:	d902      	bls.n	8000fd8 <NVIC_EncodePriority+0x30>
 8000fd2:	69fb      	ldr	r3, [r7, #28]
 8000fd4:	3b03      	subs	r3, #3
 8000fd6:	e000      	b.n	8000fda <NVIC_EncodePriority+0x32>
 8000fd8:	2300      	movs	r3, #0
 8000fda:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fdc:	f04f 32ff 	mov.w	r2, #4294967295
 8000fe0:	69bb      	ldr	r3, [r7, #24]
 8000fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe6:	43da      	mvns	r2, r3
 8000fe8:	68bb      	ldr	r3, [r7, #8]
 8000fea:	401a      	ands	r2, r3
 8000fec:	697b      	ldr	r3, [r7, #20]
 8000fee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ff0:	f04f 31ff 	mov.w	r1, #4294967295
 8000ff4:	697b      	ldr	r3, [r7, #20]
 8000ff6:	fa01 f303 	lsl.w	r3, r1, r3
 8000ffa:	43d9      	mvns	r1, r3
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001000:	4313      	orrs	r3, r2
         );
}
 8001002:	4618      	mov	r0, r3
 8001004:	3724      	adds	r7, #36	@ 0x24
 8001006:	46bd      	mov	sp, r7
 8001008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100c:	4770      	bx	lr
	...

08001010 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b082      	sub	sp, #8
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	3b01      	subs	r3, #1
 800101c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001020:	d301      	bcc.n	8001026 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001022:	2301      	movs	r3, #1
 8001024:	e00f      	b.n	8001046 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001026:	4a0a      	ldr	r2, [pc, #40]	@ (8001050 <SysTick_Config+0x40>)
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	3b01      	subs	r3, #1
 800102c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800102e:	210f      	movs	r1, #15
 8001030:	f04f 30ff 	mov.w	r0, #4294967295
 8001034:	f7ff ff8e 	bl	8000f54 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001038:	4b05      	ldr	r3, [pc, #20]	@ (8001050 <SysTick_Config+0x40>)
 800103a:	2200      	movs	r2, #0
 800103c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800103e:	4b04      	ldr	r3, [pc, #16]	@ (8001050 <SysTick_Config+0x40>)
 8001040:	2207      	movs	r2, #7
 8001042:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001044:	2300      	movs	r3, #0
}
 8001046:	4618      	mov	r0, r3
 8001048:	3708      	adds	r7, #8
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	e000e010 	.word	0xe000e010

08001054 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b082      	sub	sp, #8
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800105c:	6878      	ldr	r0, [r7, #4]
 800105e:	f7ff ff47 	bl	8000ef0 <__NVIC_SetPriorityGrouping>
}
 8001062:	bf00      	nop
 8001064:	3708      	adds	r7, #8
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}

0800106a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800106a:	b580      	push	{r7, lr}
 800106c:	b086      	sub	sp, #24
 800106e:	af00      	add	r7, sp, #0
 8001070:	4603      	mov	r3, r0
 8001072:	60b9      	str	r1, [r7, #8]
 8001074:	607a      	str	r2, [r7, #4]
 8001076:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001078:	2300      	movs	r3, #0
 800107a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800107c:	f7ff ff5c 	bl	8000f38 <__NVIC_GetPriorityGrouping>
 8001080:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001082:	687a      	ldr	r2, [r7, #4]
 8001084:	68b9      	ldr	r1, [r7, #8]
 8001086:	6978      	ldr	r0, [r7, #20]
 8001088:	f7ff ff8e 	bl	8000fa8 <NVIC_EncodePriority>
 800108c:	4602      	mov	r2, r0
 800108e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001092:	4611      	mov	r1, r2
 8001094:	4618      	mov	r0, r3
 8001096:	f7ff ff5d 	bl	8000f54 <__NVIC_SetPriority>
}
 800109a:	bf00      	nop
 800109c:	3718      	adds	r7, #24
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}

080010a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010a2:	b580      	push	{r7, lr}
 80010a4:	b082      	sub	sp, #8
 80010a6:	af00      	add	r7, sp, #0
 80010a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010aa:	6878      	ldr	r0, [r7, #4]
 80010ac:	f7ff ffb0 	bl	8001010 <SysTick_Config>
 80010b0:	4603      	mov	r3, r0
}
 80010b2:	4618      	mov	r0, r3
 80010b4:	3708      	adds	r7, #8
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
	...

080010bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010bc:	b480      	push	{r7}
 80010be:	b089      	sub	sp, #36	@ 0x24
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
 80010c4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80010c6:	2300      	movs	r3, #0
 80010c8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80010ca:	2300      	movs	r3, #0
 80010cc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80010ce:	2300      	movs	r3, #0
 80010d0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010d2:	2300      	movs	r3, #0
 80010d4:	61fb      	str	r3, [r7, #28]
 80010d6:	e177      	b.n	80013c8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80010d8:	2201      	movs	r2, #1
 80010da:	69fb      	ldr	r3, [r7, #28]
 80010dc:	fa02 f303 	lsl.w	r3, r2, r3
 80010e0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	697a      	ldr	r2, [r7, #20]
 80010e8:	4013      	ands	r3, r2
 80010ea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80010ec:	693a      	ldr	r2, [r7, #16]
 80010ee:	697b      	ldr	r3, [r7, #20]
 80010f0:	429a      	cmp	r2, r3
 80010f2:	f040 8166 	bne.w	80013c2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	685b      	ldr	r3, [r3, #4]
 80010fa:	f003 0303 	and.w	r3, r3, #3
 80010fe:	2b01      	cmp	r3, #1
 8001100:	d005      	beq.n	800110e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	685b      	ldr	r3, [r3, #4]
 8001106:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800110a:	2b02      	cmp	r3, #2
 800110c:	d130      	bne.n	8001170 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	689b      	ldr	r3, [r3, #8]
 8001112:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001114:	69fb      	ldr	r3, [r7, #28]
 8001116:	005b      	lsls	r3, r3, #1
 8001118:	2203      	movs	r2, #3
 800111a:	fa02 f303 	lsl.w	r3, r2, r3
 800111e:	43db      	mvns	r3, r3
 8001120:	69ba      	ldr	r2, [r7, #24]
 8001122:	4013      	ands	r3, r2
 8001124:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	68da      	ldr	r2, [r3, #12]
 800112a:	69fb      	ldr	r3, [r7, #28]
 800112c:	005b      	lsls	r3, r3, #1
 800112e:	fa02 f303 	lsl.w	r3, r2, r3
 8001132:	69ba      	ldr	r2, [r7, #24]
 8001134:	4313      	orrs	r3, r2
 8001136:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	69ba      	ldr	r2, [r7, #24]
 800113c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	685b      	ldr	r3, [r3, #4]
 8001142:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001144:	2201      	movs	r2, #1
 8001146:	69fb      	ldr	r3, [r7, #28]
 8001148:	fa02 f303 	lsl.w	r3, r2, r3
 800114c:	43db      	mvns	r3, r3
 800114e:	69ba      	ldr	r2, [r7, #24]
 8001150:	4013      	ands	r3, r2
 8001152:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	685b      	ldr	r3, [r3, #4]
 8001158:	091b      	lsrs	r3, r3, #4
 800115a:	f003 0201 	and.w	r2, r3, #1
 800115e:	69fb      	ldr	r3, [r7, #28]
 8001160:	fa02 f303 	lsl.w	r3, r2, r3
 8001164:	69ba      	ldr	r2, [r7, #24]
 8001166:	4313      	orrs	r3, r2
 8001168:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	69ba      	ldr	r2, [r7, #24]
 800116e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	685b      	ldr	r3, [r3, #4]
 8001174:	f003 0303 	and.w	r3, r3, #3
 8001178:	2b03      	cmp	r3, #3
 800117a:	d017      	beq.n	80011ac <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	68db      	ldr	r3, [r3, #12]
 8001180:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001182:	69fb      	ldr	r3, [r7, #28]
 8001184:	005b      	lsls	r3, r3, #1
 8001186:	2203      	movs	r2, #3
 8001188:	fa02 f303 	lsl.w	r3, r2, r3
 800118c:	43db      	mvns	r3, r3
 800118e:	69ba      	ldr	r2, [r7, #24]
 8001190:	4013      	ands	r3, r2
 8001192:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	689a      	ldr	r2, [r3, #8]
 8001198:	69fb      	ldr	r3, [r7, #28]
 800119a:	005b      	lsls	r3, r3, #1
 800119c:	fa02 f303 	lsl.w	r3, r2, r3
 80011a0:	69ba      	ldr	r2, [r7, #24]
 80011a2:	4313      	orrs	r3, r2
 80011a4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	69ba      	ldr	r2, [r7, #24]
 80011aa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	685b      	ldr	r3, [r3, #4]
 80011b0:	f003 0303 	and.w	r3, r3, #3
 80011b4:	2b02      	cmp	r3, #2
 80011b6:	d123      	bne.n	8001200 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80011b8:	69fb      	ldr	r3, [r7, #28]
 80011ba:	08da      	lsrs	r2, r3, #3
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	3208      	adds	r2, #8
 80011c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80011c6:	69fb      	ldr	r3, [r7, #28]
 80011c8:	f003 0307 	and.w	r3, r3, #7
 80011cc:	009b      	lsls	r3, r3, #2
 80011ce:	220f      	movs	r2, #15
 80011d0:	fa02 f303 	lsl.w	r3, r2, r3
 80011d4:	43db      	mvns	r3, r3
 80011d6:	69ba      	ldr	r2, [r7, #24]
 80011d8:	4013      	ands	r3, r2
 80011da:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	691a      	ldr	r2, [r3, #16]
 80011e0:	69fb      	ldr	r3, [r7, #28]
 80011e2:	f003 0307 	and.w	r3, r3, #7
 80011e6:	009b      	lsls	r3, r3, #2
 80011e8:	fa02 f303 	lsl.w	r3, r2, r3
 80011ec:	69ba      	ldr	r2, [r7, #24]
 80011ee:	4313      	orrs	r3, r2
 80011f0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80011f2:	69fb      	ldr	r3, [r7, #28]
 80011f4:	08da      	lsrs	r2, r3, #3
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	3208      	adds	r2, #8
 80011fa:	69b9      	ldr	r1, [r7, #24]
 80011fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001206:	69fb      	ldr	r3, [r7, #28]
 8001208:	005b      	lsls	r3, r3, #1
 800120a:	2203      	movs	r2, #3
 800120c:	fa02 f303 	lsl.w	r3, r2, r3
 8001210:	43db      	mvns	r3, r3
 8001212:	69ba      	ldr	r2, [r7, #24]
 8001214:	4013      	ands	r3, r2
 8001216:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	685b      	ldr	r3, [r3, #4]
 800121c:	f003 0203 	and.w	r2, r3, #3
 8001220:	69fb      	ldr	r3, [r7, #28]
 8001222:	005b      	lsls	r3, r3, #1
 8001224:	fa02 f303 	lsl.w	r3, r2, r3
 8001228:	69ba      	ldr	r2, [r7, #24]
 800122a:	4313      	orrs	r3, r2
 800122c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	69ba      	ldr	r2, [r7, #24]
 8001232:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	685b      	ldr	r3, [r3, #4]
 8001238:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800123c:	2b00      	cmp	r3, #0
 800123e:	f000 80c0 	beq.w	80013c2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001242:	2300      	movs	r3, #0
 8001244:	60fb      	str	r3, [r7, #12]
 8001246:	4b66      	ldr	r3, [pc, #408]	@ (80013e0 <HAL_GPIO_Init+0x324>)
 8001248:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800124a:	4a65      	ldr	r2, [pc, #404]	@ (80013e0 <HAL_GPIO_Init+0x324>)
 800124c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001250:	6453      	str	r3, [r2, #68]	@ 0x44
 8001252:	4b63      	ldr	r3, [pc, #396]	@ (80013e0 <HAL_GPIO_Init+0x324>)
 8001254:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001256:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800125a:	60fb      	str	r3, [r7, #12]
 800125c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800125e:	4a61      	ldr	r2, [pc, #388]	@ (80013e4 <HAL_GPIO_Init+0x328>)
 8001260:	69fb      	ldr	r3, [r7, #28]
 8001262:	089b      	lsrs	r3, r3, #2
 8001264:	3302      	adds	r3, #2
 8001266:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800126a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800126c:	69fb      	ldr	r3, [r7, #28]
 800126e:	f003 0303 	and.w	r3, r3, #3
 8001272:	009b      	lsls	r3, r3, #2
 8001274:	220f      	movs	r2, #15
 8001276:	fa02 f303 	lsl.w	r3, r2, r3
 800127a:	43db      	mvns	r3, r3
 800127c:	69ba      	ldr	r2, [r7, #24]
 800127e:	4013      	ands	r3, r2
 8001280:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	4a58      	ldr	r2, [pc, #352]	@ (80013e8 <HAL_GPIO_Init+0x32c>)
 8001286:	4293      	cmp	r3, r2
 8001288:	d037      	beq.n	80012fa <HAL_GPIO_Init+0x23e>
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	4a57      	ldr	r2, [pc, #348]	@ (80013ec <HAL_GPIO_Init+0x330>)
 800128e:	4293      	cmp	r3, r2
 8001290:	d031      	beq.n	80012f6 <HAL_GPIO_Init+0x23a>
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	4a56      	ldr	r2, [pc, #344]	@ (80013f0 <HAL_GPIO_Init+0x334>)
 8001296:	4293      	cmp	r3, r2
 8001298:	d02b      	beq.n	80012f2 <HAL_GPIO_Init+0x236>
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	4a55      	ldr	r2, [pc, #340]	@ (80013f4 <HAL_GPIO_Init+0x338>)
 800129e:	4293      	cmp	r3, r2
 80012a0:	d025      	beq.n	80012ee <HAL_GPIO_Init+0x232>
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	4a54      	ldr	r2, [pc, #336]	@ (80013f8 <HAL_GPIO_Init+0x33c>)
 80012a6:	4293      	cmp	r3, r2
 80012a8:	d01f      	beq.n	80012ea <HAL_GPIO_Init+0x22e>
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	4a53      	ldr	r2, [pc, #332]	@ (80013fc <HAL_GPIO_Init+0x340>)
 80012ae:	4293      	cmp	r3, r2
 80012b0:	d019      	beq.n	80012e6 <HAL_GPIO_Init+0x22a>
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	4a52      	ldr	r2, [pc, #328]	@ (8001400 <HAL_GPIO_Init+0x344>)
 80012b6:	4293      	cmp	r3, r2
 80012b8:	d013      	beq.n	80012e2 <HAL_GPIO_Init+0x226>
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	4a51      	ldr	r2, [pc, #324]	@ (8001404 <HAL_GPIO_Init+0x348>)
 80012be:	4293      	cmp	r3, r2
 80012c0:	d00d      	beq.n	80012de <HAL_GPIO_Init+0x222>
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	4a50      	ldr	r2, [pc, #320]	@ (8001408 <HAL_GPIO_Init+0x34c>)
 80012c6:	4293      	cmp	r3, r2
 80012c8:	d007      	beq.n	80012da <HAL_GPIO_Init+0x21e>
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	4a4f      	ldr	r2, [pc, #316]	@ (800140c <HAL_GPIO_Init+0x350>)
 80012ce:	4293      	cmp	r3, r2
 80012d0:	d101      	bne.n	80012d6 <HAL_GPIO_Init+0x21a>
 80012d2:	2309      	movs	r3, #9
 80012d4:	e012      	b.n	80012fc <HAL_GPIO_Init+0x240>
 80012d6:	230a      	movs	r3, #10
 80012d8:	e010      	b.n	80012fc <HAL_GPIO_Init+0x240>
 80012da:	2308      	movs	r3, #8
 80012dc:	e00e      	b.n	80012fc <HAL_GPIO_Init+0x240>
 80012de:	2307      	movs	r3, #7
 80012e0:	e00c      	b.n	80012fc <HAL_GPIO_Init+0x240>
 80012e2:	2306      	movs	r3, #6
 80012e4:	e00a      	b.n	80012fc <HAL_GPIO_Init+0x240>
 80012e6:	2305      	movs	r3, #5
 80012e8:	e008      	b.n	80012fc <HAL_GPIO_Init+0x240>
 80012ea:	2304      	movs	r3, #4
 80012ec:	e006      	b.n	80012fc <HAL_GPIO_Init+0x240>
 80012ee:	2303      	movs	r3, #3
 80012f0:	e004      	b.n	80012fc <HAL_GPIO_Init+0x240>
 80012f2:	2302      	movs	r3, #2
 80012f4:	e002      	b.n	80012fc <HAL_GPIO_Init+0x240>
 80012f6:	2301      	movs	r3, #1
 80012f8:	e000      	b.n	80012fc <HAL_GPIO_Init+0x240>
 80012fa:	2300      	movs	r3, #0
 80012fc:	69fa      	ldr	r2, [r7, #28]
 80012fe:	f002 0203 	and.w	r2, r2, #3
 8001302:	0092      	lsls	r2, r2, #2
 8001304:	4093      	lsls	r3, r2
 8001306:	69ba      	ldr	r2, [r7, #24]
 8001308:	4313      	orrs	r3, r2
 800130a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800130c:	4935      	ldr	r1, [pc, #212]	@ (80013e4 <HAL_GPIO_Init+0x328>)
 800130e:	69fb      	ldr	r3, [r7, #28]
 8001310:	089b      	lsrs	r3, r3, #2
 8001312:	3302      	adds	r3, #2
 8001314:	69ba      	ldr	r2, [r7, #24]
 8001316:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800131a:	4b3d      	ldr	r3, [pc, #244]	@ (8001410 <HAL_GPIO_Init+0x354>)
 800131c:	689b      	ldr	r3, [r3, #8]
 800131e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001320:	693b      	ldr	r3, [r7, #16]
 8001322:	43db      	mvns	r3, r3
 8001324:	69ba      	ldr	r2, [r7, #24]
 8001326:	4013      	ands	r3, r2
 8001328:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	685b      	ldr	r3, [r3, #4]
 800132e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001332:	2b00      	cmp	r3, #0
 8001334:	d003      	beq.n	800133e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001336:	69ba      	ldr	r2, [r7, #24]
 8001338:	693b      	ldr	r3, [r7, #16]
 800133a:	4313      	orrs	r3, r2
 800133c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800133e:	4a34      	ldr	r2, [pc, #208]	@ (8001410 <HAL_GPIO_Init+0x354>)
 8001340:	69bb      	ldr	r3, [r7, #24]
 8001342:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001344:	4b32      	ldr	r3, [pc, #200]	@ (8001410 <HAL_GPIO_Init+0x354>)
 8001346:	68db      	ldr	r3, [r3, #12]
 8001348:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800134a:	693b      	ldr	r3, [r7, #16]
 800134c:	43db      	mvns	r3, r3
 800134e:	69ba      	ldr	r2, [r7, #24]
 8001350:	4013      	ands	r3, r2
 8001352:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800135c:	2b00      	cmp	r3, #0
 800135e:	d003      	beq.n	8001368 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001360:	69ba      	ldr	r2, [r7, #24]
 8001362:	693b      	ldr	r3, [r7, #16]
 8001364:	4313      	orrs	r3, r2
 8001366:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001368:	4a29      	ldr	r2, [pc, #164]	@ (8001410 <HAL_GPIO_Init+0x354>)
 800136a:	69bb      	ldr	r3, [r7, #24]
 800136c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800136e:	4b28      	ldr	r3, [pc, #160]	@ (8001410 <HAL_GPIO_Init+0x354>)
 8001370:	685b      	ldr	r3, [r3, #4]
 8001372:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001374:	693b      	ldr	r3, [r7, #16]
 8001376:	43db      	mvns	r3, r3
 8001378:	69ba      	ldr	r2, [r7, #24]
 800137a:	4013      	ands	r3, r2
 800137c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	685b      	ldr	r3, [r3, #4]
 8001382:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001386:	2b00      	cmp	r3, #0
 8001388:	d003      	beq.n	8001392 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800138a:	69ba      	ldr	r2, [r7, #24]
 800138c:	693b      	ldr	r3, [r7, #16]
 800138e:	4313      	orrs	r3, r2
 8001390:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001392:	4a1f      	ldr	r2, [pc, #124]	@ (8001410 <HAL_GPIO_Init+0x354>)
 8001394:	69bb      	ldr	r3, [r7, #24]
 8001396:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001398:	4b1d      	ldr	r3, [pc, #116]	@ (8001410 <HAL_GPIO_Init+0x354>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800139e:	693b      	ldr	r3, [r7, #16]
 80013a0:	43db      	mvns	r3, r3
 80013a2:	69ba      	ldr	r2, [r7, #24]
 80013a4:	4013      	ands	r3, r2
 80013a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d003      	beq.n	80013bc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80013b4:	69ba      	ldr	r2, [r7, #24]
 80013b6:	693b      	ldr	r3, [r7, #16]
 80013b8:	4313      	orrs	r3, r2
 80013ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80013bc:	4a14      	ldr	r2, [pc, #80]	@ (8001410 <HAL_GPIO_Init+0x354>)
 80013be:	69bb      	ldr	r3, [r7, #24]
 80013c0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013c2:	69fb      	ldr	r3, [r7, #28]
 80013c4:	3301      	adds	r3, #1
 80013c6:	61fb      	str	r3, [r7, #28]
 80013c8:	69fb      	ldr	r3, [r7, #28]
 80013ca:	2b0f      	cmp	r3, #15
 80013cc:	f67f ae84 	bls.w	80010d8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80013d0:	bf00      	nop
 80013d2:	bf00      	nop
 80013d4:	3724      	adds	r7, #36	@ 0x24
 80013d6:	46bd      	mov	sp, r7
 80013d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013dc:	4770      	bx	lr
 80013de:	bf00      	nop
 80013e0:	40023800 	.word	0x40023800
 80013e4:	40013800 	.word	0x40013800
 80013e8:	40020000 	.word	0x40020000
 80013ec:	40020400 	.word	0x40020400
 80013f0:	40020800 	.word	0x40020800
 80013f4:	40020c00 	.word	0x40020c00
 80013f8:	40021000 	.word	0x40021000
 80013fc:	40021400 	.word	0x40021400
 8001400:	40021800 	.word	0x40021800
 8001404:	40021c00 	.word	0x40021c00
 8001408:	40022000 	.word	0x40022000
 800140c:	40022400 	.word	0x40022400
 8001410:	40013c00 	.word	0x40013c00

08001414 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b084      	sub	sp, #16
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	2b00      	cmp	r3, #0
 8001420:	d101      	bne.n	8001426 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001422:	2301      	movs	r3, #1
 8001424:	e12b      	b.n	800167e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800142c:	b2db      	uxtb	r3, r3
 800142e:	2b00      	cmp	r3, #0
 8001430:	d106      	bne.n	8001440 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	2200      	movs	r2, #0
 8001436:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800143a:	6878      	ldr	r0, [r7, #4]
 800143c:	f7ff fb90 	bl	8000b60 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	2224      	movs	r2, #36	@ 0x24
 8001444:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	681a      	ldr	r2, [r3, #0]
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f022 0201 	bic.w	r2, r2, #1
 8001456:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	681a      	ldr	r2, [r3, #0]
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001466:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	681a      	ldr	r2, [r3, #0]
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001476:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001478:	f001 fc9c 	bl	8002db4 <HAL_RCC_GetPCLK1Freq>
 800147c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	685b      	ldr	r3, [r3, #4]
 8001482:	4a81      	ldr	r2, [pc, #516]	@ (8001688 <HAL_I2C_Init+0x274>)
 8001484:	4293      	cmp	r3, r2
 8001486:	d807      	bhi.n	8001498 <HAL_I2C_Init+0x84>
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	4a80      	ldr	r2, [pc, #512]	@ (800168c <HAL_I2C_Init+0x278>)
 800148c:	4293      	cmp	r3, r2
 800148e:	bf94      	ite	ls
 8001490:	2301      	movls	r3, #1
 8001492:	2300      	movhi	r3, #0
 8001494:	b2db      	uxtb	r3, r3
 8001496:	e006      	b.n	80014a6 <HAL_I2C_Init+0x92>
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	4a7d      	ldr	r2, [pc, #500]	@ (8001690 <HAL_I2C_Init+0x27c>)
 800149c:	4293      	cmp	r3, r2
 800149e:	bf94      	ite	ls
 80014a0:	2301      	movls	r3, #1
 80014a2:	2300      	movhi	r3, #0
 80014a4:	b2db      	uxtb	r3, r3
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d001      	beq.n	80014ae <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80014aa:	2301      	movs	r3, #1
 80014ac:	e0e7      	b.n	800167e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	4a78      	ldr	r2, [pc, #480]	@ (8001694 <HAL_I2C_Init+0x280>)
 80014b2:	fba2 2303 	umull	r2, r3, r2, r3
 80014b6:	0c9b      	lsrs	r3, r3, #18
 80014b8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	68ba      	ldr	r2, [r7, #8]
 80014ca:	430a      	orrs	r2, r1
 80014cc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	6a1b      	ldr	r3, [r3, #32]
 80014d4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	4a6a      	ldr	r2, [pc, #424]	@ (8001688 <HAL_I2C_Init+0x274>)
 80014de:	4293      	cmp	r3, r2
 80014e0:	d802      	bhi.n	80014e8 <HAL_I2C_Init+0xd4>
 80014e2:	68bb      	ldr	r3, [r7, #8]
 80014e4:	3301      	adds	r3, #1
 80014e6:	e009      	b.n	80014fc <HAL_I2C_Init+0xe8>
 80014e8:	68bb      	ldr	r3, [r7, #8]
 80014ea:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80014ee:	fb02 f303 	mul.w	r3, r2, r3
 80014f2:	4a69      	ldr	r2, [pc, #420]	@ (8001698 <HAL_I2C_Init+0x284>)
 80014f4:	fba2 2303 	umull	r2, r3, r2, r3
 80014f8:	099b      	lsrs	r3, r3, #6
 80014fa:	3301      	adds	r3, #1
 80014fc:	687a      	ldr	r2, [r7, #4]
 80014fe:	6812      	ldr	r2, [r2, #0]
 8001500:	430b      	orrs	r3, r1
 8001502:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	69db      	ldr	r3, [r3, #28]
 800150a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800150e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	685b      	ldr	r3, [r3, #4]
 8001516:	495c      	ldr	r1, [pc, #368]	@ (8001688 <HAL_I2C_Init+0x274>)
 8001518:	428b      	cmp	r3, r1
 800151a:	d819      	bhi.n	8001550 <HAL_I2C_Init+0x13c>
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	1e59      	subs	r1, r3, #1
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	685b      	ldr	r3, [r3, #4]
 8001524:	005b      	lsls	r3, r3, #1
 8001526:	fbb1 f3f3 	udiv	r3, r1, r3
 800152a:	1c59      	adds	r1, r3, #1
 800152c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001530:	400b      	ands	r3, r1
 8001532:	2b00      	cmp	r3, #0
 8001534:	d00a      	beq.n	800154c <HAL_I2C_Init+0x138>
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	1e59      	subs	r1, r3, #1
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	685b      	ldr	r3, [r3, #4]
 800153e:	005b      	lsls	r3, r3, #1
 8001540:	fbb1 f3f3 	udiv	r3, r1, r3
 8001544:	3301      	adds	r3, #1
 8001546:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800154a:	e051      	b.n	80015f0 <HAL_I2C_Init+0x1dc>
 800154c:	2304      	movs	r3, #4
 800154e:	e04f      	b.n	80015f0 <HAL_I2C_Init+0x1dc>
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	689b      	ldr	r3, [r3, #8]
 8001554:	2b00      	cmp	r3, #0
 8001556:	d111      	bne.n	800157c <HAL_I2C_Init+0x168>
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	1e58      	subs	r0, r3, #1
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	6859      	ldr	r1, [r3, #4]
 8001560:	460b      	mov	r3, r1
 8001562:	005b      	lsls	r3, r3, #1
 8001564:	440b      	add	r3, r1
 8001566:	fbb0 f3f3 	udiv	r3, r0, r3
 800156a:	3301      	adds	r3, #1
 800156c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001570:	2b00      	cmp	r3, #0
 8001572:	bf0c      	ite	eq
 8001574:	2301      	moveq	r3, #1
 8001576:	2300      	movne	r3, #0
 8001578:	b2db      	uxtb	r3, r3
 800157a:	e012      	b.n	80015a2 <HAL_I2C_Init+0x18e>
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	1e58      	subs	r0, r3, #1
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	6859      	ldr	r1, [r3, #4]
 8001584:	460b      	mov	r3, r1
 8001586:	009b      	lsls	r3, r3, #2
 8001588:	440b      	add	r3, r1
 800158a:	0099      	lsls	r1, r3, #2
 800158c:	440b      	add	r3, r1
 800158e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001592:	3301      	adds	r3, #1
 8001594:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001598:	2b00      	cmp	r3, #0
 800159a:	bf0c      	ite	eq
 800159c:	2301      	moveq	r3, #1
 800159e:	2300      	movne	r3, #0
 80015a0:	b2db      	uxtb	r3, r3
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d001      	beq.n	80015aa <HAL_I2C_Init+0x196>
 80015a6:	2301      	movs	r3, #1
 80015a8:	e022      	b.n	80015f0 <HAL_I2C_Init+0x1dc>
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	689b      	ldr	r3, [r3, #8]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d10e      	bne.n	80015d0 <HAL_I2C_Init+0x1bc>
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	1e58      	subs	r0, r3, #1
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	6859      	ldr	r1, [r3, #4]
 80015ba:	460b      	mov	r3, r1
 80015bc:	005b      	lsls	r3, r3, #1
 80015be:	440b      	add	r3, r1
 80015c0:	fbb0 f3f3 	udiv	r3, r0, r3
 80015c4:	3301      	adds	r3, #1
 80015c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015ca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80015ce:	e00f      	b.n	80015f0 <HAL_I2C_Init+0x1dc>
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	1e58      	subs	r0, r3, #1
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	6859      	ldr	r1, [r3, #4]
 80015d8:	460b      	mov	r3, r1
 80015da:	009b      	lsls	r3, r3, #2
 80015dc:	440b      	add	r3, r1
 80015de:	0099      	lsls	r1, r3, #2
 80015e0:	440b      	add	r3, r1
 80015e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80015e6:	3301      	adds	r3, #1
 80015e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015ec:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80015f0:	6879      	ldr	r1, [r7, #4]
 80015f2:	6809      	ldr	r1, [r1, #0]
 80015f4:	4313      	orrs	r3, r2
 80015f6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	69da      	ldr	r2, [r3, #28]
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	6a1b      	ldr	r3, [r3, #32]
 800160a:	431a      	orrs	r2, r3
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	430a      	orrs	r2, r1
 8001612:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	689b      	ldr	r3, [r3, #8]
 800161a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800161e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001622:	687a      	ldr	r2, [r7, #4]
 8001624:	6911      	ldr	r1, [r2, #16]
 8001626:	687a      	ldr	r2, [r7, #4]
 8001628:	68d2      	ldr	r2, [r2, #12]
 800162a:	4311      	orrs	r1, r2
 800162c:	687a      	ldr	r2, [r7, #4]
 800162e:	6812      	ldr	r2, [r2, #0]
 8001630:	430b      	orrs	r3, r1
 8001632:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	68db      	ldr	r3, [r3, #12]
 800163a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	695a      	ldr	r2, [r3, #20]
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	699b      	ldr	r3, [r3, #24]
 8001646:	431a      	orrs	r2, r3
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	430a      	orrs	r2, r1
 800164e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	681a      	ldr	r2, [r3, #0]
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f042 0201 	orr.w	r2, r2, #1
 800165e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	2200      	movs	r2, #0
 8001664:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	2220      	movs	r2, #32
 800166a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	2200      	movs	r2, #0
 8001672:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	2200      	movs	r2, #0
 8001678:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800167c:	2300      	movs	r3, #0
}
 800167e:	4618      	mov	r0, r3
 8001680:	3710      	adds	r7, #16
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	000186a0 	.word	0x000186a0
 800168c:	001e847f 	.word	0x001e847f
 8001690:	003d08ff 	.word	0x003d08ff
 8001694:	431bde83 	.word	0x431bde83
 8001698:	10624dd3 	.word	0x10624dd3

0800169c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b088      	sub	sp, #32
 80016a0:	af02      	add	r7, sp, #8
 80016a2:	60f8      	str	r0, [r7, #12]
 80016a4:	4608      	mov	r0, r1
 80016a6:	4611      	mov	r1, r2
 80016a8:	461a      	mov	r2, r3
 80016aa:	4603      	mov	r3, r0
 80016ac:	817b      	strh	r3, [r7, #10]
 80016ae:	460b      	mov	r3, r1
 80016b0:	813b      	strh	r3, [r7, #8]
 80016b2:	4613      	mov	r3, r2
 80016b4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80016b6:	f7ff fbeb 	bl	8000e90 <HAL_GetTick>
 80016ba:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80016c2:	b2db      	uxtb	r3, r3
 80016c4:	2b20      	cmp	r3, #32
 80016c6:	f040 80d9 	bne.w	800187c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80016ca:	697b      	ldr	r3, [r7, #20]
 80016cc:	9300      	str	r3, [sp, #0]
 80016ce:	2319      	movs	r3, #25
 80016d0:	2201      	movs	r2, #1
 80016d2:	496d      	ldr	r1, [pc, #436]	@ (8001888 <HAL_I2C_Mem_Write+0x1ec>)
 80016d4:	68f8      	ldr	r0, [r7, #12]
 80016d6:	f000 fc8b 	bl	8001ff0 <I2C_WaitOnFlagUntilTimeout>
 80016da:	4603      	mov	r3, r0
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d001      	beq.n	80016e4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80016e0:	2302      	movs	r3, #2
 80016e2:	e0cc      	b.n	800187e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80016ea:	2b01      	cmp	r3, #1
 80016ec:	d101      	bne.n	80016f2 <HAL_I2C_Mem_Write+0x56>
 80016ee:	2302      	movs	r3, #2
 80016f0:	e0c5      	b.n	800187e <HAL_I2C_Mem_Write+0x1e2>
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	2201      	movs	r2, #1
 80016f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f003 0301 	and.w	r3, r3, #1
 8001704:	2b01      	cmp	r3, #1
 8001706:	d007      	beq.n	8001718 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	681a      	ldr	r2, [r3, #0]
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f042 0201 	orr.w	r2, r2, #1
 8001716:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	681a      	ldr	r2, [r3, #0]
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001726:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	2221      	movs	r2, #33	@ 0x21
 800172c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	2240      	movs	r2, #64	@ 0x40
 8001734:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	2200      	movs	r2, #0
 800173c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	6a3a      	ldr	r2, [r7, #32]
 8001742:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001748:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800174e:	b29a      	uxth	r2, r3
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	4a4d      	ldr	r2, [pc, #308]	@ (800188c <HAL_I2C_Mem_Write+0x1f0>)
 8001758:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800175a:	88f8      	ldrh	r0, [r7, #6]
 800175c:	893a      	ldrh	r2, [r7, #8]
 800175e:	8979      	ldrh	r1, [r7, #10]
 8001760:	697b      	ldr	r3, [r7, #20]
 8001762:	9301      	str	r3, [sp, #4]
 8001764:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001766:	9300      	str	r3, [sp, #0]
 8001768:	4603      	mov	r3, r0
 800176a:	68f8      	ldr	r0, [r7, #12]
 800176c:	f000 fac2 	bl	8001cf4 <I2C_RequestMemoryWrite>
 8001770:	4603      	mov	r3, r0
 8001772:	2b00      	cmp	r3, #0
 8001774:	d052      	beq.n	800181c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8001776:	2301      	movs	r3, #1
 8001778:	e081      	b.n	800187e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800177a:	697a      	ldr	r2, [r7, #20]
 800177c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800177e:	68f8      	ldr	r0, [r7, #12]
 8001780:	f000 fd50 	bl	8002224 <I2C_WaitOnTXEFlagUntilTimeout>
 8001784:	4603      	mov	r3, r0
 8001786:	2b00      	cmp	r3, #0
 8001788:	d00d      	beq.n	80017a6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800178e:	2b04      	cmp	r3, #4
 8001790:	d107      	bne.n	80017a2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	681a      	ldr	r2, [r3, #0]
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80017a0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80017a2:	2301      	movs	r3, #1
 80017a4:	e06b      	b.n	800187e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017aa:	781a      	ldrb	r2, [r3, #0]
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017b6:	1c5a      	adds	r2, r3, #1
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80017c0:	3b01      	subs	r3, #1
 80017c2:	b29a      	uxth	r2, r3
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80017cc:	b29b      	uxth	r3, r3
 80017ce:	3b01      	subs	r3, #1
 80017d0:	b29a      	uxth	r2, r3
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	695b      	ldr	r3, [r3, #20]
 80017dc:	f003 0304 	and.w	r3, r3, #4
 80017e0:	2b04      	cmp	r3, #4
 80017e2:	d11b      	bne.n	800181c <HAL_I2C_Mem_Write+0x180>
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d017      	beq.n	800181c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017f0:	781a      	ldrb	r2, [r3, #0]
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017fc:	1c5a      	adds	r2, r3, #1
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001806:	3b01      	subs	r3, #1
 8001808:	b29a      	uxth	r2, r3
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001812:	b29b      	uxth	r3, r3
 8001814:	3b01      	subs	r3, #1
 8001816:	b29a      	uxth	r2, r3
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001820:	2b00      	cmp	r3, #0
 8001822:	d1aa      	bne.n	800177a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001824:	697a      	ldr	r2, [r7, #20]
 8001826:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001828:	68f8      	ldr	r0, [r7, #12]
 800182a:	f000 fd43 	bl	80022b4 <I2C_WaitOnBTFFlagUntilTimeout>
 800182e:	4603      	mov	r3, r0
 8001830:	2b00      	cmp	r3, #0
 8001832:	d00d      	beq.n	8001850 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001838:	2b04      	cmp	r3, #4
 800183a:	d107      	bne.n	800184c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	681a      	ldr	r2, [r3, #0]
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800184a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800184c:	2301      	movs	r3, #1
 800184e:	e016      	b.n	800187e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	681a      	ldr	r2, [r3, #0]
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800185e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	2220      	movs	r2, #32
 8001864:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	2200      	movs	r2, #0
 800186c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	2200      	movs	r2, #0
 8001874:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001878:	2300      	movs	r3, #0
 800187a:	e000      	b.n	800187e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800187c:	2302      	movs	r3, #2
  }
}
 800187e:	4618      	mov	r0, r3
 8001880:	3718      	adds	r7, #24
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}
 8001886:	bf00      	nop
 8001888:	00100002 	.word	0x00100002
 800188c:	ffff0000 	.word	0xffff0000

08001890 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b08c      	sub	sp, #48	@ 0x30
 8001894:	af02      	add	r7, sp, #8
 8001896:	60f8      	str	r0, [r7, #12]
 8001898:	4608      	mov	r0, r1
 800189a:	4611      	mov	r1, r2
 800189c:	461a      	mov	r2, r3
 800189e:	4603      	mov	r3, r0
 80018a0:	817b      	strh	r3, [r7, #10]
 80018a2:	460b      	mov	r3, r1
 80018a4:	813b      	strh	r3, [r7, #8]
 80018a6:	4613      	mov	r3, r2
 80018a8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80018aa:	f7ff faf1 	bl	8000e90 <HAL_GetTick>
 80018ae:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80018b6:	b2db      	uxtb	r3, r3
 80018b8:	2b20      	cmp	r3, #32
 80018ba:	f040 8214 	bne.w	8001ce6 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80018be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018c0:	9300      	str	r3, [sp, #0]
 80018c2:	2319      	movs	r3, #25
 80018c4:	2201      	movs	r2, #1
 80018c6:	497b      	ldr	r1, [pc, #492]	@ (8001ab4 <HAL_I2C_Mem_Read+0x224>)
 80018c8:	68f8      	ldr	r0, [r7, #12]
 80018ca:	f000 fb91 	bl	8001ff0 <I2C_WaitOnFlagUntilTimeout>
 80018ce:	4603      	mov	r3, r0
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d001      	beq.n	80018d8 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80018d4:	2302      	movs	r3, #2
 80018d6:	e207      	b.n	8001ce8 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80018de:	2b01      	cmp	r3, #1
 80018e0:	d101      	bne.n	80018e6 <HAL_I2C_Mem_Read+0x56>
 80018e2:	2302      	movs	r3, #2
 80018e4:	e200      	b.n	8001ce8 <HAL_I2C_Mem_Read+0x458>
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	2201      	movs	r2, #1
 80018ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f003 0301 	and.w	r3, r3, #1
 80018f8:	2b01      	cmp	r3, #1
 80018fa:	d007      	beq.n	800190c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	681a      	ldr	r2, [r3, #0]
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f042 0201 	orr.w	r2, r2, #1
 800190a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	681a      	ldr	r2, [r3, #0]
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800191a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	2222      	movs	r2, #34	@ 0x22
 8001920:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	2240      	movs	r2, #64	@ 0x40
 8001928:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	2200      	movs	r2, #0
 8001930:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001936:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 800193c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001942:	b29a      	uxth	r2, r3
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	4a5b      	ldr	r2, [pc, #364]	@ (8001ab8 <HAL_I2C_Mem_Read+0x228>)
 800194c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800194e:	88f8      	ldrh	r0, [r7, #6]
 8001950:	893a      	ldrh	r2, [r7, #8]
 8001952:	8979      	ldrh	r1, [r7, #10]
 8001954:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001956:	9301      	str	r3, [sp, #4]
 8001958:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800195a:	9300      	str	r3, [sp, #0]
 800195c:	4603      	mov	r3, r0
 800195e:	68f8      	ldr	r0, [r7, #12]
 8001960:	f000 fa5e 	bl	8001e20 <I2C_RequestMemoryRead>
 8001964:	4603      	mov	r3, r0
 8001966:	2b00      	cmp	r3, #0
 8001968:	d001      	beq.n	800196e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800196a:	2301      	movs	r3, #1
 800196c:	e1bc      	b.n	8001ce8 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001972:	2b00      	cmp	r3, #0
 8001974:	d113      	bne.n	800199e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001976:	2300      	movs	r3, #0
 8001978:	623b      	str	r3, [r7, #32]
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	695b      	ldr	r3, [r3, #20]
 8001980:	623b      	str	r3, [r7, #32]
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	699b      	ldr	r3, [r3, #24]
 8001988:	623b      	str	r3, [r7, #32]
 800198a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	681a      	ldr	r2, [r3, #0]
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800199a:	601a      	str	r2, [r3, #0]
 800199c:	e190      	b.n	8001cc0 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80019a2:	2b01      	cmp	r3, #1
 80019a4:	d11b      	bne.n	80019de <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	681a      	ldr	r2, [r3, #0]
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80019b4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80019b6:	2300      	movs	r3, #0
 80019b8:	61fb      	str	r3, [r7, #28]
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	695b      	ldr	r3, [r3, #20]
 80019c0:	61fb      	str	r3, [r7, #28]
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	699b      	ldr	r3, [r3, #24]
 80019c8:	61fb      	str	r3, [r7, #28]
 80019ca:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	681a      	ldr	r2, [r3, #0]
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80019da:	601a      	str	r2, [r3, #0]
 80019dc:	e170      	b.n	8001cc0 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80019e2:	2b02      	cmp	r3, #2
 80019e4:	d11b      	bne.n	8001a1e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	681a      	ldr	r2, [r3, #0]
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80019f4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	681a      	ldr	r2, [r3, #0]
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001a04:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001a06:	2300      	movs	r3, #0
 8001a08:	61bb      	str	r3, [r7, #24]
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	695b      	ldr	r3, [r3, #20]
 8001a10:	61bb      	str	r3, [r7, #24]
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	699b      	ldr	r3, [r3, #24]
 8001a18:	61bb      	str	r3, [r7, #24]
 8001a1a:	69bb      	ldr	r3, [r7, #24]
 8001a1c:	e150      	b.n	8001cc0 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001a1e:	2300      	movs	r3, #0
 8001a20:	617b      	str	r3, [r7, #20]
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	695b      	ldr	r3, [r3, #20]
 8001a28:	617b      	str	r3, [r7, #20]
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	699b      	ldr	r3, [r3, #24]
 8001a30:	617b      	str	r3, [r7, #20]
 8001a32:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8001a34:	e144      	b.n	8001cc0 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a3a:	2b03      	cmp	r3, #3
 8001a3c:	f200 80f1 	bhi.w	8001c22 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a44:	2b01      	cmp	r3, #1
 8001a46:	d123      	bne.n	8001a90 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a48:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001a4a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8001a4c:	68f8      	ldr	r0, [r7, #12]
 8001a4e:	f000 fc79 	bl	8002344 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001a52:	4603      	mov	r3, r0
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d001      	beq.n	8001a5c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8001a58:	2301      	movs	r3, #1
 8001a5a:	e145      	b.n	8001ce8 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	691a      	ldr	r2, [r3, #16]
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a66:	b2d2      	uxtb	r2, r2
 8001a68:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a6e:	1c5a      	adds	r2, r3, #1
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a78:	3b01      	subs	r3, #1
 8001a7a:	b29a      	uxth	r2, r3
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a84:	b29b      	uxth	r3, r3
 8001a86:	3b01      	subs	r3, #1
 8001a88:	b29a      	uxth	r2, r3
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001a8e:	e117      	b.n	8001cc0 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a94:	2b02      	cmp	r3, #2
 8001a96:	d14e      	bne.n	8001b36 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001a98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a9a:	9300      	str	r3, [sp, #0]
 8001a9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	4906      	ldr	r1, [pc, #24]	@ (8001abc <HAL_I2C_Mem_Read+0x22c>)
 8001aa2:	68f8      	ldr	r0, [r7, #12]
 8001aa4:	f000 faa4 	bl	8001ff0 <I2C_WaitOnFlagUntilTimeout>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d008      	beq.n	8001ac0 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8001aae:	2301      	movs	r3, #1
 8001ab0:	e11a      	b.n	8001ce8 <HAL_I2C_Mem_Read+0x458>
 8001ab2:	bf00      	nop
 8001ab4:	00100002 	.word	0x00100002
 8001ab8:	ffff0000 	.word	0xffff0000
 8001abc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	681a      	ldr	r2, [r3, #0]
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001ace:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	691a      	ldr	r2, [r3, #16]
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ada:	b2d2      	uxtb	r2, r2
 8001adc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ae2:	1c5a      	adds	r2, r3, #1
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001aec:	3b01      	subs	r3, #1
 8001aee:	b29a      	uxth	r2, r3
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001af8:	b29b      	uxth	r3, r3
 8001afa:	3b01      	subs	r3, #1
 8001afc:	b29a      	uxth	r2, r3
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	691a      	ldr	r2, [r3, #16]
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b0c:	b2d2      	uxtb	r2, r2
 8001b0e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b14:	1c5a      	adds	r2, r3, #1
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b1e:	3b01      	subs	r3, #1
 8001b20:	b29a      	uxth	r2, r3
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b2a:	b29b      	uxth	r3, r3
 8001b2c:	3b01      	subs	r3, #1
 8001b2e:	b29a      	uxth	r2, r3
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001b34:	e0c4      	b.n	8001cc0 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001b36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b38:	9300      	str	r3, [sp, #0]
 8001b3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	496c      	ldr	r1, [pc, #432]	@ (8001cf0 <HAL_I2C_Mem_Read+0x460>)
 8001b40:	68f8      	ldr	r0, [r7, #12]
 8001b42:	f000 fa55 	bl	8001ff0 <I2C_WaitOnFlagUntilTimeout>
 8001b46:	4603      	mov	r3, r0
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d001      	beq.n	8001b50 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	e0cb      	b.n	8001ce8 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	681a      	ldr	r2, [r3, #0]
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001b5e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	691a      	ldr	r2, [r3, #16]
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b6a:	b2d2      	uxtb	r2, r2
 8001b6c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b72:	1c5a      	adds	r2, r3, #1
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b7c:	3b01      	subs	r3, #1
 8001b7e:	b29a      	uxth	r2, r3
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b88:	b29b      	uxth	r3, r3
 8001b8a:	3b01      	subs	r3, #1
 8001b8c:	b29a      	uxth	r2, r3
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001b92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b94:	9300      	str	r3, [sp, #0]
 8001b96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001b98:	2200      	movs	r2, #0
 8001b9a:	4955      	ldr	r1, [pc, #340]	@ (8001cf0 <HAL_I2C_Mem_Read+0x460>)
 8001b9c:	68f8      	ldr	r0, [r7, #12]
 8001b9e:	f000 fa27 	bl	8001ff0 <I2C_WaitOnFlagUntilTimeout>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d001      	beq.n	8001bac <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8001ba8:	2301      	movs	r3, #1
 8001baa:	e09d      	b.n	8001ce8 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	681a      	ldr	r2, [r3, #0]
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001bba:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	691a      	ldr	r2, [r3, #16]
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bc6:	b2d2      	uxtb	r2, r2
 8001bc8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bce:	1c5a      	adds	r2, r3, #1
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001bd8:	3b01      	subs	r3, #1
 8001bda:	b29a      	uxth	r2, r3
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001be4:	b29b      	uxth	r3, r3
 8001be6:	3b01      	subs	r3, #1
 8001be8:	b29a      	uxth	r2, r3
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	691a      	ldr	r2, [r3, #16]
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bf8:	b2d2      	uxtb	r2, r2
 8001bfa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c00:	1c5a      	adds	r2, r3, #1
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c0a:	3b01      	subs	r3, #1
 8001c0c:	b29a      	uxth	r2, r3
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c16:	b29b      	uxth	r3, r3
 8001c18:	3b01      	subs	r3, #1
 8001c1a:	b29a      	uxth	r2, r3
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001c20:	e04e      	b.n	8001cc0 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c22:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001c24:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8001c26:	68f8      	ldr	r0, [r7, #12]
 8001c28:	f000 fb8c 	bl	8002344 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d001      	beq.n	8001c36 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8001c32:	2301      	movs	r3, #1
 8001c34:	e058      	b.n	8001ce8 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	691a      	ldr	r2, [r3, #16]
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c40:	b2d2      	uxtb	r2, r2
 8001c42:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c48:	1c5a      	adds	r2, r3, #1
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c52:	3b01      	subs	r3, #1
 8001c54:	b29a      	uxth	r2, r3
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c5e:	b29b      	uxth	r3, r3
 8001c60:	3b01      	subs	r3, #1
 8001c62:	b29a      	uxth	r2, r3
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	695b      	ldr	r3, [r3, #20]
 8001c6e:	f003 0304 	and.w	r3, r3, #4
 8001c72:	2b04      	cmp	r3, #4
 8001c74:	d124      	bne.n	8001cc0 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c7a:	2b03      	cmp	r3, #3
 8001c7c:	d107      	bne.n	8001c8e <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	681a      	ldr	r2, [r3, #0]
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001c8c:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	691a      	ldr	r2, [r3, #16]
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c98:	b2d2      	uxtb	r2, r2
 8001c9a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ca0:	1c5a      	adds	r2, r3, #1
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001caa:	3b01      	subs	r3, #1
 8001cac:	b29a      	uxth	r2, r3
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001cb6:	b29b      	uxth	r3, r3
 8001cb8:	3b01      	subs	r3, #1
 8001cba:	b29a      	uxth	r2, r3
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	f47f aeb6 	bne.w	8001a36 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	2220      	movs	r2, #32
 8001cce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	2200      	movs	r2, #0
 8001cde:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	e000      	b.n	8001ce8 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8001ce6:	2302      	movs	r3, #2
  }
}
 8001ce8:	4618      	mov	r0, r3
 8001cea:	3728      	adds	r7, #40	@ 0x28
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bd80      	pop	{r7, pc}
 8001cf0:	00010004 	.word	0x00010004

08001cf4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b088      	sub	sp, #32
 8001cf8:	af02      	add	r7, sp, #8
 8001cfa:	60f8      	str	r0, [r7, #12]
 8001cfc:	4608      	mov	r0, r1
 8001cfe:	4611      	mov	r1, r2
 8001d00:	461a      	mov	r2, r3
 8001d02:	4603      	mov	r3, r0
 8001d04:	817b      	strh	r3, [r7, #10]
 8001d06:	460b      	mov	r3, r1
 8001d08:	813b      	strh	r3, [r7, #8]
 8001d0a:	4613      	mov	r3, r2
 8001d0c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	681a      	ldr	r2, [r3, #0]
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001d1c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001d1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d20:	9300      	str	r3, [sp, #0]
 8001d22:	6a3b      	ldr	r3, [r7, #32]
 8001d24:	2200      	movs	r2, #0
 8001d26:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001d2a:	68f8      	ldr	r0, [r7, #12]
 8001d2c:	f000 f960 	bl	8001ff0 <I2C_WaitOnFlagUntilTimeout>
 8001d30:	4603      	mov	r3, r0
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d00d      	beq.n	8001d52 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d40:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001d44:	d103      	bne.n	8001d4e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001d4c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8001d4e:	2303      	movs	r3, #3
 8001d50:	e05f      	b.n	8001e12 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001d52:	897b      	ldrh	r3, [r7, #10]
 8001d54:	b2db      	uxtb	r3, r3
 8001d56:	461a      	mov	r2, r3
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001d60:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001d62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d64:	6a3a      	ldr	r2, [r7, #32]
 8001d66:	492d      	ldr	r1, [pc, #180]	@ (8001e1c <I2C_RequestMemoryWrite+0x128>)
 8001d68:	68f8      	ldr	r0, [r7, #12]
 8001d6a:	f000 f9bb 	bl	80020e4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d001      	beq.n	8001d78 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8001d74:	2301      	movs	r3, #1
 8001d76:	e04c      	b.n	8001e12 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d78:	2300      	movs	r3, #0
 8001d7a:	617b      	str	r3, [r7, #20]
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	695b      	ldr	r3, [r3, #20]
 8001d82:	617b      	str	r3, [r7, #20]
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	699b      	ldr	r3, [r3, #24]
 8001d8a:	617b      	str	r3, [r7, #20]
 8001d8c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001d8e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001d90:	6a39      	ldr	r1, [r7, #32]
 8001d92:	68f8      	ldr	r0, [r7, #12]
 8001d94:	f000 fa46 	bl	8002224 <I2C_WaitOnTXEFlagUntilTimeout>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d00d      	beq.n	8001dba <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001da2:	2b04      	cmp	r3, #4
 8001da4:	d107      	bne.n	8001db6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	681a      	ldr	r2, [r3, #0]
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001db4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001db6:	2301      	movs	r3, #1
 8001db8:	e02b      	b.n	8001e12 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001dba:	88fb      	ldrh	r3, [r7, #6]
 8001dbc:	2b01      	cmp	r3, #1
 8001dbe:	d105      	bne.n	8001dcc <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001dc0:	893b      	ldrh	r3, [r7, #8]
 8001dc2:	b2da      	uxtb	r2, r3
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	611a      	str	r2, [r3, #16]
 8001dca:	e021      	b.n	8001e10 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001dcc:	893b      	ldrh	r3, [r7, #8]
 8001dce:	0a1b      	lsrs	r3, r3, #8
 8001dd0:	b29b      	uxth	r3, r3
 8001dd2:	b2da      	uxtb	r2, r3
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001dda:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001ddc:	6a39      	ldr	r1, [r7, #32]
 8001dde:	68f8      	ldr	r0, [r7, #12]
 8001de0:	f000 fa20 	bl	8002224 <I2C_WaitOnTXEFlagUntilTimeout>
 8001de4:	4603      	mov	r3, r0
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d00d      	beq.n	8001e06 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dee:	2b04      	cmp	r3, #4
 8001df0:	d107      	bne.n	8001e02 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	681a      	ldr	r2, [r3, #0]
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001e00:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001e02:	2301      	movs	r3, #1
 8001e04:	e005      	b.n	8001e12 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001e06:	893b      	ldrh	r3, [r7, #8]
 8001e08:	b2da      	uxtb	r2, r3
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8001e10:	2300      	movs	r3, #0
}
 8001e12:	4618      	mov	r0, r3
 8001e14:	3718      	adds	r7, #24
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}
 8001e1a:	bf00      	nop
 8001e1c:	00010002 	.word	0x00010002

08001e20 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b088      	sub	sp, #32
 8001e24:	af02      	add	r7, sp, #8
 8001e26:	60f8      	str	r0, [r7, #12]
 8001e28:	4608      	mov	r0, r1
 8001e2a:	4611      	mov	r1, r2
 8001e2c:	461a      	mov	r2, r3
 8001e2e:	4603      	mov	r3, r0
 8001e30:	817b      	strh	r3, [r7, #10]
 8001e32:	460b      	mov	r3, r1
 8001e34:	813b      	strh	r3, [r7, #8]
 8001e36:	4613      	mov	r3, r2
 8001e38:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	681a      	ldr	r2, [r3, #0]
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001e48:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	681a      	ldr	r2, [r3, #0]
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001e58:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001e5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e5c:	9300      	str	r3, [sp, #0]
 8001e5e:	6a3b      	ldr	r3, [r7, #32]
 8001e60:	2200      	movs	r2, #0
 8001e62:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001e66:	68f8      	ldr	r0, [r7, #12]
 8001e68:	f000 f8c2 	bl	8001ff0 <I2C_WaitOnFlagUntilTimeout>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d00d      	beq.n	8001e8e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e7c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001e80:	d103      	bne.n	8001e8a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001e88:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8001e8a:	2303      	movs	r3, #3
 8001e8c:	e0aa      	b.n	8001fe4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001e8e:	897b      	ldrh	r3, [r7, #10]
 8001e90:	b2db      	uxtb	r3, r3
 8001e92:	461a      	mov	r2, r3
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001e9c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001e9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ea0:	6a3a      	ldr	r2, [r7, #32]
 8001ea2:	4952      	ldr	r1, [pc, #328]	@ (8001fec <I2C_RequestMemoryRead+0x1cc>)
 8001ea4:	68f8      	ldr	r0, [r7, #12]
 8001ea6:	f000 f91d 	bl	80020e4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d001      	beq.n	8001eb4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	e097      	b.n	8001fe4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	617b      	str	r3, [r7, #20]
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	695b      	ldr	r3, [r3, #20]
 8001ebe:	617b      	str	r3, [r7, #20]
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	699b      	ldr	r3, [r3, #24]
 8001ec6:	617b      	str	r3, [r7, #20]
 8001ec8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001eca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001ecc:	6a39      	ldr	r1, [r7, #32]
 8001ece:	68f8      	ldr	r0, [r7, #12]
 8001ed0:	f000 f9a8 	bl	8002224 <I2C_WaitOnTXEFlagUntilTimeout>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d00d      	beq.n	8001ef6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ede:	2b04      	cmp	r3, #4
 8001ee0:	d107      	bne.n	8001ef2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	681a      	ldr	r2, [r3, #0]
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001ef0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	e076      	b.n	8001fe4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001ef6:	88fb      	ldrh	r3, [r7, #6]
 8001ef8:	2b01      	cmp	r3, #1
 8001efa:	d105      	bne.n	8001f08 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001efc:	893b      	ldrh	r3, [r7, #8]
 8001efe:	b2da      	uxtb	r2, r3
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	611a      	str	r2, [r3, #16]
 8001f06:	e021      	b.n	8001f4c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001f08:	893b      	ldrh	r3, [r7, #8]
 8001f0a:	0a1b      	lsrs	r3, r3, #8
 8001f0c:	b29b      	uxth	r3, r3
 8001f0e:	b2da      	uxtb	r2, r3
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001f16:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f18:	6a39      	ldr	r1, [r7, #32]
 8001f1a:	68f8      	ldr	r0, [r7, #12]
 8001f1c:	f000 f982 	bl	8002224 <I2C_WaitOnTXEFlagUntilTimeout>
 8001f20:	4603      	mov	r3, r0
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d00d      	beq.n	8001f42 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f2a:	2b04      	cmp	r3, #4
 8001f2c:	d107      	bne.n	8001f3e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	681a      	ldr	r2, [r3, #0]
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001f3c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001f3e:	2301      	movs	r3, #1
 8001f40:	e050      	b.n	8001fe4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001f42:	893b      	ldrh	r3, [r7, #8]
 8001f44:	b2da      	uxtb	r2, r3
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001f4c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f4e:	6a39      	ldr	r1, [r7, #32]
 8001f50:	68f8      	ldr	r0, [r7, #12]
 8001f52:	f000 f967 	bl	8002224 <I2C_WaitOnTXEFlagUntilTimeout>
 8001f56:	4603      	mov	r3, r0
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d00d      	beq.n	8001f78 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f60:	2b04      	cmp	r3, #4
 8001f62:	d107      	bne.n	8001f74 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	681a      	ldr	r2, [r3, #0]
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001f72:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001f74:	2301      	movs	r3, #1
 8001f76:	e035      	b.n	8001fe4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	681a      	ldr	r2, [r3, #0]
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001f86:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001f88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f8a:	9300      	str	r3, [sp, #0]
 8001f8c:	6a3b      	ldr	r3, [r7, #32]
 8001f8e:	2200      	movs	r2, #0
 8001f90:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001f94:	68f8      	ldr	r0, [r7, #12]
 8001f96:	f000 f82b 	bl	8001ff0 <I2C_WaitOnFlagUntilTimeout>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d00d      	beq.n	8001fbc <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001faa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001fae:	d103      	bne.n	8001fb8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001fb6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8001fb8:	2303      	movs	r3, #3
 8001fba:	e013      	b.n	8001fe4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8001fbc:	897b      	ldrh	r3, [r7, #10]
 8001fbe:	b2db      	uxtb	r3, r3
 8001fc0:	f043 0301 	orr.w	r3, r3, #1
 8001fc4:	b2da      	uxtb	r2, r3
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001fcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fce:	6a3a      	ldr	r2, [r7, #32]
 8001fd0:	4906      	ldr	r1, [pc, #24]	@ (8001fec <I2C_RequestMemoryRead+0x1cc>)
 8001fd2:	68f8      	ldr	r0, [r7, #12]
 8001fd4:	f000 f886 	bl	80020e4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d001      	beq.n	8001fe2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8001fde:	2301      	movs	r3, #1
 8001fe0:	e000      	b.n	8001fe4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8001fe2:	2300      	movs	r3, #0
}
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	3718      	adds	r7, #24
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bd80      	pop	{r7, pc}
 8001fec:	00010002 	.word	0x00010002

08001ff0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b084      	sub	sp, #16
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	60f8      	str	r0, [r7, #12]
 8001ff8:	60b9      	str	r1, [r7, #8]
 8001ffa:	603b      	str	r3, [r7, #0]
 8001ffc:	4613      	mov	r3, r2
 8001ffe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002000:	e048      	b.n	8002094 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002008:	d044      	beq.n	8002094 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800200a:	f7fe ff41 	bl	8000e90 <HAL_GetTick>
 800200e:	4602      	mov	r2, r0
 8002010:	69bb      	ldr	r3, [r7, #24]
 8002012:	1ad3      	subs	r3, r2, r3
 8002014:	683a      	ldr	r2, [r7, #0]
 8002016:	429a      	cmp	r2, r3
 8002018:	d302      	bcc.n	8002020 <I2C_WaitOnFlagUntilTimeout+0x30>
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	2b00      	cmp	r3, #0
 800201e:	d139      	bne.n	8002094 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002020:	68bb      	ldr	r3, [r7, #8]
 8002022:	0c1b      	lsrs	r3, r3, #16
 8002024:	b2db      	uxtb	r3, r3
 8002026:	2b01      	cmp	r3, #1
 8002028:	d10d      	bne.n	8002046 <I2C_WaitOnFlagUntilTimeout+0x56>
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	695b      	ldr	r3, [r3, #20]
 8002030:	43da      	mvns	r2, r3
 8002032:	68bb      	ldr	r3, [r7, #8]
 8002034:	4013      	ands	r3, r2
 8002036:	b29b      	uxth	r3, r3
 8002038:	2b00      	cmp	r3, #0
 800203a:	bf0c      	ite	eq
 800203c:	2301      	moveq	r3, #1
 800203e:	2300      	movne	r3, #0
 8002040:	b2db      	uxtb	r3, r3
 8002042:	461a      	mov	r2, r3
 8002044:	e00c      	b.n	8002060 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	699b      	ldr	r3, [r3, #24]
 800204c:	43da      	mvns	r2, r3
 800204e:	68bb      	ldr	r3, [r7, #8]
 8002050:	4013      	ands	r3, r2
 8002052:	b29b      	uxth	r3, r3
 8002054:	2b00      	cmp	r3, #0
 8002056:	bf0c      	ite	eq
 8002058:	2301      	moveq	r3, #1
 800205a:	2300      	movne	r3, #0
 800205c:	b2db      	uxtb	r3, r3
 800205e:	461a      	mov	r2, r3
 8002060:	79fb      	ldrb	r3, [r7, #7]
 8002062:	429a      	cmp	r2, r3
 8002064:	d116      	bne.n	8002094 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	2200      	movs	r2, #0
 800206a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	2220      	movs	r2, #32
 8002070:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	2200      	movs	r2, #0
 8002078:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002080:	f043 0220 	orr.w	r2, r3, #32
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	2200      	movs	r2, #0
 800208c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002090:	2301      	movs	r3, #1
 8002092:	e023      	b.n	80020dc <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002094:	68bb      	ldr	r3, [r7, #8]
 8002096:	0c1b      	lsrs	r3, r3, #16
 8002098:	b2db      	uxtb	r3, r3
 800209a:	2b01      	cmp	r3, #1
 800209c:	d10d      	bne.n	80020ba <I2C_WaitOnFlagUntilTimeout+0xca>
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	695b      	ldr	r3, [r3, #20]
 80020a4:	43da      	mvns	r2, r3
 80020a6:	68bb      	ldr	r3, [r7, #8]
 80020a8:	4013      	ands	r3, r2
 80020aa:	b29b      	uxth	r3, r3
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	bf0c      	ite	eq
 80020b0:	2301      	moveq	r3, #1
 80020b2:	2300      	movne	r3, #0
 80020b4:	b2db      	uxtb	r3, r3
 80020b6:	461a      	mov	r2, r3
 80020b8:	e00c      	b.n	80020d4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	699b      	ldr	r3, [r3, #24]
 80020c0:	43da      	mvns	r2, r3
 80020c2:	68bb      	ldr	r3, [r7, #8]
 80020c4:	4013      	ands	r3, r2
 80020c6:	b29b      	uxth	r3, r3
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	bf0c      	ite	eq
 80020cc:	2301      	moveq	r3, #1
 80020ce:	2300      	movne	r3, #0
 80020d0:	b2db      	uxtb	r3, r3
 80020d2:	461a      	mov	r2, r3
 80020d4:	79fb      	ldrb	r3, [r7, #7]
 80020d6:	429a      	cmp	r2, r3
 80020d8:	d093      	beq.n	8002002 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80020da:	2300      	movs	r3, #0
}
 80020dc:	4618      	mov	r0, r3
 80020de:	3710      	adds	r7, #16
 80020e0:	46bd      	mov	sp, r7
 80020e2:	bd80      	pop	{r7, pc}

080020e4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b084      	sub	sp, #16
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	60f8      	str	r0, [r7, #12]
 80020ec:	60b9      	str	r1, [r7, #8]
 80020ee:	607a      	str	r2, [r7, #4]
 80020f0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80020f2:	e071      	b.n	80021d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	695b      	ldr	r3, [r3, #20]
 80020fa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80020fe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002102:	d123      	bne.n	800214c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	681a      	ldr	r2, [r3, #0]
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002112:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800211c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	2200      	movs	r2, #0
 8002122:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	2220      	movs	r2, #32
 8002128:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	2200      	movs	r2, #0
 8002130:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002138:	f043 0204 	orr.w	r2, r3, #4
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	2200      	movs	r2, #0
 8002144:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002148:	2301      	movs	r3, #1
 800214a:	e067      	b.n	800221c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002152:	d041      	beq.n	80021d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002154:	f7fe fe9c 	bl	8000e90 <HAL_GetTick>
 8002158:	4602      	mov	r2, r0
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	1ad3      	subs	r3, r2, r3
 800215e:	687a      	ldr	r2, [r7, #4]
 8002160:	429a      	cmp	r2, r3
 8002162:	d302      	bcc.n	800216a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d136      	bne.n	80021d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800216a:	68bb      	ldr	r3, [r7, #8]
 800216c:	0c1b      	lsrs	r3, r3, #16
 800216e:	b2db      	uxtb	r3, r3
 8002170:	2b01      	cmp	r3, #1
 8002172:	d10c      	bne.n	800218e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	695b      	ldr	r3, [r3, #20]
 800217a:	43da      	mvns	r2, r3
 800217c:	68bb      	ldr	r3, [r7, #8]
 800217e:	4013      	ands	r3, r2
 8002180:	b29b      	uxth	r3, r3
 8002182:	2b00      	cmp	r3, #0
 8002184:	bf14      	ite	ne
 8002186:	2301      	movne	r3, #1
 8002188:	2300      	moveq	r3, #0
 800218a:	b2db      	uxtb	r3, r3
 800218c:	e00b      	b.n	80021a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	699b      	ldr	r3, [r3, #24]
 8002194:	43da      	mvns	r2, r3
 8002196:	68bb      	ldr	r3, [r7, #8]
 8002198:	4013      	ands	r3, r2
 800219a:	b29b      	uxth	r3, r3
 800219c:	2b00      	cmp	r3, #0
 800219e:	bf14      	ite	ne
 80021a0:	2301      	movne	r3, #1
 80021a2:	2300      	moveq	r3, #0
 80021a4:	b2db      	uxtb	r3, r3
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d016      	beq.n	80021d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	2200      	movs	r2, #0
 80021ae:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	2220      	movs	r2, #32
 80021b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	2200      	movs	r2, #0
 80021bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021c4:	f043 0220 	orr.w	r2, r3, #32
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	2200      	movs	r2, #0
 80021d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80021d4:	2301      	movs	r3, #1
 80021d6:	e021      	b.n	800221c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80021d8:	68bb      	ldr	r3, [r7, #8]
 80021da:	0c1b      	lsrs	r3, r3, #16
 80021dc:	b2db      	uxtb	r3, r3
 80021de:	2b01      	cmp	r3, #1
 80021e0:	d10c      	bne.n	80021fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	695b      	ldr	r3, [r3, #20]
 80021e8:	43da      	mvns	r2, r3
 80021ea:	68bb      	ldr	r3, [r7, #8]
 80021ec:	4013      	ands	r3, r2
 80021ee:	b29b      	uxth	r3, r3
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	bf14      	ite	ne
 80021f4:	2301      	movne	r3, #1
 80021f6:	2300      	moveq	r3, #0
 80021f8:	b2db      	uxtb	r3, r3
 80021fa:	e00b      	b.n	8002214 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	699b      	ldr	r3, [r3, #24]
 8002202:	43da      	mvns	r2, r3
 8002204:	68bb      	ldr	r3, [r7, #8]
 8002206:	4013      	ands	r3, r2
 8002208:	b29b      	uxth	r3, r3
 800220a:	2b00      	cmp	r3, #0
 800220c:	bf14      	ite	ne
 800220e:	2301      	movne	r3, #1
 8002210:	2300      	moveq	r3, #0
 8002212:	b2db      	uxtb	r3, r3
 8002214:	2b00      	cmp	r3, #0
 8002216:	f47f af6d 	bne.w	80020f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800221a:	2300      	movs	r3, #0
}
 800221c:	4618      	mov	r0, r3
 800221e:	3710      	adds	r7, #16
 8002220:	46bd      	mov	sp, r7
 8002222:	bd80      	pop	{r7, pc}

08002224 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b084      	sub	sp, #16
 8002228:	af00      	add	r7, sp, #0
 800222a:	60f8      	str	r0, [r7, #12]
 800222c:	60b9      	str	r1, [r7, #8]
 800222e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002230:	e034      	b.n	800229c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002232:	68f8      	ldr	r0, [r7, #12]
 8002234:	f000 f8e3 	bl	80023fe <I2C_IsAcknowledgeFailed>
 8002238:	4603      	mov	r3, r0
 800223a:	2b00      	cmp	r3, #0
 800223c:	d001      	beq.n	8002242 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800223e:	2301      	movs	r3, #1
 8002240:	e034      	b.n	80022ac <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002242:	68bb      	ldr	r3, [r7, #8]
 8002244:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002248:	d028      	beq.n	800229c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800224a:	f7fe fe21 	bl	8000e90 <HAL_GetTick>
 800224e:	4602      	mov	r2, r0
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	1ad3      	subs	r3, r2, r3
 8002254:	68ba      	ldr	r2, [r7, #8]
 8002256:	429a      	cmp	r2, r3
 8002258:	d302      	bcc.n	8002260 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800225a:	68bb      	ldr	r3, [r7, #8]
 800225c:	2b00      	cmp	r3, #0
 800225e:	d11d      	bne.n	800229c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	695b      	ldr	r3, [r3, #20]
 8002266:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800226a:	2b80      	cmp	r3, #128	@ 0x80
 800226c:	d016      	beq.n	800229c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	2200      	movs	r2, #0
 8002272:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	2220      	movs	r2, #32
 8002278:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	2200      	movs	r2, #0
 8002280:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002288:	f043 0220 	orr.w	r2, r3, #32
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	2200      	movs	r2, #0
 8002294:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002298:	2301      	movs	r3, #1
 800229a:	e007      	b.n	80022ac <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	695b      	ldr	r3, [r3, #20]
 80022a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80022a6:	2b80      	cmp	r3, #128	@ 0x80
 80022a8:	d1c3      	bne.n	8002232 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80022aa:	2300      	movs	r3, #0
}
 80022ac:	4618      	mov	r0, r3
 80022ae:	3710      	adds	r7, #16
 80022b0:	46bd      	mov	sp, r7
 80022b2:	bd80      	pop	{r7, pc}

080022b4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b084      	sub	sp, #16
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	60f8      	str	r0, [r7, #12]
 80022bc:	60b9      	str	r1, [r7, #8]
 80022be:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80022c0:	e034      	b.n	800232c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80022c2:	68f8      	ldr	r0, [r7, #12]
 80022c4:	f000 f89b 	bl	80023fe <I2C_IsAcknowledgeFailed>
 80022c8:	4603      	mov	r3, r0
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d001      	beq.n	80022d2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80022ce:	2301      	movs	r3, #1
 80022d0:	e034      	b.n	800233c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80022d2:	68bb      	ldr	r3, [r7, #8]
 80022d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022d8:	d028      	beq.n	800232c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80022da:	f7fe fdd9 	bl	8000e90 <HAL_GetTick>
 80022de:	4602      	mov	r2, r0
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	1ad3      	subs	r3, r2, r3
 80022e4:	68ba      	ldr	r2, [r7, #8]
 80022e6:	429a      	cmp	r2, r3
 80022e8:	d302      	bcc.n	80022f0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80022ea:	68bb      	ldr	r3, [r7, #8]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d11d      	bne.n	800232c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	695b      	ldr	r3, [r3, #20]
 80022f6:	f003 0304 	and.w	r3, r3, #4
 80022fa:	2b04      	cmp	r3, #4
 80022fc:	d016      	beq.n	800232c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	2200      	movs	r2, #0
 8002302:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	2220      	movs	r2, #32
 8002308:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	2200      	movs	r2, #0
 8002310:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002318:	f043 0220 	orr.w	r2, r3, #32
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	2200      	movs	r2, #0
 8002324:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002328:	2301      	movs	r3, #1
 800232a:	e007      	b.n	800233c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	695b      	ldr	r3, [r3, #20]
 8002332:	f003 0304 	and.w	r3, r3, #4
 8002336:	2b04      	cmp	r3, #4
 8002338:	d1c3      	bne.n	80022c2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800233a:	2300      	movs	r3, #0
}
 800233c:	4618      	mov	r0, r3
 800233e:	3710      	adds	r7, #16
 8002340:	46bd      	mov	sp, r7
 8002342:	bd80      	pop	{r7, pc}

08002344 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b084      	sub	sp, #16
 8002348:	af00      	add	r7, sp, #0
 800234a:	60f8      	str	r0, [r7, #12]
 800234c:	60b9      	str	r1, [r7, #8]
 800234e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002350:	e049      	b.n	80023e6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	695b      	ldr	r3, [r3, #20]
 8002358:	f003 0310 	and.w	r3, r3, #16
 800235c:	2b10      	cmp	r3, #16
 800235e:	d119      	bne.n	8002394 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f06f 0210 	mvn.w	r2, #16
 8002368:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	2200      	movs	r2, #0
 800236e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	2220      	movs	r2, #32
 8002374:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	2200      	movs	r2, #0
 800237c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	2200      	movs	r2, #0
 800238c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002390:	2301      	movs	r3, #1
 8002392:	e030      	b.n	80023f6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002394:	f7fe fd7c 	bl	8000e90 <HAL_GetTick>
 8002398:	4602      	mov	r2, r0
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	1ad3      	subs	r3, r2, r3
 800239e:	68ba      	ldr	r2, [r7, #8]
 80023a0:	429a      	cmp	r2, r3
 80023a2:	d302      	bcc.n	80023aa <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80023a4:	68bb      	ldr	r3, [r7, #8]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d11d      	bne.n	80023e6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	695b      	ldr	r3, [r3, #20]
 80023b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80023b4:	2b40      	cmp	r3, #64	@ 0x40
 80023b6:	d016      	beq.n	80023e6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	2200      	movs	r2, #0
 80023bc:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	2220      	movs	r2, #32
 80023c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	2200      	movs	r2, #0
 80023ca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023d2:	f043 0220 	orr.w	r2, r3, #32
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	2200      	movs	r2, #0
 80023de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80023e2:	2301      	movs	r3, #1
 80023e4:	e007      	b.n	80023f6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	695b      	ldr	r3, [r3, #20]
 80023ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80023f0:	2b40      	cmp	r3, #64	@ 0x40
 80023f2:	d1ae      	bne.n	8002352 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80023f4:	2300      	movs	r3, #0
}
 80023f6:	4618      	mov	r0, r3
 80023f8:	3710      	adds	r7, #16
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bd80      	pop	{r7, pc}

080023fe <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80023fe:	b480      	push	{r7}
 8002400:	b083      	sub	sp, #12
 8002402:	af00      	add	r7, sp, #0
 8002404:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	695b      	ldr	r3, [r3, #20]
 800240c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002410:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002414:	d11b      	bne.n	800244e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800241e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2200      	movs	r2, #0
 8002424:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	2220      	movs	r2, #32
 800242a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2200      	movs	r2, #0
 8002432:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800243a:	f043 0204 	orr.w	r2, r3, #4
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2200      	movs	r2, #0
 8002446:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800244a:	2301      	movs	r3, #1
 800244c:	e000      	b.n	8002450 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800244e:	2300      	movs	r3, #0
}
 8002450:	4618      	mov	r0, r3
 8002452:	370c      	adds	r7, #12
 8002454:	46bd      	mov	sp, r7
 8002456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245a:	4770      	bx	lr

0800245c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800245c:	b480      	push	{r7}
 800245e:	b083      	sub	sp, #12
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
 8002464:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800246c:	b2db      	uxtb	r3, r3
 800246e:	2b20      	cmp	r3, #32
 8002470:	d129      	bne.n	80024c6 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	2224      	movs	r2, #36	@ 0x24
 8002476:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	681a      	ldr	r2, [r3, #0]
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f022 0201 	bic.w	r2, r2, #1
 8002488:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f022 0210 	bic.w	r2, r2, #16
 8002498:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	683a      	ldr	r2, [r7, #0]
 80024a6:	430a      	orrs	r2, r1
 80024a8:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	681a      	ldr	r2, [r3, #0]
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f042 0201 	orr.w	r2, r2, #1
 80024b8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2220      	movs	r2, #32
 80024be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 80024c2:	2300      	movs	r3, #0
 80024c4:	e000      	b.n	80024c8 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 80024c6:	2302      	movs	r3, #2
  }
}
 80024c8:	4618      	mov	r0, r3
 80024ca:	370c      	adds	r7, #12
 80024cc:	46bd      	mov	sp, r7
 80024ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d2:	4770      	bx	lr

080024d4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80024d4:	b480      	push	{r7}
 80024d6:	b085      	sub	sp, #20
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
 80024dc:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 80024de:	2300      	movs	r3, #0
 80024e0:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80024e8:	b2db      	uxtb	r3, r3
 80024ea:	2b20      	cmp	r3, #32
 80024ec:	d12a      	bne.n	8002544 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	2224      	movs	r2, #36	@ 0x24
 80024f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	681a      	ldr	r2, [r3, #0]
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f022 0201 	bic.w	r2, r2, #1
 8002504:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800250c:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 800250e:	89fb      	ldrh	r3, [r7, #14]
 8002510:	f023 030f 	bic.w	r3, r3, #15
 8002514:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	b29a      	uxth	r2, r3
 800251a:	89fb      	ldrh	r3, [r7, #14]
 800251c:	4313      	orrs	r3, r2
 800251e:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	89fa      	ldrh	r2, [r7, #14]
 8002526:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	681a      	ldr	r2, [r3, #0]
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f042 0201 	orr.w	r2, r2, #1
 8002536:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2220      	movs	r2, #32
 800253c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8002540:	2300      	movs	r3, #0
 8002542:	e000      	b.n	8002546 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8002544:	2302      	movs	r3, #2
  }
}
 8002546:	4618      	mov	r0, r3
 8002548:	3714      	adds	r7, #20
 800254a:	46bd      	mov	sp, r7
 800254c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002550:	4770      	bx	lr
	...

08002554 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b086      	sub	sp, #24
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d101      	bne.n	8002566 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002562:	2301      	movs	r3, #1
 8002564:	e267      	b.n	8002a36 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f003 0301 	and.w	r3, r3, #1
 800256e:	2b00      	cmp	r3, #0
 8002570:	d075      	beq.n	800265e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002572:	4b88      	ldr	r3, [pc, #544]	@ (8002794 <HAL_RCC_OscConfig+0x240>)
 8002574:	689b      	ldr	r3, [r3, #8]
 8002576:	f003 030c 	and.w	r3, r3, #12
 800257a:	2b04      	cmp	r3, #4
 800257c:	d00c      	beq.n	8002598 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800257e:	4b85      	ldr	r3, [pc, #532]	@ (8002794 <HAL_RCC_OscConfig+0x240>)
 8002580:	689b      	ldr	r3, [r3, #8]
 8002582:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002586:	2b08      	cmp	r3, #8
 8002588:	d112      	bne.n	80025b0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800258a:	4b82      	ldr	r3, [pc, #520]	@ (8002794 <HAL_RCC_OscConfig+0x240>)
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002592:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002596:	d10b      	bne.n	80025b0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002598:	4b7e      	ldr	r3, [pc, #504]	@ (8002794 <HAL_RCC_OscConfig+0x240>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d05b      	beq.n	800265c <HAL_RCC_OscConfig+0x108>
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d157      	bne.n	800265c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80025ac:	2301      	movs	r3, #1
 80025ae:	e242      	b.n	8002a36 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80025b8:	d106      	bne.n	80025c8 <HAL_RCC_OscConfig+0x74>
 80025ba:	4b76      	ldr	r3, [pc, #472]	@ (8002794 <HAL_RCC_OscConfig+0x240>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4a75      	ldr	r2, [pc, #468]	@ (8002794 <HAL_RCC_OscConfig+0x240>)
 80025c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80025c4:	6013      	str	r3, [r2, #0]
 80025c6:	e01d      	b.n	8002604 <HAL_RCC_OscConfig+0xb0>
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80025d0:	d10c      	bne.n	80025ec <HAL_RCC_OscConfig+0x98>
 80025d2:	4b70      	ldr	r3, [pc, #448]	@ (8002794 <HAL_RCC_OscConfig+0x240>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4a6f      	ldr	r2, [pc, #444]	@ (8002794 <HAL_RCC_OscConfig+0x240>)
 80025d8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80025dc:	6013      	str	r3, [r2, #0]
 80025de:	4b6d      	ldr	r3, [pc, #436]	@ (8002794 <HAL_RCC_OscConfig+0x240>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	4a6c      	ldr	r2, [pc, #432]	@ (8002794 <HAL_RCC_OscConfig+0x240>)
 80025e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80025e8:	6013      	str	r3, [r2, #0]
 80025ea:	e00b      	b.n	8002604 <HAL_RCC_OscConfig+0xb0>
 80025ec:	4b69      	ldr	r3, [pc, #420]	@ (8002794 <HAL_RCC_OscConfig+0x240>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4a68      	ldr	r2, [pc, #416]	@ (8002794 <HAL_RCC_OscConfig+0x240>)
 80025f2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80025f6:	6013      	str	r3, [r2, #0]
 80025f8:	4b66      	ldr	r3, [pc, #408]	@ (8002794 <HAL_RCC_OscConfig+0x240>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	4a65      	ldr	r2, [pc, #404]	@ (8002794 <HAL_RCC_OscConfig+0x240>)
 80025fe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002602:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	2b00      	cmp	r3, #0
 800260a:	d013      	beq.n	8002634 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800260c:	f7fe fc40 	bl	8000e90 <HAL_GetTick>
 8002610:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002612:	e008      	b.n	8002626 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002614:	f7fe fc3c 	bl	8000e90 <HAL_GetTick>
 8002618:	4602      	mov	r2, r0
 800261a:	693b      	ldr	r3, [r7, #16]
 800261c:	1ad3      	subs	r3, r2, r3
 800261e:	2b64      	cmp	r3, #100	@ 0x64
 8002620:	d901      	bls.n	8002626 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002622:	2303      	movs	r3, #3
 8002624:	e207      	b.n	8002a36 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002626:	4b5b      	ldr	r3, [pc, #364]	@ (8002794 <HAL_RCC_OscConfig+0x240>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800262e:	2b00      	cmp	r3, #0
 8002630:	d0f0      	beq.n	8002614 <HAL_RCC_OscConfig+0xc0>
 8002632:	e014      	b.n	800265e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002634:	f7fe fc2c 	bl	8000e90 <HAL_GetTick>
 8002638:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800263a:	e008      	b.n	800264e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800263c:	f7fe fc28 	bl	8000e90 <HAL_GetTick>
 8002640:	4602      	mov	r2, r0
 8002642:	693b      	ldr	r3, [r7, #16]
 8002644:	1ad3      	subs	r3, r2, r3
 8002646:	2b64      	cmp	r3, #100	@ 0x64
 8002648:	d901      	bls.n	800264e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800264a:	2303      	movs	r3, #3
 800264c:	e1f3      	b.n	8002a36 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800264e:	4b51      	ldr	r3, [pc, #324]	@ (8002794 <HAL_RCC_OscConfig+0x240>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002656:	2b00      	cmp	r3, #0
 8002658:	d1f0      	bne.n	800263c <HAL_RCC_OscConfig+0xe8>
 800265a:	e000      	b.n	800265e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800265c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f003 0302 	and.w	r3, r3, #2
 8002666:	2b00      	cmp	r3, #0
 8002668:	d063      	beq.n	8002732 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800266a:	4b4a      	ldr	r3, [pc, #296]	@ (8002794 <HAL_RCC_OscConfig+0x240>)
 800266c:	689b      	ldr	r3, [r3, #8]
 800266e:	f003 030c 	and.w	r3, r3, #12
 8002672:	2b00      	cmp	r3, #0
 8002674:	d00b      	beq.n	800268e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002676:	4b47      	ldr	r3, [pc, #284]	@ (8002794 <HAL_RCC_OscConfig+0x240>)
 8002678:	689b      	ldr	r3, [r3, #8]
 800267a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800267e:	2b08      	cmp	r3, #8
 8002680:	d11c      	bne.n	80026bc <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002682:	4b44      	ldr	r3, [pc, #272]	@ (8002794 <HAL_RCC_OscConfig+0x240>)
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800268a:	2b00      	cmp	r3, #0
 800268c:	d116      	bne.n	80026bc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800268e:	4b41      	ldr	r3, [pc, #260]	@ (8002794 <HAL_RCC_OscConfig+0x240>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f003 0302 	and.w	r3, r3, #2
 8002696:	2b00      	cmp	r3, #0
 8002698:	d005      	beq.n	80026a6 <HAL_RCC_OscConfig+0x152>
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	68db      	ldr	r3, [r3, #12]
 800269e:	2b01      	cmp	r3, #1
 80026a0:	d001      	beq.n	80026a6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80026a2:	2301      	movs	r3, #1
 80026a4:	e1c7      	b.n	8002a36 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026a6:	4b3b      	ldr	r3, [pc, #236]	@ (8002794 <HAL_RCC_OscConfig+0x240>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	691b      	ldr	r3, [r3, #16]
 80026b2:	00db      	lsls	r3, r3, #3
 80026b4:	4937      	ldr	r1, [pc, #220]	@ (8002794 <HAL_RCC_OscConfig+0x240>)
 80026b6:	4313      	orrs	r3, r2
 80026b8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026ba:	e03a      	b.n	8002732 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	68db      	ldr	r3, [r3, #12]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d020      	beq.n	8002706 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80026c4:	4b34      	ldr	r3, [pc, #208]	@ (8002798 <HAL_RCC_OscConfig+0x244>)
 80026c6:	2201      	movs	r2, #1
 80026c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026ca:	f7fe fbe1 	bl	8000e90 <HAL_GetTick>
 80026ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026d0:	e008      	b.n	80026e4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026d2:	f7fe fbdd 	bl	8000e90 <HAL_GetTick>
 80026d6:	4602      	mov	r2, r0
 80026d8:	693b      	ldr	r3, [r7, #16]
 80026da:	1ad3      	subs	r3, r2, r3
 80026dc:	2b02      	cmp	r3, #2
 80026de:	d901      	bls.n	80026e4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80026e0:	2303      	movs	r3, #3
 80026e2:	e1a8      	b.n	8002a36 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026e4:	4b2b      	ldr	r3, [pc, #172]	@ (8002794 <HAL_RCC_OscConfig+0x240>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f003 0302 	and.w	r3, r3, #2
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d0f0      	beq.n	80026d2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026f0:	4b28      	ldr	r3, [pc, #160]	@ (8002794 <HAL_RCC_OscConfig+0x240>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	691b      	ldr	r3, [r3, #16]
 80026fc:	00db      	lsls	r3, r3, #3
 80026fe:	4925      	ldr	r1, [pc, #148]	@ (8002794 <HAL_RCC_OscConfig+0x240>)
 8002700:	4313      	orrs	r3, r2
 8002702:	600b      	str	r3, [r1, #0]
 8002704:	e015      	b.n	8002732 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002706:	4b24      	ldr	r3, [pc, #144]	@ (8002798 <HAL_RCC_OscConfig+0x244>)
 8002708:	2200      	movs	r2, #0
 800270a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800270c:	f7fe fbc0 	bl	8000e90 <HAL_GetTick>
 8002710:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002712:	e008      	b.n	8002726 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002714:	f7fe fbbc 	bl	8000e90 <HAL_GetTick>
 8002718:	4602      	mov	r2, r0
 800271a:	693b      	ldr	r3, [r7, #16]
 800271c:	1ad3      	subs	r3, r2, r3
 800271e:	2b02      	cmp	r3, #2
 8002720:	d901      	bls.n	8002726 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002722:	2303      	movs	r3, #3
 8002724:	e187      	b.n	8002a36 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002726:	4b1b      	ldr	r3, [pc, #108]	@ (8002794 <HAL_RCC_OscConfig+0x240>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f003 0302 	and.w	r3, r3, #2
 800272e:	2b00      	cmp	r3, #0
 8002730:	d1f0      	bne.n	8002714 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f003 0308 	and.w	r3, r3, #8
 800273a:	2b00      	cmp	r3, #0
 800273c:	d036      	beq.n	80027ac <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	695b      	ldr	r3, [r3, #20]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d016      	beq.n	8002774 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002746:	4b15      	ldr	r3, [pc, #84]	@ (800279c <HAL_RCC_OscConfig+0x248>)
 8002748:	2201      	movs	r2, #1
 800274a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800274c:	f7fe fba0 	bl	8000e90 <HAL_GetTick>
 8002750:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002752:	e008      	b.n	8002766 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002754:	f7fe fb9c 	bl	8000e90 <HAL_GetTick>
 8002758:	4602      	mov	r2, r0
 800275a:	693b      	ldr	r3, [r7, #16]
 800275c:	1ad3      	subs	r3, r2, r3
 800275e:	2b02      	cmp	r3, #2
 8002760:	d901      	bls.n	8002766 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002762:	2303      	movs	r3, #3
 8002764:	e167      	b.n	8002a36 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002766:	4b0b      	ldr	r3, [pc, #44]	@ (8002794 <HAL_RCC_OscConfig+0x240>)
 8002768:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800276a:	f003 0302 	and.w	r3, r3, #2
 800276e:	2b00      	cmp	r3, #0
 8002770:	d0f0      	beq.n	8002754 <HAL_RCC_OscConfig+0x200>
 8002772:	e01b      	b.n	80027ac <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002774:	4b09      	ldr	r3, [pc, #36]	@ (800279c <HAL_RCC_OscConfig+0x248>)
 8002776:	2200      	movs	r2, #0
 8002778:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800277a:	f7fe fb89 	bl	8000e90 <HAL_GetTick>
 800277e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002780:	e00e      	b.n	80027a0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002782:	f7fe fb85 	bl	8000e90 <HAL_GetTick>
 8002786:	4602      	mov	r2, r0
 8002788:	693b      	ldr	r3, [r7, #16]
 800278a:	1ad3      	subs	r3, r2, r3
 800278c:	2b02      	cmp	r3, #2
 800278e:	d907      	bls.n	80027a0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002790:	2303      	movs	r3, #3
 8002792:	e150      	b.n	8002a36 <HAL_RCC_OscConfig+0x4e2>
 8002794:	40023800 	.word	0x40023800
 8002798:	42470000 	.word	0x42470000
 800279c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027a0:	4b88      	ldr	r3, [pc, #544]	@ (80029c4 <HAL_RCC_OscConfig+0x470>)
 80027a2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80027a4:	f003 0302 	and.w	r3, r3, #2
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d1ea      	bne.n	8002782 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f003 0304 	and.w	r3, r3, #4
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	f000 8097 	beq.w	80028e8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027ba:	2300      	movs	r3, #0
 80027bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80027be:	4b81      	ldr	r3, [pc, #516]	@ (80029c4 <HAL_RCC_OscConfig+0x470>)
 80027c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d10f      	bne.n	80027ea <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027ca:	2300      	movs	r3, #0
 80027cc:	60bb      	str	r3, [r7, #8]
 80027ce:	4b7d      	ldr	r3, [pc, #500]	@ (80029c4 <HAL_RCC_OscConfig+0x470>)
 80027d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027d2:	4a7c      	ldr	r2, [pc, #496]	@ (80029c4 <HAL_RCC_OscConfig+0x470>)
 80027d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80027d8:	6413      	str	r3, [r2, #64]	@ 0x40
 80027da:	4b7a      	ldr	r3, [pc, #488]	@ (80029c4 <HAL_RCC_OscConfig+0x470>)
 80027dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027e2:	60bb      	str	r3, [r7, #8]
 80027e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027e6:	2301      	movs	r3, #1
 80027e8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027ea:	4b77      	ldr	r3, [pc, #476]	@ (80029c8 <HAL_RCC_OscConfig+0x474>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d118      	bne.n	8002828 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80027f6:	4b74      	ldr	r3, [pc, #464]	@ (80029c8 <HAL_RCC_OscConfig+0x474>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4a73      	ldr	r2, [pc, #460]	@ (80029c8 <HAL_RCC_OscConfig+0x474>)
 80027fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002800:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002802:	f7fe fb45 	bl	8000e90 <HAL_GetTick>
 8002806:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002808:	e008      	b.n	800281c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800280a:	f7fe fb41 	bl	8000e90 <HAL_GetTick>
 800280e:	4602      	mov	r2, r0
 8002810:	693b      	ldr	r3, [r7, #16]
 8002812:	1ad3      	subs	r3, r2, r3
 8002814:	2b02      	cmp	r3, #2
 8002816:	d901      	bls.n	800281c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002818:	2303      	movs	r3, #3
 800281a:	e10c      	b.n	8002a36 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800281c:	4b6a      	ldr	r3, [pc, #424]	@ (80029c8 <HAL_RCC_OscConfig+0x474>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002824:	2b00      	cmp	r3, #0
 8002826:	d0f0      	beq.n	800280a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	689b      	ldr	r3, [r3, #8]
 800282c:	2b01      	cmp	r3, #1
 800282e:	d106      	bne.n	800283e <HAL_RCC_OscConfig+0x2ea>
 8002830:	4b64      	ldr	r3, [pc, #400]	@ (80029c4 <HAL_RCC_OscConfig+0x470>)
 8002832:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002834:	4a63      	ldr	r2, [pc, #396]	@ (80029c4 <HAL_RCC_OscConfig+0x470>)
 8002836:	f043 0301 	orr.w	r3, r3, #1
 800283a:	6713      	str	r3, [r2, #112]	@ 0x70
 800283c:	e01c      	b.n	8002878 <HAL_RCC_OscConfig+0x324>
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	689b      	ldr	r3, [r3, #8]
 8002842:	2b05      	cmp	r3, #5
 8002844:	d10c      	bne.n	8002860 <HAL_RCC_OscConfig+0x30c>
 8002846:	4b5f      	ldr	r3, [pc, #380]	@ (80029c4 <HAL_RCC_OscConfig+0x470>)
 8002848:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800284a:	4a5e      	ldr	r2, [pc, #376]	@ (80029c4 <HAL_RCC_OscConfig+0x470>)
 800284c:	f043 0304 	orr.w	r3, r3, #4
 8002850:	6713      	str	r3, [r2, #112]	@ 0x70
 8002852:	4b5c      	ldr	r3, [pc, #368]	@ (80029c4 <HAL_RCC_OscConfig+0x470>)
 8002854:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002856:	4a5b      	ldr	r2, [pc, #364]	@ (80029c4 <HAL_RCC_OscConfig+0x470>)
 8002858:	f043 0301 	orr.w	r3, r3, #1
 800285c:	6713      	str	r3, [r2, #112]	@ 0x70
 800285e:	e00b      	b.n	8002878 <HAL_RCC_OscConfig+0x324>
 8002860:	4b58      	ldr	r3, [pc, #352]	@ (80029c4 <HAL_RCC_OscConfig+0x470>)
 8002862:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002864:	4a57      	ldr	r2, [pc, #348]	@ (80029c4 <HAL_RCC_OscConfig+0x470>)
 8002866:	f023 0301 	bic.w	r3, r3, #1
 800286a:	6713      	str	r3, [r2, #112]	@ 0x70
 800286c:	4b55      	ldr	r3, [pc, #340]	@ (80029c4 <HAL_RCC_OscConfig+0x470>)
 800286e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002870:	4a54      	ldr	r2, [pc, #336]	@ (80029c4 <HAL_RCC_OscConfig+0x470>)
 8002872:	f023 0304 	bic.w	r3, r3, #4
 8002876:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	689b      	ldr	r3, [r3, #8]
 800287c:	2b00      	cmp	r3, #0
 800287e:	d015      	beq.n	80028ac <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002880:	f7fe fb06 	bl	8000e90 <HAL_GetTick>
 8002884:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002886:	e00a      	b.n	800289e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002888:	f7fe fb02 	bl	8000e90 <HAL_GetTick>
 800288c:	4602      	mov	r2, r0
 800288e:	693b      	ldr	r3, [r7, #16]
 8002890:	1ad3      	subs	r3, r2, r3
 8002892:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002896:	4293      	cmp	r3, r2
 8002898:	d901      	bls.n	800289e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800289a:	2303      	movs	r3, #3
 800289c:	e0cb      	b.n	8002a36 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800289e:	4b49      	ldr	r3, [pc, #292]	@ (80029c4 <HAL_RCC_OscConfig+0x470>)
 80028a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028a2:	f003 0302 	and.w	r3, r3, #2
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d0ee      	beq.n	8002888 <HAL_RCC_OscConfig+0x334>
 80028aa:	e014      	b.n	80028d6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028ac:	f7fe faf0 	bl	8000e90 <HAL_GetTick>
 80028b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028b2:	e00a      	b.n	80028ca <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028b4:	f7fe faec 	bl	8000e90 <HAL_GetTick>
 80028b8:	4602      	mov	r2, r0
 80028ba:	693b      	ldr	r3, [r7, #16]
 80028bc:	1ad3      	subs	r3, r2, r3
 80028be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d901      	bls.n	80028ca <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80028c6:	2303      	movs	r3, #3
 80028c8:	e0b5      	b.n	8002a36 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028ca:	4b3e      	ldr	r3, [pc, #248]	@ (80029c4 <HAL_RCC_OscConfig+0x470>)
 80028cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028ce:	f003 0302 	and.w	r3, r3, #2
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d1ee      	bne.n	80028b4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80028d6:	7dfb      	ldrb	r3, [r7, #23]
 80028d8:	2b01      	cmp	r3, #1
 80028da:	d105      	bne.n	80028e8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028dc:	4b39      	ldr	r3, [pc, #228]	@ (80029c4 <HAL_RCC_OscConfig+0x470>)
 80028de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028e0:	4a38      	ldr	r2, [pc, #224]	@ (80029c4 <HAL_RCC_OscConfig+0x470>)
 80028e2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80028e6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	699b      	ldr	r3, [r3, #24]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	f000 80a1 	beq.w	8002a34 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80028f2:	4b34      	ldr	r3, [pc, #208]	@ (80029c4 <HAL_RCC_OscConfig+0x470>)
 80028f4:	689b      	ldr	r3, [r3, #8]
 80028f6:	f003 030c 	and.w	r3, r3, #12
 80028fa:	2b08      	cmp	r3, #8
 80028fc:	d05c      	beq.n	80029b8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	699b      	ldr	r3, [r3, #24]
 8002902:	2b02      	cmp	r3, #2
 8002904:	d141      	bne.n	800298a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002906:	4b31      	ldr	r3, [pc, #196]	@ (80029cc <HAL_RCC_OscConfig+0x478>)
 8002908:	2200      	movs	r2, #0
 800290a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800290c:	f7fe fac0 	bl	8000e90 <HAL_GetTick>
 8002910:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002912:	e008      	b.n	8002926 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002914:	f7fe fabc 	bl	8000e90 <HAL_GetTick>
 8002918:	4602      	mov	r2, r0
 800291a:	693b      	ldr	r3, [r7, #16]
 800291c:	1ad3      	subs	r3, r2, r3
 800291e:	2b02      	cmp	r3, #2
 8002920:	d901      	bls.n	8002926 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002922:	2303      	movs	r3, #3
 8002924:	e087      	b.n	8002a36 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002926:	4b27      	ldr	r3, [pc, #156]	@ (80029c4 <HAL_RCC_OscConfig+0x470>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800292e:	2b00      	cmp	r3, #0
 8002930:	d1f0      	bne.n	8002914 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	69da      	ldr	r2, [r3, #28]
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6a1b      	ldr	r3, [r3, #32]
 800293a:	431a      	orrs	r2, r3
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002940:	019b      	lsls	r3, r3, #6
 8002942:	431a      	orrs	r2, r3
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002948:	085b      	lsrs	r3, r3, #1
 800294a:	3b01      	subs	r3, #1
 800294c:	041b      	lsls	r3, r3, #16
 800294e:	431a      	orrs	r2, r3
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002954:	061b      	lsls	r3, r3, #24
 8002956:	491b      	ldr	r1, [pc, #108]	@ (80029c4 <HAL_RCC_OscConfig+0x470>)
 8002958:	4313      	orrs	r3, r2
 800295a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800295c:	4b1b      	ldr	r3, [pc, #108]	@ (80029cc <HAL_RCC_OscConfig+0x478>)
 800295e:	2201      	movs	r2, #1
 8002960:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002962:	f7fe fa95 	bl	8000e90 <HAL_GetTick>
 8002966:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002968:	e008      	b.n	800297c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800296a:	f7fe fa91 	bl	8000e90 <HAL_GetTick>
 800296e:	4602      	mov	r2, r0
 8002970:	693b      	ldr	r3, [r7, #16]
 8002972:	1ad3      	subs	r3, r2, r3
 8002974:	2b02      	cmp	r3, #2
 8002976:	d901      	bls.n	800297c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002978:	2303      	movs	r3, #3
 800297a:	e05c      	b.n	8002a36 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800297c:	4b11      	ldr	r3, [pc, #68]	@ (80029c4 <HAL_RCC_OscConfig+0x470>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002984:	2b00      	cmp	r3, #0
 8002986:	d0f0      	beq.n	800296a <HAL_RCC_OscConfig+0x416>
 8002988:	e054      	b.n	8002a34 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800298a:	4b10      	ldr	r3, [pc, #64]	@ (80029cc <HAL_RCC_OscConfig+0x478>)
 800298c:	2200      	movs	r2, #0
 800298e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002990:	f7fe fa7e 	bl	8000e90 <HAL_GetTick>
 8002994:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002996:	e008      	b.n	80029aa <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002998:	f7fe fa7a 	bl	8000e90 <HAL_GetTick>
 800299c:	4602      	mov	r2, r0
 800299e:	693b      	ldr	r3, [r7, #16]
 80029a0:	1ad3      	subs	r3, r2, r3
 80029a2:	2b02      	cmp	r3, #2
 80029a4:	d901      	bls.n	80029aa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80029a6:	2303      	movs	r3, #3
 80029a8:	e045      	b.n	8002a36 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029aa:	4b06      	ldr	r3, [pc, #24]	@ (80029c4 <HAL_RCC_OscConfig+0x470>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d1f0      	bne.n	8002998 <HAL_RCC_OscConfig+0x444>
 80029b6:	e03d      	b.n	8002a34 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	699b      	ldr	r3, [r3, #24]
 80029bc:	2b01      	cmp	r3, #1
 80029be:	d107      	bne.n	80029d0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80029c0:	2301      	movs	r3, #1
 80029c2:	e038      	b.n	8002a36 <HAL_RCC_OscConfig+0x4e2>
 80029c4:	40023800 	.word	0x40023800
 80029c8:	40007000 	.word	0x40007000
 80029cc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80029d0:	4b1b      	ldr	r3, [pc, #108]	@ (8002a40 <HAL_RCC_OscConfig+0x4ec>)
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	699b      	ldr	r3, [r3, #24]
 80029da:	2b01      	cmp	r3, #1
 80029dc:	d028      	beq.n	8002a30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80029e8:	429a      	cmp	r2, r3
 80029ea:	d121      	bne.n	8002a30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029f6:	429a      	cmp	r2, r3
 80029f8:	d11a      	bne.n	8002a30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80029fa:	68fa      	ldr	r2, [r7, #12]
 80029fc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002a00:	4013      	ands	r3, r2
 8002a02:	687a      	ldr	r2, [r7, #4]
 8002a04:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002a06:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	d111      	bne.n	8002a30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a16:	085b      	lsrs	r3, r3, #1
 8002a18:	3b01      	subs	r3, #1
 8002a1a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a1c:	429a      	cmp	r2, r3
 8002a1e:	d107      	bne.n	8002a30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a2a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a2c:	429a      	cmp	r2, r3
 8002a2e:	d001      	beq.n	8002a34 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002a30:	2301      	movs	r3, #1
 8002a32:	e000      	b.n	8002a36 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002a34:	2300      	movs	r3, #0
}
 8002a36:	4618      	mov	r0, r3
 8002a38:	3718      	adds	r7, #24
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bd80      	pop	{r7, pc}
 8002a3e:	bf00      	nop
 8002a40:	40023800 	.word	0x40023800

08002a44 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b084      	sub	sp, #16
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
 8002a4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d101      	bne.n	8002a58 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a54:	2301      	movs	r3, #1
 8002a56:	e0cc      	b.n	8002bf2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002a58:	4b68      	ldr	r3, [pc, #416]	@ (8002bfc <HAL_RCC_ClockConfig+0x1b8>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f003 030f 	and.w	r3, r3, #15
 8002a60:	683a      	ldr	r2, [r7, #0]
 8002a62:	429a      	cmp	r2, r3
 8002a64:	d90c      	bls.n	8002a80 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a66:	4b65      	ldr	r3, [pc, #404]	@ (8002bfc <HAL_RCC_ClockConfig+0x1b8>)
 8002a68:	683a      	ldr	r2, [r7, #0]
 8002a6a:	b2d2      	uxtb	r2, r2
 8002a6c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a6e:	4b63      	ldr	r3, [pc, #396]	@ (8002bfc <HAL_RCC_ClockConfig+0x1b8>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f003 030f 	and.w	r3, r3, #15
 8002a76:	683a      	ldr	r2, [r7, #0]
 8002a78:	429a      	cmp	r2, r3
 8002a7a:	d001      	beq.n	8002a80 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002a7c:	2301      	movs	r3, #1
 8002a7e:	e0b8      	b.n	8002bf2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f003 0302 	and.w	r3, r3, #2
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d020      	beq.n	8002ace <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f003 0304 	and.w	r3, r3, #4
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d005      	beq.n	8002aa4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a98:	4b59      	ldr	r3, [pc, #356]	@ (8002c00 <HAL_RCC_ClockConfig+0x1bc>)
 8002a9a:	689b      	ldr	r3, [r3, #8]
 8002a9c:	4a58      	ldr	r2, [pc, #352]	@ (8002c00 <HAL_RCC_ClockConfig+0x1bc>)
 8002a9e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002aa2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f003 0308 	and.w	r3, r3, #8
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d005      	beq.n	8002abc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ab0:	4b53      	ldr	r3, [pc, #332]	@ (8002c00 <HAL_RCC_ClockConfig+0x1bc>)
 8002ab2:	689b      	ldr	r3, [r3, #8]
 8002ab4:	4a52      	ldr	r2, [pc, #328]	@ (8002c00 <HAL_RCC_ClockConfig+0x1bc>)
 8002ab6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002aba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002abc:	4b50      	ldr	r3, [pc, #320]	@ (8002c00 <HAL_RCC_ClockConfig+0x1bc>)
 8002abe:	689b      	ldr	r3, [r3, #8]
 8002ac0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	689b      	ldr	r3, [r3, #8]
 8002ac8:	494d      	ldr	r1, [pc, #308]	@ (8002c00 <HAL_RCC_ClockConfig+0x1bc>)
 8002aca:	4313      	orrs	r3, r2
 8002acc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f003 0301 	and.w	r3, r3, #1
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d044      	beq.n	8002b64 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	2b01      	cmp	r3, #1
 8002ae0:	d107      	bne.n	8002af2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ae2:	4b47      	ldr	r3, [pc, #284]	@ (8002c00 <HAL_RCC_ClockConfig+0x1bc>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d119      	bne.n	8002b22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002aee:	2301      	movs	r3, #1
 8002af0:	e07f      	b.n	8002bf2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	2b02      	cmp	r3, #2
 8002af8:	d003      	beq.n	8002b02 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002afe:	2b03      	cmp	r3, #3
 8002b00:	d107      	bne.n	8002b12 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b02:	4b3f      	ldr	r3, [pc, #252]	@ (8002c00 <HAL_RCC_ClockConfig+0x1bc>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d109      	bne.n	8002b22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b0e:	2301      	movs	r3, #1
 8002b10:	e06f      	b.n	8002bf2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b12:	4b3b      	ldr	r3, [pc, #236]	@ (8002c00 <HAL_RCC_ClockConfig+0x1bc>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f003 0302 	and.w	r3, r3, #2
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d101      	bne.n	8002b22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b1e:	2301      	movs	r3, #1
 8002b20:	e067      	b.n	8002bf2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b22:	4b37      	ldr	r3, [pc, #220]	@ (8002c00 <HAL_RCC_ClockConfig+0x1bc>)
 8002b24:	689b      	ldr	r3, [r3, #8]
 8002b26:	f023 0203 	bic.w	r2, r3, #3
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	685b      	ldr	r3, [r3, #4]
 8002b2e:	4934      	ldr	r1, [pc, #208]	@ (8002c00 <HAL_RCC_ClockConfig+0x1bc>)
 8002b30:	4313      	orrs	r3, r2
 8002b32:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b34:	f7fe f9ac 	bl	8000e90 <HAL_GetTick>
 8002b38:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b3a:	e00a      	b.n	8002b52 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b3c:	f7fe f9a8 	bl	8000e90 <HAL_GetTick>
 8002b40:	4602      	mov	r2, r0
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	1ad3      	subs	r3, r2, r3
 8002b46:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d901      	bls.n	8002b52 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002b4e:	2303      	movs	r3, #3
 8002b50:	e04f      	b.n	8002bf2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b52:	4b2b      	ldr	r3, [pc, #172]	@ (8002c00 <HAL_RCC_ClockConfig+0x1bc>)
 8002b54:	689b      	ldr	r3, [r3, #8]
 8002b56:	f003 020c 	and.w	r2, r3, #12
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	009b      	lsls	r3, r3, #2
 8002b60:	429a      	cmp	r2, r3
 8002b62:	d1eb      	bne.n	8002b3c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002b64:	4b25      	ldr	r3, [pc, #148]	@ (8002bfc <HAL_RCC_ClockConfig+0x1b8>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f003 030f 	and.w	r3, r3, #15
 8002b6c:	683a      	ldr	r2, [r7, #0]
 8002b6e:	429a      	cmp	r2, r3
 8002b70:	d20c      	bcs.n	8002b8c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b72:	4b22      	ldr	r3, [pc, #136]	@ (8002bfc <HAL_RCC_ClockConfig+0x1b8>)
 8002b74:	683a      	ldr	r2, [r7, #0]
 8002b76:	b2d2      	uxtb	r2, r2
 8002b78:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b7a:	4b20      	ldr	r3, [pc, #128]	@ (8002bfc <HAL_RCC_ClockConfig+0x1b8>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f003 030f 	and.w	r3, r3, #15
 8002b82:	683a      	ldr	r2, [r7, #0]
 8002b84:	429a      	cmp	r2, r3
 8002b86:	d001      	beq.n	8002b8c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002b88:	2301      	movs	r3, #1
 8002b8a:	e032      	b.n	8002bf2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f003 0304 	and.w	r3, r3, #4
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d008      	beq.n	8002baa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b98:	4b19      	ldr	r3, [pc, #100]	@ (8002c00 <HAL_RCC_ClockConfig+0x1bc>)
 8002b9a:	689b      	ldr	r3, [r3, #8]
 8002b9c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	68db      	ldr	r3, [r3, #12]
 8002ba4:	4916      	ldr	r1, [pc, #88]	@ (8002c00 <HAL_RCC_ClockConfig+0x1bc>)
 8002ba6:	4313      	orrs	r3, r2
 8002ba8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f003 0308 	and.w	r3, r3, #8
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d009      	beq.n	8002bca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002bb6:	4b12      	ldr	r3, [pc, #72]	@ (8002c00 <HAL_RCC_ClockConfig+0x1bc>)
 8002bb8:	689b      	ldr	r3, [r3, #8]
 8002bba:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	691b      	ldr	r3, [r3, #16]
 8002bc2:	00db      	lsls	r3, r3, #3
 8002bc4:	490e      	ldr	r1, [pc, #56]	@ (8002c00 <HAL_RCC_ClockConfig+0x1bc>)
 8002bc6:	4313      	orrs	r3, r2
 8002bc8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002bca:	f000 f821 	bl	8002c10 <HAL_RCC_GetSysClockFreq>
 8002bce:	4602      	mov	r2, r0
 8002bd0:	4b0b      	ldr	r3, [pc, #44]	@ (8002c00 <HAL_RCC_ClockConfig+0x1bc>)
 8002bd2:	689b      	ldr	r3, [r3, #8]
 8002bd4:	091b      	lsrs	r3, r3, #4
 8002bd6:	f003 030f 	and.w	r3, r3, #15
 8002bda:	490a      	ldr	r1, [pc, #40]	@ (8002c04 <HAL_RCC_ClockConfig+0x1c0>)
 8002bdc:	5ccb      	ldrb	r3, [r1, r3]
 8002bde:	fa22 f303 	lsr.w	r3, r2, r3
 8002be2:	4a09      	ldr	r2, [pc, #36]	@ (8002c08 <HAL_RCC_ClockConfig+0x1c4>)
 8002be4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002be6:	4b09      	ldr	r3, [pc, #36]	@ (8002c0c <HAL_RCC_ClockConfig+0x1c8>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4618      	mov	r0, r3
 8002bec:	f7fe f90c 	bl	8000e08 <HAL_InitTick>

  return HAL_OK;
 8002bf0:	2300      	movs	r3, #0
}
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	3710      	adds	r7, #16
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bd80      	pop	{r7, pc}
 8002bfa:	bf00      	nop
 8002bfc:	40023c00 	.word	0x40023c00
 8002c00:	40023800 	.word	0x40023800
 8002c04:	08003f98 	.word	0x08003f98
 8002c08:	20000000 	.word	0x20000000
 8002c0c:	20000004 	.word	0x20000004

08002c10 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002c14:	b090      	sub	sp, #64	@ 0x40
 8002c16:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002c18:	2300      	movs	r3, #0
 8002c1a:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8002c20:	2300      	movs	r3, #0
 8002c22:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8002c24:	2300      	movs	r3, #0
 8002c26:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002c28:	4b59      	ldr	r3, [pc, #356]	@ (8002d90 <HAL_RCC_GetSysClockFreq+0x180>)
 8002c2a:	689b      	ldr	r3, [r3, #8]
 8002c2c:	f003 030c 	and.w	r3, r3, #12
 8002c30:	2b08      	cmp	r3, #8
 8002c32:	d00d      	beq.n	8002c50 <HAL_RCC_GetSysClockFreq+0x40>
 8002c34:	2b08      	cmp	r3, #8
 8002c36:	f200 80a1 	bhi.w	8002d7c <HAL_RCC_GetSysClockFreq+0x16c>
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d002      	beq.n	8002c44 <HAL_RCC_GetSysClockFreq+0x34>
 8002c3e:	2b04      	cmp	r3, #4
 8002c40:	d003      	beq.n	8002c4a <HAL_RCC_GetSysClockFreq+0x3a>
 8002c42:	e09b      	b.n	8002d7c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002c44:	4b53      	ldr	r3, [pc, #332]	@ (8002d94 <HAL_RCC_GetSysClockFreq+0x184>)
 8002c46:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002c48:	e09b      	b.n	8002d82 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002c4a:	4b53      	ldr	r3, [pc, #332]	@ (8002d98 <HAL_RCC_GetSysClockFreq+0x188>)
 8002c4c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002c4e:	e098      	b.n	8002d82 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002c50:	4b4f      	ldr	r3, [pc, #316]	@ (8002d90 <HAL_RCC_GetSysClockFreq+0x180>)
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002c58:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002c5a:	4b4d      	ldr	r3, [pc, #308]	@ (8002d90 <HAL_RCC_GetSysClockFreq+0x180>)
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d028      	beq.n	8002cb8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c66:	4b4a      	ldr	r3, [pc, #296]	@ (8002d90 <HAL_RCC_GetSysClockFreq+0x180>)
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	099b      	lsrs	r3, r3, #6
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	623b      	str	r3, [r7, #32]
 8002c70:	627a      	str	r2, [r7, #36]	@ 0x24
 8002c72:	6a3b      	ldr	r3, [r7, #32]
 8002c74:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002c78:	2100      	movs	r1, #0
 8002c7a:	4b47      	ldr	r3, [pc, #284]	@ (8002d98 <HAL_RCC_GetSysClockFreq+0x188>)
 8002c7c:	fb03 f201 	mul.w	r2, r3, r1
 8002c80:	2300      	movs	r3, #0
 8002c82:	fb00 f303 	mul.w	r3, r0, r3
 8002c86:	4413      	add	r3, r2
 8002c88:	4a43      	ldr	r2, [pc, #268]	@ (8002d98 <HAL_RCC_GetSysClockFreq+0x188>)
 8002c8a:	fba0 1202 	umull	r1, r2, r0, r2
 8002c8e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002c90:	460a      	mov	r2, r1
 8002c92:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002c94:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002c96:	4413      	add	r3, r2
 8002c98:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002c9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	61bb      	str	r3, [r7, #24]
 8002ca0:	61fa      	str	r2, [r7, #28]
 8002ca2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002ca6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002caa:	f7fd faf9 	bl	80002a0 <__aeabi_uldivmod>
 8002cae:	4602      	mov	r2, r0
 8002cb0:	460b      	mov	r3, r1
 8002cb2:	4613      	mov	r3, r2
 8002cb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002cb6:	e053      	b.n	8002d60 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002cb8:	4b35      	ldr	r3, [pc, #212]	@ (8002d90 <HAL_RCC_GetSysClockFreq+0x180>)
 8002cba:	685b      	ldr	r3, [r3, #4]
 8002cbc:	099b      	lsrs	r3, r3, #6
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	613b      	str	r3, [r7, #16]
 8002cc2:	617a      	str	r2, [r7, #20]
 8002cc4:	693b      	ldr	r3, [r7, #16]
 8002cc6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002cca:	f04f 0b00 	mov.w	fp, #0
 8002cce:	4652      	mov	r2, sl
 8002cd0:	465b      	mov	r3, fp
 8002cd2:	f04f 0000 	mov.w	r0, #0
 8002cd6:	f04f 0100 	mov.w	r1, #0
 8002cda:	0159      	lsls	r1, r3, #5
 8002cdc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002ce0:	0150      	lsls	r0, r2, #5
 8002ce2:	4602      	mov	r2, r0
 8002ce4:	460b      	mov	r3, r1
 8002ce6:	ebb2 080a 	subs.w	r8, r2, sl
 8002cea:	eb63 090b 	sbc.w	r9, r3, fp
 8002cee:	f04f 0200 	mov.w	r2, #0
 8002cf2:	f04f 0300 	mov.w	r3, #0
 8002cf6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002cfa:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002cfe:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002d02:	ebb2 0408 	subs.w	r4, r2, r8
 8002d06:	eb63 0509 	sbc.w	r5, r3, r9
 8002d0a:	f04f 0200 	mov.w	r2, #0
 8002d0e:	f04f 0300 	mov.w	r3, #0
 8002d12:	00eb      	lsls	r3, r5, #3
 8002d14:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002d18:	00e2      	lsls	r2, r4, #3
 8002d1a:	4614      	mov	r4, r2
 8002d1c:	461d      	mov	r5, r3
 8002d1e:	eb14 030a 	adds.w	r3, r4, sl
 8002d22:	603b      	str	r3, [r7, #0]
 8002d24:	eb45 030b 	adc.w	r3, r5, fp
 8002d28:	607b      	str	r3, [r7, #4]
 8002d2a:	f04f 0200 	mov.w	r2, #0
 8002d2e:	f04f 0300 	mov.w	r3, #0
 8002d32:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002d36:	4629      	mov	r1, r5
 8002d38:	028b      	lsls	r3, r1, #10
 8002d3a:	4621      	mov	r1, r4
 8002d3c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002d40:	4621      	mov	r1, r4
 8002d42:	028a      	lsls	r2, r1, #10
 8002d44:	4610      	mov	r0, r2
 8002d46:	4619      	mov	r1, r3
 8002d48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	60bb      	str	r3, [r7, #8]
 8002d4e:	60fa      	str	r2, [r7, #12]
 8002d50:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002d54:	f7fd faa4 	bl	80002a0 <__aeabi_uldivmod>
 8002d58:	4602      	mov	r2, r0
 8002d5a:	460b      	mov	r3, r1
 8002d5c:	4613      	mov	r3, r2
 8002d5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002d60:	4b0b      	ldr	r3, [pc, #44]	@ (8002d90 <HAL_RCC_GetSysClockFreq+0x180>)
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	0c1b      	lsrs	r3, r3, #16
 8002d66:	f003 0303 	and.w	r3, r3, #3
 8002d6a:	3301      	adds	r3, #1
 8002d6c:	005b      	lsls	r3, r3, #1
 8002d6e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8002d70:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002d72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d74:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d78:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002d7a:	e002      	b.n	8002d82 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002d7c:	4b05      	ldr	r3, [pc, #20]	@ (8002d94 <HAL_RCC_GetSysClockFreq+0x184>)
 8002d7e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002d80:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002d84:	4618      	mov	r0, r3
 8002d86:	3740      	adds	r7, #64	@ 0x40
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002d8e:	bf00      	nop
 8002d90:	40023800 	.word	0x40023800
 8002d94:	00f42400 	.word	0x00f42400
 8002d98:	017d7840 	.word	0x017d7840

08002d9c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002da0:	4b03      	ldr	r3, [pc, #12]	@ (8002db0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002da2:	681b      	ldr	r3, [r3, #0]
}
 8002da4:	4618      	mov	r0, r3
 8002da6:	46bd      	mov	sp, r7
 8002da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dac:	4770      	bx	lr
 8002dae:	bf00      	nop
 8002db0:	20000000 	.word	0x20000000

08002db4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002db8:	f7ff fff0 	bl	8002d9c <HAL_RCC_GetHCLKFreq>
 8002dbc:	4602      	mov	r2, r0
 8002dbe:	4b05      	ldr	r3, [pc, #20]	@ (8002dd4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002dc0:	689b      	ldr	r3, [r3, #8]
 8002dc2:	0a9b      	lsrs	r3, r3, #10
 8002dc4:	f003 0307 	and.w	r3, r3, #7
 8002dc8:	4903      	ldr	r1, [pc, #12]	@ (8002dd8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002dca:	5ccb      	ldrb	r3, [r1, r3]
 8002dcc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	bd80      	pop	{r7, pc}
 8002dd4:	40023800 	.word	0x40023800
 8002dd8:	08003fa8 	.word	0x08003fa8

08002ddc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002de0:	f7ff ffdc 	bl	8002d9c <HAL_RCC_GetHCLKFreq>
 8002de4:	4602      	mov	r2, r0
 8002de6:	4b05      	ldr	r3, [pc, #20]	@ (8002dfc <HAL_RCC_GetPCLK2Freq+0x20>)
 8002de8:	689b      	ldr	r3, [r3, #8]
 8002dea:	0b5b      	lsrs	r3, r3, #13
 8002dec:	f003 0307 	and.w	r3, r3, #7
 8002df0:	4903      	ldr	r1, [pc, #12]	@ (8002e00 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002df2:	5ccb      	ldrb	r3, [r1, r3]
 8002df4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002df8:	4618      	mov	r0, r3
 8002dfa:	bd80      	pop	{r7, pc}
 8002dfc:	40023800 	.word	0x40023800
 8002e00:	08003fa8 	.word	0x08003fa8

08002e04 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b082      	sub	sp, #8
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d101      	bne.n	8002e16 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002e12:	2301      	movs	r3, #1
 8002e14:	e042      	b.n	8002e9c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002e1c:	b2db      	uxtb	r3, r3
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d106      	bne.n	8002e30 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2200      	movs	r2, #0
 8002e26:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002e2a:	6878      	ldr	r0, [r7, #4]
 8002e2c:	f7fd fee0 	bl	8000bf0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2224      	movs	r2, #36	@ 0x24
 8002e34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	68da      	ldr	r2, [r3, #12]
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002e46:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002e48:	6878      	ldr	r0, [r7, #4]
 8002e4a:	f000 f973 	bl	8003134 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	691a      	ldr	r2, [r3, #16]
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002e5c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	695a      	ldr	r2, [r3, #20]
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002e6c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	68da      	ldr	r2, [r3, #12]
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002e7c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2200      	movs	r2, #0
 8002e82:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2220      	movs	r2, #32
 8002e88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2220      	movs	r2, #32
 8002e90:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2200      	movs	r2, #0
 8002e98:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002e9a:	2300      	movs	r3, #0
}
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	3708      	adds	r7, #8
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	bd80      	pop	{r7, pc}

08002ea4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b08a      	sub	sp, #40	@ 0x28
 8002ea8:	af02      	add	r7, sp, #8
 8002eaa:	60f8      	str	r0, [r7, #12]
 8002eac:	60b9      	str	r1, [r7, #8]
 8002eae:	603b      	str	r3, [r7, #0]
 8002eb0:	4613      	mov	r3, r2
 8002eb2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002ebe:	b2db      	uxtb	r3, r3
 8002ec0:	2b20      	cmp	r3, #32
 8002ec2:	d175      	bne.n	8002fb0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ec4:	68bb      	ldr	r3, [r7, #8]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d002      	beq.n	8002ed0 <HAL_UART_Transmit+0x2c>
 8002eca:	88fb      	ldrh	r3, [r7, #6]
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d101      	bne.n	8002ed4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002ed0:	2301      	movs	r3, #1
 8002ed2:	e06e      	b.n	8002fb2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	2221      	movs	r2, #33	@ 0x21
 8002ede:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002ee2:	f7fd ffd5 	bl	8000e90 <HAL_GetTick>
 8002ee6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	88fa      	ldrh	r2, [r7, #6]
 8002eec:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	88fa      	ldrh	r2, [r7, #6]
 8002ef2:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	689b      	ldr	r3, [r3, #8]
 8002ef8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002efc:	d108      	bne.n	8002f10 <HAL_UART_Transmit+0x6c>
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	691b      	ldr	r3, [r3, #16]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d104      	bne.n	8002f10 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002f06:	2300      	movs	r3, #0
 8002f08:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002f0a:	68bb      	ldr	r3, [r7, #8]
 8002f0c:	61bb      	str	r3, [r7, #24]
 8002f0e:	e003      	b.n	8002f18 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002f10:	68bb      	ldr	r3, [r7, #8]
 8002f12:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002f14:	2300      	movs	r3, #0
 8002f16:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002f18:	e02e      	b.n	8002f78 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	9300      	str	r3, [sp, #0]
 8002f1e:	697b      	ldr	r3, [r7, #20]
 8002f20:	2200      	movs	r2, #0
 8002f22:	2180      	movs	r1, #128	@ 0x80
 8002f24:	68f8      	ldr	r0, [r7, #12]
 8002f26:	f000 f848 	bl	8002fba <UART_WaitOnFlagUntilTimeout>
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d005      	beq.n	8002f3c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	2220      	movs	r2, #32
 8002f34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002f38:	2303      	movs	r3, #3
 8002f3a:	e03a      	b.n	8002fb2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002f3c:	69fb      	ldr	r3, [r7, #28]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d10b      	bne.n	8002f5a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002f42:	69bb      	ldr	r3, [r7, #24]
 8002f44:	881b      	ldrh	r3, [r3, #0]
 8002f46:	461a      	mov	r2, r3
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002f50:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002f52:	69bb      	ldr	r3, [r7, #24]
 8002f54:	3302      	adds	r3, #2
 8002f56:	61bb      	str	r3, [r7, #24]
 8002f58:	e007      	b.n	8002f6a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002f5a:	69fb      	ldr	r3, [r7, #28]
 8002f5c:	781a      	ldrb	r2, [r3, #0]
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002f64:	69fb      	ldr	r3, [r7, #28]
 8002f66:	3301      	adds	r3, #1
 8002f68:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002f6e:	b29b      	uxth	r3, r3
 8002f70:	3b01      	subs	r3, #1
 8002f72:	b29a      	uxth	r2, r3
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002f7c:	b29b      	uxth	r3, r3
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d1cb      	bne.n	8002f1a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	9300      	str	r3, [sp, #0]
 8002f86:	697b      	ldr	r3, [r7, #20]
 8002f88:	2200      	movs	r2, #0
 8002f8a:	2140      	movs	r1, #64	@ 0x40
 8002f8c:	68f8      	ldr	r0, [r7, #12]
 8002f8e:	f000 f814 	bl	8002fba <UART_WaitOnFlagUntilTimeout>
 8002f92:	4603      	mov	r3, r0
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d005      	beq.n	8002fa4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	2220      	movs	r2, #32
 8002f9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002fa0:	2303      	movs	r3, #3
 8002fa2:	e006      	b.n	8002fb2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	2220      	movs	r2, #32
 8002fa8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002fac:	2300      	movs	r3, #0
 8002fae:	e000      	b.n	8002fb2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002fb0:	2302      	movs	r3, #2
  }
}
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	3720      	adds	r7, #32
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bd80      	pop	{r7, pc}

08002fba <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002fba:	b580      	push	{r7, lr}
 8002fbc:	b086      	sub	sp, #24
 8002fbe:	af00      	add	r7, sp, #0
 8002fc0:	60f8      	str	r0, [r7, #12]
 8002fc2:	60b9      	str	r1, [r7, #8]
 8002fc4:	603b      	str	r3, [r7, #0]
 8002fc6:	4613      	mov	r3, r2
 8002fc8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002fca:	e03b      	b.n	8003044 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002fcc:	6a3b      	ldr	r3, [r7, #32]
 8002fce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fd2:	d037      	beq.n	8003044 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fd4:	f7fd ff5c 	bl	8000e90 <HAL_GetTick>
 8002fd8:	4602      	mov	r2, r0
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	1ad3      	subs	r3, r2, r3
 8002fde:	6a3a      	ldr	r2, [r7, #32]
 8002fe0:	429a      	cmp	r2, r3
 8002fe2:	d302      	bcc.n	8002fea <UART_WaitOnFlagUntilTimeout+0x30>
 8002fe4:	6a3b      	ldr	r3, [r7, #32]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d101      	bne.n	8002fee <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002fea:	2303      	movs	r3, #3
 8002fec:	e03a      	b.n	8003064 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	68db      	ldr	r3, [r3, #12]
 8002ff4:	f003 0304 	and.w	r3, r3, #4
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d023      	beq.n	8003044 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002ffc:	68bb      	ldr	r3, [r7, #8]
 8002ffe:	2b80      	cmp	r3, #128	@ 0x80
 8003000:	d020      	beq.n	8003044 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003002:	68bb      	ldr	r3, [r7, #8]
 8003004:	2b40      	cmp	r3, #64	@ 0x40
 8003006:	d01d      	beq.n	8003044 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f003 0308 	and.w	r3, r3, #8
 8003012:	2b08      	cmp	r3, #8
 8003014:	d116      	bne.n	8003044 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003016:	2300      	movs	r3, #0
 8003018:	617b      	str	r3, [r7, #20]
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	617b      	str	r3, [r7, #20]
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	617b      	str	r3, [r7, #20]
 800302a:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800302c:	68f8      	ldr	r0, [r7, #12]
 800302e:	f000 f81d 	bl	800306c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	2208      	movs	r2, #8
 8003036:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	2200      	movs	r2, #0
 800303c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003040:	2301      	movs	r3, #1
 8003042:	e00f      	b.n	8003064 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	681a      	ldr	r2, [r3, #0]
 800304a:	68bb      	ldr	r3, [r7, #8]
 800304c:	4013      	ands	r3, r2
 800304e:	68ba      	ldr	r2, [r7, #8]
 8003050:	429a      	cmp	r2, r3
 8003052:	bf0c      	ite	eq
 8003054:	2301      	moveq	r3, #1
 8003056:	2300      	movne	r3, #0
 8003058:	b2db      	uxtb	r3, r3
 800305a:	461a      	mov	r2, r3
 800305c:	79fb      	ldrb	r3, [r7, #7]
 800305e:	429a      	cmp	r2, r3
 8003060:	d0b4      	beq.n	8002fcc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003062:	2300      	movs	r3, #0
}
 8003064:	4618      	mov	r0, r3
 8003066:	3718      	adds	r7, #24
 8003068:	46bd      	mov	sp, r7
 800306a:	bd80      	pop	{r7, pc}

0800306c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800306c:	b480      	push	{r7}
 800306e:	b095      	sub	sp, #84	@ 0x54
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	330c      	adds	r3, #12
 800307a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800307c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800307e:	e853 3f00 	ldrex	r3, [r3]
 8003082:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003084:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003086:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800308a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	330c      	adds	r3, #12
 8003092:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003094:	643a      	str	r2, [r7, #64]	@ 0x40
 8003096:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003098:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800309a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800309c:	e841 2300 	strex	r3, r2, [r1]
 80030a0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80030a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d1e5      	bne.n	8003074 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	3314      	adds	r3, #20
 80030ae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030b0:	6a3b      	ldr	r3, [r7, #32]
 80030b2:	e853 3f00 	ldrex	r3, [r3]
 80030b6:	61fb      	str	r3, [r7, #28]
   return(result);
 80030b8:	69fb      	ldr	r3, [r7, #28]
 80030ba:	f023 0301 	bic.w	r3, r3, #1
 80030be:	64bb      	str	r3, [r7, #72]	@ 0x48
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	3314      	adds	r3, #20
 80030c6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80030c8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80030ca:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030cc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80030ce:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80030d0:	e841 2300 	strex	r3, r2, [r1]
 80030d4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80030d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d1e5      	bne.n	80030a8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030e0:	2b01      	cmp	r3, #1
 80030e2:	d119      	bne.n	8003118 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	330c      	adds	r3, #12
 80030ea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	e853 3f00 	ldrex	r3, [r3]
 80030f2:	60bb      	str	r3, [r7, #8]
   return(result);
 80030f4:	68bb      	ldr	r3, [r7, #8]
 80030f6:	f023 0310 	bic.w	r3, r3, #16
 80030fa:	647b      	str	r3, [r7, #68]	@ 0x44
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	330c      	adds	r3, #12
 8003102:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003104:	61ba      	str	r2, [r7, #24]
 8003106:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003108:	6979      	ldr	r1, [r7, #20]
 800310a:	69ba      	ldr	r2, [r7, #24]
 800310c:	e841 2300 	strex	r3, r2, [r1]
 8003110:	613b      	str	r3, [r7, #16]
   return(result);
 8003112:	693b      	ldr	r3, [r7, #16]
 8003114:	2b00      	cmp	r3, #0
 8003116:	d1e5      	bne.n	80030e4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2220      	movs	r2, #32
 800311c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2200      	movs	r2, #0
 8003124:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003126:	bf00      	nop
 8003128:	3754      	adds	r7, #84	@ 0x54
 800312a:	46bd      	mov	sp, r7
 800312c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003130:	4770      	bx	lr
	...

08003134 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003134:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003138:	b0c0      	sub	sp, #256	@ 0x100
 800313a:	af00      	add	r7, sp, #0
 800313c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003140:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	691b      	ldr	r3, [r3, #16]
 8003148:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800314c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003150:	68d9      	ldr	r1, [r3, #12]
 8003152:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003156:	681a      	ldr	r2, [r3, #0]
 8003158:	ea40 0301 	orr.w	r3, r0, r1
 800315c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800315e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003162:	689a      	ldr	r2, [r3, #8]
 8003164:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003168:	691b      	ldr	r3, [r3, #16]
 800316a:	431a      	orrs	r2, r3
 800316c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003170:	695b      	ldr	r3, [r3, #20]
 8003172:	431a      	orrs	r2, r3
 8003174:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003178:	69db      	ldr	r3, [r3, #28]
 800317a:	4313      	orrs	r3, r2
 800317c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003180:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	68db      	ldr	r3, [r3, #12]
 8003188:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800318c:	f021 010c 	bic.w	r1, r1, #12
 8003190:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003194:	681a      	ldr	r2, [r3, #0]
 8003196:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800319a:	430b      	orrs	r3, r1
 800319c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800319e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	695b      	ldr	r3, [r3, #20]
 80031a6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80031aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031ae:	6999      	ldr	r1, [r3, #24]
 80031b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031b4:	681a      	ldr	r2, [r3, #0]
 80031b6:	ea40 0301 	orr.w	r3, r0, r1
 80031ba:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80031bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031c0:	681a      	ldr	r2, [r3, #0]
 80031c2:	4b8f      	ldr	r3, [pc, #572]	@ (8003400 <UART_SetConfig+0x2cc>)
 80031c4:	429a      	cmp	r2, r3
 80031c6:	d005      	beq.n	80031d4 <UART_SetConfig+0xa0>
 80031c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031cc:	681a      	ldr	r2, [r3, #0]
 80031ce:	4b8d      	ldr	r3, [pc, #564]	@ (8003404 <UART_SetConfig+0x2d0>)
 80031d0:	429a      	cmp	r2, r3
 80031d2:	d104      	bne.n	80031de <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80031d4:	f7ff fe02 	bl	8002ddc <HAL_RCC_GetPCLK2Freq>
 80031d8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80031dc:	e003      	b.n	80031e6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80031de:	f7ff fde9 	bl	8002db4 <HAL_RCC_GetPCLK1Freq>
 80031e2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80031e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031ea:	69db      	ldr	r3, [r3, #28]
 80031ec:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80031f0:	f040 810c 	bne.w	800340c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80031f4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80031f8:	2200      	movs	r2, #0
 80031fa:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80031fe:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003202:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003206:	4622      	mov	r2, r4
 8003208:	462b      	mov	r3, r5
 800320a:	1891      	adds	r1, r2, r2
 800320c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800320e:	415b      	adcs	r3, r3
 8003210:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003212:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003216:	4621      	mov	r1, r4
 8003218:	eb12 0801 	adds.w	r8, r2, r1
 800321c:	4629      	mov	r1, r5
 800321e:	eb43 0901 	adc.w	r9, r3, r1
 8003222:	f04f 0200 	mov.w	r2, #0
 8003226:	f04f 0300 	mov.w	r3, #0
 800322a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800322e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003232:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003236:	4690      	mov	r8, r2
 8003238:	4699      	mov	r9, r3
 800323a:	4623      	mov	r3, r4
 800323c:	eb18 0303 	adds.w	r3, r8, r3
 8003240:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003244:	462b      	mov	r3, r5
 8003246:	eb49 0303 	adc.w	r3, r9, r3
 800324a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800324e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	2200      	movs	r2, #0
 8003256:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800325a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800325e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003262:	460b      	mov	r3, r1
 8003264:	18db      	adds	r3, r3, r3
 8003266:	653b      	str	r3, [r7, #80]	@ 0x50
 8003268:	4613      	mov	r3, r2
 800326a:	eb42 0303 	adc.w	r3, r2, r3
 800326e:	657b      	str	r3, [r7, #84]	@ 0x54
 8003270:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003274:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003278:	f7fd f812 	bl	80002a0 <__aeabi_uldivmod>
 800327c:	4602      	mov	r2, r0
 800327e:	460b      	mov	r3, r1
 8003280:	4b61      	ldr	r3, [pc, #388]	@ (8003408 <UART_SetConfig+0x2d4>)
 8003282:	fba3 2302 	umull	r2, r3, r3, r2
 8003286:	095b      	lsrs	r3, r3, #5
 8003288:	011c      	lsls	r4, r3, #4
 800328a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800328e:	2200      	movs	r2, #0
 8003290:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003294:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003298:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800329c:	4642      	mov	r2, r8
 800329e:	464b      	mov	r3, r9
 80032a0:	1891      	adds	r1, r2, r2
 80032a2:	64b9      	str	r1, [r7, #72]	@ 0x48
 80032a4:	415b      	adcs	r3, r3
 80032a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80032a8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80032ac:	4641      	mov	r1, r8
 80032ae:	eb12 0a01 	adds.w	sl, r2, r1
 80032b2:	4649      	mov	r1, r9
 80032b4:	eb43 0b01 	adc.w	fp, r3, r1
 80032b8:	f04f 0200 	mov.w	r2, #0
 80032bc:	f04f 0300 	mov.w	r3, #0
 80032c0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80032c4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80032c8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80032cc:	4692      	mov	sl, r2
 80032ce:	469b      	mov	fp, r3
 80032d0:	4643      	mov	r3, r8
 80032d2:	eb1a 0303 	adds.w	r3, sl, r3
 80032d6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80032da:	464b      	mov	r3, r9
 80032dc:	eb4b 0303 	adc.w	r3, fp, r3
 80032e0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80032e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032e8:	685b      	ldr	r3, [r3, #4]
 80032ea:	2200      	movs	r2, #0
 80032ec:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80032f0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80032f4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80032f8:	460b      	mov	r3, r1
 80032fa:	18db      	adds	r3, r3, r3
 80032fc:	643b      	str	r3, [r7, #64]	@ 0x40
 80032fe:	4613      	mov	r3, r2
 8003300:	eb42 0303 	adc.w	r3, r2, r3
 8003304:	647b      	str	r3, [r7, #68]	@ 0x44
 8003306:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800330a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800330e:	f7fc ffc7 	bl	80002a0 <__aeabi_uldivmod>
 8003312:	4602      	mov	r2, r0
 8003314:	460b      	mov	r3, r1
 8003316:	4611      	mov	r1, r2
 8003318:	4b3b      	ldr	r3, [pc, #236]	@ (8003408 <UART_SetConfig+0x2d4>)
 800331a:	fba3 2301 	umull	r2, r3, r3, r1
 800331e:	095b      	lsrs	r3, r3, #5
 8003320:	2264      	movs	r2, #100	@ 0x64
 8003322:	fb02 f303 	mul.w	r3, r2, r3
 8003326:	1acb      	subs	r3, r1, r3
 8003328:	00db      	lsls	r3, r3, #3
 800332a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800332e:	4b36      	ldr	r3, [pc, #216]	@ (8003408 <UART_SetConfig+0x2d4>)
 8003330:	fba3 2302 	umull	r2, r3, r3, r2
 8003334:	095b      	lsrs	r3, r3, #5
 8003336:	005b      	lsls	r3, r3, #1
 8003338:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800333c:	441c      	add	r4, r3
 800333e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003342:	2200      	movs	r2, #0
 8003344:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003348:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800334c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003350:	4642      	mov	r2, r8
 8003352:	464b      	mov	r3, r9
 8003354:	1891      	adds	r1, r2, r2
 8003356:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003358:	415b      	adcs	r3, r3
 800335a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800335c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003360:	4641      	mov	r1, r8
 8003362:	1851      	adds	r1, r2, r1
 8003364:	6339      	str	r1, [r7, #48]	@ 0x30
 8003366:	4649      	mov	r1, r9
 8003368:	414b      	adcs	r3, r1
 800336a:	637b      	str	r3, [r7, #52]	@ 0x34
 800336c:	f04f 0200 	mov.w	r2, #0
 8003370:	f04f 0300 	mov.w	r3, #0
 8003374:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003378:	4659      	mov	r1, fp
 800337a:	00cb      	lsls	r3, r1, #3
 800337c:	4651      	mov	r1, sl
 800337e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003382:	4651      	mov	r1, sl
 8003384:	00ca      	lsls	r2, r1, #3
 8003386:	4610      	mov	r0, r2
 8003388:	4619      	mov	r1, r3
 800338a:	4603      	mov	r3, r0
 800338c:	4642      	mov	r2, r8
 800338e:	189b      	adds	r3, r3, r2
 8003390:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003394:	464b      	mov	r3, r9
 8003396:	460a      	mov	r2, r1
 8003398:	eb42 0303 	adc.w	r3, r2, r3
 800339c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80033a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	2200      	movs	r2, #0
 80033a8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80033ac:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80033b0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80033b4:	460b      	mov	r3, r1
 80033b6:	18db      	adds	r3, r3, r3
 80033b8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80033ba:	4613      	mov	r3, r2
 80033bc:	eb42 0303 	adc.w	r3, r2, r3
 80033c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80033c2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80033c6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80033ca:	f7fc ff69 	bl	80002a0 <__aeabi_uldivmod>
 80033ce:	4602      	mov	r2, r0
 80033d0:	460b      	mov	r3, r1
 80033d2:	4b0d      	ldr	r3, [pc, #52]	@ (8003408 <UART_SetConfig+0x2d4>)
 80033d4:	fba3 1302 	umull	r1, r3, r3, r2
 80033d8:	095b      	lsrs	r3, r3, #5
 80033da:	2164      	movs	r1, #100	@ 0x64
 80033dc:	fb01 f303 	mul.w	r3, r1, r3
 80033e0:	1ad3      	subs	r3, r2, r3
 80033e2:	00db      	lsls	r3, r3, #3
 80033e4:	3332      	adds	r3, #50	@ 0x32
 80033e6:	4a08      	ldr	r2, [pc, #32]	@ (8003408 <UART_SetConfig+0x2d4>)
 80033e8:	fba2 2303 	umull	r2, r3, r2, r3
 80033ec:	095b      	lsrs	r3, r3, #5
 80033ee:	f003 0207 	and.w	r2, r3, #7
 80033f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4422      	add	r2, r4
 80033fa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80033fc:	e106      	b.n	800360c <UART_SetConfig+0x4d8>
 80033fe:	bf00      	nop
 8003400:	40011000 	.word	0x40011000
 8003404:	40011400 	.word	0x40011400
 8003408:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800340c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003410:	2200      	movs	r2, #0
 8003412:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003416:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800341a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800341e:	4642      	mov	r2, r8
 8003420:	464b      	mov	r3, r9
 8003422:	1891      	adds	r1, r2, r2
 8003424:	6239      	str	r1, [r7, #32]
 8003426:	415b      	adcs	r3, r3
 8003428:	627b      	str	r3, [r7, #36]	@ 0x24
 800342a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800342e:	4641      	mov	r1, r8
 8003430:	1854      	adds	r4, r2, r1
 8003432:	4649      	mov	r1, r9
 8003434:	eb43 0501 	adc.w	r5, r3, r1
 8003438:	f04f 0200 	mov.w	r2, #0
 800343c:	f04f 0300 	mov.w	r3, #0
 8003440:	00eb      	lsls	r3, r5, #3
 8003442:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003446:	00e2      	lsls	r2, r4, #3
 8003448:	4614      	mov	r4, r2
 800344a:	461d      	mov	r5, r3
 800344c:	4643      	mov	r3, r8
 800344e:	18e3      	adds	r3, r4, r3
 8003450:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003454:	464b      	mov	r3, r9
 8003456:	eb45 0303 	adc.w	r3, r5, r3
 800345a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800345e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003462:	685b      	ldr	r3, [r3, #4]
 8003464:	2200      	movs	r2, #0
 8003466:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800346a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800346e:	f04f 0200 	mov.w	r2, #0
 8003472:	f04f 0300 	mov.w	r3, #0
 8003476:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800347a:	4629      	mov	r1, r5
 800347c:	008b      	lsls	r3, r1, #2
 800347e:	4621      	mov	r1, r4
 8003480:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003484:	4621      	mov	r1, r4
 8003486:	008a      	lsls	r2, r1, #2
 8003488:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800348c:	f7fc ff08 	bl	80002a0 <__aeabi_uldivmod>
 8003490:	4602      	mov	r2, r0
 8003492:	460b      	mov	r3, r1
 8003494:	4b60      	ldr	r3, [pc, #384]	@ (8003618 <UART_SetConfig+0x4e4>)
 8003496:	fba3 2302 	umull	r2, r3, r3, r2
 800349a:	095b      	lsrs	r3, r3, #5
 800349c:	011c      	lsls	r4, r3, #4
 800349e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80034a2:	2200      	movs	r2, #0
 80034a4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80034a8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80034ac:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80034b0:	4642      	mov	r2, r8
 80034b2:	464b      	mov	r3, r9
 80034b4:	1891      	adds	r1, r2, r2
 80034b6:	61b9      	str	r1, [r7, #24]
 80034b8:	415b      	adcs	r3, r3
 80034ba:	61fb      	str	r3, [r7, #28]
 80034bc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80034c0:	4641      	mov	r1, r8
 80034c2:	1851      	adds	r1, r2, r1
 80034c4:	6139      	str	r1, [r7, #16]
 80034c6:	4649      	mov	r1, r9
 80034c8:	414b      	adcs	r3, r1
 80034ca:	617b      	str	r3, [r7, #20]
 80034cc:	f04f 0200 	mov.w	r2, #0
 80034d0:	f04f 0300 	mov.w	r3, #0
 80034d4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80034d8:	4659      	mov	r1, fp
 80034da:	00cb      	lsls	r3, r1, #3
 80034dc:	4651      	mov	r1, sl
 80034de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80034e2:	4651      	mov	r1, sl
 80034e4:	00ca      	lsls	r2, r1, #3
 80034e6:	4610      	mov	r0, r2
 80034e8:	4619      	mov	r1, r3
 80034ea:	4603      	mov	r3, r0
 80034ec:	4642      	mov	r2, r8
 80034ee:	189b      	adds	r3, r3, r2
 80034f0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80034f4:	464b      	mov	r3, r9
 80034f6:	460a      	mov	r2, r1
 80034f8:	eb42 0303 	adc.w	r3, r2, r3
 80034fc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003500:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003504:	685b      	ldr	r3, [r3, #4]
 8003506:	2200      	movs	r2, #0
 8003508:	67bb      	str	r3, [r7, #120]	@ 0x78
 800350a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800350c:	f04f 0200 	mov.w	r2, #0
 8003510:	f04f 0300 	mov.w	r3, #0
 8003514:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003518:	4649      	mov	r1, r9
 800351a:	008b      	lsls	r3, r1, #2
 800351c:	4641      	mov	r1, r8
 800351e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003522:	4641      	mov	r1, r8
 8003524:	008a      	lsls	r2, r1, #2
 8003526:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800352a:	f7fc feb9 	bl	80002a0 <__aeabi_uldivmod>
 800352e:	4602      	mov	r2, r0
 8003530:	460b      	mov	r3, r1
 8003532:	4611      	mov	r1, r2
 8003534:	4b38      	ldr	r3, [pc, #224]	@ (8003618 <UART_SetConfig+0x4e4>)
 8003536:	fba3 2301 	umull	r2, r3, r3, r1
 800353a:	095b      	lsrs	r3, r3, #5
 800353c:	2264      	movs	r2, #100	@ 0x64
 800353e:	fb02 f303 	mul.w	r3, r2, r3
 8003542:	1acb      	subs	r3, r1, r3
 8003544:	011b      	lsls	r3, r3, #4
 8003546:	3332      	adds	r3, #50	@ 0x32
 8003548:	4a33      	ldr	r2, [pc, #204]	@ (8003618 <UART_SetConfig+0x4e4>)
 800354a:	fba2 2303 	umull	r2, r3, r2, r3
 800354e:	095b      	lsrs	r3, r3, #5
 8003550:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003554:	441c      	add	r4, r3
 8003556:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800355a:	2200      	movs	r2, #0
 800355c:	673b      	str	r3, [r7, #112]	@ 0x70
 800355e:	677a      	str	r2, [r7, #116]	@ 0x74
 8003560:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003564:	4642      	mov	r2, r8
 8003566:	464b      	mov	r3, r9
 8003568:	1891      	adds	r1, r2, r2
 800356a:	60b9      	str	r1, [r7, #8]
 800356c:	415b      	adcs	r3, r3
 800356e:	60fb      	str	r3, [r7, #12]
 8003570:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003574:	4641      	mov	r1, r8
 8003576:	1851      	adds	r1, r2, r1
 8003578:	6039      	str	r1, [r7, #0]
 800357a:	4649      	mov	r1, r9
 800357c:	414b      	adcs	r3, r1
 800357e:	607b      	str	r3, [r7, #4]
 8003580:	f04f 0200 	mov.w	r2, #0
 8003584:	f04f 0300 	mov.w	r3, #0
 8003588:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800358c:	4659      	mov	r1, fp
 800358e:	00cb      	lsls	r3, r1, #3
 8003590:	4651      	mov	r1, sl
 8003592:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003596:	4651      	mov	r1, sl
 8003598:	00ca      	lsls	r2, r1, #3
 800359a:	4610      	mov	r0, r2
 800359c:	4619      	mov	r1, r3
 800359e:	4603      	mov	r3, r0
 80035a0:	4642      	mov	r2, r8
 80035a2:	189b      	adds	r3, r3, r2
 80035a4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80035a6:	464b      	mov	r3, r9
 80035a8:	460a      	mov	r2, r1
 80035aa:	eb42 0303 	adc.w	r3, r2, r3
 80035ae:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80035b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80035b4:	685b      	ldr	r3, [r3, #4]
 80035b6:	2200      	movs	r2, #0
 80035b8:	663b      	str	r3, [r7, #96]	@ 0x60
 80035ba:	667a      	str	r2, [r7, #100]	@ 0x64
 80035bc:	f04f 0200 	mov.w	r2, #0
 80035c0:	f04f 0300 	mov.w	r3, #0
 80035c4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80035c8:	4649      	mov	r1, r9
 80035ca:	008b      	lsls	r3, r1, #2
 80035cc:	4641      	mov	r1, r8
 80035ce:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80035d2:	4641      	mov	r1, r8
 80035d4:	008a      	lsls	r2, r1, #2
 80035d6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80035da:	f7fc fe61 	bl	80002a0 <__aeabi_uldivmod>
 80035de:	4602      	mov	r2, r0
 80035e0:	460b      	mov	r3, r1
 80035e2:	4b0d      	ldr	r3, [pc, #52]	@ (8003618 <UART_SetConfig+0x4e4>)
 80035e4:	fba3 1302 	umull	r1, r3, r3, r2
 80035e8:	095b      	lsrs	r3, r3, #5
 80035ea:	2164      	movs	r1, #100	@ 0x64
 80035ec:	fb01 f303 	mul.w	r3, r1, r3
 80035f0:	1ad3      	subs	r3, r2, r3
 80035f2:	011b      	lsls	r3, r3, #4
 80035f4:	3332      	adds	r3, #50	@ 0x32
 80035f6:	4a08      	ldr	r2, [pc, #32]	@ (8003618 <UART_SetConfig+0x4e4>)
 80035f8:	fba2 2303 	umull	r2, r3, r2, r3
 80035fc:	095b      	lsrs	r3, r3, #5
 80035fe:	f003 020f 	and.w	r2, r3, #15
 8003602:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4422      	add	r2, r4
 800360a:	609a      	str	r2, [r3, #8]
}
 800360c:	bf00      	nop
 800360e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003612:	46bd      	mov	sp, r7
 8003614:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003618:	51eb851f 	.word	0x51eb851f

0800361c <siprintf>:
 800361c:	b40e      	push	{r1, r2, r3}
 800361e:	b510      	push	{r4, lr}
 8003620:	b09d      	sub	sp, #116	@ 0x74
 8003622:	ab1f      	add	r3, sp, #124	@ 0x7c
 8003624:	9002      	str	r0, [sp, #8]
 8003626:	9006      	str	r0, [sp, #24]
 8003628:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800362c:	480a      	ldr	r0, [pc, #40]	@ (8003658 <siprintf+0x3c>)
 800362e:	9107      	str	r1, [sp, #28]
 8003630:	9104      	str	r1, [sp, #16]
 8003632:	490a      	ldr	r1, [pc, #40]	@ (800365c <siprintf+0x40>)
 8003634:	f853 2b04 	ldr.w	r2, [r3], #4
 8003638:	9105      	str	r1, [sp, #20]
 800363a:	2400      	movs	r4, #0
 800363c:	a902      	add	r1, sp, #8
 800363e:	6800      	ldr	r0, [r0, #0]
 8003640:	9301      	str	r3, [sp, #4]
 8003642:	941b      	str	r4, [sp, #108]	@ 0x6c
 8003644:	f000 f994 	bl	8003970 <_svfiprintf_r>
 8003648:	9b02      	ldr	r3, [sp, #8]
 800364a:	701c      	strb	r4, [r3, #0]
 800364c:	b01d      	add	sp, #116	@ 0x74
 800364e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003652:	b003      	add	sp, #12
 8003654:	4770      	bx	lr
 8003656:	bf00      	nop
 8003658:	2000000c 	.word	0x2000000c
 800365c:	ffff0208 	.word	0xffff0208

08003660 <memset>:
 8003660:	4402      	add	r2, r0
 8003662:	4603      	mov	r3, r0
 8003664:	4293      	cmp	r3, r2
 8003666:	d100      	bne.n	800366a <memset+0xa>
 8003668:	4770      	bx	lr
 800366a:	f803 1b01 	strb.w	r1, [r3], #1
 800366e:	e7f9      	b.n	8003664 <memset+0x4>

08003670 <__errno>:
 8003670:	4b01      	ldr	r3, [pc, #4]	@ (8003678 <__errno+0x8>)
 8003672:	6818      	ldr	r0, [r3, #0]
 8003674:	4770      	bx	lr
 8003676:	bf00      	nop
 8003678:	2000000c 	.word	0x2000000c

0800367c <__libc_init_array>:
 800367c:	b570      	push	{r4, r5, r6, lr}
 800367e:	4d0d      	ldr	r5, [pc, #52]	@ (80036b4 <__libc_init_array+0x38>)
 8003680:	4c0d      	ldr	r4, [pc, #52]	@ (80036b8 <__libc_init_array+0x3c>)
 8003682:	1b64      	subs	r4, r4, r5
 8003684:	10a4      	asrs	r4, r4, #2
 8003686:	2600      	movs	r6, #0
 8003688:	42a6      	cmp	r6, r4
 800368a:	d109      	bne.n	80036a0 <__libc_init_array+0x24>
 800368c:	4d0b      	ldr	r5, [pc, #44]	@ (80036bc <__libc_init_array+0x40>)
 800368e:	4c0c      	ldr	r4, [pc, #48]	@ (80036c0 <__libc_init_array+0x44>)
 8003690:	f000 fc64 	bl	8003f5c <_init>
 8003694:	1b64      	subs	r4, r4, r5
 8003696:	10a4      	asrs	r4, r4, #2
 8003698:	2600      	movs	r6, #0
 800369a:	42a6      	cmp	r6, r4
 800369c:	d105      	bne.n	80036aa <__libc_init_array+0x2e>
 800369e:	bd70      	pop	{r4, r5, r6, pc}
 80036a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80036a4:	4798      	blx	r3
 80036a6:	3601      	adds	r6, #1
 80036a8:	e7ee      	b.n	8003688 <__libc_init_array+0xc>
 80036aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80036ae:	4798      	blx	r3
 80036b0:	3601      	adds	r6, #1
 80036b2:	e7f2      	b.n	800369a <__libc_init_array+0x1e>
 80036b4:	08003fec 	.word	0x08003fec
 80036b8:	08003fec 	.word	0x08003fec
 80036bc:	08003fec 	.word	0x08003fec
 80036c0:	08003ff0 	.word	0x08003ff0

080036c4 <__retarget_lock_acquire_recursive>:
 80036c4:	4770      	bx	lr

080036c6 <__retarget_lock_release_recursive>:
 80036c6:	4770      	bx	lr

080036c8 <_free_r>:
 80036c8:	b538      	push	{r3, r4, r5, lr}
 80036ca:	4605      	mov	r5, r0
 80036cc:	2900      	cmp	r1, #0
 80036ce:	d041      	beq.n	8003754 <_free_r+0x8c>
 80036d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80036d4:	1f0c      	subs	r4, r1, #4
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	bfb8      	it	lt
 80036da:	18e4      	addlt	r4, r4, r3
 80036dc:	f000 f8e0 	bl	80038a0 <__malloc_lock>
 80036e0:	4a1d      	ldr	r2, [pc, #116]	@ (8003758 <_free_r+0x90>)
 80036e2:	6813      	ldr	r3, [r2, #0]
 80036e4:	b933      	cbnz	r3, 80036f4 <_free_r+0x2c>
 80036e6:	6063      	str	r3, [r4, #4]
 80036e8:	6014      	str	r4, [r2, #0]
 80036ea:	4628      	mov	r0, r5
 80036ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80036f0:	f000 b8dc 	b.w	80038ac <__malloc_unlock>
 80036f4:	42a3      	cmp	r3, r4
 80036f6:	d908      	bls.n	800370a <_free_r+0x42>
 80036f8:	6820      	ldr	r0, [r4, #0]
 80036fa:	1821      	adds	r1, r4, r0
 80036fc:	428b      	cmp	r3, r1
 80036fe:	bf01      	itttt	eq
 8003700:	6819      	ldreq	r1, [r3, #0]
 8003702:	685b      	ldreq	r3, [r3, #4]
 8003704:	1809      	addeq	r1, r1, r0
 8003706:	6021      	streq	r1, [r4, #0]
 8003708:	e7ed      	b.n	80036e6 <_free_r+0x1e>
 800370a:	461a      	mov	r2, r3
 800370c:	685b      	ldr	r3, [r3, #4]
 800370e:	b10b      	cbz	r3, 8003714 <_free_r+0x4c>
 8003710:	42a3      	cmp	r3, r4
 8003712:	d9fa      	bls.n	800370a <_free_r+0x42>
 8003714:	6811      	ldr	r1, [r2, #0]
 8003716:	1850      	adds	r0, r2, r1
 8003718:	42a0      	cmp	r0, r4
 800371a:	d10b      	bne.n	8003734 <_free_r+0x6c>
 800371c:	6820      	ldr	r0, [r4, #0]
 800371e:	4401      	add	r1, r0
 8003720:	1850      	adds	r0, r2, r1
 8003722:	4283      	cmp	r3, r0
 8003724:	6011      	str	r1, [r2, #0]
 8003726:	d1e0      	bne.n	80036ea <_free_r+0x22>
 8003728:	6818      	ldr	r0, [r3, #0]
 800372a:	685b      	ldr	r3, [r3, #4]
 800372c:	6053      	str	r3, [r2, #4]
 800372e:	4408      	add	r0, r1
 8003730:	6010      	str	r0, [r2, #0]
 8003732:	e7da      	b.n	80036ea <_free_r+0x22>
 8003734:	d902      	bls.n	800373c <_free_r+0x74>
 8003736:	230c      	movs	r3, #12
 8003738:	602b      	str	r3, [r5, #0]
 800373a:	e7d6      	b.n	80036ea <_free_r+0x22>
 800373c:	6820      	ldr	r0, [r4, #0]
 800373e:	1821      	adds	r1, r4, r0
 8003740:	428b      	cmp	r3, r1
 8003742:	bf04      	itt	eq
 8003744:	6819      	ldreq	r1, [r3, #0]
 8003746:	685b      	ldreq	r3, [r3, #4]
 8003748:	6063      	str	r3, [r4, #4]
 800374a:	bf04      	itt	eq
 800374c:	1809      	addeq	r1, r1, r0
 800374e:	6021      	streq	r1, [r4, #0]
 8003750:	6054      	str	r4, [r2, #4]
 8003752:	e7ca      	b.n	80036ea <_free_r+0x22>
 8003754:	bd38      	pop	{r3, r4, r5, pc}
 8003756:	bf00      	nop
 8003758:	20000278 	.word	0x20000278

0800375c <sbrk_aligned>:
 800375c:	b570      	push	{r4, r5, r6, lr}
 800375e:	4e0f      	ldr	r6, [pc, #60]	@ (800379c <sbrk_aligned+0x40>)
 8003760:	460c      	mov	r4, r1
 8003762:	6831      	ldr	r1, [r6, #0]
 8003764:	4605      	mov	r5, r0
 8003766:	b911      	cbnz	r1, 800376e <sbrk_aligned+0x12>
 8003768:	f000 fba4 	bl	8003eb4 <_sbrk_r>
 800376c:	6030      	str	r0, [r6, #0]
 800376e:	4621      	mov	r1, r4
 8003770:	4628      	mov	r0, r5
 8003772:	f000 fb9f 	bl	8003eb4 <_sbrk_r>
 8003776:	1c43      	adds	r3, r0, #1
 8003778:	d103      	bne.n	8003782 <sbrk_aligned+0x26>
 800377a:	f04f 34ff 	mov.w	r4, #4294967295
 800377e:	4620      	mov	r0, r4
 8003780:	bd70      	pop	{r4, r5, r6, pc}
 8003782:	1cc4      	adds	r4, r0, #3
 8003784:	f024 0403 	bic.w	r4, r4, #3
 8003788:	42a0      	cmp	r0, r4
 800378a:	d0f8      	beq.n	800377e <sbrk_aligned+0x22>
 800378c:	1a21      	subs	r1, r4, r0
 800378e:	4628      	mov	r0, r5
 8003790:	f000 fb90 	bl	8003eb4 <_sbrk_r>
 8003794:	3001      	adds	r0, #1
 8003796:	d1f2      	bne.n	800377e <sbrk_aligned+0x22>
 8003798:	e7ef      	b.n	800377a <sbrk_aligned+0x1e>
 800379a:	bf00      	nop
 800379c:	20000274 	.word	0x20000274

080037a0 <_malloc_r>:
 80037a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80037a4:	1ccd      	adds	r5, r1, #3
 80037a6:	f025 0503 	bic.w	r5, r5, #3
 80037aa:	3508      	adds	r5, #8
 80037ac:	2d0c      	cmp	r5, #12
 80037ae:	bf38      	it	cc
 80037b0:	250c      	movcc	r5, #12
 80037b2:	2d00      	cmp	r5, #0
 80037b4:	4606      	mov	r6, r0
 80037b6:	db01      	blt.n	80037bc <_malloc_r+0x1c>
 80037b8:	42a9      	cmp	r1, r5
 80037ba:	d904      	bls.n	80037c6 <_malloc_r+0x26>
 80037bc:	230c      	movs	r3, #12
 80037be:	6033      	str	r3, [r6, #0]
 80037c0:	2000      	movs	r0, #0
 80037c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80037c6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800389c <_malloc_r+0xfc>
 80037ca:	f000 f869 	bl	80038a0 <__malloc_lock>
 80037ce:	f8d8 3000 	ldr.w	r3, [r8]
 80037d2:	461c      	mov	r4, r3
 80037d4:	bb44      	cbnz	r4, 8003828 <_malloc_r+0x88>
 80037d6:	4629      	mov	r1, r5
 80037d8:	4630      	mov	r0, r6
 80037da:	f7ff ffbf 	bl	800375c <sbrk_aligned>
 80037de:	1c43      	adds	r3, r0, #1
 80037e0:	4604      	mov	r4, r0
 80037e2:	d158      	bne.n	8003896 <_malloc_r+0xf6>
 80037e4:	f8d8 4000 	ldr.w	r4, [r8]
 80037e8:	4627      	mov	r7, r4
 80037ea:	2f00      	cmp	r7, #0
 80037ec:	d143      	bne.n	8003876 <_malloc_r+0xd6>
 80037ee:	2c00      	cmp	r4, #0
 80037f0:	d04b      	beq.n	800388a <_malloc_r+0xea>
 80037f2:	6823      	ldr	r3, [r4, #0]
 80037f4:	4639      	mov	r1, r7
 80037f6:	4630      	mov	r0, r6
 80037f8:	eb04 0903 	add.w	r9, r4, r3
 80037fc:	f000 fb5a 	bl	8003eb4 <_sbrk_r>
 8003800:	4581      	cmp	r9, r0
 8003802:	d142      	bne.n	800388a <_malloc_r+0xea>
 8003804:	6821      	ldr	r1, [r4, #0]
 8003806:	1a6d      	subs	r5, r5, r1
 8003808:	4629      	mov	r1, r5
 800380a:	4630      	mov	r0, r6
 800380c:	f7ff ffa6 	bl	800375c <sbrk_aligned>
 8003810:	3001      	adds	r0, #1
 8003812:	d03a      	beq.n	800388a <_malloc_r+0xea>
 8003814:	6823      	ldr	r3, [r4, #0]
 8003816:	442b      	add	r3, r5
 8003818:	6023      	str	r3, [r4, #0]
 800381a:	f8d8 3000 	ldr.w	r3, [r8]
 800381e:	685a      	ldr	r2, [r3, #4]
 8003820:	bb62      	cbnz	r2, 800387c <_malloc_r+0xdc>
 8003822:	f8c8 7000 	str.w	r7, [r8]
 8003826:	e00f      	b.n	8003848 <_malloc_r+0xa8>
 8003828:	6822      	ldr	r2, [r4, #0]
 800382a:	1b52      	subs	r2, r2, r5
 800382c:	d420      	bmi.n	8003870 <_malloc_r+0xd0>
 800382e:	2a0b      	cmp	r2, #11
 8003830:	d917      	bls.n	8003862 <_malloc_r+0xc2>
 8003832:	1961      	adds	r1, r4, r5
 8003834:	42a3      	cmp	r3, r4
 8003836:	6025      	str	r5, [r4, #0]
 8003838:	bf18      	it	ne
 800383a:	6059      	strne	r1, [r3, #4]
 800383c:	6863      	ldr	r3, [r4, #4]
 800383e:	bf08      	it	eq
 8003840:	f8c8 1000 	streq.w	r1, [r8]
 8003844:	5162      	str	r2, [r4, r5]
 8003846:	604b      	str	r3, [r1, #4]
 8003848:	4630      	mov	r0, r6
 800384a:	f000 f82f 	bl	80038ac <__malloc_unlock>
 800384e:	f104 000b 	add.w	r0, r4, #11
 8003852:	1d23      	adds	r3, r4, #4
 8003854:	f020 0007 	bic.w	r0, r0, #7
 8003858:	1ac2      	subs	r2, r0, r3
 800385a:	bf1c      	itt	ne
 800385c:	1a1b      	subne	r3, r3, r0
 800385e:	50a3      	strne	r3, [r4, r2]
 8003860:	e7af      	b.n	80037c2 <_malloc_r+0x22>
 8003862:	6862      	ldr	r2, [r4, #4]
 8003864:	42a3      	cmp	r3, r4
 8003866:	bf0c      	ite	eq
 8003868:	f8c8 2000 	streq.w	r2, [r8]
 800386c:	605a      	strne	r2, [r3, #4]
 800386e:	e7eb      	b.n	8003848 <_malloc_r+0xa8>
 8003870:	4623      	mov	r3, r4
 8003872:	6864      	ldr	r4, [r4, #4]
 8003874:	e7ae      	b.n	80037d4 <_malloc_r+0x34>
 8003876:	463c      	mov	r4, r7
 8003878:	687f      	ldr	r7, [r7, #4]
 800387a:	e7b6      	b.n	80037ea <_malloc_r+0x4a>
 800387c:	461a      	mov	r2, r3
 800387e:	685b      	ldr	r3, [r3, #4]
 8003880:	42a3      	cmp	r3, r4
 8003882:	d1fb      	bne.n	800387c <_malloc_r+0xdc>
 8003884:	2300      	movs	r3, #0
 8003886:	6053      	str	r3, [r2, #4]
 8003888:	e7de      	b.n	8003848 <_malloc_r+0xa8>
 800388a:	230c      	movs	r3, #12
 800388c:	6033      	str	r3, [r6, #0]
 800388e:	4630      	mov	r0, r6
 8003890:	f000 f80c 	bl	80038ac <__malloc_unlock>
 8003894:	e794      	b.n	80037c0 <_malloc_r+0x20>
 8003896:	6005      	str	r5, [r0, #0]
 8003898:	e7d6      	b.n	8003848 <_malloc_r+0xa8>
 800389a:	bf00      	nop
 800389c:	20000278 	.word	0x20000278

080038a0 <__malloc_lock>:
 80038a0:	4801      	ldr	r0, [pc, #4]	@ (80038a8 <__malloc_lock+0x8>)
 80038a2:	f7ff bf0f 	b.w	80036c4 <__retarget_lock_acquire_recursive>
 80038a6:	bf00      	nop
 80038a8:	20000270 	.word	0x20000270

080038ac <__malloc_unlock>:
 80038ac:	4801      	ldr	r0, [pc, #4]	@ (80038b4 <__malloc_unlock+0x8>)
 80038ae:	f7ff bf0a 	b.w	80036c6 <__retarget_lock_release_recursive>
 80038b2:	bf00      	nop
 80038b4:	20000270 	.word	0x20000270

080038b8 <__ssputs_r>:
 80038b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80038bc:	688e      	ldr	r6, [r1, #8]
 80038be:	461f      	mov	r7, r3
 80038c0:	42be      	cmp	r6, r7
 80038c2:	680b      	ldr	r3, [r1, #0]
 80038c4:	4682      	mov	sl, r0
 80038c6:	460c      	mov	r4, r1
 80038c8:	4690      	mov	r8, r2
 80038ca:	d82d      	bhi.n	8003928 <__ssputs_r+0x70>
 80038cc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80038d0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80038d4:	d026      	beq.n	8003924 <__ssputs_r+0x6c>
 80038d6:	6965      	ldr	r5, [r4, #20]
 80038d8:	6909      	ldr	r1, [r1, #16]
 80038da:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80038de:	eba3 0901 	sub.w	r9, r3, r1
 80038e2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80038e6:	1c7b      	adds	r3, r7, #1
 80038e8:	444b      	add	r3, r9
 80038ea:	106d      	asrs	r5, r5, #1
 80038ec:	429d      	cmp	r5, r3
 80038ee:	bf38      	it	cc
 80038f0:	461d      	movcc	r5, r3
 80038f2:	0553      	lsls	r3, r2, #21
 80038f4:	d527      	bpl.n	8003946 <__ssputs_r+0x8e>
 80038f6:	4629      	mov	r1, r5
 80038f8:	f7ff ff52 	bl	80037a0 <_malloc_r>
 80038fc:	4606      	mov	r6, r0
 80038fe:	b360      	cbz	r0, 800395a <__ssputs_r+0xa2>
 8003900:	6921      	ldr	r1, [r4, #16]
 8003902:	464a      	mov	r2, r9
 8003904:	f000 fae6 	bl	8003ed4 <memcpy>
 8003908:	89a3      	ldrh	r3, [r4, #12]
 800390a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800390e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003912:	81a3      	strh	r3, [r4, #12]
 8003914:	6126      	str	r6, [r4, #16]
 8003916:	6165      	str	r5, [r4, #20]
 8003918:	444e      	add	r6, r9
 800391a:	eba5 0509 	sub.w	r5, r5, r9
 800391e:	6026      	str	r6, [r4, #0]
 8003920:	60a5      	str	r5, [r4, #8]
 8003922:	463e      	mov	r6, r7
 8003924:	42be      	cmp	r6, r7
 8003926:	d900      	bls.n	800392a <__ssputs_r+0x72>
 8003928:	463e      	mov	r6, r7
 800392a:	6820      	ldr	r0, [r4, #0]
 800392c:	4632      	mov	r2, r6
 800392e:	4641      	mov	r1, r8
 8003930:	f000 faa6 	bl	8003e80 <memmove>
 8003934:	68a3      	ldr	r3, [r4, #8]
 8003936:	1b9b      	subs	r3, r3, r6
 8003938:	60a3      	str	r3, [r4, #8]
 800393a:	6823      	ldr	r3, [r4, #0]
 800393c:	4433      	add	r3, r6
 800393e:	6023      	str	r3, [r4, #0]
 8003940:	2000      	movs	r0, #0
 8003942:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003946:	462a      	mov	r2, r5
 8003948:	f000 fad2 	bl	8003ef0 <_realloc_r>
 800394c:	4606      	mov	r6, r0
 800394e:	2800      	cmp	r0, #0
 8003950:	d1e0      	bne.n	8003914 <__ssputs_r+0x5c>
 8003952:	6921      	ldr	r1, [r4, #16]
 8003954:	4650      	mov	r0, sl
 8003956:	f7ff feb7 	bl	80036c8 <_free_r>
 800395a:	230c      	movs	r3, #12
 800395c:	f8ca 3000 	str.w	r3, [sl]
 8003960:	89a3      	ldrh	r3, [r4, #12]
 8003962:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003966:	81a3      	strh	r3, [r4, #12]
 8003968:	f04f 30ff 	mov.w	r0, #4294967295
 800396c:	e7e9      	b.n	8003942 <__ssputs_r+0x8a>
	...

08003970 <_svfiprintf_r>:
 8003970:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003974:	4698      	mov	r8, r3
 8003976:	898b      	ldrh	r3, [r1, #12]
 8003978:	061b      	lsls	r3, r3, #24
 800397a:	b09d      	sub	sp, #116	@ 0x74
 800397c:	4607      	mov	r7, r0
 800397e:	460d      	mov	r5, r1
 8003980:	4614      	mov	r4, r2
 8003982:	d510      	bpl.n	80039a6 <_svfiprintf_r+0x36>
 8003984:	690b      	ldr	r3, [r1, #16]
 8003986:	b973      	cbnz	r3, 80039a6 <_svfiprintf_r+0x36>
 8003988:	2140      	movs	r1, #64	@ 0x40
 800398a:	f7ff ff09 	bl	80037a0 <_malloc_r>
 800398e:	6028      	str	r0, [r5, #0]
 8003990:	6128      	str	r0, [r5, #16]
 8003992:	b930      	cbnz	r0, 80039a2 <_svfiprintf_r+0x32>
 8003994:	230c      	movs	r3, #12
 8003996:	603b      	str	r3, [r7, #0]
 8003998:	f04f 30ff 	mov.w	r0, #4294967295
 800399c:	b01d      	add	sp, #116	@ 0x74
 800399e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80039a2:	2340      	movs	r3, #64	@ 0x40
 80039a4:	616b      	str	r3, [r5, #20]
 80039a6:	2300      	movs	r3, #0
 80039a8:	9309      	str	r3, [sp, #36]	@ 0x24
 80039aa:	2320      	movs	r3, #32
 80039ac:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80039b0:	f8cd 800c 	str.w	r8, [sp, #12]
 80039b4:	2330      	movs	r3, #48	@ 0x30
 80039b6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8003b54 <_svfiprintf_r+0x1e4>
 80039ba:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80039be:	f04f 0901 	mov.w	r9, #1
 80039c2:	4623      	mov	r3, r4
 80039c4:	469a      	mov	sl, r3
 80039c6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80039ca:	b10a      	cbz	r2, 80039d0 <_svfiprintf_r+0x60>
 80039cc:	2a25      	cmp	r2, #37	@ 0x25
 80039ce:	d1f9      	bne.n	80039c4 <_svfiprintf_r+0x54>
 80039d0:	ebba 0b04 	subs.w	fp, sl, r4
 80039d4:	d00b      	beq.n	80039ee <_svfiprintf_r+0x7e>
 80039d6:	465b      	mov	r3, fp
 80039d8:	4622      	mov	r2, r4
 80039da:	4629      	mov	r1, r5
 80039dc:	4638      	mov	r0, r7
 80039de:	f7ff ff6b 	bl	80038b8 <__ssputs_r>
 80039e2:	3001      	adds	r0, #1
 80039e4:	f000 80a7 	beq.w	8003b36 <_svfiprintf_r+0x1c6>
 80039e8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80039ea:	445a      	add	r2, fp
 80039ec:	9209      	str	r2, [sp, #36]	@ 0x24
 80039ee:	f89a 3000 	ldrb.w	r3, [sl]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	f000 809f 	beq.w	8003b36 <_svfiprintf_r+0x1c6>
 80039f8:	2300      	movs	r3, #0
 80039fa:	f04f 32ff 	mov.w	r2, #4294967295
 80039fe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003a02:	f10a 0a01 	add.w	sl, sl, #1
 8003a06:	9304      	str	r3, [sp, #16]
 8003a08:	9307      	str	r3, [sp, #28]
 8003a0a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003a0e:	931a      	str	r3, [sp, #104]	@ 0x68
 8003a10:	4654      	mov	r4, sl
 8003a12:	2205      	movs	r2, #5
 8003a14:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003a18:	484e      	ldr	r0, [pc, #312]	@ (8003b54 <_svfiprintf_r+0x1e4>)
 8003a1a:	f7fc fbf1 	bl	8000200 <memchr>
 8003a1e:	9a04      	ldr	r2, [sp, #16]
 8003a20:	b9d8      	cbnz	r0, 8003a5a <_svfiprintf_r+0xea>
 8003a22:	06d0      	lsls	r0, r2, #27
 8003a24:	bf44      	itt	mi
 8003a26:	2320      	movmi	r3, #32
 8003a28:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003a2c:	0711      	lsls	r1, r2, #28
 8003a2e:	bf44      	itt	mi
 8003a30:	232b      	movmi	r3, #43	@ 0x2b
 8003a32:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003a36:	f89a 3000 	ldrb.w	r3, [sl]
 8003a3a:	2b2a      	cmp	r3, #42	@ 0x2a
 8003a3c:	d015      	beq.n	8003a6a <_svfiprintf_r+0xfa>
 8003a3e:	9a07      	ldr	r2, [sp, #28]
 8003a40:	4654      	mov	r4, sl
 8003a42:	2000      	movs	r0, #0
 8003a44:	f04f 0c0a 	mov.w	ip, #10
 8003a48:	4621      	mov	r1, r4
 8003a4a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003a4e:	3b30      	subs	r3, #48	@ 0x30
 8003a50:	2b09      	cmp	r3, #9
 8003a52:	d94b      	bls.n	8003aec <_svfiprintf_r+0x17c>
 8003a54:	b1b0      	cbz	r0, 8003a84 <_svfiprintf_r+0x114>
 8003a56:	9207      	str	r2, [sp, #28]
 8003a58:	e014      	b.n	8003a84 <_svfiprintf_r+0x114>
 8003a5a:	eba0 0308 	sub.w	r3, r0, r8
 8003a5e:	fa09 f303 	lsl.w	r3, r9, r3
 8003a62:	4313      	orrs	r3, r2
 8003a64:	9304      	str	r3, [sp, #16]
 8003a66:	46a2      	mov	sl, r4
 8003a68:	e7d2      	b.n	8003a10 <_svfiprintf_r+0xa0>
 8003a6a:	9b03      	ldr	r3, [sp, #12]
 8003a6c:	1d19      	adds	r1, r3, #4
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	9103      	str	r1, [sp, #12]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	bfbb      	ittet	lt
 8003a76:	425b      	neglt	r3, r3
 8003a78:	f042 0202 	orrlt.w	r2, r2, #2
 8003a7c:	9307      	strge	r3, [sp, #28]
 8003a7e:	9307      	strlt	r3, [sp, #28]
 8003a80:	bfb8      	it	lt
 8003a82:	9204      	strlt	r2, [sp, #16]
 8003a84:	7823      	ldrb	r3, [r4, #0]
 8003a86:	2b2e      	cmp	r3, #46	@ 0x2e
 8003a88:	d10a      	bne.n	8003aa0 <_svfiprintf_r+0x130>
 8003a8a:	7863      	ldrb	r3, [r4, #1]
 8003a8c:	2b2a      	cmp	r3, #42	@ 0x2a
 8003a8e:	d132      	bne.n	8003af6 <_svfiprintf_r+0x186>
 8003a90:	9b03      	ldr	r3, [sp, #12]
 8003a92:	1d1a      	adds	r2, r3, #4
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	9203      	str	r2, [sp, #12]
 8003a98:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003a9c:	3402      	adds	r4, #2
 8003a9e:	9305      	str	r3, [sp, #20]
 8003aa0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8003b64 <_svfiprintf_r+0x1f4>
 8003aa4:	7821      	ldrb	r1, [r4, #0]
 8003aa6:	2203      	movs	r2, #3
 8003aa8:	4650      	mov	r0, sl
 8003aaa:	f7fc fba9 	bl	8000200 <memchr>
 8003aae:	b138      	cbz	r0, 8003ac0 <_svfiprintf_r+0x150>
 8003ab0:	9b04      	ldr	r3, [sp, #16]
 8003ab2:	eba0 000a 	sub.w	r0, r0, sl
 8003ab6:	2240      	movs	r2, #64	@ 0x40
 8003ab8:	4082      	lsls	r2, r0
 8003aba:	4313      	orrs	r3, r2
 8003abc:	3401      	adds	r4, #1
 8003abe:	9304      	str	r3, [sp, #16]
 8003ac0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003ac4:	4824      	ldr	r0, [pc, #144]	@ (8003b58 <_svfiprintf_r+0x1e8>)
 8003ac6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003aca:	2206      	movs	r2, #6
 8003acc:	f7fc fb98 	bl	8000200 <memchr>
 8003ad0:	2800      	cmp	r0, #0
 8003ad2:	d036      	beq.n	8003b42 <_svfiprintf_r+0x1d2>
 8003ad4:	4b21      	ldr	r3, [pc, #132]	@ (8003b5c <_svfiprintf_r+0x1ec>)
 8003ad6:	bb1b      	cbnz	r3, 8003b20 <_svfiprintf_r+0x1b0>
 8003ad8:	9b03      	ldr	r3, [sp, #12]
 8003ada:	3307      	adds	r3, #7
 8003adc:	f023 0307 	bic.w	r3, r3, #7
 8003ae0:	3308      	adds	r3, #8
 8003ae2:	9303      	str	r3, [sp, #12]
 8003ae4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003ae6:	4433      	add	r3, r6
 8003ae8:	9309      	str	r3, [sp, #36]	@ 0x24
 8003aea:	e76a      	b.n	80039c2 <_svfiprintf_r+0x52>
 8003aec:	fb0c 3202 	mla	r2, ip, r2, r3
 8003af0:	460c      	mov	r4, r1
 8003af2:	2001      	movs	r0, #1
 8003af4:	e7a8      	b.n	8003a48 <_svfiprintf_r+0xd8>
 8003af6:	2300      	movs	r3, #0
 8003af8:	3401      	adds	r4, #1
 8003afa:	9305      	str	r3, [sp, #20]
 8003afc:	4619      	mov	r1, r3
 8003afe:	f04f 0c0a 	mov.w	ip, #10
 8003b02:	4620      	mov	r0, r4
 8003b04:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003b08:	3a30      	subs	r2, #48	@ 0x30
 8003b0a:	2a09      	cmp	r2, #9
 8003b0c:	d903      	bls.n	8003b16 <_svfiprintf_r+0x1a6>
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d0c6      	beq.n	8003aa0 <_svfiprintf_r+0x130>
 8003b12:	9105      	str	r1, [sp, #20]
 8003b14:	e7c4      	b.n	8003aa0 <_svfiprintf_r+0x130>
 8003b16:	fb0c 2101 	mla	r1, ip, r1, r2
 8003b1a:	4604      	mov	r4, r0
 8003b1c:	2301      	movs	r3, #1
 8003b1e:	e7f0      	b.n	8003b02 <_svfiprintf_r+0x192>
 8003b20:	ab03      	add	r3, sp, #12
 8003b22:	9300      	str	r3, [sp, #0]
 8003b24:	462a      	mov	r2, r5
 8003b26:	4b0e      	ldr	r3, [pc, #56]	@ (8003b60 <_svfiprintf_r+0x1f0>)
 8003b28:	a904      	add	r1, sp, #16
 8003b2a:	4638      	mov	r0, r7
 8003b2c:	f3af 8000 	nop.w
 8003b30:	1c42      	adds	r2, r0, #1
 8003b32:	4606      	mov	r6, r0
 8003b34:	d1d6      	bne.n	8003ae4 <_svfiprintf_r+0x174>
 8003b36:	89ab      	ldrh	r3, [r5, #12]
 8003b38:	065b      	lsls	r3, r3, #25
 8003b3a:	f53f af2d 	bmi.w	8003998 <_svfiprintf_r+0x28>
 8003b3e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003b40:	e72c      	b.n	800399c <_svfiprintf_r+0x2c>
 8003b42:	ab03      	add	r3, sp, #12
 8003b44:	9300      	str	r3, [sp, #0]
 8003b46:	462a      	mov	r2, r5
 8003b48:	4b05      	ldr	r3, [pc, #20]	@ (8003b60 <_svfiprintf_r+0x1f0>)
 8003b4a:	a904      	add	r1, sp, #16
 8003b4c:	4638      	mov	r0, r7
 8003b4e:	f000 f879 	bl	8003c44 <_printf_i>
 8003b52:	e7ed      	b.n	8003b30 <_svfiprintf_r+0x1c0>
 8003b54:	08003fb0 	.word	0x08003fb0
 8003b58:	08003fba 	.word	0x08003fba
 8003b5c:	00000000 	.word	0x00000000
 8003b60:	080038b9 	.word	0x080038b9
 8003b64:	08003fb6 	.word	0x08003fb6

08003b68 <_printf_common>:
 8003b68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003b6c:	4616      	mov	r6, r2
 8003b6e:	4698      	mov	r8, r3
 8003b70:	688a      	ldr	r2, [r1, #8]
 8003b72:	690b      	ldr	r3, [r1, #16]
 8003b74:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	bfb8      	it	lt
 8003b7c:	4613      	movlt	r3, r2
 8003b7e:	6033      	str	r3, [r6, #0]
 8003b80:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003b84:	4607      	mov	r7, r0
 8003b86:	460c      	mov	r4, r1
 8003b88:	b10a      	cbz	r2, 8003b8e <_printf_common+0x26>
 8003b8a:	3301      	adds	r3, #1
 8003b8c:	6033      	str	r3, [r6, #0]
 8003b8e:	6823      	ldr	r3, [r4, #0]
 8003b90:	0699      	lsls	r1, r3, #26
 8003b92:	bf42      	ittt	mi
 8003b94:	6833      	ldrmi	r3, [r6, #0]
 8003b96:	3302      	addmi	r3, #2
 8003b98:	6033      	strmi	r3, [r6, #0]
 8003b9a:	6825      	ldr	r5, [r4, #0]
 8003b9c:	f015 0506 	ands.w	r5, r5, #6
 8003ba0:	d106      	bne.n	8003bb0 <_printf_common+0x48>
 8003ba2:	f104 0a19 	add.w	sl, r4, #25
 8003ba6:	68e3      	ldr	r3, [r4, #12]
 8003ba8:	6832      	ldr	r2, [r6, #0]
 8003baa:	1a9b      	subs	r3, r3, r2
 8003bac:	42ab      	cmp	r3, r5
 8003bae:	dc26      	bgt.n	8003bfe <_printf_common+0x96>
 8003bb0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003bb4:	6822      	ldr	r2, [r4, #0]
 8003bb6:	3b00      	subs	r3, #0
 8003bb8:	bf18      	it	ne
 8003bba:	2301      	movne	r3, #1
 8003bbc:	0692      	lsls	r2, r2, #26
 8003bbe:	d42b      	bmi.n	8003c18 <_printf_common+0xb0>
 8003bc0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003bc4:	4641      	mov	r1, r8
 8003bc6:	4638      	mov	r0, r7
 8003bc8:	47c8      	blx	r9
 8003bca:	3001      	adds	r0, #1
 8003bcc:	d01e      	beq.n	8003c0c <_printf_common+0xa4>
 8003bce:	6823      	ldr	r3, [r4, #0]
 8003bd0:	6922      	ldr	r2, [r4, #16]
 8003bd2:	f003 0306 	and.w	r3, r3, #6
 8003bd6:	2b04      	cmp	r3, #4
 8003bd8:	bf02      	ittt	eq
 8003bda:	68e5      	ldreq	r5, [r4, #12]
 8003bdc:	6833      	ldreq	r3, [r6, #0]
 8003bde:	1aed      	subeq	r5, r5, r3
 8003be0:	68a3      	ldr	r3, [r4, #8]
 8003be2:	bf0c      	ite	eq
 8003be4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003be8:	2500      	movne	r5, #0
 8003bea:	4293      	cmp	r3, r2
 8003bec:	bfc4      	itt	gt
 8003bee:	1a9b      	subgt	r3, r3, r2
 8003bf0:	18ed      	addgt	r5, r5, r3
 8003bf2:	2600      	movs	r6, #0
 8003bf4:	341a      	adds	r4, #26
 8003bf6:	42b5      	cmp	r5, r6
 8003bf8:	d11a      	bne.n	8003c30 <_printf_common+0xc8>
 8003bfa:	2000      	movs	r0, #0
 8003bfc:	e008      	b.n	8003c10 <_printf_common+0xa8>
 8003bfe:	2301      	movs	r3, #1
 8003c00:	4652      	mov	r2, sl
 8003c02:	4641      	mov	r1, r8
 8003c04:	4638      	mov	r0, r7
 8003c06:	47c8      	blx	r9
 8003c08:	3001      	adds	r0, #1
 8003c0a:	d103      	bne.n	8003c14 <_printf_common+0xac>
 8003c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8003c10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c14:	3501      	adds	r5, #1
 8003c16:	e7c6      	b.n	8003ba6 <_printf_common+0x3e>
 8003c18:	18e1      	adds	r1, r4, r3
 8003c1a:	1c5a      	adds	r2, r3, #1
 8003c1c:	2030      	movs	r0, #48	@ 0x30
 8003c1e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003c22:	4422      	add	r2, r4
 8003c24:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003c28:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003c2c:	3302      	adds	r3, #2
 8003c2e:	e7c7      	b.n	8003bc0 <_printf_common+0x58>
 8003c30:	2301      	movs	r3, #1
 8003c32:	4622      	mov	r2, r4
 8003c34:	4641      	mov	r1, r8
 8003c36:	4638      	mov	r0, r7
 8003c38:	47c8      	blx	r9
 8003c3a:	3001      	adds	r0, #1
 8003c3c:	d0e6      	beq.n	8003c0c <_printf_common+0xa4>
 8003c3e:	3601      	adds	r6, #1
 8003c40:	e7d9      	b.n	8003bf6 <_printf_common+0x8e>
	...

08003c44 <_printf_i>:
 8003c44:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003c48:	7e0f      	ldrb	r7, [r1, #24]
 8003c4a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003c4c:	2f78      	cmp	r7, #120	@ 0x78
 8003c4e:	4691      	mov	r9, r2
 8003c50:	4680      	mov	r8, r0
 8003c52:	460c      	mov	r4, r1
 8003c54:	469a      	mov	sl, r3
 8003c56:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003c5a:	d807      	bhi.n	8003c6c <_printf_i+0x28>
 8003c5c:	2f62      	cmp	r7, #98	@ 0x62
 8003c5e:	d80a      	bhi.n	8003c76 <_printf_i+0x32>
 8003c60:	2f00      	cmp	r7, #0
 8003c62:	f000 80d1 	beq.w	8003e08 <_printf_i+0x1c4>
 8003c66:	2f58      	cmp	r7, #88	@ 0x58
 8003c68:	f000 80b8 	beq.w	8003ddc <_printf_i+0x198>
 8003c6c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003c70:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003c74:	e03a      	b.n	8003cec <_printf_i+0xa8>
 8003c76:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003c7a:	2b15      	cmp	r3, #21
 8003c7c:	d8f6      	bhi.n	8003c6c <_printf_i+0x28>
 8003c7e:	a101      	add	r1, pc, #4	@ (adr r1, 8003c84 <_printf_i+0x40>)
 8003c80:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003c84:	08003cdd 	.word	0x08003cdd
 8003c88:	08003cf1 	.word	0x08003cf1
 8003c8c:	08003c6d 	.word	0x08003c6d
 8003c90:	08003c6d 	.word	0x08003c6d
 8003c94:	08003c6d 	.word	0x08003c6d
 8003c98:	08003c6d 	.word	0x08003c6d
 8003c9c:	08003cf1 	.word	0x08003cf1
 8003ca0:	08003c6d 	.word	0x08003c6d
 8003ca4:	08003c6d 	.word	0x08003c6d
 8003ca8:	08003c6d 	.word	0x08003c6d
 8003cac:	08003c6d 	.word	0x08003c6d
 8003cb0:	08003def 	.word	0x08003def
 8003cb4:	08003d1b 	.word	0x08003d1b
 8003cb8:	08003da9 	.word	0x08003da9
 8003cbc:	08003c6d 	.word	0x08003c6d
 8003cc0:	08003c6d 	.word	0x08003c6d
 8003cc4:	08003e11 	.word	0x08003e11
 8003cc8:	08003c6d 	.word	0x08003c6d
 8003ccc:	08003d1b 	.word	0x08003d1b
 8003cd0:	08003c6d 	.word	0x08003c6d
 8003cd4:	08003c6d 	.word	0x08003c6d
 8003cd8:	08003db1 	.word	0x08003db1
 8003cdc:	6833      	ldr	r3, [r6, #0]
 8003cde:	1d1a      	adds	r2, r3, #4
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	6032      	str	r2, [r6, #0]
 8003ce4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003ce8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003cec:	2301      	movs	r3, #1
 8003cee:	e09c      	b.n	8003e2a <_printf_i+0x1e6>
 8003cf0:	6833      	ldr	r3, [r6, #0]
 8003cf2:	6820      	ldr	r0, [r4, #0]
 8003cf4:	1d19      	adds	r1, r3, #4
 8003cf6:	6031      	str	r1, [r6, #0]
 8003cf8:	0606      	lsls	r6, r0, #24
 8003cfa:	d501      	bpl.n	8003d00 <_printf_i+0xbc>
 8003cfc:	681d      	ldr	r5, [r3, #0]
 8003cfe:	e003      	b.n	8003d08 <_printf_i+0xc4>
 8003d00:	0645      	lsls	r5, r0, #25
 8003d02:	d5fb      	bpl.n	8003cfc <_printf_i+0xb8>
 8003d04:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003d08:	2d00      	cmp	r5, #0
 8003d0a:	da03      	bge.n	8003d14 <_printf_i+0xd0>
 8003d0c:	232d      	movs	r3, #45	@ 0x2d
 8003d0e:	426d      	negs	r5, r5
 8003d10:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003d14:	4858      	ldr	r0, [pc, #352]	@ (8003e78 <_printf_i+0x234>)
 8003d16:	230a      	movs	r3, #10
 8003d18:	e011      	b.n	8003d3e <_printf_i+0xfa>
 8003d1a:	6821      	ldr	r1, [r4, #0]
 8003d1c:	6833      	ldr	r3, [r6, #0]
 8003d1e:	0608      	lsls	r0, r1, #24
 8003d20:	f853 5b04 	ldr.w	r5, [r3], #4
 8003d24:	d402      	bmi.n	8003d2c <_printf_i+0xe8>
 8003d26:	0649      	lsls	r1, r1, #25
 8003d28:	bf48      	it	mi
 8003d2a:	b2ad      	uxthmi	r5, r5
 8003d2c:	2f6f      	cmp	r7, #111	@ 0x6f
 8003d2e:	4852      	ldr	r0, [pc, #328]	@ (8003e78 <_printf_i+0x234>)
 8003d30:	6033      	str	r3, [r6, #0]
 8003d32:	bf14      	ite	ne
 8003d34:	230a      	movne	r3, #10
 8003d36:	2308      	moveq	r3, #8
 8003d38:	2100      	movs	r1, #0
 8003d3a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003d3e:	6866      	ldr	r6, [r4, #4]
 8003d40:	60a6      	str	r6, [r4, #8]
 8003d42:	2e00      	cmp	r6, #0
 8003d44:	db05      	blt.n	8003d52 <_printf_i+0x10e>
 8003d46:	6821      	ldr	r1, [r4, #0]
 8003d48:	432e      	orrs	r6, r5
 8003d4a:	f021 0104 	bic.w	r1, r1, #4
 8003d4e:	6021      	str	r1, [r4, #0]
 8003d50:	d04b      	beq.n	8003dea <_printf_i+0x1a6>
 8003d52:	4616      	mov	r6, r2
 8003d54:	fbb5 f1f3 	udiv	r1, r5, r3
 8003d58:	fb03 5711 	mls	r7, r3, r1, r5
 8003d5c:	5dc7      	ldrb	r7, [r0, r7]
 8003d5e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003d62:	462f      	mov	r7, r5
 8003d64:	42bb      	cmp	r3, r7
 8003d66:	460d      	mov	r5, r1
 8003d68:	d9f4      	bls.n	8003d54 <_printf_i+0x110>
 8003d6a:	2b08      	cmp	r3, #8
 8003d6c:	d10b      	bne.n	8003d86 <_printf_i+0x142>
 8003d6e:	6823      	ldr	r3, [r4, #0]
 8003d70:	07df      	lsls	r7, r3, #31
 8003d72:	d508      	bpl.n	8003d86 <_printf_i+0x142>
 8003d74:	6923      	ldr	r3, [r4, #16]
 8003d76:	6861      	ldr	r1, [r4, #4]
 8003d78:	4299      	cmp	r1, r3
 8003d7a:	bfde      	ittt	le
 8003d7c:	2330      	movle	r3, #48	@ 0x30
 8003d7e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003d82:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003d86:	1b92      	subs	r2, r2, r6
 8003d88:	6122      	str	r2, [r4, #16]
 8003d8a:	f8cd a000 	str.w	sl, [sp]
 8003d8e:	464b      	mov	r3, r9
 8003d90:	aa03      	add	r2, sp, #12
 8003d92:	4621      	mov	r1, r4
 8003d94:	4640      	mov	r0, r8
 8003d96:	f7ff fee7 	bl	8003b68 <_printf_common>
 8003d9a:	3001      	adds	r0, #1
 8003d9c:	d14a      	bne.n	8003e34 <_printf_i+0x1f0>
 8003d9e:	f04f 30ff 	mov.w	r0, #4294967295
 8003da2:	b004      	add	sp, #16
 8003da4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003da8:	6823      	ldr	r3, [r4, #0]
 8003daa:	f043 0320 	orr.w	r3, r3, #32
 8003dae:	6023      	str	r3, [r4, #0]
 8003db0:	4832      	ldr	r0, [pc, #200]	@ (8003e7c <_printf_i+0x238>)
 8003db2:	2778      	movs	r7, #120	@ 0x78
 8003db4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003db8:	6823      	ldr	r3, [r4, #0]
 8003dba:	6831      	ldr	r1, [r6, #0]
 8003dbc:	061f      	lsls	r7, r3, #24
 8003dbe:	f851 5b04 	ldr.w	r5, [r1], #4
 8003dc2:	d402      	bmi.n	8003dca <_printf_i+0x186>
 8003dc4:	065f      	lsls	r7, r3, #25
 8003dc6:	bf48      	it	mi
 8003dc8:	b2ad      	uxthmi	r5, r5
 8003dca:	6031      	str	r1, [r6, #0]
 8003dcc:	07d9      	lsls	r1, r3, #31
 8003dce:	bf44      	itt	mi
 8003dd0:	f043 0320 	orrmi.w	r3, r3, #32
 8003dd4:	6023      	strmi	r3, [r4, #0]
 8003dd6:	b11d      	cbz	r5, 8003de0 <_printf_i+0x19c>
 8003dd8:	2310      	movs	r3, #16
 8003dda:	e7ad      	b.n	8003d38 <_printf_i+0xf4>
 8003ddc:	4826      	ldr	r0, [pc, #152]	@ (8003e78 <_printf_i+0x234>)
 8003dde:	e7e9      	b.n	8003db4 <_printf_i+0x170>
 8003de0:	6823      	ldr	r3, [r4, #0]
 8003de2:	f023 0320 	bic.w	r3, r3, #32
 8003de6:	6023      	str	r3, [r4, #0]
 8003de8:	e7f6      	b.n	8003dd8 <_printf_i+0x194>
 8003dea:	4616      	mov	r6, r2
 8003dec:	e7bd      	b.n	8003d6a <_printf_i+0x126>
 8003dee:	6833      	ldr	r3, [r6, #0]
 8003df0:	6825      	ldr	r5, [r4, #0]
 8003df2:	6961      	ldr	r1, [r4, #20]
 8003df4:	1d18      	adds	r0, r3, #4
 8003df6:	6030      	str	r0, [r6, #0]
 8003df8:	062e      	lsls	r6, r5, #24
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	d501      	bpl.n	8003e02 <_printf_i+0x1be>
 8003dfe:	6019      	str	r1, [r3, #0]
 8003e00:	e002      	b.n	8003e08 <_printf_i+0x1c4>
 8003e02:	0668      	lsls	r0, r5, #25
 8003e04:	d5fb      	bpl.n	8003dfe <_printf_i+0x1ba>
 8003e06:	8019      	strh	r1, [r3, #0]
 8003e08:	2300      	movs	r3, #0
 8003e0a:	6123      	str	r3, [r4, #16]
 8003e0c:	4616      	mov	r6, r2
 8003e0e:	e7bc      	b.n	8003d8a <_printf_i+0x146>
 8003e10:	6833      	ldr	r3, [r6, #0]
 8003e12:	1d1a      	adds	r2, r3, #4
 8003e14:	6032      	str	r2, [r6, #0]
 8003e16:	681e      	ldr	r6, [r3, #0]
 8003e18:	6862      	ldr	r2, [r4, #4]
 8003e1a:	2100      	movs	r1, #0
 8003e1c:	4630      	mov	r0, r6
 8003e1e:	f7fc f9ef 	bl	8000200 <memchr>
 8003e22:	b108      	cbz	r0, 8003e28 <_printf_i+0x1e4>
 8003e24:	1b80      	subs	r0, r0, r6
 8003e26:	6060      	str	r0, [r4, #4]
 8003e28:	6863      	ldr	r3, [r4, #4]
 8003e2a:	6123      	str	r3, [r4, #16]
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003e32:	e7aa      	b.n	8003d8a <_printf_i+0x146>
 8003e34:	6923      	ldr	r3, [r4, #16]
 8003e36:	4632      	mov	r2, r6
 8003e38:	4649      	mov	r1, r9
 8003e3a:	4640      	mov	r0, r8
 8003e3c:	47d0      	blx	sl
 8003e3e:	3001      	adds	r0, #1
 8003e40:	d0ad      	beq.n	8003d9e <_printf_i+0x15a>
 8003e42:	6823      	ldr	r3, [r4, #0]
 8003e44:	079b      	lsls	r3, r3, #30
 8003e46:	d413      	bmi.n	8003e70 <_printf_i+0x22c>
 8003e48:	68e0      	ldr	r0, [r4, #12]
 8003e4a:	9b03      	ldr	r3, [sp, #12]
 8003e4c:	4298      	cmp	r0, r3
 8003e4e:	bfb8      	it	lt
 8003e50:	4618      	movlt	r0, r3
 8003e52:	e7a6      	b.n	8003da2 <_printf_i+0x15e>
 8003e54:	2301      	movs	r3, #1
 8003e56:	4632      	mov	r2, r6
 8003e58:	4649      	mov	r1, r9
 8003e5a:	4640      	mov	r0, r8
 8003e5c:	47d0      	blx	sl
 8003e5e:	3001      	adds	r0, #1
 8003e60:	d09d      	beq.n	8003d9e <_printf_i+0x15a>
 8003e62:	3501      	adds	r5, #1
 8003e64:	68e3      	ldr	r3, [r4, #12]
 8003e66:	9903      	ldr	r1, [sp, #12]
 8003e68:	1a5b      	subs	r3, r3, r1
 8003e6a:	42ab      	cmp	r3, r5
 8003e6c:	dcf2      	bgt.n	8003e54 <_printf_i+0x210>
 8003e6e:	e7eb      	b.n	8003e48 <_printf_i+0x204>
 8003e70:	2500      	movs	r5, #0
 8003e72:	f104 0619 	add.w	r6, r4, #25
 8003e76:	e7f5      	b.n	8003e64 <_printf_i+0x220>
 8003e78:	08003fc1 	.word	0x08003fc1
 8003e7c:	08003fd2 	.word	0x08003fd2

08003e80 <memmove>:
 8003e80:	4288      	cmp	r0, r1
 8003e82:	b510      	push	{r4, lr}
 8003e84:	eb01 0402 	add.w	r4, r1, r2
 8003e88:	d902      	bls.n	8003e90 <memmove+0x10>
 8003e8a:	4284      	cmp	r4, r0
 8003e8c:	4623      	mov	r3, r4
 8003e8e:	d807      	bhi.n	8003ea0 <memmove+0x20>
 8003e90:	1e43      	subs	r3, r0, #1
 8003e92:	42a1      	cmp	r1, r4
 8003e94:	d008      	beq.n	8003ea8 <memmove+0x28>
 8003e96:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003e9a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003e9e:	e7f8      	b.n	8003e92 <memmove+0x12>
 8003ea0:	4402      	add	r2, r0
 8003ea2:	4601      	mov	r1, r0
 8003ea4:	428a      	cmp	r2, r1
 8003ea6:	d100      	bne.n	8003eaa <memmove+0x2a>
 8003ea8:	bd10      	pop	{r4, pc}
 8003eaa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003eae:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003eb2:	e7f7      	b.n	8003ea4 <memmove+0x24>

08003eb4 <_sbrk_r>:
 8003eb4:	b538      	push	{r3, r4, r5, lr}
 8003eb6:	4d06      	ldr	r5, [pc, #24]	@ (8003ed0 <_sbrk_r+0x1c>)
 8003eb8:	2300      	movs	r3, #0
 8003eba:	4604      	mov	r4, r0
 8003ebc:	4608      	mov	r0, r1
 8003ebe:	602b      	str	r3, [r5, #0]
 8003ec0:	f7fc ff0e 	bl	8000ce0 <_sbrk>
 8003ec4:	1c43      	adds	r3, r0, #1
 8003ec6:	d102      	bne.n	8003ece <_sbrk_r+0x1a>
 8003ec8:	682b      	ldr	r3, [r5, #0]
 8003eca:	b103      	cbz	r3, 8003ece <_sbrk_r+0x1a>
 8003ecc:	6023      	str	r3, [r4, #0]
 8003ece:	bd38      	pop	{r3, r4, r5, pc}
 8003ed0:	2000026c 	.word	0x2000026c

08003ed4 <memcpy>:
 8003ed4:	440a      	add	r2, r1
 8003ed6:	4291      	cmp	r1, r2
 8003ed8:	f100 33ff 	add.w	r3, r0, #4294967295
 8003edc:	d100      	bne.n	8003ee0 <memcpy+0xc>
 8003ede:	4770      	bx	lr
 8003ee0:	b510      	push	{r4, lr}
 8003ee2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003ee6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003eea:	4291      	cmp	r1, r2
 8003eec:	d1f9      	bne.n	8003ee2 <memcpy+0xe>
 8003eee:	bd10      	pop	{r4, pc}

08003ef0 <_realloc_r>:
 8003ef0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003ef4:	4607      	mov	r7, r0
 8003ef6:	4614      	mov	r4, r2
 8003ef8:	460d      	mov	r5, r1
 8003efa:	b921      	cbnz	r1, 8003f06 <_realloc_r+0x16>
 8003efc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003f00:	4611      	mov	r1, r2
 8003f02:	f7ff bc4d 	b.w	80037a0 <_malloc_r>
 8003f06:	b92a      	cbnz	r2, 8003f14 <_realloc_r+0x24>
 8003f08:	f7ff fbde 	bl	80036c8 <_free_r>
 8003f0c:	4625      	mov	r5, r4
 8003f0e:	4628      	mov	r0, r5
 8003f10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003f14:	f000 f81a 	bl	8003f4c <_malloc_usable_size_r>
 8003f18:	4284      	cmp	r4, r0
 8003f1a:	4606      	mov	r6, r0
 8003f1c:	d802      	bhi.n	8003f24 <_realloc_r+0x34>
 8003f1e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003f22:	d8f4      	bhi.n	8003f0e <_realloc_r+0x1e>
 8003f24:	4621      	mov	r1, r4
 8003f26:	4638      	mov	r0, r7
 8003f28:	f7ff fc3a 	bl	80037a0 <_malloc_r>
 8003f2c:	4680      	mov	r8, r0
 8003f2e:	b908      	cbnz	r0, 8003f34 <_realloc_r+0x44>
 8003f30:	4645      	mov	r5, r8
 8003f32:	e7ec      	b.n	8003f0e <_realloc_r+0x1e>
 8003f34:	42b4      	cmp	r4, r6
 8003f36:	4622      	mov	r2, r4
 8003f38:	4629      	mov	r1, r5
 8003f3a:	bf28      	it	cs
 8003f3c:	4632      	movcs	r2, r6
 8003f3e:	f7ff ffc9 	bl	8003ed4 <memcpy>
 8003f42:	4629      	mov	r1, r5
 8003f44:	4638      	mov	r0, r7
 8003f46:	f7ff fbbf 	bl	80036c8 <_free_r>
 8003f4a:	e7f1      	b.n	8003f30 <_realloc_r+0x40>

08003f4c <_malloc_usable_size_r>:
 8003f4c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003f50:	1f18      	subs	r0, r3, #4
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	bfbc      	itt	lt
 8003f56:	580b      	ldrlt	r3, [r1, r0]
 8003f58:	18c0      	addlt	r0, r0, r3
 8003f5a:	4770      	bx	lr

08003f5c <_init>:
 8003f5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f5e:	bf00      	nop
 8003f60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f62:	bc08      	pop	{r3}
 8003f64:	469e      	mov	lr, r3
 8003f66:	4770      	bx	lr

08003f68 <_fini>:
 8003f68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f6a:	bf00      	nop
 8003f6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f6e:	bc08      	pop	{r3}
 8003f70:	469e      	mov	lr, r3
 8003f72:	4770      	bx	lr
