
Thuc_hanh_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005f68  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000019c0  08006118  08006118  00007118  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007ad8  08007ad8  0000906c  2**0
                  CONTENTS
  4 .ARM          00000008  08007ad8  08007ad8  00008ad8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007ae0  08007ae0  0000906c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007ae0  08007ae0  00008ae0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007ae4  08007ae4  00008ae4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08007ae8  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000906c  2**0
                  CONTENTS
 10 .bss          000007c0  2000006c  2000006c  0000906c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000082c  2000082c  0000906c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000906c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ed40  00000000  00000000  0000909c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002366  00000000  00000000  00017ddc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d70  00000000  00000000  0001a148  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a8a  00000000  00000000  0001aeb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000241ab  00000000  00000000  0001b942  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011a4a  00000000  00000000  0003faed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d703e  00000000  00000000  00051537  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00128575  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003d38  00000000  00000000  001285b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000043  00000000  00000000  0012c2f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08006100 	.word	0x08006100

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000070 	.word	0x20000070
 80001ec:	08006100 	.word	0x08006100

080001f0 <strcmp>:
 80001f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001f8:	2a01      	cmp	r2, #1
 80001fa:	bf28      	it	cs
 80001fc:	429a      	cmpcs	r2, r3
 80001fe:	d0f7      	beq.n	80001f0 <strcmp>
 8000200:	1ad0      	subs	r0, r2, r3
 8000202:	4770      	bx	lr

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr
	...

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b96a 	b.w	80005ac <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	460c      	mov	r4, r1
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d14e      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fc:	4694      	mov	ip, r2
 80002fe:	458c      	cmp	ip, r1
 8000300:	4686      	mov	lr, r0
 8000302:	fab2 f282 	clz	r2, r2
 8000306:	d962      	bls.n	80003ce <__udivmoddi4+0xde>
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0320 	rsb	r3, r2, #32
 800030e:	4091      	lsls	r1, r2
 8000310:	fa20 f303 	lsr.w	r3, r0, r3
 8000314:	fa0c fc02 	lsl.w	ip, ip, r2
 8000318:	4319      	orrs	r1, r3
 800031a:	fa00 fe02 	lsl.w	lr, r0, r2
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f f68c 	uxth.w	r6, ip
 8000326:	fbb1 f4f7 	udiv	r4, r1, r7
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb07 1114 	mls	r1, r7, r4, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb04 f106 	mul.w	r1, r4, r6
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f104 30ff 	add.w	r0, r4, #4294967295
 8000346:	f080 8112 	bcs.w	800056e <__udivmoddi4+0x27e>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 810f 	bls.w	800056e <__udivmoddi4+0x27e>
 8000350:	3c02      	subs	r4, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a59      	subs	r1, r3, r1
 8000356:	fa1f f38e 	uxth.w	r3, lr
 800035a:	fbb1 f0f7 	udiv	r0, r1, r7
 800035e:	fb07 1110 	mls	r1, r7, r0, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb00 f606 	mul.w	r6, r0, r6
 800036a:	429e      	cmp	r6, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x94>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f100 31ff 	add.w	r1, r0, #4294967295
 8000376:	f080 80fc 	bcs.w	8000572 <__udivmoddi4+0x282>
 800037a:	429e      	cmp	r6, r3
 800037c:	f240 80f9 	bls.w	8000572 <__udivmoddi4+0x282>
 8000380:	4463      	add	r3, ip
 8000382:	3802      	subs	r0, #2
 8000384:	1b9b      	subs	r3, r3, r6
 8000386:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800038a:	2100      	movs	r1, #0
 800038c:	b11d      	cbz	r5, 8000396 <__udivmoddi4+0xa6>
 800038e:	40d3      	lsrs	r3, r2
 8000390:	2200      	movs	r2, #0
 8000392:	e9c5 3200 	strd	r3, r2, [r5]
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d905      	bls.n	80003aa <__udivmoddi4+0xba>
 800039e:	b10d      	cbz	r5, 80003a4 <__udivmoddi4+0xb4>
 80003a0:	e9c5 0100 	strd	r0, r1, [r5]
 80003a4:	2100      	movs	r1, #0
 80003a6:	4608      	mov	r0, r1
 80003a8:	e7f5      	b.n	8000396 <__udivmoddi4+0xa6>
 80003aa:	fab3 f183 	clz	r1, r3
 80003ae:	2900      	cmp	r1, #0
 80003b0:	d146      	bne.n	8000440 <__udivmoddi4+0x150>
 80003b2:	42a3      	cmp	r3, r4
 80003b4:	d302      	bcc.n	80003bc <__udivmoddi4+0xcc>
 80003b6:	4290      	cmp	r0, r2
 80003b8:	f0c0 80f0 	bcc.w	800059c <__udivmoddi4+0x2ac>
 80003bc:	1a86      	subs	r6, r0, r2
 80003be:	eb64 0303 	sbc.w	r3, r4, r3
 80003c2:	2001      	movs	r0, #1
 80003c4:	2d00      	cmp	r5, #0
 80003c6:	d0e6      	beq.n	8000396 <__udivmoddi4+0xa6>
 80003c8:	e9c5 6300 	strd	r6, r3, [r5]
 80003cc:	e7e3      	b.n	8000396 <__udivmoddi4+0xa6>
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	f040 8090 	bne.w	80004f4 <__udivmoddi4+0x204>
 80003d4:	eba1 040c 	sub.w	r4, r1, ip
 80003d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003dc:	fa1f f78c 	uxth.w	r7, ip
 80003e0:	2101      	movs	r1, #1
 80003e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ea:	fb08 4416 	mls	r4, r8, r6, r4
 80003ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003f2:	fb07 f006 	mul.w	r0, r7, r6
 80003f6:	4298      	cmp	r0, r3
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x11c>
 80003fa:	eb1c 0303 	adds.w	r3, ip, r3
 80003fe:	f106 34ff 	add.w	r4, r6, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x11a>
 8000404:	4298      	cmp	r0, r3
 8000406:	f200 80cd 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 800040a:	4626      	mov	r6, r4
 800040c:	1a1c      	subs	r4, r3, r0
 800040e:	fa1f f38e 	uxth.w	r3, lr
 8000412:	fbb4 f0f8 	udiv	r0, r4, r8
 8000416:	fb08 4410 	mls	r4, r8, r0, r4
 800041a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800041e:	fb00 f707 	mul.w	r7, r0, r7
 8000422:	429f      	cmp	r7, r3
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x148>
 8000426:	eb1c 0303 	adds.w	r3, ip, r3
 800042a:	f100 34ff 	add.w	r4, r0, #4294967295
 800042e:	d202      	bcs.n	8000436 <__udivmoddi4+0x146>
 8000430:	429f      	cmp	r7, r3
 8000432:	f200 80b0 	bhi.w	8000596 <__udivmoddi4+0x2a6>
 8000436:	4620      	mov	r0, r4
 8000438:	1bdb      	subs	r3, r3, r7
 800043a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800043e:	e7a5      	b.n	800038c <__udivmoddi4+0x9c>
 8000440:	f1c1 0620 	rsb	r6, r1, #32
 8000444:	408b      	lsls	r3, r1
 8000446:	fa22 f706 	lsr.w	r7, r2, r6
 800044a:	431f      	orrs	r7, r3
 800044c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000450:	fa04 f301 	lsl.w	r3, r4, r1
 8000454:	ea43 030c 	orr.w	r3, r3, ip
 8000458:	40f4      	lsrs	r4, r6
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	0c38      	lsrs	r0, r7, #16
 8000460:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000464:	fbb4 fef0 	udiv	lr, r4, r0
 8000468:	fa1f fc87 	uxth.w	ip, r7
 800046c:	fb00 441e 	mls	r4, r0, lr, r4
 8000470:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000474:	fb0e f90c 	mul.w	r9, lr, ip
 8000478:	45a1      	cmp	r9, r4
 800047a:	fa02 f201 	lsl.w	r2, r2, r1
 800047e:	d90a      	bls.n	8000496 <__udivmoddi4+0x1a6>
 8000480:	193c      	adds	r4, r7, r4
 8000482:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000486:	f080 8084 	bcs.w	8000592 <__udivmoddi4+0x2a2>
 800048a:	45a1      	cmp	r9, r4
 800048c:	f240 8081 	bls.w	8000592 <__udivmoddi4+0x2a2>
 8000490:	f1ae 0e02 	sub.w	lr, lr, #2
 8000494:	443c      	add	r4, r7
 8000496:	eba4 0409 	sub.w	r4, r4, r9
 800049a:	fa1f f983 	uxth.w	r9, r3
 800049e:	fbb4 f3f0 	udiv	r3, r4, r0
 80004a2:	fb00 4413 	mls	r4, r0, r3, r4
 80004a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ae:	45a4      	cmp	ip, r4
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x1d2>
 80004b2:	193c      	adds	r4, r7, r4
 80004b4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004b8:	d267      	bcs.n	800058a <__udivmoddi4+0x29a>
 80004ba:	45a4      	cmp	ip, r4
 80004bc:	d965      	bls.n	800058a <__udivmoddi4+0x29a>
 80004be:	3b02      	subs	r3, #2
 80004c0:	443c      	add	r4, r7
 80004c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004c6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ca:	eba4 040c 	sub.w	r4, r4, ip
 80004ce:	429c      	cmp	r4, r3
 80004d0:	46ce      	mov	lr, r9
 80004d2:	469c      	mov	ip, r3
 80004d4:	d351      	bcc.n	800057a <__udivmoddi4+0x28a>
 80004d6:	d04e      	beq.n	8000576 <__udivmoddi4+0x286>
 80004d8:	b155      	cbz	r5, 80004f0 <__udivmoddi4+0x200>
 80004da:	ebb8 030e 	subs.w	r3, r8, lr
 80004de:	eb64 040c 	sbc.w	r4, r4, ip
 80004e2:	fa04 f606 	lsl.w	r6, r4, r6
 80004e6:	40cb      	lsrs	r3, r1
 80004e8:	431e      	orrs	r6, r3
 80004ea:	40cc      	lsrs	r4, r1
 80004ec:	e9c5 6400 	strd	r6, r4, [r5]
 80004f0:	2100      	movs	r1, #0
 80004f2:	e750      	b.n	8000396 <__udivmoddi4+0xa6>
 80004f4:	f1c2 0320 	rsb	r3, r2, #32
 80004f8:	fa20 f103 	lsr.w	r1, r0, r3
 80004fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000500:	fa24 f303 	lsr.w	r3, r4, r3
 8000504:	4094      	lsls	r4, r2
 8000506:	430c      	orrs	r4, r1
 8000508:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800050c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000510:	fa1f f78c 	uxth.w	r7, ip
 8000514:	fbb3 f0f8 	udiv	r0, r3, r8
 8000518:	fb08 3110 	mls	r1, r8, r0, r3
 800051c:	0c23      	lsrs	r3, r4, #16
 800051e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000522:	fb00 f107 	mul.w	r1, r0, r7
 8000526:	4299      	cmp	r1, r3
 8000528:	d908      	bls.n	800053c <__udivmoddi4+0x24c>
 800052a:	eb1c 0303 	adds.w	r3, ip, r3
 800052e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000532:	d22c      	bcs.n	800058e <__udivmoddi4+0x29e>
 8000534:	4299      	cmp	r1, r3
 8000536:	d92a      	bls.n	800058e <__udivmoddi4+0x29e>
 8000538:	3802      	subs	r0, #2
 800053a:	4463      	add	r3, ip
 800053c:	1a5b      	subs	r3, r3, r1
 800053e:	b2a4      	uxth	r4, r4
 8000540:	fbb3 f1f8 	udiv	r1, r3, r8
 8000544:	fb08 3311 	mls	r3, r8, r1, r3
 8000548:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800054c:	fb01 f307 	mul.w	r3, r1, r7
 8000550:	42a3      	cmp	r3, r4
 8000552:	d908      	bls.n	8000566 <__udivmoddi4+0x276>
 8000554:	eb1c 0404 	adds.w	r4, ip, r4
 8000558:	f101 36ff 	add.w	r6, r1, #4294967295
 800055c:	d213      	bcs.n	8000586 <__udivmoddi4+0x296>
 800055e:	42a3      	cmp	r3, r4
 8000560:	d911      	bls.n	8000586 <__udivmoddi4+0x296>
 8000562:	3902      	subs	r1, #2
 8000564:	4464      	add	r4, ip
 8000566:	1ae4      	subs	r4, r4, r3
 8000568:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800056c:	e739      	b.n	80003e2 <__udivmoddi4+0xf2>
 800056e:	4604      	mov	r4, r0
 8000570:	e6f0      	b.n	8000354 <__udivmoddi4+0x64>
 8000572:	4608      	mov	r0, r1
 8000574:	e706      	b.n	8000384 <__udivmoddi4+0x94>
 8000576:	45c8      	cmp	r8, r9
 8000578:	d2ae      	bcs.n	80004d8 <__udivmoddi4+0x1e8>
 800057a:	ebb9 0e02 	subs.w	lr, r9, r2
 800057e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000582:	3801      	subs	r0, #1
 8000584:	e7a8      	b.n	80004d8 <__udivmoddi4+0x1e8>
 8000586:	4631      	mov	r1, r6
 8000588:	e7ed      	b.n	8000566 <__udivmoddi4+0x276>
 800058a:	4603      	mov	r3, r0
 800058c:	e799      	b.n	80004c2 <__udivmoddi4+0x1d2>
 800058e:	4630      	mov	r0, r6
 8000590:	e7d4      	b.n	800053c <__udivmoddi4+0x24c>
 8000592:	46d6      	mov	lr, sl
 8000594:	e77f      	b.n	8000496 <__udivmoddi4+0x1a6>
 8000596:	4463      	add	r3, ip
 8000598:	3802      	subs	r0, #2
 800059a:	e74d      	b.n	8000438 <__udivmoddi4+0x148>
 800059c:	4606      	mov	r6, r0
 800059e:	4623      	mov	r3, r4
 80005a0:	4608      	mov	r0, r1
 80005a2:	e70f      	b.n	80003c4 <__udivmoddi4+0xd4>
 80005a4:	3e02      	subs	r6, #2
 80005a6:	4463      	add	r3, ip
 80005a8:	e730      	b.n	800040c <__udivmoddi4+0x11c>
 80005aa:	bf00      	nop

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <SH1106_Init>:
static SH1106_t SH1106;

#define SH1106_NORMALDISPLAY       0xA6
#define SH1106_INVERTDISPLAY       0xA7

uint8_t SH1106_Init(void) {
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b082      	sub	sp, #8
 80005b4:	af00      	add	r7, sp, #0
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(SH1106_I2C, SH1106_I2C_ADDR, 1, 20000) != HAL_OK) {
 80005b6:	f644 6320 	movw	r3, #20000	@ 0x4e20
 80005ba:	2201      	movs	r2, #1
 80005bc:	2178      	movs	r1, #120	@ 0x78
 80005be:	484c      	ldr	r0, [pc, #304]	@ (80006f0 <SH1106_Init+0x140>)
 80005c0:	f002 fcd2 	bl	8002f68 <HAL_I2C_IsDeviceReady>
 80005c4:	4603      	mov	r3, r0
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d001      	beq.n	80005ce <SH1106_Init+0x1e>
		/* Return false */
		return 0;
 80005ca:	2300      	movs	r3, #0
 80005cc:	e08b      	b.n	80006e6 <SH1106_Init+0x136>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 80005ce:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 80005d2:	607b      	str	r3, [r7, #4]
	while(p>0)
 80005d4:	e002      	b.n	80005dc <SH1106_Init+0x2c>
		p--;
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	3b01      	subs	r3, #1
 80005da:	607b      	str	r3, [r7, #4]
	while(p>0)
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d1f9      	bne.n	80005d6 <SH1106_Init+0x26>
	
	  // Initialize the display
	SH1106_WRITECOMMAND(0xAE); //display off
 80005e2:	22ae      	movs	r2, #174	@ 0xae
 80005e4:	2100      	movs	r1, #0
 80005e6:	2078      	movs	r0, #120	@ 0x78
 80005e8:	f000 fa54 	bl	8000a94 <SH1106_I2C_Write>
	SH1106_WRITECOMMAND(0xB0|0x00); //Set Page Start Address for Page Addressing Mode,0-7
 80005ec:	22b0      	movs	r2, #176	@ 0xb0
 80005ee:	2100      	movs	r1, #0
 80005f0:	2078      	movs	r0, #120	@ 0x78
 80005f2:	f000 fa4f 	bl	8000a94 <SH1106_I2C_Write>
	SH1106_WRITECOMMAND(0x81); //--set contrast control register
 80005f6:	2281      	movs	r2, #129	@ 0x81
 80005f8:	2100      	movs	r1, #0
 80005fa:	2078      	movs	r0, #120	@ 0x78
 80005fc:	f000 fa4a 	bl	8000a94 <SH1106_I2C_Write>
	SH1106_WRITECOMMAND(0xFF); // contrast value
 8000600:	22ff      	movs	r2, #255	@ 0xff
 8000602:	2100      	movs	r1, #0
 8000604:	2078      	movs	r0, #120	@ 0x78
 8000606:	f000 fa45 	bl	8000a94 <SH1106_I2C_Write>
	SH1106_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 800060a:	22a1      	movs	r2, #161	@ 0xa1
 800060c:	2100      	movs	r1, #0
 800060e:	2078      	movs	r0, #120	@ 0x78
 8000610:	f000 fa40 	bl	8000a94 <SH1106_I2C_Write>
	SH1106_WRITECOMMAND(0xA6); //--set normal display
 8000614:	22a6      	movs	r2, #166	@ 0xa6
 8000616:	2100      	movs	r1, #0
 8000618:	2078      	movs	r0, #120	@ 0x78
 800061a:	f000 fa3b 	bl	8000a94 <SH1106_I2C_Write>
	SH1106_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 800061e:	22a8      	movs	r2, #168	@ 0xa8
 8000620:	2100      	movs	r1, #0
 8000622:	2078      	movs	r0, #120	@ 0x78
 8000624:	f000 fa36 	bl	8000a94 <SH1106_I2C_Write>
	SH1106_WRITECOMMAND(0x3F); // multiplex value
 8000628:	223f      	movs	r2, #63	@ 0x3f
 800062a:	2100      	movs	r1, #0
 800062c:	2078      	movs	r0, #120	@ 0x78
 800062e:	f000 fa31 	bl	8000a94 <SH1106_I2C_Write>
	SH1106_WRITECOMMAND(0xAD); // Set Pump Mode
 8000632:	22ad      	movs	r2, #173	@ 0xad
 8000634:	2100      	movs	r1, #0
 8000636:	2078      	movs	r0, #120	@ 0x78
 8000638:	f000 fa2c 	bl	8000a94 <SH1106_I2C_Write>
	SH1106_WRITECOMMAND(0x8B); // Pump ON
 800063c:	228b      	movs	r2, #139	@ 0x8b
 800063e:	2100      	movs	r1, #0
 8000640:	2078      	movs	r0, #120	@ 0x78
 8000642:	f000 fa27 	bl	8000a94 <SH1106_I2C_Write>
	SH1106_WRITECOMMAND(0x30|0x02); // Set Pump Voltage 8.0
 8000646:	2232      	movs	r2, #50	@ 0x32
 8000648:	2100      	movs	r1, #0
 800064a:	2078      	movs	r0, #120	@ 0x78
 800064c:	f000 fa22 	bl	8000a94 <SH1106_I2C_Write>
	SH1106_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8000650:	22c8      	movs	r2, #200	@ 0xc8
 8000652:	2100      	movs	r1, #0
 8000654:	2078      	movs	r0, #120	@ 0x78
 8000656:	f000 fa1d 	bl	8000a94 <SH1106_I2C_Write>
	SH1106_WRITECOMMAND(0xD3); //-set display offset
 800065a:	22d3      	movs	r2, #211	@ 0xd3
 800065c:	2100      	movs	r1, #0
 800065e:	2078      	movs	r0, #120	@ 0x78
 8000660:	f000 fa18 	bl	8000a94 <SH1106_I2C_Write>
	SH1106_WRITECOMMAND(0x00); //-not offset
 8000664:	2200      	movs	r2, #0
 8000666:	2100      	movs	r1, #0
 8000668:	2078      	movs	r0, #120	@ 0x78
 800066a:	f000 fa13 	bl	8000a94 <SH1106_I2C_Write>
	SH1106_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 800066e:	22d5      	movs	r2, #213	@ 0xd5
 8000670:	2100      	movs	r1, #0
 8000672:	2078      	movs	r0, #120	@ 0x78
 8000674:	f000 fa0e 	bl	8000a94 <SH1106_I2C_Write>
	SH1106_WRITECOMMAND(0x80); //--set divide ratio
 8000678:	2280      	movs	r2, #128	@ 0x80
 800067a:	2100      	movs	r1, #0
 800067c:	2078      	movs	r0, #120	@ 0x78
 800067e:	f000 fa09 	bl	8000a94 <SH1106_I2C_Write>
	SH1106_WRITECOMMAND(0xD9); //--set pre-charge period
 8000682:	22d9      	movs	r2, #217	@ 0xd9
 8000684:	2100      	movs	r1, #0
 8000686:	2078      	movs	r0, #120	@ 0x78
 8000688:	f000 fa04 	bl	8000a94 <SH1106_I2C_Write>
	SH1106_WRITECOMMAND(0x1F); //
 800068c:	221f      	movs	r2, #31
 800068e:	2100      	movs	r1, #0
 8000690:	2078      	movs	r0, #120	@ 0x78
 8000692:	f000 f9ff 	bl	8000a94 <SH1106_I2C_Write>
	SH1106_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8000696:	22da      	movs	r2, #218	@ 0xda
 8000698:	2100      	movs	r1, #0
 800069a:	2078      	movs	r0, #120	@ 0x78
 800069c:	f000 f9fa 	bl	8000a94 <SH1106_I2C_Write>
	SH1106_WRITECOMMAND(0x12);
 80006a0:	2212      	movs	r2, #18
 80006a2:	2100      	movs	r1, #0
 80006a4:	2078      	movs	r0, #120	@ 0x78
 80006a6:	f000 f9f5 	bl	8000a94 <SH1106_I2C_Write>
	SH1106_WRITECOMMAND(0xDB); //--set vcomh
 80006aa:	22db      	movs	r2, #219	@ 0xdb
 80006ac:	2100      	movs	r1, #0
 80006ae:	2078      	movs	r0, #120	@ 0x78
 80006b0:	f000 f9f0 	bl	8000a94 <SH1106_I2C_Write>
	SH1106_WRITECOMMAND(0x40); //
 80006b4:	2240      	movs	r2, #64	@ 0x40
 80006b6:	2100      	movs	r1, #0
 80006b8:	2078      	movs	r0, #120	@ 0x78
 80006ba:	f000 f9eb 	bl	8000a94 <SH1106_I2C_Write>
	SH1106_WRITECOMMAND(0xAF); //--turn on SH1106 panel
 80006be:	22af      	movs	r2, #175	@ 0xaf
 80006c0:	2100      	movs	r1, #0
 80006c2:	2078      	movs	r0, #120	@ 0x78
 80006c4:	f000 f9e6 	bl	8000a94 <SH1106_I2C_Write>


	/* Clear screen */
	SH1106_Fill(SH1106_COLOR_BLACK);
 80006c8:	2000      	movs	r0, #0
 80006ca:	f000 f843 	bl	8000754 <SH1106_Fill>
	
	/* Update screen */
	SH1106_UpdateScreen();
 80006ce:	f000 f813 	bl	80006f8 <SH1106_UpdateScreen>
	
	/* Set default values */
	SH1106.CurrentX = 0;
 80006d2:	4b08      	ldr	r3, [pc, #32]	@ (80006f4 <SH1106_Init+0x144>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	801a      	strh	r2, [r3, #0]
	SH1106.CurrentY = 0;
 80006d8:	4b06      	ldr	r3, [pc, #24]	@ (80006f4 <SH1106_Init+0x144>)
 80006da:	2200      	movs	r2, #0
 80006dc:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SH1106.Initialized = 1;
 80006de:	4b05      	ldr	r3, [pc, #20]	@ (80006f4 <SH1106_Init+0x144>)
 80006e0:	2201      	movs	r2, #1
 80006e2:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 80006e4:	2301      	movs	r3, #1
}
 80006e6:	4618      	mov	r0, r3
 80006e8:	3708      	adds	r7, #8
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	bf00      	nop
 80006f0:	2000055c 	.word	0x2000055c
 80006f4:	20000488 	.word	0x20000488

080006f8 <SH1106_UpdateScreen>:

void SH1106_UpdateScreen(void) {
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b082      	sub	sp, #8
 80006fc:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 80006fe:	2300      	movs	r3, #0
 8000700:	71fb      	strb	r3, [r7, #7]
 8000702:	e01d      	b.n	8000740 <SH1106_UpdateScreen+0x48>
		SH1106_WRITECOMMAND(0xB0 + m);
 8000704:	79fb      	ldrb	r3, [r7, #7]
 8000706:	3b50      	subs	r3, #80	@ 0x50
 8000708:	b2db      	uxtb	r3, r3
 800070a:	461a      	mov	r2, r3
 800070c:	2100      	movs	r1, #0
 800070e:	2078      	movs	r0, #120	@ 0x78
 8000710:	f000 f9c0 	bl	8000a94 <SH1106_I2C_Write>
		SH1106_WRITECOMMAND(0x00);
 8000714:	2200      	movs	r2, #0
 8000716:	2100      	movs	r1, #0
 8000718:	2078      	movs	r0, #120	@ 0x78
 800071a:	f000 f9bb 	bl	8000a94 <SH1106_I2C_Write>
		SH1106_WRITECOMMAND(0x10);
 800071e:	2210      	movs	r2, #16
 8000720:	2100      	movs	r1, #0
 8000722:	2078      	movs	r0, #120	@ 0x78
 8000724:	f000 f9b6 	bl	8000a94 <SH1106_I2C_Write>
		
		/* Write multi data */
		SH1106_I2C_WriteMulti(SH1106_I2C_ADDR, 0x40, &SH1106_Buffer[SH1106_WIDTH * m], SH1106_WIDTH);
 8000728:	79fb      	ldrb	r3, [r7, #7]
 800072a:	01db      	lsls	r3, r3, #7
 800072c:	4a08      	ldr	r2, [pc, #32]	@ (8000750 <SH1106_UpdateScreen+0x58>)
 800072e:	441a      	add	r2, r3
 8000730:	2380      	movs	r3, #128	@ 0x80
 8000732:	2140      	movs	r1, #64	@ 0x40
 8000734:	2078      	movs	r0, #120	@ 0x78
 8000736:	f000 f947 	bl	80009c8 <SH1106_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 800073a:	79fb      	ldrb	r3, [r7, #7]
 800073c:	3301      	adds	r3, #1
 800073e:	71fb      	strb	r3, [r7, #7]
 8000740:	79fb      	ldrb	r3, [r7, #7]
 8000742:	2b07      	cmp	r3, #7
 8000744:	d9de      	bls.n	8000704 <SH1106_UpdateScreen+0xc>
	}
}
 8000746:	bf00      	nop
 8000748:	bf00      	nop
 800074a:	3708      	adds	r7, #8
 800074c:	46bd      	mov	sp, r7
 800074e:	bd80      	pop	{r7, pc}
 8000750:	20000088 	.word	0x20000088

08000754 <SH1106_Fill>:
	for (i = 0; i < sizeof(SH1106_Buffer); i++) {
		SH1106_Buffer[i] = ~SH1106_Buffer[i];
	}
}

void SH1106_Fill(SH1106_COLOR_t color) {
 8000754:	b580      	push	{r7, lr}
 8000756:	b082      	sub	sp, #8
 8000758:	af00      	add	r7, sp, #0
 800075a:	4603      	mov	r3, r0
 800075c:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SH1106_Buffer, (color == SH1106_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SH1106_Buffer));
 800075e:	79fb      	ldrb	r3, [r7, #7]
 8000760:	2b00      	cmp	r3, #0
 8000762:	d101      	bne.n	8000768 <SH1106_Fill+0x14>
 8000764:	2300      	movs	r3, #0
 8000766:	e000      	b.n	800076a <SH1106_Fill+0x16>
 8000768:	23ff      	movs	r3, #255	@ 0xff
 800076a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800076e:	4619      	mov	r1, r3
 8000770:	4803      	ldr	r0, [pc, #12]	@ (8000780 <SH1106_Fill+0x2c>)
 8000772:	f005 f81d 	bl	80057b0 <memset>
}
 8000776:	bf00      	nop
 8000778:	3708      	adds	r7, #8
 800077a:	46bd      	mov	sp, r7
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop
 8000780:	20000088 	.word	0x20000088

08000784 <SH1106_DrawPixel>:

void SH1106_DrawPixel(uint16_t x, uint16_t y, SH1106_COLOR_t color) {
 8000784:	b480      	push	{r7}
 8000786:	b083      	sub	sp, #12
 8000788:	af00      	add	r7, sp, #0
 800078a:	4603      	mov	r3, r0
 800078c:	80fb      	strh	r3, [r7, #6]
 800078e:	460b      	mov	r3, r1
 8000790:	80bb      	strh	r3, [r7, #4]
 8000792:	4613      	mov	r3, r2
 8000794:	70fb      	strb	r3, [r7, #3]
	if (
 8000796:	88fb      	ldrh	r3, [r7, #6]
 8000798:	2b7f      	cmp	r3, #127	@ 0x7f
 800079a:	d848      	bhi.n	800082e <SH1106_DrawPixel+0xaa>
		x >= SH1106_WIDTH ||
 800079c:	88bb      	ldrh	r3, [r7, #4]
 800079e:	2b3f      	cmp	r3, #63	@ 0x3f
 80007a0:	d845      	bhi.n	800082e <SH1106_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SH1106.Inverted) {
 80007a2:	4b26      	ldr	r3, [pc, #152]	@ (800083c <SH1106_DrawPixel+0xb8>)
 80007a4:	791b      	ldrb	r3, [r3, #4]
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d006      	beq.n	80007b8 <SH1106_DrawPixel+0x34>
		color = (SH1106_COLOR_t)!color;
 80007aa:	78fb      	ldrb	r3, [r7, #3]
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	bf0c      	ite	eq
 80007b0:	2301      	moveq	r3, #1
 80007b2:	2300      	movne	r3, #0
 80007b4:	b2db      	uxtb	r3, r3
 80007b6:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SH1106_COLOR_WHITE) {
 80007b8:	78fb      	ldrb	r3, [r7, #3]
 80007ba:	2b01      	cmp	r3, #1
 80007bc:	d11a      	bne.n	80007f4 <SH1106_DrawPixel+0x70>
		SH1106_Buffer[x + (y / 8) * SH1106_WIDTH] |= 1 << (y % 8);
 80007be:	88fa      	ldrh	r2, [r7, #6]
 80007c0:	88bb      	ldrh	r3, [r7, #4]
 80007c2:	08db      	lsrs	r3, r3, #3
 80007c4:	b298      	uxth	r0, r3
 80007c6:	4603      	mov	r3, r0
 80007c8:	01db      	lsls	r3, r3, #7
 80007ca:	4413      	add	r3, r2
 80007cc:	4a1c      	ldr	r2, [pc, #112]	@ (8000840 <SH1106_DrawPixel+0xbc>)
 80007ce:	5cd3      	ldrb	r3, [r2, r3]
 80007d0:	b25a      	sxtb	r2, r3
 80007d2:	88bb      	ldrh	r3, [r7, #4]
 80007d4:	f003 0307 	and.w	r3, r3, #7
 80007d8:	2101      	movs	r1, #1
 80007da:	fa01 f303 	lsl.w	r3, r1, r3
 80007de:	b25b      	sxtb	r3, r3
 80007e0:	4313      	orrs	r3, r2
 80007e2:	b259      	sxtb	r1, r3
 80007e4:	88fa      	ldrh	r2, [r7, #6]
 80007e6:	4603      	mov	r3, r0
 80007e8:	01db      	lsls	r3, r3, #7
 80007ea:	4413      	add	r3, r2
 80007ec:	b2c9      	uxtb	r1, r1
 80007ee:	4a14      	ldr	r2, [pc, #80]	@ (8000840 <SH1106_DrawPixel+0xbc>)
 80007f0:	54d1      	strb	r1, [r2, r3]
 80007f2:	e01d      	b.n	8000830 <SH1106_DrawPixel+0xac>
	} else {
		SH1106_Buffer[x + (y / 8) * SH1106_WIDTH] &= ~(1 << (y % 8));
 80007f4:	88fa      	ldrh	r2, [r7, #6]
 80007f6:	88bb      	ldrh	r3, [r7, #4]
 80007f8:	08db      	lsrs	r3, r3, #3
 80007fa:	b298      	uxth	r0, r3
 80007fc:	4603      	mov	r3, r0
 80007fe:	01db      	lsls	r3, r3, #7
 8000800:	4413      	add	r3, r2
 8000802:	4a0f      	ldr	r2, [pc, #60]	@ (8000840 <SH1106_DrawPixel+0xbc>)
 8000804:	5cd3      	ldrb	r3, [r2, r3]
 8000806:	b25a      	sxtb	r2, r3
 8000808:	88bb      	ldrh	r3, [r7, #4]
 800080a:	f003 0307 	and.w	r3, r3, #7
 800080e:	2101      	movs	r1, #1
 8000810:	fa01 f303 	lsl.w	r3, r1, r3
 8000814:	b25b      	sxtb	r3, r3
 8000816:	43db      	mvns	r3, r3
 8000818:	b25b      	sxtb	r3, r3
 800081a:	4013      	ands	r3, r2
 800081c:	b259      	sxtb	r1, r3
 800081e:	88fa      	ldrh	r2, [r7, #6]
 8000820:	4603      	mov	r3, r0
 8000822:	01db      	lsls	r3, r3, #7
 8000824:	4413      	add	r3, r2
 8000826:	b2c9      	uxtb	r1, r1
 8000828:	4a05      	ldr	r2, [pc, #20]	@ (8000840 <SH1106_DrawPixel+0xbc>)
 800082a:	54d1      	strb	r1, [r2, r3]
 800082c:	e000      	b.n	8000830 <SH1106_DrawPixel+0xac>
		return;
 800082e:	bf00      	nop
	}
}
 8000830:	370c      	adds	r7, #12
 8000832:	46bd      	mov	sp, r7
 8000834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000838:	4770      	bx	lr
 800083a:	bf00      	nop
 800083c:	20000488 	.word	0x20000488
 8000840:	20000088 	.word	0x20000088

08000844 <SH1106_GotoXY>:

void SH1106_GotoXY(uint16_t x, uint16_t y) {
 8000844:	b480      	push	{r7}
 8000846:	b083      	sub	sp, #12
 8000848:	af00      	add	r7, sp, #0
 800084a:	4603      	mov	r3, r0
 800084c:	460a      	mov	r2, r1
 800084e:	80fb      	strh	r3, [r7, #6]
 8000850:	4613      	mov	r3, r2
 8000852:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SH1106.CurrentX = x;
 8000854:	4a05      	ldr	r2, [pc, #20]	@ (800086c <SH1106_GotoXY+0x28>)
 8000856:	88fb      	ldrh	r3, [r7, #6]
 8000858:	8013      	strh	r3, [r2, #0]
	SH1106.CurrentY = y;
 800085a:	4a04      	ldr	r2, [pc, #16]	@ (800086c <SH1106_GotoXY+0x28>)
 800085c:	88bb      	ldrh	r3, [r7, #4]
 800085e:	8053      	strh	r3, [r2, #2]
}
 8000860:	bf00      	nop
 8000862:	370c      	adds	r7, #12
 8000864:	46bd      	mov	sp, r7
 8000866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086a:	4770      	bx	lr
 800086c:	20000488 	.word	0x20000488

08000870 <SH1106_Putc>:

char SH1106_Putc(char ch, FontDef_t* Font, SH1106_COLOR_t color) {
 8000870:	b580      	push	{r7, lr}
 8000872:	b086      	sub	sp, #24
 8000874:	af00      	add	r7, sp, #0
 8000876:	4603      	mov	r3, r0
 8000878:	6039      	str	r1, [r7, #0]
 800087a:	71fb      	strb	r3, [r7, #7]
 800087c:	4613      	mov	r3, r2
 800087e:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SH1106_WIDTH <= (SH1106.CurrentX + Font->FontWidth) ||
 8000880:	4b39      	ldr	r3, [pc, #228]	@ (8000968 <SH1106_Putc+0xf8>)
 8000882:	881b      	ldrh	r3, [r3, #0]
 8000884:	461a      	mov	r2, r3
 8000886:	683b      	ldr	r3, [r7, #0]
 8000888:	781b      	ldrb	r3, [r3, #0]
 800088a:	4413      	add	r3, r2
	if (
 800088c:	2b7f      	cmp	r3, #127	@ 0x7f
 800088e:	dc07      	bgt.n	80008a0 <SH1106_Putc+0x30>
		SH1106_HEIGHT <= (SH1106.CurrentY + Font->FontHeight)
 8000890:	4b35      	ldr	r3, [pc, #212]	@ (8000968 <SH1106_Putc+0xf8>)
 8000892:	885b      	ldrh	r3, [r3, #2]
 8000894:	461a      	mov	r2, r3
 8000896:	683b      	ldr	r3, [r7, #0]
 8000898:	785b      	ldrb	r3, [r3, #1]
 800089a:	4413      	add	r3, r2
		SH1106_WIDTH <= (SH1106.CurrentX + Font->FontWidth) ||
 800089c:	2b3f      	cmp	r3, #63	@ 0x3f
 800089e:	dd01      	ble.n	80008a4 <SH1106_Putc+0x34>
	) {
		/* Error */
		return 0;
 80008a0:	2300      	movs	r3, #0
 80008a2:	e05d      	b.n	8000960 <SH1106_Putc+0xf0>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 80008a4:	2300      	movs	r3, #0
 80008a6:	617b      	str	r3, [r7, #20]
 80008a8:	e04b      	b.n	8000942 <SH1106_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 80008aa:	683b      	ldr	r3, [r7, #0]
 80008ac:	685a      	ldr	r2, [r3, #4]
 80008ae:	79fb      	ldrb	r3, [r7, #7]
 80008b0:	3b20      	subs	r3, #32
 80008b2:	6839      	ldr	r1, [r7, #0]
 80008b4:	7849      	ldrb	r1, [r1, #1]
 80008b6:	fb01 f303 	mul.w	r3, r1, r3
 80008ba:	4619      	mov	r1, r3
 80008bc:	697b      	ldr	r3, [r7, #20]
 80008be:	440b      	add	r3, r1
 80008c0:	005b      	lsls	r3, r3, #1
 80008c2:	4413      	add	r3, r2
 80008c4:	881b      	ldrh	r3, [r3, #0]
 80008c6:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 80008c8:	2300      	movs	r3, #0
 80008ca:	613b      	str	r3, [r7, #16]
 80008cc:	e030      	b.n	8000930 <SH1106_Putc+0xc0>
			if ((b << j) & 0x8000) {
 80008ce:	68fa      	ldr	r2, [r7, #12]
 80008d0:	693b      	ldr	r3, [r7, #16]
 80008d2:	fa02 f303 	lsl.w	r3, r2, r3
 80008d6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d010      	beq.n	8000900 <SH1106_Putc+0x90>
				SH1106_DrawPixel(SH1106.CurrentX + j, (SH1106.CurrentY + i), (SH1106_COLOR_t) color);
 80008de:	4b22      	ldr	r3, [pc, #136]	@ (8000968 <SH1106_Putc+0xf8>)
 80008e0:	881a      	ldrh	r2, [r3, #0]
 80008e2:	693b      	ldr	r3, [r7, #16]
 80008e4:	b29b      	uxth	r3, r3
 80008e6:	4413      	add	r3, r2
 80008e8:	b298      	uxth	r0, r3
 80008ea:	4b1f      	ldr	r3, [pc, #124]	@ (8000968 <SH1106_Putc+0xf8>)
 80008ec:	885a      	ldrh	r2, [r3, #2]
 80008ee:	697b      	ldr	r3, [r7, #20]
 80008f0:	b29b      	uxth	r3, r3
 80008f2:	4413      	add	r3, r2
 80008f4:	b29b      	uxth	r3, r3
 80008f6:	79ba      	ldrb	r2, [r7, #6]
 80008f8:	4619      	mov	r1, r3
 80008fa:	f7ff ff43 	bl	8000784 <SH1106_DrawPixel>
 80008fe:	e014      	b.n	800092a <SH1106_Putc+0xba>
			} else {
				SH1106_DrawPixel(SH1106.CurrentX + j, (SH1106.CurrentY + i), (SH1106_COLOR_t)!color);
 8000900:	4b19      	ldr	r3, [pc, #100]	@ (8000968 <SH1106_Putc+0xf8>)
 8000902:	881a      	ldrh	r2, [r3, #0]
 8000904:	693b      	ldr	r3, [r7, #16]
 8000906:	b29b      	uxth	r3, r3
 8000908:	4413      	add	r3, r2
 800090a:	b298      	uxth	r0, r3
 800090c:	4b16      	ldr	r3, [pc, #88]	@ (8000968 <SH1106_Putc+0xf8>)
 800090e:	885a      	ldrh	r2, [r3, #2]
 8000910:	697b      	ldr	r3, [r7, #20]
 8000912:	b29b      	uxth	r3, r3
 8000914:	4413      	add	r3, r2
 8000916:	b299      	uxth	r1, r3
 8000918:	79bb      	ldrb	r3, [r7, #6]
 800091a:	2b00      	cmp	r3, #0
 800091c:	bf0c      	ite	eq
 800091e:	2301      	moveq	r3, #1
 8000920:	2300      	movne	r3, #0
 8000922:	b2db      	uxtb	r3, r3
 8000924:	461a      	mov	r2, r3
 8000926:	f7ff ff2d 	bl	8000784 <SH1106_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 800092a:	693b      	ldr	r3, [r7, #16]
 800092c:	3301      	adds	r3, #1
 800092e:	613b      	str	r3, [r7, #16]
 8000930:	683b      	ldr	r3, [r7, #0]
 8000932:	781b      	ldrb	r3, [r3, #0]
 8000934:	461a      	mov	r2, r3
 8000936:	693b      	ldr	r3, [r7, #16]
 8000938:	4293      	cmp	r3, r2
 800093a:	d3c8      	bcc.n	80008ce <SH1106_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 800093c:	697b      	ldr	r3, [r7, #20]
 800093e:	3301      	adds	r3, #1
 8000940:	617b      	str	r3, [r7, #20]
 8000942:	683b      	ldr	r3, [r7, #0]
 8000944:	785b      	ldrb	r3, [r3, #1]
 8000946:	461a      	mov	r2, r3
 8000948:	697b      	ldr	r3, [r7, #20]
 800094a:	4293      	cmp	r3, r2
 800094c:	d3ad      	bcc.n	80008aa <SH1106_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SH1106.CurrentX += Font->FontWidth;
 800094e:	4b06      	ldr	r3, [pc, #24]	@ (8000968 <SH1106_Putc+0xf8>)
 8000950:	881b      	ldrh	r3, [r3, #0]
 8000952:	683a      	ldr	r2, [r7, #0]
 8000954:	7812      	ldrb	r2, [r2, #0]
 8000956:	4413      	add	r3, r2
 8000958:	b29a      	uxth	r2, r3
 800095a:	4b03      	ldr	r3, [pc, #12]	@ (8000968 <SH1106_Putc+0xf8>)
 800095c:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 800095e:	79fb      	ldrb	r3, [r7, #7]
}
 8000960:	4618      	mov	r0, r3
 8000962:	3718      	adds	r7, #24
 8000964:	46bd      	mov	sp, r7
 8000966:	bd80      	pop	{r7, pc}
 8000968:	20000488 	.word	0x20000488

0800096c <SH1106_Puts>:

char SH1106_Puts(char* str, FontDef_t* Font, SH1106_COLOR_t color) {
 800096c:	b580      	push	{r7, lr}
 800096e:	b084      	sub	sp, #16
 8000970:	af00      	add	r7, sp, #0
 8000972:	60f8      	str	r0, [r7, #12]
 8000974:	60b9      	str	r1, [r7, #8]
 8000976:	4613      	mov	r3, r2
 8000978:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 800097a:	e012      	b.n	80009a2 <SH1106_Puts+0x36>
		/* Write character by character */
		if (SH1106_Putc(*str, Font, color) != *str) {
 800097c:	68fb      	ldr	r3, [r7, #12]
 800097e:	781b      	ldrb	r3, [r3, #0]
 8000980:	79fa      	ldrb	r2, [r7, #7]
 8000982:	68b9      	ldr	r1, [r7, #8]
 8000984:	4618      	mov	r0, r3
 8000986:	f7ff ff73 	bl	8000870 <SH1106_Putc>
 800098a:	4603      	mov	r3, r0
 800098c:	461a      	mov	r2, r3
 800098e:	68fb      	ldr	r3, [r7, #12]
 8000990:	781b      	ldrb	r3, [r3, #0]
 8000992:	429a      	cmp	r2, r3
 8000994:	d002      	beq.n	800099c <SH1106_Puts+0x30>
			/* Return error */
			return *str;
 8000996:	68fb      	ldr	r3, [r7, #12]
 8000998:	781b      	ldrb	r3, [r3, #0]
 800099a:	e008      	b.n	80009ae <SH1106_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 800099c:	68fb      	ldr	r3, [r7, #12]
 800099e:	3301      	adds	r3, #1
 80009a0:	60fb      	str	r3, [r7, #12]
	while (*str) {
 80009a2:	68fb      	ldr	r3, [r7, #12]
 80009a4:	781b      	ldrb	r3, [r3, #0]
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d1e8      	bne.n	800097c <SH1106_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 80009aa:	68fb      	ldr	r3, [r7, #12]
 80009ac:	781b      	ldrb	r3, [r3, #0]
}
 80009ae:	4618      	mov	r0, r3
 80009b0:	3710      	adds	r7, #16
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}

080009b6 <SH1106_Clear>:
}
 


void SH1106_Clear (void)
{
 80009b6:	b580      	push	{r7, lr}
 80009b8:	af00      	add	r7, sp, #0
	SH1106_Fill (0);
 80009ba:	2000      	movs	r0, #0
 80009bc:	f7ff feca 	bl	8000754 <SH1106_Fill>
    SH1106_UpdateScreen();
 80009c0:	f7ff fe9a 	bl	80006f8 <SH1106_UpdateScreen>
}
 80009c4:	bf00      	nop
 80009c6:	bd80      	pop	{r7, pc}

080009c8 <SH1106_I2C_WriteMulti>:
	SH1106_WRITECOMMAND(0x8D);
	SH1106_WRITECOMMAND(0x10);
	SH1106_WRITECOMMAND(0xAE);
}

void SH1106_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 80009c8:	b590      	push	{r4, r7, lr}
 80009ca:	b0c7      	sub	sp, #284	@ 0x11c
 80009cc:	af02      	add	r7, sp, #8
 80009ce:	4604      	mov	r4, r0
 80009d0:	4608      	mov	r0, r1
 80009d2:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 80009d6:	f5a1 7188 	sub.w	r1, r1, #272	@ 0x110
 80009da:	600a      	str	r2, [r1, #0]
 80009dc:	4619      	mov	r1, r3
 80009de:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80009e2:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 80009e6:	4622      	mov	r2, r4
 80009e8:	701a      	strb	r2, [r3, #0]
 80009ea:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80009ee:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 80009f2:	4602      	mov	r2, r0
 80009f4:	701a      	strb	r2, [r3, #0]
 80009f6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80009fa:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80009fe:	460a      	mov	r2, r1
 8000a00:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8000a02:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000a06:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000a0a:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8000a0e:	f5a2 7285 	sub.w	r2, r2, #266	@ 0x10a
 8000a12:	7812      	ldrb	r2, [r2, #0]
 8000a14:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8000a16:	2300      	movs	r3, #0
 8000a18:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8000a1c:	e015      	b.n	8000a4a <SH1106_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 8000a1e:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8000a22:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8000a26:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 8000a2a:	6812      	ldr	r2, [r2, #0]
 8000a2c:	441a      	add	r2, r3
 8000a2e:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8000a32:	3301      	adds	r3, #1
 8000a34:	7811      	ldrb	r1, [r2, #0]
 8000a36:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8000a3a:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 8000a3e:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8000a40:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8000a44:	3301      	adds	r3, #1
 8000a46:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8000a4a:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8000a4e:	b29b      	uxth	r3, r3
 8000a50:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8000a54:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8000a58:	8812      	ldrh	r2, [r2, #0]
 8000a5a:	429a      	cmp	r2, r3
 8000a5c:	d8df      	bhi.n	8000a1e <SH1106_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(SH1106_I2C, address, dt, count+1, 10);
 8000a5e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000a62:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8000a66:	781b      	ldrb	r3, [r3, #0]
 8000a68:	b299      	uxth	r1, r3
 8000a6a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000a6e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000a72:	881b      	ldrh	r3, [r3, #0]
 8000a74:	3301      	adds	r3, #1
 8000a76:	b29b      	uxth	r3, r3
 8000a78:	f107 020c 	add.w	r2, r7, #12
 8000a7c:	200a      	movs	r0, #10
 8000a7e:	9000      	str	r0, [sp, #0]
 8000a80:	4803      	ldr	r0, [pc, #12]	@ (8000a90 <SH1106_I2C_WriteMulti+0xc8>)
 8000a82:	f002 f879 	bl	8002b78 <HAL_I2C_Master_Transmit>
}
 8000a86:	bf00      	nop
 8000a88:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	bd90      	pop	{r4, r7, pc}
 8000a90:	2000055c 	.word	0x2000055c

08000a94 <SH1106_I2C_Write>:


void SH1106_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b086      	sub	sp, #24
 8000a98:	af02      	add	r7, sp, #8
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	71fb      	strb	r3, [r7, #7]
 8000a9e:	460b      	mov	r3, r1
 8000aa0:	71bb      	strb	r3, [r7, #6]
 8000aa2:	4613      	mov	r3, r2
 8000aa4:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8000aa6:	79bb      	ldrb	r3, [r7, #6]
 8000aa8:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8000aaa:	797b      	ldrb	r3, [r7, #5]
 8000aac:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(SH1106_I2C, address, dt, 2, 10);
 8000aae:	79fb      	ldrb	r3, [r7, #7]
 8000ab0:	b299      	uxth	r1, r3
 8000ab2:	f107 020c 	add.w	r2, r7, #12
 8000ab6:	230a      	movs	r3, #10
 8000ab8:	9300      	str	r3, [sp, #0]
 8000aba:	2302      	movs	r3, #2
 8000abc:	4803      	ldr	r0, [pc, #12]	@ (8000acc <SH1106_I2C_Write+0x38>)
 8000abe:	f002 f85b 	bl	8002b78 <HAL_I2C_Master_Transmit>
}
 8000ac2:	bf00      	nop
 8000ac4:	3710      	adds	r7, #16
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	2000055c 	.word	0x2000055c

08000ad0 <SetTime>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void SetTime()
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b086      	sub	sp, #24
 8000ad4:	af04      	add	r7, sp, #16
  struct Time Set_time;
  Set_time.sec = 0;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	703b      	strb	r3, [r7, #0]
  Set_time.min = 13;
 8000ada:	230d      	movs	r3, #13
 8000adc:	707b      	strb	r3, [r7, #1]
  Set_time.hour = 14;
 8000ade:	230e      	movs	r3, #14
 8000ae0:	70bb      	strb	r3, [r7, #2]
  Set_time.day = 17;
 8000ae2:	2311      	movs	r3, #17
 8000ae4:	713b      	strb	r3, [r7, #4]
  Set_time.month = 4;
 8000ae6:	2304      	movs	r3, #4
 8000ae8:	717b      	strb	r3, [r7, #5]
  Set_time.year = 25;
 8000aea:	2319      	movs	r3, #25
 8000aec:	71bb      	strb	r3, [r7, #6]
  Set_time.weekday = 0;
 8000aee:	2300      	movs	r3, #0
 8000af0:	70fb      	strb	r3, [r7, #3]
  HAL_I2C_Mem_Write(&hi2c3, 0xD0, 0, 1, (uint8_t *)&Set_time, 7, 1000);
 8000af2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000af6:	9302      	str	r3, [sp, #8]
 8000af8:	2307      	movs	r3, #7
 8000afa:	9301      	str	r3, [sp, #4]
 8000afc:	463b      	mov	r3, r7
 8000afe:	9300      	str	r3, [sp, #0]
 8000b00:	2301      	movs	r3, #1
 8000b02:	2200      	movs	r2, #0
 8000b04:	21d0      	movs	r1, #208	@ 0xd0
 8000b06:	4803      	ldr	r0, [pc, #12]	@ (8000b14 <SetTime+0x44>)
 8000b08:	f002 f934 	bl	8002d74 <HAL_I2C_Mem_Write>
}
 8000b0c:	bf00      	nop
 8000b0e:	3708      	adds	r7, #8
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bd80      	pop	{r7, pc}
 8000b14:	2000055c 	.word	0x2000055c

08000b18 <isValidCardId>:
  SH1106_UpdateScreen();
  HAL_Delay(1000);
}

int isValidCardId(uint8_t *cardId)
{
 8000b18:	b5b0      	push	{r4, r5, r7, lr}
 8000b1a:	b08c      	sub	sp, #48	@ 0x30
 8000b1c:	af04      	add	r7, sp, #16
 8000b1e:	6078      	str	r0, [r7, #4]
  char cardIdString[20];
  sprintf(cardIdString, "%02X %02X %02X %02X %02X", cardId[0], cardId[1], cardId[2], cardId[3], cardId[4]);
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	781b      	ldrb	r3, [r3, #0]
 8000b24:	461c      	mov	r4, r3
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	3301      	adds	r3, #1
 8000b2a:	781b      	ldrb	r3, [r3, #0]
 8000b2c:	461d      	mov	r5, r3
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	3302      	adds	r3, #2
 8000b32:	781b      	ldrb	r3, [r3, #0]
 8000b34:	461a      	mov	r2, r3
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	3303      	adds	r3, #3
 8000b3a:	781b      	ldrb	r3, [r3, #0]
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	3304      	adds	r3, #4
 8000b42:	781b      	ldrb	r3, [r3, #0]
 8000b44:	f107 0008 	add.w	r0, r7, #8
 8000b48:	9302      	str	r3, [sp, #8]
 8000b4a:	9101      	str	r1, [sp, #4]
 8000b4c:	9200      	str	r2, [sp, #0]
 8000b4e:	462b      	mov	r3, r5
 8000b50:	4622      	mov	r2, r4
 8000b52:	4920      	ldr	r1, [pc, #128]	@ (8000bd4 <isValidCardId+0xbc>)
 8000b54:	f004 fe0c 	bl	8005770 <siprintf>
  
  // In cardID ra UART để debug
  HAL_UART_Transmit(&huart1, (uint8_t *)"Scanned Card: ", 14, 1000);
 8000b58:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b5c:	220e      	movs	r2, #14
 8000b5e:	491e      	ldr	r1, [pc, #120]	@ (8000bd8 <isValidCardId+0xc0>)
 8000b60:	481e      	ldr	r0, [pc, #120]	@ (8000bdc <isValidCardId+0xc4>)
 8000b62:	f004 f9b3 	bl	8004ecc <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart1, (uint8_t *)cardIdString, strlen(cardIdString), 1000);
 8000b66:	f107 0308 	add.w	r3, r7, #8
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	f7ff fb4a 	bl	8000204 <strlen>
 8000b70:	4603      	mov	r3, r0
 8000b72:	b29a      	uxth	r2, r3
 8000b74:	f107 0108 	add.w	r1, r7, #8
 8000b78:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b7c:	4817      	ldr	r0, [pc, #92]	@ (8000bdc <isValidCardId+0xc4>)
 8000b7e:	f004 f9a5 	bl	8004ecc <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart1, (uint8_t *)"\r\n", 2, 1000);
 8000b82:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b86:	2202      	movs	r2, #2
 8000b88:	4915      	ldr	r1, [pc, #84]	@ (8000be0 <isValidCardId+0xc8>)
 8000b8a:	4814      	ldr	r0, [pc, #80]	@ (8000bdc <isValidCardId+0xc4>)
 8000b8c:	f004 f99e 	bl	8004ecc <HAL_UART_Transmit>
  
  // Kiểm tra xem cardID có nằm trong danh sách hợp lệ không
  for (int i = 0; i < num_valid_rfids; i++)
 8000b90:	2300      	movs	r3, #0
 8000b92:	61fb      	str	r3, [r7, #28]
 8000b94:	e014      	b.n	8000bc0 <isValidCardId+0xa8>
  {
    if (strcmp(cardIdString, valid_rfids[i]) == 0)
 8000b96:	69fa      	ldr	r2, [r7, #28]
 8000b98:	4613      	mov	r3, r2
 8000b9a:	009b      	lsls	r3, r3, #2
 8000b9c:	4413      	add	r3, r2
 8000b9e:	009b      	lsls	r3, r3, #2
 8000ba0:	4a10      	ldr	r2, [pc, #64]	@ (8000be4 <isValidCardId+0xcc>)
 8000ba2:	441a      	add	r2, r3
 8000ba4:	f107 0308 	add.w	r3, r7, #8
 8000ba8:	4611      	mov	r1, r2
 8000baa:	4618      	mov	r0, r3
 8000bac:	f7ff fb20 	bl	80001f0 <strcmp>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d101      	bne.n	8000bba <isValidCardId+0xa2>
    {
      return 1; // Card hợp lệ
 8000bb6:	2301      	movs	r3, #1
 8000bb8:	e008      	b.n	8000bcc <isValidCardId+0xb4>
  for (int i = 0; i < num_valid_rfids; i++)
 8000bba:	69fb      	ldr	r3, [r7, #28]
 8000bbc:	3301      	adds	r3, #1
 8000bbe:	61fb      	str	r3, [r7, #28]
 8000bc0:	4b09      	ldr	r3, [pc, #36]	@ (8000be8 <isValidCardId+0xd0>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	69fa      	ldr	r2, [r7, #28]
 8000bc6:	429a      	cmp	r2, r3
 8000bc8:	dbe5      	blt.n	8000b96 <isValidCardId+0x7e>
    }
  }
  return 0; // Card không hợp lệ
 8000bca:	2300      	movs	r3, #0
}
 8000bcc:	4618      	mov	r0, r3
 8000bce:	3720      	adds	r7, #32
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bdb0      	pop	{r4, r5, r7, pc}
 8000bd4:	08006180 	.word	0x08006180
 8000bd8:	0800619c 	.word	0x0800619c
 8000bdc:	20000608 	.word	0x20000608
 8000be0:	080061ac 	.word	0x080061ac
 8000be4:	20000490 	.word	0x20000490
 8000be8:	20000558 	.word	0x20000558

08000bec <addNewRfid>:

// Thêm thẻ RFID mới vào danh sách
void addNewRfid(const char* rfid) {
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b082      	sub	sp, #8
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
  if (num_valid_rfids < MAX_VALID_RFIDS) {
 8000bf4:	4b25      	ldr	r3, [pc, #148]	@ (8000c8c <addNewRfid+0xa0>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	2b09      	cmp	r3, #9
 8000bfa:	dc33      	bgt.n	8000c64 <addNewRfid+0x78>
    strcpy(valid_rfids[num_valid_rfids], rfid);
 8000bfc:	4b23      	ldr	r3, [pc, #140]	@ (8000c8c <addNewRfid+0xa0>)
 8000bfe:	681a      	ldr	r2, [r3, #0]
 8000c00:	4613      	mov	r3, r2
 8000c02:	009b      	lsls	r3, r3, #2
 8000c04:	4413      	add	r3, r2
 8000c06:	009b      	lsls	r3, r3, #2
 8000c08:	4a21      	ldr	r2, [pc, #132]	@ (8000c90 <addNewRfid+0xa4>)
 8000c0a:	4413      	add	r3, r2
 8000c0c:	6879      	ldr	r1, [r7, #4]
 8000c0e:	4618      	mov	r0, r3
 8000c10:	f004 fe22 	bl	8005858 <strcpy>
    num_valid_rfids++;
 8000c14:	4b1d      	ldr	r3, [pc, #116]	@ (8000c8c <addNewRfid+0xa0>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	3301      	adds	r3, #1
 8000c1a:	4a1c      	ldr	r2, [pc, #112]	@ (8000c8c <addNewRfid+0xa0>)
 8000c1c:	6013      	str	r3, [r2, #0]
    
    sprintf(buff, "Added new RFID: %s\r\n", rfid);
 8000c1e:	687a      	ldr	r2, [r7, #4]
 8000c20:	491c      	ldr	r1, [pc, #112]	@ (8000c94 <addNewRfid+0xa8>)
 8000c22:	481d      	ldr	r0, [pc, #116]	@ (8000c98 <addNewRfid+0xac>)
 8000c24:	f004 fda4 	bl	8005770 <siprintf>
    HAL_UART_Transmit(&huart1, (uint8_t *)buff, strlen(buff), 1000);
 8000c28:	481b      	ldr	r0, [pc, #108]	@ (8000c98 <addNewRfid+0xac>)
 8000c2a:	f7ff faeb 	bl	8000204 <strlen>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	b29a      	uxth	r2, r3
 8000c32:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c36:	4918      	ldr	r1, [pc, #96]	@ (8000c98 <addNewRfid+0xac>)
 8000c38:	4818      	ldr	r0, [pc, #96]	@ (8000c9c <addNewRfid+0xb0>)
 8000c3a:	f004 f947 	bl	8004ecc <HAL_UART_Transmit>
    
    sprintf(buff, "Total RFIDs: %d\r\n", num_valid_rfids);
 8000c3e:	4b13      	ldr	r3, [pc, #76]	@ (8000c8c <addNewRfid+0xa0>)
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	461a      	mov	r2, r3
 8000c44:	4916      	ldr	r1, [pc, #88]	@ (8000ca0 <addNewRfid+0xb4>)
 8000c46:	4814      	ldr	r0, [pc, #80]	@ (8000c98 <addNewRfid+0xac>)
 8000c48:	f004 fd92 	bl	8005770 <siprintf>
    HAL_UART_Transmit(&huart1, (uint8_t *)buff, strlen(buff), 1000);
 8000c4c:	4812      	ldr	r0, [pc, #72]	@ (8000c98 <addNewRfid+0xac>)
 8000c4e:	f7ff fad9 	bl	8000204 <strlen>
 8000c52:	4603      	mov	r3, r0
 8000c54:	b29a      	uxth	r2, r3
 8000c56:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c5a:	490f      	ldr	r1, [pc, #60]	@ (8000c98 <addNewRfid+0xac>)
 8000c5c:	480f      	ldr	r0, [pc, #60]	@ (8000c9c <addNewRfid+0xb0>)
 8000c5e:	f004 f935 	bl	8004ecc <HAL_UART_Transmit>
  } else {
    sprintf(buff, "Error: Maximum number of RFIDs reached\r\n");
    HAL_UART_Transmit(&huart1, (uint8_t *)buff, strlen(buff), 1000);
  }
}
 8000c62:	e00e      	b.n	8000c82 <addNewRfid+0x96>
    sprintf(buff, "Error: Maximum number of RFIDs reached\r\n");
 8000c64:	490f      	ldr	r1, [pc, #60]	@ (8000ca4 <addNewRfid+0xb8>)
 8000c66:	480c      	ldr	r0, [pc, #48]	@ (8000c98 <addNewRfid+0xac>)
 8000c68:	f004 fd82 	bl	8005770 <siprintf>
    HAL_UART_Transmit(&huart1, (uint8_t *)buff, strlen(buff), 1000);
 8000c6c:	480a      	ldr	r0, [pc, #40]	@ (8000c98 <addNewRfid+0xac>)
 8000c6e:	f7ff fac9 	bl	8000204 <strlen>
 8000c72:	4603      	mov	r3, r0
 8000c74:	b29a      	uxth	r2, r3
 8000c76:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c7a:	4907      	ldr	r1, [pc, #28]	@ (8000c98 <addNewRfid+0xac>)
 8000c7c:	4807      	ldr	r0, [pc, #28]	@ (8000c9c <addNewRfid+0xb0>)
 8000c7e:	f004 f925 	bl	8004ecc <HAL_UART_Transmit>
}
 8000c82:	bf00      	nop
 8000c84:	3708      	adds	r7, #8
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	20000558 	.word	0x20000558
 8000c90:	20000490 	.word	0x20000490
 8000c94:	080061b0 	.word	0x080061b0
 8000c98:	20000650 	.word	0x20000650
 8000c9c:	20000608 	.word	0x20000608
 8000ca0:	080061c8 	.word	0x080061c8
 8000ca4:	080061dc 	.word	0x080061dc

08000ca8 <processCommand>:

// Xử lý lệnh từ UART
void processCommand(char* cmd) {
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b088      	sub	sp, #32
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
  // Loại bỏ ký tự xuống dòng nếu có
  char* newline = strchr(cmd, '\r');
 8000cb0:	210d      	movs	r1, #13
 8000cb2:	6878      	ldr	r0, [r7, #4]
 8000cb4:	f004 fd84 	bl	80057c0 <strchr>
 8000cb8:	60f8      	str	r0, [r7, #12]
  if (newline) *newline = 0;
 8000cba:	68fb      	ldr	r3, [r7, #12]
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d002      	beq.n	8000cc6 <processCommand+0x1e>
 8000cc0:	68fb      	ldr	r3, [r7, #12]
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	701a      	strb	r2, [r3, #0]
  newline = strchr(cmd, '\n');
 8000cc6:	210a      	movs	r1, #10
 8000cc8:	6878      	ldr	r0, [r7, #4]
 8000cca:	f004 fd79 	bl	80057c0 <strchr>
 8000cce:	60f8      	str	r0, [r7, #12]
  if (newline) *newline = 0;
 8000cd0:	68fb      	ldr	r3, [r7, #12]
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d002      	beq.n	8000cdc <processCommand+0x34>
 8000cd6:	68fb      	ldr	r3, [r7, #12]
 8000cd8:	2200      	movs	r2, #0
 8000cda:	701a      	strb	r2, [r3, #0]
  
  // Kiểm tra lệnh
  if (strncmp(cmd, "admin", 5) == 0) {
 8000cdc:	2205      	movs	r2, #5
 8000cde:	4992      	ldr	r1, [pc, #584]	@ (8000f28 <processCommand+0x280>)
 8000ce0:	6878      	ldr	r0, [r7, #4]
 8000ce2:	f004 fd7a 	bl	80057da <strncmp>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d121      	bne.n	8000d30 <processCommand+0x88>
    is_admin_mode = 1;
 8000cec:	4b8f      	ldr	r3, [pc, #572]	@ (8000f2c <processCommand+0x284>)
 8000cee:	2201      	movs	r2, #1
 8000cf0:	701a      	strb	r2, [r3, #0]
    sprintf(buff, "Admin mode activated\r\n");
 8000cf2:	498f      	ldr	r1, [pc, #572]	@ (8000f30 <processCommand+0x288>)
 8000cf4:	488f      	ldr	r0, [pc, #572]	@ (8000f34 <processCommand+0x28c>)
 8000cf6:	f004 fd3b 	bl	8005770 <siprintf>
    HAL_UART_Transmit(&huart1, (uint8_t *)buff, strlen(buff), 1000);
 8000cfa:	488e      	ldr	r0, [pc, #568]	@ (8000f34 <processCommand+0x28c>)
 8000cfc:	f7ff fa82 	bl	8000204 <strlen>
 8000d00:	4603      	mov	r3, r0
 8000d02:	b29a      	uxth	r2, r3
 8000d04:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d08:	498a      	ldr	r1, [pc, #552]	@ (8000f34 <processCommand+0x28c>)
 8000d0a:	488b      	ldr	r0, [pc, #556]	@ (8000f38 <processCommand+0x290>)
 8000d0c:	f004 f8de 	bl	8004ecc <HAL_UART_Transmit>
    sprintf(buff, "Enter RFID to add (format: XX XX XX XX XX):\r\n");
 8000d10:	498a      	ldr	r1, [pc, #552]	@ (8000f3c <processCommand+0x294>)
 8000d12:	4888      	ldr	r0, [pc, #544]	@ (8000f34 <processCommand+0x28c>)
 8000d14:	f004 fd2c 	bl	8005770 <siprintf>
    HAL_UART_Transmit(&huart1, (uint8_t *)buff, strlen(buff), 1000);
 8000d18:	4886      	ldr	r0, [pc, #536]	@ (8000f34 <processCommand+0x28c>)
 8000d1a:	f7ff fa73 	bl	8000204 <strlen>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	b29a      	uxth	r2, r3
 8000d22:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d26:	4983      	ldr	r1, [pc, #524]	@ (8000f34 <processCommand+0x28c>)
 8000d28:	4883      	ldr	r0, [pc, #524]	@ (8000f38 <processCommand+0x290>)
 8000d2a:	f004 f8cf 	bl	8004ecc <HAL_UART_Transmit>
    } else {
      sprintf(buff, "Invalid RFID format. Use: XX XX XX XX XX\r\n");
      HAL_UART_Transmit(&huart1, (uint8_t *)buff, strlen(buff), 1000);
    }
  }
}
 8000d2e:	e0f6      	b.n	8000f1e <processCommand+0x276>
  else if (strncmp(cmd, "exit", 4) == 0) {
 8000d30:	2204      	movs	r2, #4
 8000d32:	4983      	ldr	r1, [pc, #524]	@ (8000f40 <processCommand+0x298>)
 8000d34:	6878      	ldr	r0, [r7, #4]
 8000d36:	f004 fd50 	bl	80057da <strncmp>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d112      	bne.n	8000d66 <processCommand+0xbe>
    is_admin_mode = 0;
 8000d40:	4b7a      	ldr	r3, [pc, #488]	@ (8000f2c <processCommand+0x284>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	701a      	strb	r2, [r3, #0]
    sprintf(buff, "Admin mode deactivated\r\n");
 8000d46:	497f      	ldr	r1, [pc, #508]	@ (8000f44 <processCommand+0x29c>)
 8000d48:	487a      	ldr	r0, [pc, #488]	@ (8000f34 <processCommand+0x28c>)
 8000d4a:	f004 fd11 	bl	8005770 <siprintf>
    HAL_UART_Transmit(&huart1, (uint8_t *)buff, strlen(buff), 1000);
 8000d4e:	4879      	ldr	r0, [pc, #484]	@ (8000f34 <processCommand+0x28c>)
 8000d50:	f7ff fa58 	bl	8000204 <strlen>
 8000d54:	4603      	mov	r3, r0
 8000d56:	b29a      	uxth	r2, r3
 8000d58:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d5c:	4975      	ldr	r1, [pc, #468]	@ (8000f34 <processCommand+0x28c>)
 8000d5e:	4876      	ldr	r0, [pc, #472]	@ (8000f38 <processCommand+0x290>)
 8000d60:	f004 f8b4 	bl	8004ecc <HAL_UART_Transmit>
}
 8000d64:	e0db      	b.n	8000f1e <processCommand+0x276>
  else if (strncmp(cmd, "list", 4) == 0) {
 8000d66:	2204      	movs	r2, #4
 8000d68:	4977      	ldr	r1, [pc, #476]	@ (8000f48 <processCommand+0x2a0>)
 8000d6a:	6878      	ldr	r0, [r7, #4]
 8000d6c:	f004 fd35 	bl	80057da <strncmp>
 8000d70:	4603      	mov	r3, r0
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d136      	bne.n	8000de4 <processCommand+0x13c>
    sprintf(buff, "Valid RFIDs (%d):\r\n", num_valid_rfids);
 8000d76:	4b75      	ldr	r3, [pc, #468]	@ (8000f4c <processCommand+0x2a4>)
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	461a      	mov	r2, r3
 8000d7c:	4974      	ldr	r1, [pc, #464]	@ (8000f50 <processCommand+0x2a8>)
 8000d7e:	486d      	ldr	r0, [pc, #436]	@ (8000f34 <processCommand+0x28c>)
 8000d80:	f004 fcf6 	bl	8005770 <siprintf>
    HAL_UART_Transmit(&huart1, (uint8_t *)buff, strlen(buff), 1000);
 8000d84:	486b      	ldr	r0, [pc, #428]	@ (8000f34 <processCommand+0x28c>)
 8000d86:	f7ff fa3d 	bl	8000204 <strlen>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	b29a      	uxth	r2, r3
 8000d8e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d92:	4968      	ldr	r1, [pc, #416]	@ (8000f34 <processCommand+0x28c>)
 8000d94:	4868      	ldr	r0, [pc, #416]	@ (8000f38 <processCommand+0x290>)
 8000d96:	f004 f899 	bl	8004ecc <HAL_UART_Transmit>
    for (int i = 0; i < num_valid_rfids; i++) {
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	61fb      	str	r3, [r7, #28]
 8000d9e:	e01b      	b.n	8000dd8 <processCommand+0x130>
      sprintf(buff, "%d: %s\r\n", i+1, valid_rfids[i]);
 8000da0:	69fb      	ldr	r3, [r7, #28]
 8000da2:	1c59      	adds	r1, r3, #1
 8000da4:	69fa      	ldr	r2, [r7, #28]
 8000da6:	4613      	mov	r3, r2
 8000da8:	009b      	lsls	r3, r3, #2
 8000daa:	4413      	add	r3, r2
 8000dac:	009b      	lsls	r3, r3, #2
 8000dae:	4a69      	ldr	r2, [pc, #420]	@ (8000f54 <processCommand+0x2ac>)
 8000db0:	4413      	add	r3, r2
 8000db2:	460a      	mov	r2, r1
 8000db4:	4968      	ldr	r1, [pc, #416]	@ (8000f58 <processCommand+0x2b0>)
 8000db6:	485f      	ldr	r0, [pc, #380]	@ (8000f34 <processCommand+0x28c>)
 8000db8:	f004 fcda 	bl	8005770 <siprintf>
      HAL_UART_Transmit(&huart1, (uint8_t *)buff, strlen(buff), 1000);
 8000dbc:	485d      	ldr	r0, [pc, #372]	@ (8000f34 <processCommand+0x28c>)
 8000dbe:	f7ff fa21 	bl	8000204 <strlen>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	b29a      	uxth	r2, r3
 8000dc6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000dca:	495a      	ldr	r1, [pc, #360]	@ (8000f34 <processCommand+0x28c>)
 8000dcc:	485a      	ldr	r0, [pc, #360]	@ (8000f38 <processCommand+0x290>)
 8000dce:	f004 f87d 	bl	8004ecc <HAL_UART_Transmit>
    for (int i = 0; i < num_valid_rfids; i++) {
 8000dd2:	69fb      	ldr	r3, [r7, #28]
 8000dd4:	3301      	adds	r3, #1
 8000dd6:	61fb      	str	r3, [r7, #28]
 8000dd8:	4b5c      	ldr	r3, [pc, #368]	@ (8000f4c <processCommand+0x2a4>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	69fa      	ldr	r2, [r7, #28]
 8000dde:	429a      	cmp	r2, r3
 8000de0:	dbde      	blt.n	8000da0 <processCommand+0xf8>
}
 8000de2:	e09c      	b.n	8000f1e <processCommand+0x276>
  else if (is_admin_mode && strlen(cmd) >= 14) {
 8000de4:	4b51      	ldr	r3, [pc, #324]	@ (8000f2c <processCommand+0x284>)
 8000de6:	781b      	ldrb	r3, [r3, #0]
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	f000 8098 	beq.w	8000f1e <processCommand+0x276>
 8000dee:	6878      	ldr	r0, [r7, #4]
 8000df0:	f7ff fa08 	bl	8000204 <strlen>
 8000df4:	4603      	mov	r3, r0
 8000df6:	2b0d      	cmp	r3, #13
 8000df8:	f240 8091 	bls.w	8000f1e <processCommand+0x276>
    int valid_format = 1;
 8000dfc:	2301      	movs	r3, #1
 8000dfe:	61bb      	str	r3, [r7, #24]
    if (strlen(cmd) >= 14) {
 8000e00:	6878      	ldr	r0, [r7, #4]
 8000e02:	f7ff f9ff 	bl	8000204 <strlen>
 8000e06:	4603      	mov	r3, r0
 8000e08:	2b0d      	cmp	r3, #13
 8000e0a:	d951      	bls.n	8000eb0 <processCommand+0x208>
      for (int i = 0; i < 14; i++) {
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	617b      	str	r3, [r7, #20]
 8000e10:	e04a      	b.n	8000ea8 <processCommand+0x200>
        if ((i == 2 || i == 5 || i == 8 || i == 11) && cmd[i] != ' ') {
 8000e12:	697b      	ldr	r3, [r7, #20]
 8000e14:	2b02      	cmp	r3, #2
 8000e16:	d008      	beq.n	8000e2a <processCommand+0x182>
 8000e18:	697b      	ldr	r3, [r7, #20]
 8000e1a:	2b05      	cmp	r3, #5
 8000e1c:	d005      	beq.n	8000e2a <processCommand+0x182>
 8000e1e:	697b      	ldr	r3, [r7, #20]
 8000e20:	2b08      	cmp	r3, #8
 8000e22:	d002      	beq.n	8000e2a <processCommand+0x182>
 8000e24:	697b      	ldr	r3, [r7, #20]
 8000e26:	2b0b      	cmp	r3, #11
 8000e28:	d108      	bne.n	8000e3c <processCommand+0x194>
 8000e2a:	697b      	ldr	r3, [r7, #20]
 8000e2c:	687a      	ldr	r2, [r7, #4]
 8000e2e:	4413      	add	r3, r2
 8000e30:	781b      	ldrb	r3, [r3, #0]
 8000e32:	2b20      	cmp	r3, #32
 8000e34:	d002      	beq.n	8000e3c <processCommand+0x194>
          valid_format = 0;
 8000e36:	2300      	movs	r3, #0
 8000e38:	61bb      	str	r3, [r7, #24]
          break;
 8000e3a:	e03b      	b.n	8000eb4 <processCommand+0x20c>
        if ((i != 2 && i != 5 && i != 8 && i != 11) && 
 8000e3c:	697b      	ldr	r3, [r7, #20]
 8000e3e:	2b02      	cmp	r3, #2
 8000e40:	d02f      	beq.n	8000ea2 <processCommand+0x1fa>
 8000e42:	697b      	ldr	r3, [r7, #20]
 8000e44:	2b05      	cmp	r3, #5
 8000e46:	d02c      	beq.n	8000ea2 <processCommand+0x1fa>
 8000e48:	697b      	ldr	r3, [r7, #20]
 8000e4a:	2b08      	cmp	r3, #8
 8000e4c:	d029      	beq.n	8000ea2 <processCommand+0x1fa>
 8000e4e:	697b      	ldr	r3, [r7, #20]
 8000e50:	2b0b      	cmp	r3, #11
 8000e52:	d026      	beq.n	8000ea2 <processCommand+0x1fa>
            !((cmd[i] >= '0' && cmd[i] <= '9') || 
 8000e54:	697b      	ldr	r3, [r7, #20]
 8000e56:	687a      	ldr	r2, [r7, #4]
 8000e58:	4413      	add	r3, r2
 8000e5a:	781b      	ldrb	r3, [r3, #0]
        if ((i != 2 && i != 5 && i != 8 && i != 11) && 
 8000e5c:	2b2f      	cmp	r3, #47	@ 0x2f
 8000e5e:	d905      	bls.n	8000e6c <processCommand+0x1c4>
            !((cmd[i] >= '0' && cmd[i] <= '9') || 
 8000e60:	697b      	ldr	r3, [r7, #20]
 8000e62:	687a      	ldr	r2, [r7, #4]
 8000e64:	4413      	add	r3, r2
 8000e66:	781b      	ldrb	r3, [r3, #0]
 8000e68:	2b39      	cmp	r3, #57	@ 0x39
 8000e6a:	d91a      	bls.n	8000ea2 <processCommand+0x1fa>
              (cmd[i] >= 'A' && cmd[i] <= 'F') ||
 8000e6c:	697b      	ldr	r3, [r7, #20]
 8000e6e:	687a      	ldr	r2, [r7, #4]
 8000e70:	4413      	add	r3, r2
 8000e72:	781b      	ldrb	r3, [r3, #0]
            !((cmd[i] >= '0' && cmd[i] <= '9') || 
 8000e74:	2b40      	cmp	r3, #64	@ 0x40
 8000e76:	d905      	bls.n	8000e84 <processCommand+0x1dc>
              (cmd[i] >= 'A' && cmd[i] <= 'F') ||
 8000e78:	697b      	ldr	r3, [r7, #20]
 8000e7a:	687a      	ldr	r2, [r7, #4]
 8000e7c:	4413      	add	r3, r2
 8000e7e:	781b      	ldrb	r3, [r3, #0]
 8000e80:	2b46      	cmp	r3, #70	@ 0x46
 8000e82:	d90e      	bls.n	8000ea2 <processCommand+0x1fa>
              (cmd[i] >= 'a' && cmd[i] <= 'f'))) {
 8000e84:	697b      	ldr	r3, [r7, #20]
 8000e86:	687a      	ldr	r2, [r7, #4]
 8000e88:	4413      	add	r3, r2
 8000e8a:	781b      	ldrb	r3, [r3, #0]
            !((cmd[i] >= '0' && cmd[i] <= '9') || 
 8000e8c:	2b60      	cmp	r3, #96	@ 0x60
 8000e8e:	d905      	bls.n	8000e9c <processCommand+0x1f4>
              (cmd[i] >= 'a' && cmd[i] <= 'f'))) {
 8000e90:	697b      	ldr	r3, [r7, #20]
 8000e92:	687a      	ldr	r2, [r7, #4]
 8000e94:	4413      	add	r3, r2
 8000e96:	781b      	ldrb	r3, [r3, #0]
 8000e98:	2b66      	cmp	r3, #102	@ 0x66
 8000e9a:	d902      	bls.n	8000ea2 <processCommand+0x1fa>
          valid_format = 0;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	61bb      	str	r3, [r7, #24]
          break;
 8000ea0:	e008      	b.n	8000eb4 <processCommand+0x20c>
      for (int i = 0; i < 14; i++) {
 8000ea2:	697b      	ldr	r3, [r7, #20]
 8000ea4:	3301      	adds	r3, #1
 8000ea6:	617b      	str	r3, [r7, #20]
 8000ea8:	697b      	ldr	r3, [r7, #20]
 8000eaa:	2b0d      	cmp	r3, #13
 8000eac:	ddb1      	ble.n	8000e12 <processCommand+0x16a>
 8000eae:	e001      	b.n	8000eb4 <processCommand+0x20c>
      valid_format = 0;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	61bb      	str	r3, [r7, #24]
    if (valid_format) {
 8000eb4:	69bb      	ldr	r3, [r7, #24]
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d022      	beq.n	8000f00 <processCommand+0x258>
      for (int i = 0; i < 14; i++) {
 8000eba:	2300      	movs	r3, #0
 8000ebc:	613b      	str	r3, [r7, #16]
 8000ebe:	e018      	b.n	8000ef2 <processCommand+0x24a>
        if (cmd[i] >= 'a' && cmd[i] <= 'f') {
 8000ec0:	693b      	ldr	r3, [r7, #16]
 8000ec2:	687a      	ldr	r2, [r7, #4]
 8000ec4:	4413      	add	r3, r2
 8000ec6:	781b      	ldrb	r3, [r3, #0]
 8000ec8:	2b60      	cmp	r3, #96	@ 0x60
 8000eca:	d90f      	bls.n	8000eec <processCommand+0x244>
 8000ecc:	693b      	ldr	r3, [r7, #16]
 8000ece:	687a      	ldr	r2, [r7, #4]
 8000ed0:	4413      	add	r3, r2
 8000ed2:	781b      	ldrb	r3, [r3, #0]
 8000ed4:	2b66      	cmp	r3, #102	@ 0x66
 8000ed6:	d809      	bhi.n	8000eec <processCommand+0x244>
          cmd[i] = cmd[i] - 32; // Chuyển thành chữ hoa
 8000ed8:	693b      	ldr	r3, [r7, #16]
 8000eda:	687a      	ldr	r2, [r7, #4]
 8000edc:	4413      	add	r3, r2
 8000ede:	781a      	ldrb	r2, [r3, #0]
 8000ee0:	693b      	ldr	r3, [r7, #16]
 8000ee2:	6879      	ldr	r1, [r7, #4]
 8000ee4:	440b      	add	r3, r1
 8000ee6:	3a20      	subs	r2, #32
 8000ee8:	b2d2      	uxtb	r2, r2
 8000eea:	701a      	strb	r2, [r3, #0]
      for (int i = 0; i < 14; i++) {
 8000eec:	693b      	ldr	r3, [r7, #16]
 8000eee:	3301      	adds	r3, #1
 8000ef0:	613b      	str	r3, [r7, #16]
 8000ef2:	693b      	ldr	r3, [r7, #16]
 8000ef4:	2b0d      	cmp	r3, #13
 8000ef6:	dde3      	ble.n	8000ec0 <processCommand+0x218>
      addNewRfid(cmd);
 8000ef8:	6878      	ldr	r0, [r7, #4]
 8000efa:	f7ff fe77 	bl	8000bec <addNewRfid>
}
 8000efe:	e00e      	b.n	8000f1e <processCommand+0x276>
      sprintf(buff, "Invalid RFID format. Use: XX XX XX XX XX\r\n");
 8000f00:	4916      	ldr	r1, [pc, #88]	@ (8000f5c <processCommand+0x2b4>)
 8000f02:	480c      	ldr	r0, [pc, #48]	@ (8000f34 <processCommand+0x28c>)
 8000f04:	f004 fc34 	bl	8005770 <siprintf>
      HAL_UART_Transmit(&huart1, (uint8_t *)buff, strlen(buff), 1000);
 8000f08:	480a      	ldr	r0, [pc, #40]	@ (8000f34 <processCommand+0x28c>)
 8000f0a:	f7ff f97b 	bl	8000204 <strlen>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	b29a      	uxth	r2, r3
 8000f12:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f16:	4907      	ldr	r1, [pc, #28]	@ (8000f34 <processCommand+0x28c>)
 8000f18:	4807      	ldr	r0, [pc, #28]	@ (8000f38 <processCommand+0x290>)
 8000f1a:	f003 ffd7 	bl	8004ecc <HAL_UART_Transmit>
}
 8000f1e:	bf00      	nop
 8000f20:	3720      	adds	r7, #32
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	08006208 	.word	0x08006208
 8000f2c:	200006d3 	.word	0x200006d3
 8000f30:	08006210 	.word	0x08006210
 8000f34:	20000650 	.word	0x20000650
 8000f38:	20000608 	.word	0x20000608
 8000f3c:	08006228 	.word	0x08006228
 8000f40:	08006258 	.word	0x08006258
 8000f44:	08006260 	.word	0x08006260
 8000f48:	0800627c 	.word	0x0800627c
 8000f4c:	20000558 	.word	0x20000558
 8000f50:	08006284 	.word	0x08006284
 8000f54:	20000490 	.word	0x20000490
 8000f58:	08006298 	.word	0x08006298
 8000f5c:	080062a4 	.word	0x080062a4

08000f60 <initDefaultRfids>:

// Khởi tạo một số RFID mặc định
void initDefaultRfids() {
 8000f60:	b580      	push	{r7, lr}
 8000f62:	af00      	add	r7, sp, #0
  addNewRfid("43 B7 82 34 42");
 8000f64:	4805      	ldr	r0, [pc, #20]	@ (8000f7c <initDefaultRfids+0x1c>)
 8000f66:	f7ff fe41 	bl	8000bec <addNewRfid>
  addNewRfid("43 E6 15 35 85");
 8000f6a:	4805      	ldr	r0, [pc, #20]	@ (8000f80 <initDefaultRfids+0x20>)
 8000f6c:	f7ff fe3e 	bl	8000bec <addNewRfid>
  addNewRfid("B3 DC 9E 19 E8");
 8000f70:	4804      	ldr	r0, [pc, #16]	@ (8000f84 <initDefaultRfids+0x24>)
 8000f72:	f7ff fe3b 	bl	8000bec <addNewRfid>
}
 8000f76:	bf00      	nop
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	080062d0 	.word	0x080062d0
 8000f80:	080062e0 	.word	0x080062e0
 8000f84:	080062f0 	.word	0x080062f0

08000f88 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f88:	b590      	push	{r4, r7, lr}
 8000f8a:	b08b      	sub	sp, #44	@ 0x2c
 8000f8c:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f8e:	f001 f955 	bl	800223c <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f92:	f000 faf9 	bl	8001588 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f96:	f000 fc07 	bl	80017a8 <MX_GPIO_Init>
  MX_I2C3_Init();
 8000f9a:	f000 fb65 	bl	8001668 <MX_I2C3_Init>
  MX_SPI4_Init();
 8000f9e:	f000 fba3 	bl	80016e8 <MX_SPI4_Init>
  MX_USART1_UART_Init();
 8000fa2:	f000 fbd7 	bl	8001754 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  sprintf(buff, "Initializing...\r\n");
 8000fa6:	49b3      	ldr	r1, [pc, #716]	@ (8001274 <main+0x2ec>)
 8000fa8:	48b3      	ldr	r0, [pc, #716]	@ (8001278 <main+0x2f0>)
 8000faa:	f004 fbe1 	bl	8005770 <siprintf>
  HAL_UART_Transmit(&huart1, (uint8_t *)buff, strlen(buff), 1000);
 8000fae:	48b2      	ldr	r0, [pc, #712]	@ (8001278 <main+0x2f0>)
 8000fb0:	f7ff f928 	bl	8000204 <strlen>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	b29a      	uxth	r2, r3
 8000fb8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000fbc:	49ae      	ldr	r1, [pc, #696]	@ (8001278 <main+0x2f0>)
 8000fbe:	48af      	ldr	r0, [pc, #700]	@ (800127c <main+0x2f4>)
 8000fc0:	f003 ff84 	bl	8004ecc <HAL_UART_Transmit>

  // Khởi tạo danh sách RFID mặc định
  initDefaultRfids();
 8000fc4:	f7ff ffcc 	bl	8000f60 <initDefaultRfids>
  
  // Hiển thị thông tin hướng dẫn sử dụng
  sprintf(buff, "\r\nCommands:\r\n- admin: Enter admin mode\r\n- exit: Exit admin mode\r\n- list: List all valid RFIDs\r\n");
 8000fc8:	49ad      	ldr	r1, [pc, #692]	@ (8001280 <main+0x2f8>)
 8000fca:	48ab      	ldr	r0, [pc, #684]	@ (8001278 <main+0x2f0>)
 8000fcc:	f004 fbd0 	bl	8005770 <siprintf>
  HAL_UART_Transmit(&huart1, (uint8_t *)buff, strlen(buff), 1000);
 8000fd0:	48a9      	ldr	r0, [pc, #676]	@ (8001278 <main+0x2f0>)
 8000fd2:	f7ff f917 	bl	8000204 <strlen>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	b29a      	uxth	r2, r3
 8000fda:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000fde:	49a6      	ldr	r1, [pc, #664]	@ (8001278 <main+0x2f0>)
 8000fe0:	48a6      	ldr	r0, [pc, #664]	@ (800127c <main+0x2f4>)
 8000fe2:	f003 ff73 	bl	8004ecc <HAL_UART_Transmit>

  SetTime(); // Set initial time (can be commented out after first run)
 8000fe6:	f7ff fd73 	bl	8000ad0 <SetTime>

  // Initialize OLED display
  sprintf(buff, "Initializing OLED display...\r\n");
 8000fea:	49a6      	ldr	r1, [pc, #664]	@ (8001284 <main+0x2fc>)
 8000fec:	48a2      	ldr	r0, [pc, #648]	@ (8001278 <main+0x2f0>)
 8000fee:	f004 fbbf 	bl	8005770 <siprintf>
  HAL_UART_Transmit(&huart1, (uint8_t *)buff, strlen(buff), 1000);
 8000ff2:	48a1      	ldr	r0, [pc, #644]	@ (8001278 <main+0x2f0>)
 8000ff4:	f7ff f906 	bl	8000204 <strlen>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	b29a      	uxth	r2, r3
 8000ffc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001000:	499d      	ldr	r1, [pc, #628]	@ (8001278 <main+0x2f0>)
 8001002:	489e      	ldr	r0, [pc, #632]	@ (800127c <main+0x2f4>)
 8001004:	f003 ff62 	bl	8004ecc <HAL_UART_Transmit>

  uint8_t oled_status = SH1106_Init();
 8001008:	f7ff fad2 	bl	80005b0 <SH1106_Init>
 800100c:	4603      	mov	r3, r0
 800100e:	75fb      	strb	r3, [r7, #23]
  if (oled_status)
 8001010:	7dfb      	ldrb	r3, [r7, #23]
 8001012:	2b00      	cmp	r3, #0
 8001014:	d01c      	beq.n	8001050 <main+0xc8>
  {
    sprintf(buff, "OLED display initialized successfully!\r\n");
 8001016:	499c      	ldr	r1, [pc, #624]	@ (8001288 <main+0x300>)
 8001018:	4897      	ldr	r0, [pc, #604]	@ (8001278 <main+0x2f0>)
 800101a:	f004 fba9 	bl	8005770 <siprintf>
    HAL_UART_Transmit(&huart1, (uint8_t *)buff, strlen(buff), 1000);
 800101e:	4896      	ldr	r0, [pc, #600]	@ (8001278 <main+0x2f0>)
 8001020:	f7ff f8f0 	bl	8000204 <strlen>
 8001024:	4603      	mov	r3, r0
 8001026:	b29a      	uxth	r2, r3
 8001028:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800102c:	4992      	ldr	r1, [pc, #584]	@ (8001278 <main+0x2f0>)
 800102e:	4893      	ldr	r0, [pc, #588]	@ (800127c <main+0x2f4>)
 8001030:	f003 ff4c 	bl	8004ecc <HAL_UART_Transmit>
    SH1106_Clear();
 8001034:	f7ff fcbf 	bl	80009b6 <SH1106_Clear>
    SH1106_GotoXY(0, 0);
 8001038:	2100      	movs	r1, #0
 800103a:	2000      	movs	r0, #0
 800103c:	f7ff fc02 	bl	8000844 <SH1106_GotoXY>
    SH1106_Puts("OLED Test OK", &Font_11x18, SH1106_COLOR_WHITE);
 8001040:	2201      	movs	r2, #1
 8001042:	4992      	ldr	r1, [pc, #584]	@ (800128c <main+0x304>)
 8001044:	4892      	ldr	r0, [pc, #584]	@ (8001290 <main+0x308>)
 8001046:	f7ff fc91 	bl	800096c <SH1106_Puts>
    SH1106_UpdateScreen();
 800104a:	f7ff fb55 	bl	80006f8 <SH1106_UpdateScreen>
 800104e:	e00e      	b.n	800106e <main+0xe6>
  }
  else
  {
    sprintf(buff, "OLED display initialization FAILED!\r\n");
 8001050:	4990      	ldr	r1, [pc, #576]	@ (8001294 <main+0x30c>)
 8001052:	4889      	ldr	r0, [pc, #548]	@ (8001278 <main+0x2f0>)
 8001054:	f004 fb8c 	bl	8005770 <siprintf>
    HAL_UART_Transmit(&huart1, (uint8_t *)buff, strlen(buff), 1000);
 8001058:	4887      	ldr	r0, [pc, #540]	@ (8001278 <main+0x2f0>)
 800105a:	f7ff f8d3 	bl	8000204 <strlen>
 800105e:	4603      	mov	r3, r0
 8001060:	b29a      	uxth	r2, r3
 8001062:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001066:	4984      	ldr	r1, [pc, #528]	@ (8001278 <main+0x2f0>)
 8001068:	4884      	ldr	r0, [pc, #528]	@ (800127c <main+0x2f4>)
 800106a:	f003 ff2f 	bl	8004ecc <HAL_UART_Transmit>
  }

  HAL_Delay(1000);
 800106e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001072:	f001 f955 	bl	8002320 <HAL_Delay>

  // Initialize RFID
  TM_MFRC522_Init();
 8001076:	f000 fdc5 	bl	8001c04 <TM_MFRC522_Init>

  // Read RFID version register to check if module is responding
  uint8_t version = TM_MFRC522_ReadRegister(MFRC522_REG_VERSION);
 800107a:	2037      	movs	r0, #55	@ 0x37
 800107c:	f000 fe80 	bl	8001d80 <TM_MFRC522_ReadRegister>
 8001080:	4603      	mov	r3, r0
 8001082:	75bb      	strb	r3, [r7, #22]
  sprintf(buff, "RFID Version: 0x%02X\r\n", version);
 8001084:	7dbb      	ldrb	r3, [r7, #22]
 8001086:	461a      	mov	r2, r3
 8001088:	4983      	ldr	r1, [pc, #524]	@ (8001298 <main+0x310>)
 800108a:	487b      	ldr	r0, [pc, #492]	@ (8001278 <main+0x2f0>)
 800108c:	f004 fb70 	bl	8005770 <siprintf>
  HAL_UART_Transmit(&huart1, (uint8_t *)buff, strlen(buff), 1000);
 8001090:	4879      	ldr	r0, [pc, #484]	@ (8001278 <main+0x2f0>)
 8001092:	f7ff f8b7 	bl	8000204 <strlen>
 8001096:	4603      	mov	r3, r0
 8001098:	b29a      	uxth	r2, r3
 800109a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800109e:	4976      	ldr	r1, [pc, #472]	@ (8001278 <main+0x2f0>)
 80010a0:	4876      	ldr	r0, [pc, #472]	@ (800127c <main+0x2f4>)
 80010a2:	f003 ff13 	bl	8004ecc <HAL_UART_Transmit>

  if (version == 0x00 || version == 0xFF)
 80010a6:	7dbb      	ldrb	r3, [r7, #22]
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d002      	beq.n	80010b2 <main+0x12a>
 80010ac:	7dbb      	ldrb	r3, [r7, #22]
 80010ae:	2bff      	cmp	r3, #255	@ 0xff
 80010b0:	d11f      	bne.n	80010f2 <main+0x16a>
  {
    sprintf(buff, "RFID module not detected!\r\n");
 80010b2:	497a      	ldr	r1, [pc, #488]	@ (800129c <main+0x314>)
 80010b4:	4870      	ldr	r0, [pc, #448]	@ (8001278 <main+0x2f0>)
 80010b6:	f004 fb5b 	bl	8005770 <siprintf>
    HAL_UART_Transmit(&huart1, (uint8_t *)buff, strlen(buff), 1000);
 80010ba:	486f      	ldr	r0, [pc, #444]	@ (8001278 <main+0x2f0>)
 80010bc:	f7ff f8a2 	bl	8000204 <strlen>
 80010c0:	4603      	mov	r3, r0
 80010c2:	b29a      	uxth	r2, r3
 80010c4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010c8:	496b      	ldr	r1, [pc, #428]	@ (8001278 <main+0x2f0>)
 80010ca:	486c      	ldr	r0, [pc, #432]	@ (800127c <main+0x2f4>)
 80010cc:	f003 fefe 	bl	8004ecc <HAL_UART_Transmit>

    if (oled_status)
 80010d0:	7dfb      	ldrb	r3, [r7, #23]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d02c      	beq.n	8001130 <main+0x1a8>
    {
      SH1106_Clear();
 80010d6:	f7ff fc6e 	bl	80009b6 <SH1106_Clear>
      SH1106_GotoXY(0, 0);
 80010da:	2100      	movs	r1, #0
 80010dc:	2000      	movs	r0, #0
 80010de:	f7ff fbb1 	bl	8000844 <SH1106_GotoXY>
      SH1106_Puts("RFID ERROR!", &Font_11x18, SH1106_COLOR_WHITE);
 80010e2:	2201      	movs	r2, #1
 80010e4:	4969      	ldr	r1, [pc, #420]	@ (800128c <main+0x304>)
 80010e6:	486e      	ldr	r0, [pc, #440]	@ (80012a0 <main+0x318>)
 80010e8:	f7ff fc40 	bl	800096c <SH1106_Puts>
      SH1106_UpdateScreen();
 80010ec:	f7ff fb04 	bl	80006f8 <SH1106_UpdateScreen>
    if (oled_status)
 80010f0:	e01e      	b.n	8001130 <main+0x1a8>
    }
  }
  else
  {
    sprintf(buff, "RFID module OK, scanning...\r\n");
 80010f2:	496c      	ldr	r1, [pc, #432]	@ (80012a4 <main+0x31c>)
 80010f4:	4860      	ldr	r0, [pc, #384]	@ (8001278 <main+0x2f0>)
 80010f6:	f004 fb3b 	bl	8005770 <siprintf>
    HAL_UART_Transmit(&huart1, (uint8_t *)buff, strlen(buff), 1000);
 80010fa:	485f      	ldr	r0, [pc, #380]	@ (8001278 <main+0x2f0>)
 80010fc:	f7ff f882 	bl	8000204 <strlen>
 8001100:	4603      	mov	r3, r0
 8001102:	b29a      	uxth	r2, r3
 8001104:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001108:	495b      	ldr	r1, [pc, #364]	@ (8001278 <main+0x2f0>)
 800110a:	485c      	ldr	r0, [pc, #368]	@ (800127c <main+0x2f4>)
 800110c:	f003 fede 	bl	8004ecc <HAL_UART_Transmit>

    if (oled_status)
 8001110:	7dfb      	ldrb	r3, [r7, #23]
 8001112:	2b00      	cmp	r3, #0
 8001114:	d00c      	beq.n	8001130 <main+0x1a8>
    {
      SH1106_Clear();
 8001116:	f7ff fc4e 	bl	80009b6 <SH1106_Clear>
      SH1106_GotoXY(0, 0);
 800111a:	2100      	movs	r1, #0
 800111c:	2000      	movs	r0, #0
 800111e:	f7ff fb91 	bl	8000844 <SH1106_GotoXY>
      SH1106_Puts("RFID Ready", &Font_11x18, SH1106_COLOR_WHITE);
 8001122:	2201      	movs	r2, #1
 8001124:	4959      	ldr	r1, [pc, #356]	@ (800128c <main+0x304>)
 8001126:	4860      	ldr	r0, [pc, #384]	@ (80012a8 <main+0x320>)
 8001128:	f7ff fc20 	bl	800096c <SH1106_Puts>
      SH1106_UpdateScreen();
 800112c:	f7ff fae4 	bl	80006f8 <SH1106_UpdateScreen>

    /* USER CODE BEGIN 3 */
    uint8_t CardId[5];

    // Kiểm tra nút nhấn PA0
    uint8_t current_button_state = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);
 8001130:	2101      	movs	r1, #1
 8001132:	485e      	ldr	r0, [pc, #376]	@ (80012ac <main+0x324>)
 8001134:	f001 fbaa 	bl	800288c <HAL_GPIO_ReadPin>
 8001138:	4603      	mov	r3, r0
 800113a:	757b      	strb	r3, [r7, #21]
    
    // Phát hiện cạnh xuống (từ 1 -> 0, tức là nút vừa được nhấn)
    if (button_state == 1 && current_button_state == 0) {
 800113c:	4b5c      	ldr	r3, [pc, #368]	@ (80012b0 <main+0x328>)
 800113e:	781b      	ldrb	r3, [r3, #0]
 8001140:	2b01      	cmp	r3, #1
 8001142:	d170      	bne.n	8001226 <main+0x29e>
 8001144:	7d7b      	ldrb	r3, [r7, #21]
 8001146:	2b00      	cmp	r3, #0
 8001148:	d16d      	bne.n	8001226 <main+0x29e>
      // Nút được nhấn, chuyển sang chế độ admin
      is_admin_mode = !is_admin_mode; // Toggle chế độ admin
 800114a:	4b5a      	ldr	r3, [pc, #360]	@ (80012b4 <main+0x32c>)
 800114c:	781b      	ldrb	r3, [r3, #0]
 800114e:	2b00      	cmp	r3, #0
 8001150:	bf0c      	ite	eq
 8001152:	2301      	moveq	r3, #1
 8001154:	2300      	movne	r3, #0
 8001156:	b2db      	uxtb	r3, r3
 8001158:	461a      	mov	r2, r3
 800115a:	4b56      	ldr	r3, [pc, #344]	@ (80012b4 <main+0x32c>)
 800115c:	701a      	strb	r2, [r3, #0]
      
      if (is_admin_mode) {
 800115e:	4b55      	ldr	r3, [pc, #340]	@ (80012b4 <main+0x32c>)
 8001160:	781b      	ldrb	r3, [r3, #0]
 8001162:	2b00      	cmp	r3, #0
 8001164:	d02e      	beq.n	80011c4 <main+0x23c>
        sprintf(buff, "\r\nAdmin mode activated. Enter RFID to add (format: XX XX XX XX XX):\r\n");
 8001166:	4954      	ldr	r1, [pc, #336]	@ (80012b8 <main+0x330>)
 8001168:	4843      	ldr	r0, [pc, #268]	@ (8001278 <main+0x2f0>)
 800116a:	f004 fb01 	bl	8005770 <siprintf>
        HAL_UART_Transmit(&huart1, (uint8_t *)buff, strlen(buff), 1000);
 800116e:	4842      	ldr	r0, [pc, #264]	@ (8001278 <main+0x2f0>)
 8001170:	f7ff f848 	bl	8000204 <strlen>
 8001174:	4603      	mov	r3, r0
 8001176:	b29a      	uxth	r2, r3
 8001178:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800117c:	493e      	ldr	r1, [pc, #248]	@ (8001278 <main+0x2f0>)
 800117e:	483f      	ldr	r0, [pc, #252]	@ (800127c <main+0x2f4>)
 8001180:	f003 fea4 	bl	8004ecc <HAL_UART_Transmit>
        // Xóa màn hình OLED và hiển thị thông báo ở chế độ admin
        SH1106_Clear();
 8001184:	f7ff fc17 	bl	80009b6 <SH1106_Clear>
        SH1106_GotoXY(0, 0);
 8001188:	2100      	movs	r1, #0
 800118a:	2000      	movs	r0, #0
 800118c:	f7ff fb5a 	bl	8000844 <SH1106_GotoXY>
        SH1106_Puts("ADMIN MODE", &Font_11x18, SH1106_COLOR_WHITE);
 8001190:	2201      	movs	r2, #1
 8001192:	493e      	ldr	r1, [pc, #248]	@ (800128c <main+0x304>)
 8001194:	4849      	ldr	r0, [pc, #292]	@ (80012bc <main+0x334>)
 8001196:	f7ff fbe9 	bl	800096c <SH1106_Puts>
        SH1106_GotoXY(0, 25);
 800119a:	2119      	movs	r1, #25
 800119c:	2000      	movs	r0, #0
 800119e:	f7ff fb51 	bl	8000844 <SH1106_GotoXY>
        SH1106_Puts("Enter ID via", &Font_7x10, SH1106_COLOR_WHITE);
 80011a2:	2201      	movs	r2, #1
 80011a4:	4946      	ldr	r1, [pc, #280]	@ (80012c0 <main+0x338>)
 80011a6:	4847      	ldr	r0, [pc, #284]	@ (80012c4 <main+0x33c>)
 80011a8:	f7ff fbe0 	bl	800096c <SH1106_Puts>
        SH1106_GotoXY(0, 40);
 80011ac:	2128      	movs	r1, #40	@ 0x28
 80011ae:	2000      	movs	r0, #0
 80011b0:	f7ff fb48 	bl	8000844 <SH1106_GotoXY>
        SH1106_Puts("UART", &Font_7x10, SH1106_COLOR_WHITE);
 80011b4:	2201      	movs	r2, #1
 80011b6:	4942      	ldr	r1, [pc, #264]	@ (80012c0 <main+0x338>)
 80011b8:	4843      	ldr	r0, [pc, #268]	@ (80012c8 <main+0x340>)
 80011ba:	f7ff fbd7 	bl	800096c <SH1106_Puts>
        SH1106_UpdateScreen();
 80011be:	f7ff fa9b 	bl	80006f8 <SH1106_UpdateScreen>
 80011c2:	e02d      	b.n	8001220 <main+0x298>
      } else {
        sprintf(buff, "\r\nAdmin mode deactivated. Returning to normal operation.\r\n");
 80011c4:	4941      	ldr	r1, [pc, #260]	@ (80012cc <main+0x344>)
 80011c6:	482c      	ldr	r0, [pc, #176]	@ (8001278 <main+0x2f0>)
 80011c8:	f004 fad2 	bl	8005770 <siprintf>
        HAL_UART_Transmit(&huart1, (uint8_t *)buff, strlen(buff), 1000);
 80011cc:	482a      	ldr	r0, [pc, #168]	@ (8001278 <main+0x2f0>)
 80011ce:	f7ff f819 	bl	8000204 <strlen>
 80011d2:	4603      	mov	r3, r0
 80011d4:	b29a      	uxth	r2, r3
 80011d6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011da:	4927      	ldr	r1, [pc, #156]	@ (8001278 <main+0x2f0>)
 80011dc:	4827      	ldr	r0, [pc, #156]	@ (800127c <main+0x2f4>)
 80011de:	f003 fe75 	bl	8004ecc <HAL_UART_Transmit>
        // Xóa màn hình OLED và hiển thị thông báo quay lại chế độ kiểm tra
        SH1106_Clear();
 80011e2:	f7ff fbe8 	bl	80009b6 <SH1106_Clear>
        SH1106_GotoXY(0, 0);
 80011e6:	2100      	movs	r1, #0
 80011e8:	2000      	movs	r0, #0
 80011ea:	f7ff fb2b 	bl	8000844 <SH1106_GotoXY>
        SH1106_Puts("RFID SCANNER", &Font_11x18, SH1106_COLOR_WHITE);
 80011ee:	2201      	movs	r2, #1
 80011f0:	4926      	ldr	r1, [pc, #152]	@ (800128c <main+0x304>)
 80011f2:	4837      	ldr	r0, [pc, #220]	@ (80012d0 <main+0x348>)
 80011f4:	f7ff fbba 	bl	800096c <SH1106_Puts>
        SH1106_GotoXY(0, 25);
 80011f8:	2119      	movs	r1, #25
 80011fa:	2000      	movs	r0, #0
 80011fc:	f7ff fb22 	bl	8000844 <SH1106_GotoXY>
        SH1106_Puts("Waiting for", &Font_7x10, SH1106_COLOR_WHITE);
 8001200:	2201      	movs	r2, #1
 8001202:	492f      	ldr	r1, [pc, #188]	@ (80012c0 <main+0x338>)
 8001204:	4833      	ldr	r0, [pc, #204]	@ (80012d4 <main+0x34c>)
 8001206:	f7ff fbb1 	bl	800096c <SH1106_Puts>
        SH1106_GotoXY(0, 40);
 800120a:	2128      	movs	r1, #40	@ 0x28
 800120c:	2000      	movs	r0, #0
 800120e:	f7ff fb19 	bl	8000844 <SH1106_GotoXY>
        SH1106_Puts("card...", &Font_7x10, SH1106_COLOR_WHITE);
 8001212:	2201      	movs	r2, #1
 8001214:	492a      	ldr	r1, [pc, #168]	@ (80012c0 <main+0x338>)
 8001216:	4830      	ldr	r0, [pc, #192]	@ (80012d8 <main+0x350>)
 8001218:	f7ff fba8 	bl	800096c <SH1106_Puts>
        SH1106_UpdateScreen();
 800121c:	f7ff fa6c 	bl	80006f8 <SH1106_UpdateScreen>
      }
      
      // Thêm delay chống dội nút
      HAL_Delay(200);
 8001220:	20c8      	movs	r0, #200	@ 0xc8
 8001222:	f001 f87d 	bl	8002320 <HAL_Delay>
    }
    
    // Cập nhật trạng thái nút nhấn
    button_state = current_button_state;
 8001226:	4a22      	ldr	r2, [pc, #136]	@ (80012b0 <main+0x328>)
 8001228:	7d7b      	ldrb	r3, [r7, #21]
 800122a:	7013      	strb	r3, [r2, #0]

    // Nhận dữ liệu từ UART
    uint8_t rx_data;
    if (HAL_UART_Receive(&huart1, &rx_data, 1, 10) == HAL_OK && is_admin_mode) {
 800122c:	1cf9      	adds	r1, r7, #3
 800122e:	230a      	movs	r3, #10
 8001230:	2201      	movs	r2, #1
 8001232:	4812      	ldr	r0, [pc, #72]	@ (800127c <main+0x2f4>)
 8001234:	f003 fed5 	bl	8004fe2 <HAL_UART_Receive>
 8001238:	4603      	mov	r3, r0
 800123a:	2b00      	cmp	r3, #0
 800123c:	d160      	bne.n	8001300 <main+0x378>
 800123e:	4b1d      	ldr	r3, [pc, #116]	@ (80012b4 <main+0x32c>)
 8001240:	781b      	ldrb	r3, [r3, #0]
 8001242:	2b00      	cmp	r3, #0
 8001244:	d05c      	beq.n	8001300 <main+0x378>
      if (rx_data == '\r' || rx_data == '\n') {
 8001246:	78fb      	ldrb	r3, [r7, #3]
 8001248:	2b0d      	cmp	r3, #13
 800124a:	d002      	beq.n	8001252 <main+0x2ca>
 800124c:	78fb      	ldrb	r3, [r7, #3]
 800124e:	2b0a      	cmp	r3, #10
 8001250:	d148      	bne.n	80012e4 <main+0x35c>
        if (rx_index > 0) {
 8001252:	4b22      	ldr	r3, [pc, #136]	@ (80012dc <main+0x354>)
 8001254:	781b      	ldrb	r3, [r3, #0]
 8001256:	2b00      	cmp	r3, #0
 8001258:	d052      	beq.n	8001300 <main+0x378>
          rx_buffer[rx_index] = 0; // Null terminate
 800125a:	4b20      	ldr	r3, [pc, #128]	@ (80012dc <main+0x354>)
 800125c:	781b      	ldrb	r3, [r3, #0]
 800125e:	461a      	mov	r2, r3
 8001260:	4b1f      	ldr	r3, [pc, #124]	@ (80012e0 <main+0x358>)
 8001262:	2100      	movs	r1, #0
 8001264:	5499      	strb	r1, [r3, r2]
          processCommand(rx_buffer);
 8001266:	481e      	ldr	r0, [pc, #120]	@ (80012e0 <main+0x358>)
 8001268:	f7ff fd1e 	bl	8000ca8 <processCommand>
          rx_index = 0; // Reset buffer
 800126c:	4b1b      	ldr	r3, [pc, #108]	@ (80012dc <main+0x354>)
 800126e:	2200      	movs	r2, #0
 8001270:	701a      	strb	r2, [r3, #0]
        if (rx_index > 0) {
 8001272:	e045      	b.n	8001300 <main+0x378>
 8001274:	08006300 	.word	0x08006300
 8001278:	20000650 	.word	0x20000650
 800127c:	20000608 	.word	0x20000608
 8001280:	08006314 	.word	0x08006314
 8001284:	08006374 	.word	0x08006374
 8001288:	08006394 	.word	0x08006394
 800128c:	20000008 	.word	0x20000008
 8001290:	080063c0 	.word	0x080063c0
 8001294:	080063d0 	.word	0x080063d0
 8001298:	080063f8 	.word	0x080063f8
 800129c:	08006410 	.word	0x08006410
 80012a0:	0800642c 	.word	0x0800642c
 80012a4:	08006438 	.word	0x08006438
 80012a8:	08006458 	.word	0x08006458
 80012ac:	40020000 	.word	0x40020000
 80012b0:	200006d4 	.word	0x200006d4
 80012b4:	200006d3 	.word	0x200006d3
 80012b8:	08006464 	.word	0x08006464
 80012bc:	080064ac 	.word	0x080064ac
 80012c0:	20000000 	.word	0x20000000
 80012c4:	080064b8 	.word	0x080064b8
 80012c8:	080064c8 	.word	0x080064c8
 80012cc:	080064d0 	.word	0x080064d0
 80012d0:	0800650c 	.word	0x0800650c
 80012d4:	0800651c 	.word	0x0800651c
 80012d8:	08006528 	.word	0x08006528
 80012dc:	200006d2 	.word	0x200006d2
 80012e0:	200006b4 	.word	0x200006b4
        }
      } else {
        if (rx_index < sizeof(rx_buffer) - 1) {
 80012e4:	4b92      	ldr	r3, [pc, #584]	@ (8001530 <main+0x5a8>)
 80012e6:	781b      	ldrb	r3, [r3, #0]
 80012e8:	2b1c      	cmp	r3, #28
 80012ea:	d809      	bhi.n	8001300 <main+0x378>
          rx_buffer[rx_index++] = rx_data;
 80012ec:	4b90      	ldr	r3, [pc, #576]	@ (8001530 <main+0x5a8>)
 80012ee:	781b      	ldrb	r3, [r3, #0]
 80012f0:	1c5a      	adds	r2, r3, #1
 80012f2:	b2d1      	uxtb	r1, r2
 80012f4:	4a8e      	ldr	r2, [pc, #568]	@ (8001530 <main+0x5a8>)
 80012f6:	7011      	strb	r1, [r2, #0]
 80012f8:	461a      	mov	r2, r3
 80012fa:	78f9      	ldrb	r1, [r7, #3]
 80012fc:	4b8d      	ldr	r3, [pc, #564]	@ (8001534 <main+0x5ac>)
 80012fe:	5499      	strb	r1, [r3, r2]
        }
      }
    }

    // Chỉ kiểm tra thẻ RFID khi không ở chế độ admin
    if (!is_admin_mode) {
 8001300:	4b8d      	ldr	r3, [pc, #564]	@ (8001538 <main+0x5b0>)
 8001302:	781b      	ldrb	r3, [r3, #0]
 8001304:	2b00      	cmp	r3, #0
 8001306:	f47f af13 	bne.w	8001130 <main+0x1a8>
      // Test RFID communication every few seconds
      static uint32_t lastRfidTest = 0;
      if (HAL_GetTick() - lastRfidTest > 3000)
 800130a:	f000 fffd 	bl	8002308 <HAL_GetTick>
 800130e:	4602      	mov	r2, r0
 8001310:	4b8a      	ldr	r3, [pc, #552]	@ (800153c <main+0x5b4>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	1ad3      	subs	r3, r2, r3
 8001316:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 800131a:	4293      	cmp	r3, r2
 800131c:	d91a      	bls.n	8001354 <main+0x3cc>
      {
        lastRfidTest = HAL_GetTick();
 800131e:	f000 fff3 	bl	8002308 <HAL_GetTick>
 8001322:	4603      	mov	r3, r0
 8001324:	4a85      	ldr	r2, [pc, #532]	@ (800153c <main+0x5b4>)
 8001326:	6013      	str	r3, [r2, #0]

        // Test reading a register
        uint8_t status = TM_MFRC522_ReadRegister(MFRC522_REG_STATUS1);
 8001328:	2007      	movs	r0, #7
 800132a:	f000 fd29 	bl	8001d80 <TM_MFRC522_ReadRegister>
 800132e:	4603      	mov	r3, r0
 8001330:	753b      	strb	r3, [r7, #20]
        sprintf(buff, "RFID Status: 0x%02X\r\n", status);
 8001332:	7d3b      	ldrb	r3, [r7, #20]
 8001334:	461a      	mov	r2, r3
 8001336:	4982      	ldr	r1, [pc, #520]	@ (8001540 <main+0x5b8>)
 8001338:	4882      	ldr	r0, [pc, #520]	@ (8001544 <main+0x5bc>)
 800133a:	f004 fa19 	bl	8005770 <siprintf>
        HAL_UART_Transmit(&huart1, (uint8_t *)buff, strlen(buff), 1000);
 800133e:	4881      	ldr	r0, [pc, #516]	@ (8001544 <main+0x5bc>)
 8001340:	f7fe ff60 	bl	8000204 <strlen>
 8001344:	4603      	mov	r3, r0
 8001346:	b29a      	uxth	r2, r3
 8001348:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800134c:	497d      	ldr	r1, [pc, #500]	@ (8001544 <main+0x5bc>)
 800134e:	487e      	ldr	r0, [pc, #504]	@ (8001548 <main+0x5c0>)
 8001350:	f003 fdbc 	bl	8004ecc <HAL_UART_Transmit>
      }

      HAL_Delay(100);
 8001354:	2064      	movs	r0, #100	@ 0x64
 8001356:	f000 ffe3 	bl	8002320 <HAL_Delay>

      if (TM_MFRC522_Check(CardId) == MI_OK)
 800135a:	1d3b      	adds	r3, r7, #4
 800135c:	4618      	mov	r0, r3
 800135e:	f000 fc85 	bl	8001c6c <TM_MFRC522_Check>
 8001362:	4603      	mov	r3, r0
 8001364:	2b00      	cmp	r3, #0
 8001366:	f040 80b2 	bne.w	80014ce <main+0x546>
      {
        sprintf(buff, "Card ID: %02X %02X %02X %02X %02X\r\n", CardId[0], CardId[1], CardId[2], CardId[3], CardId[4]);
 800136a:	793b      	ldrb	r3, [r7, #4]
 800136c:	4618      	mov	r0, r3
 800136e:	797b      	ldrb	r3, [r7, #5]
 8001370:	461c      	mov	r4, r3
 8001372:	79bb      	ldrb	r3, [r7, #6]
 8001374:	79fa      	ldrb	r2, [r7, #7]
 8001376:	7a39      	ldrb	r1, [r7, #8]
 8001378:	9102      	str	r1, [sp, #8]
 800137a:	9201      	str	r2, [sp, #4]
 800137c:	9300      	str	r3, [sp, #0]
 800137e:	4623      	mov	r3, r4
 8001380:	4602      	mov	r2, r0
 8001382:	4972      	ldr	r1, [pc, #456]	@ (800154c <main+0x5c4>)
 8001384:	486f      	ldr	r0, [pc, #444]	@ (8001544 <main+0x5bc>)
 8001386:	f004 f9f3 	bl	8005770 <siprintf>
        HAL_UART_Transmit(&huart1, (uint8_t *)buff, strlen(buff), 1000);
 800138a:	486e      	ldr	r0, [pc, #440]	@ (8001544 <main+0x5bc>)
 800138c:	f7fe ff3a 	bl	8000204 <strlen>
 8001390:	4603      	mov	r3, r0
 8001392:	b29a      	uxth	r2, r3
 8001394:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001398:	496a      	ldr	r1, [pc, #424]	@ (8001544 <main+0x5bc>)
 800139a:	486b      	ldr	r0, [pc, #428]	@ (8001548 <main+0x5c0>)
 800139c:	f003 fd96 	bl	8004ecc <HAL_UART_Transmit>

        // Display card ID on OLED
        SH1106_Clear();
 80013a0:	f7ff fb09 	bl	80009b6 <SH1106_Clear>

        if (isValidCardId(CardId) == 1)
 80013a4:	1d3b      	adds	r3, r7, #4
 80013a6:	4618      	mov	r0, r3
 80013a8:	f7ff fbb6 	bl	8000b18 <isValidCardId>
 80013ac:	4603      	mov	r3, r0
 80013ae:	2b01      	cmp	r3, #1
 80013b0:	d122      	bne.n	80013f8 <main+0x470>
        {
          sprintf(buff, "%s", "Welcome!");
 80013b2:	4a67      	ldr	r2, [pc, #412]	@ (8001550 <main+0x5c8>)
 80013b4:	4967      	ldr	r1, [pc, #412]	@ (8001554 <main+0x5cc>)
 80013b6:	4863      	ldr	r0, [pc, #396]	@ (8001544 <main+0x5bc>)
 80013b8:	f004 f9da 	bl	8005770 <siprintf>
          SH1106_GotoXY(10, 0);
 80013bc:	2100      	movs	r1, #0
 80013be:	200a      	movs	r0, #10
 80013c0:	f7ff fa40 	bl	8000844 <SH1106_GotoXY>
          SH1106_Puts(buff, &Font_7x10, SH1106_COLOR_WHITE);
 80013c4:	2201      	movs	r2, #1
 80013c6:	4964      	ldr	r1, [pc, #400]	@ (8001558 <main+0x5d0>)
 80013c8:	485e      	ldr	r0, [pc, #376]	@ (8001544 <main+0x5bc>)
 80013ca:	f7ff facf 	bl	800096c <SH1106_Puts>
          HAL_UART_Transmit(&huart1, (uint8_t *)buff, strlen(buff), 1000);
 80013ce:	485d      	ldr	r0, [pc, #372]	@ (8001544 <main+0x5bc>)
 80013d0:	f7fe ff18 	bl	8000204 <strlen>
 80013d4:	4603      	mov	r3, r0
 80013d6:	b29a      	uxth	r2, r3
 80013d8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80013dc:	4959      	ldr	r1, [pc, #356]	@ (8001544 <main+0x5bc>)
 80013de:	485a      	ldr	r0, [pc, #360]	@ (8001548 <main+0x5c0>)
 80013e0:	f003 fd74 	bl	8004ecc <HAL_UART_Transmit>
          SH1106_GotoXY(10, 20);
 80013e4:	2114      	movs	r1, #20
 80013e6:	200a      	movs	r0, #10
 80013e8:	f7ff fa2c 	bl	8000844 <SH1106_GotoXY>
          SH1106_Puts(buff, &Font_7x10, SH1106_COLOR_WHITE);
 80013ec:	2201      	movs	r2, #1
 80013ee:	495a      	ldr	r1, [pc, #360]	@ (8001558 <main+0x5d0>)
 80013f0:	4854      	ldr	r0, [pc, #336]	@ (8001544 <main+0x5bc>)
 80013f2:	f7ff fabb 	bl	800096c <SH1106_Puts>
 80013f6:	e018      	b.n	800142a <main+0x4a2>
        }
        else
        {
          sprintf(buff, "%s", "Rejected!");
 80013f8:	4a58      	ldr	r2, [pc, #352]	@ (800155c <main+0x5d4>)
 80013fa:	4956      	ldr	r1, [pc, #344]	@ (8001554 <main+0x5cc>)
 80013fc:	4851      	ldr	r0, [pc, #324]	@ (8001544 <main+0x5bc>)
 80013fe:	f004 f9b7 	bl	8005770 <siprintf>
          SH1106_GotoXY(10, 0);
 8001402:	2100      	movs	r1, #0
 8001404:	200a      	movs	r0, #10
 8001406:	f7ff fa1d 	bl	8000844 <SH1106_GotoXY>
          SH1106_Puts(buff, &Font_7x10, SH1106_COLOR_WHITE);
 800140a:	2201      	movs	r2, #1
 800140c:	4952      	ldr	r1, [pc, #328]	@ (8001558 <main+0x5d0>)
 800140e:	484d      	ldr	r0, [pc, #308]	@ (8001544 <main+0x5bc>)
 8001410:	f7ff faac 	bl	800096c <SH1106_Puts>
          HAL_UART_Transmit(&huart1, (uint8_t *)buff, strlen(buff), 1000);
 8001414:	484b      	ldr	r0, [pc, #300]	@ (8001544 <main+0x5bc>)
 8001416:	f7fe fef5 	bl	8000204 <strlen>
 800141a:	4603      	mov	r3, r0
 800141c:	b29a      	uxth	r2, r3
 800141e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001422:	4948      	ldr	r1, [pc, #288]	@ (8001544 <main+0x5bc>)
 8001424:	4848      	ldr	r0, [pc, #288]	@ (8001548 <main+0x5c0>)
 8001426:	f003 fd51 	bl	8004ecc <HAL_UART_Transmit>
        }

        //Display each byte of the card ID on a separate line
        sprintf(buff, "ID[0]: %02X", CardId[0]);
 800142a:	793b      	ldrb	r3, [r7, #4]
 800142c:	461a      	mov	r2, r3
 800142e:	494c      	ldr	r1, [pc, #304]	@ (8001560 <main+0x5d8>)
 8001430:	4844      	ldr	r0, [pc, #272]	@ (8001544 <main+0x5bc>)
 8001432:	f004 f99d 	bl	8005770 <siprintf>
        SH1106_GotoXY(10, 12);
 8001436:	210c      	movs	r1, #12
 8001438:	200a      	movs	r0, #10
 800143a:	f7ff fa03 	bl	8000844 <SH1106_GotoXY>
        SH1106_Puts(buff, &Font_7x10, SH1106_COLOR_WHITE);
 800143e:	2201      	movs	r2, #1
 8001440:	4945      	ldr	r1, [pc, #276]	@ (8001558 <main+0x5d0>)
 8001442:	4840      	ldr	r0, [pc, #256]	@ (8001544 <main+0x5bc>)
 8001444:	f7ff fa92 	bl	800096c <SH1106_Puts>

        sprintf(buff, "ID[1]: %02X", CardId[1]);
 8001448:	797b      	ldrb	r3, [r7, #5]
 800144a:	461a      	mov	r2, r3
 800144c:	4945      	ldr	r1, [pc, #276]	@ (8001564 <main+0x5dc>)
 800144e:	483d      	ldr	r0, [pc, #244]	@ (8001544 <main+0x5bc>)
 8001450:	f004 f98e 	bl	8005770 <siprintf>
        SH1106_GotoXY(10, 22);
 8001454:	2116      	movs	r1, #22
 8001456:	200a      	movs	r0, #10
 8001458:	f7ff f9f4 	bl	8000844 <SH1106_GotoXY>
        SH1106_Puts(buff, &Font_7x10, SH1106_COLOR_WHITE);
 800145c:	2201      	movs	r2, #1
 800145e:	493e      	ldr	r1, [pc, #248]	@ (8001558 <main+0x5d0>)
 8001460:	4838      	ldr	r0, [pc, #224]	@ (8001544 <main+0x5bc>)
 8001462:	f7ff fa83 	bl	800096c <SH1106_Puts>

        sprintf(buff, "ID[2]: %02X", CardId[2]);
 8001466:	79bb      	ldrb	r3, [r7, #6]
 8001468:	461a      	mov	r2, r3
 800146a:	493f      	ldr	r1, [pc, #252]	@ (8001568 <main+0x5e0>)
 800146c:	4835      	ldr	r0, [pc, #212]	@ (8001544 <main+0x5bc>)
 800146e:	f004 f97f 	bl	8005770 <siprintf>
        SH1106_GotoXY(10, 32);
 8001472:	2120      	movs	r1, #32
 8001474:	200a      	movs	r0, #10
 8001476:	f7ff f9e5 	bl	8000844 <SH1106_GotoXY>
        SH1106_Puts(buff, &Font_7x10, SH1106_COLOR_WHITE);
 800147a:	2201      	movs	r2, #1
 800147c:	4936      	ldr	r1, [pc, #216]	@ (8001558 <main+0x5d0>)
 800147e:	4831      	ldr	r0, [pc, #196]	@ (8001544 <main+0x5bc>)
 8001480:	f7ff fa74 	bl	800096c <SH1106_Puts>

        sprintf(buff, "ID[3]: %02X", CardId[3]);
 8001484:	79fb      	ldrb	r3, [r7, #7]
 8001486:	461a      	mov	r2, r3
 8001488:	4938      	ldr	r1, [pc, #224]	@ (800156c <main+0x5e4>)
 800148a:	482e      	ldr	r0, [pc, #184]	@ (8001544 <main+0x5bc>)
 800148c:	f004 f970 	bl	8005770 <siprintf>
        SH1106_GotoXY(10, 42);
 8001490:	212a      	movs	r1, #42	@ 0x2a
 8001492:	200a      	movs	r0, #10
 8001494:	f7ff f9d6 	bl	8000844 <SH1106_GotoXY>
        SH1106_Puts(buff, &Font_7x10, SH1106_COLOR_WHITE);
 8001498:	2201      	movs	r2, #1
 800149a:	492f      	ldr	r1, [pc, #188]	@ (8001558 <main+0x5d0>)
 800149c:	4829      	ldr	r0, [pc, #164]	@ (8001544 <main+0x5bc>)
 800149e:	f7ff fa65 	bl	800096c <SH1106_Puts>

        sprintf(buff, "ID[4]: %02X", CardId[4]);
 80014a2:	7a3b      	ldrb	r3, [r7, #8]
 80014a4:	461a      	mov	r2, r3
 80014a6:	4932      	ldr	r1, [pc, #200]	@ (8001570 <main+0x5e8>)
 80014a8:	4826      	ldr	r0, [pc, #152]	@ (8001544 <main+0x5bc>)
 80014aa:	f004 f961 	bl	8005770 <siprintf>
        SH1106_GotoXY(10, 52);
 80014ae:	2134      	movs	r1, #52	@ 0x34
 80014b0:	200a      	movs	r0, #10
 80014b2:	f7ff f9c7 	bl	8000844 <SH1106_GotoXY>
        SH1106_Puts(buff, &Font_7x10, SH1106_COLOR_WHITE);
 80014b6:	2201      	movs	r2, #1
 80014b8:	4927      	ldr	r1, [pc, #156]	@ (8001558 <main+0x5d0>)
 80014ba:	4822      	ldr	r0, [pc, #136]	@ (8001544 <main+0x5bc>)
 80014bc:	f7ff fa56 	bl	800096c <SH1106_Puts>

        SH1106_UpdateScreen();
 80014c0:	f7ff f91a 	bl	80006f8 <SH1106_UpdateScreen>
        
        // Thêm delay để không đọc lại thẻ liên tục
        HAL_Delay(1000);
 80014c4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80014c8:	f000 ff2a 	bl	8002320 <HAL_Delay>
 80014cc:	e630      	b.n	8001130 <main+0x1a8>
      }
      else if (HAL_GetTick() % 2000 < 1000) // Hiện thông báo mỗi 2 giây
 80014ce:	f000 ff1b 	bl	8002308 <HAL_GetTick>
 80014d2:	4602      	mov	r2, r0
 80014d4:	4b27      	ldr	r3, [pc, #156]	@ (8001574 <main+0x5ec>)
 80014d6:	fba3 1302 	umull	r1, r3, r3, r2
 80014da:	09db      	lsrs	r3, r3, #7
 80014dc:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 80014e0:	fb01 f303 	mul.w	r3, r1, r3
 80014e4:	1ad3      	subs	r3, r2, r3
 80014e6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80014ea:	f4bf ae21 	bcs.w	8001130 <main+0x1a8>
      {
        // Hiển thị thông báo chờ thẻ
        SH1106_Clear();
 80014ee:	f7ff fa62 	bl	80009b6 <SH1106_Clear>
        SH1106_GotoXY(0, 0);
 80014f2:	2100      	movs	r1, #0
 80014f4:	2000      	movs	r0, #0
 80014f6:	f7ff f9a5 	bl	8000844 <SH1106_GotoXY>
        SH1106_Puts("RFID SCANNER", &Font_11x18, SH1106_COLOR_WHITE);
 80014fa:	2201      	movs	r2, #1
 80014fc:	491e      	ldr	r1, [pc, #120]	@ (8001578 <main+0x5f0>)
 80014fe:	481f      	ldr	r0, [pc, #124]	@ (800157c <main+0x5f4>)
 8001500:	f7ff fa34 	bl	800096c <SH1106_Puts>
        SH1106_GotoXY(0, 25);
 8001504:	2119      	movs	r1, #25
 8001506:	2000      	movs	r0, #0
 8001508:	f7ff f99c 	bl	8000844 <SH1106_GotoXY>
        SH1106_Puts("Waiting for", &Font_7x10, SH1106_COLOR_WHITE);
 800150c:	2201      	movs	r2, #1
 800150e:	4912      	ldr	r1, [pc, #72]	@ (8001558 <main+0x5d0>)
 8001510:	481b      	ldr	r0, [pc, #108]	@ (8001580 <main+0x5f8>)
 8001512:	f7ff fa2b 	bl	800096c <SH1106_Puts>
        SH1106_GotoXY(0, 40);
 8001516:	2128      	movs	r1, #40	@ 0x28
 8001518:	2000      	movs	r0, #0
 800151a:	f7ff f993 	bl	8000844 <SH1106_GotoXY>
        SH1106_Puts("card...", &Font_7x10, SH1106_COLOR_WHITE);
 800151e:	2201      	movs	r2, #1
 8001520:	490d      	ldr	r1, [pc, #52]	@ (8001558 <main+0x5d0>)
 8001522:	4818      	ldr	r0, [pc, #96]	@ (8001584 <main+0x5fc>)
 8001524:	f7ff fa22 	bl	800096c <SH1106_Puts>
        SH1106_UpdateScreen();
 8001528:	f7ff f8e6 	bl	80006f8 <SH1106_UpdateScreen>
  {
 800152c:	e600      	b.n	8001130 <main+0x1a8>
 800152e:	bf00      	nop
 8001530:	200006d2 	.word	0x200006d2
 8001534:	200006b4 	.word	0x200006b4
 8001538:	200006d3 	.word	0x200006d3
 800153c:	200006d8 	.word	0x200006d8
 8001540:	08006530 	.word	0x08006530
 8001544:	20000650 	.word	0x20000650
 8001548:	20000608 	.word	0x20000608
 800154c:	08006548 	.word	0x08006548
 8001550:	0800656c 	.word	0x0800656c
 8001554:	08006578 	.word	0x08006578
 8001558:	20000000 	.word	0x20000000
 800155c:	0800657c 	.word	0x0800657c
 8001560:	08006588 	.word	0x08006588
 8001564:	08006594 	.word	0x08006594
 8001568:	080065a0 	.word	0x080065a0
 800156c:	080065ac 	.word	0x080065ac
 8001570:	080065b8 	.word	0x080065b8
 8001574:	10624dd3 	.word	0x10624dd3
 8001578:	20000008 	.word	0x20000008
 800157c:	0800650c 	.word	0x0800650c
 8001580:	0800651c 	.word	0x0800651c
 8001584:	08006528 	.word	0x08006528

08001588 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b094      	sub	sp, #80	@ 0x50
 800158c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800158e:	f107 0320 	add.w	r3, r7, #32
 8001592:	2230      	movs	r2, #48	@ 0x30
 8001594:	2100      	movs	r1, #0
 8001596:	4618      	mov	r0, r3
 8001598:	f004 f90a 	bl	80057b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800159c:	f107 030c 	add.w	r3, r7, #12
 80015a0:	2200      	movs	r2, #0
 80015a2:	601a      	str	r2, [r3, #0]
 80015a4:	605a      	str	r2, [r3, #4]
 80015a6:	609a      	str	r2, [r3, #8]
 80015a8:	60da      	str	r2, [r3, #12]
 80015aa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80015ac:	2300      	movs	r3, #0
 80015ae:	60bb      	str	r3, [r7, #8]
 80015b0:	4b2b      	ldr	r3, [pc, #172]	@ (8001660 <SystemClock_Config+0xd8>)
 80015b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015b4:	4a2a      	ldr	r2, [pc, #168]	@ (8001660 <SystemClock_Config+0xd8>)
 80015b6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80015ba:	6413      	str	r3, [r2, #64]	@ 0x40
 80015bc:	4b28      	ldr	r3, [pc, #160]	@ (8001660 <SystemClock_Config+0xd8>)
 80015be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015c0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015c4:	60bb      	str	r3, [r7, #8]
 80015c6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80015c8:	2300      	movs	r3, #0
 80015ca:	607b      	str	r3, [r7, #4]
 80015cc:	4b25      	ldr	r3, [pc, #148]	@ (8001664 <SystemClock_Config+0xdc>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	4a24      	ldr	r2, [pc, #144]	@ (8001664 <SystemClock_Config+0xdc>)
 80015d2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80015d6:	6013      	str	r3, [r2, #0]
 80015d8:	4b22      	ldr	r3, [pc, #136]	@ (8001664 <SystemClock_Config+0xdc>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80015e0:	607b      	str	r3, [r7, #4]
 80015e2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80015e4:	2301      	movs	r3, #1
 80015e6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80015e8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80015ec:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015ee:	2302      	movs	r3, #2
 80015f0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80015f2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80015f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80015f8:	2304      	movs	r3, #4
 80015fa:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 80015fc:	23b4      	movs	r3, #180	@ 0xb4
 80015fe:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001600:	2302      	movs	r3, #2
 8001602:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001604:	2304      	movs	r3, #4
 8001606:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001608:	f107 0320 	add.w	r3, r7, #32
 800160c:	4618      	mov	r0, r3
 800160e:	f002 f995 	bl	800393c <HAL_RCC_OscConfig>
 8001612:	4603      	mov	r3, r0
 8001614:	2b00      	cmp	r3, #0
 8001616:	d001      	beq.n	800161c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001618:	f000 f954 	bl	80018c4 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800161c:	f002 f93e 	bl	800389c <HAL_PWREx_EnableOverDrive>
 8001620:	4603      	mov	r3, r0
 8001622:	2b00      	cmp	r3, #0
 8001624:	d001      	beq.n	800162a <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8001626:	f000 f94d 	bl	80018c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800162a:	230f      	movs	r3, #15
 800162c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800162e:	2302      	movs	r3, #2
 8001630:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001632:	2300      	movs	r3, #0
 8001634:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001636:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800163a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 800163c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001640:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001642:	f107 030c 	add.w	r3, r7, #12
 8001646:	2105      	movs	r1, #5
 8001648:	4618      	mov	r0, r3
 800164a:	f002 fbef 	bl	8003e2c <HAL_RCC_ClockConfig>
 800164e:	4603      	mov	r3, r0
 8001650:	2b00      	cmp	r3, #0
 8001652:	d001      	beq.n	8001658 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8001654:	f000 f936 	bl	80018c4 <Error_Handler>
  }
}
 8001658:	bf00      	nop
 800165a:	3750      	adds	r7, #80	@ 0x50
 800165c:	46bd      	mov	sp, r7
 800165e:	bd80      	pop	{r7, pc}
 8001660:	40023800 	.word	0x40023800
 8001664:	40007000 	.word	0x40007000

08001668 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 800166c:	4b1b      	ldr	r3, [pc, #108]	@ (80016dc <MX_I2C3_Init+0x74>)
 800166e:	4a1c      	ldr	r2, [pc, #112]	@ (80016e0 <MX_I2C3_Init+0x78>)
 8001670:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 400000;
 8001672:	4b1a      	ldr	r3, [pc, #104]	@ (80016dc <MX_I2C3_Init+0x74>)
 8001674:	4a1b      	ldr	r2, [pc, #108]	@ (80016e4 <MX_I2C3_Init+0x7c>)
 8001676:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001678:	4b18      	ldr	r3, [pc, #96]	@ (80016dc <MX_I2C3_Init+0x74>)
 800167a:	2200      	movs	r2, #0
 800167c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 800167e:	4b17      	ldr	r3, [pc, #92]	@ (80016dc <MX_I2C3_Init+0x74>)
 8001680:	2200      	movs	r2, #0
 8001682:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001684:	4b15      	ldr	r3, [pc, #84]	@ (80016dc <MX_I2C3_Init+0x74>)
 8001686:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800168a:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800168c:	4b13      	ldr	r3, [pc, #76]	@ (80016dc <MX_I2C3_Init+0x74>)
 800168e:	2200      	movs	r2, #0
 8001690:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8001692:	4b12      	ldr	r3, [pc, #72]	@ (80016dc <MX_I2C3_Init+0x74>)
 8001694:	2200      	movs	r2, #0
 8001696:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001698:	4b10      	ldr	r3, [pc, #64]	@ (80016dc <MX_I2C3_Init+0x74>)
 800169a:	2200      	movs	r2, #0
 800169c:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800169e:	4b0f      	ldr	r3, [pc, #60]	@ (80016dc <MX_I2C3_Init+0x74>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80016a4:	480d      	ldr	r0, [pc, #52]	@ (80016dc <MX_I2C3_Init+0x74>)
 80016a6:	f001 f923 	bl	80028f0 <HAL_I2C_Init>
 80016aa:	4603      	mov	r3, r0
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d001      	beq.n	80016b4 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80016b0:	f000 f908 	bl	80018c4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80016b4:	2100      	movs	r1, #0
 80016b6:	4809      	ldr	r0, [pc, #36]	@ (80016dc <MX_I2C3_Init+0x74>)
 80016b8:	f002 f875 	bl	80037a6 <HAL_I2CEx_ConfigAnalogFilter>
 80016bc:	4603      	mov	r3, r0
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d001      	beq.n	80016c6 <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 80016c2:	f000 f8ff 	bl	80018c4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80016c6:	2100      	movs	r1, #0
 80016c8:	4804      	ldr	r0, [pc, #16]	@ (80016dc <MX_I2C3_Init+0x74>)
 80016ca:	f002 f8a8 	bl	800381e <HAL_I2CEx_ConfigDigitalFilter>
 80016ce:	4603      	mov	r3, r0
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d001      	beq.n	80016d8 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 80016d4:	f000 f8f6 	bl	80018c4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80016d8:	bf00      	nop
 80016da:	bd80      	pop	{r7, pc}
 80016dc:	2000055c 	.word	0x2000055c
 80016e0:	40005c00 	.word	0x40005c00
 80016e4:	00061a80 	.word	0x00061a80

080016e8 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 80016ec:	4b17      	ldr	r3, [pc, #92]	@ (800174c <MX_SPI4_Init+0x64>)
 80016ee:	4a18      	ldr	r2, [pc, #96]	@ (8001750 <MX_SPI4_Init+0x68>)
 80016f0:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 80016f2:	4b16      	ldr	r3, [pc, #88]	@ (800174c <MX_SPI4_Init+0x64>)
 80016f4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80016f8:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 80016fa:	4b14      	ldr	r3, [pc, #80]	@ (800174c <MX_SPI4_Init+0x64>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8001700:	4b12      	ldr	r3, [pc, #72]	@ (800174c <MX_SPI4_Init+0x64>)
 8001702:	2200      	movs	r2, #0
 8001704:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001706:	4b11      	ldr	r3, [pc, #68]	@ (800174c <MX_SPI4_Init+0x64>)
 8001708:	2200      	movs	r2, #0
 800170a:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 800170c:	4b0f      	ldr	r3, [pc, #60]	@ (800174c <MX_SPI4_Init+0x64>)
 800170e:	2200      	movs	r2, #0
 8001710:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8001712:	4b0e      	ldr	r3, [pc, #56]	@ (800174c <MX_SPI4_Init+0x64>)
 8001714:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001718:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800171a:	4b0c      	ldr	r3, [pc, #48]	@ (800174c <MX_SPI4_Init+0x64>)
 800171c:	2218      	movs	r2, #24
 800171e:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001720:	4b0a      	ldr	r3, [pc, #40]	@ (800174c <MX_SPI4_Init+0x64>)
 8001722:	2200      	movs	r2, #0
 8001724:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8001726:	4b09      	ldr	r3, [pc, #36]	@ (800174c <MX_SPI4_Init+0x64>)
 8001728:	2200      	movs	r2, #0
 800172a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800172c:	4b07      	ldr	r3, [pc, #28]	@ (800174c <MX_SPI4_Init+0x64>)
 800172e:	2200      	movs	r2, #0
 8001730:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi4.Init.CRCPolynomial = 10;
 8001732:	4b06      	ldr	r3, [pc, #24]	@ (800174c <MX_SPI4_Init+0x64>)
 8001734:	220a      	movs	r2, #10
 8001736:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8001738:	4804      	ldr	r0, [pc, #16]	@ (800174c <MX_SPI4_Init+0x64>)
 800173a:	f002 fd97 	bl	800426c <HAL_SPI_Init>
 800173e:	4603      	mov	r3, r0
 8001740:	2b00      	cmp	r3, #0
 8001742:	d001      	beq.n	8001748 <MX_SPI4_Init+0x60>
  {
    Error_Handler();
 8001744:	f000 f8be 	bl	80018c4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8001748:	bf00      	nop
 800174a:	bd80      	pop	{r7, pc}
 800174c:	200005b0 	.word	0x200005b0
 8001750:	40013400 	.word	0x40013400

08001754 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001758:	4b11      	ldr	r3, [pc, #68]	@ (80017a0 <MX_USART1_UART_Init+0x4c>)
 800175a:	4a12      	ldr	r2, [pc, #72]	@ (80017a4 <MX_USART1_UART_Init+0x50>)
 800175c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800175e:	4b10      	ldr	r3, [pc, #64]	@ (80017a0 <MX_USART1_UART_Init+0x4c>)
 8001760:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001764:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001766:	4b0e      	ldr	r3, [pc, #56]	@ (80017a0 <MX_USART1_UART_Init+0x4c>)
 8001768:	2200      	movs	r2, #0
 800176a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800176c:	4b0c      	ldr	r3, [pc, #48]	@ (80017a0 <MX_USART1_UART_Init+0x4c>)
 800176e:	2200      	movs	r2, #0
 8001770:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001772:	4b0b      	ldr	r3, [pc, #44]	@ (80017a0 <MX_USART1_UART_Init+0x4c>)
 8001774:	2200      	movs	r2, #0
 8001776:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001778:	4b09      	ldr	r3, [pc, #36]	@ (80017a0 <MX_USART1_UART_Init+0x4c>)
 800177a:	220c      	movs	r2, #12
 800177c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800177e:	4b08      	ldr	r3, [pc, #32]	@ (80017a0 <MX_USART1_UART_Init+0x4c>)
 8001780:	2200      	movs	r2, #0
 8001782:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001784:	4b06      	ldr	r3, [pc, #24]	@ (80017a0 <MX_USART1_UART_Init+0x4c>)
 8001786:	2200      	movs	r2, #0
 8001788:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800178a:	4805      	ldr	r0, [pc, #20]	@ (80017a0 <MX_USART1_UART_Init+0x4c>)
 800178c:	f003 fb4e 	bl	8004e2c <HAL_UART_Init>
 8001790:	4603      	mov	r3, r0
 8001792:	2b00      	cmp	r3, #0
 8001794:	d001      	beq.n	800179a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001796:	f000 f895 	bl	80018c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800179a:	bf00      	nop
 800179c:	bd80      	pop	{r7, pc}
 800179e:	bf00      	nop
 80017a0:	20000608 	.word	0x20000608
 80017a4:	40011000 	.word	0x40011000

080017a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b08a      	sub	sp, #40	@ 0x28
 80017ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017ae:	f107 0314 	add.w	r3, r7, #20
 80017b2:	2200      	movs	r2, #0
 80017b4:	601a      	str	r2, [r3, #0]
 80017b6:	605a      	str	r2, [r3, #4]
 80017b8:	609a      	str	r2, [r3, #8]
 80017ba:	60da      	str	r2, [r3, #12]
 80017bc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80017be:	2300      	movs	r3, #0
 80017c0:	613b      	str	r3, [r7, #16]
 80017c2:	4b3c      	ldr	r3, [pc, #240]	@ (80018b4 <MX_GPIO_Init+0x10c>)
 80017c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017c6:	4a3b      	ldr	r2, [pc, #236]	@ (80018b4 <MX_GPIO_Init+0x10c>)
 80017c8:	f043 0310 	orr.w	r3, r3, #16
 80017cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80017ce:	4b39      	ldr	r3, [pc, #228]	@ (80018b4 <MX_GPIO_Init+0x10c>)
 80017d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017d2:	f003 0310 	and.w	r3, r3, #16
 80017d6:	613b      	str	r3, [r7, #16]
 80017d8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80017da:	2300      	movs	r3, #0
 80017dc:	60fb      	str	r3, [r7, #12]
 80017de:	4b35      	ldr	r3, [pc, #212]	@ (80018b4 <MX_GPIO_Init+0x10c>)
 80017e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017e2:	4a34      	ldr	r2, [pc, #208]	@ (80018b4 <MX_GPIO_Init+0x10c>)
 80017e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80017e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80017ea:	4b32      	ldr	r3, [pc, #200]	@ (80018b4 <MX_GPIO_Init+0x10c>)
 80017ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80017f2:	60fb      	str	r3, [r7, #12]
 80017f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017f6:	2300      	movs	r3, #0
 80017f8:	60bb      	str	r3, [r7, #8]
 80017fa:	4b2e      	ldr	r3, [pc, #184]	@ (80018b4 <MX_GPIO_Init+0x10c>)
 80017fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017fe:	4a2d      	ldr	r2, [pc, #180]	@ (80018b4 <MX_GPIO_Init+0x10c>)
 8001800:	f043 0301 	orr.w	r3, r3, #1
 8001804:	6313      	str	r3, [r2, #48]	@ 0x30
 8001806:	4b2b      	ldr	r3, [pc, #172]	@ (80018b4 <MX_GPIO_Init+0x10c>)
 8001808:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800180a:	f003 0301 	and.w	r3, r3, #1
 800180e:	60bb      	str	r3, [r7, #8]
 8001810:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001812:	2300      	movs	r3, #0
 8001814:	607b      	str	r3, [r7, #4]
 8001816:	4b27      	ldr	r3, [pc, #156]	@ (80018b4 <MX_GPIO_Init+0x10c>)
 8001818:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800181a:	4a26      	ldr	r2, [pc, #152]	@ (80018b4 <MX_GPIO_Init+0x10c>)
 800181c:	f043 0304 	orr.w	r3, r3, #4
 8001820:	6313      	str	r3, [r2, #48]	@ 0x30
 8001822:	4b24      	ldr	r3, [pc, #144]	@ (80018b4 <MX_GPIO_Init+0x10c>)
 8001824:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001826:	f003 0304 	and.w	r3, r3, #4
 800182a:	607b      	str	r3, [r7, #4]
 800182c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800182e:	2300      	movs	r3, #0
 8001830:	603b      	str	r3, [r7, #0]
 8001832:	4b20      	ldr	r3, [pc, #128]	@ (80018b4 <MX_GPIO_Init+0x10c>)
 8001834:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001836:	4a1f      	ldr	r2, [pc, #124]	@ (80018b4 <MX_GPIO_Init+0x10c>)
 8001838:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800183c:	6313      	str	r3, [r2, #48]	@ 0x30
 800183e:	4b1d      	ldr	r3, [pc, #116]	@ (80018b4 <MX_GPIO_Init+0x10c>)
 8001840:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001842:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001846:	603b      	str	r3, [r7, #0]
 8001848:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 800184a:	2200      	movs	r2, #0
 800184c:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 8001850:	4819      	ldr	r0, [pc, #100]	@ (80018b8 <MX_GPIO_Init+0x110>)
 8001852:	f001 f833 	bl	80028bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001856:	2310      	movs	r3, #16
 8001858:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800185a:	2302      	movs	r3, #2
 800185c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800185e:	2300      	movs	r3, #0
 8001860:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001862:	2300      	movs	r3, #0
 8001864:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF15_EVENTOUT;
 8001866:	230f      	movs	r3, #15
 8001868:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800186a:	f107 0314 	add.w	r3, r7, #20
 800186e:	4619      	mov	r1, r3
 8001870:	4812      	ldr	r0, [pc, #72]	@ (80018bc <MX_GPIO_Init+0x114>)
 8001872:	f000 fe5f 	bl	8002534 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001876:	2301      	movs	r3, #1
 8001878:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800187a:	2300      	movs	r3, #0
 800187c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800187e:	2300      	movs	r3, #0
 8001880:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001882:	f107 0314 	add.w	r3, r7, #20
 8001886:	4619      	mov	r1, r3
 8001888:	480d      	ldr	r0, [pc, #52]	@ (80018c0 <MX_GPIO_Init+0x118>)
 800188a:	f000 fe53 	bl	8002534 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG13 PG14 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 800188e:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8001892:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001894:	2301      	movs	r3, #1
 8001896:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001898:	2300      	movs	r3, #0
 800189a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800189c:	2300      	movs	r3, #0
 800189e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80018a0:	f107 0314 	add.w	r3, r7, #20
 80018a4:	4619      	mov	r1, r3
 80018a6:	4804      	ldr	r0, [pc, #16]	@ (80018b8 <MX_GPIO_Init+0x110>)
 80018a8:	f000 fe44 	bl	8002534 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80018ac:	bf00      	nop
 80018ae:	3728      	adds	r7, #40	@ 0x28
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bd80      	pop	{r7, pc}
 80018b4:	40023800 	.word	0x40023800
 80018b8:	40021800 	.word	0x40021800
 80018bc:	40021000 	.word	0x40021000
 80018c0:	40020000 	.word	0x40020000

080018c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018c4:	b480      	push	{r7}
 80018c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018c8:	b672      	cpsid	i
}
 80018ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018cc:	bf00      	nop
 80018ce:	e7fd      	b.n	80018cc <Error_Handler+0x8>

080018d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018d0:	b480      	push	{r7}
 80018d2:	b083      	sub	sp, #12
 80018d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018d6:	2300      	movs	r3, #0
 80018d8:	607b      	str	r3, [r7, #4]
 80018da:	4b10      	ldr	r3, [pc, #64]	@ (800191c <HAL_MspInit+0x4c>)
 80018dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018de:	4a0f      	ldr	r2, [pc, #60]	@ (800191c <HAL_MspInit+0x4c>)
 80018e0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80018e4:	6453      	str	r3, [r2, #68]	@ 0x44
 80018e6:	4b0d      	ldr	r3, [pc, #52]	@ (800191c <HAL_MspInit+0x4c>)
 80018e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018ea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80018ee:	607b      	str	r3, [r7, #4]
 80018f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018f2:	2300      	movs	r3, #0
 80018f4:	603b      	str	r3, [r7, #0]
 80018f6:	4b09      	ldr	r3, [pc, #36]	@ (800191c <HAL_MspInit+0x4c>)
 80018f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018fa:	4a08      	ldr	r2, [pc, #32]	@ (800191c <HAL_MspInit+0x4c>)
 80018fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001900:	6413      	str	r3, [r2, #64]	@ 0x40
 8001902:	4b06      	ldr	r3, [pc, #24]	@ (800191c <HAL_MspInit+0x4c>)
 8001904:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001906:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800190a:	603b      	str	r3, [r7, #0]
 800190c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800190e:	bf00      	nop
 8001910:	370c      	adds	r7, #12
 8001912:	46bd      	mov	sp, r7
 8001914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001918:	4770      	bx	lr
 800191a:	bf00      	nop
 800191c:	40023800 	.word	0x40023800

08001920 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b08a      	sub	sp, #40	@ 0x28
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001928:	f107 0314 	add.w	r3, r7, #20
 800192c:	2200      	movs	r2, #0
 800192e:	601a      	str	r2, [r3, #0]
 8001930:	605a      	str	r2, [r3, #4]
 8001932:	609a      	str	r2, [r3, #8]
 8001934:	60da      	str	r2, [r3, #12]
 8001936:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	4a29      	ldr	r2, [pc, #164]	@ (80019e4 <HAL_I2C_MspInit+0xc4>)
 800193e:	4293      	cmp	r3, r2
 8001940:	d14b      	bne.n	80019da <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001942:	2300      	movs	r3, #0
 8001944:	613b      	str	r3, [r7, #16]
 8001946:	4b28      	ldr	r3, [pc, #160]	@ (80019e8 <HAL_I2C_MspInit+0xc8>)
 8001948:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800194a:	4a27      	ldr	r2, [pc, #156]	@ (80019e8 <HAL_I2C_MspInit+0xc8>)
 800194c:	f043 0304 	orr.w	r3, r3, #4
 8001950:	6313      	str	r3, [r2, #48]	@ 0x30
 8001952:	4b25      	ldr	r3, [pc, #148]	@ (80019e8 <HAL_I2C_MspInit+0xc8>)
 8001954:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001956:	f003 0304 	and.w	r3, r3, #4
 800195a:	613b      	str	r3, [r7, #16]
 800195c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800195e:	2300      	movs	r3, #0
 8001960:	60fb      	str	r3, [r7, #12]
 8001962:	4b21      	ldr	r3, [pc, #132]	@ (80019e8 <HAL_I2C_MspInit+0xc8>)
 8001964:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001966:	4a20      	ldr	r2, [pc, #128]	@ (80019e8 <HAL_I2C_MspInit+0xc8>)
 8001968:	f043 0301 	orr.w	r3, r3, #1
 800196c:	6313      	str	r3, [r2, #48]	@ 0x30
 800196e:	4b1e      	ldr	r3, [pc, #120]	@ (80019e8 <HAL_I2C_MspInit+0xc8>)
 8001970:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001972:	f003 0301 	and.w	r3, r3, #1
 8001976:	60fb      	str	r3, [r7, #12]
 8001978:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800197a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800197e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001980:	2312      	movs	r3, #18
 8001982:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001984:	2300      	movs	r3, #0
 8001986:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001988:	2303      	movs	r3, #3
 800198a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800198c:	2304      	movs	r3, #4
 800198e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001990:	f107 0314 	add.w	r3, r7, #20
 8001994:	4619      	mov	r1, r3
 8001996:	4815      	ldr	r0, [pc, #84]	@ (80019ec <HAL_I2C_MspInit+0xcc>)
 8001998:	f000 fdcc 	bl	8002534 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800199c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80019a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80019a2:	2312      	movs	r3, #18
 80019a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a6:	2300      	movs	r3, #0
 80019a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019aa:	2303      	movs	r3, #3
 80019ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80019ae:	2304      	movs	r3, #4
 80019b0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019b2:	f107 0314 	add.w	r3, r7, #20
 80019b6:	4619      	mov	r1, r3
 80019b8:	480d      	ldr	r0, [pc, #52]	@ (80019f0 <HAL_I2C_MspInit+0xd0>)
 80019ba:	f000 fdbb 	bl	8002534 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 80019be:	2300      	movs	r3, #0
 80019c0:	60bb      	str	r3, [r7, #8]
 80019c2:	4b09      	ldr	r3, [pc, #36]	@ (80019e8 <HAL_I2C_MspInit+0xc8>)
 80019c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019c6:	4a08      	ldr	r2, [pc, #32]	@ (80019e8 <HAL_I2C_MspInit+0xc8>)
 80019c8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80019cc:	6413      	str	r3, [r2, #64]	@ 0x40
 80019ce:	4b06      	ldr	r3, [pc, #24]	@ (80019e8 <HAL_I2C_MspInit+0xc8>)
 80019d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019d2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80019d6:	60bb      	str	r3, [r7, #8]
 80019d8:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C3_MspInit 1 */

  }

}
 80019da:	bf00      	nop
 80019dc:	3728      	adds	r7, #40	@ 0x28
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}
 80019e2:	bf00      	nop
 80019e4:	40005c00 	.word	0x40005c00
 80019e8:	40023800 	.word	0x40023800
 80019ec:	40020800 	.word	0x40020800
 80019f0:	40020000 	.word	0x40020000

080019f4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b08a      	sub	sp, #40	@ 0x28
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019fc:	f107 0314 	add.w	r3, r7, #20
 8001a00:	2200      	movs	r2, #0
 8001a02:	601a      	str	r2, [r3, #0]
 8001a04:	605a      	str	r2, [r3, #4]
 8001a06:	609a      	str	r2, [r3, #8]
 8001a08:	60da      	str	r2, [r3, #12]
 8001a0a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI4)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4a19      	ldr	r2, [pc, #100]	@ (8001a78 <HAL_SPI_MspInit+0x84>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d12b      	bne.n	8001a6e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI4_MspInit 0 */

  /* USER CODE END SPI4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 8001a16:	2300      	movs	r3, #0
 8001a18:	613b      	str	r3, [r7, #16]
 8001a1a:	4b18      	ldr	r3, [pc, #96]	@ (8001a7c <HAL_SPI_MspInit+0x88>)
 8001a1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a1e:	4a17      	ldr	r2, [pc, #92]	@ (8001a7c <HAL_SPI_MspInit+0x88>)
 8001a20:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001a24:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a26:	4b15      	ldr	r3, [pc, #84]	@ (8001a7c <HAL_SPI_MspInit+0x88>)
 8001a28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a2a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001a2e:	613b      	str	r3, [r7, #16]
 8001a30:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001a32:	2300      	movs	r3, #0
 8001a34:	60fb      	str	r3, [r7, #12]
 8001a36:	4b11      	ldr	r3, [pc, #68]	@ (8001a7c <HAL_SPI_MspInit+0x88>)
 8001a38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a3a:	4a10      	ldr	r2, [pc, #64]	@ (8001a7c <HAL_SPI_MspInit+0x88>)
 8001a3c:	f043 0310 	orr.w	r3, r3, #16
 8001a40:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a42:	4b0e      	ldr	r3, [pc, #56]	@ (8001a7c <HAL_SPI_MspInit+0x88>)
 8001a44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a46:	f003 0310 	and.w	r3, r3, #16
 8001a4a:	60fb      	str	r3, [r7, #12]
 8001a4c:	68fb      	ldr	r3, [r7, #12]
    /**SPI4 GPIO Configuration
    PE2     ------> SPI4_SCK
    PE5     ------> SPI4_MISO
    PE6     ------> SPI4_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 8001a4e:	2364      	movs	r3, #100	@ 0x64
 8001a50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a52:	2302      	movs	r3, #2
 8001a54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a56:	2300      	movs	r3, #0
 8001a58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a5a:	2303      	movs	r3, #3
 8001a5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8001a5e:	2305      	movs	r3, #5
 8001a60:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001a62:	f107 0314 	add.w	r3, r7, #20
 8001a66:	4619      	mov	r1, r3
 8001a68:	4805      	ldr	r0, [pc, #20]	@ (8001a80 <HAL_SPI_MspInit+0x8c>)
 8001a6a:	f000 fd63 	bl	8002534 <HAL_GPIO_Init>

  /* USER CODE END SPI4_MspInit 1 */

  }

}
 8001a6e:	bf00      	nop
 8001a70:	3728      	adds	r7, #40	@ 0x28
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}
 8001a76:	bf00      	nop
 8001a78:	40013400 	.word	0x40013400
 8001a7c:	40023800 	.word	0x40023800
 8001a80:	40021000 	.word	0x40021000

08001a84 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b08a      	sub	sp, #40	@ 0x28
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a8c:	f107 0314 	add.w	r3, r7, #20
 8001a90:	2200      	movs	r2, #0
 8001a92:	601a      	str	r2, [r3, #0]
 8001a94:	605a      	str	r2, [r3, #4]
 8001a96:	609a      	str	r2, [r3, #8]
 8001a98:	60da      	str	r2, [r3, #12]
 8001a9a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4a19      	ldr	r2, [pc, #100]	@ (8001b08 <HAL_UART_MspInit+0x84>)
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d12c      	bne.n	8001b00 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	613b      	str	r3, [r7, #16]
 8001aaa:	4b18      	ldr	r3, [pc, #96]	@ (8001b0c <HAL_UART_MspInit+0x88>)
 8001aac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001aae:	4a17      	ldr	r2, [pc, #92]	@ (8001b0c <HAL_UART_MspInit+0x88>)
 8001ab0:	f043 0310 	orr.w	r3, r3, #16
 8001ab4:	6453      	str	r3, [r2, #68]	@ 0x44
 8001ab6:	4b15      	ldr	r3, [pc, #84]	@ (8001b0c <HAL_UART_MspInit+0x88>)
 8001ab8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001aba:	f003 0310 	and.w	r3, r3, #16
 8001abe:	613b      	str	r3, [r7, #16]
 8001ac0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	60fb      	str	r3, [r7, #12]
 8001ac6:	4b11      	ldr	r3, [pc, #68]	@ (8001b0c <HAL_UART_MspInit+0x88>)
 8001ac8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aca:	4a10      	ldr	r2, [pc, #64]	@ (8001b0c <HAL_UART_MspInit+0x88>)
 8001acc:	f043 0301 	orr.w	r3, r3, #1
 8001ad0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ad2:	4b0e      	ldr	r3, [pc, #56]	@ (8001b0c <HAL_UART_MspInit+0x88>)
 8001ad4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ad6:	f003 0301 	and.w	r3, r3, #1
 8001ada:	60fb      	str	r3, [r7, #12]
 8001adc:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001ade:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001ae2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ae4:	2302      	movs	r3, #2
 8001ae6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001aec:	2303      	movs	r3, #3
 8001aee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001af0:	2307      	movs	r3, #7
 8001af2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001af4:	f107 0314 	add.w	r3, r7, #20
 8001af8:	4619      	mov	r1, r3
 8001afa:	4805      	ldr	r0, [pc, #20]	@ (8001b10 <HAL_UART_MspInit+0x8c>)
 8001afc:	f000 fd1a 	bl	8002534 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8001b00:	bf00      	nop
 8001b02:	3728      	adds	r7, #40	@ 0x28
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bd80      	pop	{r7, pc}
 8001b08:	40011000 	.word	0x40011000
 8001b0c:	40023800 	.word	0x40023800
 8001b10:	40020000 	.word	0x40020000

08001b14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b14:	b480      	push	{r7}
 8001b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001b18:	bf00      	nop
 8001b1a:	e7fd      	b.n	8001b18 <NMI_Handler+0x4>

08001b1c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b20:	bf00      	nop
 8001b22:	e7fd      	b.n	8001b20 <HardFault_Handler+0x4>

08001b24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b24:	b480      	push	{r7}
 8001b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b28:	bf00      	nop
 8001b2a:	e7fd      	b.n	8001b28 <MemManage_Handler+0x4>

08001b2c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b30:	bf00      	nop
 8001b32:	e7fd      	b.n	8001b30 <BusFault_Handler+0x4>

08001b34 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b34:	b480      	push	{r7}
 8001b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b38:	bf00      	nop
 8001b3a:	e7fd      	b.n	8001b38 <UsageFault_Handler+0x4>

08001b3c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b40:	bf00      	nop
 8001b42:	46bd      	mov	sp, r7
 8001b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b48:	4770      	bx	lr

08001b4a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b4a:	b480      	push	{r7}
 8001b4c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b4e:	bf00      	nop
 8001b50:	46bd      	mov	sp, r7
 8001b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b56:	4770      	bx	lr

08001b58 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b5c:	bf00      	nop
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b64:	4770      	bx	lr

08001b66 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b66:	b580      	push	{r7, lr}
 8001b68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b6a:	f000 fbb9 	bl	80022e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b6e:	bf00      	nop
 8001b70:	bd80      	pop	{r7, pc}
	...

08001b74 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b086      	sub	sp, #24
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b7c:	4a14      	ldr	r2, [pc, #80]	@ (8001bd0 <_sbrk+0x5c>)
 8001b7e:	4b15      	ldr	r3, [pc, #84]	@ (8001bd4 <_sbrk+0x60>)
 8001b80:	1ad3      	subs	r3, r2, r3
 8001b82:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b84:	697b      	ldr	r3, [r7, #20]
 8001b86:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b88:	4b13      	ldr	r3, [pc, #76]	@ (8001bd8 <_sbrk+0x64>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d102      	bne.n	8001b96 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b90:	4b11      	ldr	r3, [pc, #68]	@ (8001bd8 <_sbrk+0x64>)
 8001b92:	4a12      	ldr	r2, [pc, #72]	@ (8001bdc <_sbrk+0x68>)
 8001b94:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b96:	4b10      	ldr	r3, [pc, #64]	@ (8001bd8 <_sbrk+0x64>)
 8001b98:	681a      	ldr	r2, [r3, #0]
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	4413      	add	r3, r2
 8001b9e:	693a      	ldr	r2, [r7, #16]
 8001ba0:	429a      	cmp	r2, r3
 8001ba2:	d207      	bcs.n	8001bb4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ba4:	f003 fe2c 	bl	8005800 <__errno>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	220c      	movs	r2, #12
 8001bac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001bae:	f04f 33ff 	mov.w	r3, #4294967295
 8001bb2:	e009      	b.n	8001bc8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001bb4:	4b08      	ldr	r3, [pc, #32]	@ (8001bd8 <_sbrk+0x64>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001bba:	4b07      	ldr	r3, [pc, #28]	@ (8001bd8 <_sbrk+0x64>)
 8001bbc:	681a      	ldr	r2, [r3, #0]
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	4413      	add	r3, r2
 8001bc2:	4a05      	ldr	r2, [pc, #20]	@ (8001bd8 <_sbrk+0x64>)
 8001bc4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001bc6:	68fb      	ldr	r3, [r7, #12]
}
 8001bc8:	4618      	mov	r0, r3
 8001bca:	3718      	adds	r7, #24
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bd80      	pop	{r7, pc}
 8001bd0:	20030000 	.word	0x20030000
 8001bd4:	00000400 	.word	0x00000400
 8001bd8:	200006dc 	.word	0x200006dc
 8001bdc:	20000830 	.word	0x20000830

08001be0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001be0:	b480      	push	{r7}
 8001be2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001be4:	4b06      	ldr	r3, [pc, #24]	@ (8001c00 <SystemInit+0x20>)
 8001be6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001bea:	4a05      	ldr	r2, [pc, #20]	@ (8001c00 <SystemInit+0x20>)
 8001bec:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001bf0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001bf4:	bf00      	nop
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfc:	4770      	bx	lr
 8001bfe:	bf00      	nop
 8001c00:	e000ed00 	.word	0xe000ed00

08001c04 <TM_MFRC522_Init>:
 */
#include "tm_stm32f4_mfrc522.h"

extern SPI_HandleTypeDef hspi4;

void TM_MFRC522_Init(void) {
 8001c04:	b580      	push	{r7, lr}
 8001c06:	af00      	add	r7, sp, #0
	TM_MFRC522_InitPins();
 8001c08:	f000 f84a 	bl	8001ca0 <TM_MFRC522_InitPins>
	//TM_SPI_Init(MFRC522_SPI, MFRC522_SPI_PINSPACK);

	// Hardware reset
	MFRC522_CS_HIGH;
 8001c0c:	2201      	movs	r2, #1
 8001c0e:	2110      	movs	r1, #16
 8001c10:	4815      	ldr	r0, [pc, #84]	@ (8001c68 <TM_MFRC522_Init+0x64>)
 8001c12:	f000 fe53 	bl	80028bc <HAL_GPIO_WritePin>
	HAL_Delay(50);  // Power-up delay
 8001c16:	2032      	movs	r0, #50	@ 0x32
 8001c18:	f000 fb82 	bl	8002320 <HAL_Delay>
	
	// Software reset
	TM_MFRC522_Reset();
 8001c1c:	f000 f947 	bl	8001eae <TM_MFRC522_Reset>
	HAL_Delay(50);  // Wait for reset to complete
 8001c20:	2032      	movs	r0, #50	@ 0x32
 8001c22:	f000 fb7d 	bl	8002320 <HAL_Delay>

	// Set timer and prescaler
	TM_MFRC522_WriteRegister(MFRC522_REG_T_MODE, 0x8D);
 8001c26:	218d      	movs	r1, #141	@ 0x8d
 8001c28:	202a      	movs	r0, #42	@ 0x2a
 8001c2a:	f000 f865 	bl	8001cf8 <TM_MFRC522_WriteRegister>
	TM_MFRC522_WriteRegister(MFRC522_REG_T_PRESCALER, 0x3E);
 8001c2e:	213e      	movs	r1, #62	@ 0x3e
 8001c30:	202b      	movs	r0, #43	@ 0x2b
 8001c32:	f000 f861 	bl	8001cf8 <TM_MFRC522_WriteRegister>
	TM_MFRC522_WriteRegister(MFRC522_REG_T_RELOAD_L, 30);           
 8001c36:	211e      	movs	r1, #30
 8001c38:	202d      	movs	r0, #45	@ 0x2d
 8001c3a:	f000 f85d 	bl	8001cf8 <TM_MFRC522_WriteRegister>
	TM_MFRC522_WriteRegister(MFRC522_REG_T_RELOAD_H, 0);
 8001c3e:	2100      	movs	r1, #0
 8001c40:	202c      	movs	r0, #44	@ 0x2c
 8001c42:	f000 f859 	bl	8001cf8 <TM_MFRC522_WriteRegister>

	// Configure the receiver gain
	TM_MFRC522_WriteRegister(MFRC522_REG_RF_CFG, 0x70);  // 48dB gain
 8001c46:	2170      	movs	r1, #112	@ 0x70
 8001c48:	2026      	movs	r0, #38	@ 0x26
 8001c4a:	f000 f855 	bl	8001cf8 <TM_MFRC522_WriteRegister>
	
	// Configure modulation
	TM_MFRC522_WriteRegister(MFRC522_REG_TX_AUTO, 0x40);
 8001c4e:	2140      	movs	r1, #64	@ 0x40
 8001c50:	2015      	movs	r0, #21
 8001c52:	f000 f851 	bl	8001cf8 <TM_MFRC522_WriteRegister>
	TM_MFRC522_WriteRegister(MFRC522_REG_MODE, 0x3D);
 8001c56:	213d      	movs	r1, #61	@ 0x3d
 8001c58:	2011      	movs	r0, #17
 8001c5a:	f000 f84d 	bl	8001cf8 <TM_MFRC522_WriteRegister>

	// Turn on the antenna
	TM_MFRC522_AntennaOn();
 8001c5e:	f000 f911 	bl	8001e84 <TM_MFRC522_AntennaOn>
}
 8001c62:	bf00      	nop
 8001c64:	bd80      	pop	{r7, pc}
 8001c66:	bf00      	nop
 8001c68:	40021000 	.word	0x40021000

08001c6c <TM_MFRC522_Check>:

TM_MFRC522_Status_t TM_MFRC522_Check(uint8_t* id) {
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b084      	sub	sp, #16
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
	TM_MFRC522_Status_t status;
	//Find cards, return card type
	status = TM_MFRC522_Request(PICC_REQIDL, id);	
 8001c74:	6879      	ldr	r1, [r7, #4]
 8001c76:	2026      	movs	r0, #38	@ 0x26
 8001c78:	f000 f921 	bl	8001ebe <TM_MFRC522_Request>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	73fb      	strb	r3, [r7, #15]
	if (status == MI_OK) {
 8001c80:	7bfb      	ldrb	r3, [r7, #15]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d104      	bne.n	8001c90 <TM_MFRC522_Check+0x24>
		//Card detected
		//Anti-collision, return card serial number 4 bytes
		status = TM_MFRC522_Anticoll(id);	
 8001c86:	6878      	ldr	r0, [r7, #4]
 8001c88:	f000 fa0d 	bl	80020a6 <TM_MFRC522_Anticoll>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	73fb      	strb	r3, [r7, #15]
	}
	TM_MFRC522_Halt();			//Command card into hibernation 
 8001c90:	f000 fa8f 	bl	80021b2 <TM_MFRC522_Halt>

	return status;
 8001c94:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c96:	4618      	mov	r0, r3
 8001c98:	3710      	adds	r7, #16
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}
	...

08001ca0 <TM_MFRC522_InitPins>:
		}
	}
	return MI_OK;
}

void TM_MFRC522_InitPins(void) {
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b086      	sub	sp, #24
 8001ca4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct;
	
	// Enable clock for GPIOE
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	603b      	str	r3, [r7, #0]
 8001caa:	4b11      	ldr	r3, [pc, #68]	@ (8001cf0 <TM_MFRC522_InitPins+0x50>)
 8001cac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cae:	4a10      	ldr	r2, [pc, #64]	@ (8001cf0 <TM_MFRC522_InitPins+0x50>)
 8001cb0:	f043 0310 	orr.w	r3, r3, #16
 8001cb4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cb6:	4b0e      	ldr	r3, [pc, #56]	@ (8001cf0 <TM_MFRC522_InitPins+0x50>)
 8001cb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cba:	f003 0310 	and.w	r3, r3, #16
 8001cbe:	603b      	str	r3, [r7, #0]
 8001cc0:	683b      	ldr	r3, [r7, #0]
	
	// Configure CS pin as output
	GPIO_InitStruct.Pin = MFRC522_CS_PIN;
 8001cc2:	2310      	movs	r3, #16
 8001cc4:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001cce:	2301      	movs	r3, #1
 8001cd0:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(MFRC522_CS_PORT, &GPIO_InitStruct);
 8001cd2:	1d3b      	adds	r3, r7, #4
 8001cd4:	4619      	mov	r1, r3
 8001cd6:	4807      	ldr	r0, [pc, #28]	@ (8001cf4 <TM_MFRC522_InitPins+0x54>)
 8001cd8:	f000 fc2c 	bl	8002534 <HAL_GPIO_Init>
	
	// Set CS pin high (inactive)
	MFRC522_CS_HIGH;
 8001cdc:	2201      	movs	r2, #1
 8001cde:	2110      	movs	r1, #16
 8001ce0:	4804      	ldr	r0, [pc, #16]	@ (8001cf4 <TM_MFRC522_InitPins+0x54>)
 8001ce2:	f000 fdeb 	bl	80028bc <HAL_GPIO_WritePin>
}
 8001ce6:	bf00      	nop
 8001ce8:	3718      	adds	r7, #24
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}
 8001cee:	bf00      	nop
 8001cf0:	40023800 	.word	0x40023800
 8001cf4:	40021000 	.word	0x40021000

08001cf8 <TM_MFRC522_WriteRegister>:

void TM_MFRC522_WriteRegister(uint8_t addr, uint8_t val) {
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b084      	sub	sp, #16
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	4603      	mov	r3, r0
 8001d00:	460a      	mov	r2, r1
 8001d02:	71fb      	strb	r3, [r7, #7]
 8001d04:	4613      	mov	r3, r2
 8001d06:	71bb      	strb	r3, [r7, #6]
	//CS low
	MFRC522_CS_LOW;
 8001d08:	2200      	movs	r2, #0
 8001d0a:	2110      	movs	r1, #16
 8001d0c:	481a      	ldr	r0, [pc, #104]	@ (8001d78 <TM_MFRC522_WriteRegister+0x80>)
 8001d0e:	f000 fdd5 	bl	80028bc <HAL_GPIO_WritePin>
	//Send address
	uint8_t buf = (addr << 1) & 0x7E;
 8001d12:	79fb      	ldrb	r3, [r7, #7]
 8001d14:	005b      	lsls	r3, r3, #1
 8001d16:	b2db      	uxtb	r3, r3
 8001d18:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 8001d1c:	b2db      	uxtb	r3, r3
 8001d1e:	73bb      	strb	r3, [r7, #14]
	HAL_StatusTypeDef ret = 0;
 8001d20:	2300      	movs	r3, #0
 8001d22:	73fb      	strb	r3, [r7, #15]
	ret = HAL_SPI_Transmit(&hspi4, &buf, 1, 100);
 8001d24:	f107 010e 	add.w	r1, r7, #14
 8001d28:	2364      	movs	r3, #100	@ 0x64
 8001d2a:	2201      	movs	r2, #1
 8001d2c:	4813      	ldr	r0, [pc, #76]	@ (8001d7c <TM_MFRC522_WriteRegister+0x84>)
 8001d2e:	f002 fb26 	bl	800437e <HAL_SPI_Transmit>
 8001d32:	4603      	mov	r3, r0
 8001d34:	73fb      	strb	r3, [r7, #15]
	while ((ret = HAL_SPI_GetState(&hspi4)) == HAL_SPI_STATE_BUSY);
 8001d36:	bf00      	nop
 8001d38:	4810      	ldr	r0, [pc, #64]	@ (8001d7c <TM_MFRC522_WriteRegister+0x84>)
 8001d3a:	f002 ff26 	bl	8004b8a <HAL_SPI_GetState>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	73fb      	strb	r3, [r7, #15]
 8001d42:	7bfb      	ldrb	r3, [r7, #15]
 8001d44:	2b02      	cmp	r3, #2
 8001d46:	d0f7      	beq.n	8001d38 <TM_MFRC522_WriteRegister+0x40>
	//Send data	
	HAL_SPI_Transmit(&hspi4, &val, 1, 100);
 8001d48:	1db9      	adds	r1, r7, #6
 8001d4a:	2364      	movs	r3, #100	@ 0x64
 8001d4c:	2201      	movs	r2, #1
 8001d4e:	480b      	ldr	r0, [pc, #44]	@ (8001d7c <TM_MFRC522_WriteRegister+0x84>)
 8001d50:	f002 fb15 	bl	800437e <HAL_SPI_Transmit>
	while ((ret = HAL_SPI_GetState(&hspi4)) == HAL_SPI_STATE_BUSY);
 8001d54:	bf00      	nop
 8001d56:	4809      	ldr	r0, [pc, #36]	@ (8001d7c <TM_MFRC522_WriteRegister+0x84>)
 8001d58:	f002 ff17 	bl	8004b8a <HAL_SPI_GetState>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	73fb      	strb	r3, [r7, #15]
 8001d60:	7bfb      	ldrb	r3, [r7, #15]
 8001d62:	2b02      	cmp	r3, #2
 8001d64:	d0f7      	beq.n	8001d56 <TM_MFRC522_WriteRegister+0x5e>
	//CS high
	MFRC522_CS_HIGH;
 8001d66:	2201      	movs	r2, #1
 8001d68:	2110      	movs	r1, #16
 8001d6a:	4803      	ldr	r0, [pc, #12]	@ (8001d78 <TM_MFRC522_WriteRegister+0x80>)
 8001d6c:	f000 fda6 	bl	80028bc <HAL_GPIO_WritePin>
}
 8001d70:	bf00      	nop
 8001d72:	3710      	adds	r7, #16
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bd80      	pop	{r7, pc}
 8001d78:	40021000 	.word	0x40021000
 8001d7c:	200005b0 	.word	0x200005b0

08001d80 <TM_MFRC522_ReadRegister>:

uint8_t TM_MFRC522_ReadRegister(uint8_t addr) {
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b084      	sub	sp, #16
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	4603      	mov	r3, r0
 8001d88:	71fb      	strb	r3, [r7, #7]
	uint8_t val;
	//CS low
	MFRC522_CS_LOW;
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	2110      	movs	r1, #16
 8001d8e:	481f      	ldr	r0, [pc, #124]	@ (8001e0c <TM_MFRC522_ReadRegister+0x8c>)
 8001d90:	f000 fd94 	bl	80028bc <HAL_GPIO_WritePin>

	uint8_t buf = ((addr << 1) & 0x7E) | 0x80;
 8001d94:	79fb      	ldrb	r3, [r7, #7]
 8001d96:	005b      	lsls	r3, r3, #1
 8001d98:	b25b      	sxtb	r3, r3
 8001d9a:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 8001d9e:	b25b      	sxtb	r3, r3
 8001da0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001da4:	b25b      	sxtb	r3, r3
 8001da6:	b2db      	uxtb	r3, r3
 8001da8:	737b      	strb	r3, [r7, #13]
	HAL_StatusTypeDef ret = 0;
 8001daa:	2300      	movs	r3, #0
 8001dac:	73fb      	strb	r3, [r7, #15]
	ret = HAL_SPI_Transmit(&hspi4, &buf, 1, 100);
 8001dae:	f107 010d 	add.w	r1, r7, #13
 8001db2:	2364      	movs	r3, #100	@ 0x64
 8001db4:	2201      	movs	r2, #1
 8001db6:	4816      	ldr	r0, [pc, #88]	@ (8001e10 <TM_MFRC522_ReadRegister+0x90>)
 8001db8:	f002 fae1 	bl	800437e <HAL_SPI_Transmit>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	73fb      	strb	r3, [r7, #15]
	while ((ret = HAL_SPI_GetState(&hspi4)) == HAL_SPI_STATE_BUSY);
 8001dc0:	bf00      	nop
 8001dc2:	4813      	ldr	r0, [pc, #76]	@ (8001e10 <TM_MFRC522_ReadRegister+0x90>)
 8001dc4:	f002 fee1 	bl	8004b8a <HAL_SPI_GetState>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	73fb      	strb	r3, [r7, #15]
 8001dcc:	7bfb      	ldrb	r3, [r7, #15]
 8001dce:	2b02      	cmp	r3, #2
 8001dd0:	d0f7      	beq.n	8001dc2 <TM_MFRC522_ReadRegister+0x42>
	ret = HAL_SPI_Receive(&hspi4, &val, 1, 100);
 8001dd2:	f107 010e 	add.w	r1, r7, #14
 8001dd6:	2364      	movs	r3, #100	@ 0x64
 8001dd8:	2201      	movs	r2, #1
 8001dda:	480d      	ldr	r0, [pc, #52]	@ (8001e10 <TM_MFRC522_ReadRegister+0x90>)
 8001ddc:	f002 fc13 	bl	8004606 <HAL_SPI_Receive>
 8001de0:	4603      	mov	r3, r0
 8001de2:	73fb      	strb	r3, [r7, #15]
	while ((ret = HAL_SPI_GetState(&hspi4)) == HAL_SPI_STATE_BUSY);
 8001de4:	bf00      	nop
 8001de6:	480a      	ldr	r0, [pc, #40]	@ (8001e10 <TM_MFRC522_ReadRegister+0x90>)
 8001de8:	f002 fecf 	bl	8004b8a <HAL_SPI_GetState>
 8001dec:	4603      	mov	r3, r0
 8001dee:	73fb      	strb	r3, [r7, #15]
 8001df0:	7bfb      	ldrb	r3, [r7, #15]
 8001df2:	2b02      	cmp	r3, #2
 8001df4:	d0f7      	beq.n	8001de6 <TM_MFRC522_ReadRegister+0x66>
	//CS high
	MFRC522_CS_HIGH;
 8001df6:	2201      	movs	r2, #1
 8001df8:	2110      	movs	r1, #16
 8001dfa:	4804      	ldr	r0, [pc, #16]	@ (8001e0c <TM_MFRC522_ReadRegister+0x8c>)
 8001dfc:	f000 fd5e 	bl	80028bc <HAL_GPIO_WritePin>

	return val;	
 8001e00:	7bbb      	ldrb	r3, [r7, #14]
}
 8001e02:	4618      	mov	r0, r3
 8001e04:	3710      	adds	r7, #16
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}
 8001e0a:	bf00      	nop
 8001e0c:	40021000 	.word	0x40021000
 8001e10:	200005b0 	.word	0x200005b0

08001e14 <TM_MFRC522_SetBitMask>:

void TM_MFRC522_SetBitMask(uint8_t reg, uint8_t mask) {
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b082      	sub	sp, #8
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	460a      	mov	r2, r1
 8001e1e:	71fb      	strb	r3, [r7, #7]
 8001e20:	4613      	mov	r3, r2
 8001e22:	71bb      	strb	r3, [r7, #6]
	TM_MFRC522_WriteRegister(reg, TM_MFRC522_ReadRegister(reg) | mask);
 8001e24:	79fb      	ldrb	r3, [r7, #7]
 8001e26:	4618      	mov	r0, r3
 8001e28:	f7ff ffaa 	bl	8001d80 <TM_MFRC522_ReadRegister>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	461a      	mov	r2, r3
 8001e30:	79bb      	ldrb	r3, [r7, #6]
 8001e32:	4313      	orrs	r3, r2
 8001e34:	b2da      	uxtb	r2, r3
 8001e36:	79fb      	ldrb	r3, [r7, #7]
 8001e38:	4611      	mov	r1, r2
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	f7ff ff5c 	bl	8001cf8 <TM_MFRC522_WriteRegister>
}
 8001e40:	bf00      	nop
 8001e42:	3708      	adds	r7, #8
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bd80      	pop	{r7, pc}

08001e48 <TM_MFRC522_ClearBitMask>:

void TM_MFRC522_ClearBitMask(uint8_t reg, uint8_t mask){
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b082      	sub	sp, #8
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	4603      	mov	r3, r0
 8001e50:	460a      	mov	r2, r1
 8001e52:	71fb      	strb	r3, [r7, #7]
 8001e54:	4613      	mov	r3, r2
 8001e56:	71bb      	strb	r3, [r7, #6]
	TM_MFRC522_WriteRegister(reg, TM_MFRC522_ReadRegister(reg) & (~mask));
 8001e58:	79fb      	ldrb	r3, [r7, #7]
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	f7ff ff90 	bl	8001d80 <TM_MFRC522_ReadRegister>
 8001e60:	4603      	mov	r3, r0
 8001e62:	b25a      	sxtb	r2, r3
 8001e64:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001e68:	43db      	mvns	r3, r3
 8001e6a:	b25b      	sxtb	r3, r3
 8001e6c:	4013      	ands	r3, r2
 8001e6e:	b25b      	sxtb	r3, r3
 8001e70:	b2da      	uxtb	r2, r3
 8001e72:	79fb      	ldrb	r3, [r7, #7]
 8001e74:	4611      	mov	r1, r2
 8001e76:	4618      	mov	r0, r3
 8001e78:	f7ff ff3e 	bl	8001cf8 <TM_MFRC522_WriteRegister>
} 
 8001e7c:	bf00      	nop
 8001e7e:	3708      	adds	r7, #8
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bd80      	pop	{r7, pc}

08001e84 <TM_MFRC522_AntennaOn>:

void TM_MFRC522_AntennaOn(void) {
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b082      	sub	sp, #8
 8001e88:	af00      	add	r7, sp, #0
	uint8_t temp;

	temp = TM_MFRC522_ReadRegister(MFRC522_REG_TX_CONTROL);
 8001e8a:	2014      	movs	r0, #20
 8001e8c:	f7ff ff78 	bl	8001d80 <TM_MFRC522_ReadRegister>
 8001e90:	4603      	mov	r3, r0
 8001e92:	71fb      	strb	r3, [r7, #7]
	if (!(temp & 0x03)) {
 8001e94:	79fb      	ldrb	r3, [r7, #7]
 8001e96:	f003 0303 	and.w	r3, r3, #3
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d103      	bne.n	8001ea6 <TM_MFRC522_AntennaOn+0x22>
		TM_MFRC522_SetBitMask(MFRC522_REG_TX_CONTROL, 0x03);
 8001e9e:	2103      	movs	r1, #3
 8001ea0:	2014      	movs	r0, #20
 8001ea2:	f7ff ffb7 	bl	8001e14 <TM_MFRC522_SetBitMask>
	}
}
 8001ea6:	bf00      	nop
 8001ea8:	3708      	adds	r7, #8
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bd80      	pop	{r7, pc}

08001eae <TM_MFRC522_Reset>:

void TM_MFRC522_AntennaOff(void) {
	TM_MFRC522_ClearBitMask(MFRC522_REG_TX_CONTROL, 0x03);
}

void TM_MFRC522_Reset(void) {
 8001eae:	b580      	push	{r7, lr}
 8001eb0:	af00      	add	r7, sp, #0
	TM_MFRC522_WriteRegister(MFRC522_REG_COMMAND, PCD_RESETPHASE);
 8001eb2:	210f      	movs	r1, #15
 8001eb4:	2001      	movs	r0, #1
 8001eb6:	f7ff ff1f 	bl	8001cf8 <TM_MFRC522_WriteRegister>
}
 8001eba:	bf00      	nop
 8001ebc:	bd80      	pop	{r7, pc}

08001ebe <TM_MFRC522_Request>:

TM_MFRC522_Status_t TM_MFRC522_Request(uint8_t reqMode, uint8_t* TagType) {
 8001ebe:	b580      	push	{r7, lr}
 8001ec0:	b086      	sub	sp, #24
 8001ec2:	af02      	add	r7, sp, #8
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	6039      	str	r1, [r7, #0]
 8001ec8:	71fb      	strb	r3, [r7, #7]
	TM_MFRC522_Status_t status;  
	uint16_t backBits;			//The received data bits

	TM_MFRC522_WriteRegister(MFRC522_REG_BIT_FRAMING, 0x07);		//TxLastBists = BitFramingReg[2..0]	???
 8001eca:	2107      	movs	r1, #7
 8001ecc:	200d      	movs	r0, #13
 8001ece:	f7ff ff13 	bl	8001cf8 <TM_MFRC522_WriteRegister>

	TagType[0] = reqMode;
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	79fa      	ldrb	r2, [r7, #7]
 8001ed6:	701a      	strb	r2, [r3, #0]
	status = TM_MFRC522_ToCard(PCD_TRANSCEIVE, TagType, 1, TagType, &backBits);
 8001ed8:	f107 030c 	add.w	r3, r7, #12
 8001edc:	9300      	str	r3, [sp, #0]
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	2201      	movs	r2, #1
 8001ee2:	6839      	ldr	r1, [r7, #0]
 8001ee4:	200c      	movs	r0, #12
 8001ee6:	f000 f80f 	bl	8001f08 <TM_MFRC522_ToCard>
 8001eea:	4603      	mov	r3, r0
 8001eec:	73fb      	strb	r3, [r7, #15]

	if ((status != MI_OK) || (backBits != 0x10)) {    
 8001eee:	7bfb      	ldrb	r3, [r7, #15]
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d102      	bne.n	8001efa <TM_MFRC522_Request+0x3c>
 8001ef4:	89bb      	ldrh	r3, [r7, #12]
 8001ef6:	2b10      	cmp	r3, #16
 8001ef8:	d001      	beq.n	8001efe <TM_MFRC522_Request+0x40>
		status = MI_ERR;
 8001efa:	2302      	movs	r3, #2
 8001efc:	73fb      	strb	r3, [r7, #15]
	}

	return status;
 8001efe:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f00:	4618      	mov	r0, r3
 8001f02:	3710      	adds	r7, #16
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bd80      	pop	{r7, pc}

08001f08 <TM_MFRC522_ToCard>:

TM_MFRC522_Status_t TM_MFRC522_ToCard(uint8_t command, uint8_t* sendData, uint8_t sendLen, uint8_t* backData, uint16_t* backLen) {
 8001f08:	b590      	push	{r4, r7, lr}
 8001f0a:	b087      	sub	sp, #28
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	60b9      	str	r1, [r7, #8]
 8001f10:	607b      	str	r3, [r7, #4]
 8001f12:	4603      	mov	r3, r0
 8001f14:	73fb      	strb	r3, [r7, #15]
 8001f16:	4613      	mov	r3, r2
 8001f18:	73bb      	strb	r3, [r7, #14]
	TM_MFRC522_Status_t status = MI_ERR;
 8001f1a:	2302      	movs	r3, #2
 8001f1c:	75fb      	strb	r3, [r7, #23]
	uint8_t irqEn = 0x00;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	75bb      	strb	r3, [r7, #22]
	uint8_t waitIRq = 0x00;
 8001f22:	2300      	movs	r3, #0
 8001f24:	757b      	strb	r3, [r7, #21]
	uint8_t lastBits;
	uint8_t n;
	uint16_t i;

	switch (command) {
 8001f26:	7bfb      	ldrb	r3, [r7, #15]
 8001f28:	2b0c      	cmp	r3, #12
 8001f2a:	d006      	beq.n	8001f3a <TM_MFRC522_ToCard+0x32>
 8001f2c:	2b0e      	cmp	r3, #14
 8001f2e:	d109      	bne.n	8001f44 <TM_MFRC522_ToCard+0x3c>
		case PCD_AUTHENT: {
			irqEn = 0x12;
 8001f30:	2312      	movs	r3, #18
 8001f32:	75bb      	strb	r3, [r7, #22]
			waitIRq = 0x10;
 8001f34:	2310      	movs	r3, #16
 8001f36:	757b      	strb	r3, [r7, #21]
			break;
 8001f38:	e005      	b.n	8001f46 <TM_MFRC522_ToCard+0x3e>
		}
		case PCD_TRANSCEIVE: {
			irqEn = 0x77;
 8001f3a:	2377      	movs	r3, #119	@ 0x77
 8001f3c:	75bb      	strb	r3, [r7, #22]
			waitIRq = 0x30;
 8001f3e:	2330      	movs	r3, #48	@ 0x30
 8001f40:	757b      	strb	r3, [r7, #21]
			break;
 8001f42:	e000      	b.n	8001f46 <TM_MFRC522_ToCard+0x3e>
		}
		default:
			break;
 8001f44:	bf00      	nop
	}

	TM_MFRC522_WriteRegister(MFRC522_REG_COMM_IE_N, irqEn | 0x80);
 8001f46:	7dbb      	ldrb	r3, [r7, #22]
 8001f48:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001f4c:	b2db      	uxtb	r3, r3
 8001f4e:	4619      	mov	r1, r3
 8001f50:	2002      	movs	r0, #2
 8001f52:	f7ff fed1 	bl	8001cf8 <TM_MFRC522_WriteRegister>
	TM_MFRC522_ClearBitMask(MFRC522_REG_COMM_IRQ, 0x80);
 8001f56:	2180      	movs	r1, #128	@ 0x80
 8001f58:	2004      	movs	r0, #4
 8001f5a:	f7ff ff75 	bl	8001e48 <TM_MFRC522_ClearBitMask>
	TM_MFRC522_SetBitMask(MFRC522_REG_FIFO_LEVEL, 0x80);
 8001f5e:	2180      	movs	r1, #128	@ 0x80
 8001f60:	200a      	movs	r0, #10
 8001f62:	f7ff ff57 	bl	8001e14 <TM_MFRC522_SetBitMask>

	TM_MFRC522_WriteRegister(MFRC522_REG_COMMAND, PCD_IDLE);
 8001f66:	2100      	movs	r1, #0
 8001f68:	2001      	movs	r0, #1
 8001f6a:	f7ff fec5 	bl	8001cf8 <TM_MFRC522_WriteRegister>

	//Writing data to the FIFO
	for (i = 0; i < sendLen; i++) {   
 8001f6e:	2300      	movs	r3, #0
 8001f70:	827b      	strh	r3, [r7, #18]
 8001f72:	e00a      	b.n	8001f8a <TM_MFRC522_ToCard+0x82>
		TM_MFRC522_WriteRegister(MFRC522_REG_FIFO_DATA, sendData[i]);    
 8001f74:	8a7b      	ldrh	r3, [r7, #18]
 8001f76:	68ba      	ldr	r2, [r7, #8]
 8001f78:	4413      	add	r3, r2
 8001f7a:	781b      	ldrb	r3, [r3, #0]
 8001f7c:	4619      	mov	r1, r3
 8001f7e:	2009      	movs	r0, #9
 8001f80:	f7ff feba 	bl	8001cf8 <TM_MFRC522_WriteRegister>
	for (i = 0; i < sendLen; i++) {   
 8001f84:	8a7b      	ldrh	r3, [r7, #18]
 8001f86:	3301      	adds	r3, #1
 8001f88:	827b      	strh	r3, [r7, #18]
 8001f8a:	7bbb      	ldrb	r3, [r7, #14]
 8001f8c:	b29b      	uxth	r3, r3
 8001f8e:	8a7a      	ldrh	r2, [r7, #18]
 8001f90:	429a      	cmp	r2, r3
 8001f92:	d3ef      	bcc.n	8001f74 <TM_MFRC522_ToCard+0x6c>
	}

	//Execute the command
	TM_MFRC522_WriteRegister(MFRC522_REG_COMMAND, command);
 8001f94:	7bfb      	ldrb	r3, [r7, #15]
 8001f96:	4619      	mov	r1, r3
 8001f98:	2001      	movs	r0, #1
 8001f9a:	f7ff fead 	bl	8001cf8 <TM_MFRC522_WriteRegister>
	if (command == PCD_TRANSCEIVE) {    
 8001f9e:	7bfb      	ldrb	r3, [r7, #15]
 8001fa0:	2b0c      	cmp	r3, #12
 8001fa2:	d103      	bne.n	8001fac <TM_MFRC522_ToCard+0xa4>
		TM_MFRC522_SetBitMask(MFRC522_REG_BIT_FRAMING, 0x80);		//StartSend=1,transmission of data starts  
 8001fa4:	2180      	movs	r1, #128	@ 0x80
 8001fa6:	200d      	movs	r0, #13
 8001fa8:	f7ff ff34 	bl	8001e14 <TM_MFRC522_SetBitMask>
	}   

	//Waiting to receive data to complete
	i = 2000;	//i according to the clock frequency adjustment, the operator M1 card maximum waiting time 25ms???
 8001fac:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8001fb0:	827b      	strh	r3, [r7, #18]
	do {
		//CommIrqReg[7..0]
		//Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
		n = TM_MFRC522_ReadRegister(MFRC522_REG_COMM_IRQ);
 8001fb2:	2004      	movs	r0, #4
 8001fb4:	f7ff fee4 	bl	8001d80 <TM_MFRC522_ReadRegister>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	753b      	strb	r3, [r7, #20]
		i--;
 8001fbc:	8a7b      	ldrh	r3, [r7, #18]
 8001fbe:	3b01      	subs	r3, #1
 8001fc0:	827b      	strh	r3, [r7, #18]
	} while ((i!=0) && !(n&0x01) && !(n&waitIRq));
 8001fc2:	8a7b      	ldrh	r3, [r7, #18]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d00a      	beq.n	8001fde <TM_MFRC522_ToCard+0xd6>
 8001fc8:	7d3b      	ldrb	r3, [r7, #20]
 8001fca:	f003 0301 	and.w	r3, r3, #1
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d105      	bne.n	8001fde <TM_MFRC522_ToCard+0xd6>
 8001fd2:	7d3a      	ldrb	r2, [r7, #20]
 8001fd4:	7d7b      	ldrb	r3, [r7, #21]
 8001fd6:	4013      	ands	r3, r2
 8001fd8:	b2db      	uxtb	r3, r3
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d0e9      	beq.n	8001fb2 <TM_MFRC522_ToCard+0xaa>

	TM_MFRC522_ClearBitMask(MFRC522_REG_BIT_FRAMING, 0x80);			//StartSend=0
 8001fde:	2180      	movs	r1, #128	@ 0x80
 8001fe0:	200d      	movs	r0, #13
 8001fe2:	f7ff ff31 	bl	8001e48 <TM_MFRC522_ClearBitMask>

	if (i != 0)  {
 8001fe6:	8a7b      	ldrh	r3, [r7, #18]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d057      	beq.n	800209c <TM_MFRC522_ToCard+0x194>
		if (!(TM_MFRC522_ReadRegister(MFRC522_REG_ERROR) & 0x1B)) {
 8001fec:	2006      	movs	r0, #6
 8001fee:	f7ff fec7 	bl	8001d80 <TM_MFRC522_ReadRegister>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	f003 031b 	and.w	r3, r3, #27
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d14d      	bne.n	8002098 <TM_MFRC522_ToCard+0x190>
			status = MI_OK;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	75fb      	strb	r3, [r7, #23]
			if (n & irqEn & 0x01) {   
 8002000:	7d3a      	ldrb	r2, [r7, #20]
 8002002:	7dbb      	ldrb	r3, [r7, #22]
 8002004:	4013      	ands	r3, r2
 8002006:	b2db      	uxtb	r3, r3
 8002008:	f003 0301 	and.w	r3, r3, #1
 800200c:	2b00      	cmp	r3, #0
 800200e:	d001      	beq.n	8002014 <TM_MFRC522_ToCard+0x10c>
				status = MI_NOTAGERR;			
 8002010:	2301      	movs	r3, #1
 8002012:	75fb      	strb	r3, [r7, #23]
			}

			if (command == PCD_TRANSCEIVE) {
 8002014:	7bfb      	ldrb	r3, [r7, #15]
 8002016:	2b0c      	cmp	r3, #12
 8002018:	d140      	bne.n	800209c <TM_MFRC522_ToCard+0x194>
				n = TM_MFRC522_ReadRegister(MFRC522_REG_FIFO_LEVEL);
 800201a:	200a      	movs	r0, #10
 800201c:	f7ff feb0 	bl	8001d80 <TM_MFRC522_ReadRegister>
 8002020:	4603      	mov	r3, r0
 8002022:	753b      	strb	r3, [r7, #20]
				lastBits = TM_MFRC522_ReadRegister(MFRC522_REG_CONTROL) & 0x07;
 8002024:	200c      	movs	r0, #12
 8002026:	f7ff feab 	bl	8001d80 <TM_MFRC522_ReadRegister>
 800202a:	4603      	mov	r3, r0
 800202c:	f003 0307 	and.w	r3, r3, #7
 8002030:	747b      	strb	r3, [r7, #17]
				if (lastBits) {   
 8002032:	7c7b      	ldrb	r3, [r7, #17]
 8002034:	2b00      	cmp	r3, #0
 8002036:	d00b      	beq.n	8002050 <TM_MFRC522_ToCard+0x148>
					*backLen = (n - 1) * 8 + lastBits;   
 8002038:	7d3b      	ldrb	r3, [r7, #20]
 800203a:	3b01      	subs	r3, #1
 800203c:	b29b      	uxth	r3, r3
 800203e:	00db      	lsls	r3, r3, #3
 8002040:	b29a      	uxth	r2, r3
 8002042:	7c7b      	ldrb	r3, [r7, #17]
 8002044:	b29b      	uxth	r3, r3
 8002046:	4413      	add	r3, r2
 8002048:	b29a      	uxth	r2, r3
 800204a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800204c:	801a      	strh	r2, [r3, #0]
 800204e:	e005      	b.n	800205c <TM_MFRC522_ToCard+0x154>
				} else {   
					*backLen = n * 8;   
 8002050:	7d3b      	ldrb	r3, [r7, #20]
 8002052:	b29b      	uxth	r3, r3
 8002054:	00db      	lsls	r3, r3, #3
 8002056:	b29a      	uxth	r2, r3
 8002058:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800205a:	801a      	strh	r2, [r3, #0]
				}

				if (n == 0) {   
 800205c:	7d3b      	ldrb	r3, [r7, #20]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d101      	bne.n	8002066 <TM_MFRC522_ToCard+0x15e>
					n = 1;    
 8002062:	2301      	movs	r3, #1
 8002064:	753b      	strb	r3, [r7, #20]
				}
				if (n > MFRC522_MAX_LEN) {   
 8002066:	7d3b      	ldrb	r3, [r7, #20]
 8002068:	2b10      	cmp	r3, #16
 800206a:	d901      	bls.n	8002070 <TM_MFRC522_ToCard+0x168>
					n = MFRC522_MAX_LEN;   
 800206c:	2310      	movs	r3, #16
 800206e:	753b      	strb	r3, [r7, #20]
				}

				//Reading the received data in FIFO
				for (i = 0; i < n; i++) {   
 8002070:	2300      	movs	r3, #0
 8002072:	827b      	strh	r3, [r7, #18]
 8002074:	e00a      	b.n	800208c <TM_MFRC522_ToCard+0x184>
					backData[i] = TM_MFRC522_ReadRegister(MFRC522_REG_FIFO_DATA);    
 8002076:	8a7b      	ldrh	r3, [r7, #18]
 8002078:	687a      	ldr	r2, [r7, #4]
 800207a:	18d4      	adds	r4, r2, r3
 800207c:	2009      	movs	r0, #9
 800207e:	f7ff fe7f 	bl	8001d80 <TM_MFRC522_ReadRegister>
 8002082:	4603      	mov	r3, r0
 8002084:	7023      	strb	r3, [r4, #0]
				for (i = 0; i < n; i++) {   
 8002086:	8a7b      	ldrh	r3, [r7, #18]
 8002088:	3301      	adds	r3, #1
 800208a:	827b      	strh	r3, [r7, #18]
 800208c:	7d3b      	ldrb	r3, [r7, #20]
 800208e:	b29b      	uxth	r3, r3
 8002090:	8a7a      	ldrh	r2, [r7, #18]
 8002092:	429a      	cmp	r2, r3
 8002094:	d3ef      	bcc.n	8002076 <TM_MFRC522_ToCard+0x16e>
 8002096:	e001      	b.n	800209c <TM_MFRC522_ToCard+0x194>
				}
			}
		} else {   
			status = MI_ERR;  
 8002098:	2302      	movs	r3, #2
 800209a:	75fb      	strb	r3, [r7, #23]
		}
	}

	return status;
 800209c:	7dfb      	ldrb	r3, [r7, #23]
}
 800209e:	4618      	mov	r0, r3
 80020a0:	371c      	adds	r7, #28
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd90      	pop	{r4, r7, pc}

080020a6 <TM_MFRC522_Anticoll>:

TM_MFRC522_Status_t TM_MFRC522_Anticoll(uint8_t* serNum) {
 80020a6:	b580      	push	{r7, lr}
 80020a8:	b086      	sub	sp, #24
 80020aa:	af02      	add	r7, sp, #8
 80020ac:	6078      	str	r0, [r7, #4]
	TM_MFRC522_Status_t status;
	uint8_t i;
	uint8_t serNumCheck = 0;
 80020ae:	2300      	movs	r3, #0
 80020b0:	737b      	strb	r3, [r7, #13]
	uint16_t unLen;

	TM_MFRC522_WriteRegister(MFRC522_REG_BIT_FRAMING, 0x00);		//TxLastBists = BitFramingReg[2..0]
 80020b2:	2100      	movs	r1, #0
 80020b4:	200d      	movs	r0, #13
 80020b6:	f7ff fe1f 	bl	8001cf8 <TM_MFRC522_WriteRegister>

	serNum[0] = PICC_ANTICOLL;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2293      	movs	r2, #147	@ 0x93
 80020be:	701a      	strb	r2, [r3, #0]
	serNum[1] = 0x20;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	3301      	adds	r3, #1
 80020c4:	2220      	movs	r2, #32
 80020c6:	701a      	strb	r2, [r3, #0]
	status = TM_MFRC522_ToCard(PCD_TRANSCEIVE, serNum, 2, serNum, &unLen);
 80020c8:	f107 030a 	add.w	r3, r7, #10
 80020cc:	9300      	str	r3, [sp, #0]
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2202      	movs	r2, #2
 80020d2:	6879      	ldr	r1, [r7, #4]
 80020d4:	200c      	movs	r0, #12
 80020d6:	f7ff ff17 	bl	8001f08 <TM_MFRC522_ToCard>
 80020da:	4603      	mov	r3, r0
 80020dc:	73fb      	strb	r3, [r7, #15]

	if (status == MI_OK) {
 80020de:	7bfb      	ldrb	r3, [r7, #15]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d118      	bne.n	8002116 <TM_MFRC522_Anticoll+0x70>
		//Check card serial number
		for (i = 0; i < 4; i++) {   
 80020e4:	2300      	movs	r3, #0
 80020e6:	73bb      	strb	r3, [r7, #14]
 80020e8:	e009      	b.n	80020fe <TM_MFRC522_Anticoll+0x58>
			serNumCheck ^= serNum[i];
 80020ea:	7bbb      	ldrb	r3, [r7, #14]
 80020ec:	687a      	ldr	r2, [r7, #4]
 80020ee:	4413      	add	r3, r2
 80020f0:	781a      	ldrb	r2, [r3, #0]
 80020f2:	7b7b      	ldrb	r3, [r7, #13]
 80020f4:	4053      	eors	r3, r2
 80020f6:	737b      	strb	r3, [r7, #13]
		for (i = 0; i < 4; i++) {   
 80020f8:	7bbb      	ldrb	r3, [r7, #14]
 80020fa:	3301      	adds	r3, #1
 80020fc:	73bb      	strb	r3, [r7, #14]
 80020fe:	7bbb      	ldrb	r3, [r7, #14]
 8002100:	2b03      	cmp	r3, #3
 8002102:	d9f2      	bls.n	80020ea <TM_MFRC522_Anticoll+0x44>
		}
		if (serNumCheck != serNum[i]) {   
 8002104:	7bbb      	ldrb	r3, [r7, #14]
 8002106:	687a      	ldr	r2, [r7, #4]
 8002108:	4413      	add	r3, r2
 800210a:	781b      	ldrb	r3, [r3, #0]
 800210c:	7b7a      	ldrb	r2, [r7, #13]
 800210e:	429a      	cmp	r2, r3
 8002110:	d001      	beq.n	8002116 <TM_MFRC522_Anticoll+0x70>
			status = MI_ERR;    
 8002112:	2302      	movs	r3, #2
 8002114:	73fb      	strb	r3, [r7, #15]
		}
	}
	return status;
 8002116:	7bfb      	ldrb	r3, [r7, #15]
} 
 8002118:	4618      	mov	r0, r3
 800211a:	3710      	adds	r7, #16
 800211c:	46bd      	mov	sp, r7
 800211e:	bd80      	pop	{r7, pc}

08002120 <TM_MFRC522_CalculateCRC>:

void TM_MFRC522_CalculateCRC(uint8_t*  pIndata, uint8_t len, uint8_t* pOutData) {
 8002120:	b590      	push	{r4, r7, lr}
 8002122:	b087      	sub	sp, #28
 8002124:	af00      	add	r7, sp, #0
 8002126:	60f8      	str	r0, [r7, #12]
 8002128:	460b      	mov	r3, r1
 800212a:	607a      	str	r2, [r7, #4]
 800212c:	72fb      	strb	r3, [r7, #11]
	uint8_t i, n;

	TM_MFRC522_ClearBitMask(MFRC522_REG_DIV_IRQ, 0x04);				//CRCIrq = 0
 800212e:	2104      	movs	r1, #4
 8002130:	2005      	movs	r0, #5
 8002132:	f7ff fe89 	bl	8001e48 <TM_MFRC522_ClearBitMask>
	TM_MFRC522_SetBitMask(MFRC522_REG_FIFO_LEVEL, 0x80);			//Clear the FIFO pointer
 8002136:	2180      	movs	r1, #128	@ 0x80
 8002138:	200a      	movs	r0, #10
 800213a:	f7ff fe6b 	bl	8001e14 <TM_MFRC522_SetBitMask>
	//Write_MFRC522(CommandReg, PCD_IDLE);

	//Writing data to the FIFO	
	for (i = 0; i < len; i++) {   
 800213e:	2300      	movs	r3, #0
 8002140:	75fb      	strb	r3, [r7, #23]
 8002142:	e00a      	b.n	800215a <TM_MFRC522_CalculateCRC+0x3a>
		TM_MFRC522_WriteRegister(MFRC522_REG_FIFO_DATA, *(pIndata+i));   
 8002144:	7dfb      	ldrb	r3, [r7, #23]
 8002146:	68fa      	ldr	r2, [r7, #12]
 8002148:	4413      	add	r3, r2
 800214a:	781b      	ldrb	r3, [r3, #0]
 800214c:	4619      	mov	r1, r3
 800214e:	2009      	movs	r0, #9
 8002150:	f7ff fdd2 	bl	8001cf8 <TM_MFRC522_WriteRegister>
	for (i = 0; i < len; i++) {   
 8002154:	7dfb      	ldrb	r3, [r7, #23]
 8002156:	3301      	adds	r3, #1
 8002158:	75fb      	strb	r3, [r7, #23]
 800215a:	7dfa      	ldrb	r2, [r7, #23]
 800215c:	7afb      	ldrb	r3, [r7, #11]
 800215e:	429a      	cmp	r2, r3
 8002160:	d3f0      	bcc.n	8002144 <TM_MFRC522_CalculateCRC+0x24>
	}
	TM_MFRC522_WriteRegister(MFRC522_REG_COMMAND, PCD_CALCCRC);
 8002162:	2103      	movs	r1, #3
 8002164:	2001      	movs	r0, #1
 8002166:	f7ff fdc7 	bl	8001cf8 <TM_MFRC522_WriteRegister>

	//Wait CRC calculation is complete
	i = 0xFF;
 800216a:	23ff      	movs	r3, #255	@ 0xff
 800216c:	75fb      	strb	r3, [r7, #23]
	do {
		n = TM_MFRC522_ReadRegister(MFRC522_REG_DIV_IRQ);
 800216e:	2005      	movs	r0, #5
 8002170:	f7ff fe06 	bl	8001d80 <TM_MFRC522_ReadRegister>
 8002174:	4603      	mov	r3, r0
 8002176:	75bb      	strb	r3, [r7, #22]
		i--;
 8002178:	7dfb      	ldrb	r3, [r7, #23]
 800217a:	3b01      	subs	r3, #1
 800217c:	75fb      	strb	r3, [r7, #23]
	} while ((i!=0) && !(n&0x04));			//CRCIrq = 1
 800217e:	7dfb      	ldrb	r3, [r7, #23]
 8002180:	2b00      	cmp	r3, #0
 8002182:	d004      	beq.n	800218e <TM_MFRC522_CalculateCRC+0x6e>
 8002184:	7dbb      	ldrb	r3, [r7, #22]
 8002186:	f003 0304 	and.w	r3, r3, #4
 800218a:	2b00      	cmp	r3, #0
 800218c:	d0ef      	beq.n	800216e <TM_MFRC522_CalculateCRC+0x4e>

	//Read CRC calculation result
	pOutData[0] = TM_MFRC522_ReadRegister(MFRC522_REG_CRC_RESULT_L);
 800218e:	2022      	movs	r0, #34	@ 0x22
 8002190:	f7ff fdf6 	bl	8001d80 <TM_MFRC522_ReadRegister>
 8002194:	4603      	mov	r3, r0
 8002196:	461a      	mov	r2, r3
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	701a      	strb	r2, [r3, #0]
	pOutData[1] = TM_MFRC522_ReadRegister(MFRC522_REG_CRC_RESULT_M);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	1c5c      	adds	r4, r3, #1
 80021a0:	2021      	movs	r0, #33	@ 0x21
 80021a2:	f7ff fded 	bl	8001d80 <TM_MFRC522_ReadRegister>
 80021a6:	4603      	mov	r3, r0
 80021a8:	7023      	strb	r3, [r4, #0]
}
 80021aa:	bf00      	nop
 80021ac:	371c      	adds	r7, #28
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd90      	pop	{r4, r7, pc}

080021b2 <TM_MFRC522_Halt>:
	}

	return status;
}

void TM_MFRC522_Halt(void) {
 80021b2:	b580      	push	{r7, lr}
 80021b4:	b084      	sub	sp, #16
 80021b6:	af02      	add	r7, sp, #8
	uint16_t unLen;
	uint8_t buff[4]; 

	buff[0] = PICC_HALT;
 80021b8:	2350      	movs	r3, #80	@ 0x50
 80021ba:	703b      	strb	r3, [r7, #0]
	buff[1] = 0;
 80021bc:	2300      	movs	r3, #0
 80021be:	707b      	strb	r3, [r7, #1]
	TM_MFRC522_CalculateCRC(buff, 2, &buff[2]);
 80021c0:	463b      	mov	r3, r7
 80021c2:	1c9a      	adds	r2, r3, #2
 80021c4:	463b      	mov	r3, r7
 80021c6:	2102      	movs	r1, #2
 80021c8:	4618      	mov	r0, r3
 80021ca:	f7ff ffa9 	bl	8002120 <TM_MFRC522_CalculateCRC>

	TM_MFRC522_ToCard(PCD_TRANSCEIVE, buff, 4, buff, &unLen);
 80021ce:	463a      	mov	r2, r7
 80021d0:	4639      	mov	r1, r7
 80021d2:	1dbb      	adds	r3, r7, #6
 80021d4:	9300      	str	r3, [sp, #0]
 80021d6:	4613      	mov	r3, r2
 80021d8:	2204      	movs	r2, #4
 80021da:	200c      	movs	r0, #12
 80021dc:	f7ff fe94 	bl	8001f08 <TM_MFRC522_ToCard>
}
 80021e0:	bf00      	nop
 80021e2:	3708      	adds	r7, #8
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bd80      	pop	{r7, pc}

080021e8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80021e8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002220 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80021ec:	f7ff fcf8 	bl	8001be0 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80021f0:	480c      	ldr	r0, [pc, #48]	@ (8002224 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80021f2:	490d      	ldr	r1, [pc, #52]	@ (8002228 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80021f4:	4a0d      	ldr	r2, [pc, #52]	@ (800222c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80021f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80021f8:	e002      	b.n	8002200 <LoopCopyDataInit>

080021fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80021fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80021fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80021fe:	3304      	adds	r3, #4

08002200 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002200:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002202:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002204:	d3f9      	bcc.n	80021fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002206:	4a0a      	ldr	r2, [pc, #40]	@ (8002230 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002208:	4c0a      	ldr	r4, [pc, #40]	@ (8002234 <LoopFillZerobss+0x22>)
  movs r3, #0
 800220a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800220c:	e001      	b.n	8002212 <LoopFillZerobss>

0800220e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800220e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002210:	3204      	adds	r2, #4

08002212 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002212:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002214:	d3fb      	bcc.n	800220e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8002216:	f003 faf9 	bl	800580c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800221a:	f7fe feb5 	bl	8000f88 <main>
  bx  lr    
 800221e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002220:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8002224:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002228:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 800222c:	08007ae8 	.word	0x08007ae8
  ldr r2, =_sbss
 8002230:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8002234:	2000082c 	.word	0x2000082c

08002238 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002238:	e7fe      	b.n	8002238 <ADC_IRQHandler>
	...

0800223c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002240:	4b0e      	ldr	r3, [pc, #56]	@ (800227c <HAL_Init+0x40>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4a0d      	ldr	r2, [pc, #52]	@ (800227c <HAL_Init+0x40>)
 8002246:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800224a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800224c:	4b0b      	ldr	r3, [pc, #44]	@ (800227c <HAL_Init+0x40>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4a0a      	ldr	r2, [pc, #40]	@ (800227c <HAL_Init+0x40>)
 8002252:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002256:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002258:	4b08      	ldr	r3, [pc, #32]	@ (800227c <HAL_Init+0x40>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4a07      	ldr	r2, [pc, #28]	@ (800227c <HAL_Init+0x40>)
 800225e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002262:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002264:	2003      	movs	r0, #3
 8002266:	f000 f931 	bl	80024cc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800226a:	200f      	movs	r0, #15
 800226c:	f000 f808 	bl	8002280 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002270:	f7ff fb2e 	bl	80018d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002274:	2300      	movs	r3, #0
}
 8002276:	4618      	mov	r0, r3
 8002278:	bd80      	pop	{r7, pc}
 800227a:	bf00      	nop
 800227c:	40023c00 	.word	0x40023c00

08002280 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b082      	sub	sp, #8
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002288:	4b12      	ldr	r3, [pc, #72]	@ (80022d4 <HAL_InitTick+0x54>)
 800228a:	681a      	ldr	r2, [r3, #0]
 800228c:	4b12      	ldr	r3, [pc, #72]	@ (80022d8 <HAL_InitTick+0x58>)
 800228e:	781b      	ldrb	r3, [r3, #0]
 8002290:	4619      	mov	r1, r3
 8002292:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002296:	fbb3 f3f1 	udiv	r3, r3, r1
 800229a:	fbb2 f3f3 	udiv	r3, r2, r3
 800229e:	4618      	mov	r0, r3
 80022a0:	f000 f93b 	bl	800251a <HAL_SYSTICK_Config>
 80022a4:	4603      	mov	r3, r0
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d001      	beq.n	80022ae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80022aa:	2301      	movs	r3, #1
 80022ac:	e00e      	b.n	80022cc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	2b0f      	cmp	r3, #15
 80022b2:	d80a      	bhi.n	80022ca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80022b4:	2200      	movs	r2, #0
 80022b6:	6879      	ldr	r1, [r7, #4]
 80022b8:	f04f 30ff 	mov.w	r0, #4294967295
 80022bc:	f000 f911 	bl	80024e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80022c0:	4a06      	ldr	r2, [pc, #24]	@ (80022dc <HAL_InitTick+0x5c>)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80022c6:	2300      	movs	r3, #0
 80022c8:	e000      	b.n	80022cc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80022ca:	2301      	movs	r3, #1
}
 80022cc:	4618      	mov	r0, r3
 80022ce:	3708      	adds	r7, #8
 80022d0:	46bd      	mov	sp, r7
 80022d2:	bd80      	pop	{r7, pc}
 80022d4:	20000010 	.word	0x20000010
 80022d8:	20000018 	.word	0x20000018
 80022dc:	20000014 	.word	0x20000014

080022e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80022e0:	b480      	push	{r7}
 80022e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80022e4:	4b06      	ldr	r3, [pc, #24]	@ (8002300 <HAL_IncTick+0x20>)
 80022e6:	781b      	ldrb	r3, [r3, #0]
 80022e8:	461a      	mov	r2, r3
 80022ea:	4b06      	ldr	r3, [pc, #24]	@ (8002304 <HAL_IncTick+0x24>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4413      	add	r3, r2
 80022f0:	4a04      	ldr	r2, [pc, #16]	@ (8002304 <HAL_IncTick+0x24>)
 80022f2:	6013      	str	r3, [r2, #0]
}
 80022f4:	bf00      	nop
 80022f6:	46bd      	mov	sp, r7
 80022f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fc:	4770      	bx	lr
 80022fe:	bf00      	nop
 8002300:	20000018 	.word	0x20000018
 8002304:	200006e0 	.word	0x200006e0

08002308 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002308:	b480      	push	{r7}
 800230a:	af00      	add	r7, sp, #0
  return uwTick;
 800230c:	4b03      	ldr	r3, [pc, #12]	@ (800231c <HAL_GetTick+0x14>)
 800230e:	681b      	ldr	r3, [r3, #0]
}
 8002310:	4618      	mov	r0, r3
 8002312:	46bd      	mov	sp, r7
 8002314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002318:	4770      	bx	lr
 800231a:	bf00      	nop
 800231c:	200006e0 	.word	0x200006e0

08002320 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b084      	sub	sp, #16
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002328:	f7ff ffee 	bl	8002308 <HAL_GetTick>
 800232c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002338:	d005      	beq.n	8002346 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800233a:	4b0a      	ldr	r3, [pc, #40]	@ (8002364 <HAL_Delay+0x44>)
 800233c:	781b      	ldrb	r3, [r3, #0]
 800233e:	461a      	mov	r2, r3
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	4413      	add	r3, r2
 8002344:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002346:	bf00      	nop
 8002348:	f7ff ffde 	bl	8002308 <HAL_GetTick>
 800234c:	4602      	mov	r2, r0
 800234e:	68bb      	ldr	r3, [r7, #8]
 8002350:	1ad3      	subs	r3, r2, r3
 8002352:	68fa      	ldr	r2, [r7, #12]
 8002354:	429a      	cmp	r2, r3
 8002356:	d8f7      	bhi.n	8002348 <HAL_Delay+0x28>
  {
  }
}
 8002358:	bf00      	nop
 800235a:	bf00      	nop
 800235c:	3710      	adds	r7, #16
 800235e:	46bd      	mov	sp, r7
 8002360:	bd80      	pop	{r7, pc}
 8002362:	bf00      	nop
 8002364:	20000018 	.word	0x20000018

08002368 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002368:	b480      	push	{r7}
 800236a:	b085      	sub	sp, #20
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	f003 0307 	and.w	r3, r3, #7
 8002376:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002378:	4b0c      	ldr	r3, [pc, #48]	@ (80023ac <__NVIC_SetPriorityGrouping+0x44>)
 800237a:	68db      	ldr	r3, [r3, #12]
 800237c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800237e:	68ba      	ldr	r2, [r7, #8]
 8002380:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002384:	4013      	ands	r3, r2
 8002386:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800238c:	68bb      	ldr	r3, [r7, #8]
 800238e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002390:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002394:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002398:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800239a:	4a04      	ldr	r2, [pc, #16]	@ (80023ac <__NVIC_SetPriorityGrouping+0x44>)
 800239c:	68bb      	ldr	r3, [r7, #8]
 800239e:	60d3      	str	r3, [r2, #12]
}
 80023a0:	bf00      	nop
 80023a2:	3714      	adds	r7, #20
 80023a4:	46bd      	mov	sp, r7
 80023a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023aa:	4770      	bx	lr
 80023ac:	e000ed00 	.word	0xe000ed00

080023b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80023b0:	b480      	push	{r7}
 80023b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023b4:	4b04      	ldr	r3, [pc, #16]	@ (80023c8 <__NVIC_GetPriorityGrouping+0x18>)
 80023b6:	68db      	ldr	r3, [r3, #12]
 80023b8:	0a1b      	lsrs	r3, r3, #8
 80023ba:	f003 0307 	and.w	r3, r3, #7
}
 80023be:	4618      	mov	r0, r3
 80023c0:	46bd      	mov	sp, r7
 80023c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c6:	4770      	bx	lr
 80023c8:	e000ed00 	.word	0xe000ed00

080023cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023cc:	b480      	push	{r7}
 80023ce:	b083      	sub	sp, #12
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	4603      	mov	r3, r0
 80023d4:	6039      	str	r1, [r7, #0]
 80023d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	db0a      	blt.n	80023f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	b2da      	uxtb	r2, r3
 80023e4:	490c      	ldr	r1, [pc, #48]	@ (8002418 <__NVIC_SetPriority+0x4c>)
 80023e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023ea:	0112      	lsls	r2, r2, #4
 80023ec:	b2d2      	uxtb	r2, r2
 80023ee:	440b      	add	r3, r1
 80023f0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80023f4:	e00a      	b.n	800240c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	b2da      	uxtb	r2, r3
 80023fa:	4908      	ldr	r1, [pc, #32]	@ (800241c <__NVIC_SetPriority+0x50>)
 80023fc:	79fb      	ldrb	r3, [r7, #7]
 80023fe:	f003 030f 	and.w	r3, r3, #15
 8002402:	3b04      	subs	r3, #4
 8002404:	0112      	lsls	r2, r2, #4
 8002406:	b2d2      	uxtb	r2, r2
 8002408:	440b      	add	r3, r1
 800240a:	761a      	strb	r2, [r3, #24]
}
 800240c:	bf00      	nop
 800240e:	370c      	adds	r7, #12
 8002410:	46bd      	mov	sp, r7
 8002412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002416:	4770      	bx	lr
 8002418:	e000e100 	.word	0xe000e100
 800241c:	e000ed00 	.word	0xe000ed00

08002420 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002420:	b480      	push	{r7}
 8002422:	b089      	sub	sp, #36	@ 0x24
 8002424:	af00      	add	r7, sp, #0
 8002426:	60f8      	str	r0, [r7, #12]
 8002428:	60b9      	str	r1, [r7, #8]
 800242a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	f003 0307 	and.w	r3, r3, #7
 8002432:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002434:	69fb      	ldr	r3, [r7, #28]
 8002436:	f1c3 0307 	rsb	r3, r3, #7
 800243a:	2b04      	cmp	r3, #4
 800243c:	bf28      	it	cs
 800243e:	2304      	movcs	r3, #4
 8002440:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002442:	69fb      	ldr	r3, [r7, #28]
 8002444:	3304      	adds	r3, #4
 8002446:	2b06      	cmp	r3, #6
 8002448:	d902      	bls.n	8002450 <NVIC_EncodePriority+0x30>
 800244a:	69fb      	ldr	r3, [r7, #28]
 800244c:	3b03      	subs	r3, #3
 800244e:	e000      	b.n	8002452 <NVIC_EncodePriority+0x32>
 8002450:	2300      	movs	r3, #0
 8002452:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002454:	f04f 32ff 	mov.w	r2, #4294967295
 8002458:	69bb      	ldr	r3, [r7, #24]
 800245a:	fa02 f303 	lsl.w	r3, r2, r3
 800245e:	43da      	mvns	r2, r3
 8002460:	68bb      	ldr	r3, [r7, #8]
 8002462:	401a      	ands	r2, r3
 8002464:	697b      	ldr	r3, [r7, #20]
 8002466:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002468:	f04f 31ff 	mov.w	r1, #4294967295
 800246c:	697b      	ldr	r3, [r7, #20]
 800246e:	fa01 f303 	lsl.w	r3, r1, r3
 8002472:	43d9      	mvns	r1, r3
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002478:	4313      	orrs	r3, r2
         );
}
 800247a:	4618      	mov	r0, r3
 800247c:	3724      	adds	r7, #36	@ 0x24
 800247e:	46bd      	mov	sp, r7
 8002480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002484:	4770      	bx	lr
	...

08002488 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b082      	sub	sp, #8
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	3b01      	subs	r3, #1
 8002494:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002498:	d301      	bcc.n	800249e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800249a:	2301      	movs	r3, #1
 800249c:	e00f      	b.n	80024be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800249e:	4a0a      	ldr	r2, [pc, #40]	@ (80024c8 <SysTick_Config+0x40>)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	3b01      	subs	r3, #1
 80024a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80024a6:	210f      	movs	r1, #15
 80024a8:	f04f 30ff 	mov.w	r0, #4294967295
 80024ac:	f7ff ff8e 	bl	80023cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80024b0:	4b05      	ldr	r3, [pc, #20]	@ (80024c8 <SysTick_Config+0x40>)
 80024b2:	2200      	movs	r2, #0
 80024b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024b6:	4b04      	ldr	r3, [pc, #16]	@ (80024c8 <SysTick_Config+0x40>)
 80024b8:	2207      	movs	r2, #7
 80024ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80024bc:	2300      	movs	r3, #0
}
 80024be:	4618      	mov	r0, r3
 80024c0:	3708      	adds	r7, #8
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bd80      	pop	{r7, pc}
 80024c6:	bf00      	nop
 80024c8:	e000e010 	.word	0xe000e010

080024cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b082      	sub	sp, #8
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80024d4:	6878      	ldr	r0, [r7, #4]
 80024d6:	f7ff ff47 	bl	8002368 <__NVIC_SetPriorityGrouping>
}
 80024da:	bf00      	nop
 80024dc:	3708      	adds	r7, #8
 80024de:	46bd      	mov	sp, r7
 80024e0:	bd80      	pop	{r7, pc}

080024e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80024e2:	b580      	push	{r7, lr}
 80024e4:	b086      	sub	sp, #24
 80024e6:	af00      	add	r7, sp, #0
 80024e8:	4603      	mov	r3, r0
 80024ea:	60b9      	str	r1, [r7, #8]
 80024ec:	607a      	str	r2, [r7, #4]
 80024ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80024f0:	2300      	movs	r3, #0
 80024f2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80024f4:	f7ff ff5c 	bl	80023b0 <__NVIC_GetPriorityGrouping>
 80024f8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80024fa:	687a      	ldr	r2, [r7, #4]
 80024fc:	68b9      	ldr	r1, [r7, #8]
 80024fe:	6978      	ldr	r0, [r7, #20]
 8002500:	f7ff ff8e 	bl	8002420 <NVIC_EncodePriority>
 8002504:	4602      	mov	r2, r0
 8002506:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800250a:	4611      	mov	r1, r2
 800250c:	4618      	mov	r0, r3
 800250e:	f7ff ff5d 	bl	80023cc <__NVIC_SetPriority>
}
 8002512:	bf00      	nop
 8002514:	3718      	adds	r7, #24
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}

0800251a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800251a:	b580      	push	{r7, lr}
 800251c:	b082      	sub	sp, #8
 800251e:	af00      	add	r7, sp, #0
 8002520:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002522:	6878      	ldr	r0, [r7, #4]
 8002524:	f7ff ffb0 	bl	8002488 <SysTick_Config>
 8002528:	4603      	mov	r3, r0
}
 800252a:	4618      	mov	r0, r3
 800252c:	3708      	adds	r7, #8
 800252e:	46bd      	mov	sp, r7
 8002530:	bd80      	pop	{r7, pc}
	...

08002534 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002534:	b480      	push	{r7}
 8002536:	b089      	sub	sp, #36	@ 0x24
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
 800253c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800253e:	2300      	movs	r3, #0
 8002540:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002542:	2300      	movs	r3, #0
 8002544:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002546:	2300      	movs	r3, #0
 8002548:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800254a:	2300      	movs	r3, #0
 800254c:	61fb      	str	r3, [r7, #28]
 800254e:	e177      	b.n	8002840 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002550:	2201      	movs	r2, #1
 8002552:	69fb      	ldr	r3, [r7, #28]
 8002554:	fa02 f303 	lsl.w	r3, r2, r3
 8002558:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	697a      	ldr	r2, [r7, #20]
 8002560:	4013      	ands	r3, r2
 8002562:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002564:	693a      	ldr	r2, [r7, #16]
 8002566:	697b      	ldr	r3, [r7, #20]
 8002568:	429a      	cmp	r2, r3
 800256a:	f040 8166 	bne.w	800283a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	f003 0303 	and.w	r3, r3, #3
 8002576:	2b01      	cmp	r3, #1
 8002578:	d005      	beq.n	8002586 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002582:	2b02      	cmp	r3, #2
 8002584:	d130      	bne.n	80025e8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	689b      	ldr	r3, [r3, #8]
 800258a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800258c:	69fb      	ldr	r3, [r7, #28]
 800258e:	005b      	lsls	r3, r3, #1
 8002590:	2203      	movs	r2, #3
 8002592:	fa02 f303 	lsl.w	r3, r2, r3
 8002596:	43db      	mvns	r3, r3
 8002598:	69ba      	ldr	r2, [r7, #24]
 800259a:	4013      	ands	r3, r2
 800259c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	68da      	ldr	r2, [r3, #12]
 80025a2:	69fb      	ldr	r3, [r7, #28]
 80025a4:	005b      	lsls	r3, r3, #1
 80025a6:	fa02 f303 	lsl.w	r3, r2, r3
 80025aa:	69ba      	ldr	r2, [r7, #24]
 80025ac:	4313      	orrs	r3, r2
 80025ae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	69ba      	ldr	r2, [r7, #24]
 80025b4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	685b      	ldr	r3, [r3, #4]
 80025ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80025bc:	2201      	movs	r2, #1
 80025be:	69fb      	ldr	r3, [r7, #28]
 80025c0:	fa02 f303 	lsl.w	r3, r2, r3
 80025c4:	43db      	mvns	r3, r3
 80025c6:	69ba      	ldr	r2, [r7, #24]
 80025c8:	4013      	ands	r3, r2
 80025ca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	091b      	lsrs	r3, r3, #4
 80025d2:	f003 0201 	and.w	r2, r3, #1
 80025d6:	69fb      	ldr	r3, [r7, #28]
 80025d8:	fa02 f303 	lsl.w	r3, r2, r3
 80025dc:	69ba      	ldr	r2, [r7, #24]
 80025de:	4313      	orrs	r3, r2
 80025e0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	69ba      	ldr	r2, [r7, #24]
 80025e6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	f003 0303 	and.w	r3, r3, #3
 80025f0:	2b03      	cmp	r3, #3
 80025f2:	d017      	beq.n	8002624 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	68db      	ldr	r3, [r3, #12]
 80025f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80025fa:	69fb      	ldr	r3, [r7, #28]
 80025fc:	005b      	lsls	r3, r3, #1
 80025fe:	2203      	movs	r2, #3
 8002600:	fa02 f303 	lsl.w	r3, r2, r3
 8002604:	43db      	mvns	r3, r3
 8002606:	69ba      	ldr	r2, [r7, #24]
 8002608:	4013      	ands	r3, r2
 800260a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	689a      	ldr	r2, [r3, #8]
 8002610:	69fb      	ldr	r3, [r7, #28]
 8002612:	005b      	lsls	r3, r3, #1
 8002614:	fa02 f303 	lsl.w	r3, r2, r3
 8002618:	69ba      	ldr	r2, [r7, #24]
 800261a:	4313      	orrs	r3, r2
 800261c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	69ba      	ldr	r2, [r7, #24]
 8002622:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	f003 0303 	and.w	r3, r3, #3
 800262c:	2b02      	cmp	r3, #2
 800262e:	d123      	bne.n	8002678 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002630:	69fb      	ldr	r3, [r7, #28]
 8002632:	08da      	lsrs	r2, r3, #3
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	3208      	adds	r2, #8
 8002638:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800263c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800263e:	69fb      	ldr	r3, [r7, #28]
 8002640:	f003 0307 	and.w	r3, r3, #7
 8002644:	009b      	lsls	r3, r3, #2
 8002646:	220f      	movs	r2, #15
 8002648:	fa02 f303 	lsl.w	r3, r2, r3
 800264c:	43db      	mvns	r3, r3
 800264e:	69ba      	ldr	r2, [r7, #24]
 8002650:	4013      	ands	r3, r2
 8002652:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	691a      	ldr	r2, [r3, #16]
 8002658:	69fb      	ldr	r3, [r7, #28]
 800265a:	f003 0307 	and.w	r3, r3, #7
 800265e:	009b      	lsls	r3, r3, #2
 8002660:	fa02 f303 	lsl.w	r3, r2, r3
 8002664:	69ba      	ldr	r2, [r7, #24]
 8002666:	4313      	orrs	r3, r2
 8002668:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800266a:	69fb      	ldr	r3, [r7, #28]
 800266c:	08da      	lsrs	r2, r3, #3
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	3208      	adds	r2, #8
 8002672:	69b9      	ldr	r1, [r7, #24]
 8002674:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800267e:	69fb      	ldr	r3, [r7, #28]
 8002680:	005b      	lsls	r3, r3, #1
 8002682:	2203      	movs	r2, #3
 8002684:	fa02 f303 	lsl.w	r3, r2, r3
 8002688:	43db      	mvns	r3, r3
 800268a:	69ba      	ldr	r2, [r7, #24]
 800268c:	4013      	ands	r3, r2
 800268e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	f003 0203 	and.w	r2, r3, #3
 8002698:	69fb      	ldr	r3, [r7, #28]
 800269a:	005b      	lsls	r3, r3, #1
 800269c:	fa02 f303 	lsl.w	r3, r2, r3
 80026a0:	69ba      	ldr	r2, [r7, #24]
 80026a2:	4313      	orrs	r3, r2
 80026a4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	69ba      	ldr	r2, [r7, #24]
 80026aa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	f000 80c0 	beq.w	800283a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026ba:	2300      	movs	r3, #0
 80026bc:	60fb      	str	r3, [r7, #12]
 80026be:	4b66      	ldr	r3, [pc, #408]	@ (8002858 <HAL_GPIO_Init+0x324>)
 80026c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026c2:	4a65      	ldr	r2, [pc, #404]	@ (8002858 <HAL_GPIO_Init+0x324>)
 80026c4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80026c8:	6453      	str	r3, [r2, #68]	@ 0x44
 80026ca:	4b63      	ldr	r3, [pc, #396]	@ (8002858 <HAL_GPIO_Init+0x324>)
 80026cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026ce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80026d2:	60fb      	str	r3, [r7, #12]
 80026d4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80026d6:	4a61      	ldr	r2, [pc, #388]	@ (800285c <HAL_GPIO_Init+0x328>)
 80026d8:	69fb      	ldr	r3, [r7, #28]
 80026da:	089b      	lsrs	r3, r3, #2
 80026dc:	3302      	adds	r3, #2
 80026de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80026e4:	69fb      	ldr	r3, [r7, #28]
 80026e6:	f003 0303 	and.w	r3, r3, #3
 80026ea:	009b      	lsls	r3, r3, #2
 80026ec:	220f      	movs	r2, #15
 80026ee:	fa02 f303 	lsl.w	r3, r2, r3
 80026f2:	43db      	mvns	r3, r3
 80026f4:	69ba      	ldr	r2, [r7, #24]
 80026f6:	4013      	ands	r3, r2
 80026f8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	4a58      	ldr	r2, [pc, #352]	@ (8002860 <HAL_GPIO_Init+0x32c>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d037      	beq.n	8002772 <HAL_GPIO_Init+0x23e>
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	4a57      	ldr	r2, [pc, #348]	@ (8002864 <HAL_GPIO_Init+0x330>)
 8002706:	4293      	cmp	r3, r2
 8002708:	d031      	beq.n	800276e <HAL_GPIO_Init+0x23a>
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	4a56      	ldr	r2, [pc, #344]	@ (8002868 <HAL_GPIO_Init+0x334>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d02b      	beq.n	800276a <HAL_GPIO_Init+0x236>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	4a55      	ldr	r2, [pc, #340]	@ (800286c <HAL_GPIO_Init+0x338>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d025      	beq.n	8002766 <HAL_GPIO_Init+0x232>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	4a54      	ldr	r2, [pc, #336]	@ (8002870 <HAL_GPIO_Init+0x33c>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d01f      	beq.n	8002762 <HAL_GPIO_Init+0x22e>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	4a53      	ldr	r2, [pc, #332]	@ (8002874 <HAL_GPIO_Init+0x340>)
 8002726:	4293      	cmp	r3, r2
 8002728:	d019      	beq.n	800275e <HAL_GPIO_Init+0x22a>
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	4a52      	ldr	r2, [pc, #328]	@ (8002878 <HAL_GPIO_Init+0x344>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d013      	beq.n	800275a <HAL_GPIO_Init+0x226>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	4a51      	ldr	r2, [pc, #324]	@ (800287c <HAL_GPIO_Init+0x348>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d00d      	beq.n	8002756 <HAL_GPIO_Init+0x222>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	4a50      	ldr	r2, [pc, #320]	@ (8002880 <HAL_GPIO_Init+0x34c>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d007      	beq.n	8002752 <HAL_GPIO_Init+0x21e>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	4a4f      	ldr	r2, [pc, #316]	@ (8002884 <HAL_GPIO_Init+0x350>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d101      	bne.n	800274e <HAL_GPIO_Init+0x21a>
 800274a:	2309      	movs	r3, #9
 800274c:	e012      	b.n	8002774 <HAL_GPIO_Init+0x240>
 800274e:	230a      	movs	r3, #10
 8002750:	e010      	b.n	8002774 <HAL_GPIO_Init+0x240>
 8002752:	2308      	movs	r3, #8
 8002754:	e00e      	b.n	8002774 <HAL_GPIO_Init+0x240>
 8002756:	2307      	movs	r3, #7
 8002758:	e00c      	b.n	8002774 <HAL_GPIO_Init+0x240>
 800275a:	2306      	movs	r3, #6
 800275c:	e00a      	b.n	8002774 <HAL_GPIO_Init+0x240>
 800275e:	2305      	movs	r3, #5
 8002760:	e008      	b.n	8002774 <HAL_GPIO_Init+0x240>
 8002762:	2304      	movs	r3, #4
 8002764:	e006      	b.n	8002774 <HAL_GPIO_Init+0x240>
 8002766:	2303      	movs	r3, #3
 8002768:	e004      	b.n	8002774 <HAL_GPIO_Init+0x240>
 800276a:	2302      	movs	r3, #2
 800276c:	e002      	b.n	8002774 <HAL_GPIO_Init+0x240>
 800276e:	2301      	movs	r3, #1
 8002770:	e000      	b.n	8002774 <HAL_GPIO_Init+0x240>
 8002772:	2300      	movs	r3, #0
 8002774:	69fa      	ldr	r2, [r7, #28]
 8002776:	f002 0203 	and.w	r2, r2, #3
 800277a:	0092      	lsls	r2, r2, #2
 800277c:	4093      	lsls	r3, r2
 800277e:	69ba      	ldr	r2, [r7, #24]
 8002780:	4313      	orrs	r3, r2
 8002782:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002784:	4935      	ldr	r1, [pc, #212]	@ (800285c <HAL_GPIO_Init+0x328>)
 8002786:	69fb      	ldr	r3, [r7, #28]
 8002788:	089b      	lsrs	r3, r3, #2
 800278a:	3302      	adds	r3, #2
 800278c:	69ba      	ldr	r2, [r7, #24]
 800278e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002792:	4b3d      	ldr	r3, [pc, #244]	@ (8002888 <HAL_GPIO_Init+0x354>)
 8002794:	689b      	ldr	r3, [r3, #8]
 8002796:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002798:	693b      	ldr	r3, [r7, #16]
 800279a:	43db      	mvns	r3, r3
 800279c:	69ba      	ldr	r2, [r7, #24]
 800279e:	4013      	ands	r3, r2
 80027a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	685b      	ldr	r3, [r3, #4]
 80027a6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d003      	beq.n	80027b6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80027ae:	69ba      	ldr	r2, [r7, #24]
 80027b0:	693b      	ldr	r3, [r7, #16]
 80027b2:	4313      	orrs	r3, r2
 80027b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80027b6:	4a34      	ldr	r2, [pc, #208]	@ (8002888 <HAL_GPIO_Init+0x354>)
 80027b8:	69bb      	ldr	r3, [r7, #24]
 80027ba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80027bc:	4b32      	ldr	r3, [pc, #200]	@ (8002888 <HAL_GPIO_Init+0x354>)
 80027be:	68db      	ldr	r3, [r3, #12]
 80027c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027c2:	693b      	ldr	r3, [r7, #16]
 80027c4:	43db      	mvns	r3, r3
 80027c6:	69ba      	ldr	r2, [r7, #24]
 80027c8:	4013      	ands	r3, r2
 80027ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d003      	beq.n	80027e0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80027d8:	69ba      	ldr	r2, [r7, #24]
 80027da:	693b      	ldr	r3, [r7, #16]
 80027dc:	4313      	orrs	r3, r2
 80027de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80027e0:	4a29      	ldr	r2, [pc, #164]	@ (8002888 <HAL_GPIO_Init+0x354>)
 80027e2:	69bb      	ldr	r3, [r7, #24]
 80027e4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80027e6:	4b28      	ldr	r3, [pc, #160]	@ (8002888 <HAL_GPIO_Init+0x354>)
 80027e8:	685b      	ldr	r3, [r3, #4]
 80027ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027ec:	693b      	ldr	r3, [r7, #16]
 80027ee:	43db      	mvns	r3, r3
 80027f0:	69ba      	ldr	r2, [r7, #24]
 80027f2:	4013      	ands	r3, r2
 80027f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d003      	beq.n	800280a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002802:	69ba      	ldr	r2, [r7, #24]
 8002804:	693b      	ldr	r3, [r7, #16]
 8002806:	4313      	orrs	r3, r2
 8002808:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800280a:	4a1f      	ldr	r2, [pc, #124]	@ (8002888 <HAL_GPIO_Init+0x354>)
 800280c:	69bb      	ldr	r3, [r7, #24]
 800280e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002810:	4b1d      	ldr	r3, [pc, #116]	@ (8002888 <HAL_GPIO_Init+0x354>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002816:	693b      	ldr	r3, [r7, #16]
 8002818:	43db      	mvns	r3, r3
 800281a:	69ba      	ldr	r2, [r7, #24]
 800281c:	4013      	ands	r3, r2
 800281e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002828:	2b00      	cmp	r3, #0
 800282a:	d003      	beq.n	8002834 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800282c:	69ba      	ldr	r2, [r7, #24]
 800282e:	693b      	ldr	r3, [r7, #16]
 8002830:	4313      	orrs	r3, r2
 8002832:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002834:	4a14      	ldr	r2, [pc, #80]	@ (8002888 <HAL_GPIO_Init+0x354>)
 8002836:	69bb      	ldr	r3, [r7, #24]
 8002838:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800283a:	69fb      	ldr	r3, [r7, #28]
 800283c:	3301      	adds	r3, #1
 800283e:	61fb      	str	r3, [r7, #28]
 8002840:	69fb      	ldr	r3, [r7, #28]
 8002842:	2b0f      	cmp	r3, #15
 8002844:	f67f ae84 	bls.w	8002550 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002848:	bf00      	nop
 800284a:	bf00      	nop
 800284c:	3724      	adds	r7, #36	@ 0x24
 800284e:	46bd      	mov	sp, r7
 8002850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002854:	4770      	bx	lr
 8002856:	bf00      	nop
 8002858:	40023800 	.word	0x40023800
 800285c:	40013800 	.word	0x40013800
 8002860:	40020000 	.word	0x40020000
 8002864:	40020400 	.word	0x40020400
 8002868:	40020800 	.word	0x40020800
 800286c:	40020c00 	.word	0x40020c00
 8002870:	40021000 	.word	0x40021000
 8002874:	40021400 	.word	0x40021400
 8002878:	40021800 	.word	0x40021800
 800287c:	40021c00 	.word	0x40021c00
 8002880:	40022000 	.word	0x40022000
 8002884:	40022400 	.word	0x40022400
 8002888:	40013c00 	.word	0x40013c00

0800288c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800288c:	b480      	push	{r7}
 800288e:	b085      	sub	sp, #20
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
 8002894:	460b      	mov	r3, r1
 8002896:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	691a      	ldr	r2, [r3, #16]
 800289c:	887b      	ldrh	r3, [r7, #2]
 800289e:	4013      	ands	r3, r2
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d002      	beq.n	80028aa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80028a4:	2301      	movs	r3, #1
 80028a6:	73fb      	strb	r3, [r7, #15]
 80028a8:	e001      	b.n	80028ae <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80028aa:	2300      	movs	r3, #0
 80028ac:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80028ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80028b0:	4618      	mov	r0, r3
 80028b2:	3714      	adds	r7, #20
 80028b4:	46bd      	mov	sp, r7
 80028b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ba:	4770      	bx	lr

080028bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80028bc:	b480      	push	{r7}
 80028be:	b083      	sub	sp, #12
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
 80028c4:	460b      	mov	r3, r1
 80028c6:	807b      	strh	r3, [r7, #2]
 80028c8:	4613      	mov	r3, r2
 80028ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80028cc:	787b      	ldrb	r3, [r7, #1]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d003      	beq.n	80028da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80028d2:	887a      	ldrh	r2, [r7, #2]
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80028d8:	e003      	b.n	80028e2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80028da:	887b      	ldrh	r3, [r7, #2]
 80028dc:	041a      	lsls	r2, r3, #16
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	619a      	str	r2, [r3, #24]
}
 80028e2:	bf00      	nop
 80028e4:	370c      	adds	r7, #12
 80028e6:	46bd      	mov	sp, r7
 80028e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ec:	4770      	bx	lr
	...

080028f0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b084      	sub	sp, #16
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d101      	bne.n	8002902 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80028fe:	2301      	movs	r3, #1
 8002900:	e12b      	b.n	8002b5a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002908:	b2db      	uxtb	r3, r3
 800290a:	2b00      	cmp	r3, #0
 800290c:	d106      	bne.n	800291c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2200      	movs	r2, #0
 8002912:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002916:	6878      	ldr	r0, [r7, #4]
 8002918:	f7ff f802 	bl	8001920 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2224      	movs	r2, #36	@ 0x24
 8002920:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	681a      	ldr	r2, [r3, #0]
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f022 0201 	bic.w	r2, r2, #1
 8002932:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	681a      	ldr	r2, [r3, #0]
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002942:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	681a      	ldr	r2, [r3, #0]
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002952:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002954:	f001 fc62 	bl	800421c <HAL_RCC_GetPCLK1Freq>
 8002958:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	685b      	ldr	r3, [r3, #4]
 800295e:	4a81      	ldr	r2, [pc, #516]	@ (8002b64 <HAL_I2C_Init+0x274>)
 8002960:	4293      	cmp	r3, r2
 8002962:	d807      	bhi.n	8002974 <HAL_I2C_Init+0x84>
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	4a80      	ldr	r2, [pc, #512]	@ (8002b68 <HAL_I2C_Init+0x278>)
 8002968:	4293      	cmp	r3, r2
 800296a:	bf94      	ite	ls
 800296c:	2301      	movls	r3, #1
 800296e:	2300      	movhi	r3, #0
 8002970:	b2db      	uxtb	r3, r3
 8002972:	e006      	b.n	8002982 <HAL_I2C_Init+0x92>
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	4a7d      	ldr	r2, [pc, #500]	@ (8002b6c <HAL_I2C_Init+0x27c>)
 8002978:	4293      	cmp	r3, r2
 800297a:	bf94      	ite	ls
 800297c:	2301      	movls	r3, #1
 800297e:	2300      	movhi	r3, #0
 8002980:	b2db      	uxtb	r3, r3
 8002982:	2b00      	cmp	r3, #0
 8002984:	d001      	beq.n	800298a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002986:	2301      	movs	r3, #1
 8002988:	e0e7      	b.n	8002b5a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	4a78      	ldr	r2, [pc, #480]	@ (8002b70 <HAL_I2C_Init+0x280>)
 800298e:	fba2 2303 	umull	r2, r3, r2, r3
 8002992:	0c9b      	lsrs	r3, r3, #18
 8002994:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	68ba      	ldr	r2, [r7, #8]
 80029a6:	430a      	orrs	r2, r1
 80029a8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	6a1b      	ldr	r3, [r3, #32]
 80029b0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	4a6a      	ldr	r2, [pc, #424]	@ (8002b64 <HAL_I2C_Init+0x274>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d802      	bhi.n	80029c4 <HAL_I2C_Init+0xd4>
 80029be:	68bb      	ldr	r3, [r7, #8]
 80029c0:	3301      	adds	r3, #1
 80029c2:	e009      	b.n	80029d8 <HAL_I2C_Init+0xe8>
 80029c4:	68bb      	ldr	r3, [r7, #8]
 80029c6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80029ca:	fb02 f303 	mul.w	r3, r2, r3
 80029ce:	4a69      	ldr	r2, [pc, #420]	@ (8002b74 <HAL_I2C_Init+0x284>)
 80029d0:	fba2 2303 	umull	r2, r3, r2, r3
 80029d4:	099b      	lsrs	r3, r3, #6
 80029d6:	3301      	adds	r3, #1
 80029d8:	687a      	ldr	r2, [r7, #4]
 80029da:	6812      	ldr	r2, [r2, #0]
 80029dc:	430b      	orrs	r3, r1
 80029de:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	69db      	ldr	r3, [r3, #28]
 80029e6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80029ea:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	495c      	ldr	r1, [pc, #368]	@ (8002b64 <HAL_I2C_Init+0x274>)
 80029f4:	428b      	cmp	r3, r1
 80029f6:	d819      	bhi.n	8002a2c <HAL_I2C_Init+0x13c>
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	1e59      	subs	r1, r3, #1
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	005b      	lsls	r3, r3, #1
 8002a02:	fbb1 f3f3 	udiv	r3, r1, r3
 8002a06:	1c59      	adds	r1, r3, #1
 8002a08:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002a0c:	400b      	ands	r3, r1
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d00a      	beq.n	8002a28 <HAL_I2C_Init+0x138>
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	1e59      	subs	r1, r3, #1
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	685b      	ldr	r3, [r3, #4]
 8002a1a:	005b      	lsls	r3, r3, #1
 8002a1c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002a20:	3301      	adds	r3, #1
 8002a22:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a26:	e051      	b.n	8002acc <HAL_I2C_Init+0x1dc>
 8002a28:	2304      	movs	r3, #4
 8002a2a:	e04f      	b.n	8002acc <HAL_I2C_Init+0x1dc>
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	689b      	ldr	r3, [r3, #8]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d111      	bne.n	8002a58 <HAL_I2C_Init+0x168>
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	1e58      	subs	r0, r3, #1
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6859      	ldr	r1, [r3, #4]
 8002a3c:	460b      	mov	r3, r1
 8002a3e:	005b      	lsls	r3, r3, #1
 8002a40:	440b      	add	r3, r1
 8002a42:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a46:	3301      	adds	r3, #1
 8002a48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	bf0c      	ite	eq
 8002a50:	2301      	moveq	r3, #1
 8002a52:	2300      	movne	r3, #0
 8002a54:	b2db      	uxtb	r3, r3
 8002a56:	e012      	b.n	8002a7e <HAL_I2C_Init+0x18e>
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	1e58      	subs	r0, r3, #1
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6859      	ldr	r1, [r3, #4]
 8002a60:	460b      	mov	r3, r1
 8002a62:	009b      	lsls	r3, r3, #2
 8002a64:	440b      	add	r3, r1
 8002a66:	0099      	lsls	r1, r3, #2
 8002a68:	440b      	add	r3, r1
 8002a6a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a6e:	3301      	adds	r3, #1
 8002a70:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	bf0c      	ite	eq
 8002a78:	2301      	moveq	r3, #1
 8002a7a:	2300      	movne	r3, #0
 8002a7c:	b2db      	uxtb	r3, r3
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d001      	beq.n	8002a86 <HAL_I2C_Init+0x196>
 8002a82:	2301      	movs	r3, #1
 8002a84:	e022      	b.n	8002acc <HAL_I2C_Init+0x1dc>
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	689b      	ldr	r3, [r3, #8]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d10e      	bne.n	8002aac <HAL_I2C_Init+0x1bc>
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	1e58      	subs	r0, r3, #1
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6859      	ldr	r1, [r3, #4]
 8002a96:	460b      	mov	r3, r1
 8002a98:	005b      	lsls	r3, r3, #1
 8002a9a:	440b      	add	r3, r1
 8002a9c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002aa0:	3301      	adds	r3, #1
 8002aa2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002aa6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002aaa:	e00f      	b.n	8002acc <HAL_I2C_Init+0x1dc>
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	1e58      	subs	r0, r3, #1
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6859      	ldr	r1, [r3, #4]
 8002ab4:	460b      	mov	r3, r1
 8002ab6:	009b      	lsls	r3, r3, #2
 8002ab8:	440b      	add	r3, r1
 8002aba:	0099      	lsls	r1, r3, #2
 8002abc:	440b      	add	r3, r1
 8002abe:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ac2:	3301      	adds	r3, #1
 8002ac4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ac8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002acc:	6879      	ldr	r1, [r7, #4]
 8002ace:	6809      	ldr	r1, [r1, #0]
 8002ad0:	4313      	orrs	r3, r2
 8002ad2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	69da      	ldr	r2, [r3, #28]
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6a1b      	ldr	r3, [r3, #32]
 8002ae6:	431a      	orrs	r2, r3
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	430a      	orrs	r2, r1
 8002aee:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	689b      	ldr	r3, [r3, #8]
 8002af6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002afa:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002afe:	687a      	ldr	r2, [r7, #4]
 8002b00:	6911      	ldr	r1, [r2, #16]
 8002b02:	687a      	ldr	r2, [r7, #4]
 8002b04:	68d2      	ldr	r2, [r2, #12]
 8002b06:	4311      	orrs	r1, r2
 8002b08:	687a      	ldr	r2, [r7, #4]
 8002b0a:	6812      	ldr	r2, [r2, #0]
 8002b0c:	430b      	orrs	r3, r1
 8002b0e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	68db      	ldr	r3, [r3, #12]
 8002b16:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	695a      	ldr	r2, [r3, #20]
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	699b      	ldr	r3, [r3, #24]
 8002b22:	431a      	orrs	r2, r3
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	430a      	orrs	r2, r1
 8002b2a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	681a      	ldr	r2, [r3, #0]
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f042 0201 	orr.w	r2, r2, #1
 8002b3a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2200      	movs	r2, #0
 8002b40:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2220      	movs	r2, #32
 8002b46:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2200      	movs	r2, #0
 8002b54:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002b58:	2300      	movs	r3, #0
}
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	3710      	adds	r7, #16
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	bd80      	pop	{r7, pc}
 8002b62:	bf00      	nop
 8002b64:	000186a0 	.word	0x000186a0
 8002b68:	001e847f 	.word	0x001e847f
 8002b6c:	003d08ff 	.word	0x003d08ff
 8002b70:	431bde83 	.word	0x431bde83
 8002b74:	10624dd3 	.word	0x10624dd3

08002b78 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b088      	sub	sp, #32
 8002b7c:	af02      	add	r7, sp, #8
 8002b7e:	60f8      	str	r0, [r7, #12]
 8002b80:	607a      	str	r2, [r7, #4]
 8002b82:	461a      	mov	r2, r3
 8002b84:	460b      	mov	r3, r1
 8002b86:	817b      	strh	r3, [r7, #10]
 8002b88:	4613      	mov	r3, r2
 8002b8a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002b8c:	f7ff fbbc 	bl	8002308 <HAL_GetTick>
 8002b90:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002b98:	b2db      	uxtb	r3, r3
 8002b9a:	2b20      	cmp	r3, #32
 8002b9c:	f040 80e0 	bne.w	8002d60 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002ba0:	697b      	ldr	r3, [r7, #20]
 8002ba2:	9300      	str	r3, [sp, #0]
 8002ba4:	2319      	movs	r3, #25
 8002ba6:	2201      	movs	r2, #1
 8002ba8:	4970      	ldr	r1, [pc, #448]	@ (8002d6c <HAL_I2C_Master_Transmit+0x1f4>)
 8002baa:	68f8      	ldr	r0, [r7, #12]
 8002bac:	f000 fc22 	bl	80033f4 <I2C_WaitOnFlagUntilTimeout>
 8002bb0:	4603      	mov	r3, r0
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d001      	beq.n	8002bba <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002bb6:	2302      	movs	r3, #2
 8002bb8:	e0d3      	b.n	8002d62 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002bc0:	2b01      	cmp	r3, #1
 8002bc2:	d101      	bne.n	8002bc8 <HAL_I2C_Master_Transmit+0x50>
 8002bc4:	2302      	movs	r3, #2
 8002bc6:	e0cc      	b.n	8002d62 <HAL_I2C_Master_Transmit+0x1ea>
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	2201      	movs	r2, #1
 8002bcc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f003 0301 	and.w	r3, r3, #1
 8002bda:	2b01      	cmp	r3, #1
 8002bdc:	d007      	beq.n	8002bee <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	681a      	ldr	r2, [r3, #0]
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f042 0201 	orr.w	r2, r2, #1
 8002bec:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	681a      	ldr	r2, [r3, #0]
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002bfc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	2221      	movs	r2, #33	@ 0x21
 8002c02:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	2210      	movs	r2, #16
 8002c0a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	2200      	movs	r2, #0
 8002c12:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	687a      	ldr	r2, [r7, #4]
 8002c18:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	893a      	ldrh	r2, [r7, #8]
 8002c1e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c24:	b29a      	uxth	r2, r3
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	4a50      	ldr	r2, [pc, #320]	@ (8002d70 <HAL_I2C_Master_Transmit+0x1f8>)
 8002c2e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002c30:	8979      	ldrh	r1, [r7, #10]
 8002c32:	697b      	ldr	r3, [r7, #20]
 8002c34:	6a3a      	ldr	r2, [r7, #32]
 8002c36:	68f8      	ldr	r0, [r7, #12]
 8002c38:	f000 fac4 	bl	80031c4 <I2C_MasterRequestWrite>
 8002c3c:	4603      	mov	r3, r0
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d001      	beq.n	8002c46 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002c42:	2301      	movs	r3, #1
 8002c44:	e08d      	b.n	8002d62 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c46:	2300      	movs	r3, #0
 8002c48:	613b      	str	r3, [r7, #16]
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	695b      	ldr	r3, [r3, #20]
 8002c50:	613b      	str	r3, [r7, #16]
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	699b      	ldr	r3, [r3, #24]
 8002c58:	613b      	str	r3, [r7, #16]
 8002c5a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002c5c:	e066      	b.n	8002d2c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c5e:	697a      	ldr	r2, [r7, #20]
 8002c60:	6a39      	ldr	r1, [r7, #32]
 8002c62:	68f8      	ldr	r0, [r7, #12]
 8002c64:	f000 fce0 	bl	8003628 <I2C_WaitOnTXEFlagUntilTimeout>
 8002c68:	4603      	mov	r3, r0
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d00d      	beq.n	8002c8a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c72:	2b04      	cmp	r3, #4
 8002c74:	d107      	bne.n	8002c86 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	681a      	ldr	r2, [r3, #0]
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c84:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002c86:	2301      	movs	r3, #1
 8002c88:	e06b      	b.n	8002d62 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c8e:	781a      	ldrb	r2, [r3, #0]
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c9a:	1c5a      	adds	r2, r3, #1
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ca4:	b29b      	uxth	r3, r3
 8002ca6:	3b01      	subs	r3, #1
 8002ca8:	b29a      	uxth	r2, r3
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cb2:	3b01      	subs	r3, #1
 8002cb4:	b29a      	uxth	r2, r3
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	695b      	ldr	r3, [r3, #20]
 8002cc0:	f003 0304 	and.w	r3, r3, #4
 8002cc4:	2b04      	cmp	r3, #4
 8002cc6:	d11b      	bne.n	8002d00 <HAL_I2C_Master_Transmit+0x188>
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d017      	beq.n	8002d00 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cd4:	781a      	ldrb	r2, [r3, #0]
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ce0:	1c5a      	adds	r2, r3, #1
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002cea:	b29b      	uxth	r3, r3
 8002cec:	3b01      	subs	r3, #1
 8002cee:	b29a      	uxth	r2, r3
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cf8:	3b01      	subs	r3, #1
 8002cfa:	b29a      	uxth	r2, r3
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d00:	697a      	ldr	r2, [r7, #20]
 8002d02:	6a39      	ldr	r1, [r7, #32]
 8002d04:	68f8      	ldr	r0, [r7, #12]
 8002d06:	f000 fcd7 	bl	80036b8 <I2C_WaitOnBTFFlagUntilTimeout>
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d00d      	beq.n	8002d2c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d14:	2b04      	cmp	r3, #4
 8002d16:	d107      	bne.n	8002d28 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	681a      	ldr	r2, [r3, #0]
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d26:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002d28:	2301      	movs	r3, #1
 8002d2a:	e01a      	b.n	8002d62 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d194      	bne.n	8002c5e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	681a      	ldr	r2, [r3, #0]
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d42:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	2220      	movs	r2, #32
 8002d48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	2200      	movs	r2, #0
 8002d50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	2200      	movs	r2, #0
 8002d58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	e000      	b.n	8002d62 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002d60:	2302      	movs	r3, #2
  }
}
 8002d62:	4618      	mov	r0, r3
 8002d64:	3718      	adds	r7, #24
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bd80      	pop	{r7, pc}
 8002d6a:	bf00      	nop
 8002d6c:	00100002 	.word	0x00100002
 8002d70:	ffff0000 	.word	0xffff0000

08002d74 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b088      	sub	sp, #32
 8002d78:	af02      	add	r7, sp, #8
 8002d7a:	60f8      	str	r0, [r7, #12]
 8002d7c:	4608      	mov	r0, r1
 8002d7e:	4611      	mov	r1, r2
 8002d80:	461a      	mov	r2, r3
 8002d82:	4603      	mov	r3, r0
 8002d84:	817b      	strh	r3, [r7, #10]
 8002d86:	460b      	mov	r3, r1
 8002d88:	813b      	strh	r3, [r7, #8]
 8002d8a:	4613      	mov	r3, r2
 8002d8c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002d8e:	f7ff fabb 	bl	8002308 <HAL_GetTick>
 8002d92:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002d9a:	b2db      	uxtb	r3, r3
 8002d9c:	2b20      	cmp	r3, #32
 8002d9e:	f040 80d9 	bne.w	8002f54 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002da2:	697b      	ldr	r3, [r7, #20]
 8002da4:	9300      	str	r3, [sp, #0]
 8002da6:	2319      	movs	r3, #25
 8002da8:	2201      	movs	r2, #1
 8002daa:	496d      	ldr	r1, [pc, #436]	@ (8002f60 <HAL_I2C_Mem_Write+0x1ec>)
 8002dac:	68f8      	ldr	r0, [r7, #12]
 8002dae:	f000 fb21 	bl	80033f4 <I2C_WaitOnFlagUntilTimeout>
 8002db2:	4603      	mov	r3, r0
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d001      	beq.n	8002dbc <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002db8:	2302      	movs	r3, #2
 8002dba:	e0cc      	b.n	8002f56 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002dc2:	2b01      	cmp	r3, #1
 8002dc4:	d101      	bne.n	8002dca <HAL_I2C_Mem_Write+0x56>
 8002dc6:	2302      	movs	r3, #2
 8002dc8:	e0c5      	b.n	8002f56 <HAL_I2C_Mem_Write+0x1e2>
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	2201      	movs	r2, #1
 8002dce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f003 0301 	and.w	r3, r3, #1
 8002ddc:	2b01      	cmp	r3, #1
 8002dde:	d007      	beq.n	8002df0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	681a      	ldr	r2, [r3, #0]
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f042 0201 	orr.w	r2, r2, #1
 8002dee:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	681a      	ldr	r2, [r3, #0]
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002dfe:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	2221      	movs	r2, #33	@ 0x21
 8002e04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	2240      	movs	r2, #64	@ 0x40
 8002e0c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	2200      	movs	r2, #0
 8002e14:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	6a3a      	ldr	r2, [r7, #32]
 8002e1a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002e20:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e26:	b29a      	uxth	r2, r3
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	4a4d      	ldr	r2, [pc, #308]	@ (8002f64 <HAL_I2C_Mem_Write+0x1f0>)
 8002e30:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002e32:	88f8      	ldrh	r0, [r7, #6]
 8002e34:	893a      	ldrh	r2, [r7, #8]
 8002e36:	8979      	ldrh	r1, [r7, #10]
 8002e38:	697b      	ldr	r3, [r7, #20]
 8002e3a:	9301      	str	r3, [sp, #4]
 8002e3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e3e:	9300      	str	r3, [sp, #0]
 8002e40:	4603      	mov	r3, r0
 8002e42:	68f8      	ldr	r0, [r7, #12]
 8002e44:	f000 fa40 	bl	80032c8 <I2C_RequestMemoryWrite>
 8002e48:	4603      	mov	r3, r0
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d052      	beq.n	8002ef4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002e4e:	2301      	movs	r3, #1
 8002e50:	e081      	b.n	8002f56 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e52:	697a      	ldr	r2, [r7, #20]
 8002e54:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002e56:	68f8      	ldr	r0, [r7, #12]
 8002e58:	f000 fbe6 	bl	8003628 <I2C_WaitOnTXEFlagUntilTimeout>
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d00d      	beq.n	8002e7e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e66:	2b04      	cmp	r3, #4
 8002e68:	d107      	bne.n	8002e7a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	681a      	ldr	r2, [r3, #0]
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e78:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	e06b      	b.n	8002f56 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e82:	781a      	ldrb	r2, [r3, #0]
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e8e:	1c5a      	adds	r2, r3, #1
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e98:	3b01      	subs	r3, #1
 8002e9a:	b29a      	uxth	r2, r3
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ea4:	b29b      	uxth	r3, r3
 8002ea6:	3b01      	subs	r3, #1
 8002ea8:	b29a      	uxth	r2, r3
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	695b      	ldr	r3, [r3, #20]
 8002eb4:	f003 0304 	and.w	r3, r3, #4
 8002eb8:	2b04      	cmp	r3, #4
 8002eba:	d11b      	bne.n	8002ef4 <HAL_I2C_Mem_Write+0x180>
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d017      	beq.n	8002ef4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ec8:	781a      	ldrb	r2, [r3, #0]
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ed4:	1c5a      	adds	r2, r3, #1
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ede:	3b01      	subs	r3, #1
 8002ee0:	b29a      	uxth	r2, r3
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002eea:	b29b      	uxth	r3, r3
 8002eec:	3b01      	subs	r3, #1
 8002eee:	b29a      	uxth	r2, r3
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d1aa      	bne.n	8002e52 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002efc:	697a      	ldr	r2, [r7, #20]
 8002efe:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002f00:	68f8      	ldr	r0, [r7, #12]
 8002f02:	f000 fbd9 	bl	80036b8 <I2C_WaitOnBTFFlagUntilTimeout>
 8002f06:	4603      	mov	r3, r0
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d00d      	beq.n	8002f28 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f10:	2b04      	cmp	r3, #4
 8002f12:	d107      	bne.n	8002f24 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	681a      	ldr	r2, [r3, #0]
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f22:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002f24:	2301      	movs	r3, #1
 8002f26:	e016      	b.n	8002f56 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	681a      	ldr	r2, [r3, #0]
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f36:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	2220      	movs	r2, #32
 8002f3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	2200      	movs	r2, #0
 8002f44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002f50:	2300      	movs	r3, #0
 8002f52:	e000      	b.n	8002f56 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002f54:	2302      	movs	r3, #2
  }
}
 8002f56:	4618      	mov	r0, r3
 8002f58:	3718      	adds	r7, #24
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bd80      	pop	{r7, pc}
 8002f5e:	bf00      	nop
 8002f60:	00100002 	.word	0x00100002
 8002f64:	ffff0000 	.word	0xffff0000

08002f68 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b08a      	sub	sp, #40	@ 0x28
 8002f6c:	af02      	add	r7, sp, #8
 8002f6e:	60f8      	str	r0, [r7, #12]
 8002f70:	607a      	str	r2, [r7, #4]
 8002f72:	603b      	str	r3, [r7, #0]
 8002f74:	460b      	mov	r3, r1
 8002f76:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002f78:	f7ff f9c6 	bl	8002308 <HAL_GetTick>
 8002f7c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8002f7e:	2300      	movs	r3, #0
 8002f80:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f88:	b2db      	uxtb	r3, r3
 8002f8a:	2b20      	cmp	r3, #32
 8002f8c:	f040 8111 	bne.w	80031b2 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002f90:	69fb      	ldr	r3, [r7, #28]
 8002f92:	9300      	str	r3, [sp, #0]
 8002f94:	2319      	movs	r3, #25
 8002f96:	2201      	movs	r2, #1
 8002f98:	4988      	ldr	r1, [pc, #544]	@ (80031bc <HAL_I2C_IsDeviceReady+0x254>)
 8002f9a:	68f8      	ldr	r0, [r7, #12]
 8002f9c:	f000 fa2a 	bl	80033f4 <I2C_WaitOnFlagUntilTimeout>
 8002fa0:	4603      	mov	r3, r0
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d001      	beq.n	8002faa <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002fa6:	2302      	movs	r3, #2
 8002fa8:	e104      	b.n	80031b4 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002fb0:	2b01      	cmp	r3, #1
 8002fb2:	d101      	bne.n	8002fb8 <HAL_I2C_IsDeviceReady+0x50>
 8002fb4:	2302      	movs	r3, #2
 8002fb6:	e0fd      	b.n	80031b4 <HAL_I2C_IsDeviceReady+0x24c>
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	2201      	movs	r2, #1
 8002fbc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f003 0301 	and.w	r3, r3, #1
 8002fca:	2b01      	cmp	r3, #1
 8002fcc:	d007      	beq.n	8002fde <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	681a      	ldr	r2, [r3, #0]
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f042 0201 	orr.w	r2, r2, #1
 8002fdc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	681a      	ldr	r2, [r3, #0]
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002fec:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	2224      	movs	r2, #36	@ 0x24
 8002ff2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	4a70      	ldr	r2, [pc, #448]	@ (80031c0 <HAL_I2C_IsDeviceReady+0x258>)
 8003000:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	681a      	ldr	r2, [r3, #0]
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003010:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8003012:	69fb      	ldr	r3, [r7, #28]
 8003014:	9300      	str	r3, [sp, #0]
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	2200      	movs	r2, #0
 800301a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800301e:	68f8      	ldr	r0, [r7, #12]
 8003020:	f000 f9e8 	bl	80033f4 <I2C_WaitOnFlagUntilTimeout>
 8003024:	4603      	mov	r3, r0
 8003026:	2b00      	cmp	r3, #0
 8003028:	d00d      	beq.n	8003046 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003034:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003038:	d103      	bne.n	8003042 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003040:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8003042:	2303      	movs	r3, #3
 8003044:	e0b6      	b.n	80031b4 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003046:	897b      	ldrh	r3, [r7, #10]
 8003048:	b2db      	uxtb	r3, r3
 800304a:	461a      	mov	r2, r3
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003054:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8003056:	f7ff f957 	bl	8002308 <HAL_GetTick>
 800305a:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	695b      	ldr	r3, [r3, #20]
 8003062:	f003 0302 	and.w	r3, r3, #2
 8003066:	2b02      	cmp	r3, #2
 8003068:	bf0c      	ite	eq
 800306a:	2301      	moveq	r3, #1
 800306c:	2300      	movne	r3, #0
 800306e:	b2db      	uxtb	r3, r3
 8003070:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	695b      	ldr	r3, [r3, #20]
 8003078:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800307c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003080:	bf0c      	ite	eq
 8003082:	2301      	moveq	r3, #1
 8003084:	2300      	movne	r3, #0
 8003086:	b2db      	uxtb	r3, r3
 8003088:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800308a:	e025      	b.n	80030d8 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800308c:	f7ff f93c 	bl	8002308 <HAL_GetTick>
 8003090:	4602      	mov	r2, r0
 8003092:	69fb      	ldr	r3, [r7, #28]
 8003094:	1ad3      	subs	r3, r2, r3
 8003096:	683a      	ldr	r2, [r7, #0]
 8003098:	429a      	cmp	r2, r3
 800309a:	d302      	bcc.n	80030a2 <HAL_I2C_IsDeviceReady+0x13a>
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d103      	bne.n	80030aa <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	22a0      	movs	r2, #160	@ 0xa0
 80030a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	695b      	ldr	r3, [r3, #20]
 80030b0:	f003 0302 	and.w	r3, r3, #2
 80030b4:	2b02      	cmp	r3, #2
 80030b6:	bf0c      	ite	eq
 80030b8:	2301      	moveq	r3, #1
 80030ba:	2300      	movne	r3, #0
 80030bc:	b2db      	uxtb	r3, r3
 80030be:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	695b      	ldr	r3, [r3, #20]
 80030c6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80030ca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80030ce:	bf0c      	ite	eq
 80030d0:	2301      	moveq	r3, #1
 80030d2:	2300      	movne	r3, #0
 80030d4:	b2db      	uxtb	r3, r3
 80030d6:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80030de:	b2db      	uxtb	r3, r3
 80030e0:	2ba0      	cmp	r3, #160	@ 0xa0
 80030e2:	d005      	beq.n	80030f0 <HAL_I2C_IsDeviceReady+0x188>
 80030e4:	7dfb      	ldrb	r3, [r7, #23]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d102      	bne.n	80030f0 <HAL_I2C_IsDeviceReady+0x188>
 80030ea:	7dbb      	ldrb	r3, [r7, #22]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d0cd      	beq.n	800308c <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	2220      	movs	r2, #32
 80030f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	695b      	ldr	r3, [r3, #20]
 80030fe:	f003 0302 	and.w	r3, r3, #2
 8003102:	2b02      	cmp	r3, #2
 8003104:	d129      	bne.n	800315a <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	681a      	ldr	r2, [r3, #0]
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003114:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003116:	2300      	movs	r3, #0
 8003118:	613b      	str	r3, [r7, #16]
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	695b      	ldr	r3, [r3, #20]
 8003120:	613b      	str	r3, [r7, #16]
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	699b      	ldr	r3, [r3, #24]
 8003128:	613b      	str	r3, [r7, #16]
 800312a:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800312c:	69fb      	ldr	r3, [r7, #28]
 800312e:	9300      	str	r3, [sp, #0]
 8003130:	2319      	movs	r3, #25
 8003132:	2201      	movs	r2, #1
 8003134:	4921      	ldr	r1, [pc, #132]	@ (80031bc <HAL_I2C_IsDeviceReady+0x254>)
 8003136:	68f8      	ldr	r0, [r7, #12]
 8003138:	f000 f95c 	bl	80033f4 <I2C_WaitOnFlagUntilTimeout>
 800313c:	4603      	mov	r3, r0
 800313e:	2b00      	cmp	r3, #0
 8003140:	d001      	beq.n	8003146 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8003142:	2301      	movs	r3, #1
 8003144:	e036      	b.n	80031b4 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	2220      	movs	r2, #32
 800314a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	2200      	movs	r2, #0
 8003152:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8003156:	2300      	movs	r3, #0
 8003158:	e02c      	b.n	80031b4 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	681a      	ldr	r2, [r3, #0]
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003168:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003172:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003174:	69fb      	ldr	r3, [r7, #28]
 8003176:	9300      	str	r3, [sp, #0]
 8003178:	2319      	movs	r3, #25
 800317a:	2201      	movs	r2, #1
 800317c:	490f      	ldr	r1, [pc, #60]	@ (80031bc <HAL_I2C_IsDeviceReady+0x254>)
 800317e:	68f8      	ldr	r0, [r7, #12]
 8003180:	f000 f938 	bl	80033f4 <I2C_WaitOnFlagUntilTimeout>
 8003184:	4603      	mov	r3, r0
 8003186:	2b00      	cmp	r3, #0
 8003188:	d001      	beq.n	800318e <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800318a:	2301      	movs	r3, #1
 800318c:	e012      	b.n	80031b4 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800318e:	69bb      	ldr	r3, [r7, #24]
 8003190:	3301      	adds	r3, #1
 8003192:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8003194:	69ba      	ldr	r2, [r7, #24]
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	429a      	cmp	r2, r3
 800319a:	f4ff af32 	bcc.w	8003002 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	2220      	movs	r2, #32
 80031a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	2200      	movs	r2, #0
 80031aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80031ae:	2301      	movs	r3, #1
 80031b0:	e000      	b.n	80031b4 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80031b2:	2302      	movs	r3, #2
  }
}
 80031b4:	4618      	mov	r0, r3
 80031b6:	3720      	adds	r7, #32
 80031b8:	46bd      	mov	sp, r7
 80031ba:	bd80      	pop	{r7, pc}
 80031bc:	00100002 	.word	0x00100002
 80031c0:	ffff0000 	.word	0xffff0000

080031c4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b088      	sub	sp, #32
 80031c8:	af02      	add	r7, sp, #8
 80031ca:	60f8      	str	r0, [r7, #12]
 80031cc:	607a      	str	r2, [r7, #4]
 80031ce:	603b      	str	r3, [r7, #0]
 80031d0:	460b      	mov	r3, r1
 80031d2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031d8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80031da:	697b      	ldr	r3, [r7, #20]
 80031dc:	2b08      	cmp	r3, #8
 80031de:	d006      	beq.n	80031ee <I2C_MasterRequestWrite+0x2a>
 80031e0:	697b      	ldr	r3, [r7, #20]
 80031e2:	2b01      	cmp	r3, #1
 80031e4:	d003      	beq.n	80031ee <I2C_MasterRequestWrite+0x2a>
 80031e6:	697b      	ldr	r3, [r7, #20]
 80031e8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80031ec:	d108      	bne.n	8003200 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	681a      	ldr	r2, [r3, #0]
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80031fc:	601a      	str	r2, [r3, #0]
 80031fe:	e00b      	b.n	8003218 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003204:	2b12      	cmp	r3, #18
 8003206:	d107      	bne.n	8003218 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	681a      	ldr	r2, [r3, #0]
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003216:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	9300      	str	r3, [sp, #0]
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2200      	movs	r2, #0
 8003220:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003224:	68f8      	ldr	r0, [r7, #12]
 8003226:	f000 f8e5 	bl	80033f4 <I2C_WaitOnFlagUntilTimeout>
 800322a:	4603      	mov	r3, r0
 800322c:	2b00      	cmp	r3, #0
 800322e:	d00d      	beq.n	800324c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800323a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800323e:	d103      	bne.n	8003248 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003246:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003248:	2303      	movs	r3, #3
 800324a:	e035      	b.n	80032b8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	691b      	ldr	r3, [r3, #16]
 8003250:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003254:	d108      	bne.n	8003268 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003256:	897b      	ldrh	r3, [r7, #10]
 8003258:	b2db      	uxtb	r3, r3
 800325a:	461a      	mov	r2, r3
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003264:	611a      	str	r2, [r3, #16]
 8003266:	e01b      	b.n	80032a0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003268:	897b      	ldrh	r3, [r7, #10]
 800326a:	11db      	asrs	r3, r3, #7
 800326c:	b2db      	uxtb	r3, r3
 800326e:	f003 0306 	and.w	r3, r3, #6
 8003272:	b2db      	uxtb	r3, r3
 8003274:	f063 030f 	orn	r3, r3, #15
 8003278:	b2da      	uxtb	r2, r3
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	687a      	ldr	r2, [r7, #4]
 8003284:	490e      	ldr	r1, [pc, #56]	@ (80032c0 <I2C_MasterRequestWrite+0xfc>)
 8003286:	68f8      	ldr	r0, [r7, #12]
 8003288:	f000 f92e 	bl	80034e8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800328c:	4603      	mov	r3, r0
 800328e:	2b00      	cmp	r3, #0
 8003290:	d001      	beq.n	8003296 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003292:	2301      	movs	r3, #1
 8003294:	e010      	b.n	80032b8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003296:	897b      	ldrh	r3, [r7, #10]
 8003298:	b2da      	uxtb	r2, r3
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	687a      	ldr	r2, [r7, #4]
 80032a4:	4907      	ldr	r1, [pc, #28]	@ (80032c4 <I2C_MasterRequestWrite+0x100>)
 80032a6:	68f8      	ldr	r0, [r7, #12]
 80032a8:	f000 f91e 	bl	80034e8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80032ac:	4603      	mov	r3, r0
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d001      	beq.n	80032b6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80032b2:	2301      	movs	r3, #1
 80032b4:	e000      	b.n	80032b8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80032b6:	2300      	movs	r3, #0
}
 80032b8:	4618      	mov	r0, r3
 80032ba:	3718      	adds	r7, #24
 80032bc:	46bd      	mov	sp, r7
 80032be:	bd80      	pop	{r7, pc}
 80032c0:	00010008 	.word	0x00010008
 80032c4:	00010002 	.word	0x00010002

080032c8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b088      	sub	sp, #32
 80032cc:	af02      	add	r7, sp, #8
 80032ce:	60f8      	str	r0, [r7, #12]
 80032d0:	4608      	mov	r0, r1
 80032d2:	4611      	mov	r1, r2
 80032d4:	461a      	mov	r2, r3
 80032d6:	4603      	mov	r3, r0
 80032d8:	817b      	strh	r3, [r7, #10]
 80032da:	460b      	mov	r3, r1
 80032dc:	813b      	strh	r3, [r7, #8]
 80032de:	4613      	mov	r3, r2
 80032e0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	681a      	ldr	r2, [r3, #0]
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80032f0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80032f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032f4:	9300      	str	r3, [sp, #0]
 80032f6:	6a3b      	ldr	r3, [r7, #32]
 80032f8:	2200      	movs	r2, #0
 80032fa:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80032fe:	68f8      	ldr	r0, [r7, #12]
 8003300:	f000 f878 	bl	80033f4 <I2C_WaitOnFlagUntilTimeout>
 8003304:	4603      	mov	r3, r0
 8003306:	2b00      	cmp	r3, #0
 8003308:	d00d      	beq.n	8003326 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003314:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003318:	d103      	bne.n	8003322 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003320:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003322:	2303      	movs	r3, #3
 8003324:	e05f      	b.n	80033e6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003326:	897b      	ldrh	r3, [r7, #10]
 8003328:	b2db      	uxtb	r3, r3
 800332a:	461a      	mov	r2, r3
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003334:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003336:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003338:	6a3a      	ldr	r2, [r7, #32]
 800333a:	492d      	ldr	r1, [pc, #180]	@ (80033f0 <I2C_RequestMemoryWrite+0x128>)
 800333c:	68f8      	ldr	r0, [r7, #12]
 800333e:	f000 f8d3 	bl	80034e8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003342:	4603      	mov	r3, r0
 8003344:	2b00      	cmp	r3, #0
 8003346:	d001      	beq.n	800334c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003348:	2301      	movs	r3, #1
 800334a:	e04c      	b.n	80033e6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800334c:	2300      	movs	r3, #0
 800334e:	617b      	str	r3, [r7, #20]
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	695b      	ldr	r3, [r3, #20]
 8003356:	617b      	str	r3, [r7, #20]
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	699b      	ldr	r3, [r3, #24]
 800335e:	617b      	str	r3, [r7, #20]
 8003360:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003362:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003364:	6a39      	ldr	r1, [r7, #32]
 8003366:	68f8      	ldr	r0, [r7, #12]
 8003368:	f000 f95e 	bl	8003628 <I2C_WaitOnTXEFlagUntilTimeout>
 800336c:	4603      	mov	r3, r0
 800336e:	2b00      	cmp	r3, #0
 8003370:	d00d      	beq.n	800338e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003376:	2b04      	cmp	r3, #4
 8003378:	d107      	bne.n	800338a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	681a      	ldr	r2, [r3, #0]
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003388:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800338a:	2301      	movs	r3, #1
 800338c:	e02b      	b.n	80033e6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800338e:	88fb      	ldrh	r3, [r7, #6]
 8003390:	2b01      	cmp	r3, #1
 8003392:	d105      	bne.n	80033a0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003394:	893b      	ldrh	r3, [r7, #8]
 8003396:	b2da      	uxtb	r2, r3
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	611a      	str	r2, [r3, #16]
 800339e:	e021      	b.n	80033e4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80033a0:	893b      	ldrh	r3, [r7, #8]
 80033a2:	0a1b      	lsrs	r3, r3, #8
 80033a4:	b29b      	uxth	r3, r3
 80033a6:	b2da      	uxtb	r2, r3
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80033ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80033b0:	6a39      	ldr	r1, [r7, #32]
 80033b2:	68f8      	ldr	r0, [r7, #12]
 80033b4:	f000 f938 	bl	8003628 <I2C_WaitOnTXEFlagUntilTimeout>
 80033b8:	4603      	mov	r3, r0
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d00d      	beq.n	80033da <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033c2:	2b04      	cmp	r3, #4
 80033c4:	d107      	bne.n	80033d6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	681a      	ldr	r2, [r3, #0]
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80033d4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80033d6:	2301      	movs	r3, #1
 80033d8:	e005      	b.n	80033e6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80033da:	893b      	ldrh	r3, [r7, #8]
 80033dc:	b2da      	uxtb	r2, r3
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80033e4:	2300      	movs	r3, #0
}
 80033e6:	4618      	mov	r0, r3
 80033e8:	3718      	adds	r7, #24
 80033ea:	46bd      	mov	sp, r7
 80033ec:	bd80      	pop	{r7, pc}
 80033ee:	bf00      	nop
 80033f0:	00010002 	.word	0x00010002

080033f4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b084      	sub	sp, #16
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	60f8      	str	r0, [r7, #12]
 80033fc:	60b9      	str	r1, [r7, #8]
 80033fe:	603b      	str	r3, [r7, #0]
 8003400:	4613      	mov	r3, r2
 8003402:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003404:	e048      	b.n	8003498 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	f1b3 3fff 	cmp.w	r3, #4294967295
 800340c:	d044      	beq.n	8003498 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800340e:	f7fe ff7b 	bl	8002308 <HAL_GetTick>
 8003412:	4602      	mov	r2, r0
 8003414:	69bb      	ldr	r3, [r7, #24]
 8003416:	1ad3      	subs	r3, r2, r3
 8003418:	683a      	ldr	r2, [r7, #0]
 800341a:	429a      	cmp	r2, r3
 800341c:	d302      	bcc.n	8003424 <I2C_WaitOnFlagUntilTimeout+0x30>
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	2b00      	cmp	r3, #0
 8003422:	d139      	bne.n	8003498 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003424:	68bb      	ldr	r3, [r7, #8]
 8003426:	0c1b      	lsrs	r3, r3, #16
 8003428:	b2db      	uxtb	r3, r3
 800342a:	2b01      	cmp	r3, #1
 800342c:	d10d      	bne.n	800344a <I2C_WaitOnFlagUntilTimeout+0x56>
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	695b      	ldr	r3, [r3, #20]
 8003434:	43da      	mvns	r2, r3
 8003436:	68bb      	ldr	r3, [r7, #8]
 8003438:	4013      	ands	r3, r2
 800343a:	b29b      	uxth	r3, r3
 800343c:	2b00      	cmp	r3, #0
 800343e:	bf0c      	ite	eq
 8003440:	2301      	moveq	r3, #1
 8003442:	2300      	movne	r3, #0
 8003444:	b2db      	uxtb	r3, r3
 8003446:	461a      	mov	r2, r3
 8003448:	e00c      	b.n	8003464 <I2C_WaitOnFlagUntilTimeout+0x70>
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	699b      	ldr	r3, [r3, #24]
 8003450:	43da      	mvns	r2, r3
 8003452:	68bb      	ldr	r3, [r7, #8]
 8003454:	4013      	ands	r3, r2
 8003456:	b29b      	uxth	r3, r3
 8003458:	2b00      	cmp	r3, #0
 800345a:	bf0c      	ite	eq
 800345c:	2301      	moveq	r3, #1
 800345e:	2300      	movne	r3, #0
 8003460:	b2db      	uxtb	r3, r3
 8003462:	461a      	mov	r2, r3
 8003464:	79fb      	ldrb	r3, [r7, #7]
 8003466:	429a      	cmp	r2, r3
 8003468:	d116      	bne.n	8003498 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	2200      	movs	r2, #0
 800346e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	2220      	movs	r2, #32
 8003474:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	2200      	movs	r2, #0
 800347c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003484:	f043 0220 	orr.w	r2, r3, #32
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	2200      	movs	r2, #0
 8003490:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003494:	2301      	movs	r3, #1
 8003496:	e023      	b.n	80034e0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003498:	68bb      	ldr	r3, [r7, #8]
 800349a:	0c1b      	lsrs	r3, r3, #16
 800349c:	b2db      	uxtb	r3, r3
 800349e:	2b01      	cmp	r3, #1
 80034a0:	d10d      	bne.n	80034be <I2C_WaitOnFlagUntilTimeout+0xca>
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	695b      	ldr	r3, [r3, #20]
 80034a8:	43da      	mvns	r2, r3
 80034aa:	68bb      	ldr	r3, [r7, #8]
 80034ac:	4013      	ands	r3, r2
 80034ae:	b29b      	uxth	r3, r3
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	bf0c      	ite	eq
 80034b4:	2301      	moveq	r3, #1
 80034b6:	2300      	movne	r3, #0
 80034b8:	b2db      	uxtb	r3, r3
 80034ba:	461a      	mov	r2, r3
 80034bc:	e00c      	b.n	80034d8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	699b      	ldr	r3, [r3, #24]
 80034c4:	43da      	mvns	r2, r3
 80034c6:	68bb      	ldr	r3, [r7, #8]
 80034c8:	4013      	ands	r3, r2
 80034ca:	b29b      	uxth	r3, r3
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	bf0c      	ite	eq
 80034d0:	2301      	moveq	r3, #1
 80034d2:	2300      	movne	r3, #0
 80034d4:	b2db      	uxtb	r3, r3
 80034d6:	461a      	mov	r2, r3
 80034d8:	79fb      	ldrb	r3, [r7, #7]
 80034da:	429a      	cmp	r2, r3
 80034dc:	d093      	beq.n	8003406 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80034de:	2300      	movs	r3, #0
}
 80034e0:	4618      	mov	r0, r3
 80034e2:	3710      	adds	r7, #16
 80034e4:	46bd      	mov	sp, r7
 80034e6:	bd80      	pop	{r7, pc}

080034e8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b084      	sub	sp, #16
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	60f8      	str	r0, [r7, #12]
 80034f0:	60b9      	str	r1, [r7, #8]
 80034f2:	607a      	str	r2, [r7, #4]
 80034f4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80034f6:	e071      	b.n	80035dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	695b      	ldr	r3, [r3, #20]
 80034fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003502:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003506:	d123      	bne.n	8003550 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	681a      	ldr	r2, [r3, #0]
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003516:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003520:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	2200      	movs	r2, #0
 8003526:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	2220      	movs	r2, #32
 800352c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	2200      	movs	r2, #0
 8003534:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800353c:	f043 0204 	orr.w	r2, r3, #4
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	2200      	movs	r2, #0
 8003548:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800354c:	2301      	movs	r3, #1
 800354e:	e067      	b.n	8003620 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003556:	d041      	beq.n	80035dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003558:	f7fe fed6 	bl	8002308 <HAL_GetTick>
 800355c:	4602      	mov	r2, r0
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	1ad3      	subs	r3, r2, r3
 8003562:	687a      	ldr	r2, [r7, #4]
 8003564:	429a      	cmp	r2, r3
 8003566:	d302      	bcc.n	800356e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2b00      	cmp	r3, #0
 800356c:	d136      	bne.n	80035dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800356e:	68bb      	ldr	r3, [r7, #8]
 8003570:	0c1b      	lsrs	r3, r3, #16
 8003572:	b2db      	uxtb	r3, r3
 8003574:	2b01      	cmp	r3, #1
 8003576:	d10c      	bne.n	8003592 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	695b      	ldr	r3, [r3, #20]
 800357e:	43da      	mvns	r2, r3
 8003580:	68bb      	ldr	r3, [r7, #8]
 8003582:	4013      	ands	r3, r2
 8003584:	b29b      	uxth	r3, r3
 8003586:	2b00      	cmp	r3, #0
 8003588:	bf14      	ite	ne
 800358a:	2301      	movne	r3, #1
 800358c:	2300      	moveq	r3, #0
 800358e:	b2db      	uxtb	r3, r3
 8003590:	e00b      	b.n	80035aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	699b      	ldr	r3, [r3, #24]
 8003598:	43da      	mvns	r2, r3
 800359a:	68bb      	ldr	r3, [r7, #8]
 800359c:	4013      	ands	r3, r2
 800359e:	b29b      	uxth	r3, r3
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	bf14      	ite	ne
 80035a4:	2301      	movne	r3, #1
 80035a6:	2300      	moveq	r3, #0
 80035a8:	b2db      	uxtb	r3, r3
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d016      	beq.n	80035dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	2200      	movs	r2, #0
 80035b2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	2220      	movs	r2, #32
 80035b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	2200      	movs	r2, #0
 80035c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035c8:	f043 0220 	orr.w	r2, r3, #32
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	2200      	movs	r2, #0
 80035d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80035d8:	2301      	movs	r3, #1
 80035da:	e021      	b.n	8003620 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80035dc:	68bb      	ldr	r3, [r7, #8]
 80035de:	0c1b      	lsrs	r3, r3, #16
 80035e0:	b2db      	uxtb	r3, r3
 80035e2:	2b01      	cmp	r3, #1
 80035e4:	d10c      	bne.n	8003600 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	695b      	ldr	r3, [r3, #20]
 80035ec:	43da      	mvns	r2, r3
 80035ee:	68bb      	ldr	r3, [r7, #8]
 80035f0:	4013      	ands	r3, r2
 80035f2:	b29b      	uxth	r3, r3
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	bf14      	ite	ne
 80035f8:	2301      	movne	r3, #1
 80035fa:	2300      	moveq	r3, #0
 80035fc:	b2db      	uxtb	r3, r3
 80035fe:	e00b      	b.n	8003618 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	699b      	ldr	r3, [r3, #24]
 8003606:	43da      	mvns	r2, r3
 8003608:	68bb      	ldr	r3, [r7, #8]
 800360a:	4013      	ands	r3, r2
 800360c:	b29b      	uxth	r3, r3
 800360e:	2b00      	cmp	r3, #0
 8003610:	bf14      	ite	ne
 8003612:	2301      	movne	r3, #1
 8003614:	2300      	moveq	r3, #0
 8003616:	b2db      	uxtb	r3, r3
 8003618:	2b00      	cmp	r3, #0
 800361a:	f47f af6d 	bne.w	80034f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800361e:	2300      	movs	r3, #0
}
 8003620:	4618      	mov	r0, r3
 8003622:	3710      	adds	r7, #16
 8003624:	46bd      	mov	sp, r7
 8003626:	bd80      	pop	{r7, pc}

08003628 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b084      	sub	sp, #16
 800362c:	af00      	add	r7, sp, #0
 800362e:	60f8      	str	r0, [r7, #12]
 8003630:	60b9      	str	r1, [r7, #8]
 8003632:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003634:	e034      	b.n	80036a0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003636:	68f8      	ldr	r0, [r7, #12]
 8003638:	f000 f886 	bl	8003748 <I2C_IsAcknowledgeFailed>
 800363c:	4603      	mov	r3, r0
 800363e:	2b00      	cmp	r3, #0
 8003640:	d001      	beq.n	8003646 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003642:	2301      	movs	r3, #1
 8003644:	e034      	b.n	80036b0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003646:	68bb      	ldr	r3, [r7, #8]
 8003648:	f1b3 3fff 	cmp.w	r3, #4294967295
 800364c:	d028      	beq.n	80036a0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800364e:	f7fe fe5b 	bl	8002308 <HAL_GetTick>
 8003652:	4602      	mov	r2, r0
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	1ad3      	subs	r3, r2, r3
 8003658:	68ba      	ldr	r2, [r7, #8]
 800365a:	429a      	cmp	r2, r3
 800365c:	d302      	bcc.n	8003664 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800365e:	68bb      	ldr	r3, [r7, #8]
 8003660:	2b00      	cmp	r3, #0
 8003662:	d11d      	bne.n	80036a0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	695b      	ldr	r3, [r3, #20]
 800366a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800366e:	2b80      	cmp	r3, #128	@ 0x80
 8003670:	d016      	beq.n	80036a0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	2200      	movs	r2, #0
 8003676:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	2220      	movs	r2, #32
 800367c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	2200      	movs	r2, #0
 8003684:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800368c:	f043 0220 	orr.w	r2, r3, #32
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	2200      	movs	r2, #0
 8003698:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800369c:	2301      	movs	r3, #1
 800369e:	e007      	b.n	80036b0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	695b      	ldr	r3, [r3, #20]
 80036a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80036aa:	2b80      	cmp	r3, #128	@ 0x80
 80036ac:	d1c3      	bne.n	8003636 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80036ae:	2300      	movs	r3, #0
}
 80036b0:	4618      	mov	r0, r3
 80036b2:	3710      	adds	r7, #16
 80036b4:	46bd      	mov	sp, r7
 80036b6:	bd80      	pop	{r7, pc}

080036b8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b084      	sub	sp, #16
 80036bc:	af00      	add	r7, sp, #0
 80036be:	60f8      	str	r0, [r7, #12]
 80036c0:	60b9      	str	r1, [r7, #8]
 80036c2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80036c4:	e034      	b.n	8003730 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80036c6:	68f8      	ldr	r0, [r7, #12]
 80036c8:	f000 f83e 	bl	8003748 <I2C_IsAcknowledgeFailed>
 80036cc:	4603      	mov	r3, r0
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d001      	beq.n	80036d6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80036d2:	2301      	movs	r3, #1
 80036d4:	e034      	b.n	8003740 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036d6:	68bb      	ldr	r3, [r7, #8]
 80036d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036dc:	d028      	beq.n	8003730 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036de:	f7fe fe13 	bl	8002308 <HAL_GetTick>
 80036e2:	4602      	mov	r2, r0
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	1ad3      	subs	r3, r2, r3
 80036e8:	68ba      	ldr	r2, [r7, #8]
 80036ea:	429a      	cmp	r2, r3
 80036ec:	d302      	bcc.n	80036f4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80036ee:	68bb      	ldr	r3, [r7, #8]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d11d      	bne.n	8003730 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	695b      	ldr	r3, [r3, #20]
 80036fa:	f003 0304 	and.w	r3, r3, #4
 80036fe:	2b04      	cmp	r3, #4
 8003700:	d016      	beq.n	8003730 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	2200      	movs	r2, #0
 8003706:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	2220      	movs	r2, #32
 800370c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	2200      	movs	r2, #0
 8003714:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800371c:	f043 0220 	orr.w	r2, r3, #32
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	2200      	movs	r2, #0
 8003728:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800372c:	2301      	movs	r3, #1
 800372e:	e007      	b.n	8003740 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	695b      	ldr	r3, [r3, #20]
 8003736:	f003 0304 	and.w	r3, r3, #4
 800373a:	2b04      	cmp	r3, #4
 800373c:	d1c3      	bne.n	80036c6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800373e:	2300      	movs	r3, #0
}
 8003740:	4618      	mov	r0, r3
 8003742:	3710      	adds	r7, #16
 8003744:	46bd      	mov	sp, r7
 8003746:	bd80      	pop	{r7, pc}

08003748 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003748:	b480      	push	{r7}
 800374a:	b083      	sub	sp, #12
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	695b      	ldr	r3, [r3, #20]
 8003756:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800375a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800375e:	d11b      	bne.n	8003798 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003768:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2200      	movs	r2, #0
 800376e:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2220      	movs	r2, #32
 8003774:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2200      	movs	r2, #0
 800377c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003784:	f043 0204 	orr.w	r2, r3, #4
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2200      	movs	r2, #0
 8003790:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003794:	2301      	movs	r3, #1
 8003796:	e000      	b.n	800379a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003798:	2300      	movs	r3, #0
}
 800379a:	4618      	mov	r0, r3
 800379c:	370c      	adds	r7, #12
 800379e:	46bd      	mov	sp, r7
 80037a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a4:	4770      	bx	lr

080037a6 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80037a6:	b480      	push	{r7}
 80037a8:	b083      	sub	sp, #12
 80037aa:	af00      	add	r7, sp, #0
 80037ac:	6078      	str	r0, [r7, #4]
 80037ae:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80037b6:	b2db      	uxtb	r3, r3
 80037b8:	2b20      	cmp	r3, #32
 80037ba:	d129      	bne.n	8003810 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2224      	movs	r2, #36	@ 0x24
 80037c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	681a      	ldr	r2, [r3, #0]
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f022 0201 	bic.w	r2, r2, #1
 80037d2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f022 0210 	bic.w	r2, r2, #16
 80037e2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	683a      	ldr	r2, [r7, #0]
 80037f0:	430a      	orrs	r2, r1
 80037f2:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	681a      	ldr	r2, [r3, #0]
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f042 0201 	orr.w	r2, r2, #1
 8003802:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2220      	movs	r2, #32
 8003808:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 800380c:	2300      	movs	r3, #0
 800380e:	e000      	b.n	8003812 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8003810:	2302      	movs	r3, #2
  }
}
 8003812:	4618      	mov	r0, r3
 8003814:	370c      	adds	r7, #12
 8003816:	46bd      	mov	sp, r7
 8003818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381c:	4770      	bx	lr

0800381e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800381e:	b480      	push	{r7}
 8003820:	b085      	sub	sp, #20
 8003822:	af00      	add	r7, sp, #0
 8003824:	6078      	str	r0, [r7, #4]
 8003826:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8003828:	2300      	movs	r3, #0
 800382a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003832:	b2db      	uxtb	r3, r3
 8003834:	2b20      	cmp	r3, #32
 8003836:	d12a      	bne.n	800388e <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2224      	movs	r2, #36	@ 0x24
 800383c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	681a      	ldr	r2, [r3, #0]
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f022 0201 	bic.w	r2, r2, #1
 800384e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003856:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8003858:	89fb      	ldrh	r3, [r7, #14]
 800385a:	f023 030f 	bic.w	r3, r3, #15
 800385e:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	b29a      	uxth	r2, r3
 8003864:	89fb      	ldrh	r3, [r7, #14]
 8003866:	4313      	orrs	r3, r2
 8003868:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	89fa      	ldrh	r2, [r7, #14]
 8003870:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	681a      	ldr	r2, [r3, #0]
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f042 0201 	orr.w	r2, r2, #1
 8003880:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2220      	movs	r2, #32
 8003886:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 800388a:	2300      	movs	r3, #0
 800388c:	e000      	b.n	8003890 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 800388e:	2302      	movs	r3, #2
  }
}
 8003890:	4618      	mov	r0, r3
 8003892:	3714      	adds	r7, #20
 8003894:	46bd      	mov	sp, r7
 8003896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389a:	4770      	bx	lr

0800389c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	b082      	sub	sp, #8
 80038a0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80038a2:	2300      	movs	r3, #0
 80038a4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80038a6:	2300      	movs	r3, #0
 80038a8:	603b      	str	r3, [r7, #0]
 80038aa:	4b20      	ldr	r3, [pc, #128]	@ (800392c <HAL_PWREx_EnableOverDrive+0x90>)
 80038ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038ae:	4a1f      	ldr	r2, [pc, #124]	@ (800392c <HAL_PWREx_EnableOverDrive+0x90>)
 80038b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80038b4:	6413      	str	r3, [r2, #64]	@ 0x40
 80038b6:	4b1d      	ldr	r3, [pc, #116]	@ (800392c <HAL_PWREx_EnableOverDrive+0x90>)
 80038b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80038be:	603b      	str	r3, [r7, #0]
 80038c0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80038c2:	4b1b      	ldr	r3, [pc, #108]	@ (8003930 <HAL_PWREx_EnableOverDrive+0x94>)
 80038c4:	2201      	movs	r2, #1
 80038c6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80038c8:	f7fe fd1e 	bl	8002308 <HAL_GetTick>
 80038cc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80038ce:	e009      	b.n	80038e4 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80038d0:	f7fe fd1a 	bl	8002308 <HAL_GetTick>
 80038d4:	4602      	mov	r2, r0
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	1ad3      	subs	r3, r2, r3
 80038da:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80038de:	d901      	bls.n	80038e4 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80038e0:	2303      	movs	r3, #3
 80038e2:	e01f      	b.n	8003924 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80038e4:	4b13      	ldr	r3, [pc, #76]	@ (8003934 <HAL_PWREx_EnableOverDrive+0x98>)
 80038e6:	685b      	ldr	r3, [r3, #4]
 80038e8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80038ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80038f0:	d1ee      	bne.n	80038d0 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80038f2:	4b11      	ldr	r3, [pc, #68]	@ (8003938 <HAL_PWREx_EnableOverDrive+0x9c>)
 80038f4:	2201      	movs	r2, #1
 80038f6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80038f8:	f7fe fd06 	bl	8002308 <HAL_GetTick>
 80038fc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80038fe:	e009      	b.n	8003914 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003900:	f7fe fd02 	bl	8002308 <HAL_GetTick>
 8003904:	4602      	mov	r2, r0
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	1ad3      	subs	r3, r2, r3
 800390a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800390e:	d901      	bls.n	8003914 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8003910:	2303      	movs	r3, #3
 8003912:	e007      	b.n	8003924 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003914:	4b07      	ldr	r3, [pc, #28]	@ (8003934 <HAL_PWREx_EnableOverDrive+0x98>)
 8003916:	685b      	ldr	r3, [r3, #4]
 8003918:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800391c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003920:	d1ee      	bne.n	8003900 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8003922:	2300      	movs	r3, #0
}
 8003924:	4618      	mov	r0, r3
 8003926:	3708      	adds	r7, #8
 8003928:	46bd      	mov	sp, r7
 800392a:	bd80      	pop	{r7, pc}
 800392c:	40023800 	.word	0x40023800
 8003930:	420e0040 	.word	0x420e0040
 8003934:	40007000 	.word	0x40007000
 8003938:	420e0044 	.word	0x420e0044

0800393c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b086      	sub	sp, #24
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d101      	bne.n	800394e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800394a:	2301      	movs	r3, #1
 800394c:	e267      	b.n	8003e1e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f003 0301 	and.w	r3, r3, #1
 8003956:	2b00      	cmp	r3, #0
 8003958:	d075      	beq.n	8003a46 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800395a:	4b88      	ldr	r3, [pc, #544]	@ (8003b7c <HAL_RCC_OscConfig+0x240>)
 800395c:	689b      	ldr	r3, [r3, #8]
 800395e:	f003 030c 	and.w	r3, r3, #12
 8003962:	2b04      	cmp	r3, #4
 8003964:	d00c      	beq.n	8003980 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003966:	4b85      	ldr	r3, [pc, #532]	@ (8003b7c <HAL_RCC_OscConfig+0x240>)
 8003968:	689b      	ldr	r3, [r3, #8]
 800396a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800396e:	2b08      	cmp	r3, #8
 8003970:	d112      	bne.n	8003998 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003972:	4b82      	ldr	r3, [pc, #520]	@ (8003b7c <HAL_RCC_OscConfig+0x240>)
 8003974:	685b      	ldr	r3, [r3, #4]
 8003976:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800397a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800397e:	d10b      	bne.n	8003998 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003980:	4b7e      	ldr	r3, [pc, #504]	@ (8003b7c <HAL_RCC_OscConfig+0x240>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003988:	2b00      	cmp	r3, #0
 800398a:	d05b      	beq.n	8003a44 <HAL_RCC_OscConfig+0x108>
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	685b      	ldr	r3, [r3, #4]
 8003990:	2b00      	cmp	r3, #0
 8003992:	d157      	bne.n	8003a44 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003994:	2301      	movs	r3, #1
 8003996:	e242      	b.n	8003e1e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	685b      	ldr	r3, [r3, #4]
 800399c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80039a0:	d106      	bne.n	80039b0 <HAL_RCC_OscConfig+0x74>
 80039a2:	4b76      	ldr	r3, [pc, #472]	@ (8003b7c <HAL_RCC_OscConfig+0x240>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	4a75      	ldr	r2, [pc, #468]	@ (8003b7c <HAL_RCC_OscConfig+0x240>)
 80039a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80039ac:	6013      	str	r3, [r2, #0]
 80039ae:	e01d      	b.n	80039ec <HAL_RCC_OscConfig+0xb0>
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	685b      	ldr	r3, [r3, #4]
 80039b4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80039b8:	d10c      	bne.n	80039d4 <HAL_RCC_OscConfig+0x98>
 80039ba:	4b70      	ldr	r3, [pc, #448]	@ (8003b7c <HAL_RCC_OscConfig+0x240>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	4a6f      	ldr	r2, [pc, #444]	@ (8003b7c <HAL_RCC_OscConfig+0x240>)
 80039c0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80039c4:	6013      	str	r3, [r2, #0]
 80039c6:	4b6d      	ldr	r3, [pc, #436]	@ (8003b7c <HAL_RCC_OscConfig+0x240>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	4a6c      	ldr	r2, [pc, #432]	@ (8003b7c <HAL_RCC_OscConfig+0x240>)
 80039cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80039d0:	6013      	str	r3, [r2, #0]
 80039d2:	e00b      	b.n	80039ec <HAL_RCC_OscConfig+0xb0>
 80039d4:	4b69      	ldr	r3, [pc, #420]	@ (8003b7c <HAL_RCC_OscConfig+0x240>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4a68      	ldr	r2, [pc, #416]	@ (8003b7c <HAL_RCC_OscConfig+0x240>)
 80039da:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80039de:	6013      	str	r3, [r2, #0]
 80039e0:	4b66      	ldr	r3, [pc, #408]	@ (8003b7c <HAL_RCC_OscConfig+0x240>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4a65      	ldr	r2, [pc, #404]	@ (8003b7c <HAL_RCC_OscConfig+0x240>)
 80039e6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80039ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	685b      	ldr	r3, [r3, #4]
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d013      	beq.n	8003a1c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039f4:	f7fe fc88 	bl	8002308 <HAL_GetTick>
 80039f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039fa:	e008      	b.n	8003a0e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80039fc:	f7fe fc84 	bl	8002308 <HAL_GetTick>
 8003a00:	4602      	mov	r2, r0
 8003a02:	693b      	ldr	r3, [r7, #16]
 8003a04:	1ad3      	subs	r3, r2, r3
 8003a06:	2b64      	cmp	r3, #100	@ 0x64
 8003a08:	d901      	bls.n	8003a0e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003a0a:	2303      	movs	r3, #3
 8003a0c:	e207      	b.n	8003e1e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a0e:	4b5b      	ldr	r3, [pc, #364]	@ (8003b7c <HAL_RCC_OscConfig+0x240>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d0f0      	beq.n	80039fc <HAL_RCC_OscConfig+0xc0>
 8003a1a:	e014      	b.n	8003a46 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a1c:	f7fe fc74 	bl	8002308 <HAL_GetTick>
 8003a20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a22:	e008      	b.n	8003a36 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a24:	f7fe fc70 	bl	8002308 <HAL_GetTick>
 8003a28:	4602      	mov	r2, r0
 8003a2a:	693b      	ldr	r3, [r7, #16]
 8003a2c:	1ad3      	subs	r3, r2, r3
 8003a2e:	2b64      	cmp	r3, #100	@ 0x64
 8003a30:	d901      	bls.n	8003a36 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003a32:	2303      	movs	r3, #3
 8003a34:	e1f3      	b.n	8003e1e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a36:	4b51      	ldr	r3, [pc, #324]	@ (8003b7c <HAL_RCC_OscConfig+0x240>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d1f0      	bne.n	8003a24 <HAL_RCC_OscConfig+0xe8>
 8003a42:	e000      	b.n	8003a46 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a44:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f003 0302 	and.w	r3, r3, #2
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d063      	beq.n	8003b1a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003a52:	4b4a      	ldr	r3, [pc, #296]	@ (8003b7c <HAL_RCC_OscConfig+0x240>)
 8003a54:	689b      	ldr	r3, [r3, #8]
 8003a56:	f003 030c 	and.w	r3, r3, #12
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d00b      	beq.n	8003a76 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a5e:	4b47      	ldr	r3, [pc, #284]	@ (8003b7c <HAL_RCC_OscConfig+0x240>)
 8003a60:	689b      	ldr	r3, [r3, #8]
 8003a62:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003a66:	2b08      	cmp	r3, #8
 8003a68:	d11c      	bne.n	8003aa4 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a6a:	4b44      	ldr	r3, [pc, #272]	@ (8003b7c <HAL_RCC_OscConfig+0x240>)
 8003a6c:	685b      	ldr	r3, [r3, #4]
 8003a6e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d116      	bne.n	8003aa4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a76:	4b41      	ldr	r3, [pc, #260]	@ (8003b7c <HAL_RCC_OscConfig+0x240>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f003 0302 	and.w	r3, r3, #2
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d005      	beq.n	8003a8e <HAL_RCC_OscConfig+0x152>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	68db      	ldr	r3, [r3, #12]
 8003a86:	2b01      	cmp	r3, #1
 8003a88:	d001      	beq.n	8003a8e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	e1c7      	b.n	8003e1e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a8e:	4b3b      	ldr	r3, [pc, #236]	@ (8003b7c <HAL_RCC_OscConfig+0x240>)
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	691b      	ldr	r3, [r3, #16]
 8003a9a:	00db      	lsls	r3, r3, #3
 8003a9c:	4937      	ldr	r1, [pc, #220]	@ (8003b7c <HAL_RCC_OscConfig+0x240>)
 8003a9e:	4313      	orrs	r3, r2
 8003aa0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003aa2:	e03a      	b.n	8003b1a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	68db      	ldr	r3, [r3, #12]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d020      	beq.n	8003aee <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003aac:	4b34      	ldr	r3, [pc, #208]	@ (8003b80 <HAL_RCC_OscConfig+0x244>)
 8003aae:	2201      	movs	r2, #1
 8003ab0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ab2:	f7fe fc29 	bl	8002308 <HAL_GetTick>
 8003ab6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ab8:	e008      	b.n	8003acc <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003aba:	f7fe fc25 	bl	8002308 <HAL_GetTick>
 8003abe:	4602      	mov	r2, r0
 8003ac0:	693b      	ldr	r3, [r7, #16]
 8003ac2:	1ad3      	subs	r3, r2, r3
 8003ac4:	2b02      	cmp	r3, #2
 8003ac6:	d901      	bls.n	8003acc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003ac8:	2303      	movs	r3, #3
 8003aca:	e1a8      	b.n	8003e1e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003acc:	4b2b      	ldr	r3, [pc, #172]	@ (8003b7c <HAL_RCC_OscConfig+0x240>)
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f003 0302 	and.w	r3, r3, #2
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d0f0      	beq.n	8003aba <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ad8:	4b28      	ldr	r3, [pc, #160]	@ (8003b7c <HAL_RCC_OscConfig+0x240>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	691b      	ldr	r3, [r3, #16]
 8003ae4:	00db      	lsls	r3, r3, #3
 8003ae6:	4925      	ldr	r1, [pc, #148]	@ (8003b7c <HAL_RCC_OscConfig+0x240>)
 8003ae8:	4313      	orrs	r3, r2
 8003aea:	600b      	str	r3, [r1, #0]
 8003aec:	e015      	b.n	8003b1a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003aee:	4b24      	ldr	r3, [pc, #144]	@ (8003b80 <HAL_RCC_OscConfig+0x244>)
 8003af0:	2200      	movs	r2, #0
 8003af2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003af4:	f7fe fc08 	bl	8002308 <HAL_GetTick>
 8003af8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003afa:	e008      	b.n	8003b0e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003afc:	f7fe fc04 	bl	8002308 <HAL_GetTick>
 8003b00:	4602      	mov	r2, r0
 8003b02:	693b      	ldr	r3, [r7, #16]
 8003b04:	1ad3      	subs	r3, r2, r3
 8003b06:	2b02      	cmp	r3, #2
 8003b08:	d901      	bls.n	8003b0e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003b0a:	2303      	movs	r3, #3
 8003b0c:	e187      	b.n	8003e1e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b0e:	4b1b      	ldr	r3, [pc, #108]	@ (8003b7c <HAL_RCC_OscConfig+0x240>)
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f003 0302 	and.w	r3, r3, #2
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d1f0      	bne.n	8003afc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f003 0308 	and.w	r3, r3, #8
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d036      	beq.n	8003b94 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	695b      	ldr	r3, [r3, #20]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d016      	beq.n	8003b5c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b2e:	4b15      	ldr	r3, [pc, #84]	@ (8003b84 <HAL_RCC_OscConfig+0x248>)
 8003b30:	2201      	movs	r2, #1
 8003b32:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b34:	f7fe fbe8 	bl	8002308 <HAL_GetTick>
 8003b38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b3a:	e008      	b.n	8003b4e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b3c:	f7fe fbe4 	bl	8002308 <HAL_GetTick>
 8003b40:	4602      	mov	r2, r0
 8003b42:	693b      	ldr	r3, [r7, #16]
 8003b44:	1ad3      	subs	r3, r2, r3
 8003b46:	2b02      	cmp	r3, #2
 8003b48:	d901      	bls.n	8003b4e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003b4a:	2303      	movs	r3, #3
 8003b4c:	e167      	b.n	8003e1e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b4e:	4b0b      	ldr	r3, [pc, #44]	@ (8003b7c <HAL_RCC_OscConfig+0x240>)
 8003b50:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b52:	f003 0302 	and.w	r3, r3, #2
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d0f0      	beq.n	8003b3c <HAL_RCC_OscConfig+0x200>
 8003b5a:	e01b      	b.n	8003b94 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b5c:	4b09      	ldr	r3, [pc, #36]	@ (8003b84 <HAL_RCC_OscConfig+0x248>)
 8003b5e:	2200      	movs	r2, #0
 8003b60:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b62:	f7fe fbd1 	bl	8002308 <HAL_GetTick>
 8003b66:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b68:	e00e      	b.n	8003b88 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b6a:	f7fe fbcd 	bl	8002308 <HAL_GetTick>
 8003b6e:	4602      	mov	r2, r0
 8003b70:	693b      	ldr	r3, [r7, #16]
 8003b72:	1ad3      	subs	r3, r2, r3
 8003b74:	2b02      	cmp	r3, #2
 8003b76:	d907      	bls.n	8003b88 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003b78:	2303      	movs	r3, #3
 8003b7a:	e150      	b.n	8003e1e <HAL_RCC_OscConfig+0x4e2>
 8003b7c:	40023800 	.word	0x40023800
 8003b80:	42470000 	.word	0x42470000
 8003b84:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b88:	4b88      	ldr	r3, [pc, #544]	@ (8003dac <HAL_RCC_OscConfig+0x470>)
 8003b8a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b8c:	f003 0302 	and.w	r3, r3, #2
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d1ea      	bne.n	8003b6a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f003 0304 	and.w	r3, r3, #4
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	f000 8097 	beq.w	8003cd0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ba6:	4b81      	ldr	r3, [pc, #516]	@ (8003dac <HAL_RCC_OscConfig+0x470>)
 8003ba8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003baa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d10f      	bne.n	8003bd2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	60bb      	str	r3, [r7, #8]
 8003bb6:	4b7d      	ldr	r3, [pc, #500]	@ (8003dac <HAL_RCC_OscConfig+0x470>)
 8003bb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bba:	4a7c      	ldr	r2, [pc, #496]	@ (8003dac <HAL_RCC_OscConfig+0x470>)
 8003bbc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003bc0:	6413      	str	r3, [r2, #64]	@ 0x40
 8003bc2:	4b7a      	ldr	r3, [pc, #488]	@ (8003dac <HAL_RCC_OscConfig+0x470>)
 8003bc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bc6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003bca:	60bb      	str	r3, [r7, #8]
 8003bcc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003bce:	2301      	movs	r3, #1
 8003bd0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bd2:	4b77      	ldr	r3, [pc, #476]	@ (8003db0 <HAL_RCC_OscConfig+0x474>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d118      	bne.n	8003c10 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003bde:	4b74      	ldr	r3, [pc, #464]	@ (8003db0 <HAL_RCC_OscConfig+0x474>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	4a73      	ldr	r2, [pc, #460]	@ (8003db0 <HAL_RCC_OscConfig+0x474>)
 8003be4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003be8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003bea:	f7fe fb8d 	bl	8002308 <HAL_GetTick>
 8003bee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bf0:	e008      	b.n	8003c04 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003bf2:	f7fe fb89 	bl	8002308 <HAL_GetTick>
 8003bf6:	4602      	mov	r2, r0
 8003bf8:	693b      	ldr	r3, [r7, #16]
 8003bfa:	1ad3      	subs	r3, r2, r3
 8003bfc:	2b02      	cmp	r3, #2
 8003bfe:	d901      	bls.n	8003c04 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003c00:	2303      	movs	r3, #3
 8003c02:	e10c      	b.n	8003e1e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c04:	4b6a      	ldr	r3, [pc, #424]	@ (8003db0 <HAL_RCC_OscConfig+0x474>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d0f0      	beq.n	8003bf2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	689b      	ldr	r3, [r3, #8]
 8003c14:	2b01      	cmp	r3, #1
 8003c16:	d106      	bne.n	8003c26 <HAL_RCC_OscConfig+0x2ea>
 8003c18:	4b64      	ldr	r3, [pc, #400]	@ (8003dac <HAL_RCC_OscConfig+0x470>)
 8003c1a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c1c:	4a63      	ldr	r2, [pc, #396]	@ (8003dac <HAL_RCC_OscConfig+0x470>)
 8003c1e:	f043 0301 	orr.w	r3, r3, #1
 8003c22:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c24:	e01c      	b.n	8003c60 <HAL_RCC_OscConfig+0x324>
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	689b      	ldr	r3, [r3, #8]
 8003c2a:	2b05      	cmp	r3, #5
 8003c2c:	d10c      	bne.n	8003c48 <HAL_RCC_OscConfig+0x30c>
 8003c2e:	4b5f      	ldr	r3, [pc, #380]	@ (8003dac <HAL_RCC_OscConfig+0x470>)
 8003c30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c32:	4a5e      	ldr	r2, [pc, #376]	@ (8003dac <HAL_RCC_OscConfig+0x470>)
 8003c34:	f043 0304 	orr.w	r3, r3, #4
 8003c38:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c3a:	4b5c      	ldr	r3, [pc, #368]	@ (8003dac <HAL_RCC_OscConfig+0x470>)
 8003c3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c3e:	4a5b      	ldr	r2, [pc, #364]	@ (8003dac <HAL_RCC_OscConfig+0x470>)
 8003c40:	f043 0301 	orr.w	r3, r3, #1
 8003c44:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c46:	e00b      	b.n	8003c60 <HAL_RCC_OscConfig+0x324>
 8003c48:	4b58      	ldr	r3, [pc, #352]	@ (8003dac <HAL_RCC_OscConfig+0x470>)
 8003c4a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c4c:	4a57      	ldr	r2, [pc, #348]	@ (8003dac <HAL_RCC_OscConfig+0x470>)
 8003c4e:	f023 0301 	bic.w	r3, r3, #1
 8003c52:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c54:	4b55      	ldr	r3, [pc, #340]	@ (8003dac <HAL_RCC_OscConfig+0x470>)
 8003c56:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c58:	4a54      	ldr	r2, [pc, #336]	@ (8003dac <HAL_RCC_OscConfig+0x470>)
 8003c5a:	f023 0304 	bic.w	r3, r3, #4
 8003c5e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	689b      	ldr	r3, [r3, #8]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d015      	beq.n	8003c94 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c68:	f7fe fb4e 	bl	8002308 <HAL_GetTick>
 8003c6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c6e:	e00a      	b.n	8003c86 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c70:	f7fe fb4a 	bl	8002308 <HAL_GetTick>
 8003c74:	4602      	mov	r2, r0
 8003c76:	693b      	ldr	r3, [r7, #16]
 8003c78:	1ad3      	subs	r3, r2, r3
 8003c7a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d901      	bls.n	8003c86 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003c82:	2303      	movs	r3, #3
 8003c84:	e0cb      	b.n	8003e1e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c86:	4b49      	ldr	r3, [pc, #292]	@ (8003dac <HAL_RCC_OscConfig+0x470>)
 8003c88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c8a:	f003 0302 	and.w	r3, r3, #2
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d0ee      	beq.n	8003c70 <HAL_RCC_OscConfig+0x334>
 8003c92:	e014      	b.n	8003cbe <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c94:	f7fe fb38 	bl	8002308 <HAL_GetTick>
 8003c98:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c9a:	e00a      	b.n	8003cb2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c9c:	f7fe fb34 	bl	8002308 <HAL_GetTick>
 8003ca0:	4602      	mov	r2, r0
 8003ca2:	693b      	ldr	r3, [r7, #16]
 8003ca4:	1ad3      	subs	r3, r2, r3
 8003ca6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d901      	bls.n	8003cb2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003cae:	2303      	movs	r3, #3
 8003cb0:	e0b5      	b.n	8003e1e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003cb2:	4b3e      	ldr	r3, [pc, #248]	@ (8003dac <HAL_RCC_OscConfig+0x470>)
 8003cb4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003cb6:	f003 0302 	and.w	r3, r3, #2
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d1ee      	bne.n	8003c9c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003cbe:	7dfb      	ldrb	r3, [r7, #23]
 8003cc0:	2b01      	cmp	r3, #1
 8003cc2:	d105      	bne.n	8003cd0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003cc4:	4b39      	ldr	r3, [pc, #228]	@ (8003dac <HAL_RCC_OscConfig+0x470>)
 8003cc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cc8:	4a38      	ldr	r2, [pc, #224]	@ (8003dac <HAL_RCC_OscConfig+0x470>)
 8003cca:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003cce:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	699b      	ldr	r3, [r3, #24]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	f000 80a1 	beq.w	8003e1c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003cda:	4b34      	ldr	r3, [pc, #208]	@ (8003dac <HAL_RCC_OscConfig+0x470>)
 8003cdc:	689b      	ldr	r3, [r3, #8]
 8003cde:	f003 030c 	and.w	r3, r3, #12
 8003ce2:	2b08      	cmp	r3, #8
 8003ce4:	d05c      	beq.n	8003da0 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	699b      	ldr	r3, [r3, #24]
 8003cea:	2b02      	cmp	r3, #2
 8003cec:	d141      	bne.n	8003d72 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cee:	4b31      	ldr	r3, [pc, #196]	@ (8003db4 <HAL_RCC_OscConfig+0x478>)
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cf4:	f7fe fb08 	bl	8002308 <HAL_GetTick>
 8003cf8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cfa:	e008      	b.n	8003d0e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cfc:	f7fe fb04 	bl	8002308 <HAL_GetTick>
 8003d00:	4602      	mov	r2, r0
 8003d02:	693b      	ldr	r3, [r7, #16]
 8003d04:	1ad3      	subs	r3, r2, r3
 8003d06:	2b02      	cmp	r3, #2
 8003d08:	d901      	bls.n	8003d0e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003d0a:	2303      	movs	r3, #3
 8003d0c:	e087      	b.n	8003e1e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d0e:	4b27      	ldr	r3, [pc, #156]	@ (8003dac <HAL_RCC_OscConfig+0x470>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d1f0      	bne.n	8003cfc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	69da      	ldr	r2, [r3, #28]
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6a1b      	ldr	r3, [r3, #32]
 8003d22:	431a      	orrs	r2, r3
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d28:	019b      	lsls	r3, r3, #6
 8003d2a:	431a      	orrs	r2, r3
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d30:	085b      	lsrs	r3, r3, #1
 8003d32:	3b01      	subs	r3, #1
 8003d34:	041b      	lsls	r3, r3, #16
 8003d36:	431a      	orrs	r2, r3
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d3c:	061b      	lsls	r3, r3, #24
 8003d3e:	491b      	ldr	r1, [pc, #108]	@ (8003dac <HAL_RCC_OscConfig+0x470>)
 8003d40:	4313      	orrs	r3, r2
 8003d42:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d44:	4b1b      	ldr	r3, [pc, #108]	@ (8003db4 <HAL_RCC_OscConfig+0x478>)
 8003d46:	2201      	movs	r2, #1
 8003d48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d4a:	f7fe fadd 	bl	8002308 <HAL_GetTick>
 8003d4e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d50:	e008      	b.n	8003d64 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d52:	f7fe fad9 	bl	8002308 <HAL_GetTick>
 8003d56:	4602      	mov	r2, r0
 8003d58:	693b      	ldr	r3, [r7, #16]
 8003d5a:	1ad3      	subs	r3, r2, r3
 8003d5c:	2b02      	cmp	r3, #2
 8003d5e:	d901      	bls.n	8003d64 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003d60:	2303      	movs	r3, #3
 8003d62:	e05c      	b.n	8003e1e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d64:	4b11      	ldr	r3, [pc, #68]	@ (8003dac <HAL_RCC_OscConfig+0x470>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d0f0      	beq.n	8003d52 <HAL_RCC_OscConfig+0x416>
 8003d70:	e054      	b.n	8003e1c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d72:	4b10      	ldr	r3, [pc, #64]	@ (8003db4 <HAL_RCC_OscConfig+0x478>)
 8003d74:	2200      	movs	r2, #0
 8003d76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d78:	f7fe fac6 	bl	8002308 <HAL_GetTick>
 8003d7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d7e:	e008      	b.n	8003d92 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d80:	f7fe fac2 	bl	8002308 <HAL_GetTick>
 8003d84:	4602      	mov	r2, r0
 8003d86:	693b      	ldr	r3, [r7, #16]
 8003d88:	1ad3      	subs	r3, r2, r3
 8003d8a:	2b02      	cmp	r3, #2
 8003d8c:	d901      	bls.n	8003d92 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003d8e:	2303      	movs	r3, #3
 8003d90:	e045      	b.n	8003e1e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d92:	4b06      	ldr	r3, [pc, #24]	@ (8003dac <HAL_RCC_OscConfig+0x470>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d1f0      	bne.n	8003d80 <HAL_RCC_OscConfig+0x444>
 8003d9e:	e03d      	b.n	8003e1c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	699b      	ldr	r3, [r3, #24]
 8003da4:	2b01      	cmp	r3, #1
 8003da6:	d107      	bne.n	8003db8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003da8:	2301      	movs	r3, #1
 8003daa:	e038      	b.n	8003e1e <HAL_RCC_OscConfig+0x4e2>
 8003dac:	40023800 	.word	0x40023800
 8003db0:	40007000 	.word	0x40007000
 8003db4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003db8:	4b1b      	ldr	r3, [pc, #108]	@ (8003e28 <HAL_RCC_OscConfig+0x4ec>)
 8003dba:	685b      	ldr	r3, [r3, #4]
 8003dbc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	699b      	ldr	r3, [r3, #24]
 8003dc2:	2b01      	cmp	r3, #1
 8003dc4:	d028      	beq.n	8003e18 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003dd0:	429a      	cmp	r2, r3
 8003dd2:	d121      	bne.n	8003e18 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003dde:	429a      	cmp	r2, r3
 8003de0:	d11a      	bne.n	8003e18 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003de2:	68fa      	ldr	r2, [r7, #12]
 8003de4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003de8:	4013      	ands	r3, r2
 8003dea:	687a      	ldr	r2, [r7, #4]
 8003dec:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003dee:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003df0:	4293      	cmp	r3, r2
 8003df2:	d111      	bne.n	8003e18 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003dfe:	085b      	lsrs	r3, r3, #1
 8003e00:	3b01      	subs	r3, #1
 8003e02:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003e04:	429a      	cmp	r2, r3
 8003e06:	d107      	bne.n	8003e18 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e12:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003e14:	429a      	cmp	r2, r3
 8003e16:	d001      	beq.n	8003e1c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003e18:	2301      	movs	r3, #1
 8003e1a:	e000      	b.n	8003e1e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003e1c:	2300      	movs	r3, #0
}
 8003e1e:	4618      	mov	r0, r3
 8003e20:	3718      	adds	r7, #24
 8003e22:	46bd      	mov	sp, r7
 8003e24:	bd80      	pop	{r7, pc}
 8003e26:	bf00      	nop
 8003e28:	40023800 	.word	0x40023800

08003e2c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b084      	sub	sp, #16
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
 8003e34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d101      	bne.n	8003e40 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003e3c:	2301      	movs	r3, #1
 8003e3e:	e0cc      	b.n	8003fda <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003e40:	4b68      	ldr	r3, [pc, #416]	@ (8003fe4 <HAL_RCC_ClockConfig+0x1b8>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f003 030f 	and.w	r3, r3, #15
 8003e48:	683a      	ldr	r2, [r7, #0]
 8003e4a:	429a      	cmp	r2, r3
 8003e4c:	d90c      	bls.n	8003e68 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e4e:	4b65      	ldr	r3, [pc, #404]	@ (8003fe4 <HAL_RCC_ClockConfig+0x1b8>)
 8003e50:	683a      	ldr	r2, [r7, #0]
 8003e52:	b2d2      	uxtb	r2, r2
 8003e54:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e56:	4b63      	ldr	r3, [pc, #396]	@ (8003fe4 <HAL_RCC_ClockConfig+0x1b8>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f003 030f 	and.w	r3, r3, #15
 8003e5e:	683a      	ldr	r2, [r7, #0]
 8003e60:	429a      	cmp	r2, r3
 8003e62:	d001      	beq.n	8003e68 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003e64:	2301      	movs	r3, #1
 8003e66:	e0b8      	b.n	8003fda <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f003 0302 	and.w	r3, r3, #2
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d020      	beq.n	8003eb6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f003 0304 	and.w	r3, r3, #4
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d005      	beq.n	8003e8c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003e80:	4b59      	ldr	r3, [pc, #356]	@ (8003fe8 <HAL_RCC_ClockConfig+0x1bc>)
 8003e82:	689b      	ldr	r3, [r3, #8]
 8003e84:	4a58      	ldr	r2, [pc, #352]	@ (8003fe8 <HAL_RCC_ClockConfig+0x1bc>)
 8003e86:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003e8a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f003 0308 	and.w	r3, r3, #8
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d005      	beq.n	8003ea4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003e98:	4b53      	ldr	r3, [pc, #332]	@ (8003fe8 <HAL_RCC_ClockConfig+0x1bc>)
 8003e9a:	689b      	ldr	r3, [r3, #8]
 8003e9c:	4a52      	ldr	r2, [pc, #328]	@ (8003fe8 <HAL_RCC_ClockConfig+0x1bc>)
 8003e9e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003ea2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ea4:	4b50      	ldr	r3, [pc, #320]	@ (8003fe8 <HAL_RCC_ClockConfig+0x1bc>)
 8003ea6:	689b      	ldr	r3, [r3, #8]
 8003ea8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	689b      	ldr	r3, [r3, #8]
 8003eb0:	494d      	ldr	r1, [pc, #308]	@ (8003fe8 <HAL_RCC_ClockConfig+0x1bc>)
 8003eb2:	4313      	orrs	r3, r2
 8003eb4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f003 0301 	and.w	r3, r3, #1
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d044      	beq.n	8003f4c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	685b      	ldr	r3, [r3, #4]
 8003ec6:	2b01      	cmp	r3, #1
 8003ec8:	d107      	bne.n	8003eda <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003eca:	4b47      	ldr	r3, [pc, #284]	@ (8003fe8 <HAL_RCC_ClockConfig+0x1bc>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d119      	bne.n	8003f0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ed6:	2301      	movs	r3, #1
 8003ed8:	e07f      	b.n	8003fda <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	685b      	ldr	r3, [r3, #4]
 8003ede:	2b02      	cmp	r3, #2
 8003ee0:	d003      	beq.n	8003eea <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003ee6:	2b03      	cmp	r3, #3
 8003ee8:	d107      	bne.n	8003efa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003eea:	4b3f      	ldr	r3, [pc, #252]	@ (8003fe8 <HAL_RCC_ClockConfig+0x1bc>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d109      	bne.n	8003f0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ef6:	2301      	movs	r3, #1
 8003ef8:	e06f      	b.n	8003fda <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003efa:	4b3b      	ldr	r3, [pc, #236]	@ (8003fe8 <HAL_RCC_ClockConfig+0x1bc>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f003 0302 	and.w	r3, r3, #2
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d101      	bne.n	8003f0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f06:	2301      	movs	r3, #1
 8003f08:	e067      	b.n	8003fda <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003f0a:	4b37      	ldr	r3, [pc, #220]	@ (8003fe8 <HAL_RCC_ClockConfig+0x1bc>)
 8003f0c:	689b      	ldr	r3, [r3, #8]
 8003f0e:	f023 0203 	bic.w	r2, r3, #3
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	685b      	ldr	r3, [r3, #4]
 8003f16:	4934      	ldr	r1, [pc, #208]	@ (8003fe8 <HAL_RCC_ClockConfig+0x1bc>)
 8003f18:	4313      	orrs	r3, r2
 8003f1a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003f1c:	f7fe f9f4 	bl	8002308 <HAL_GetTick>
 8003f20:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f22:	e00a      	b.n	8003f3a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f24:	f7fe f9f0 	bl	8002308 <HAL_GetTick>
 8003f28:	4602      	mov	r2, r0
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	1ad3      	subs	r3, r2, r3
 8003f2e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f32:	4293      	cmp	r3, r2
 8003f34:	d901      	bls.n	8003f3a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003f36:	2303      	movs	r3, #3
 8003f38:	e04f      	b.n	8003fda <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f3a:	4b2b      	ldr	r3, [pc, #172]	@ (8003fe8 <HAL_RCC_ClockConfig+0x1bc>)
 8003f3c:	689b      	ldr	r3, [r3, #8]
 8003f3e:	f003 020c 	and.w	r2, r3, #12
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	685b      	ldr	r3, [r3, #4]
 8003f46:	009b      	lsls	r3, r3, #2
 8003f48:	429a      	cmp	r2, r3
 8003f4a:	d1eb      	bne.n	8003f24 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003f4c:	4b25      	ldr	r3, [pc, #148]	@ (8003fe4 <HAL_RCC_ClockConfig+0x1b8>)
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f003 030f 	and.w	r3, r3, #15
 8003f54:	683a      	ldr	r2, [r7, #0]
 8003f56:	429a      	cmp	r2, r3
 8003f58:	d20c      	bcs.n	8003f74 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f5a:	4b22      	ldr	r3, [pc, #136]	@ (8003fe4 <HAL_RCC_ClockConfig+0x1b8>)
 8003f5c:	683a      	ldr	r2, [r7, #0]
 8003f5e:	b2d2      	uxtb	r2, r2
 8003f60:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f62:	4b20      	ldr	r3, [pc, #128]	@ (8003fe4 <HAL_RCC_ClockConfig+0x1b8>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f003 030f 	and.w	r3, r3, #15
 8003f6a:	683a      	ldr	r2, [r7, #0]
 8003f6c:	429a      	cmp	r2, r3
 8003f6e:	d001      	beq.n	8003f74 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003f70:	2301      	movs	r3, #1
 8003f72:	e032      	b.n	8003fda <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f003 0304 	and.w	r3, r3, #4
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d008      	beq.n	8003f92 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f80:	4b19      	ldr	r3, [pc, #100]	@ (8003fe8 <HAL_RCC_ClockConfig+0x1bc>)
 8003f82:	689b      	ldr	r3, [r3, #8]
 8003f84:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	68db      	ldr	r3, [r3, #12]
 8003f8c:	4916      	ldr	r1, [pc, #88]	@ (8003fe8 <HAL_RCC_ClockConfig+0x1bc>)
 8003f8e:	4313      	orrs	r3, r2
 8003f90:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f003 0308 	and.w	r3, r3, #8
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d009      	beq.n	8003fb2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003f9e:	4b12      	ldr	r3, [pc, #72]	@ (8003fe8 <HAL_RCC_ClockConfig+0x1bc>)
 8003fa0:	689b      	ldr	r3, [r3, #8]
 8003fa2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	691b      	ldr	r3, [r3, #16]
 8003faa:	00db      	lsls	r3, r3, #3
 8003fac:	490e      	ldr	r1, [pc, #56]	@ (8003fe8 <HAL_RCC_ClockConfig+0x1bc>)
 8003fae:	4313      	orrs	r3, r2
 8003fb0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003fb2:	f000 f821 	bl	8003ff8 <HAL_RCC_GetSysClockFreq>
 8003fb6:	4602      	mov	r2, r0
 8003fb8:	4b0b      	ldr	r3, [pc, #44]	@ (8003fe8 <HAL_RCC_ClockConfig+0x1bc>)
 8003fba:	689b      	ldr	r3, [r3, #8]
 8003fbc:	091b      	lsrs	r3, r3, #4
 8003fbe:	f003 030f 	and.w	r3, r3, #15
 8003fc2:	490a      	ldr	r1, [pc, #40]	@ (8003fec <HAL_RCC_ClockConfig+0x1c0>)
 8003fc4:	5ccb      	ldrb	r3, [r1, r3]
 8003fc6:	fa22 f303 	lsr.w	r3, r2, r3
 8003fca:	4a09      	ldr	r2, [pc, #36]	@ (8003ff0 <HAL_RCC_ClockConfig+0x1c4>)
 8003fcc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003fce:	4b09      	ldr	r3, [pc, #36]	@ (8003ff4 <HAL_RCC_ClockConfig+0x1c8>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	f7fe f954 	bl	8002280 <HAL_InitTick>

  return HAL_OK;
 8003fd8:	2300      	movs	r3, #0
}
 8003fda:	4618      	mov	r0, r3
 8003fdc:	3710      	adds	r7, #16
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	bd80      	pop	{r7, pc}
 8003fe2:	bf00      	nop
 8003fe4:	40023c00 	.word	0x40023c00
 8003fe8:	40023800 	.word	0x40023800
 8003fec:	08007a8c 	.word	0x08007a8c
 8003ff0:	20000010 	.word	0x20000010
 8003ff4:	20000014 	.word	0x20000014

08003ff8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ff8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ffc:	b094      	sub	sp, #80	@ 0x50
 8003ffe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004000:	2300      	movs	r3, #0
 8004002:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8004004:	2300      	movs	r3, #0
 8004006:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8004008:	2300      	movs	r3, #0
 800400a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800400c:	2300      	movs	r3, #0
 800400e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004010:	4b79      	ldr	r3, [pc, #484]	@ (80041f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004012:	689b      	ldr	r3, [r3, #8]
 8004014:	f003 030c 	and.w	r3, r3, #12
 8004018:	2b08      	cmp	r3, #8
 800401a:	d00d      	beq.n	8004038 <HAL_RCC_GetSysClockFreq+0x40>
 800401c:	2b08      	cmp	r3, #8
 800401e:	f200 80e1 	bhi.w	80041e4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004022:	2b00      	cmp	r3, #0
 8004024:	d002      	beq.n	800402c <HAL_RCC_GetSysClockFreq+0x34>
 8004026:	2b04      	cmp	r3, #4
 8004028:	d003      	beq.n	8004032 <HAL_RCC_GetSysClockFreq+0x3a>
 800402a:	e0db      	b.n	80041e4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800402c:	4b73      	ldr	r3, [pc, #460]	@ (80041fc <HAL_RCC_GetSysClockFreq+0x204>)
 800402e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004030:	e0db      	b.n	80041ea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004032:	4b73      	ldr	r3, [pc, #460]	@ (8004200 <HAL_RCC_GetSysClockFreq+0x208>)
 8004034:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004036:	e0d8      	b.n	80041ea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004038:	4b6f      	ldr	r3, [pc, #444]	@ (80041f8 <HAL_RCC_GetSysClockFreq+0x200>)
 800403a:	685b      	ldr	r3, [r3, #4]
 800403c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004040:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004042:	4b6d      	ldr	r3, [pc, #436]	@ (80041f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004044:	685b      	ldr	r3, [r3, #4]
 8004046:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800404a:	2b00      	cmp	r3, #0
 800404c:	d063      	beq.n	8004116 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800404e:	4b6a      	ldr	r3, [pc, #424]	@ (80041f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004050:	685b      	ldr	r3, [r3, #4]
 8004052:	099b      	lsrs	r3, r3, #6
 8004054:	2200      	movs	r2, #0
 8004056:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004058:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800405a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800405c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004060:	633b      	str	r3, [r7, #48]	@ 0x30
 8004062:	2300      	movs	r3, #0
 8004064:	637b      	str	r3, [r7, #52]	@ 0x34
 8004066:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800406a:	4622      	mov	r2, r4
 800406c:	462b      	mov	r3, r5
 800406e:	f04f 0000 	mov.w	r0, #0
 8004072:	f04f 0100 	mov.w	r1, #0
 8004076:	0159      	lsls	r1, r3, #5
 8004078:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800407c:	0150      	lsls	r0, r2, #5
 800407e:	4602      	mov	r2, r0
 8004080:	460b      	mov	r3, r1
 8004082:	4621      	mov	r1, r4
 8004084:	1a51      	subs	r1, r2, r1
 8004086:	6139      	str	r1, [r7, #16]
 8004088:	4629      	mov	r1, r5
 800408a:	eb63 0301 	sbc.w	r3, r3, r1
 800408e:	617b      	str	r3, [r7, #20]
 8004090:	f04f 0200 	mov.w	r2, #0
 8004094:	f04f 0300 	mov.w	r3, #0
 8004098:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800409c:	4659      	mov	r1, fp
 800409e:	018b      	lsls	r3, r1, #6
 80040a0:	4651      	mov	r1, sl
 80040a2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80040a6:	4651      	mov	r1, sl
 80040a8:	018a      	lsls	r2, r1, #6
 80040aa:	4651      	mov	r1, sl
 80040ac:	ebb2 0801 	subs.w	r8, r2, r1
 80040b0:	4659      	mov	r1, fp
 80040b2:	eb63 0901 	sbc.w	r9, r3, r1
 80040b6:	f04f 0200 	mov.w	r2, #0
 80040ba:	f04f 0300 	mov.w	r3, #0
 80040be:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80040c2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80040c6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80040ca:	4690      	mov	r8, r2
 80040cc:	4699      	mov	r9, r3
 80040ce:	4623      	mov	r3, r4
 80040d0:	eb18 0303 	adds.w	r3, r8, r3
 80040d4:	60bb      	str	r3, [r7, #8]
 80040d6:	462b      	mov	r3, r5
 80040d8:	eb49 0303 	adc.w	r3, r9, r3
 80040dc:	60fb      	str	r3, [r7, #12]
 80040de:	f04f 0200 	mov.w	r2, #0
 80040e2:	f04f 0300 	mov.w	r3, #0
 80040e6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80040ea:	4629      	mov	r1, r5
 80040ec:	024b      	lsls	r3, r1, #9
 80040ee:	4621      	mov	r1, r4
 80040f0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80040f4:	4621      	mov	r1, r4
 80040f6:	024a      	lsls	r2, r1, #9
 80040f8:	4610      	mov	r0, r2
 80040fa:	4619      	mov	r1, r3
 80040fc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80040fe:	2200      	movs	r2, #0
 8004100:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004102:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004104:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004108:	f7fc f8da 	bl	80002c0 <__aeabi_uldivmod>
 800410c:	4602      	mov	r2, r0
 800410e:	460b      	mov	r3, r1
 8004110:	4613      	mov	r3, r2
 8004112:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004114:	e058      	b.n	80041c8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004116:	4b38      	ldr	r3, [pc, #224]	@ (80041f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004118:	685b      	ldr	r3, [r3, #4]
 800411a:	099b      	lsrs	r3, r3, #6
 800411c:	2200      	movs	r2, #0
 800411e:	4618      	mov	r0, r3
 8004120:	4611      	mov	r1, r2
 8004122:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004126:	623b      	str	r3, [r7, #32]
 8004128:	2300      	movs	r3, #0
 800412a:	627b      	str	r3, [r7, #36]	@ 0x24
 800412c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004130:	4642      	mov	r2, r8
 8004132:	464b      	mov	r3, r9
 8004134:	f04f 0000 	mov.w	r0, #0
 8004138:	f04f 0100 	mov.w	r1, #0
 800413c:	0159      	lsls	r1, r3, #5
 800413e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004142:	0150      	lsls	r0, r2, #5
 8004144:	4602      	mov	r2, r0
 8004146:	460b      	mov	r3, r1
 8004148:	4641      	mov	r1, r8
 800414a:	ebb2 0a01 	subs.w	sl, r2, r1
 800414e:	4649      	mov	r1, r9
 8004150:	eb63 0b01 	sbc.w	fp, r3, r1
 8004154:	f04f 0200 	mov.w	r2, #0
 8004158:	f04f 0300 	mov.w	r3, #0
 800415c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004160:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004164:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004168:	ebb2 040a 	subs.w	r4, r2, sl
 800416c:	eb63 050b 	sbc.w	r5, r3, fp
 8004170:	f04f 0200 	mov.w	r2, #0
 8004174:	f04f 0300 	mov.w	r3, #0
 8004178:	00eb      	lsls	r3, r5, #3
 800417a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800417e:	00e2      	lsls	r2, r4, #3
 8004180:	4614      	mov	r4, r2
 8004182:	461d      	mov	r5, r3
 8004184:	4643      	mov	r3, r8
 8004186:	18e3      	adds	r3, r4, r3
 8004188:	603b      	str	r3, [r7, #0]
 800418a:	464b      	mov	r3, r9
 800418c:	eb45 0303 	adc.w	r3, r5, r3
 8004190:	607b      	str	r3, [r7, #4]
 8004192:	f04f 0200 	mov.w	r2, #0
 8004196:	f04f 0300 	mov.w	r3, #0
 800419a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800419e:	4629      	mov	r1, r5
 80041a0:	028b      	lsls	r3, r1, #10
 80041a2:	4621      	mov	r1, r4
 80041a4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80041a8:	4621      	mov	r1, r4
 80041aa:	028a      	lsls	r2, r1, #10
 80041ac:	4610      	mov	r0, r2
 80041ae:	4619      	mov	r1, r3
 80041b0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80041b2:	2200      	movs	r2, #0
 80041b4:	61bb      	str	r3, [r7, #24]
 80041b6:	61fa      	str	r2, [r7, #28]
 80041b8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80041bc:	f7fc f880 	bl	80002c0 <__aeabi_uldivmod>
 80041c0:	4602      	mov	r2, r0
 80041c2:	460b      	mov	r3, r1
 80041c4:	4613      	mov	r3, r2
 80041c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80041c8:	4b0b      	ldr	r3, [pc, #44]	@ (80041f8 <HAL_RCC_GetSysClockFreq+0x200>)
 80041ca:	685b      	ldr	r3, [r3, #4]
 80041cc:	0c1b      	lsrs	r3, r3, #16
 80041ce:	f003 0303 	and.w	r3, r3, #3
 80041d2:	3301      	adds	r3, #1
 80041d4:	005b      	lsls	r3, r3, #1
 80041d6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80041d8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80041da:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80041dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80041e0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80041e2:	e002      	b.n	80041ea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80041e4:	4b05      	ldr	r3, [pc, #20]	@ (80041fc <HAL_RCC_GetSysClockFreq+0x204>)
 80041e6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80041e8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80041ea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80041ec:	4618      	mov	r0, r3
 80041ee:	3750      	adds	r7, #80	@ 0x50
 80041f0:	46bd      	mov	sp, r7
 80041f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80041f6:	bf00      	nop
 80041f8:	40023800 	.word	0x40023800
 80041fc:	00f42400 	.word	0x00f42400
 8004200:	007a1200 	.word	0x007a1200

08004204 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004204:	b480      	push	{r7}
 8004206:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004208:	4b03      	ldr	r3, [pc, #12]	@ (8004218 <HAL_RCC_GetHCLKFreq+0x14>)
 800420a:	681b      	ldr	r3, [r3, #0]
}
 800420c:	4618      	mov	r0, r3
 800420e:	46bd      	mov	sp, r7
 8004210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004214:	4770      	bx	lr
 8004216:	bf00      	nop
 8004218:	20000010 	.word	0x20000010

0800421c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800421c:	b580      	push	{r7, lr}
 800421e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004220:	f7ff fff0 	bl	8004204 <HAL_RCC_GetHCLKFreq>
 8004224:	4602      	mov	r2, r0
 8004226:	4b05      	ldr	r3, [pc, #20]	@ (800423c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004228:	689b      	ldr	r3, [r3, #8]
 800422a:	0a9b      	lsrs	r3, r3, #10
 800422c:	f003 0307 	and.w	r3, r3, #7
 8004230:	4903      	ldr	r1, [pc, #12]	@ (8004240 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004232:	5ccb      	ldrb	r3, [r1, r3]
 8004234:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004238:	4618      	mov	r0, r3
 800423a:	bd80      	pop	{r7, pc}
 800423c:	40023800 	.word	0x40023800
 8004240:	08007a9c 	.word	0x08007a9c

08004244 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004244:	b580      	push	{r7, lr}
 8004246:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004248:	f7ff ffdc 	bl	8004204 <HAL_RCC_GetHCLKFreq>
 800424c:	4602      	mov	r2, r0
 800424e:	4b05      	ldr	r3, [pc, #20]	@ (8004264 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004250:	689b      	ldr	r3, [r3, #8]
 8004252:	0b5b      	lsrs	r3, r3, #13
 8004254:	f003 0307 	and.w	r3, r3, #7
 8004258:	4903      	ldr	r1, [pc, #12]	@ (8004268 <HAL_RCC_GetPCLK2Freq+0x24>)
 800425a:	5ccb      	ldrb	r3, [r1, r3]
 800425c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004260:	4618      	mov	r0, r3
 8004262:	bd80      	pop	{r7, pc}
 8004264:	40023800 	.word	0x40023800
 8004268:	08007a9c 	.word	0x08007a9c

0800426c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800426c:	b580      	push	{r7, lr}
 800426e:	b082      	sub	sp, #8
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2b00      	cmp	r3, #0
 8004278:	d101      	bne.n	800427e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800427a:	2301      	movs	r3, #1
 800427c:	e07b      	b.n	8004376 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004282:	2b00      	cmp	r3, #0
 8004284:	d108      	bne.n	8004298 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	685b      	ldr	r3, [r3, #4]
 800428a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800428e:	d009      	beq.n	80042a4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2200      	movs	r2, #0
 8004294:	61da      	str	r2, [r3, #28]
 8004296:	e005      	b.n	80042a4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2200      	movs	r2, #0
 800429c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	2200      	movs	r2, #0
 80042a2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2200      	movs	r2, #0
 80042a8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80042b0:	b2db      	uxtb	r3, r3
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d106      	bne.n	80042c4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	2200      	movs	r2, #0
 80042ba:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80042be:	6878      	ldr	r0, [r7, #4]
 80042c0:	f7fd fb98 	bl	80019f4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2202      	movs	r2, #2
 80042c8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	681a      	ldr	r2, [r3, #0]
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80042da:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	685b      	ldr	r3, [r3, #4]
 80042e0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	689b      	ldr	r3, [r3, #8]
 80042e8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80042ec:	431a      	orrs	r2, r3
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	68db      	ldr	r3, [r3, #12]
 80042f2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80042f6:	431a      	orrs	r2, r3
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	691b      	ldr	r3, [r3, #16]
 80042fc:	f003 0302 	and.w	r3, r3, #2
 8004300:	431a      	orrs	r2, r3
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	695b      	ldr	r3, [r3, #20]
 8004306:	f003 0301 	and.w	r3, r3, #1
 800430a:	431a      	orrs	r2, r3
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	699b      	ldr	r3, [r3, #24]
 8004310:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004314:	431a      	orrs	r2, r3
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	69db      	ldr	r3, [r3, #28]
 800431a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800431e:	431a      	orrs	r2, r3
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6a1b      	ldr	r3, [r3, #32]
 8004324:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004328:	ea42 0103 	orr.w	r1, r2, r3
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004330:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	430a      	orrs	r2, r1
 800433a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	699b      	ldr	r3, [r3, #24]
 8004340:	0c1b      	lsrs	r3, r3, #16
 8004342:	f003 0104 	and.w	r1, r3, #4
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800434a:	f003 0210 	and.w	r2, r3, #16
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	430a      	orrs	r2, r1
 8004354:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	69da      	ldr	r2, [r3, #28]
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004364:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2200      	movs	r2, #0
 800436a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2201      	movs	r2, #1
 8004370:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8004374:	2300      	movs	r3, #0
}
 8004376:	4618      	mov	r0, r3
 8004378:	3708      	adds	r7, #8
 800437a:	46bd      	mov	sp, r7
 800437c:	bd80      	pop	{r7, pc}

0800437e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800437e:	b580      	push	{r7, lr}
 8004380:	b088      	sub	sp, #32
 8004382:	af00      	add	r7, sp, #0
 8004384:	60f8      	str	r0, [r7, #12]
 8004386:	60b9      	str	r1, [r7, #8]
 8004388:	603b      	str	r3, [r7, #0]
 800438a:	4613      	mov	r3, r2
 800438c:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800438e:	f7fd ffbb 	bl	8002308 <HAL_GetTick>
 8004392:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8004394:	88fb      	ldrh	r3, [r7, #6]
 8004396:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800439e:	b2db      	uxtb	r3, r3
 80043a0:	2b01      	cmp	r3, #1
 80043a2:	d001      	beq.n	80043a8 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80043a4:	2302      	movs	r3, #2
 80043a6:	e12a      	b.n	80045fe <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 80043a8:	68bb      	ldr	r3, [r7, #8]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d002      	beq.n	80043b4 <HAL_SPI_Transmit+0x36>
 80043ae:	88fb      	ldrh	r3, [r7, #6]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d101      	bne.n	80043b8 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80043b4:	2301      	movs	r3, #1
 80043b6:	e122      	b.n	80045fe <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80043be:	2b01      	cmp	r3, #1
 80043c0:	d101      	bne.n	80043c6 <HAL_SPI_Transmit+0x48>
 80043c2:	2302      	movs	r3, #2
 80043c4:	e11b      	b.n	80045fe <HAL_SPI_Transmit+0x280>
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	2201      	movs	r2, #1
 80043ca:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	2203      	movs	r2, #3
 80043d2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	2200      	movs	r2, #0
 80043da:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	68ba      	ldr	r2, [r7, #8]
 80043e0:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	88fa      	ldrh	r2, [r7, #6]
 80043e6:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	88fa      	ldrh	r2, [r7, #6]
 80043ec:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	2200      	movs	r2, #0
 80043f2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	2200      	movs	r2, #0
 80043f8:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	2200      	movs	r2, #0
 80043fe:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	2200      	movs	r2, #0
 8004404:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	2200      	movs	r2, #0
 800440a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	689b      	ldr	r3, [r3, #8]
 8004410:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004414:	d10f      	bne.n	8004436 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	681a      	ldr	r2, [r3, #0]
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004424:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	681a      	ldr	r2, [r3, #0]
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004434:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004440:	2b40      	cmp	r3, #64	@ 0x40
 8004442:	d007      	beq.n	8004454 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	681a      	ldr	r2, [r3, #0]
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004452:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	68db      	ldr	r3, [r3, #12]
 8004458:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800445c:	d152      	bne.n	8004504 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	685b      	ldr	r3, [r3, #4]
 8004462:	2b00      	cmp	r3, #0
 8004464:	d002      	beq.n	800446c <HAL_SPI_Transmit+0xee>
 8004466:	8b7b      	ldrh	r3, [r7, #26]
 8004468:	2b01      	cmp	r3, #1
 800446a:	d145      	bne.n	80044f8 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004470:	881a      	ldrh	r2, [r3, #0]
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800447c:	1c9a      	adds	r2, r3, #2
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004486:	b29b      	uxth	r3, r3
 8004488:	3b01      	subs	r3, #1
 800448a:	b29a      	uxth	r2, r3
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004490:	e032      	b.n	80044f8 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	689b      	ldr	r3, [r3, #8]
 8004498:	f003 0302 	and.w	r3, r3, #2
 800449c:	2b02      	cmp	r3, #2
 800449e:	d112      	bne.n	80044c6 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044a4:	881a      	ldrh	r2, [r3, #0]
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044b0:	1c9a      	adds	r2, r3, #2
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80044ba:	b29b      	uxth	r3, r3
 80044bc:	3b01      	subs	r3, #1
 80044be:	b29a      	uxth	r2, r3
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	86da      	strh	r2, [r3, #54]	@ 0x36
 80044c4:	e018      	b.n	80044f8 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80044c6:	f7fd ff1f 	bl	8002308 <HAL_GetTick>
 80044ca:	4602      	mov	r2, r0
 80044cc:	69fb      	ldr	r3, [r7, #28]
 80044ce:	1ad3      	subs	r3, r2, r3
 80044d0:	683a      	ldr	r2, [r7, #0]
 80044d2:	429a      	cmp	r2, r3
 80044d4:	d803      	bhi.n	80044de <HAL_SPI_Transmit+0x160>
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044dc:	d102      	bne.n	80044e4 <HAL_SPI_Transmit+0x166>
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d109      	bne.n	80044f8 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	2201      	movs	r2, #1
 80044e8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	2200      	movs	r2, #0
 80044f0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80044f4:	2303      	movs	r3, #3
 80044f6:	e082      	b.n	80045fe <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80044fc:	b29b      	uxth	r3, r3
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d1c7      	bne.n	8004492 <HAL_SPI_Transmit+0x114>
 8004502:	e053      	b.n	80045ac <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	685b      	ldr	r3, [r3, #4]
 8004508:	2b00      	cmp	r3, #0
 800450a:	d002      	beq.n	8004512 <HAL_SPI_Transmit+0x194>
 800450c:	8b7b      	ldrh	r3, [r7, #26]
 800450e:	2b01      	cmp	r3, #1
 8004510:	d147      	bne.n	80045a2 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	330c      	adds	r3, #12
 800451c:	7812      	ldrb	r2, [r2, #0]
 800451e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004524:	1c5a      	adds	r2, r3, #1
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800452e:	b29b      	uxth	r3, r3
 8004530:	3b01      	subs	r3, #1
 8004532:	b29a      	uxth	r2, r3
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004538:	e033      	b.n	80045a2 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	689b      	ldr	r3, [r3, #8]
 8004540:	f003 0302 	and.w	r3, r3, #2
 8004544:	2b02      	cmp	r3, #2
 8004546:	d113      	bne.n	8004570 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	330c      	adds	r3, #12
 8004552:	7812      	ldrb	r2, [r2, #0]
 8004554:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800455a:	1c5a      	adds	r2, r3, #1
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004564:	b29b      	uxth	r3, r3
 8004566:	3b01      	subs	r3, #1
 8004568:	b29a      	uxth	r2, r3
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	86da      	strh	r2, [r3, #54]	@ 0x36
 800456e:	e018      	b.n	80045a2 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004570:	f7fd feca 	bl	8002308 <HAL_GetTick>
 8004574:	4602      	mov	r2, r0
 8004576:	69fb      	ldr	r3, [r7, #28]
 8004578:	1ad3      	subs	r3, r2, r3
 800457a:	683a      	ldr	r2, [r7, #0]
 800457c:	429a      	cmp	r2, r3
 800457e:	d803      	bhi.n	8004588 <HAL_SPI_Transmit+0x20a>
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004586:	d102      	bne.n	800458e <HAL_SPI_Transmit+0x210>
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d109      	bne.n	80045a2 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	2201      	movs	r2, #1
 8004592:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	2200      	movs	r2, #0
 800459a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800459e:	2303      	movs	r3, #3
 80045a0:	e02d      	b.n	80045fe <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80045a6:	b29b      	uxth	r3, r3
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d1c6      	bne.n	800453a <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80045ac:	69fa      	ldr	r2, [r7, #28]
 80045ae:	6839      	ldr	r1, [r7, #0]
 80045b0:	68f8      	ldr	r0, [r7, #12]
 80045b2:	f000 fbe7 	bl	8004d84 <SPI_EndRxTxTransaction>
 80045b6:	4603      	mov	r3, r0
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d002      	beq.n	80045c2 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	2220      	movs	r2, #32
 80045c0:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	689b      	ldr	r3, [r3, #8]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d10a      	bne.n	80045e0 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80045ca:	2300      	movs	r3, #0
 80045cc:	617b      	str	r3, [r7, #20]
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	68db      	ldr	r3, [r3, #12]
 80045d4:	617b      	str	r3, [r7, #20]
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	689b      	ldr	r3, [r3, #8]
 80045dc:	617b      	str	r3, [r7, #20]
 80045de:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	2201      	movs	r2, #1
 80045e4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	2200      	movs	r2, #0
 80045ec:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d001      	beq.n	80045fc <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 80045f8:	2301      	movs	r3, #1
 80045fa:	e000      	b.n	80045fe <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 80045fc:	2300      	movs	r3, #0
  }
}
 80045fe:	4618      	mov	r0, r3
 8004600:	3720      	adds	r7, #32
 8004602:	46bd      	mov	sp, r7
 8004604:	bd80      	pop	{r7, pc}

08004606 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004606:	b580      	push	{r7, lr}
 8004608:	b088      	sub	sp, #32
 800460a:	af02      	add	r7, sp, #8
 800460c:	60f8      	str	r0, [r7, #12]
 800460e:	60b9      	str	r1, [r7, #8]
 8004610:	603b      	str	r3, [r7, #0]
 8004612:	4613      	mov	r3, r2
 8004614:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800461c:	b2db      	uxtb	r3, r3
 800461e:	2b01      	cmp	r3, #1
 8004620:	d001      	beq.n	8004626 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8004622:	2302      	movs	r3, #2
 8004624:	e104      	b.n	8004830 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	685b      	ldr	r3, [r3, #4]
 800462a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800462e:	d112      	bne.n	8004656 <HAL_SPI_Receive+0x50>
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	689b      	ldr	r3, [r3, #8]
 8004634:	2b00      	cmp	r3, #0
 8004636:	d10e      	bne.n	8004656 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	2204      	movs	r2, #4
 800463c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004640:	88fa      	ldrh	r2, [r7, #6]
 8004642:	683b      	ldr	r3, [r7, #0]
 8004644:	9300      	str	r3, [sp, #0]
 8004646:	4613      	mov	r3, r2
 8004648:	68ba      	ldr	r2, [r7, #8]
 800464a:	68b9      	ldr	r1, [r7, #8]
 800464c:	68f8      	ldr	r0, [r7, #12]
 800464e:	f000 f8f3 	bl	8004838 <HAL_SPI_TransmitReceive>
 8004652:	4603      	mov	r3, r0
 8004654:	e0ec      	b.n	8004830 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004656:	f7fd fe57 	bl	8002308 <HAL_GetTick>
 800465a:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 800465c:	68bb      	ldr	r3, [r7, #8]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d002      	beq.n	8004668 <HAL_SPI_Receive+0x62>
 8004662:	88fb      	ldrh	r3, [r7, #6]
 8004664:	2b00      	cmp	r3, #0
 8004666:	d101      	bne.n	800466c <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8004668:	2301      	movs	r3, #1
 800466a:	e0e1      	b.n	8004830 <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004672:	2b01      	cmp	r3, #1
 8004674:	d101      	bne.n	800467a <HAL_SPI_Receive+0x74>
 8004676:	2302      	movs	r3, #2
 8004678:	e0da      	b.n	8004830 <HAL_SPI_Receive+0x22a>
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	2201      	movs	r2, #1
 800467e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	2204      	movs	r2, #4
 8004686:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	2200      	movs	r2, #0
 800468e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	68ba      	ldr	r2, [r7, #8]
 8004694:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	88fa      	ldrh	r2, [r7, #6]
 800469a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	88fa      	ldrh	r2, [r7, #6]
 80046a0:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	2200      	movs	r2, #0
 80046a6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	2200      	movs	r2, #0
 80046ac:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	2200      	movs	r2, #0
 80046b2:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	2200      	movs	r2, #0
 80046b8:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	2200      	movs	r2, #0
 80046be:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	689b      	ldr	r3, [r3, #8]
 80046c4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80046c8:	d10f      	bne.n	80046ea <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	681a      	ldr	r2, [r3, #0]
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80046d8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	681a      	ldr	r2, [r3, #0]
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80046e8:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046f4:	2b40      	cmp	r3, #64	@ 0x40
 80046f6:	d007      	beq.n	8004708 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	681a      	ldr	r2, [r3, #0]
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004706:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	68db      	ldr	r3, [r3, #12]
 800470c:	2b00      	cmp	r3, #0
 800470e:	d170      	bne.n	80047f2 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004710:	e035      	b.n	800477e <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	689b      	ldr	r3, [r3, #8]
 8004718:	f003 0301 	and.w	r3, r3, #1
 800471c:	2b01      	cmp	r3, #1
 800471e:	d115      	bne.n	800474c <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f103 020c 	add.w	r2, r3, #12
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800472c:	7812      	ldrb	r2, [r2, #0]
 800472e:	b2d2      	uxtb	r2, r2
 8004730:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004736:	1c5a      	adds	r2, r3, #1
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004740:	b29b      	uxth	r3, r3
 8004742:	3b01      	subs	r3, #1
 8004744:	b29a      	uxth	r2, r3
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800474a:	e018      	b.n	800477e <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800474c:	f7fd fddc 	bl	8002308 <HAL_GetTick>
 8004750:	4602      	mov	r2, r0
 8004752:	697b      	ldr	r3, [r7, #20]
 8004754:	1ad3      	subs	r3, r2, r3
 8004756:	683a      	ldr	r2, [r7, #0]
 8004758:	429a      	cmp	r2, r3
 800475a:	d803      	bhi.n	8004764 <HAL_SPI_Receive+0x15e>
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004762:	d102      	bne.n	800476a <HAL_SPI_Receive+0x164>
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	2b00      	cmp	r3, #0
 8004768:	d109      	bne.n	800477e <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	2201      	movs	r2, #1
 800476e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	2200      	movs	r2, #0
 8004776:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800477a:	2303      	movs	r3, #3
 800477c:	e058      	b.n	8004830 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004782:	b29b      	uxth	r3, r3
 8004784:	2b00      	cmp	r3, #0
 8004786:	d1c4      	bne.n	8004712 <HAL_SPI_Receive+0x10c>
 8004788:	e038      	b.n	80047fc <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	689b      	ldr	r3, [r3, #8]
 8004790:	f003 0301 	and.w	r3, r3, #1
 8004794:	2b01      	cmp	r3, #1
 8004796:	d113      	bne.n	80047c0 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	68da      	ldr	r2, [r3, #12]
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047a2:	b292      	uxth	r2, r2
 80047a4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047aa:	1c9a      	adds	r2, r3, #2
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80047b4:	b29b      	uxth	r3, r3
 80047b6:	3b01      	subs	r3, #1
 80047b8:	b29a      	uxth	r2, r3
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80047be:	e018      	b.n	80047f2 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80047c0:	f7fd fda2 	bl	8002308 <HAL_GetTick>
 80047c4:	4602      	mov	r2, r0
 80047c6:	697b      	ldr	r3, [r7, #20]
 80047c8:	1ad3      	subs	r3, r2, r3
 80047ca:	683a      	ldr	r2, [r7, #0]
 80047cc:	429a      	cmp	r2, r3
 80047ce:	d803      	bhi.n	80047d8 <HAL_SPI_Receive+0x1d2>
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047d6:	d102      	bne.n	80047de <HAL_SPI_Receive+0x1d8>
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d109      	bne.n	80047f2 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	2201      	movs	r2, #1
 80047e2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	2200      	movs	r2, #0
 80047ea:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80047ee:	2303      	movs	r3, #3
 80047f0:	e01e      	b.n	8004830 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80047f6:	b29b      	uxth	r3, r3
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d1c6      	bne.n	800478a <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80047fc:	697a      	ldr	r2, [r7, #20]
 80047fe:	6839      	ldr	r1, [r7, #0]
 8004800:	68f8      	ldr	r0, [r7, #12]
 8004802:	f000 fa59 	bl	8004cb8 <SPI_EndRxTransaction>
 8004806:	4603      	mov	r3, r0
 8004808:	2b00      	cmp	r3, #0
 800480a:	d002      	beq.n	8004812 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	2220      	movs	r2, #32
 8004810:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	2201      	movs	r2, #1
 8004816:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	2200      	movs	r2, #0
 800481e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004826:	2b00      	cmp	r3, #0
 8004828:	d001      	beq.n	800482e <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 800482a:	2301      	movs	r3, #1
 800482c:	e000      	b.n	8004830 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 800482e:	2300      	movs	r3, #0
  }
}
 8004830:	4618      	mov	r0, r3
 8004832:	3718      	adds	r7, #24
 8004834:	46bd      	mov	sp, r7
 8004836:	bd80      	pop	{r7, pc}

08004838 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004838:	b580      	push	{r7, lr}
 800483a:	b08a      	sub	sp, #40	@ 0x28
 800483c:	af00      	add	r7, sp, #0
 800483e:	60f8      	str	r0, [r7, #12]
 8004840:	60b9      	str	r1, [r7, #8]
 8004842:	607a      	str	r2, [r7, #4]
 8004844:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004846:	2301      	movs	r3, #1
 8004848:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800484a:	f7fd fd5d 	bl	8002308 <HAL_GetTick>
 800484e:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004856:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	685b      	ldr	r3, [r3, #4]
 800485c:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800485e:	887b      	ldrh	r3, [r7, #2]
 8004860:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004862:	7ffb      	ldrb	r3, [r7, #31]
 8004864:	2b01      	cmp	r3, #1
 8004866:	d00c      	beq.n	8004882 <HAL_SPI_TransmitReceive+0x4a>
 8004868:	69bb      	ldr	r3, [r7, #24]
 800486a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800486e:	d106      	bne.n	800487e <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	689b      	ldr	r3, [r3, #8]
 8004874:	2b00      	cmp	r3, #0
 8004876:	d102      	bne.n	800487e <HAL_SPI_TransmitReceive+0x46>
 8004878:	7ffb      	ldrb	r3, [r7, #31]
 800487a:	2b04      	cmp	r3, #4
 800487c:	d001      	beq.n	8004882 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 800487e:	2302      	movs	r3, #2
 8004880:	e17f      	b.n	8004b82 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004882:	68bb      	ldr	r3, [r7, #8]
 8004884:	2b00      	cmp	r3, #0
 8004886:	d005      	beq.n	8004894 <HAL_SPI_TransmitReceive+0x5c>
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2b00      	cmp	r3, #0
 800488c:	d002      	beq.n	8004894 <HAL_SPI_TransmitReceive+0x5c>
 800488e:	887b      	ldrh	r3, [r7, #2]
 8004890:	2b00      	cmp	r3, #0
 8004892:	d101      	bne.n	8004898 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8004894:	2301      	movs	r3, #1
 8004896:	e174      	b.n	8004b82 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800489e:	2b01      	cmp	r3, #1
 80048a0:	d101      	bne.n	80048a6 <HAL_SPI_TransmitReceive+0x6e>
 80048a2:	2302      	movs	r3, #2
 80048a4:	e16d      	b.n	8004b82 <HAL_SPI_TransmitReceive+0x34a>
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	2201      	movs	r2, #1
 80048aa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80048b4:	b2db      	uxtb	r3, r3
 80048b6:	2b04      	cmp	r3, #4
 80048b8:	d003      	beq.n	80048c2 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	2205      	movs	r2, #5
 80048be:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	2200      	movs	r2, #0
 80048c6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	687a      	ldr	r2, [r7, #4]
 80048cc:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	887a      	ldrh	r2, [r7, #2]
 80048d2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	887a      	ldrh	r2, [r7, #2]
 80048d8:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	68ba      	ldr	r2, [r7, #8]
 80048de:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	887a      	ldrh	r2, [r7, #2]
 80048e4:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	887a      	ldrh	r2, [r7, #2]
 80048ea:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	2200      	movs	r2, #0
 80048f0:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	2200      	movs	r2, #0
 80048f6:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004902:	2b40      	cmp	r3, #64	@ 0x40
 8004904:	d007      	beq.n	8004916 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	681a      	ldr	r2, [r3, #0]
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004914:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	68db      	ldr	r3, [r3, #12]
 800491a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800491e:	d17e      	bne.n	8004a1e <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	685b      	ldr	r3, [r3, #4]
 8004924:	2b00      	cmp	r3, #0
 8004926:	d002      	beq.n	800492e <HAL_SPI_TransmitReceive+0xf6>
 8004928:	8afb      	ldrh	r3, [r7, #22]
 800492a:	2b01      	cmp	r3, #1
 800492c:	d16c      	bne.n	8004a08 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004932:	881a      	ldrh	r2, [r3, #0]
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800493e:	1c9a      	adds	r2, r3, #2
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004948:	b29b      	uxth	r3, r3
 800494a:	3b01      	subs	r3, #1
 800494c:	b29a      	uxth	r2, r3
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004952:	e059      	b.n	8004a08 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	689b      	ldr	r3, [r3, #8]
 800495a:	f003 0302 	and.w	r3, r3, #2
 800495e:	2b02      	cmp	r3, #2
 8004960:	d11b      	bne.n	800499a <HAL_SPI_TransmitReceive+0x162>
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004966:	b29b      	uxth	r3, r3
 8004968:	2b00      	cmp	r3, #0
 800496a:	d016      	beq.n	800499a <HAL_SPI_TransmitReceive+0x162>
 800496c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800496e:	2b01      	cmp	r3, #1
 8004970:	d113      	bne.n	800499a <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004976:	881a      	ldrh	r2, [r3, #0]
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004982:	1c9a      	adds	r2, r3, #2
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800498c:	b29b      	uxth	r3, r3
 800498e:	3b01      	subs	r3, #1
 8004990:	b29a      	uxth	r2, r3
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004996:	2300      	movs	r3, #0
 8004998:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	689b      	ldr	r3, [r3, #8]
 80049a0:	f003 0301 	and.w	r3, r3, #1
 80049a4:	2b01      	cmp	r3, #1
 80049a6:	d119      	bne.n	80049dc <HAL_SPI_TransmitReceive+0x1a4>
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80049ac:	b29b      	uxth	r3, r3
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d014      	beq.n	80049dc <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	68da      	ldr	r2, [r3, #12]
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049bc:	b292      	uxth	r2, r2
 80049be:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049c4:	1c9a      	adds	r2, r3, #2
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80049ce:	b29b      	uxth	r3, r3
 80049d0:	3b01      	subs	r3, #1
 80049d2:	b29a      	uxth	r2, r3
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80049d8:	2301      	movs	r3, #1
 80049da:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80049dc:	f7fd fc94 	bl	8002308 <HAL_GetTick>
 80049e0:	4602      	mov	r2, r0
 80049e2:	6a3b      	ldr	r3, [r7, #32]
 80049e4:	1ad3      	subs	r3, r2, r3
 80049e6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80049e8:	429a      	cmp	r2, r3
 80049ea:	d80d      	bhi.n	8004a08 <HAL_SPI_TransmitReceive+0x1d0>
 80049ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049f2:	d009      	beq.n	8004a08 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	2201      	movs	r2, #1
 80049f8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	2200      	movs	r2, #0
 8004a00:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8004a04:	2303      	movs	r3, #3
 8004a06:	e0bc      	b.n	8004b82 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004a0c:	b29b      	uxth	r3, r3
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d1a0      	bne.n	8004954 <HAL_SPI_TransmitReceive+0x11c>
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004a16:	b29b      	uxth	r3, r3
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d19b      	bne.n	8004954 <HAL_SPI_TransmitReceive+0x11c>
 8004a1c:	e082      	b.n	8004b24 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	685b      	ldr	r3, [r3, #4]
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d002      	beq.n	8004a2c <HAL_SPI_TransmitReceive+0x1f4>
 8004a26:	8afb      	ldrh	r3, [r7, #22]
 8004a28:	2b01      	cmp	r3, #1
 8004a2a:	d171      	bne.n	8004b10 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	330c      	adds	r3, #12
 8004a36:	7812      	ldrb	r2, [r2, #0]
 8004a38:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a3e:	1c5a      	adds	r2, r3, #1
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004a48:	b29b      	uxth	r3, r3
 8004a4a:	3b01      	subs	r3, #1
 8004a4c:	b29a      	uxth	r2, r3
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004a52:	e05d      	b.n	8004b10 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	689b      	ldr	r3, [r3, #8]
 8004a5a:	f003 0302 	and.w	r3, r3, #2
 8004a5e:	2b02      	cmp	r3, #2
 8004a60:	d11c      	bne.n	8004a9c <HAL_SPI_TransmitReceive+0x264>
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004a66:	b29b      	uxth	r3, r3
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d017      	beq.n	8004a9c <HAL_SPI_TransmitReceive+0x264>
 8004a6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a6e:	2b01      	cmp	r3, #1
 8004a70:	d114      	bne.n	8004a9c <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	330c      	adds	r3, #12
 8004a7c:	7812      	ldrb	r2, [r2, #0]
 8004a7e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a84:	1c5a      	adds	r2, r3, #1
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004a8e:	b29b      	uxth	r3, r3
 8004a90:	3b01      	subs	r3, #1
 8004a92:	b29a      	uxth	r2, r3
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004a98:	2300      	movs	r3, #0
 8004a9a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	689b      	ldr	r3, [r3, #8]
 8004aa2:	f003 0301 	and.w	r3, r3, #1
 8004aa6:	2b01      	cmp	r3, #1
 8004aa8:	d119      	bne.n	8004ade <HAL_SPI_TransmitReceive+0x2a6>
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004aae:	b29b      	uxth	r3, r3
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d014      	beq.n	8004ade <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	68da      	ldr	r2, [r3, #12]
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004abe:	b2d2      	uxtb	r2, r2
 8004ac0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ac6:	1c5a      	adds	r2, r3, #1
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004ad0:	b29b      	uxth	r3, r3
 8004ad2:	3b01      	subs	r3, #1
 8004ad4:	b29a      	uxth	r2, r3
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004ada:	2301      	movs	r3, #1
 8004adc:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004ade:	f7fd fc13 	bl	8002308 <HAL_GetTick>
 8004ae2:	4602      	mov	r2, r0
 8004ae4:	6a3b      	ldr	r3, [r7, #32]
 8004ae6:	1ad3      	subs	r3, r2, r3
 8004ae8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004aea:	429a      	cmp	r2, r3
 8004aec:	d803      	bhi.n	8004af6 <HAL_SPI_TransmitReceive+0x2be>
 8004aee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004af0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004af4:	d102      	bne.n	8004afc <HAL_SPI_TransmitReceive+0x2c4>
 8004af6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d109      	bne.n	8004b10 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	2201      	movs	r2, #1
 8004b00:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	2200      	movs	r2, #0
 8004b08:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8004b0c:	2303      	movs	r3, #3
 8004b0e:	e038      	b.n	8004b82 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004b14:	b29b      	uxth	r3, r3
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d19c      	bne.n	8004a54 <HAL_SPI_TransmitReceive+0x21c>
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004b1e:	b29b      	uxth	r3, r3
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d197      	bne.n	8004a54 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004b24:	6a3a      	ldr	r2, [r7, #32]
 8004b26:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004b28:	68f8      	ldr	r0, [r7, #12]
 8004b2a:	f000 f92b 	bl	8004d84 <SPI_EndRxTxTransaction>
 8004b2e:	4603      	mov	r3, r0
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d008      	beq.n	8004b46 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	2220      	movs	r2, #32
 8004b38:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8004b42:	2301      	movs	r3, #1
 8004b44:	e01d      	b.n	8004b82 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	689b      	ldr	r3, [r3, #8]
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d10a      	bne.n	8004b64 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004b4e:	2300      	movs	r3, #0
 8004b50:	613b      	str	r3, [r7, #16]
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	68db      	ldr	r3, [r3, #12]
 8004b58:	613b      	str	r3, [r7, #16]
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	689b      	ldr	r3, [r3, #8]
 8004b60:	613b      	str	r3, [r7, #16]
 8004b62:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	2201      	movs	r2, #1
 8004b68:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	2200      	movs	r2, #0
 8004b70:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d001      	beq.n	8004b80 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8004b7c:	2301      	movs	r3, #1
 8004b7e:	e000      	b.n	8004b82 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8004b80:	2300      	movs	r3, #0
  }
}
 8004b82:	4618      	mov	r0, r3
 8004b84:	3728      	adds	r7, #40	@ 0x28
 8004b86:	46bd      	mov	sp, r7
 8004b88:	bd80      	pop	{r7, pc}

08004b8a <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 8004b8a:	b480      	push	{r7}
 8004b8c:	b083      	sub	sp, #12
 8004b8e:	af00      	add	r7, sp, #0
 8004b90:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004b98:	b2db      	uxtb	r3, r3
}
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	370c      	adds	r7, #12
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba4:	4770      	bx	lr
	...

08004ba8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	b088      	sub	sp, #32
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	60f8      	str	r0, [r7, #12]
 8004bb0:	60b9      	str	r1, [r7, #8]
 8004bb2:	603b      	str	r3, [r7, #0]
 8004bb4:	4613      	mov	r3, r2
 8004bb6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004bb8:	f7fd fba6 	bl	8002308 <HAL_GetTick>
 8004bbc:	4602      	mov	r2, r0
 8004bbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bc0:	1a9b      	subs	r3, r3, r2
 8004bc2:	683a      	ldr	r2, [r7, #0]
 8004bc4:	4413      	add	r3, r2
 8004bc6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004bc8:	f7fd fb9e 	bl	8002308 <HAL_GetTick>
 8004bcc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004bce:	4b39      	ldr	r3, [pc, #228]	@ (8004cb4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	015b      	lsls	r3, r3, #5
 8004bd4:	0d1b      	lsrs	r3, r3, #20
 8004bd6:	69fa      	ldr	r2, [r7, #28]
 8004bd8:	fb02 f303 	mul.w	r3, r2, r3
 8004bdc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004bde:	e054      	b.n	8004c8a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004be6:	d050      	beq.n	8004c8a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004be8:	f7fd fb8e 	bl	8002308 <HAL_GetTick>
 8004bec:	4602      	mov	r2, r0
 8004bee:	69bb      	ldr	r3, [r7, #24]
 8004bf0:	1ad3      	subs	r3, r2, r3
 8004bf2:	69fa      	ldr	r2, [r7, #28]
 8004bf4:	429a      	cmp	r2, r3
 8004bf6:	d902      	bls.n	8004bfe <SPI_WaitFlagStateUntilTimeout+0x56>
 8004bf8:	69fb      	ldr	r3, [r7, #28]
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d13d      	bne.n	8004c7a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	685a      	ldr	r2, [r3, #4]
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004c0c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	685b      	ldr	r3, [r3, #4]
 8004c12:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004c16:	d111      	bne.n	8004c3c <SPI_WaitFlagStateUntilTimeout+0x94>
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	689b      	ldr	r3, [r3, #8]
 8004c1c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004c20:	d004      	beq.n	8004c2c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	689b      	ldr	r3, [r3, #8]
 8004c26:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c2a:	d107      	bne.n	8004c3c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	681a      	ldr	r2, [r3, #0]
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004c3a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c40:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004c44:	d10f      	bne.n	8004c66 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	681a      	ldr	r2, [r3, #0]
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004c54:	601a      	str	r2, [r3, #0]
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	681a      	ldr	r2, [r3, #0]
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004c64:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	2201      	movs	r2, #1
 8004c6a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	2200      	movs	r2, #0
 8004c72:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8004c76:	2303      	movs	r3, #3
 8004c78:	e017      	b.n	8004caa <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004c7a:	697b      	ldr	r3, [r7, #20]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d101      	bne.n	8004c84 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004c80:	2300      	movs	r3, #0
 8004c82:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004c84:	697b      	ldr	r3, [r7, #20]
 8004c86:	3b01      	subs	r3, #1
 8004c88:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	689a      	ldr	r2, [r3, #8]
 8004c90:	68bb      	ldr	r3, [r7, #8]
 8004c92:	4013      	ands	r3, r2
 8004c94:	68ba      	ldr	r2, [r7, #8]
 8004c96:	429a      	cmp	r2, r3
 8004c98:	bf0c      	ite	eq
 8004c9a:	2301      	moveq	r3, #1
 8004c9c:	2300      	movne	r3, #0
 8004c9e:	b2db      	uxtb	r3, r3
 8004ca0:	461a      	mov	r2, r3
 8004ca2:	79fb      	ldrb	r3, [r7, #7]
 8004ca4:	429a      	cmp	r2, r3
 8004ca6:	d19b      	bne.n	8004be0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004ca8:	2300      	movs	r3, #0
}
 8004caa:	4618      	mov	r0, r3
 8004cac:	3720      	adds	r7, #32
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	bd80      	pop	{r7, pc}
 8004cb2:	bf00      	nop
 8004cb4:	20000010 	.word	0x20000010

08004cb8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	b086      	sub	sp, #24
 8004cbc:	af02      	add	r7, sp, #8
 8004cbe:	60f8      	str	r0, [r7, #12]
 8004cc0:	60b9      	str	r1, [r7, #8]
 8004cc2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	685b      	ldr	r3, [r3, #4]
 8004cc8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004ccc:	d111      	bne.n	8004cf2 <SPI_EndRxTransaction+0x3a>
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	689b      	ldr	r3, [r3, #8]
 8004cd2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004cd6:	d004      	beq.n	8004ce2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	689b      	ldr	r3, [r3, #8]
 8004cdc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004ce0:	d107      	bne.n	8004cf2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	681a      	ldr	r2, [r3, #0]
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004cf0:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	685b      	ldr	r3, [r3, #4]
 8004cf6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004cfa:	d12a      	bne.n	8004d52 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	689b      	ldr	r3, [r3, #8]
 8004d00:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004d04:	d012      	beq.n	8004d2c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	9300      	str	r3, [sp, #0]
 8004d0a:	68bb      	ldr	r3, [r7, #8]
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	2180      	movs	r1, #128	@ 0x80
 8004d10:	68f8      	ldr	r0, [r7, #12]
 8004d12:	f7ff ff49 	bl	8004ba8 <SPI_WaitFlagStateUntilTimeout>
 8004d16:	4603      	mov	r3, r0
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d02d      	beq.n	8004d78 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d20:	f043 0220 	orr.w	r2, r3, #32
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8004d28:	2303      	movs	r3, #3
 8004d2a:	e026      	b.n	8004d7a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	9300      	str	r3, [sp, #0]
 8004d30:	68bb      	ldr	r3, [r7, #8]
 8004d32:	2200      	movs	r2, #0
 8004d34:	2101      	movs	r1, #1
 8004d36:	68f8      	ldr	r0, [r7, #12]
 8004d38:	f7ff ff36 	bl	8004ba8 <SPI_WaitFlagStateUntilTimeout>
 8004d3c:	4603      	mov	r3, r0
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d01a      	beq.n	8004d78 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d46:	f043 0220 	orr.w	r2, r3, #32
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8004d4e:	2303      	movs	r3, #3
 8004d50:	e013      	b.n	8004d7a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	9300      	str	r3, [sp, #0]
 8004d56:	68bb      	ldr	r3, [r7, #8]
 8004d58:	2200      	movs	r2, #0
 8004d5a:	2101      	movs	r1, #1
 8004d5c:	68f8      	ldr	r0, [r7, #12]
 8004d5e:	f7ff ff23 	bl	8004ba8 <SPI_WaitFlagStateUntilTimeout>
 8004d62:	4603      	mov	r3, r0
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d007      	beq.n	8004d78 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d6c:	f043 0220 	orr.w	r2, r3, #32
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8004d74:	2303      	movs	r3, #3
 8004d76:	e000      	b.n	8004d7a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8004d78:	2300      	movs	r3, #0
}
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	3710      	adds	r7, #16
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	bd80      	pop	{r7, pc}
	...

08004d84 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004d84:	b580      	push	{r7, lr}
 8004d86:	b088      	sub	sp, #32
 8004d88:	af02      	add	r7, sp, #8
 8004d8a:	60f8      	str	r0, [r7, #12]
 8004d8c:	60b9      	str	r1, [r7, #8]
 8004d8e:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	9300      	str	r3, [sp, #0]
 8004d94:	68bb      	ldr	r3, [r7, #8]
 8004d96:	2201      	movs	r2, #1
 8004d98:	2102      	movs	r1, #2
 8004d9a:	68f8      	ldr	r0, [r7, #12]
 8004d9c:	f7ff ff04 	bl	8004ba8 <SPI_WaitFlagStateUntilTimeout>
 8004da0:	4603      	mov	r3, r0
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d007      	beq.n	8004db6 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004daa:	f043 0220 	orr.w	r2, r3, #32
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8004db2:	2303      	movs	r3, #3
 8004db4:	e032      	b.n	8004e1c <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004db6:	4b1b      	ldr	r3, [pc, #108]	@ (8004e24 <SPI_EndRxTxTransaction+0xa0>)
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	4a1b      	ldr	r2, [pc, #108]	@ (8004e28 <SPI_EndRxTxTransaction+0xa4>)
 8004dbc:	fba2 2303 	umull	r2, r3, r2, r3
 8004dc0:	0d5b      	lsrs	r3, r3, #21
 8004dc2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004dc6:	fb02 f303 	mul.w	r3, r2, r3
 8004dca:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	685b      	ldr	r3, [r3, #4]
 8004dd0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004dd4:	d112      	bne.n	8004dfc <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	9300      	str	r3, [sp, #0]
 8004dda:	68bb      	ldr	r3, [r7, #8]
 8004ddc:	2200      	movs	r2, #0
 8004dde:	2180      	movs	r1, #128	@ 0x80
 8004de0:	68f8      	ldr	r0, [r7, #12]
 8004de2:	f7ff fee1 	bl	8004ba8 <SPI_WaitFlagStateUntilTimeout>
 8004de6:	4603      	mov	r3, r0
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d016      	beq.n	8004e1a <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004df0:	f043 0220 	orr.w	r2, r3, #32
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8004df8:	2303      	movs	r3, #3
 8004dfa:	e00f      	b.n	8004e1c <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004dfc:	697b      	ldr	r3, [r7, #20]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d00a      	beq.n	8004e18 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8004e02:	697b      	ldr	r3, [r7, #20]
 8004e04:	3b01      	subs	r3, #1
 8004e06:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	689b      	ldr	r3, [r3, #8]
 8004e0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e12:	2b80      	cmp	r3, #128	@ 0x80
 8004e14:	d0f2      	beq.n	8004dfc <SPI_EndRxTxTransaction+0x78>
 8004e16:	e000      	b.n	8004e1a <SPI_EndRxTxTransaction+0x96>
        break;
 8004e18:	bf00      	nop
  }

  return HAL_OK;
 8004e1a:	2300      	movs	r3, #0
}
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	3718      	adds	r7, #24
 8004e20:	46bd      	mov	sp, r7
 8004e22:	bd80      	pop	{r7, pc}
 8004e24:	20000010 	.word	0x20000010
 8004e28:	165e9f81 	.word	0x165e9f81

08004e2c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	b082      	sub	sp, #8
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d101      	bne.n	8004e3e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004e3a:	2301      	movs	r3, #1
 8004e3c:	e042      	b.n	8004ec4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004e44:	b2db      	uxtb	r3, r3
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d106      	bne.n	8004e58 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004e52:	6878      	ldr	r0, [r7, #4]
 8004e54:	f7fc fe16 	bl	8001a84 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2224      	movs	r2, #36	@ 0x24
 8004e5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	68da      	ldr	r2, [r3, #12]
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004e6e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004e70:	6878      	ldr	r0, [r7, #4]
 8004e72:	f000 fa09 	bl	8005288 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	691a      	ldr	r2, [r3, #16]
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004e84:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	695a      	ldr	r2, [r3, #20]
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004e94:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	68da      	ldr	r2, [r3, #12]
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004ea4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2220      	movs	r2, #32
 8004eb0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2220      	movs	r2, #32
 8004eb8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004ec2:	2300      	movs	r3, #0
}
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	3708      	adds	r7, #8
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	bd80      	pop	{r7, pc}

08004ecc <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	b08a      	sub	sp, #40	@ 0x28
 8004ed0:	af02      	add	r7, sp, #8
 8004ed2:	60f8      	str	r0, [r7, #12]
 8004ed4:	60b9      	str	r1, [r7, #8]
 8004ed6:	603b      	str	r3, [r7, #0]
 8004ed8:	4613      	mov	r3, r2
 8004eda:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004edc:	2300      	movs	r3, #0
 8004ede:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004ee6:	b2db      	uxtb	r3, r3
 8004ee8:	2b20      	cmp	r3, #32
 8004eea:	d175      	bne.n	8004fd8 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004eec:	68bb      	ldr	r3, [r7, #8]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d002      	beq.n	8004ef8 <HAL_UART_Transmit+0x2c>
 8004ef2:	88fb      	ldrh	r3, [r7, #6]
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d101      	bne.n	8004efc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004ef8:	2301      	movs	r3, #1
 8004efa:	e06e      	b.n	8004fda <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	2200      	movs	r2, #0
 8004f00:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	2221      	movs	r2, #33	@ 0x21
 8004f06:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004f0a:	f7fd f9fd 	bl	8002308 <HAL_GetTick>
 8004f0e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	88fa      	ldrh	r2, [r7, #6]
 8004f14:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	88fa      	ldrh	r2, [r7, #6]
 8004f1a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	689b      	ldr	r3, [r3, #8]
 8004f20:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004f24:	d108      	bne.n	8004f38 <HAL_UART_Transmit+0x6c>
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	691b      	ldr	r3, [r3, #16]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d104      	bne.n	8004f38 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004f2e:	2300      	movs	r3, #0
 8004f30:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004f32:	68bb      	ldr	r3, [r7, #8]
 8004f34:	61bb      	str	r3, [r7, #24]
 8004f36:	e003      	b.n	8004f40 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004f38:	68bb      	ldr	r3, [r7, #8]
 8004f3a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004f3c:	2300      	movs	r3, #0
 8004f3e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004f40:	e02e      	b.n	8004fa0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004f42:	683b      	ldr	r3, [r7, #0]
 8004f44:	9300      	str	r3, [sp, #0]
 8004f46:	697b      	ldr	r3, [r7, #20]
 8004f48:	2200      	movs	r2, #0
 8004f4a:	2180      	movs	r1, #128	@ 0x80
 8004f4c:	68f8      	ldr	r0, [r7, #12]
 8004f4e:	f000 f8df 	bl	8005110 <UART_WaitOnFlagUntilTimeout>
 8004f52:	4603      	mov	r3, r0
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d005      	beq.n	8004f64 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	2220      	movs	r2, #32
 8004f5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004f60:	2303      	movs	r3, #3
 8004f62:	e03a      	b.n	8004fda <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004f64:	69fb      	ldr	r3, [r7, #28]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d10b      	bne.n	8004f82 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004f6a:	69bb      	ldr	r3, [r7, #24]
 8004f6c:	881b      	ldrh	r3, [r3, #0]
 8004f6e:	461a      	mov	r2, r3
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004f78:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004f7a:	69bb      	ldr	r3, [r7, #24]
 8004f7c:	3302      	adds	r3, #2
 8004f7e:	61bb      	str	r3, [r7, #24]
 8004f80:	e007      	b.n	8004f92 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004f82:	69fb      	ldr	r3, [r7, #28]
 8004f84:	781a      	ldrb	r2, [r3, #0]
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004f8c:	69fb      	ldr	r3, [r7, #28]
 8004f8e:	3301      	adds	r3, #1
 8004f90:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004f96:	b29b      	uxth	r3, r3
 8004f98:	3b01      	subs	r3, #1
 8004f9a:	b29a      	uxth	r2, r3
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004fa4:	b29b      	uxth	r3, r3
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d1cb      	bne.n	8004f42 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	9300      	str	r3, [sp, #0]
 8004fae:	697b      	ldr	r3, [r7, #20]
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	2140      	movs	r1, #64	@ 0x40
 8004fb4:	68f8      	ldr	r0, [r7, #12]
 8004fb6:	f000 f8ab 	bl	8005110 <UART_WaitOnFlagUntilTimeout>
 8004fba:	4603      	mov	r3, r0
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d005      	beq.n	8004fcc <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	2220      	movs	r2, #32
 8004fc4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004fc8:	2303      	movs	r3, #3
 8004fca:	e006      	b.n	8004fda <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	2220      	movs	r2, #32
 8004fd0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004fd4:	2300      	movs	r3, #0
 8004fd6:	e000      	b.n	8004fda <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004fd8:	2302      	movs	r3, #2
  }
}
 8004fda:	4618      	mov	r0, r3
 8004fdc:	3720      	adds	r7, #32
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	bd80      	pop	{r7, pc}

08004fe2 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004fe2:	b580      	push	{r7, lr}
 8004fe4:	b08a      	sub	sp, #40	@ 0x28
 8004fe6:	af02      	add	r7, sp, #8
 8004fe8:	60f8      	str	r0, [r7, #12]
 8004fea:	60b9      	str	r1, [r7, #8]
 8004fec:	603b      	str	r3, [r7, #0]
 8004fee:	4613      	mov	r3, r2
 8004ff0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004ff2:	2300      	movs	r3, #0
 8004ff4:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004ffc:	b2db      	uxtb	r3, r3
 8004ffe:	2b20      	cmp	r3, #32
 8005000:	f040 8081 	bne.w	8005106 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8005004:	68bb      	ldr	r3, [r7, #8]
 8005006:	2b00      	cmp	r3, #0
 8005008:	d002      	beq.n	8005010 <HAL_UART_Receive+0x2e>
 800500a:	88fb      	ldrh	r3, [r7, #6]
 800500c:	2b00      	cmp	r3, #0
 800500e:	d101      	bne.n	8005014 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8005010:	2301      	movs	r3, #1
 8005012:	e079      	b.n	8005108 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	2200      	movs	r2, #0
 8005018:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	2222      	movs	r2, #34	@ 0x22
 800501e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	2200      	movs	r2, #0
 8005026:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005028:	f7fd f96e 	bl	8002308 <HAL_GetTick>
 800502c:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	88fa      	ldrh	r2, [r7, #6]
 8005032:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	88fa      	ldrh	r2, [r7, #6]
 8005038:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	689b      	ldr	r3, [r3, #8]
 800503e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005042:	d108      	bne.n	8005056 <HAL_UART_Receive+0x74>
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	691b      	ldr	r3, [r3, #16]
 8005048:	2b00      	cmp	r3, #0
 800504a:	d104      	bne.n	8005056 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 800504c:	2300      	movs	r3, #0
 800504e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005050:	68bb      	ldr	r3, [r7, #8]
 8005052:	61bb      	str	r3, [r7, #24]
 8005054:	e003      	b.n	800505e <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8005056:	68bb      	ldr	r3, [r7, #8]
 8005058:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800505a:	2300      	movs	r3, #0
 800505c:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800505e:	e047      	b.n	80050f0 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	9300      	str	r3, [sp, #0]
 8005064:	697b      	ldr	r3, [r7, #20]
 8005066:	2200      	movs	r2, #0
 8005068:	2120      	movs	r1, #32
 800506a:	68f8      	ldr	r0, [r7, #12]
 800506c:	f000 f850 	bl	8005110 <UART_WaitOnFlagUntilTimeout>
 8005070:	4603      	mov	r3, r0
 8005072:	2b00      	cmp	r3, #0
 8005074:	d005      	beq.n	8005082 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	2220      	movs	r2, #32
 800507a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 800507e:	2303      	movs	r3, #3
 8005080:	e042      	b.n	8005108 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8005082:	69fb      	ldr	r3, [r7, #28]
 8005084:	2b00      	cmp	r3, #0
 8005086:	d10c      	bne.n	80050a2 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	685b      	ldr	r3, [r3, #4]
 800508e:	b29b      	uxth	r3, r3
 8005090:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005094:	b29a      	uxth	r2, r3
 8005096:	69bb      	ldr	r3, [r7, #24]
 8005098:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800509a:	69bb      	ldr	r3, [r7, #24]
 800509c:	3302      	adds	r3, #2
 800509e:	61bb      	str	r3, [r7, #24]
 80050a0:	e01f      	b.n	80050e2 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	689b      	ldr	r3, [r3, #8]
 80050a6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80050aa:	d007      	beq.n	80050bc <HAL_UART_Receive+0xda>
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	689b      	ldr	r3, [r3, #8]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d10a      	bne.n	80050ca <HAL_UART_Receive+0xe8>
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	691b      	ldr	r3, [r3, #16]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d106      	bne.n	80050ca <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	685b      	ldr	r3, [r3, #4]
 80050c2:	b2da      	uxtb	r2, r3
 80050c4:	69fb      	ldr	r3, [r7, #28]
 80050c6:	701a      	strb	r2, [r3, #0]
 80050c8:	e008      	b.n	80050dc <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	685b      	ldr	r3, [r3, #4]
 80050d0:	b2db      	uxtb	r3, r3
 80050d2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80050d6:	b2da      	uxtb	r2, r3
 80050d8:	69fb      	ldr	r3, [r7, #28]
 80050da:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80050dc:	69fb      	ldr	r3, [r7, #28]
 80050de:	3301      	adds	r3, #1
 80050e0:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80050e6:	b29b      	uxth	r3, r3
 80050e8:	3b01      	subs	r3, #1
 80050ea:	b29a      	uxth	r2, r3
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80050f4:	b29b      	uxth	r3, r3
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d1b2      	bne.n	8005060 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	2220      	movs	r2, #32
 80050fe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8005102:	2300      	movs	r3, #0
 8005104:	e000      	b.n	8005108 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8005106:	2302      	movs	r3, #2
  }
}
 8005108:	4618      	mov	r0, r3
 800510a:	3720      	adds	r7, #32
 800510c:	46bd      	mov	sp, r7
 800510e:	bd80      	pop	{r7, pc}

08005110 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005110:	b580      	push	{r7, lr}
 8005112:	b086      	sub	sp, #24
 8005114:	af00      	add	r7, sp, #0
 8005116:	60f8      	str	r0, [r7, #12]
 8005118:	60b9      	str	r1, [r7, #8]
 800511a:	603b      	str	r3, [r7, #0]
 800511c:	4613      	mov	r3, r2
 800511e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005120:	e03b      	b.n	800519a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005122:	6a3b      	ldr	r3, [r7, #32]
 8005124:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005128:	d037      	beq.n	800519a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800512a:	f7fd f8ed 	bl	8002308 <HAL_GetTick>
 800512e:	4602      	mov	r2, r0
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	1ad3      	subs	r3, r2, r3
 8005134:	6a3a      	ldr	r2, [r7, #32]
 8005136:	429a      	cmp	r2, r3
 8005138:	d302      	bcc.n	8005140 <UART_WaitOnFlagUntilTimeout+0x30>
 800513a:	6a3b      	ldr	r3, [r7, #32]
 800513c:	2b00      	cmp	r3, #0
 800513e:	d101      	bne.n	8005144 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005140:	2303      	movs	r3, #3
 8005142:	e03a      	b.n	80051ba <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	68db      	ldr	r3, [r3, #12]
 800514a:	f003 0304 	and.w	r3, r3, #4
 800514e:	2b00      	cmp	r3, #0
 8005150:	d023      	beq.n	800519a <UART_WaitOnFlagUntilTimeout+0x8a>
 8005152:	68bb      	ldr	r3, [r7, #8]
 8005154:	2b80      	cmp	r3, #128	@ 0x80
 8005156:	d020      	beq.n	800519a <UART_WaitOnFlagUntilTimeout+0x8a>
 8005158:	68bb      	ldr	r3, [r7, #8]
 800515a:	2b40      	cmp	r3, #64	@ 0x40
 800515c:	d01d      	beq.n	800519a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f003 0308 	and.w	r3, r3, #8
 8005168:	2b08      	cmp	r3, #8
 800516a:	d116      	bne.n	800519a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800516c:	2300      	movs	r3, #0
 800516e:	617b      	str	r3, [r7, #20]
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	617b      	str	r3, [r7, #20]
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	685b      	ldr	r3, [r3, #4]
 800517e:	617b      	str	r3, [r7, #20]
 8005180:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005182:	68f8      	ldr	r0, [r7, #12]
 8005184:	f000 f81d 	bl	80051c2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	2208      	movs	r2, #8
 800518c:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	2200      	movs	r2, #0
 8005192:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005196:	2301      	movs	r3, #1
 8005198:	e00f      	b.n	80051ba <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	681a      	ldr	r2, [r3, #0]
 80051a0:	68bb      	ldr	r3, [r7, #8]
 80051a2:	4013      	ands	r3, r2
 80051a4:	68ba      	ldr	r2, [r7, #8]
 80051a6:	429a      	cmp	r2, r3
 80051a8:	bf0c      	ite	eq
 80051aa:	2301      	moveq	r3, #1
 80051ac:	2300      	movne	r3, #0
 80051ae:	b2db      	uxtb	r3, r3
 80051b0:	461a      	mov	r2, r3
 80051b2:	79fb      	ldrb	r3, [r7, #7]
 80051b4:	429a      	cmp	r2, r3
 80051b6:	d0b4      	beq.n	8005122 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80051b8:	2300      	movs	r3, #0
}
 80051ba:	4618      	mov	r0, r3
 80051bc:	3718      	adds	r7, #24
 80051be:	46bd      	mov	sp, r7
 80051c0:	bd80      	pop	{r7, pc}

080051c2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80051c2:	b480      	push	{r7}
 80051c4:	b095      	sub	sp, #84	@ 0x54
 80051c6:	af00      	add	r7, sp, #0
 80051c8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	330c      	adds	r3, #12
 80051d0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80051d4:	e853 3f00 	ldrex	r3, [r3]
 80051d8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80051da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051dc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80051e0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	330c      	adds	r3, #12
 80051e8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80051ea:	643a      	str	r2, [r7, #64]	@ 0x40
 80051ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051ee:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80051f0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80051f2:	e841 2300 	strex	r3, r2, [r1]
 80051f6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80051f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d1e5      	bne.n	80051ca <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	3314      	adds	r3, #20
 8005204:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005206:	6a3b      	ldr	r3, [r7, #32]
 8005208:	e853 3f00 	ldrex	r3, [r3]
 800520c:	61fb      	str	r3, [r7, #28]
   return(result);
 800520e:	69fb      	ldr	r3, [r7, #28]
 8005210:	f023 0301 	bic.w	r3, r3, #1
 8005214:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	3314      	adds	r3, #20
 800521c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800521e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005220:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005222:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005224:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005226:	e841 2300 	strex	r3, r2, [r1]
 800522a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800522c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800522e:	2b00      	cmp	r3, #0
 8005230:	d1e5      	bne.n	80051fe <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005236:	2b01      	cmp	r3, #1
 8005238:	d119      	bne.n	800526e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	330c      	adds	r3, #12
 8005240:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	e853 3f00 	ldrex	r3, [r3]
 8005248:	60bb      	str	r3, [r7, #8]
   return(result);
 800524a:	68bb      	ldr	r3, [r7, #8]
 800524c:	f023 0310 	bic.w	r3, r3, #16
 8005250:	647b      	str	r3, [r7, #68]	@ 0x44
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	330c      	adds	r3, #12
 8005258:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800525a:	61ba      	str	r2, [r7, #24]
 800525c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800525e:	6979      	ldr	r1, [r7, #20]
 8005260:	69ba      	ldr	r2, [r7, #24]
 8005262:	e841 2300 	strex	r3, r2, [r1]
 8005266:	613b      	str	r3, [r7, #16]
   return(result);
 8005268:	693b      	ldr	r3, [r7, #16]
 800526a:	2b00      	cmp	r3, #0
 800526c:	d1e5      	bne.n	800523a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	2220      	movs	r2, #32
 8005272:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	2200      	movs	r2, #0
 800527a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800527c:	bf00      	nop
 800527e:	3754      	adds	r7, #84	@ 0x54
 8005280:	46bd      	mov	sp, r7
 8005282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005286:	4770      	bx	lr

08005288 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005288:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800528c:	b0c0      	sub	sp, #256	@ 0x100
 800528e:	af00      	add	r7, sp, #0
 8005290:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005294:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	691b      	ldr	r3, [r3, #16]
 800529c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80052a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052a4:	68d9      	ldr	r1, [r3, #12]
 80052a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052aa:	681a      	ldr	r2, [r3, #0]
 80052ac:	ea40 0301 	orr.w	r3, r0, r1
 80052b0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80052b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052b6:	689a      	ldr	r2, [r3, #8]
 80052b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052bc:	691b      	ldr	r3, [r3, #16]
 80052be:	431a      	orrs	r2, r3
 80052c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052c4:	695b      	ldr	r3, [r3, #20]
 80052c6:	431a      	orrs	r2, r3
 80052c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052cc:	69db      	ldr	r3, [r3, #28]
 80052ce:	4313      	orrs	r3, r2
 80052d0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80052d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	68db      	ldr	r3, [r3, #12]
 80052dc:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80052e0:	f021 010c 	bic.w	r1, r1, #12
 80052e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052e8:	681a      	ldr	r2, [r3, #0]
 80052ea:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80052ee:	430b      	orrs	r3, r1
 80052f0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80052f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	695b      	ldr	r3, [r3, #20]
 80052fa:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80052fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005302:	6999      	ldr	r1, [r3, #24]
 8005304:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005308:	681a      	ldr	r2, [r3, #0]
 800530a:	ea40 0301 	orr.w	r3, r0, r1
 800530e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005310:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005314:	681a      	ldr	r2, [r3, #0]
 8005316:	4b8f      	ldr	r3, [pc, #572]	@ (8005554 <UART_SetConfig+0x2cc>)
 8005318:	429a      	cmp	r2, r3
 800531a:	d005      	beq.n	8005328 <UART_SetConfig+0xa0>
 800531c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005320:	681a      	ldr	r2, [r3, #0]
 8005322:	4b8d      	ldr	r3, [pc, #564]	@ (8005558 <UART_SetConfig+0x2d0>)
 8005324:	429a      	cmp	r2, r3
 8005326:	d104      	bne.n	8005332 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005328:	f7fe ff8c 	bl	8004244 <HAL_RCC_GetPCLK2Freq>
 800532c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005330:	e003      	b.n	800533a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005332:	f7fe ff73 	bl	800421c <HAL_RCC_GetPCLK1Freq>
 8005336:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800533a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800533e:	69db      	ldr	r3, [r3, #28]
 8005340:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005344:	f040 810c 	bne.w	8005560 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005348:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800534c:	2200      	movs	r2, #0
 800534e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005352:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005356:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800535a:	4622      	mov	r2, r4
 800535c:	462b      	mov	r3, r5
 800535e:	1891      	adds	r1, r2, r2
 8005360:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005362:	415b      	adcs	r3, r3
 8005364:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005366:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800536a:	4621      	mov	r1, r4
 800536c:	eb12 0801 	adds.w	r8, r2, r1
 8005370:	4629      	mov	r1, r5
 8005372:	eb43 0901 	adc.w	r9, r3, r1
 8005376:	f04f 0200 	mov.w	r2, #0
 800537a:	f04f 0300 	mov.w	r3, #0
 800537e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005382:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005386:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800538a:	4690      	mov	r8, r2
 800538c:	4699      	mov	r9, r3
 800538e:	4623      	mov	r3, r4
 8005390:	eb18 0303 	adds.w	r3, r8, r3
 8005394:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005398:	462b      	mov	r3, r5
 800539a:	eb49 0303 	adc.w	r3, r9, r3
 800539e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80053a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053a6:	685b      	ldr	r3, [r3, #4]
 80053a8:	2200      	movs	r2, #0
 80053aa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80053ae:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80053b2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80053b6:	460b      	mov	r3, r1
 80053b8:	18db      	adds	r3, r3, r3
 80053ba:	653b      	str	r3, [r7, #80]	@ 0x50
 80053bc:	4613      	mov	r3, r2
 80053be:	eb42 0303 	adc.w	r3, r2, r3
 80053c2:	657b      	str	r3, [r7, #84]	@ 0x54
 80053c4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80053c8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80053cc:	f7fa ff78 	bl	80002c0 <__aeabi_uldivmod>
 80053d0:	4602      	mov	r2, r0
 80053d2:	460b      	mov	r3, r1
 80053d4:	4b61      	ldr	r3, [pc, #388]	@ (800555c <UART_SetConfig+0x2d4>)
 80053d6:	fba3 2302 	umull	r2, r3, r3, r2
 80053da:	095b      	lsrs	r3, r3, #5
 80053dc:	011c      	lsls	r4, r3, #4
 80053de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80053e2:	2200      	movs	r2, #0
 80053e4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80053e8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80053ec:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80053f0:	4642      	mov	r2, r8
 80053f2:	464b      	mov	r3, r9
 80053f4:	1891      	adds	r1, r2, r2
 80053f6:	64b9      	str	r1, [r7, #72]	@ 0x48
 80053f8:	415b      	adcs	r3, r3
 80053fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80053fc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005400:	4641      	mov	r1, r8
 8005402:	eb12 0a01 	adds.w	sl, r2, r1
 8005406:	4649      	mov	r1, r9
 8005408:	eb43 0b01 	adc.w	fp, r3, r1
 800540c:	f04f 0200 	mov.w	r2, #0
 8005410:	f04f 0300 	mov.w	r3, #0
 8005414:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005418:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800541c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005420:	4692      	mov	sl, r2
 8005422:	469b      	mov	fp, r3
 8005424:	4643      	mov	r3, r8
 8005426:	eb1a 0303 	adds.w	r3, sl, r3
 800542a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800542e:	464b      	mov	r3, r9
 8005430:	eb4b 0303 	adc.w	r3, fp, r3
 8005434:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005438:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800543c:	685b      	ldr	r3, [r3, #4]
 800543e:	2200      	movs	r2, #0
 8005440:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005444:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005448:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800544c:	460b      	mov	r3, r1
 800544e:	18db      	adds	r3, r3, r3
 8005450:	643b      	str	r3, [r7, #64]	@ 0x40
 8005452:	4613      	mov	r3, r2
 8005454:	eb42 0303 	adc.w	r3, r2, r3
 8005458:	647b      	str	r3, [r7, #68]	@ 0x44
 800545a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800545e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005462:	f7fa ff2d 	bl	80002c0 <__aeabi_uldivmod>
 8005466:	4602      	mov	r2, r0
 8005468:	460b      	mov	r3, r1
 800546a:	4611      	mov	r1, r2
 800546c:	4b3b      	ldr	r3, [pc, #236]	@ (800555c <UART_SetConfig+0x2d4>)
 800546e:	fba3 2301 	umull	r2, r3, r3, r1
 8005472:	095b      	lsrs	r3, r3, #5
 8005474:	2264      	movs	r2, #100	@ 0x64
 8005476:	fb02 f303 	mul.w	r3, r2, r3
 800547a:	1acb      	subs	r3, r1, r3
 800547c:	00db      	lsls	r3, r3, #3
 800547e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005482:	4b36      	ldr	r3, [pc, #216]	@ (800555c <UART_SetConfig+0x2d4>)
 8005484:	fba3 2302 	umull	r2, r3, r3, r2
 8005488:	095b      	lsrs	r3, r3, #5
 800548a:	005b      	lsls	r3, r3, #1
 800548c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005490:	441c      	add	r4, r3
 8005492:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005496:	2200      	movs	r2, #0
 8005498:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800549c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80054a0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80054a4:	4642      	mov	r2, r8
 80054a6:	464b      	mov	r3, r9
 80054a8:	1891      	adds	r1, r2, r2
 80054aa:	63b9      	str	r1, [r7, #56]	@ 0x38
 80054ac:	415b      	adcs	r3, r3
 80054ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80054b0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80054b4:	4641      	mov	r1, r8
 80054b6:	1851      	adds	r1, r2, r1
 80054b8:	6339      	str	r1, [r7, #48]	@ 0x30
 80054ba:	4649      	mov	r1, r9
 80054bc:	414b      	adcs	r3, r1
 80054be:	637b      	str	r3, [r7, #52]	@ 0x34
 80054c0:	f04f 0200 	mov.w	r2, #0
 80054c4:	f04f 0300 	mov.w	r3, #0
 80054c8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80054cc:	4659      	mov	r1, fp
 80054ce:	00cb      	lsls	r3, r1, #3
 80054d0:	4651      	mov	r1, sl
 80054d2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80054d6:	4651      	mov	r1, sl
 80054d8:	00ca      	lsls	r2, r1, #3
 80054da:	4610      	mov	r0, r2
 80054dc:	4619      	mov	r1, r3
 80054de:	4603      	mov	r3, r0
 80054e0:	4642      	mov	r2, r8
 80054e2:	189b      	adds	r3, r3, r2
 80054e4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80054e8:	464b      	mov	r3, r9
 80054ea:	460a      	mov	r2, r1
 80054ec:	eb42 0303 	adc.w	r3, r2, r3
 80054f0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80054f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054f8:	685b      	ldr	r3, [r3, #4]
 80054fa:	2200      	movs	r2, #0
 80054fc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005500:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005504:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005508:	460b      	mov	r3, r1
 800550a:	18db      	adds	r3, r3, r3
 800550c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800550e:	4613      	mov	r3, r2
 8005510:	eb42 0303 	adc.w	r3, r2, r3
 8005514:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005516:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800551a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800551e:	f7fa fecf 	bl	80002c0 <__aeabi_uldivmod>
 8005522:	4602      	mov	r2, r0
 8005524:	460b      	mov	r3, r1
 8005526:	4b0d      	ldr	r3, [pc, #52]	@ (800555c <UART_SetConfig+0x2d4>)
 8005528:	fba3 1302 	umull	r1, r3, r3, r2
 800552c:	095b      	lsrs	r3, r3, #5
 800552e:	2164      	movs	r1, #100	@ 0x64
 8005530:	fb01 f303 	mul.w	r3, r1, r3
 8005534:	1ad3      	subs	r3, r2, r3
 8005536:	00db      	lsls	r3, r3, #3
 8005538:	3332      	adds	r3, #50	@ 0x32
 800553a:	4a08      	ldr	r2, [pc, #32]	@ (800555c <UART_SetConfig+0x2d4>)
 800553c:	fba2 2303 	umull	r2, r3, r2, r3
 8005540:	095b      	lsrs	r3, r3, #5
 8005542:	f003 0207 	and.w	r2, r3, #7
 8005546:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	4422      	add	r2, r4
 800554e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005550:	e106      	b.n	8005760 <UART_SetConfig+0x4d8>
 8005552:	bf00      	nop
 8005554:	40011000 	.word	0x40011000
 8005558:	40011400 	.word	0x40011400
 800555c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005560:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005564:	2200      	movs	r2, #0
 8005566:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800556a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800556e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005572:	4642      	mov	r2, r8
 8005574:	464b      	mov	r3, r9
 8005576:	1891      	adds	r1, r2, r2
 8005578:	6239      	str	r1, [r7, #32]
 800557a:	415b      	adcs	r3, r3
 800557c:	627b      	str	r3, [r7, #36]	@ 0x24
 800557e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005582:	4641      	mov	r1, r8
 8005584:	1854      	adds	r4, r2, r1
 8005586:	4649      	mov	r1, r9
 8005588:	eb43 0501 	adc.w	r5, r3, r1
 800558c:	f04f 0200 	mov.w	r2, #0
 8005590:	f04f 0300 	mov.w	r3, #0
 8005594:	00eb      	lsls	r3, r5, #3
 8005596:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800559a:	00e2      	lsls	r2, r4, #3
 800559c:	4614      	mov	r4, r2
 800559e:	461d      	mov	r5, r3
 80055a0:	4643      	mov	r3, r8
 80055a2:	18e3      	adds	r3, r4, r3
 80055a4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80055a8:	464b      	mov	r3, r9
 80055aa:	eb45 0303 	adc.w	r3, r5, r3
 80055ae:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80055b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055b6:	685b      	ldr	r3, [r3, #4]
 80055b8:	2200      	movs	r2, #0
 80055ba:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80055be:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80055c2:	f04f 0200 	mov.w	r2, #0
 80055c6:	f04f 0300 	mov.w	r3, #0
 80055ca:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80055ce:	4629      	mov	r1, r5
 80055d0:	008b      	lsls	r3, r1, #2
 80055d2:	4621      	mov	r1, r4
 80055d4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80055d8:	4621      	mov	r1, r4
 80055da:	008a      	lsls	r2, r1, #2
 80055dc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80055e0:	f7fa fe6e 	bl	80002c0 <__aeabi_uldivmod>
 80055e4:	4602      	mov	r2, r0
 80055e6:	460b      	mov	r3, r1
 80055e8:	4b60      	ldr	r3, [pc, #384]	@ (800576c <UART_SetConfig+0x4e4>)
 80055ea:	fba3 2302 	umull	r2, r3, r3, r2
 80055ee:	095b      	lsrs	r3, r3, #5
 80055f0:	011c      	lsls	r4, r3, #4
 80055f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80055f6:	2200      	movs	r2, #0
 80055f8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80055fc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005600:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005604:	4642      	mov	r2, r8
 8005606:	464b      	mov	r3, r9
 8005608:	1891      	adds	r1, r2, r2
 800560a:	61b9      	str	r1, [r7, #24]
 800560c:	415b      	adcs	r3, r3
 800560e:	61fb      	str	r3, [r7, #28]
 8005610:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005614:	4641      	mov	r1, r8
 8005616:	1851      	adds	r1, r2, r1
 8005618:	6139      	str	r1, [r7, #16]
 800561a:	4649      	mov	r1, r9
 800561c:	414b      	adcs	r3, r1
 800561e:	617b      	str	r3, [r7, #20]
 8005620:	f04f 0200 	mov.w	r2, #0
 8005624:	f04f 0300 	mov.w	r3, #0
 8005628:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800562c:	4659      	mov	r1, fp
 800562e:	00cb      	lsls	r3, r1, #3
 8005630:	4651      	mov	r1, sl
 8005632:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005636:	4651      	mov	r1, sl
 8005638:	00ca      	lsls	r2, r1, #3
 800563a:	4610      	mov	r0, r2
 800563c:	4619      	mov	r1, r3
 800563e:	4603      	mov	r3, r0
 8005640:	4642      	mov	r2, r8
 8005642:	189b      	adds	r3, r3, r2
 8005644:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005648:	464b      	mov	r3, r9
 800564a:	460a      	mov	r2, r1
 800564c:	eb42 0303 	adc.w	r3, r2, r3
 8005650:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005654:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005658:	685b      	ldr	r3, [r3, #4]
 800565a:	2200      	movs	r2, #0
 800565c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800565e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005660:	f04f 0200 	mov.w	r2, #0
 8005664:	f04f 0300 	mov.w	r3, #0
 8005668:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800566c:	4649      	mov	r1, r9
 800566e:	008b      	lsls	r3, r1, #2
 8005670:	4641      	mov	r1, r8
 8005672:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005676:	4641      	mov	r1, r8
 8005678:	008a      	lsls	r2, r1, #2
 800567a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800567e:	f7fa fe1f 	bl	80002c0 <__aeabi_uldivmod>
 8005682:	4602      	mov	r2, r0
 8005684:	460b      	mov	r3, r1
 8005686:	4611      	mov	r1, r2
 8005688:	4b38      	ldr	r3, [pc, #224]	@ (800576c <UART_SetConfig+0x4e4>)
 800568a:	fba3 2301 	umull	r2, r3, r3, r1
 800568e:	095b      	lsrs	r3, r3, #5
 8005690:	2264      	movs	r2, #100	@ 0x64
 8005692:	fb02 f303 	mul.w	r3, r2, r3
 8005696:	1acb      	subs	r3, r1, r3
 8005698:	011b      	lsls	r3, r3, #4
 800569a:	3332      	adds	r3, #50	@ 0x32
 800569c:	4a33      	ldr	r2, [pc, #204]	@ (800576c <UART_SetConfig+0x4e4>)
 800569e:	fba2 2303 	umull	r2, r3, r2, r3
 80056a2:	095b      	lsrs	r3, r3, #5
 80056a4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80056a8:	441c      	add	r4, r3
 80056aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80056ae:	2200      	movs	r2, #0
 80056b0:	673b      	str	r3, [r7, #112]	@ 0x70
 80056b2:	677a      	str	r2, [r7, #116]	@ 0x74
 80056b4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80056b8:	4642      	mov	r2, r8
 80056ba:	464b      	mov	r3, r9
 80056bc:	1891      	adds	r1, r2, r2
 80056be:	60b9      	str	r1, [r7, #8]
 80056c0:	415b      	adcs	r3, r3
 80056c2:	60fb      	str	r3, [r7, #12]
 80056c4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80056c8:	4641      	mov	r1, r8
 80056ca:	1851      	adds	r1, r2, r1
 80056cc:	6039      	str	r1, [r7, #0]
 80056ce:	4649      	mov	r1, r9
 80056d0:	414b      	adcs	r3, r1
 80056d2:	607b      	str	r3, [r7, #4]
 80056d4:	f04f 0200 	mov.w	r2, #0
 80056d8:	f04f 0300 	mov.w	r3, #0
 80056dc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80056e0:	4659      	mov	r1, fp
 80056e2:	00cb      	lsls	r3, r1, #3
 80056e4:	4651      	mov	r1, sl
 80056e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80056ea:	4651      	mov	r1, sl
 80056ec:	00ca      	lsls	r2, r1, #3
 80056ee:	4610      	mov	r0, r2
 80056f0:	4619      	mov	r1, r3
 80056f2:	4603      	mov	r3, r0
 80056f4:	4642      	mov	r2, r8
 80056f6:	189b      	adds	r3, r3, r2
 80056f8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80056fa:	464b      	mov	r3, r9
 80056fc:	460a      	mov	r2, r1
 80056fe:	eb42 0303 	adc.w	r3, r2, r3
 8005702:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005704:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005708:	685b      	ldr	r3, [r3, #4]
 800570a:	2200      	movs	r2, #0
 800570c:	663b      	str	r3, [r7, #96]	@ 0x60
 800570e:	667a      	str	r2, [r7, #100]	@ 0x64
 8005710:	f04f 0200 	mov.w	r2, #0
 8005714:	f04f 0300 	mov.w	r3, #0
 8005718:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800571c:	4649      	mov	r1, r9
 800571e:	008b      	lsls	r3, r1, #2
 8005720:	4641      	mov	r1, r8
 8005722:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005726:	4641      	mov	r1, r8
 8005728:	008a      	lsls	r2, r1, #2
 800572a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800572e:	f7fa fdc7 	bl	80002c0 <__aeabi_uldivmod>
 8005732:	4602      	mov	r2, r0
 8005734:	460b      	mov	r3, r1
 8005736:	4b0d      	ldr	r3, [pc, #52]	@ (800576c <UART_SetConfig+0x4e4>)
 8005738:	fba3 1302 	umull	r1, r3, r3, r2
 800573c:	095b      	lsrs	r3, r3, #5
 800573e:	2164      	movs	r1, #100	@ 0x64
 8005740:	fb01 f303 	mul.w	r3, r1, r3
 8005744:	1ad3      	subs	r3, r2, r3
 8005746:	011b      	lsls	r3, r3, #4
 8005748:	3332      	adds	r3, #50	@ 0x32
 800574a:	4a08      	ldr	r2, [pc, #32]	@ (800576c <UART_SetConfig+0x4e4>)
 800574c:	fba2 2303 	umull	r2, r3, r2, r3
 8005750:	095b      	lsrs	r3, r3, #5
 8005752:	f003 020f 	and.w	r2, r3, #15
 8005756:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	4422      	add	r2, r4
 800575e:	609a      	str	r2, [r3, #8]
}
 8005760:	bf00      	nop
 8005762:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005766:	46bd      	mov	sp, r7
 8005768:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800576c:	51eb851f 	.word	0x51eb851f

08005770 <siprintf>:
 8005770:	b40e      	push	{r1, r2, r3}
 8005772:	b500      	push	{lr}
 8005774:	b09c      	sub	sp, #112	@ 0x70
 8005776:	ab1d      	add	r3, sp, #116	@ 0x74
 8005778:	9002      	str	r0, [sp, #8]
 800577a:	9006      	str	r0, [sp, #24]
 800577c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005780:	4809      	ldr	r0, [pc, #36]	@ (80057a8 <siprintf+0x38>)
 8005782:	9107      	str	r1, [sp, #28]
 8005784:	9104      	str	r1, [sp, #16]
 8005786:	4909      	ldr	r1, [pc, #36]	@ (80057ac <siprintf+0x3c>)
 8005788:	f853 2b04 	ldr.w	r2, [r3], #4
 800578c:	9105      	str	r1, [sp, #20]
 800578e:	6800      	ldr	r0, [r0, #0]
 8005790:	9301      	str	r3, [sp, #4]
 8005792:	a902      	add	r1, sp, #8
 8005794:	f000 f9bc 	bl	8005b10 <_svfiprintf_r>
 8005798:	9b02      	ldr	r3, [sp, #8]
 800579a:	2200      	movs	r2, #0
 800579c:	701a      	strb	r2, [r3, #0]
 800579e:	b01c      	add	sp, #112	@ 0x70
 80057a0:	f85d eb04 	ldr.w	lr, [sp], #4
 80057a4:	b003      	add	sp, #12
 80057a6:	4770      	bx	lr
 80057a8:	2000001c 	.word	0x2000001c
 80057ac:	ffff0208 	.word	0xffff0208

080057b0 <memset>:
 80057b0:	4402      	add	r2, r0
 80057b2:	4603      	mov	r3, r0
 80057b4:	4293      	cmp	r3, r2
 80057b6:	d100      	bne.n	80057ba <memset+0xa>
 80057b8:	4770      	bx	lr
 80057ba:	f803 1b01 	strb.w	r1, [r3], #1
 80057be:	e7f9      	b.n	80057b4 <memset+0x4>

080057c0 <strchr>:
 80057c0:	b2c9      	uxtb	r1, r1
 80057c2:	4603      	mov	r3, r0
 80057c4:	4618      	mov	r0, r3
 80057c6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80057ca:	b112      	cbz	r2, 80057d2 <strchr+0x12>
 80057cc:	428a      	cmp	r2, r1
 80057ce:	d1f9      	bne.n	80057c4 <strchr+0x4>
 80057d0:	4770      	bx	lr
 80057d2:	2900      	cmp	r1, #0
 80057d4:	bf18      	it	ne
 80057d6:	2000      	movne	r0, #0
 80057d8:	4770      	bx	lr

080057da <strncmp>:
 80057da:	b510      	push	{r4, lr}
 80057dc:	b16a      	cbz	r2, 80057fa <strncmp+0x20>
 80057de:	3901      	subs	r1, #1
 80057e0:	1884      	adds	r4, r0, r2
 80057e2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80057e6:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80057ea:	429a      	cmp	r2, r3
 80057ec:	d103      	bne.n	80057f6 <strncmp+0x1c>
 80057ee:	42a0      	cmp	r0, r4
 80057f0:	d001      	beq.n	80057f6 <strncmp+0x1c>
 80057f2:	2a00      	cmp	r2, #0
 80057f4:	d1f5      	bne.n	80057e2 <strncmp+0x8>
 80057f6:	1ad0      	subs	r0, r2, r3
 80057f8:	bd10      	pop	{r4, pc}
 80057fa:	4610      	mov	r0, r2
 80057fc:	e7fc      	b.n	80057f8 <strncmp+0x1e>
	...

08005800 <__errno>:
 8005800:	4b01      	ldr	r3, [pc, #4]	@ (8005808 <__errno+0x8>)
 8005802:	6818      	ldr	r0, [r3, #0]
 8005804:	4770      	bx	lr
 8005806:	bf00      	nop
 8005808:	2000001c 	.word	0x2000001c

0800580c <__libc_init_array>:
 800580c:	b570      	push	{r4, r5, r6, lr}
 800580e:	4d0d      	ldr	r5, [pc, #52]	@ (8005844 <__libc_init_array+0x38>)
 8005810:	4c0d      	ldr	r4, [pc, #52]	@ (8005848 <__libc_init_array+0x3c>)
 8005812:	1b64      	subs	r4, r4, r5
 8005814:	10a4      	asrs	r4, r4, #2
 8005816:	2600      	movs	r6, #0
 8005818:	42a6      	cmp	r6, r4
 800581a:	d109      	bne.n	8005830 <__libc_init_array+0x24>
 800581c:	4d0b      	ldr	r5, [pc, #44]	@ (800584c <__libc_init_array+0x40>)
 800581e:	4c0c      	ldr	r4, [pc, #48]	@ (8005850 <__libc_init_array+0x44>)
 8005820:	f000 fc6e 	bl	8006100 <_init>
 8005824:	1b64      	subs	r4, r4, r5
 8005826:	10a4      	asrs	r4, r4, #2
 8005828:	2600      	movs	r6, #0
 800582a:	42a6      	cmp	r6, r4
 800582c:	d105      	bne.n	800583a <__libc_init_array+0x2e>
 800582e:	bd70      	pop	{r4, r5, r6, pc}
 8005830:	f855 3b04 	ldr.w	r3, [r5], #4
 8005834:	4798      	blx	r3
 8005836:	3601      	adds	r6, #1
 8005838:	e7ee      	b.n	8005818 <__libc_init_array+0xc>
 800583a:	f855 3b04 	ldr.w	r3, [r5], #4
 800583e:	4798      	blx	r3
 8005840:	3601      	adds	r6, #1
 8005842:	e7f2      	b.n	800582a <__libc_init_array+0x1e>
 8005844:	08007ae0 	.word	0x08007ae0
 8005848:	08007ae0 	.word	0x08007ae0
 800584c:	08007ae0 	.word	0x08007ae0
 8005850:	08007ae4 	.word	0x08007ae4

08005854 <__retarget_lock_acquire_recursive>:
 8005854:	4770      	bx	lr

08005856 <__retarget_lock_release_recursive>:
 8005856:	4770      	bx	lr

08005858 <strcpy>:
 8005858:	4603      	mov	r3, r0
 800585a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800585e:	f803 2b01 	strb.w	r2, [r3], #1
 8005862:	2a00      	cmp	r2, #0
 8005864:	d1f9      	bne.n	800585a <strcpy+0x2>
 8005866:	4770      	bx	lr

08005868 <_free_r>:
 8005868:	b538      	push	{r3, r4, r5, lr}
 800586a:	4605      	mov	r5, r0
 800586c:	2900      	cmp	r1, #0
 800586e:	d041      	beq.n	80058f4 <_free_r+0x8c>
 8005870:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005874:	1f0c      	subs	r4, r1, #4
 8005876:	2b00      	cmp	r3, #0
 8005878:	bfb8      	it	lt
 800587a:	18e4      	addlt	r4, r4, r3
 800587c:	f000 f8e0 	bl	8005a40 <__malloc_lock>
 8005880:	4a1d      	ldr	r2, [pc, #116]	@ (80058f8 <_free_r+0x90>)
 8005882:	6813      	ldr	r3, [r2, #0]
 8005884:	b933      	cbnz	r3, 8005894 <_free_r+0x2c>
 8005886:	6063      	str	r3, [r4, #4]
 8005888:	6014      	str	r4, [r2, #0]
 800588a:	4628      	mov	r0, r5
 800588c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005890:	f000 b8dc 	b.w	8005a4c <__malloc_unlock>
 8005894:	42a3      	cmp	r3, r4
 8005896:	d908      	bls.n	80058aa <_free_r+0x42>
 8005898:	6820      	ldr	r0, [r4, #0]
 800589a:	1821      	adds	r1, r4, r0
 800589c:	428b      	cmp	r3, r1
 800589e:	bf01      	itttt	eq
 80058a0:	6819      	ldreq	r1, [r3, #0]
 80058a2:	685b      	ldreq	r3, [r3, #4]
 80058a4:	1809      	addeq	r1, r1, r0
 80058a6:	6021      	streq	r1, [r4, #0]
 80058a8:	e7ed      	b.n	8005886 <_free_r+0x1e>
 80058aa:	461a      	mov	r2, r3
 80058ac:	685b      	ldr	r3, [r3, #4]
 80058ae:	b10b      	cbz	r3, 80058b4 <_free_r+0x4c>
 80058b0:	42a3      	cmp	r3, r4
 80058b2:	d9fa      	bls.n	80058aa <_free_r+0x42>
 80058b4:	6811      	ldr	r1, [r2, #0]
 80058b6:	1850      	adds	r0, r2, r1
 80058b8:	42a0      	cmp	r0, r4
 80058ba:	d10b      	bne.n	80058d4 <_free_r+0x6c>
 80058bc:	6820      	ldr	r0, [r4, #0]
 80058be:	4401      	add	r1, r0
 80058c0:	1850      	adds	r0, r2, r1
 80058c2:	4283      	cmp	r3, r0
 80058c4:	6011      	str	r1, [r2, #0]
 80058c6:	d1e0      	bne.n	800588a <_free_r+0x22>
 80058c8:	6818      	ldr	r0, [r3, #0]
 80058ca:	685b      	ldr	r3, [r3, #4]
 80058cc:	6053      	str	r3, [r2, #4]
 80058ce:	4408      	add	r0, r1
 80058d0:	6010      	str	r0, [r2, #0]
 80058d2:	e7da      	b.n	800588a <_free_r+0x22>
 80058d4:	d902      	bls.n	80058dc <_free_r+0x74>
 80058d6:	230c      	movs	r3, #12
 80058d8:	602b      	str	r3, [r5, #0]
 80058da:	e7d6      	b.n	800588a <_free_r+0x22>
 80058dc:	6820      	ldr	r0, [r4, #0]
 80058de:	1821      	adds	r1, r4, r0
 80058e0:	428b      	cmp	r3, r1
 80058e2:	bf04      	itt	eq
 80058e4:	6819      	ldreq	r1, [r3, #0]
 80058e6:	685b      	ldreq	r3, [r3, #4]
 80058e8:	6063      	str	r3, [r4, #4]
 80058ea:	bf04      	itt	eq
 80058ec:	1809      	addeq	r1, r1, r0
 80058ee:	6021      	streq	r1, [r4, #0]
 80058f0:	6054      	str	r4, [r2, #4]
 80058f2:	e7ca      	b.n	800588a <_free_r+0x22>
 80058f4:	bd38      	pop	{r3, r4, r5, pc}
 80058f6:	bf00      	nop
 80058f8:	20000828 	.word	0x20000828

080058fc <sbrk_aligned>:
 80058fc:	b570      	push	{r4, r5, r6, lr}
 80058fe:	4e0f      	ldr	r6, [pc, #60]	@ (800593c <sbrk_aligned+0x40>)
 8005900:	460c      	mov	r4, r1
 8005902:	6831      	ldr	r1, [r6, #0]
 8005904:	4605      	mov	r5, r0
 8005906:	b911      	cbnz	r1, 800590e <sbrk_aligned+0x12>
 8005908:	f000 fba6 	bl	8006058 <_sbrk_r>
 800590c:	6030      	str	r0, [r6, #0]
 800590e:	4621      	mov	r1, r4
 8005910:	4628      	mov	r0, r5
 8005912:	f000 fba1 	bl	8006058 <_sbrk_r>
 8005916:	1c43      	adds	r3, r0, #1
 8005918:	d103      	bne.n	8005922 <sbrk_aligned+0x26>
 800591a:	f04f 34ff 	mov.w	r4, #4294967295
 800591e:	4620      	mov	r0, r4
 8005920:	bd70      	pop	{r4, r5, r6, pc}
 8005922:	1cc4      	adds	r4, r0, #3
 8005924:	f024 0403 	bic.w	r4, r4, #3
 8005928:	42a0      	cmp	r0, r4
 800592a:	d0f8      	beq.n	800591e <sbrk_aligned+0x22>
 800592c:	1a21      	subs	r1, r4, r0
 800592e:	4628      	mov	r0, r5
 8005930:	f000 fb92 	bl	8006058 <_sbrk_r>
 8005934:	3001      	adds	r0, #1
 8005936:	d1f2      	bne.n	800591e <sbrk_aligned+0x22>
 8005938:	e7ef      	b.n	800591a <sbrk_aligned+0x1e>
 800593a:	bf00      	nop
 800593c:	20000824 	.word	0x20000824

08005940 <_malloc_r>:
 8005940:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005944:	1ccd      	adds	r5, r1, #3
 8005946:	f025 0503 	bic.w	r5, r5, #3
 800594a:	3508      	adds	r5, #8
 800594c:	2d0c      	cmp	r5, #12
 800594e:	bf38      	it	cc
 8005950:	250c      	movcc	r5, #12
 8005952:	2d00      	cmp	r5, #0
 8005954:	4606      	mov	r6, r0
 8005956:	db01      	blt.n	800595c <_malloc_r+0x1c>
 8005958:	42a9      	cmp	r1, r5
 800595a:	d904      	bls.n	8005966 <_malloc_r+0x26>
 800595c:	230c      	movs	r3, #12
 800595e:	6033      	str	r3, [r6, #0]
 8005960:	2000      	movs	r0, #0
 8005962:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005966:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005a3c <_malloc_r+0xfc>
 800596a:	f000 f869 	bl	8005a40 <__malloc_lock>
 800596e:	f8d8 3000 	ldr.w	r3, [r8]
 8005972:	461c      	mov	r4, r3
 8005974:	bb44      	cbnz	r4, 80059c8 <_malloc_r+0x88>
 8005976:	4629      	mov	r1, r5
 8005978:	4630      	mov	r0, r6
 800597a:	f7ff ffbf 	bl	80058fc <sbrk_aligned>
 800597e:	1c43      	adds	r3, r0, #1
 8005980:	4604      	mov	r4, r0
 8005982:	d158      	bne.n	8005a36 <_malloc_r+0xf6>
 8005984:	f8d8 4000 	ldr.w	r4, [r8]
 8005988:	4627      	mov	r7, r4
 800598a:	2f00      	cmp	r7, #0
 800598c:	d143      	bne.n	8005a16 <_malloc_r+0xd6>
 800598e:	2c00      	cmp	r4, #0
 8005990:	d04b      	beq.n	8005a2a <_malloc_r+0xea>
 8005992:	6823      	ldr	r3, [r4, #0]
 8005994:	4639      	mov	r1, r7
 8005996:	4630      	mov	r0, r6
 8005998:	eb04 0903 	add.w	r9, r4, r3
 800599c:	f000 fb5c 	bl	8006058 <_sbrk_r>
 80059a0:	4581      	cmp	r9, r0
 80059a2:	d142      	bne.n	8005a2a <_malloc_r+0xea>
 80059a4:	6821      	ldr	r1, [r4, #0]
 80059a6:	1a6d      	subs	r5, r5, r1
 80059a8:	4629      	mov	r1, r5
 80059aa:	4630      	mov	r0, r6
 80059ac:	f7ff ffa6 	bl	80058fc <sbrk_aligned>
 80059b0:	3001      	adds	r0, #1
 80059b2:	d03a      	beq.n	8005a2a <_malloc_r+0xea>
 80059b4:	6823      	ldr	r3, [r4, #0]
 80059b6:	442b      	add	r3, r5
 80059b8:	6023      	str	r3, [r4, #0]
 80059ba:	f8d8 3000 	ldr.w	r3, [r8]
 80059be:	685a      	ldr	r2, [r3, #4]
 80059c0:	bb62      	cbnz	r2, 8005a1c <_malloc_r+0xdc>
 80059c2:	f8c8 7000 	str.w	r7, [r8]
 80059c6:	e00f      	b.n	80059e8 <_malloc_r+0xa8>
 80059c8:	6822      	ldr	r2, [r4, #0]
 80059ca:	1b52      	subs	r2, r2, r5
 80059cc:	d420      	bmi.n	8005a10 <_malloc_r+0xd0>
 80059ce:	2a0b      	cmp	r2, #11
 80059d0:	d917      	bls.n	8005a02 <_malloc_r+0xc2>
 80059d2:	1961      	adds	r1, r4, r5
 80059d4:	42a3      	cmp	r3, r4
 80059d6:	6025      	str	r5, [r4, #0]
 80059d8:	bf18      	it	ne
 80059da:	6059      	strne	r1, [r3, #4]
 80059dc:	6863      	ldr	r3, [r4, #4]
 80059de:	bf08      	it	eq
 80059e0:	f8c8 1000 	streq.w	r1, [r8]
 80059e4:	5162      	str	r2, [r4, r5]
 80059e6:	604b      	str	r3, [r1, #4]
 80059e8:	4630      	mov	r0, r6
 80059ea:	f000 f82f 	bl	8005a4c <__malloc_unlock>
 80059ee:	f104 000b 	add.w	r0, r4, #11
 80059f2:	1d23      	adds	r3, r4, #4
 80059f4:	f020 0007 	bic.w	r0, r0, #7
 80059f8:	1ac2      	subs	r2, r0, r3
 80059fa:	bf1c      	itt	ne
 80059fc:	1a1b      	subne	r3, r3, r0
 80059fe:	50a3      	strne	r3, [r4, r2]
 8005a00:	e7af      	b.n	8005962 <_malloc_r+0x22>
 8005a02:	6862      	ldr	r2, [r4, #4]
 8005a04:	42a3      	cmp	r3, r4
 8005a06:	bf0c      	ite	eq
 8005a08:	f8c8 2000 	streq.w	r2, [r8]
 8005a0c:	605a      	strne	r2, [r3, #4]
 8005a0e:	e7eb      	b.n	80059e8 <_malloc_r+0xa8>
 8005a10:	4623      	mov	r3, r4
 8005a12:	6864      	ldr	r4, [r4, #4]
 8005a14:	e7ae      	b.n	8005974 <_malloc_r+0x34>
 8005a16:	463c      	mov	r4, r7
 8005a18:	687f      	ldr	r7, [r7, #4]
 8005a1a:	e7b6      	b.n	800598a <_malloc_r+0x4a>
 8005a1c:	461a      	mov	r2, r3
 8005a1e:	685b      	ldr	r3, [r3, #4]
 8005a20:	42a3      	cmp	r3, r4
 8005a22:	d1fb      	bne.n	8005a1c <_malloc_r+0xdc>
 8005a24:	2300      	movs	r3, #0
 8005a26:	6053      	str	r3, [r2, #4]
 8005a28:	e7de      	b.n	80059e8 <_malloc_r+0xa8>
 8005a2a:	230c      	movs	r3, #12
 8005a2c:	6033      	str	r3, [r6, #0]
 8005a2e:	4630      	mov	r0, r6
 8005a30:	f000 f80c 	bl	8005a4c <__malloc_unlock>
 8005a34:	e794      	b.n	8005960 <_malloc_r+0x20>
 8005a36:	6005      	str	r5, [r0, #0]
 8005a38:	e7d6      	b.n	80059e8 <_malloc_r+0xa8>
 8005a3a:	bf00      	nop
 8005a3c:	20000828 	.word	0x20000828

08005a40 <__malloc_lock>:
 8005a40:	4801      	ldr	r0, [pc, #4]	@ (8005a48 <__malloc_lock+0x8>)
 8005a42:	f7ff bf07 	b.w	8005854 <__retarget_lock_acquire_recursive>
 8005a46:	bf00      	nop
 8005a48:	20000820 	.word	0x20000820

08005a4c <__malloc_unlock>:
 8005a4c:	4801      	ldr	r0, [pc, #4]	@ (8005a54 <__malloc_unlock+0x8>)
 8005a4e:	f7ff bf02 	b.w	8005856 <__retarget_lock_release_recursive>
 8005a52:	bf00      	nop
 8005a54:	20000820 	.word	0x20000820

08005a58 <__ssputs_r>:
 8005a58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a5c:	688e      	ldr	r6, [r1, #8]
 8005a5e:	461f      	mov	r7, r3
 8005a60:	42be      	cmp	r6, r7
 8005a62:	680b      	ldr	r3, [r1, #0]
 8005a64:	4682      	mov	sl, r0
 8005a66:	460c      	mov	r4, r1
 8005a68:	4690      	mov	r8, r2
 8005a6a:	d82d      	bhi.n	8005ac8 <__ssputs_r+0x70>
 8005a6c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005a70:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005a74:	d026      	beq.n	8005ac4 <__ssputs_r+0x6c>
 8005a76:	6965      	ldr	r5, [r4, #20]
 8005a78:	6909      	ldr	r1, [r1, #16]
 8005a7a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005a7e:	eba3 0901 	sub.w	r9, r3, r1
 8005a82:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005a86:	1c7b      	adds	r3, r7, #1
 8005a88:	444b      	add	r3, r9
 8005a8a:	106d      	asrs	r5, r5, #1
 8005a8c:	429d      	cmp	r5, r3
 8005a8e:	bf38      	it	cc
 8005a90:	461d      	movcc	r5, r3
 8005a92:	0553      	lsls	r3, r2, #21
 8005a94:	d527      	bpl.n	8005ae6 <__ssputs_r+0x8e>
 8005a96:	4629      	mov	r1, r5
 8005a98:	f7ff ff52 	bl	8005940 <_malloc_r>
 8005a9c:	4606      	mov	r6, r0
 8005a9e:	b360      	cbz	r0, 8005afa <__ssputs_r+0xa2>
 8005aa0:	6921      	ldr	r1, [r4, #16]
 8005aa2:	464a      	mov	r2, r9
 8005aa4:	f000 fae8 	bl	8006078 <memcpy>
 8005aa8:	89a3      	ldrh	r3, [r4, #12]
 8005aaa:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005aae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005ab2:	81a3      	strh	r3, [r4, #12]
 8005ab4:	6126      	str	r6, [r4, #16]
 8005ab6:	6165      	str	r5, [r4, #20]
 8005ab8:	444e      	add	r6, r9
 8005aba:	eba5 0509 	sub.w	r5, r5, r9
 8005abe:	6026      	str	r6, [r4, #0]
 8005ac0:	60a5      	str	r5, [r4, #8]
 8005ac2:	463e      	mov	r6, r7
 8005ac4:	42be      	cmp	r6, r7
 8005ac6:	d900      	bls.n	8005aca <__ssputs_r+0x72>
 8005ac8:	463e      	mov	r6, r7
 8005aca:	6820      	ldr	r0, [r4, #0]
 8005acc:	4632      	mov	r2, r6
 8005ace:	4641      	mov	r1, r8
 8005ad0:	f000 faa8 	bl	8006024 <memmove>
 8005ad4:	68a3      	ldr	r3, [r4, #8]
 8005ad6:	1b9b      	subs	r3, r3, r6
 8005ad8:	60a3      	str	r3, [r4, #8]
 8005ada:	6823      	ldr	r3, [r4, #0]
 8005adc:	4433      	add	r3, r6
 8005ade:	6023      	str	r3, [r4, #0]
 8005ae0:	2000      	movs	r0, #0
 8005ae2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ae6:	462a      	mov	r2, r5
 8005ae8:	f000 fad4 	bl	8006094 <_realloc_r>
 8005aec:	4606      	mov	r6, r0
 8005aee:	2800      	cmp	r0, #0
 8005af0:	d1e0      	bne.n	8005ab4 <__ssputs_r+0x5c>
 8005af2:	6921      	ldr	r1, [r4, #16]
 8005af4:	4650      	mov	r0, sl
 8005af6:	f7ff feb7 	bl	8005868 <_free_r>
 8005afa:	230c      	movs	r3, #12
 8005afc:	f8ca 3000 	str.w	r3, [sl]
 8005b00:	89a3      	ldrh	r3, [r4, #12]
 8005b02:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005b06:	81a3      	strh	r3, [r4, #12]
 8005b08:	f04f 30ff 	mov.w	r0, #4294967295
 8005b0c:	e7e9      	b.n	8005ae2 <__ssputs_r+0x8a>
	...

08005b10 <_svfiprintf_r>:
 8005b10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b14:	4698      	mov	r8, r3
 8005b16:	898b      	ldrh	r3, [r1, #12]
 8005b18:	061b      	lsls	r3, r3, #24
 8005b1a:	b09d      	sub	sp, #116	@ 0x74
 8005b1c:	4607      	mov	r7, r0
 8005b1e:	460d      	mov	r5, r1
 8005b20:	4614      	mov	r4, r2
 8005b22:	d510      	bpl.n	8005b46 <_svfiprintf_r+0x36>
 8005b24:	690b      	ldr	r3, [r1, #16]
 8005b26:	b973      	cbnz	r3, 8005b46 <_svfiprintf_r+0x36>
 8005b28:	2140      	movs	r1, #64	@ 0x40
 8005b2a:	f7ff ff09 	bl	8005940 <_malloc_r>
 8005b2e:	6028      	str	r0, [r5, #0]
 8005b30:	6128      	str	r0, [r5, #16]
 8005b32:	b930      	cbnz	r0, 8005b42 <_svfiprintf_r+0x32>
 8005b34:	230c      	movs	r3, #12
 8005b36:	603b      	str	r3, [r7, #0]
 8005b38:	f04f 30ff 	mov.w	r0, #4294967295
 8005b3c:	b01d      	add	sp, #116	@ 0x74
 8005b3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b42:	2340      	movs	r3, #64	@ 0x40
 8005b44:	616b      	str	r3, [r5, #20]
 8005b46:	2300      	movs	r3, #0
 8005b48:	9309      	str	r3, [sp, #36]	@ 0x24
 8005b4a:	2320      	movs	r3, #32
 8005b4c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005b50:	f8cd 800c 	str.w	r8, [sp, #12]
 8005b54:	2330      	movs	r3, #48	@ 0x30
 8005b56:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8005cf4 <_svfiprintf_r+0x1e4>
 8005b5a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005b5e:	f04f 0901 	mov.w	r9, #1
 8005b62:	4623      	mov	r3, r4
 8005b64:	469a      	mov	sl, r3
 8005b66:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005b6a:	b10a      	cbz	r2, 8005b70 <_svfiprintf_r+0x60>
 8005b6c:	2a25      	cmp	r2, #37	@ 0x25
 8005b6e:	d1f9      	bne.n	8005b64 <_svfiprintf_r+0x54>
 8005b70:	ebba 0b04 	subs.w	fp, sl, r4
 8005b74:	d00b      	beq.n	8005b8e <_svfiprintf_r+0x7e>
 8005b76:	465b      	mov	r3, fp
 8005b78:	4622      	mov	r2, r4
 8005b7a:	4629      	mov	r1, r5
 8005b7c:	4638      	mov	r0, r7
 8005b7e:	f7ff ff6b 	bl	8005a58 <__ssputs_r>
 8005b82:	3001      	adds	r0, #1
 8005b84:	f000 80a7 	beq.w	8005cd6 <_svfiprintf_r+0x1c6>
 8005b88:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005b8a:	445a      	add	r2, fp
 8005b8c:	9209      	str	r2, [sp, #36]	@ 0x24
 8005b8e:	f89a 3000 	ldrb.w	r3, [sl]
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	f000 809f 	beq.w	8005cd6 <_svfiprintf_r+0x1c6>
 8005b98:	2300      	movs	r3, #0
 8005b9a:	f04f 32ff 	mov.w	r2, #4294967295
 8005b9e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005ba2:	f10a 0a01 	add.w	sl, sl, #1
 8005ba6:	9304      	str	r3, [sp, #16]
 8005ba8:	9307      	str	r3, [sp, #28]
 8005baa:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005bae:	931a      	str	r3, [sp, #104]	@ 0x68
 8005bb0:	4654      	mov	r4, sl
 8005bb2:	2205      	movs	r2, #5
 8005bb4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005bb8:	484e      	ldr	r0, [pc, #312]	@ (8005cf4 <_svfiprintf_r+0x1e4>)
 8005bba:	f7fa fb31 	bl	8000220 <memchr>
 8005bbe:	9a04      	ldr	r2, [sp, #16]
 8005bc0:	b9d8      	cbnz	r0, 8005bfa <_svfiprintf_r+0xea>
 8005bc2:	06d0      	lsls	r0, r2, #27
 8005bc4:	bf44      	itt	mi
 8005bc6:	2320      	movmi	r3, #32
 8005bc8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005bcc:	0711      	lsls	r1, r2, #28
 8005bce:	bf44      	itt	mi
 8005bd0:	232b      	movmi	r3, #43	@ 0x2b
 8005bd2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005bd6:	f89a 3000 	ldrb.w	r3, [sl]
 8005bda:	2b2a      	cmp	r3, #42	@ 0x2a
 8005bdc:	d015      	beq.n	8005c0a <_svfiprintf_r+0xfa>
 8005bde:	9a07      	ldr	r2, [sp, #28]
 8005be0:	4654      	mov	r4, sl
 8005be2:	2000      	movs	r0, #0
 8005be4:	f04f 0c0a 	mov.w	ip, #10
 8005be8:	4621      	mov	r1, r4
 8005bea:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005bee:	3b30      	subs	r3, #48	@ 0x30
 8005bf0:	2b09      	cmp	r3, #9
 8005bf2:	d94b      	bls.n	8005c8c <_svfiprintf_r+0x17c>
 8005bf4:	b1b0      	cbz	r0, 8005c24 <_svfiprintf_r+0x114>
 8005bf6:	9207      	str	r2, [sp, #28]
 8005bf8:	e014      	b.n	8005c24 <_svfiprintf_r+0x114>
 8005bfa:	eba0 0308 	sub.w	r3, r0, r8
 8005bfe:	fa09 f303 	lsl.w	r3, r9, r3
 8005c02:	4313      	orrs	r3, r2
 8005c04:	9304      	str	r3, [sp, #16]
 8005c06:	46a2      	mov	sl, r4
 8005c08:	e7d2      	b.n	8005bb0 <_svfiprintf_r+0xa0>
 8005c0a:	9b03      	ldr	r3, [sp, #12]
 8005c0c:	1d19      	adds	r1, r3, #4
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	9103      	str	r1, [sp, #12]
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	bfbb      	ittet	lt
 8005c16:	425b      	neglt	r3, r3
 8005c18:	f042 0202 	orrlt.w	r2, r2, #2
 8005c1c:	9307      	strge	r3, [sp, #28]
 8005c1e:	9307      	strlt	r3, [sp, #28]
 8005c20:	bfb8      	it	lt
 8005c22:	9204      	strlt	r2, [sp, #16]
 8005c24:	7823      	ldrb	r3, [r4, #0]
 8005c26:	2b2e      	cmp	r3, #46	@ 0x2e
 8005c28:	d10a      	bne.n	8005c40 <_svfiprintf_r+0x130>
 8005c2a:	7863      	ldrb	r3, [r4, #1]
 8005c2c:	2b2a      	cmp	r3, #42	@ 0x2a
 8005c2e:	d132      	bne.n	8005c96 <_svfiprintf_r+0x186>
 8005c30:	9b03      	ldr	r3, [sp, #12]
 8005c32:	1d1a      	adds	r2, r3, #4
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	9203      	str	r2, [sp, #12]
 8005c38:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005c3c:	3402      	adds	r4, #2
 8005c3e:	9305      	str	r3, [sp, #20]
 8005c40:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8005d04 <_svfiprintf_r+0x1f4>
 8005c44:	7821      	ldrb	r1, [r4, #0]
 8005c46:	2203      	movs	r2, #3
 8005c48:	4650      	mov	r0, sl
 8005c4a:	f7fa fae9 	bl	8000220 <memchr>
 8005c4e:	b138      	cbz	r0, 8005c60 <_svfiprintf_r+0x150>
 8005c50:	9b04      	ldr	r3, [sp, #16]
 8005c52:	eba0 000a 	sub.w	r0, r0, sl
 8005c56:	2240      	movs	r2, #64	@ 0x40
 8005c58:	4082      	lsls	r2, r0
 8005c5a:	4313      	orrs	r3, r2
 8005c5c:	3401      	adds	r4, #1
 8005c5e:	9304      	str	r3, [sp, #16]
 8005c60:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005c64:	4824      	ldr	r0, [pc, #144]	@ (8005cf8 <_svfiprintf_r+0x1e8>)
 8005c66:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005c6a:	2206      	movs	r2, #6
 8005c6c:	f7fa fad8 	bl	8000220 <memchr>
 8005c70:	2800      	cmp	r0, #0
 8005c72:	d036      	beq.n	8005ce2 <_svfiprintf_r+0x1d2>
 8005c74:	4b21      	ldr	r3, [pc, #132]	@ (8005cfc <_svfiprintf_r+0x1ec>)
 8005c76:	bb1b      	cbnz	r3, 8005cc0 <_svfiprintf_r+0x1b0>
 8005c78:	9b03      	ldr	r3, [sp, #12]
 8005c7a:	3307      	adds	r3, #7
 8005c7c:	f023 0307 	bic.w	r3, r3, #7
 8005c80:	3308      	adds	r3, #8
 8005c82:	9303      	str	r3, [sp, #12]
 8005c84:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005c86:	4433      	add	r3, r6
 8005c88:	9309      	str	r3, [sp, #36]	@ 0x24
 8005c8a:	e76a      	b.n	8005b62 <_svfiprintf_r+0x52>
 8005c8c:	fb0c 3202 	mla	r2, ip, r2, r3
 8005c90:	460c      	mov	r4, r1
 8005c92:	2001      	movs	r0, #1
 8005c94:	e7a8      	b.n	8005be8 <_svfiprintf_r+0xd8>
 8005c96:	2300      	movs	r3, #0
 8005c98:	3401      	adds	r4, #1
 8005c9a:	9305      	str	r3, [sp, #20]
 8005c9c:	4619      	mov	r1, r3
 8005c9e:	f04f 0c0a 	mov.w	ip, #10
 8005ca2:	4620      	mov	r0, r4
 8005ca4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005ca8:	3a30      	subs	r2, #48	@ 0x30
 8005caa:	2a09      	cmp	r2, #9
 8005cac:	d903      	bls.n	8005cb6 <_svfiprintf_r+0x1a6>
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d0c6      	beq.n	8005c40 <_svfiprintf_r+0x130>
 8005cb2:	9105      	str	r1, [sp, #20]
 8005cb4:	e7c4      	b.n	8005c40 <_svfiprintf_r+0x130>
 8005cb6:	fb0c 2101 	mla	r1, ip, r1, r2
 8005cba:	4604      	mov	r4, r0
 8005cbc:	2301      	movs	r3, #1
 8005cbe:	e7f0      	b.n	8005ca2 <_svfiprintf_r+0x192>
 8005cc0:	ab03      	add	r3, sp, #12
 8005cc2:	9300      	str	r3, [sp, #0]
 8005cc4:	462a      	mov	r2, r5
 8005cc6:	4b0e      	ldr	r3, [pc, #56]	@ (8005d00 <_svfiprintf_r+0x1f0>)
 8005cc8:	a904      	add	r1, sp, #16
 8005cca:	4638      	mov	r0, r7
 8005ccc:	f3af 8000 	nop.w
 8005cd0:	1c42      	adds	r2, r0, #1
 8005cd2:	4606      	mov	r6, r0
 8005cd4:	d1d6      	bne.n	8005c84 <_svfiprintf_r+0x174>
 8005cd6:	89ab      	ldrh	r3, [r5, #12]
 8005cd8:	065b      	lsls	r3, r3, #25
 8005cda:	f53f af2d 	bmi.w	8005b38 <_svfiprintf_r+0x28>
 8005cde:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005ce0:	e72c      	b.n	8005b3c <_svfiprintf_r+0x2c>
 8005ce2:	ab03      	add	r3, sp, #12
 8005ce4:	9300      	str	r3, [sp, #0]
 8005ce6:	462a      	mov	r2, r5
 8005ce8:	4b05      	ldr	r3, [pc, #20]	@ (8005d00 <_svfiprintf_r+0x1f0>)
 8005cea:	a904      	add	r1, sp, #16
 8005cec:	4638      	mov	r0, r7
 8005cee:	f000 f879 	bl	8005de4 <_printf_i>
 8005cf2:	e7ed      	b.n	8005cd0 <_svfiprintf_r+0x1c0>
 8005cf4:	08007aa4 	.word	0x08007aa4
 8005cf8:	08007aae 	.word	0x08007aae
 8005cfc:	00000000 	.word	0x00000000
 8005d00:	08005a59 	.word	0x08005a59
 8005d04:	08007aaa 	.word	0x08007aaa

08005d08 <_printf_common>:
 8005d08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d0c:	4616      	mov	r6, r2
 8005d0e:	4698      	mov	r8, r3
 8005d10:	688a      	ldr	r2, [r1, #8]
 8005d12:	690b      	ldr	r3, [r1, #16]
 8005d14:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005d18:	4293      	cmp	r3, r2
 8005d1a:	bfb8      	it	lt
 8005d1c:	4613      	movlt	r3, r2
 8005d1e:	6033      	str	r3, [r6, #0]
 8005d20:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005d24:	4607      	mov	r7, r0
 8005d26:	460c      	mov	r4, r1
 8005d28:	b10a      	cbz	r2, 8005d2e <_printf_common+0x26>
 8005d2a:	3301      	adds	r3, #1
 8005d2c:	6033      	str	r3, [r6, #0]
 8005d2e:	6823      	ldr	r3, [r4, #0]
 8005d30:	0699      	lsls	r1, r3, #26
 8005d32:	bf42      	ittt	mi
 8005d34:	6833      	ldrmi	r3, [r6, #0]
 8005d36:	3302      	addmi	r3, #2
 8005d38:	6033      	strmi	r3, [r6, #0]
 8005d3a:	6825      	ldr	r5, [r4, #0]
 8005d3c:	f015 0506 	ands.w	r5, r5, #6
 8005d40:	d106      	bne.n	8005d50 <_printf_common+0x48>
 8005d42:	f104 0a19 	add.w	sl, r4, #25
 8005d46:	68e3      	ldr	r3, [r4, #12]
 8005d48:	6832      	ldr	r2, [r6, #0]
 8005d4a:	1a9b      	subs	r3, r3, r2
 8005d4c:	42ab      	cmp	r3, r5
 8005d4e:	dc26      	bgt.n	8005d9e <_printf_common+0x96>
 8005d50:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005d54:	6822      	ldr	r2, [r4, #0]
 8005d56:	3b00      	subs	r3, #0
 8005d58:	bf18      	it	ne
 8005d5a:	2301      	movne	r3, #1
 8005d5c:	0692      	lsls	r2, r2, #26
 8005d5e:	d42b      	bmi.n	8005db8 <_printf_common+0xb0>
 8005d60:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005d64:	4641      	mov	r1, r8
 8005d66:	4638      	mov	r0, r7
 8005d68:	47c8      	blx	r9
 8005d6a:	3001      	adds	r0, #1
 8005d6c:	d01e      	beq.n	8005dac <_printf_common+0xa4>
 8005d6e:	6823      	ldr	r3, [r4, #0]
 8005d70:	6922      	ldr	r2, [r4, #16]
 8005d72:	f003 0306 	and.w	r3, r3, #6
 8005d76:	2b04      	cmp	r3, #4
 8005d78:	bf02      	ittt	eq
 8005d7a:	68e5      	ldreq	r5, [r4, #12]
 8005d7c:	6833      	ldreq	r3, [r6, #0]
 8005d7e:	1aed      	subeq	r5, r5, r3
 8005d80:	68a3      	ldr	r3, [r4, #8]
 8005d82:	bf0c      	ite	eq
 8005d84:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005d88:	2500      	movne	r5, #0
 8005d8a:	4293      	cmp	r3, r2
 8005d8c:	bfc4      	itt	gt
 8005d8e:	1a9b      	subgt	r3, r3, r2
 8005d90:	18ed      	addgt	r5, r5, r3
 8005d92:	2600      	movs	r6, #0
 8005d94:	341a      	adds	r4, #26
 8005d96:	42b5      	cmp	r5, r6
 8005d98:	d11a      	bne.n	8005dd0 <_printf_common+0xc8>
 8005d9a:	2000      	movs	r0, #0
 8005d9c:	e008      	b.n	8005db0 <_printf_common+0xa8>
 8005d9e:	2301      	movs	r3, #1
 8005da0:	4652      	mov	r2, sl
 8005da2:	4641      	mov	r1, r8
 8005da4:	4638      	mov	r0, r7
 8005da6:	47c8      	blx	r9
 8005da8:	3001      	adds	r0, #1
 8005daa:	d103      	bne.n	8005db4 <_printf_common+0xac>
 8005dac:	f04f 30ff 	mov.w	r0, #4294967295
 8005db0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005db4:	3501      	adds	r5, #1
 8005db6:	e7c6      	b.n	8005d46 <_printf_common+0x3e>
 8005db8:	18e1      	adds	r1, r4, r3
 8005dba:	1c5a      	adds	r2, r3, #1
 8005dbc:	2030      	movs	r0, #48	@ 0x30
 8005dbe:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005dc2:	4422      	add	r2, r4
 8005dc4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005dc8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005dcc:	3302      	adds	r3, #2
 8005dce:	e7c7      	b.n	8005d60 <_printf_common+0x58>
 8005dd0:	2301      	movs	r3, #1
 8005dd2:	4622      	mov	r2, r4
 8005dd4:	4641      	mov	r1, r8
 8005dd6:	4638      	mov	r0, r7
 8005dd8:	47c8      	blx	r9
 8005dda:	3001      	adds	r0, #1
 8005ddc:	d0e6      	beq.n	8005dac <_printf_common+0xa4>
 8005dde:	3601      	adds	r6, #1
 8005de0:	e7d9      	b.n	8005d96 <_printf_common+0x8e>
	...

08005de4 <_printf_i>:
 8005de4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005de8:	7e0f      	ldrb	r7, [r1, #24]
 8005dea:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005dec:	2f78      	cmp	r7, #120	@ 0x78
 8005dee:	4691      	mov	r9, r2
 8005df0:	4680      	mov	r8, r0
 8005df2:	460c      	mov	r4, r1
 8005df4:	469a      	mov	sl, r3
 8005df6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005dfa:	d807      	bhi.n	8005e0c <_printf_i+0x28>
 8005dfc:	2f62      	cmp	r7, #98	@ 0x62
 8005dfe:	d80a      	bhi.n	8005e16 <_printf_i+0x32>
 8005e00:	2f00      	cmp	r7, #0
 8005e02:	f000 80d2 	beq.w	8005faa <_printf_i+0x1c6>
 8005e06:	2f58      	cmp	r7, #88	@ 0x58
 8005e08:	f000 80b9 	beq.w	8005f7e <_printf_i+0x19a>
 8005e0c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005e10:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005e14:	e03a      	b.n	8005e8c <_printf_i+0xa8>
 8005e16:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005e1a:	2b15      	cmp	r3, #21
 8005e1c:	d8f6      	bhi.n	8005e0c <_printf_i+0x28>
 8005e1e:	a101      	add	r1, pc, #4	@ (adr r1, 8005e24 <_printf_i+0x40>)
 8005e20:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005e24:	08005e7d 	.word	0x08005e7d
 8005e28:	08005e91 	.word	0x08005e91
 8005e2c:	08005e0d 	.word	0x08005e0d
 8005e30:	08005e0d 	.word	0x08005e0d
 8005e34:	08005e0d 	.word	0x08005e0d
 8005e38:	08005e0d 	.word	0x08005e0d
 8005e3c:	08005e91 	.word	0x08005e91
 8005e40:	08005e0d 	.word	0x08005e0d
 8005e44:	08005e0d 	.word	0x08005e0d
 8005e48:	08005e0d 	.word	0x08005e0d
 8005e4c:	08005e0d 	.word	0x08005e0d
 8005e50:	08005f91 	.word	0x08005f91
 8005e54:	08005ebb 	.word	0x08005ebb
 8005e58:	08005f4b 	.word	0x08005f4b
 8005e5c:	08005e0d 	.word	0x08005e0d
 8005e60:	08005e0d 	.word	0x08005e0d
 8005e64:	08005fb3 	.word	0x08005fb3
 8005e68:	08005e0d 	.word	0x08005e0d
 8005e6c:	08005ebb 	.word	0x08005ebb
 8005e70:	08005e0d 	.word	0x08005e0d
 8005e74:	08005e0d 	.word	0x08005e0d
 8005e78:	08005f53 	.word	0x08005f53
 8005e7c:	6833      	ldr	r3, [r6, #0]
 8005e7e:	1d1a      	adds	r2, r3, #4
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	6032      	str	r2, [r6, #0]
 8005e84:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005e88:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005e8c:	2301      	movs	r3, #1
 8005e8e:	e09d      	b.n	8005fcc <_printf_i+0x1e8>
 8005e90:	6833      	ldr	r3, [r6, #0]
 8005e92:	6820      	ldr	r0, [r4, #0]
 8005e94:	1d19      	adds	r1, r3, #4
 8005e96:	6031      	str	r1, [r6, #0]
 8005e98:	0606      	lsls	r6, r0, #24
 8005e9a:	d501      	bpl.n	8005ea0 <_printf_i+0xbc>
 8005e9c:	681d      	ldr	r5, [r3, #0]
 8005e9e:	e003      	b.n	8005ea8 <_printf_i+0xc4>
 8005ea0:	0645      	lsls	r5, r0, #25
 8005ea2:	d5fb      	bpl.n	8005e9c <_printf_i+0xb8>
 8005ea4:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005ea8:	2d00      	cmp	r5, #0
 8005eaa:	da03      	bge.n	8005eb4 <_printf_i+0xd0>
 8005eac:	232d      	movs	r3, #45	@ 0x2d
 8005eae:	426d      	negs	r5, r5
 8005eb0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005eb4:	4859      	ldr	r0, [pc, #356]	@ (800601c <_printf_i+0x238>)
 8005eb6:	230a      	movs	r3, #10
 8005eb8:	e011      	b.n	8005ede <_printf_i+0xfa>
 8005eba:	6821      	ldr	r1, [r4, #0]
 8005ebc:	6833      	ldr	r3, [r6, #0]
 8005ebe:	0608      	lsls	r0, r1, #24
 8005ec0:	f853 5b04 	ldr.w	r5, [r3], #4
 8005ec4:	d402      	bmi.n	8005ecc <_printf_i+0xe8>
 8005ec6:	0649      	lsls	r1, r1, #25
 8005ec8:	bf48      	it	mi
 8005eca:	b2ad      	uxthmi	r5, r5
 8005ecc:	2f6f      	cmp	r7, #111	@ 0x6f
 8005ece:	4853      	ldr	r0, [pc, #332]	@ (800601c <_printf_i+0x238>)
 8005ed0:	6033      	str	r3, [r6, #0]
 8005ed2:	bf14      	ite	ne
 8005ed4:	230a      	movne	r3, #10
 8005ed6:	2308      	moveq	r3, #8
 8005ed8:	2100      	movs	r1, #0
 8005eda:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005ede:	6866      	ldr	r6, [r4, #4]
 8005ee0:	60a6      	str	r6, [r4, #8]
 8005ee2:	2e00      	cmp	r6, #0
 8005ee4:	bfa2      	ittt	ge
 8005ee6:	6821      	ldrge	r1, [r4, #0]
 8005ee8:	f021 0104 	bicge.w	r1, r1, #4
 8005eec:	6021      	strge	r1, [r4, #0]
 8005eee:	b90d      	cbnz	r5, 8005ef4 <_printf_i+0x110>
 8005ef0:	2e00      	cmp	r6, #0
 8005ef2:	d04b      	beq.n	8005f8c <_printf_i+0x1a8>
 8005ef4:	4616      	mov	r6, r2
 8005ef6:	fbb5 f1f3 	udiv	r1, r5, r3
 8005efa:	fb03 5711 	mls	r7, r3, r1, r5
 8005efe:	5dc7      	ldrb	r7, [r0, r7]
 8005f00:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005f04:	462f      	mov	r7, r5
 8005f06:	42bb      	cmp	r3, r7
 8005f08:	460d      	mov	r5, r1
 8005f0a:	d9f4      	bls.n	8005ef6 <_printf_i+0x112>
 8005f0c:	2b08      	cmp	r3, #8
 8005f0e:	d10b      	bne.n	8005f28 <_printf_i+0x144>
 8005f10:	6823      	ldr	r3, [r4, #0]
 8005f12:	07df      	lsls	r7, r3, #31
 8005f14:	d508      	bpl.n	8005f28 <_printf_i+0x144>
 8005f16:	6923      	ldr	r3, [r4, #16]
 8005f18:	6861      	ldr	r1, [r4, #4]
 8005f1a:	4299      	cmp	r1, r3
 8005f1c:	bfde      	ittt	le
 8005f1e:	2330      	movle	r3, #48	@ 0x30
 8005f20:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005f24:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005f28:	1b92      	subs	r2, r2, r6
 8005f2a:	6122      	str	r2, [r4, #16]
 8005f2c:	f8cd a000 	str.w	sl, [sp]
 8005f30:	464b      	mov	r3, r9
 8005f32:	aa03      	add	r2, sp, #12
 8005f34:	4621      	mov	r1, r4
 8005f36:	4640      	mov	r0, r8
 8005f38:	f7ff fee6 	bl	8005d08 <_printf_common>
 8005f3c:	3001      	adds	r0, #1
 8005f3e:	d14a      	bne.n	8005fd6 <_printf_i+0x1f2>
 8005f40:	f04f 30ff 	mov.w	r0, #4294967295
 8005f44:	b004      	add	sp, #16
 8005f46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f4a:	6823      	ldr	r3, [r4, #0]
 8005f4c:	f043 0320 	orr.w	r3, r3, #32
 8005f50:	6023      	str	r3, [r4, #0]
 8005f52:	4833      	ldr	r0, [pc, #204]	@ (8006020 <_printf_i+0x23c>)
 8005f54:	2778      	movs	r7, #120	@ 0x78
 8005f56:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005f5a:	6823      	ldr	r3, [r4, #0]
 8005f5c:	6831      	ldr	r1, [r6, #0]
 8005f5e:	061f      	lsls	r7, r3, #24
 8005f60:	f851 5b04 	ldr.w	r5, [r1], #4
 8005f64:	d402      	bmi.n	8005f6c <_printf_i+0x188>
 8005f66:	065f      	lsls	r7, r3, #25
 8005f68:	bf48      	it	mi
 8005f6a:	b2ad      	uxthmi	r5, r5
 8005f6c:	6031      	str	r1, [r6, #0]
 8005f6e:	07d9      	lsls	r1, r3, #31
 8005f70:	bf44      	itt	mi
 8005f72:	f043 0320 	orrmi.w	r3, r3, #32
 8005f76:	6023      	strmi	r3, [r4, #0]
 8005f78:	b11d      	cbz	r5, 8005f82 <_printf_i+0x19e>
 8005f7a:	2310      	movs	r3, #16
 8005f7c:	e7ac      	b.n	8005ed8 <_printf_i+0xf4>
 8005f7e:	4827      	ldr	r0, [pc, #156]	@ (800601c <_printf_i+0x238>)
 8005f80:	e7e9      	b.n	8005f56 <_printf_i+0x172>
 8005f82:	6823      	ldr	r3, [r4, #0]
 8005f84:	f023 0320 	bic.w	r3, r3, #32
 8005f88:	6023      	str	r3, [r4, #0]
 8005f8a:	e7f6      	b.n	8005f7a <_printf_i+0x196>
 8005f8c:	4616      	mov	r6, r2
 8005f8e:	e7bd      	b.n	8005f0c <_printf_i+0x128>
 8005f90:	6833      	ldr	r3, [r6, #0]
 8005f92:	6825      	ldr	r5, [r4, #0]
 8005f94:	6961      	ldr	r1, [r4, #20]
 8005f96:	1d18      	adds	r0, r3, #4
 8005f98:	6030      	str	r0, [r6, #0]
 8005f9a:	062e      	lsls	r6, r5, #24
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	d501      	bpl.n	8005fa4 <_printf_i+0x1c0>
 8005fa0:	6019      	str	r1, [r3, #0]
 8005fa2:	e002      	b.n	8005faa <_printf_i+0x1c6>
 8005fa4:	0668      	lsls	r0, r5, #25
 8005fa6:	d5fb      	bpl.n	8005fa0 <_printf_i+0x1bc>
 8005fa8:	8019      	strh	r1, [r3, #0]
 8005faa:	2300      	movs	r3, #0
 8005fac:	6123      	str	r3, [r4, #16]
 8005fae:	4616      	mov	r6, r2
 8005fb0:	e7bc      	b.n	8005f2c <_printf_i+0x148>
 8005fb2:	6833      	ldr	r3, [r6, #0]
 8005fb4:	1d1a      	adds	r2, r3, #4
 8005fb6:	6032      	str	r2, [r6, #0]
 8005fb8:	681e      	ldr	r6, [r3, #0]
 8005fba:	6862      	ldr	r2, [r4, #4]
 8005fbc:	2100      	movs	r1, #0
 8005fbe:	4630      	mov	r0, r6
 8005fc0:	f7fa f92e 	bl	8000220 <memchr>
 8005fc4:	b108      	cbz	r0, 8005fca <_printf_i+0x1e6>
 8005fc6:	1b80      	subs	r0, r0, r6
 8005fc8:	6060      	str	r0, [r4, #4]
 8005fca:	6863      	ldr	r3, [r4, #4]
 8005fcc:	6123      	str	r3, [r4, #16]
 8005fce:	2300      	movs	r3, #0
 8005fd0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005fd4:	e7aa      	b.n	8005f2c <_printf_i+0x148>
 8005fd6:	6923      	ldr	r3, [r4, #16]
 8005fd8:	4632      	mov	r2, r6
 8005fda:	4649      	mov	r1, r9
 8005fdc:	4640      	mov	r0, r8
 8005fde:	47d0      	blx	sl
 8005fe0:	3001      	adds	r0, #1
 8005fe2:	d0ad      	beq.n	8005f40 <_printf_i+0x15c>
 8005fe4:	6823      	ldr	r3, [r4, #0]
 8005fe6:	079b      	lsls	r3, r3, #30
 8005fe8:	d413      	bmi.n	8006012 <_printf_i+0x22e>
 8005fea:	68e0      	ldr	r0, [r4, #12]
 8005fec:	9b03      	ldr	r3, [sp, #12]
 8005fee:	4298      	cmp	r0, r3
 8005ff0:	bfb8      	it	lt
 8005ff2:	4618      	movlt	r0, r3
 8005ff4:	e7a6      	b.n	8005f44 <_printf_i+0x160>
 8005ff6:	2301      	movs	r3, #1
 8005ff8:	4632      	mov	r2, r6
 8005ffa:	4649      	mov	r1, r9
 8005ffc:	4640      	mov	r0, r8
 8005ffe:	47d0      	blx	sl
 8006000:	3001      	adds	r0, #1
 8006002:	d09d      	beq.n	8005f40 <_printf_i+0x15c>
 8006004:	3501      	adds	r5, #1
 8006006:	68e3      	ldr	r3, [r4, #12]
 8006008:	9903      	ldr	r1, [sp, #12]
 800600a:	1a5b      	subs	r3, r3, r1
 800600c:	42ab      	cmp	r3, r5
 800600e:	dcf2      	bgt.n	8005ff6 <_printf_i+0x212>
 8006010:	e7eb      	b.n	8005fea <_printf_i+0x206>
 8006012:	2500      	movs	r5, #0
 8006014:	f104 0619 	add.w	r6, r4, #25
 8006018:	e7f5      	b.n	8006006 <_printf_i+0x222>
 800601a:	bf00      	nop
 800601c:	08007ab5 	.word	0x08007ab5
 8006020:	08007ac6 	.word	0x08007ac6

08006024 <memmove>:
 8006024:	4288      	cmp	r0, r1
 8006026:	b510      	push	{r4, lr}
 8006028:	eb01 0402 	add.w	r4, r1, r2
 800602c:	d902      	bls.n	8006034 <memmove+0x10>
 800602e:	4284      	cmp	r4, r0
 8006030:	4623      	mov	r3, r4
 8006032:	d807      	bhi.n	8006044 <memmove+0x20>
 8006034:	1e43      	subs	r3, r0, #1
 8006036:	42a1      	cmp	r1, r4
 8006038:	d008      	beq.n	800604c <memmove+0x28>
 800603a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800603e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006042:	e7f8      	b.n	8006036 <memmove+0x12>
 8006044:	4402      	add	r2, r0
 8006046:	4601      	mov	r1, r0
 8006048:	428a      	cmp	r2, r1
 800604a:	d100      	bne.n	800604e <memmove+0x2a>
 800604c:	bd10      	pop	{r4, pc}
 800604e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006052:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006056:	e7f7      	b.n	8006048 <memmove+0x24>

08006058 <_sbrk_r>:
 8006058:	b538      	push	{r3, r4, r5, lr}
 800605a:	4d06      	ldr	r5, [pc, #24]	@ (8006074 <_sbrk_r+0x1c>)
 800605c:	2300      	movs	r3, #0
 800605e:	4604      	mov	r4, r0
 8006060:	4608      	mov	r0, r1
 8006062:	602b      	str	r3, [r5, #0]
 8006064:	f7fb fd86 	bl	8001b74 <_sbrk>
 8006068:	1c43      	adds	r3, r0, #1
 800606a:	d102      	bne.n	8006072 <_sbrk_r+0x1a>
 800606c:	682b      	ldr	r3, [r5, #0]
 800606e:	b103      	cbz	r3, 8006072 <_sbrk_r+0x1a>
 8006070:	6023      	str	r3, [r4, #0]
 8006072:	bd38      	pop	{r3, r4, r5, pc}
 8006074:	2000081c 	.word	0x2000081c

08006078 <memcpy>:
 8006078:	440a      	add	r2, r1
 800607a:	4291      	cmp	r1, r2
 800607c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006080:	d100      	bne.n	8006084 <memcpy+0xc>
 8006082:	4770      	bx	lr
 8006084:	b510      	push	{r4, lr}
 8006086:	f811 4b01 	ldrb.w	r4, [r1], #1
 800608a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800608e:	4291      	cmp	r1, r2
 8006090:	d1f9      	bne.n	8006086 <memcpy+0xe>
 8006092:	bd10      	pop	{r4, pc}

08006094 <_realloc_r>:
 8006094:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006098:	4680      	mov	r8, r0
 800609a:	4615      	mov	r5, r2
 800609c:	460c      	mov	r4, r1
 800609e:	b921      	cbnz	r1, 80060aa <_realloc_r+0x16>
 80060a0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80060a4:	4611      	mov	r1, r2
 80060a6:	f7ff bc4b 	b.w	8005940 <_malloc_r>
 80060aa:	b92a      	cbnz	r2, 80060b8 <_realloc_r+0x24>
 80060ac:	f7ff fbdc 	bl	8005868 <_free_r>
 80060b0:	2400      	movs	r4, #0
 80060b2:	4620      	mov	r0, r4
 80060b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80060b8:	f000 f81a 	bl	80060f0 <_malloc_usable_size_r>
 80060bc:	4285      	cmp	r5, r0
 80060be:	4606      	mov	r6, r0
 80060c0:	d802      	bhi.n	80060c8 <_realloc_r+0x34>
 80060c2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80060c6:	d8f4      	bhi.n	80060b2 <_realloc_r+0x1e>
 80060c8:	4629      	mov	r1, r5
 80060ca:	4640      	mov	r0, r8
 80060cc:	f7ff fc38 	bl	8005940 <_malloc_r>
 80060d0:	4607      	mov	r7, r0
 80060d2:	2800      	cmp	r0, #0
 80060d4:	d0ec      	beq.n	80060b0 <_realloc_r+0x1c>
 80060d6:	42b5      	cmp	r5, r6
 80060d8:	462a      	mov	r2, r5
 80060da:	4621      	mov	r1, r4
 80060dc:	bf28      	it	cs
 80060de:	4632      	movcs	r2, r6
 80060e0:	f7ff ffca 	bl	8006078 <memcpy>
 80060e4:	4621      	mov	r1, r4
 80060e6:	4640      	mov	r0, r8
 80060e8:	f7ff fbbe 	bl	8005868 <_free_r>
 80060ec:	463c      	mov	r4, r7
 80060ee:	e7e0      	b.n	80060b2 <_realloc_r+0x1e>

080060f0 <_malloc_usable_size_r>:
 80060f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80060f4:	1f18      	subs	r0, r3, #4
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	bfbc      	itt	lt
 80060fa:	580b      	ldrlt	r3, [r1, r0]
 80060fc:	18c0      	addlt	r0, r0, r3
 80060fe:	4770      	bx	lr

08006100 <_init>:
 8006100:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006102:	bf00      	nop
 8006104:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006106:	bc08      	pop	{r3}
 8006108:	469e      	mov	lr, r3
 800610a:	4770      	bx	lr

0800610c <_fini>:
 800610c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800610e:	bf00      	nop
 8006110:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006112:	bc08      	pop	{r3}
 8006114:	469e      	mov	lr, r3
 8006116:	4770      	bx	lr
