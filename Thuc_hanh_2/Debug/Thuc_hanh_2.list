
Thuc_hanh_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005668  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000175c  08005818  08005818  00006818  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006f74  08006f74  0000806c  2**0
                  CONTENTS
  4 .ARM          00000008  08006f74  08006f74  00007f74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006f7c  08006f7c  0000806c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006f7c  08006f7c  00007f7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006f80  08006f80  00007f80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08006f84  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000806c  2**0
                  CONTENTS
 10 .bss          000006d0  2000006c  2000006c  0000806c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000073c  2000073c  0000806c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000806c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000eb56  00000000  00000000  0000809c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000230a  00000000  00000000  00016bf2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d58  00000000  00000000  00018f00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a67  00000000  00000000  00019c58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000241a5  00000000  00000000  0001a6bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011779  00000000  00000000  0003e864  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d6fab  00000000  00000000  0004ffdd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00126f88  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003c48  00000000  00000000  00126fcc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000043  00000000  00000000  0012ac14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08005800 	.word	0x08005800

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000070 	.word	0x20000070
 80001ec:	08005800 	.word	0x08005800

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b96a 	b.w	800058c <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	460c      	mov	r4, r1
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d14e      	bne.n	800037a <__udivmoddi4+0xaa>
 80002dc:	4694      	mov	ip, r2
 80002de:	458c      	cmp	ip, r1
 80002e0:	4686      	mov	lr, r0
 80002e2:	fab2 f282 	clz	r2, r2
 80002e6:	d962      	bls.n	80003ae <__udivmoddi4+0xde>
 80002e8:	b14a      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ea:	f1c2 0320 	rsb	r3, r2, #32
 80002ee:	4091      	lsls	r1, r2
 80002f0:	fa20 f303 	lsr.w	r3, r0, r3
 80002f4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002f8:	4319      	orrs	r1, r3
 80002fa:	fa00 fe02 	lsl.w	lr, r0, r2
 80002fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000302:	fa1f f68c 	uxth.w	r6, ip
 8000306:	fbb1 f4f7 	udiv	r4, r1, r7
 800030a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800030e:	fb07 1114 	mls	r1, r7, r4, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb04 f106 	mul.w	r1, r4, r6
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f104 30ff 	add.w	r0, r4, #4294967295
 8000326:	f080 8112 	bcs.w	800054e <__udivmoddi4+0x27e>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 810f 	bls.w	800054e <__udivmoddi4+0x27e>
 8000330:	3c02      	subs	r4, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a59      	subs	r1, r3, r1
 8000336:	fa1f f38e 	uxth.w	r3, lr
 800033a:	fbb1 f0f7 	udiv	r0, r1, r7
 800033e:	fb07 1110 	mls	r1, r7, r0, r1
 8000342:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000346:	fb00 f606 	mul.w	r6, r0, r6
 800034a:	429e      	cmp	r6, r3
 800034c:	d90a      	bls.n	8000364 <__udivmoddi4+0x94>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f100 31ff 	add.w	r1, r0, #4294967295
 8000356:	f080 80fc 	bcs.w	8000552 <__udivmoddi4+0x282>
 800035a:	429e      	cmp	r6, r3
 800035c:	f240 80f9 	bls.w	8000552 <__udivmoddi4+0x282>
 8000360:	4463      	add	r3, ip
 8000362:	3802      	subs	r0, #2
 8000364:	1b9b      	subs	r3, r3, r6
 8000366:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800036a:	2100      	movs	r1, #0
 800036c:	b11d      	cbz	r5, 8000376 <__udivmoddi4+0xa6>
 800036e:	40d3      	lsrs	r3, r2
 8000370:	2200      	movs	r2, #0
 8000372:	e9c5 3200 	strd	r3, r2, [r5]
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d905      	bls.n	800038a <__udivmoddi4+0xba>
 800037e:	b10d      	cbz	r5, 8000384 <__udivmoddi4+0xb4>
 8000380:	e9c5 0100 	strd	r0, r1, [r5]
 8000384:	2100      	movs	r1, #0
 8000386:	4608      	mov	r0, r1
 8000388:	e7f5      	b.n	8000376 <__udivmoddi4+0xa6>
 800038a:	fab3 f183 	clz	r1, r3
 800038e:	2900      	cmp	r1, #0
 8000390:	d146      	bne.n	8000420 <__udivmoddi4+0x150>
 8000392:	42a3      	cmp	r3, r4
 8000394:	d302      	bcc.n	800039c <__udivmoddi4+0xcc>
 8000396:	4290      	cmp	r0, r2
 8000398:	f0c0 80f0 	bcc.w	800057c <__udivmoddi4+0x2ac>
 800039c:	1a86      	subs	r6, r0, r2
 800039e:	eb64 0303 	sbc.w	r3, r4, r3
 80003a2:	2001      	movs	r0, #1
 80003a4:	2d00      	cmp	r5, #0
 80003a6:	d0e6      	beq.n	8000376 <__udivmoddi4+0xa6>
 80003a8:	e9c5 6300 	strd	r6, r3, [r5]
 80003ac:	e7e3      	b.n	8000376 <__udivmoddi4+0xa6>
 80003ae:	2a00      	cmp	r2, #0
 80003b0:	f040 8090 	bne.w	80004d4 <__udivmoddi4+0x204>
 80003b4:	eba1 040c 	sub.w	r4, r1, ip
 80003b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003bc:	fa1f f78c 	uxth.w	r7, ip
 80003c0:	2101      	movs	r1, #1
 80003c2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003c6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ca:	fb08 4416 	mls	r4, r8, r6, r4
 80003ce:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003d2:	fb07 f006 	mul.w	r0, r7, r6
 80003d6:	4298      	cmp	r0, r3
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x11c>
 80003da:	eb1c 0303 	adds.w	r3, ip, r3
 80003de:	f106 34ff 	add.w	r4, r6, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x11a>
 80003e4:	4298      	cmp	r0, r3
 80003e6:	f200 80cd 	bhi.w	8000584 <__udivmoddi4+0x2b4>
 80003ea:	4626      	mov	r6, r4
 80003ec:	1a1c      	subs	r4, r3, r0
 80003ee:	fa1f f38e 	uxth.w	r3, lr
 80003f2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003f6:	fb08 4410 	mls	r4, r8, r0, r4
 80003fa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003fe:	fb00 f707 	mul.w	r7, r0, r7
 8000402:	429f      	cmp	r7, r3
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x148>
 8000406:	eb1c 0303 	adds.w	r3, ip, r3
 800040a:	f100 34ff 	add.w	r4, r0, #4294967295
 800040e:	d202      	bcs.n	8000416 <__udivmoddi4+0x146>
 8000410:	429f      	cmp	r7, r3
 8000412:	f200 80b0 	bhi.w	8000576 <__udivmoddi4+0x2a6>
 8000416:	4620      	mov	r0, r4
 8000418:	1bdb      	subs	r3, r3, r7
 800041a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800041e:	e7a5      	b.n	800036c <__udivmoddi4+0x9c>
 8000420:	f1c1 0620 	rsb	r6, r1, #32
 8000424:	408b      	lsls	r3, r1
 8000426:	fa22 f706 	lsr.w	r7, r2, r6
 800042a:	431f      	orrs	r7, r3
 800042c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000430:	fa04 f301 	lsl.w	r3, r4, r1
 8000434:	ea43 030c 	orr.w	r3, r3, ip
 8000438:	40f4      	lsrs	r4, r6
 800043a:	fa00 f801 	lsl.w	r8, r0, r1
 800043e:	0c38      	lsrs	r0, r7, #16
 8000440:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000444:	fbb4 fef0 	udiv	lr, r4, r0
 8000448:	fa1f fc87 	uxth.w	ip, r7
 800044c:	fb00 441e 	mls	r4, r0, lr, r4
 8000450:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000454:	fb0e f90c 	mul.w	r9, lr, ip
 8000458:	45a1      	cmp	r9, r4
 800045a:	fa02 f201 	lsl.w	r2, r2, r1
 800045e:	d90a      	bls.n	8000476 <__udivmoddi4+0x1a6>
 8000460:	193c      	adds	r4, r7, r4
 8000462:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000466:	f080 8084 	bcs.w	8000572 <__udivmoddi4+0x2a2>
 800046a:	45a1      	cmp	r9, r4
 800046c:	f240 8081 	bls.w	8000572 <__udivmoddi4+0x2a2>
 8000470:	f1ae 0e02 	sub.w	lr, lr, #2
 8000474:	443c      	add	r4, r7
 8000476:	eba4 0409 	sub.w	r4, r4, r9
 800047a:	fa1f f983 	uxth.w	r9, r3
 800047e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000482:	fb00 4413 	mls	r4, r0, r3, r4
 8000486:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048a:	fb03 fc0c 	mul.w	ip, r3, ip
 800048e:	45a4      	cmp	ip, r4
 8000490:	d907      	bls.n	80004a2 <__udivmoddi4+0x1d2>
 8000492:	193c      	adds	r4, r7, r4
 8000494:	f103 30ff 	add.w	r0, r3, #4294967295
 8000498:	d267      	bcs.n	800056a <__udivmoddi4+0x29a>
 800049a:	45a4      	cmp	ip, r4
 800049c:	d965      	bls.n	800056a <__udivmoddi4+0x29a>
 800049e:	3b02      	subs	r3, #2
 80004a0:	443c      	add	r4, r7
 80004a2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004a6:	fba0 9302 	umull	r9, r3, r0, r2
 80004aa:	eba4 040c 	sub.w	r4, r4, ip
 80004ae:	429c      	cmp	r4, r3
 80004b0:	46ce      	mov	lr, r9
 80004b2:	469c      	mov	ip, r3
 80004b4:	d351      	bcc.n	800055a <__udivmoddi4+0x28a>
 80004b6:	d04e      	beq.n	8000556 <__udivmoddi4+0x286>
 80004b8:	b155      	cbz	r5, 80004d0 <__udivmoddi4+0x200>
 80004ba:	ebb8 030e 	subs.w	r3, r8, lr
 80004be:	eb64 040c 	sbc.w	r4, r4, ip
 80004c2:	fa04 f606 	lsl.w	r6, r4, r6
 80004c6:	40cb      	lsrs	r3, r1
 80004c8:	431e      	orrs	r6, r3
 80004ca:	40cc      	lsrs	r4, r1
 80004cc:	e9c5 6400 	strd	r6, r4, [r5]
 80004d0:	2100      	movs	r1, #0
 80004d2:	e750      	b.n	8000376 <__udivmoddi4+0xa6>
 80004d4:	f1c2 0320 	rsb	r3, r2, #32
 80004d8:	fa20 f103 	lsr.w	r1, r0, r3
 80004dc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e0:	fa24 f303 	lsr.w	r3, r4, r3
 80004e4:	4094      	lsls	r4, r2
 80004e6:	430c      	orrs	r4, r1
 80004e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ec:	fa00 fe02 	lsl.w	lr, r0, r2
 80004f0:	fa1f f78c 	uxth.w	r7, ip
 80004f4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004f8:	fb08 3110 	mls	r1, r8, r0, r3
 80004fc:	0c23      	lsrs	r3, r4, #16
 80004fe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000502:	fb00 f107 	mul.w	r1, r0, r7
 8000506:	4299      	cmp	r1, r3
 8000508:	d908      	bls.n	800051c <__udivmoddi4+0x24c>
 800050a:	eb1c 0303 	adds.w	r3, ip, r3
 800050e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000512:	d22c      	bcs.n	800056e <__udivmoddi4+0x29e>
 8000514:	4299      	cmp	r1, r3
 8000516:	d92a      	bls.n	800056e <__udivmoddi4+0x29e>
 8000518:	3802      	subs	r0, #2
 800051a:	4463      	add	r3, ip
 800051c:	1a5b      	subs	r3, r3, r1
 800051e:	b2a4      	uxth	r4, r4
 8000520:	fbb3 f1f8 	udiv	r1, r3, r8
 8000524:	fb08 3311 	mls	r3, r8, r1, r3
 8000528:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800052c:	fb01 f307 	mul.w	r3, r1, r7
 8000530:	42a3      	cmp	r3, r4
 8000532:	d908      	bls.n	8000546 <__udivmoddi4+0x276>
 8000534:	eb1c 0404 	adds.w	r4, ip, r4
 8000538:	f101 36ff 	add.w	r6, r1, #4294967295
 800053c:	d213      	bcs.n	8000566 <__udivmoddi4+0x296>
 800053e:	42a3      	cmp	r3, r4
 8000540:	d911      	bls.n	8000566 <__udivmoddi4+0x296>
 8000542:	3902      	subs	r1, #2
 8000544:	4464      	add	r4, ip
 8000546:	1ae4      	subs	r4, r4, r3
 8000548:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800054c:	e739      	b.n	80003c2 <__udivmoddi4+0xf2>
 800054e:	4604      	mov	r4, r0
 8000550:	e6f0      	b.n	8000334 <__udivmoddi4+0x64>
 8000552:	4608      	mov	r0, r1
 8000554:	e706      	b.n	8000364 <__udivmoddi4+0x94>
 8000556:	45c8      	cmp	r8, r9
 8000558:	d2ae      	bcs.n	80004b8 <__udivmoddi4+0x1e8>
 800055a:	ebb9 0e02 	subs.w	lr, r9, r2
 800055e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000562:	3801      	subs	r0, #1
 8000564:	e7a8      	b.n	80004b8 <__udivmoddi4+0x1e8>
 8000566:	4631      	mov	r1, r6
 8000568:	e7ed      	b.n	8000546 <__udivmoddi4+0x276>
 800056a:	4603      	mov	r3, r0
 800056c:	e799      	b.n	80004a2 <__udivmoddi4+0x1d2>
 800056e:	4630      	mov	r0, r6
 8000570:	e7d4      	b.n	800051c <__udivmoddi4+0x24c>
 8000572:	46d6      	mov	lr, sl
 8000574:	e77f      	b.n	8000476 <__udivmoddi4+0x1a6>
 8000576:	4463      	add	r3, ip
 8000578:	3802      	subs	r0, #2
 800057a:	e74d      	b.n	8000418 <__udivmoddi4+0x148>
 800057c:	4606      	mov	r6, r0
 800057e:	4623      	mov	r3, r4
 8000580:	4608      	mov	r0, r1
 8000582:	e70f      	b.n	80003a4 <__udivmoddi4+0xd4>
 8000584:	3e02      	subs	r6, #2
 8000586:	4463      	add	r3, ip
 8000588:	e730      	b.n	80003ec <__udivmoddi4+0x11c>
 800058a:	bf00      	nop

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <SH1106_Init>:
static SH1106_t SH1106;

#define SH1106_NORMALDISPLAY       0xA6
#define SH1106_INVERTDISPLAY       0xA7

uint8_t SH1106_Init(void) {
 8000590:	b580      	push	{r7, lr}
 8000592:	b082      	sub	sp, #8
 8000594:	af00      	add	r7, sp, #0
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(SH1106_I2C, SH1106_I2C_ADDR, 1, 20000) != HAL_OK) {
 8000596:	f644 6320 	movw	r3, #20000	@ 0x4e20
 800059a:	2201      	movs	r2, #1
 800059c:	2178      	movs	r1, #120	@ 0x78
 800059e:	484c      	ldr	r0, [pc, #304]	@ (80006d0 <SH1106_Init+0x140>)
 80005a0:	f002 f920 	bl	80027e4 <HAL_I2C_IsDeviceReady>
 80005a4:	4603      	mov	r3, r0
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d001      	beq.n	80005ae <SH1106_Init+0x1e>
		/* Return false */
		return 0;
 80005aa:	2300      	movs	r3, #0
 80005ac:	e08b      	b.n	80006c6 <SH1106_Init+0x136>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 80005ae:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 80005b2:	607b      	str	r3, [r7, #4]
	while(p>0)
 80005b4:	e002      	b.n	80005bc <SH1106_Init+0x2c>
		p--;
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	3b01      	subs	r3, #1
 80005ba:	607b      	str	r3, [r7, #4]
	while(p>0)
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d1f9      	bne.n	80005b6 <SH1106_Init+0x26>
	
	  // Initialize the display
	SH1106_WRITECOMMAND(0xAE); //display off
 80005c2:	22ae      	movs	r2, #174	@ 0xae
 80005c4:	2100      	movs	r1, #0
 80005c6:	2078      	movs	r0, #120	@ 0x78
 80005c8:	f000 fa54 	bl	8000a74 <SH1106_I2C_Write>
	SH1106_WRITECOMMAND(0xB0|0x00); //Set Page Start Address for Page Addressing Mode,0-7
 80005cc:	22b0      	movs	r2, #176	@ 0xb0
 80005ce:	2100      	movs	r1, #0
 80005d0:	2078      	movs	r0, #120	@ 0x78
 80005d2:	f000 fa4f 	bl	8000a74 <SH1106_I2C_Write>
	SH1106_WRITECOMMAND(0x81); //--set contrast control register
 80005d6:	2281      	movs	r2, #129	@ 0x81
 80005d8:	2100      	movs	r1, #0
 80005da:	2078      	movs	r0, #120	@ 0x78
 80005dc:	f000 fa4a 	bl	8000a74 <SH1106_I2C_Write>
	SH1106_WRITECOMMAND(0xFF); // contrast value
 80005e0:	22ff      	movs	r2, #255	@ 0xff
 80005e2:	2100      	movs	r1, #0
 80005e4:	2078      	movs	r0, #120	@ 0x78
 80005e6:	f000 fa45 	bl	8000a74 <SH1106_I2C_Write>
	SH1106_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 80005ea:	22a1      	movs	r2, #161	@ 0xa1
 80005ec:	2100      	movs	r1, #0
 80005ee:	2078      	movs	r0, #120	@ 0x78
 80005f0:	f000 fa40 	bl	8000a74 <SH1106_I2C_Write>
	SH1106_WRITECOMMAND(0xA6); //--set normal display
 80005f4:	22a6      	movs	r2, #166	@ 0xa6
 80005f6:	2100      	movs	r1, #0
 80005f8:	2078      	movs	r0, #120	@ 0x78
 80005fa:	f000 fa3b 	bl	8000a74 <SH1106_I2C_Write>
	SH1106_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 80005fe:	22a8      	movs	r2, #168	@ 0xa8
 8000600:	2100      	movs	r1, #0
 8000602:	2078      	movs	r0, #120	@ 0x78
 8000604:	f000 fa36 	bl	8000a74 <SH1106_I2C_Write>
	SH1106_WRITECOMMAND(0x3F); // multiplex value
 8000608:	223f      	movs	r2, #63	@ 0x3f
 800060a:	2100      	movs	r1, #0
 800060c:	2078      	movs	r0, #120	@ 0x78
 800060e:	f000 fa31 	bl	8000a74 <SH1106_I2C_Write>
	SH1106_WRITECOMMAND(0xAD); // Set Pump Mode
 8000612:	22ad      	movs	r2, #173	@ 0xad
 8000614:	2100      	movs	r1, #0
 8000616:	2078      	movs	r0, #120	@ 0x78
 8000618:	f000 fa2c 	bl	8000a74 <SH1106_I2C_Write>
	SH1106_WRITECOMMAND(0x8B); // Pump ON
 800061c:	228b      	movs	r2, #139	@ 0x8b
 800061e:	2100      	movs	r1, #0
 8000620:	2078      	movs	r0, #120	@ 0x78
 8000622:	f000 fa27 	bl	8000a74 <SH1106_I2C_Write>
	SH1106_WRITECOMMAND(0x30|0x02); // Set Pump Voltage 8.0
 8000626:	2232      	movs	r2, #50	@ 0x32
 8000628:	2100      	movs	r1, #0
 800062a:	2078      	movs	r0, #120	@ 0x78
 800062c:	f000 fa22 	bl	8000a74 <SH1106_I2C_Write>
	SH1106_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8000630:	22c8      	movs	r2, #200	@ 0xc8
 8000632:	2100      	movs	r1, #0
 8000634:	2078      	movs	r0, #120	@ 0x78
 8000636:	f000 fa1d 	bl	8000a74 <SH1106_I2C_Write>
	SH1106_WRITECOMMAND(0xD3); //-set display offset
 800063a:	22d3      	movs	r2, #211	@ 0xd3
 800063c:	2100      	movs	r1, #0
 800063e:	2078      	movs	r0, #120	@ 0x78
 8000640:	f000 fa18 	bl	8000a74 <SH1106_I2C_Write>
	SH1106_WRITECOMMAND(0x00); //-not offset
 8000644:	2200      	movs	r2, #0
 8000646:	2100      	movs	r1, #0
 8000648:	2078      	movs	r0, #120	@ 0x78
 800064a:	f000 fa13 	bl	8000a74 <SH1106_I2C_Write>
	SH1106_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 800064e:	22d5      	movs	r2, #213	@ 0xd5
 8000650:	2100      	movs	r1, #0
 8000652:	2078      	movs	r0, #120	@ 0x78
 8000654:	f000 fa0e 	bl	8000a74 <SH1106_I2C_Write>
	SH1106_WRITECOMMAND(0x80); //--set divide ratio
 8000658:	2280      	movs	r2, #128	@ 0x80
 800065a:	2100      	movs	r1, #0
 800065c:	2078      	movs	r0, #120	@ 0x78
 800065e:	f000 fa09 	bl	8000a74 <SH1106_I2C_Write>
	SH1106_WRITECOMMAND(0xD9); //--set pre-charge period
 8000662:	22d9      	movs	r2, #217	@ 0xd9
 8000664:	2100      	movs	r1, #0
 8000666:	2078      	movs	r0, #120	@ 0x78
 8000668:	f000 fa04 	bl	8000a74 <SH1106_I2C_Write>
	SH1106_WRITECOMMAND(0x1F); //
 800066c:	221f      	movs	r2, #31
 800066e:	2100      	movs	r1, #0
 8000670:	2078      	movs	r0, #120	@ 0x78
 8000672:	f000 f9ff 	bl	8000a74 <SH1106_I2C_Write>
	SH1106_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8000676:	22da      	movs	r2, #218	@ 0xda
 8000678:	2100      	movs	r1, #0
 800067a:	2078      	movs	r0, #120	@ 0x78
 800067c:	f000 f9fa 	bl	8000a74 <SH1106_I2C_Write>
	SH1106_WRITECOMMAND(0x12);
 8000680:	2212      	movs	r2, #18
 8000682:	2100      	movs	r1, #0
 8000684:	2078      	movs	r0, #120	@ 0x78
 8000686:	f000 f9f5 	bl	8000a74 <SH1106_I2C_Write>
	SH1106_WRITECOMMAND(0xDB); //--set vcomh
 800068a:	22db      	movs	r2, #219	@ 0xdb
 800068c:	2100      	movs	r1, #0
 800068e:	2078      	movs	r0, #120	@ 0x78
 8000690:	f000 f9f0 	bl	8000a74 <SH1106_I2C_Write>
	SH1106_WRITECOMMAND(0x40); //
 8000694:	2240      	movs	r2, #64	@ 0x40
 8000696:	2100      	movs	r1, #0
 8000698:	2078      	movs	r0, #120	@ 0x78
 800069a:	f000 f9eb 	bl	8000a74 <SH1106_I2C_Write>
	SH1106_WRITECOMMAND(0xAF); //--turn on SH1106 panel
 800069e:	22af      	movs	r2, #175	@ 0xaf
 80006a0:	2100      	movs	r1, #0
 80006a2:	2078      	movs	r0, #120	@ 0x78
 80006a4:	f000 f9e6 	bl	8000a74 <SH1106_I2C_Write>


	/* Clear screen */
	SH1106_Fill(SH1106_COLOR_BLACK);
 80006a8:	2000      	movs	r0, #0
 80006aa:	f000 f843 	bl	8000734 <SH1106_Fill>
	
	/* Update screen */
	SH1106_UpdateScreen();
 80006ae:	f000 f813 	bl	80006d8 <SH1106_UpdateScreen>
	
	/* Set default values */
	SH1106.CurrentX = 0;
 80006b2:	4b08      	ldr	r3, [pc, #32]	@ (80006d4 <SH1106_Init+0x144>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	801a      	strh	r2, [r3, #0]
	SH1106.CurrentY = 0;
 80006b8:	4b06      	ldr	r3, [pc, #24]	@ (80006d4 <SH1106_Init+0x144>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SH1106.Initialized = 1;
 80006be:	4b05      	ldr	r3, [pc, #20]	@ (80006d4 <SH1106_Init+0x144>)
 80006c0:	2201      	movs	r2, #1
 80006c2:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 80006c4:	2301      	movs	r3, #1
}
 80006c6:	4618      	mov	r0, r3
 80006c8:	3708      	adds	r7, #8
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	20000490 	.word	0x20000490
 80006d4:	20000488 	.word	0x20000488

080006d8 <SH1106_UpdateScreen>:

void SH1106_UpdateScreen(void) {
 80006d8:	b580      	push	{r7, lr}
 80006da:	b082      	sub	sp, #8
 80006dc:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 80006de:	2300      	movs	r3, #0
 80006e0:	71fb      	strb	r3, [r7, #7]
 80006e2:	e01d      	b.n	8000720 <SH1106_UpdateScreen+0x48>
		SH1106_WRITECOMMAND(0xB0 + m);
 80006e4:	79fb      	ldrb	r3, [r7, #7]
 80006e6:	3b50      	subs	r3, #80	@ 0x50
 80006e8:	b2db      	uxtb	r3, r3
 80006ea:	461a      	mov	r2, r3
 80006ec:	2100      	movs	r1, #0
 80006ee:	2078      	movs	r0, #120	@ 0x78
 80006f0:	f000 f9c0 	bl	8000a74 <SH1106_I2C_Write>
		SH1106_WRITECOMMAND(0x00);
 80006f4:	2200      	movs	r2, #0
 80006f6:	2100      	movs	r1, #0
 80006f8:	2078      	movs	r0, #120	@ 0x78
 80006fa:	f000 f9bb 	bl	8000a74 <SH1106_I2C_Write>
		SH1106_WRITECOMMAND(0x10);
 80006fe:	2210      	movs	r2, #16
 8000700:	2100      	movs	r1, #0
 8000702:	2078      	movs	r0, #120	@ 0x78
 8000704:	f000 f9b6 	bl	8000a74 <SH1106_I2C_Write>
		
		/* Write multi data */
		SH1106_I2C_WriteMulti(SH1106_I2C_ADDR, 0x40, &SH1106_Buffer[SH1106_WIDTH * m], SH1106_WIDTH);
 8000708:	79fb      	ldrb	r3, [r7, #7]
 800070a:	01db      	lsls	r3, r3, #7
 800070c:	4a08      	ldr	r2, [pc, #32]	@ (8000730 <SH1106_UpdateScreen+0x58>)
 800070e:	441a      	add	r2, r3
 8000710:	2380      	movs	r3, #128	@ 0x80
 8000712:	2140      	movs	r1, #64	@ 0x40
 8000714:	2078      	movs	r0, #120	@ 0x78
 8000716:	f000 f947 	bl	80009a8 <SH1106_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 800071a:	79fb      	ldrb	r3, [r7, #7]
 800071c:	3301      	adds	r3, #1
 800071e:	71fb      	strb	r3, [r7, #7]
 8000720:	79fb      	ldrb	r3, [r7, #7]
 8000722:	2b07      	cmp	r3, #7
 8000724:	d9de      	bls.n	80006e4 <SH1106_UpdateScreen+0xc>
	}
}
 8000726:	bf00      	nop
 8000728:	bf00      	nop
 800072a:	3708      	adds	r7, #8
 800072c:	46bd      	mov	sp, r7
 800072e:	bd80      	pop	{r7, pc}
 8000730:	20000088 	.word	0x20000088

08000734 <SH1106_Fill>:
	for (i = 0; i < sizeof(SH1106_Buffer); i++) {
		SH1106_Buffer[i] = ~SH1106_Buffer[i];
	}
}

void SH1106_Fill(SH1106_COLOR_t color) {
 8000734:	b580      	push	{r7, lr}
 8000736:	b082      	sub	sp, #8
 8000738:	af00      	add	r7, sp, #0
 800073a:	4603      	mov	r3, r0
 800073c:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SH1106_Buffer, (color == SH1106_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SH1106_Buffer));
 800073e:	79fb      	ldrb	r3, [r7, #7]
 8000740:	2b00      	cmp	r3, #0
 8000742:	d101      	bne.n	8000748 <SH1106_Fill+0x14>
 8000744:	2300      	movs	r3, #0
 8000746:	e000      	b.n	800074a <SH1106_Fill+0x16>
 8000748:	23ff      	movs	r3, #255	@ 0xff
 800074a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800074e:	4619      	mov	r1, r3
 8000750:	4803      	ldr	r0, [pc, #12]	@ (8000760 <SH1106_Fill+0x2c>)
 8000752:	f004 fbd5 	bl	8004f00 <memset>
}
 8000756:	bf00      	nop
 8000758:	3708      	adds	r7, #8
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	20000088 	.word	0x20000088

08000764 <SH1106_DrawPixel>:

void SH1106_DrawPixel(uint16_t x, uint16_t y, SH1106_COLOR_t color) {
 8000764:	b480      	push	{r7}
 8000766:	b083      	sub	sp, #12
 8000768:	af00      	add	r7, sp, #0
 800076a:	4603      	mov	r3, r0
 800076c:	80fb      	strh	r3, [r7, #6]
 800076e:	460b      	mov	r3, r1
 8000770:	80bb      	strh	r3, [r7, #4]
 8000772:	4613      	mov	r3, r2
 8000774:	70fb      	strb	r3, [r7, #3]
	if (
 8000776:	88fb      	ldrh	r3, [r7, #6]
 8000778:	2b7f      	cmp	r3, #127	@ 0x7f
 800077a:	d848      	bhi.n	800080e <SH1106_DrawPixel+0xaa>
		x >= SH1106_WIDTH ||
 800077c:	88bb      	ldrh	r3, [r7, #4]
 800077e:	2b3f      	cmp	r3, #63	@ 0x3f
 8000780:	d845      	bhi.n	800080e <SH1106_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SH1106.Inverted) {
 8000782:	4b26      	ldr	r3, [pc, #152]	@ (800081c <SH1106_DrawPixel+0xb8>)
 8000784:	791b      	ldrb	r3, [r3, #4]
 8000786:	2b00      	cmp	r3, #0
 8000788:	d006      	beq.n	8000798 <SH1106_DrawPixel+0x34>
		color = (SH1106_COLOR_t)!color;
 800078a:	78fb      	ldrb	r3, [r7, #3]
 800078c:	2b00      	cmp	r3, #0
 800078e:	bf0c      	ite	eq
 8000790:	2301      	moveq	r3, #1
 8000792:	2300      	movne	r3, #0
 8000794:	b2db      	uxtb	r3, r3
 8000796:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SH1106_COLOR_WHITE) {
 8000798:	78fb      	ldrb	r3, [r7, #3]
 800079a:	2b01      	cmp	r3, #1
 800079c:	d11a      	bne.n	80007d4 <SH1106_DrawPixel+0x70>
		SH1106_Buffer[x + (y / 8) * SH1106_WIDTH] |= 1 << (y % 8);
 800079e:	88fa      	ldrh	r2, [r7, #6]
 80007a0:	88bb      	ldrh	r3, [r7, #4]
 80007a2:	08db      	lsrs	r3, r3, #3
 80007a4:	b298      	uxth	r0, r3
 80007a6:	4603      	mov	r3, r0
 80007a8:	01db      	lsls	r3, r3, #7
 80007aa:	4413      	add	r3, r2
 80007ac:	4a1c      	ldr	r2, [pc, #112]	@ (8000820 <SH1106_DrawPixel+0xbc>)
 80007ae:	5cd3      	ldrb	r3, [r2, r3]
 80007b0:	b25a      	sxtb	r2, r3
 80007b2:	88bb      	ldrh	r3, [r7, #4]
 80007b4:	f003 0307 	and.w	r3, r3, #7
 80007b8:	2101      	movs	r1, #1
 80007ba:	fa01 f303 	lsl.w	r3, r1, r3
 80007be:	b25b      	sxtb	r3, r3
 80007c0:	4313      	orrs	r3, r2
 80007c2:	b259      	sxtb	r1, r3
 80007c4:	88fa      	ldrh	r2, [r7, #6]
 80007c6:	4603      	mov	r3, r0
 80007c8:	01db      	lsls	r3, r3, #7
 80007ca:	4413      	add	r3, r2
 80007cc:	b2c9      	uxtb	r1, r1
 80007ce:	4a14      	ldr	r2, [pc, #80]	@ (8000820 <SH1106_DrawPixel+0xbc>)
 80007d0:	54d1      	strb	r1, [r2, r3]
 80007d2:	e01d      	b.n	8000810 <SH1106_DrawPixel+0xac>
	} else {
		SH1106_Buffer[x + (y / 8) * SH1106_WIDTH] &= ~(1 << (y % 8));
 80007d4:	88fa      	ldrh	r2, [r7, #6]
 80007d6:	88bb      	ldrh	r3, [r7, #4]
 80007d8:	08db      	lsrs	r3, r3, #3
 80007da:	b298      	uxth	r0, r3
 80007dc:	4603      	mov	r3, r0
 80007de:	01db      	lsls	r3, r3, #7
 80007e0:	4413      	add	r3, r2
 80007e2:	4a0f      	ldr	r2, [pc, #60]	@ (8000820 <SH1106_DrawPixel+0xbc>)
 80007e4:	5cd3      	ldrb	r3, [r2, r3]
 80007e6:	b25a      	sxtb	r2, r3
 80007e8:	88bb      	ldrh	r3, [r7, #4]
 80007ea:	f003 0307 	and.w	r3, r3, #7
 80007ee:	2101      	movs	r1, #1
 80007f0:	fa01 f303 	lsl.w	r3, r1, r3
 80007f4:	b25b      	sxtb	r3, r3
 80007f6:	43db      	mvns	r3, r3
 80007f8:	b25b      	sxtb	r3, r3
 80007fa:	4013      	ands	r3, r2
 80007fc:	b259      	sxtb	r1, r3
 80007fe:	88fa      	ldrh	r2, [r7, #6]
 8000800:	4603      	mov	r3, r0
 8000802:	01db      	lsls	r3, r3, #7
 8000804:	4413      	add	r3, r2
 8000806:	b2c9      	uxtb	r1, r1
 8000808:	4a05      	ldr	r2, [pc, #20]	@ (8000820 <SH1106_DrawPixel+0xbc>)
 800080a:	54d1      	strb	r1, [r2, r3]
 800080c:	e000      	b.n	8000810 <SH1106_DrawPixel+0xac>
		return;
 800080e:	bf00      	nop
	}
}
 8000810:	370c      	adds	r7, #12
 8000812:	46bd      	mov	sp, r7
 8000814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000818:	4770      	bx	lr
 800081a:	bf00      	nop
 800081c:	20000488 	.word	0x20000488
 8000820:	20000088 	.word	0x20000088

08000824 <SH1106_GotoXY>:

void SH1106_GotoXY(uint16_t x, uint16_t y) {
 8000824:	b480      	push	{r7}
 8000826:	b083      	sub	sp, #12
 8000828:	af00      	add	r7, sp, #0
 800082a:	4603      	mov	r3, r0
 800082c:	460a      	mov	r2, r1
 800082e:	80fb      	strh	r3, [r7, #6]
 8000830:	4613      	mov	r3, r2
 8000832:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SH1106.CurrentX = x;
 8000834:	4a05      	ldr	r2, [pc, #20]	@ (800084c <SH1106_GotoXY+0x28>)
 8000836:	88fb      	ldrh	r3, [r7, #6]
 8000838:	8013      	strh	r3, [r2, #0]
	SH1106.CurrentY = y;
 800083a:	4a04      	ldr	r2, [pc, #16]	@ (800084c <SH1106_GotoXY+0x28>)
 800083c:	88bb      	ldrh	r3, [r7, #4]
 800083e:	8053      	strh	r3, [r2, #2]
}
 8000840:	bf00      	nop
 8000842:	370c      	adds	r7, #12
 8000844:	46bd      	mov	sp, r7
 8000846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084a:	4770      	bx	lr
 800084c:	20000488 	.word	0x20000488

08000850 <SH1106_Putc>:

char SH1106_Putc(char ch, FontDef_t* Font, SH1106_COLOR_t color) {
 8000850:	b580      	push	{r7, lr}
 8000852:	b086      	sub	sp, #24
 8000854:	af00      	add	r7, sp, #0
 8000856:	4603      	mov	r3, r0
 8000858:	6039      	str	r1, [r7, #0]
 800085a:	71fb      	strb	r3, [r7, #7]
 800085c:	4613      	mov	r3, r2
 800085e:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SH1106_WIDTH <= (SH1106.CurrentX + Font->FontWidth) ||
 8000860:	4b39      	ldr	r3, [pc, #228]	@ (8000948 <SH1106_Putc+0xf8>)
 8000862:	881b      	ldrh	r3, [r3, #0]
 8000864:	461a      	mov	r2, r3
 8000866:	683b      	ldr	r3, [r7, #0]
 8000868:	781b      	ldrb	r3, [r3, #0]
 800086a:	4413      	add	r3, r2
	if (
 800086c:	2b7f      	cmp	r3, #127	@ 0x7f
 800086e:	dc07      	bgt.n	8000880 <SH1106_Putc+0x30>
		SH1106_HEIGHT <= (SH1106.CurrentY + Font->FontHeight)
 8000870:	4b35      	ldr	r3, [pc, #212]	@ (8000948 <SH1106_Putc+0xf8>)
 8000872:	885b      	ldrh	r3, [r3, #2]
 8000874:	461a      	mov	r2, r3
 8000876:	683b      	ldr	r3, [r7, #0]
 8000878:	785b      	ldrb	r3, [r3, #1]
 800087a:	4413      	add	r3, r2
		SH1106_WIDTH <= (SH1106.CurrentX + Font->FontWidth) ||
 800087c:	2b3f      	cmp	r3, #63	@ 0x3f
 800087e:	dd01      	ble.n	8000884 <SH1106_Putc+0x34>
	) {
		/* Error */
		return 0;
 8000880:	2300      	movs	r3, #0
 8000882:	e05d      	b.n	8000940 <SH1106_Putc+0xf0>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8000884:	2300      	movs	r3, #0
 8000886:	617b      	str	r3, [r7, #20]
 8000888:	e04b      	b.n	8000922 <SH1106_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 800088a:	683b      	ldr	r3, [r7, #0]
 800088c:	685a      	ldr	r2, [r3, #4]
 800088e:	79fb      	ldrb	r3, [r7, #7]
 8000890:	3b20      	subs	r3, #32
 8000892:	6839      	ldr	r1, [r7, #0]
 8000894:	7849      	ldrb	r1, [r1, #1]
 8000896:	fb01 f303 	mul.w	r3, r1, r3
 800089a:	4619      	mov	r1, r3
 800089c:	697b      	ldr	r3, [r7, #20]
 800089e:	440b      	add	r3, r1
 80008a0:	005b      	lsls	r3, r3, #1
 80008a2:	4413      	add	r3, r2
 80008a4:	881b      	ldrh	r3, [r3, #0]
 80008a6:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 80008a8:	2300      	movs	r3, #0
 80008aa:	613b      	str	r3, [r7, #16]
 80008ac:	e030      	b.n	8000910 <SH1106_Putc+0xc0>
			if ((b << j) & 0x8000) {
 80008ae:	68fa      	ldr	r2, [r7, #12]
 80008b0:	693b      	ldr	r3, [r7, #16]
 80008b2:	fa02 f303 	lsl.w	r3, r2, r3
 80008b6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d010      	beq.n	80008e0 <SH1106_Putc+0x90>
				SH1106_DrawPixel(SH1106.CurrentX + j, (SH1106.CurrentY + i), (SH1106_COLOR_t) color);
 80008be:	4b22      	ldr	r3, [pc, #136]	@ (8000948 <SH1106_Putc+0xf8>)
 80008c0:	881a      	ldrh	r2, [r3, #0]
 80008c2:	693b      	ldr	r3, [r7, #16]
 80008c4:	b29b      	uxth	r3, r3
 80008c6:	4413      	add	r3, r2
 80008c8:	b298      	uxth	r0, r3
 80008ca:	4b1f      	ldr	r3, [pc, #124]	@ (8000948 <SH1106_Putc+0xf8>)
 80008cc:	885a      	ldrh	r2, [r3, #2]
 80008ce:	697b      	ldr	r3, [r7, #20]
 80008d0:	b29b      	uxth	r3, r3
 80008d2:	4413      	add	r3, r2
 80008d4:	b29b      	uxth	r3, r3
 80008d6:	79ba      	ldrb	r2, [r7, #6]
 80008d8:	4619      	mov	r1, r3
 80008da:	f7ff ff43 	bl	8000764 <SH1106_DrawPixel>
 80008de:	e014      	b.n	800090a <SH1106_Putc+0xba>
			} else {
				SH1106_DrawPixel(SH1106.CurrentX + j, (SH1106.CurrentY + i), (SH1106_COLOR_t)!color);
 80008e0:	4b19      	ldr	r3, [pc, #100]	@ (8000948 <SH1106_Putc+0xf8>)
 80008e2:	881a      	ldrh	r2, [r3, #0]
 80008e4:	693b      	ldr	r3, [r7, #16]
 80008e6:	b29b      	uxth	r3, r3
 80008e8:	4413      	add	r3, r2
 80008ea:	b298      	uxth	r0, r3
 80008ec:	4b16      	ldr	r3, [pc, #88]	@ (8000948 <SH1106_Putc+0xf8>)
 80008ee:	885a      	ldrh	r2, [r3, #2]
 80008f0:	697b      	ldr	r3, [r7, #20]
 80008f2:	b29b      	uxth	r3, r3
 80008f4:	4413      	add	r3, r2
 80008f6:	b299      	uxth	r1, r3
 80008f8:	79bb      	ldrb	r3, [r7, #6]
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	bf0c      	ite	eq
 80008fe:	2301      	moveq	r3, #1
 8000900:	2300      	movne	r3, #0
 8000902:	b2db      	uxtb	r3, r3
 8000904:	461a      	mov	r2, r3
 8000906:	f7ff ff2d 	bl	8000764 <SH1106_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 800090a:	693b      	ldr	r3, [r7, #16]
 800090c:	3301      	adds	r3, #1
 800090e:	613b      	str	r3, [r7, #16]
 8000910:	683b      	ldr	r3, [r7, #0]
 8000912:	781b      	ldrb	r3, [r3, #0]
 8000914:	461a      	mov	r2, r3
 8000916:	693b      	ldr	r3, [r7, #16]
 8000918:	4293      	cmp	r3, r2
 800091a:	d3c8      	bcc.n	80008ae <SH1106_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 800091c:	697b      	ldr	r3, [r7, #20]
 800091e:	3301      	adds	r3, #1
 8000920:	617b      	str	r3, [r7, #20]
 8000922:	683b      	ldr	r3, [r7, #0]
 8000924:	785b      	ldrb	r3, [r3, #1]
 8000926:	461a      	mov	r2, r3
 8000928:	697b      	ldr	r3, [r7, #20]
 800092a:	4293      	cmp	r3, r2
 800092c:	d3ad      	bcc.n	800088a <SH1106_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SH1106.CurrentX += Font->FontWidth;
 800092e:	4b06      	ldr	r3, [pc, #24]	@ (8000948 <SH1106_Putc+0xf8>)
 8000930:	881b      	ldrh	r3, [r3, #0]
 8000932:	683a      	ldr	r2, [r7, #0]
 8000934:	7812      	ldrb	r2, [r2, #0]
 8000936:	4413      	add	r3, r2
 8000938:	b29a      	uxth	r2, r3
 800093a:	4b03      	ldr	r3, [pc, #12]	@ (8000948 <SH1106_Putc+0xf8>)
 800093c:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 800093e:	79fb      	ldrb	r3, [r7, #7]
}
 8000940:	4618      	mov	r0, r3
 8000942:	3718      	adds	r7, #24
 8000944:	46bd      	mov	sp, r7
 8000946:	bd80      	pop	{r7, pc}
 8000948:	20000488 	.word	0x20000488

0800094c <SH1106_Puts>:

char SH1106_Puts(char* str, FontDef_t* Font, SH1106_COLOR_t color) {
 800094c:	b580      	push	{r7, lr}
 800094e:	b084      	sub	sp, #16
 8000950:	af00      	add	r7, sp, #0
 8000952:	60f8      	str	r0, [r7, #12]
 8000954:	60b9      	str	r1, [r7, #8]
 8000956:	4613      	mov	r3, r2
 8000958:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 800095a:	e012      	b.n	8000982 <SH1106_Puts+0x36>
		/* Write character by character */
		if (SH1106_Putc(*str, Font, color) != *str) {
 800095c:	68fb      	ldr	r3, [r7, #12]
 800095e:	781b      	ldrb	r3, [r3, #0]
 8000960:	79fa      	ldrb	r2, [r7, #7]
 8000962:	68b9      	ldr	r1, [r7, #8]
 8000964:	4618      	mov	r0, r3
 8000966:	f7ff ff73 	bl	8000850 <SH1106_Putc>
 800096a:	4603      	mov	r3, r0
 800096c:	461a      	mov	r2, r3
 800096e:	68fb      	ldr	r3, [r7, #12]
 8000970:	781b      	ldrb	r3, [r3, #0]
 8000972:	429a      	cmp	r2, r3
 8000974:	d002      	beq.n	800097c <SH1106_Puts+0x30>
			/* Return error */
			return *str;
 8000976:	68fb      	ldr	r3, [r7, #12]
 8000978:	781b      	ldrb	r3, [r3, #0]
 800097a:	e008      	b.n	800098e <SH1106_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 800097c:	68fb      	ldr	r3, [r7, #12]
 800097e:	3301      	adds	r3, #1
 8000980:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8000982:	68fb      	ldr	r3, [r7, #12]
 8000984:	781b      	ldrb	r3, [r3, #0]
 8000986:	2b00      	cmp	r3, #0
 8000988:	d1e8      	bne.n	800095c <SH1106_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 800098a:	68fb      	ldr	r3, [r7, #12]
 800098c:	781b      	ldrb	r3, [r3, #0]
}
 800098e:	4618      	mov	r0, r3
 8000990:	3710      	adds	r7, #16
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}

08000996 <SH1106_Clear>:
}
 


void SH1106_Clear (void)
{
 8000996:	b580      	push	{r7, lr}
 8000998:	af00      	add	r7, sp, #0
	SH1106_Fill (0);
 800099a:	2000      	movs	r0, #0
 800099c:	f7ff feca 	bl	8000734 <SH1106_Fill>
    SH1106_UpdateScreen();
 80009a0:	f7ff fe9a 	bl	80006d8 <SH1106_UpdateScreen>
}
 80009a4:	bf00      	nop
 80009a6:	bd80      	pop	{r7, pc}

080009a8 <SH1106_I2C_WriteMulti>:
	SH1106_WRITECOMMAND(0x8D);
	SH1106_WRITECOMMAND(0x10);
	SH1106_WRITECOMMAND(0xAE);
}

void SH1106_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 80009a8:	b590      	push	{r4, r7, lr}
 80009aa:	b0c7      	sub	sp, #284	@ 0x11c
 80009ac:	af02      	add	r7, sp, #8
 80009ae:	4604      	mov	r4, r0
 80009b0:	4608      	mov	r0, r1
 80009b2:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 80009b6:	f5a1 7188 	sub.w	r1, r1, #272	@ 0x110
 80009ba:	600a      	str	r2, [r1, #0]
 80009bc:	4619      	mov	r1, r3
 80009be:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80009c2:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 80009c6:	4622      	mov	r2, r4
 80009c8:	701a      	strb	r2, [r3, #0]
 80009ca:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80009ce:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 80009d2:	4602      	mov	r2, r0
 80009d4:	701a      	strb	r2, [r3, #0]
 80009d6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80009da:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80009de:	460a      	mov	r2, r1
 80009e0:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 80009e2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80009e6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80009ea:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80009ee:	f5a2 7285 	sub.w	r2, r2, #266	@ 0x10a
 80009f2:	7812      	ldrb	r2, [r2, #0]
 80009f4:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 80009f6:	2300      	movs	r3, #0
 80009f8:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 80009fc:	e015      	b.n	8000a2a <SH1106_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 80009fe:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8000a02:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8000a06:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 8000a0a:	6812      	ldr	r2, [r2, #0]
 8000a0c:	441a      	add	r2, r3
 8000a0e:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8000a12:	3301      	adds	r3, #1
 8000a14:	7811      	ldrb	r1, [r2, #0]
 8000a16:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8000a1a:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 8000a1e:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8000a20:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8000a24:	3301      	adds	r3, #1
 8000a26:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8000a2a:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8000a2e:	b29b      	uxth	r3, r3
 8000a30:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8000a34:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8000a38:	8812      	ldrh	r2, [r2, #0]
 8000a3a:	429a      	cmp	r2, r3
 8000a3c:	d8df      	bhi.n	80009fe <SH1106_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(SH1106_I2C, address, dt, count+1, 10);
 8000a3e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000a42:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8000a46:	781b      	ldrb	r3, [r3, #0]
 8000a48:	b299      	uxth	r1, r3
 8000a4a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000a4e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000a52:	881b      	ldrh	r3, [r3, #0]
 8000a54:	3301      	adds	r3, #1
 8000a56:	b29b      	uxth	r3, r3
 8000a58:	f107 020c 	add.w	r2, r7, #12
 8000a5c:	200a      	movs	r0, #10
 8000a5e:	9000      	str	r0, [sp, #0]
 8000a60:	4803      	ldr	r0, [pc, #12]	@ (8000a70 <SH1106_I2C_WriteMulti+0xc8>)
 8000a62:	f001 fcc7 	bl	80023f4 <HAL_I2C_Master_Transmit>
}
 8000a66:	bf00      	nop
 8000a68:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bd90      	pop	{r4, r7, pc}
 8000a70:	20000490 	.word	0x20000490

08000a74 <SH1106_I2C_Write>:


void SH1106_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b086      	sub	sp, #24
 8000a78:	af02      	add	r7, sp, #8
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	71fb      	strb	r3, [r7, #7]
 8000a7e:	460b      	mov	r3, r1
 8000a80:	71bb      	strb	r3, [r7, #6]
 8000a82:	4613      	mov	r3, r2
 8000a84:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8000a86:	79bb      	ldrb	r3, [r7, #6]
 8000a88:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8000a8a:	797b      	ldrb	r3, [r7, #5]
 8000a8c:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(SH1106_I2C, address, dt, 2, 10);
 8000a8e:	79fb      	ldrb	r3, [r7, #7]
 8000a90:	b299      	uxth	r1, r3
 8000a92:	f107 020c 	add.w	r2, r7, #12
 8000a96:	230a      	movs	r3, #10
 8000a98:	9300      	str	r3, [sp, #0]
 8000a9a:	2302      	movs	r3, #2
 8000a9c:	4803      	ldr	r0, [pc, #12]	@ (8000aac <SH1106_I2C_Write+0x38>)
 8000a9e:	f001 fca9 	bl	80023f4 <HAL_I2C_Master_Transmit>
}
 8000aa2:	bf00      	nop
 8000aa4:	3710      	adds	r7, #16
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	20000490 	.word	0x20000490

08000ab0 <SetTime>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void SetTime()
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b086      	sub	sp, #24
 8000ab4:	af04      	add	r7, sp, #16
  struct Time Set_time;
  Set_time.sec = 0;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	703b      	strb	r3, [r7, #0]
  Set_time.min = 13;
 8000aba:	230d      	movs	r3, #13
 8000abc:	707b      	strb	r3, [r7, #1]
  Set_time.hour = 14;
 8000abe:	230e      	movs	r3, #14
 8000ac0:	70bb      	strb	r3, [r7, #2]
  Set_time.day = 17;
 8000ac2:	2311      	movs	r3, #17
 8000ac4:	713b      	strb	r3, [r7, #4]
  Set_time.month = 4;
 8000ac6:	2304      	movs	r3, #4
 8000ac8:	717b      	strb	r3, [r7, #5]
  Set_time.year = 25;
 8000aca:	2319      	movs	r3, #25
 8000acc:	71bb      	strb	r3, [r7, #6]
  Set_time.weekday = 0;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	70fb      	strb	r3, [r7, #3]
  HAL_I2C_Mem_Write(&hi2c3, 0xD0, 0, 1, (uint8_t *)&Set_time, 7, 1000);
 8000ad2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ad6:	9302      	str	r3, [sp, #8]
 8000ad8:	2307      	movs	r3, #7
 8000ada:	9301      	str	r3, [sp, #4]
 8000adc:	463b      	mov	r3, r7
 8000ade:	9300      	str	r3, [sp, #0]
 8000ae0:	2301      	movs	r3, #1
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	21d0      	movs	r1, #208	@ 0xd0
 8000ae6:	4803      	ldr	r0, [pc, #12]	@ (8000af4 <SetTime+0x44>)
 8000ae8:	f001 fd82 	bl	80025f0 <HAL_I2C_Mem_Write>
}
 8000aec:	bf00      	nop
 8000aee:	3708      	adds	r7, #8
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bd80      	pop	{r7, pc}
 8000af4:	20000490 	.word	0x20000490

08000af8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000af8:	b590      	push	{r4, r7, lr}
 8000afa:	b08b      	sub	sp, #44	@ 0x2c
 8000afc:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000afe:	f000 fff3 	bl	8001ae8 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b02:	f000 f9a5 	bl	8000e50 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b06:	f000 fab3 	bl	8001070 <MX_GPIO_Init>
  MX_I2C3_Init();
 8000b0a:	f000 fa11 	bl	8000f30 <MX_I2C3_Init>
  MX_SPI4_Init();
 8000b0e:	f000 fa4f 	bl	8000fb0 <MX_SPI4_Init>
  MX_USART1_UART_Init();
 8000b12:	f000 fa83 	bl	800101c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  sprintf(buff, "Initializing...\r\n");
 8000b16:	49b6      	ldr	r1, [pc, #728]	@ (8000df0 <main+0x2f8>)
 8000b18:	48b6      	ldr	r0, [pc, #728]	@ (8000df4 <main+0x2fc>)
 8000b1a:	f004 f9d1 	bl	8004ec0 <siprintf>
  HAL_UART_Transmit(&huart1, (uint8_t *)buff, strlen(buff), 1000);
 8000b1e:	48b5      	ldr	r0, [pc, #724]	@ (8000df4 <main+0x2fc>)
 8000b20:	f7ff fb66 	bl	80001f0 <strlen>
 8000b24:	4603      	mov	r3, r0
 8000b26:	b29a      	uxth	r2, r3
 8000b28:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b2c:	49b1      	ldr	r1, [pc, #708]	@ (8000df4 <main+0x2fc>)
 8000b2e:	48b2      	ldr	r0, [pc, #712]	@ (8000df8 <main+0x300>)
 8000b30:	f003 fe0a 	bl	8004748 <HAL_UART_Transmit>

  SetTime(); // Set initial time (can be commented out after first run)
 8000b34:	f7ff ffbc 	bl	8000ab0 <SetTime>

  // Initialize OLED display
  sprintf(buff, "Initializing OLED display...\r\n");
 8000b38:	49b0      	ldr	r1, [pc, #704]	@ (8000dfc <main+0x304>)
 8000b3a:	48ae      	ldr	r0, [pc, #696]	@ (8000df4 <main+0x2fc>)
 8000b3c:	f004 f9c0 	bl	8004ec0 <siprintf>
  HAL_UART_Transmit(&huart1, (uint8_t *)buff, strlen(buff), 1000);
 8000b40:	48ac      	ldr	r0, [pc, #688]	@ (8000df4 <main+0x2fc>)
 8000b42:	f7ff fb55 	bl	80001f0 <strlen>
 8000b46:	4603      	mov	r3, r0
 8000b48:	b29a      	uxth	r2, r3
 8000b4a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b4e:	49a9      	ldr	r1, [pc, #676]	@ (8000df4 <main+0x2fc>)
 8000b50:	48a9      	ldr	r0, [pc, #676]	@ (8000df8 <main+0x300>)
 8000b52:	f003 fdf9 	bl	8004748 <HAL_UART_Transmit>

  uint8_t oled_status = SH1106_Init();
 8000b56:	f7ff fd1b 	bl	8000590 <SH1106_Init>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	75fb      	strb	r3, [r7, #23]
  if (oled_status)
 8000b5e:	7dfb      	ldrb	r3, [r7, #23]
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d01c      	beq.n	8000b9e <main+0xa6>
  {
    sprintf(buff, "OLED display initialized successfully!\r\n");
 8000b64:	49a6      	ldr	r1, [pc, #664]	@ (8000e00 <main+0x308>)
 8000b66:	48a3      	ldr	r0, [pc, #652]	@ (8000df4 <main+0x2fc>)
 8000b68:	f004 f9aa 	bl	8004ec0 <siprintf>
    HAL_UART_Transmit(&huart1, (uint8_t *)buff, strlen(buff), 1000);
 8000b6c:	48a1      	ldr	r0, [pc, #644]	@ (8000df4 <main+0x2fc>)
 8000b6e:	f7ff fb3f 	bl	80001f0 <strlen>
 8000b72:	4603      	mov	r3, r0
 8000b74:	b29a      	uxth	r2, r3
 8000b76:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b7a:	499e      	ldr	r1, [pc, #632]	@ (8000df4 <main+0x2fc>)
 8000b7c:	489e      	ldr	r0, [pc, #632]	@ (8000df8 <main+0x300>)
 8000b7e:	f003 fde3 	bl	8004748 <HAL_UART_Transmit>
    SH1106_Clear();
 8000b82:	f7ff ff08 	bl	8000996 <SH1106_Clear>
    SH1106_GotoXY(0, 0);
 8000b86:	2100      	movs	r1, #0
 8000b88:	2000      	movs	r0, #0
 8000b8a:	f7ff fe4b 	bl	8000824 <SH1106_GotoXY>
    SH1106_Puts("OLED Test OK", &Font_11x18, SH1106_COLOR_WHITE);
 8000b8e:	2201      	movs	r2, #1
 8000b90:	499c      	ldr	r1, [pc, #624]	@ (8000e04 <main+0x30c>)
 8000b92:	489d      	ldr	r0, [pc, #628]	@ (8000e08 <main+0x310>)
 8000b94:	f7ff feda 	bl	800094c <SH1106_Puts>
    SH1106_UpdateScreen();
 8000b98:	f7ff fd9e 	bl	80006d8 <SH1106_UpdateScreen>
 8000b9c:	e00e      	b.n	8000bbc <main+0xc4>
  }
  else
  {
    sprintf(buff, "OLED display initialization FAILED!\r\n");
 8000b9e:	499b      	ldr	r1, [pc, #620]	@ (8000e0c <main+0x314>)
 8000ba0:	4894      	ldr	r0, [pc, #592]	@ (8000df4 <main+0x2fc>)
 8000ba2:	f004 f98d 	bl	8004ec0 <siprintf>
    HAL_UART_Transmit(&huart1, (uint8_t *)buff, strlen(buff), 1000);
 8000ba6:	4893      	ldr	r0, [pc, #588]	@ (8000df4 <main+0x2fc>)
 8000ba8:	f7ff fb22 	bl	80001f0 <strlen>
 8000bac:	4603      	mov	r3, r0
 8000bae:	b29a      	uxth	r2, r3
 8000bb0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000bb4:	498f      	ldr	r1, [pc, #572]	@ (8000df4 <main+0x2fc>)
 8000bb6:	4890      	ldr	r0, [pc, #576]	@ (8000df8 <main+0x300>)
 8000bb8:	f003 fdc6 	bl	8004748 <HAL_UART_Transmit>
  }

  HAL_Delay(1000);
 8000bbc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000bc0:	f001 f804 	bl	8001bcc <HAL_Delay>

  // Initialize RFID
  TM_MFRC522_Init();
 8000bc4:	f000 fc74 	bl	80014b0 <TM_MFRC522_Init>

  // Read RFID version register to check if module is responding
  uint8_t version = TM_MFRC522_ReadRegister(MFRC522_REG_VERSION);
 8000bc8:	2037      	movs	r0, #55	@ 0x37
 8000bca:	f000 fd2f 	bl	800162c <TM_MFRC522_ReadRegister>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	75bb      	strb	r3, [r7, #22]
  sprintf(buff, "RFID Version: 0x%02X\r\n", version);
 8000bd2:	7dbb      	ldrb	r3, [r7, #22]
 8000bd4:	461a      	mov	r2, r3
 8000bd6:	498e      	ldr	r1, [pc, #568]	@ (8000e10 <main+0x318>)
 8000bd8:	4886      	ldr	r0, [pc, #536]	@ (8000df4 <main+0x2fc>)
 8000bda:	f004 f971 	bl	8004ec0 <siprintf>
  HAL_UART_Transmit(&huart1, (uint8_t *)buff, strlen(buff), 1000);
 8000bde:	4885      	ldr	r0, [pc, #532]	@ (8000df4 <main+0x2fc>)
 8000be0:	f7ff fb06 	bl	80001f0 <strlen>
 8000be4:	4603      	mov	r3, r0
 8000be6:	b29a      	uxth	r2, r3
 8000be8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000bec:	4981      	ldr	r1, [pc, #516]	@ (8000df4 <main+0x2fc>)
 8000bee:	4882      	ldr	r0, [pc, #520]	@ (8000df8 <main+0x300>)
 8000bf0:	f003 fdaa 	bl	8004748 <HAL_UART_Transmit>

  if (version == 0x00 || version == 0xFF)
 8000bf4:	7dbb      	ldrb	r3, [r7, #22]
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d002      	beq.n	8000c00 <main+0x108>
 8000bfa:	7dbb      	ldrb	r3, [r7, #22]
 8000bfc:	2bff      	cmp	r3, #255	@ 0xff
 8000bfe:	d11f      	bne.n	8000c40 <main+0x148>
  {
    sprintf(buff, "RFID module not detected!\r\n");
 8000c00:	4984      	ldr	r1, [pc, #528]	@ (8000e14 <main+0x31c>)
 8000c02:	487c      	ldr	r0, [pc, #496]	@ (8000df4 <main+0x2fc>)
 8000c04:	f004 f95c 	bl	8004ec0 <siprintf>
    HAL_UART_Transmit(&huart1, (uint8_t *)buff, strlen(buff), 1000);
 8000c08:	487a      	ldr	r0, [pc, #488]	@ (8000df4 <main+0x2fc>)
 8000c0a:	f7ff faf1 	bl	80001f0 <strlen>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	b29a      	uxth	r2, r3
 8000c12:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c16:	4977      	ldr	r1, [pc, #476]	@ (8000df4 <main+0x2fc>)
 8000c18:	4877      	ldr	r0, [pc, #476]	@ (8000df8 <main+0x300>)
 8000c1a:	f003 fd95 	bl	8004748 <HAL_UART_Transmit>

    if (oled_status)
 8000c1e:	7dfb      	ldrb	r3, [r7, #23]
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d02c      	beq.n	8000c7e <main+0x186>
    {
      SH1106_Clear();
 8000c24:	f7ff feb7 	bl	8000996 <SH1106_Clear>
      SH1106_GotoXY(0, 0);
 8000c28:	2100      	movs	r1, #0
 8000c2a:	2000      	movs	r0, #0
 8000c2c:	f7ff fdfa 	bl	8000824 <SH1106_GotoXY>
      SH1106_Puts("RFID ERROR!", &Font_11x18, SH1106_COLOR_WHITE);
 8000c30:	2201      	movs	r2, #1
 8000c32:	4974      	ldr	r1, [pc, #464]	@ (8000e04 <main+0x30c>)
 8000c34:	4878      	ldr	r0, [pc, #480]	@ (8000e18 <main+0x320>)
 8000c36:	f7ff fe89 	bl	800094c <SH1106_Puts>
      SH1106_UpdateScreen();
 8000c3a:	f7ff fd4d 	bl	80006d8 <SH1106_UpdateScreen>
    if (oled_status)
 8000c3e:	e01e      	b.n	8000c7e <main+0x186>
    }
  }
  else
  {
    sprintf(buff, "RFID module OK, scanning...\r\n");
 8000c40:	4976      	ldr	r1, [pc, #472]	@ (8000e1c <main+0x324>)
 8000c42:	486c      	ldr	r0, [pc, #432]	@ (8000df4 <main+0x2fc>)
 8000c44:	f004 f93c 	bl	8004ec0 <siprintf>
    HAL_UART_Transmit(&huart1, (uint8_t *)buff, strlen(buff), 1000);
 8000c48:	486a      	ldr	r0, [pc, #424]	@ (8000df4 <main+0x2fc>)
 8000c4a:	f7ff fad1 	bl	80001f0 <strlen>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	b29a      	uxth	r2, r3
 8000c52:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c56:	4967      	ldr	r1, [pc, #412]	@ (8000df4 <main+0x2fc>)
 8000c58:	4867      	ldr	r0, [pc, #412]	@ (8000df8 <main+0x300>)
 8000c5a:	f003 fd75 	bl	8004748 <HAL_UART_Transmit>

    if (oled_status)
 8000c5e:	7dfb      	ldrb	r3, [r7, #23]
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d00c      	beq.n	8000c7e <main+0x186>
    {
      SH1106_Clear();
 8000c64:	f7ff fe97 	bl	8000996 <SH1106_Clear>
      SH1106_GotoXY(0, 0);
 8000c68:	2100      	movs	r1, #0
 8000c6a:	2000      	movs	r0, #0
 8000c6c:	f7ff fdda 	bl	8000824 <SH1106_GotoXY>
      SH1106_Puts("RFID Ready", &Font_11x18, SH1106_COLOR_WHITE);
 8000c70:	2201      	movs	r2, #1
 8000c72:	4964      	ldr	r1, [pc, #400]	@ (8000e04 <main+0x30c>)
 8000c74:	486a      	ldr	r0, [pc, #424]	@ (8000e20 <main+0x328>)
 8000c76:	f7ff fe69 	bl	800094c <SH1106_Puts>
      SH1106_UpdateScreen();
 8000c7a:	f7ff fd2d 	bl	80006d8 <SH1106_UpdateScreen>
    /* USER CODE BEGIN 3 */
    uint8_t CardId[5];

    // Test RFID communication every few seconds
    static uint32_t lastRfidTest = 0;
    if (HAL_GetTick() - lastRfidTest > 3000)
 8000c7e:	f000 ff99 	bl	8001bb4 <HAL_GetTick>
 8000c82:	4602      	mov	r2, r0
 8000c84:	4b67      	ldr	r3, [pc, #412]	@ (8000e24 <main+0x32c>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	1ad3      	subs	r3, r2, r3
 8000c8a:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8000c8e:	4293      	cmp	r3, r2
 8000c90:	d91a      	bls.n	8000cc8 <main+0x1d0>
    {
      lastRfidTest = HAL_GetTick();
 8000c92:	f000 ff8f 	bl	8001bb4 <HAL_GetTick>
 8000c96:	4603      	mov	r3, r0
 8000c98:	4a62      	ldr	r2, [pc, #392]	@ (8000e24 <main+0x32c>)
 8000c9a:	6013      	str	r3, [r2, #0]

      // Test reading a register
      uint8_t status = TM_MFRC522_ReadRegister(MFRC522_REG_STATUS1);
 8000c9c:	2007      	movs	r0, #7
 8000c9e:	f000 fcc5 	bl	800162c <TM_MFRC522_ReadRegister>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	757b      	strb	r3, [r7, #21]
      sprintf(buff, "RFID Status: 0x%02X\r\n", status);
 8000ca6:	7d7b      	ldrb	r3, [r7, #21]
 8000ca8:	461a      	mov	r2, r3
 8000caa:	495f      	ldr	r1, [pc, #380]	@ (8000e28 <main+0x330>)
 8000cac:	4851      	ldr	r0, [pc, #324]	@ (8000df4 <main+0x2fc>)
 8000cae:	f004 f907 	bl	8004ec0 <siprintf>
      HAL_UART_Transmit(&huart1, (uint8_t *)buff, strlen(buff), 1000);
 8000cb2:	4850      	ldr	r0, [pc, #320]	@ (8000df4 <main+0x2fc>)
 8000cb4:	f7ff fa9c 	bl	80001f0 <strlen>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	b29a      	uxth	r2, r3
 8000cbc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000cc0:	494c      	ldr	r1, [pc, #304]	@ (8000df4 <main+0x2fc>)
 8000cc2:	484d      	ldr	r0, [pc, #308]	@ (8000df8 <main+0x300>)
 8000cc4:	f003 fd40 	bl	8004748 <HAL_UART_Transmit>
    }

    HAL_Delay(100);
 8000cc8:	2064      	movs	r0, #100	@ 0x64
 8000cca:	f000 ff7f 	bl	8001bcc <HAL_Delay>

    if (TM_MFRC522_Check(CardId) == MI_OK)
 8000cce:	1d3b      	adds	r3, r7, #4
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	f000 fc21 	bl	8001518 <TM_MFRC522_Check>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d16a      	bne.n	8000db2 <main+0x2ba>
    {
      sprintf(buff, "Card ID: %02X %02X %02X %02X %02X\r\n", CardId[0], CardId[1], CardId[2], CardId[3], CardId[4]);
 8000cdc:	793b      	ldrb	r3, [r7, #4]
 8000cde:	4618      	mov	r0, r3
 8000ce0:	797b      	ldrb	r3, [r7, #5]
 8000ce2:	461c      	mov	r4, r3
 8000ce4:	79bb      	ldrb	r3, [r7, #6]
 8000ce6:	79fa      	ldrb	r2, [r7, #7]
 8000ce8:	7a39      	ldrb	r1, [r7, #8]
 8000cea:	9102      	str	r1, [sp, #8]
 8000cec:	9201      	str	r2, [sp, #4]
 8000cee:	9300      	str	r3, [sp, #0]
 8000cf0:	4623      	mov	r3, r4
 8000cf2:	4602      	mov	r2, r0
 8000cf4:	494d      	ldr	r1, [pc, #308]	@ (8000e2c <main+0x334>)
 8000cf6:	483f      	ldr	r0, [pc, #252]	@ (8000df4 <main+0x2fc>)
 8000cf8:	f004 f8e2 	bl	8004ec0 <siprintf>
      HAL_UART_Transmit(&huart1, (uint8_t *)buff, strlen(buff), 1000);
 8000cfc:	483d      	ldr	r0, [pc, #244]	@ (8000df4 <main+0x2fc>)
 8000cfe:	f7ff fa77 	bl	80001f0 <strlen>
 8000d02:	4603      	mov	r3, r0
 8000d04:	b29a      	uxth	r2, r3
 8000d06:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d0a:	493a      	ldr	r1, [pc, #232]	@ (8000df4 <main+0x2fc>)
 8000d0c:	483a      	ldr	r0, [pc, #232]	@ (8000df8 <main+0x300>)
 8000d0e:	f003 fd1b 	bl	8004748 <HAL_UART_Transmit>

      // Display card ID on OLED
      SH1106_Clear();
 8000d12:	f7ff fe40 	bl	8000996 <SH1106_Clear>
//        SH1106_Puts(buff, &Font_11x18, SH1106_COLOR_WHITE);
//        SH1106_UpdateScreen();
//      }

       // Display each byte of the card ID on a separate line
       sprintf(buff, "ID[0]: %02X", CardId[0]);
 8000d16:	793b      	ldrb	r3, [r7, #4]
 8000d18:	461a      	mov	r2, r3
 8000d1a:	4945      	ldr	r1, [pc, #276]	@ (8000e30 <main+0x338>)
 8000d1c:	4835      	ldr	r0, [pc, #212]	@ (8000df4 <main+0x2fc>)
 8000d1e:	f004 f8cf 	bl	8004ec0 <siprintf>
       SH1106_GotoXY(10, 12);
 8000d22:	210c      	movs	r1, #12
 8000d24:	200a      	movs	r0, #10
 8000d26:	f7ff fd7d 	bl	8000824 <SH1106_GotoXY>
       SH1106_Puts(buff, &Font_7x10, SH1106_COLOR_WHITE);
 8000d2a:	2201      	movs	r2, #1
 8000d2c:	4941      	ldr	r1, [pc, #260]	@ (8000e34 <main+0x33c>)
 8000d2e:	4831      	ldr	r0, [pc, #196]	@ (8000df4 <main+0x2fc>)
 8000d30:	f7ff fe0c 	bl	800094c <SH1106_Puts>

       sprintf(buff, "ID[1]: %02X", CardId[1]);
 8000d34:	797b      	ldrb	r3, [r7, #5]
 8000d36:	461a      	mov	r2, r3
 8000d38:	493f      	ldr	r1, [pc, #252]	@ (8000e38 <main+0x340>)
 8000d3a:	482e      	ldr	r0, [pc, #184]	@ (8000df4 <main+0x2fc>)
 8000d3c:	f004 f8c0 	bl	8004ec0 <siprintf>
       SH1106_GotoXY(10, 22);
 8000d40:	2116      	movs	r1, #22
 8000d42:	200a      	movs	r0, #10
 8000d44:	f7ff fd6e 	bl	8000824 <SH1106_GotoXY>
       SH1106_Puts(buff, &Font_7x10, SH1106_COLOR_WHITE);
 8000d48:	2201      	movs	r2, #1
 8000d4a:	493a      	ldr	r1, [pc, #232]	@ (8000e34 <main+0x33c>)
 8000d4c:	4829      	ldr	r0, [pc, #164]	@ (8000df4 <main+0x2fc>)
 8000d4e:	f7ff fdfd 	bl	800094c <SH1106_Puts>

       sprintf(buff, "ID[2]: %02X", CardId[2]);
 8000d52:	79bb      	ldrb	r3, [r7, #6]
 8000d54:	461a      	mov	r2, r3
 8000d56:	4939      	ldr	r1, [pc, #228]	@ (8000e3c <main+0x344>)
 8000d58:	4826      	ldr	r0, [pc, #152]	@ (8000df4 <main+0x2fc>)
 8000d5a:	f004 f8b1 	bl	8004ec0 <siprintf>
       SH1106_GotoXY(10, 32);
 8000d5e:	2120      	movs	r1, #32
 8000d60:	200a      	movs	r0, #10
 8000d62:	f7ff fd5f 	bl	8000824 <SH1106_GotoXY>
       SH1106_Puts(buff, &Font_7x10, SH1106_COLOR_WHITE);
 8000d66:	2201      	movs	r2, #1
 8000d68:	4932      	ldr	r1, [pc, #200]	@ (8000e34 <main+0x33c>)
 8000d6a:	4822      	ldr	r0, [pc, #136]	@ (8000df4 <main+0x2fc>)
 8000d6c:	f7ff fdee 	bl	800094c <SH1106_Puts>

       sprintf(buff, "ID[3]: %02X", CardId[3]);
 8000d70:	79fb      	ldrb	r3, [r7, #7]
 8000d72:	461a      	mov	r2, r3
 8000d74:	4932      	ldr	r1, [pc, #200]	@ (8000e40 <main+0x348>)
 8000d76:	481f      	ldr	r0, [pc, #124]	@ (8000df4 <main+0x2fc>)
 8000d78:	f004 f8a2 	bl	8004ec0 <siprintf>
       SH1106_GotoXY(10, 42);
 8000d7c:	212a      	movs	r1, #42	@ 0x2a
 8000d7e:	200a      	movs	r0, #10
 8000d80:	f7ff fd50 	bl	8000824 <SH1106_GotoXY>
       SH1106_Puts(buff, &Font_7x10, SH1106_COLOR_WHITE);
 8000d84:	2201      	movs	r2, #1
 8000d86:	492b      	ldr	r1, [pc, #172]	@ (8000e34 <main+0x33c>)
 8000d88:	481a      	ldr	r0, [pc, #104]	@ (8000df4 <main+0x2fc>)
 8000d8a:	f7ff fddf 	bl	800094c <SH1106_Puts>

       sprintf(buff, "ID[4]: %02X", CardId[4]);
 8000d8e:	7a3b      	ldrb	r3, [r7, #8]
 8000d90:	461a      	mov	r2, r3
 8000d92:	492c      	ldr	r1, [pc, #176]	@ (8000e44 <main+0x34c>)
 8000d94:	4817      	ldr	r0, [pc, #92]	@ (8000df4 <main+0x2fc>)
 8000d96:	f004 f893 	bl	8004ec0 <siprintf>
       SH1106_GotoXY(10, 52);
 8000d9a:	2134      	movs	r1, #52	@ 0x34
 8000d9c:	200a      	movs	r0, #10
 8000d9e:	f7ff fd41 	bl	8000824 <SH1106_GotoXY>
       SH1106_Puts(buff, &Font_7x10, SH1106_COLOR_WHITE);
 8000da2:	2201      	movs	r2, #1
 8000da4:	4923      	ldr	r1, [pc, #140]	@ (8000e34 <main+0x33c>)
 8000da6:	4813      	ldr	r0, [pc, #76]	@ (8000df4 <main+0x2fc>)
 8000da8:	f7ff fdd0 	bl	800094c <SH1106_Puts>

       SH1106_UpdateScreen();
 8000dac:	f7ff fc94 	bl	80006d8 <SH1106_UpdateScreen>
 8000db0:	e765      	b.n	8000c7e <main+0x186>
    }
    else
    {
      sprintf(buff, "%s", "No card detect");
 8000db2:	4a25      	ldr	r2, [pc, #148]	@ (8000e48 <main+0x350>)
 8000db4:	4925      	ldr	r1, [pc, #148]	@ (8000e4c <main+0x354>)
 8000db6:	480f      	ldr	r0, [pc, #60]	@ (8000df4 <main+0x2fc>)
 8000db8:	f004 f882 	bl	8004ec0 <siprintf>
      SH1106_Clear();
 8000dbc:	f7ff fdeb 	bl	8000996 <SH1106_Clear>
      HAL_UART_Transmit(&huart1, (uint8_t *)buff, strlen(buff), 1000);
 8000dc0:	480c      	ldr	r0, [pc, #48]	@ (8000df4 <main+0x2fc>)
 8000dc2:	f7ff fa15 	bl	80001f0 <strlen>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	b29a      	uxth	r2, r3
 8000dca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000dce:	4909      	ldr	r1, [pc, #36]	@ (8000df4 <main+0x2fc>)
 8000dd0:	4809      	ldr	r0, [pc, #36]	@ (8000df8 <main+0x300>)
 8000dd2:	f003 fcb9 	bl	8004748 <HAL_UART_Transmit>
      SH1106_GotoXY(12, 10);
 8000dd6:	210a      	movs	r1, #10
 8000dd8:	200c      	movs	r0, #12
 8000dda:	f7ff fd23 	bl	8000824 <SH1106_GotoXY>
      SH1106_Puts(buff, &Font_11x18, 1);
 8000dde:	2201      	movs	r2, #1
 8000de0:	4908      	ldr	r1, [pc, #32]	@ (8000e04 <main+0x30c>)
 8000de2:	4804      	ldr	r0, [pc, #16]	@ (8000df4 <main+0x2fc>)
 8000de4:	f7ff fdb2 	bl	800094c <SH1106_Puts>
      SH1106_UpdateScreen();
 8000de8:	f7ff fc76 	bl	80006d8 <SH1106_UpdateScreen>
  {
 8000dec:	e747      	b.n	8000c7e <main+0x186>
 8000dee:	bf00      	nop
 8000df0:	080058d0 	.word	0x080058d0
 8000df4:	20000584 	.word	0x20000584
 8000df8:	2000053c 	.word	0x2000053c
 8000dfc:	080058e4 	.word	0x080058e4
 8000e00:	08005904 	.word	0x08005904
 8000e04:	20000008 	.word	0x20000008
 8000e08:	08005930 	.word	0x08005930
 8000e0c:	08005940 	.word	0x08005940
 8000e10:	08005968 	.word	0x08005968
 8000e14:	08005980 	.word	0x08005980
 8000e18:	0800599c 	.word	0x0800599c
 8000e1c:	080059a8 	.word	0x080059a8
 8000e20:	080059c8 	.word	0x080059c8
 8000e24:	200005e8 	.word	0x200005e8
 8000e28:	080059d4 	.word	0x080059d4
 8000e2c:	080059ec 	.word	0x080059ec
 8000e30:	08005a10 	.word	0x08005a10
 8000e34:	20000000 	.word	0x20000000
 8000e38:	08005a1c 	.word	0x08005a1c
 8000e3c:	08005a28 	.word	0x08005a28
 8000e40:	08005a34 	.word	0x08005a34
 8000e44:	08005a40 	.word	0x08005a40
 8000e48:	08005a4c 	.word	0x08005a4c
 8000e4c:	08005a5c 	.word	0x08005a5c

08000e50 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b094      	sub	sp, #80	@ 0x50
 8000e54:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e56:	f107 0320 	add.w	r3, r7, #32
 8000e5a:	2230      	movs	r2, #48	@ 0x30
 8000e5c:	2100      	movs	r1, #0
 8000e5e:	4618      	mov	r0, r3
 8000e60:	f004 f84e 	bl	8004f00 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e64:	f107 030c 	add.w	r3, r7, #12
 8000e68:	2200      	movs	r2, #0
 8000e6a:	601a      	str	r2, [r3, #0]
 8000e6c:	605a      	str	r2, [r3, #4]
 8000e6e:	609a      	str	r2, [r3, #8]
 8000e70:	60da      	str	r2, [r3, #12]
 8000e72:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e74:	2300      	movs	r3, #0
 8000e76:	60bb      	str	r3, [r7, #8]
 8000e78:	4b2b      	ldr	r3, [pc, #172]	@ (8000f28 <SystemClock_Config+0xd8>)
 8000e7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e7c:	4a2a      	ldr	r2, [pc, #168]	@ (8000f28 <SystemClock_Config+0xd8>)
 8000e7e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e82:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e84:	4b28      	ldr	r3, [pc, #160]	@ (8000f28 <SystemClock_Config+0xd8>)
 8000e86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e88:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e8c:	60bb      	str	r3, [r7, #8]
 8000e8e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e90:	2300      	movs	r3, #0
 8000e92:	607b      	str	r3, [r7, #4]
 8000e94:	4b25      	ldr	r3, [pc, #148]	@ (8000f2c <SystemClock_Config+0xdc>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	4a24      	ldr	r2, [pc, #144]	@ (8000f2c <SystemClock_Config+0xdc>)
 8000e9a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000e9e:	6013      	str	r3, [r2, #0]
 8000ea0:	4b22      	ldr	r3, [pc, #136]	@ (8000f2c <SystemClock_Config+0xdc>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000ea8:	607b      	str	r3, [r7, #4]
 8000eaa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000eac:	2301      	movs	r3, #1
 8000eae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000eb0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000eb4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000eb6:	2302      	movs	r3, #2
 8000eb8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000eba:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000ebe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000ec0:	2304      	movs	r3, #4
 8000ec2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000ec4:	23b4      	movs	r3, #180	@ 0xb4
 8000ec6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ec8:	2302      	movs	r3, #2
 8000eca:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000ecc:	2304      	movs	r3, #4
 8000ece:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ed0:	f107 0320 	add.w	r3, r7, #32
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	f002 f96f 	bl	80031b8 <HAL_RCC_OscConfig>
 8000eda:	4603      	mov	r3, r0
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d001      	beq.n	8000ee4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000ee0:	f000 f946 	bl	8001170 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000ee4:	f002 f918 	bl	8003118 <HAL_PWREx_EnableOverDrive>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d001      	beq.n	8000ef2 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000eee:	f000 f93f 	bl	8001170 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ef2:	230f      	movs	r3, #15
 8000ef4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ef6:	2302      	movs	r3, #2
 8000ef8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000efa:	2300      	movs	r3, #0
 8000efc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000efe:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000f02:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8000f04:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000f08:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000f0a:	f107 030c 	add.w	r3, r7, #12
 8000f0e:	2105      	movs	r1, #5
 8000f10:	4618      	mov	r0, r3
 8000f12:	f002 fbc9 	bl	80036a8 <HAL_RCC_ClockConfig>
 8000f16:	4603      	mov	r3, r0
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d001      	beq.n	8000f20 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000f1c:	f000 f928 	bl	8001170 <Error_Handler>
  }
}
 8000f20:	bf00      	nop
 8000f22:	3750      	adds	r7, #80	@ 0x50
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd80      	pop	{r7, pc}
 8000f28:	40023800 	.word	0x40023800
 8000f2c:	40007000 	.word	0x40007000

08000f30 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000f34:	4b1b      	ldr	r3, [pc, #108]	@ (8000fa4 <MX_I2C3_Init+0x74>)
 8000f36:	4a1c      	ldr	r2, [pc, #112]	@ (8000fa8 <MX_I2C3_Init+0x78>)
 8000f38:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 400000;
 8000f3a:	4b1a      	ldr	r3, [pc, #104]	@ (8000fa4 <MX_I2C3_Init+0x74>)
 8000f3c:	4a1b      	ldr	r2, [pc, #108]	@ (8000fac <MX_I2C3_Init+0x7c>)
 8000f3e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000f40:	4b18      	ldr	r3, [pc, #96]	@ (8000fa4 <MX_I2C3_Init+0x74>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8000f46:	4b17      	ldr	r3, [pc, #92]	@ (8000fa4 <MX_I2C3_Init+0x74>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f4c:	4b15      	ldr	r3, [pc, #84]	@ (8000fa4 <MX_I2C3_Init+0x74>)
 8000f4e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000f52:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f54:	4b13      	ldr	r3, [pc, #76]	@ (8000fa4 <MX_I2C3_Init+0x74>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8000f5a:	4b12      	ldr	r3, [pc, #72]	@ (8000fa4 <MX_I2C3_Init+0x74>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f60:	4b10      	ldr	r3, [pc, #64]	@ (8000fa4 <MX_I2C3_Init+0x74>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f66:	4b0f      	ldr	r3, [pc, #60]	@ (8000fa4 <MX_I2C3_Init+0x74>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000f6c:	480d      	ldr	r0, [pc, #52]	@ (8000fa4 <MX_I2C3_Init+0x74>)
 8000f6e:	f001 f8fd 	bl	800216c <HAL_I2C_Init>
 8000f72:	4603      	mov	r3, r0
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d001      	beq.n	8000f7c <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8000f78:	f000 f8fa 	bl	8001170 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000f7c:	2100      	movs	r1, #0
 8000f7e:	4809      	ldr	r0, [pc, #36]	@ (8000fa4 <MX_I2C3_Init+0x74>)
 8000f80:	f002 f84f 	bl	8003022 <HAL_I2CEx_ConfigAnalogFilter>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d001      	beq.n	8000f8e <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8000f8a:	f000 f8f1 	bl	8001170 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000f8e:	2100      	movs	r1, #0
 8000f90:	4804      	ldr	r0, [pc, #16]	@ (8000fa4 <MX_I2C3_Init+0x74>)
 8000f92:	f002 f882 	bl	800309a <HAL_I2CEx_ConfigDigitalFilter>
 8000f96:	4603      	mov	r3, r0
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d001      	beq.n	8000fa0 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8000f9c:	f000 f8e8 	bl	8001170 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000fa0:	bf00      	nop
 8000fa2:	bd80      	pop	{r7, pc}
 8000fa4:	20000490 	.word	0x20000490
 8000fa8:	40005c00 	.word	0x40005c00
 8000fac:	00061a80 	.word	0x00061a80

08000fb0 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8000fb4:	4b17      	ldr	r3, [pc, #92]	@ (8001014 <MX_SPI4_Init+0x64>)
 8000fb6:	4a18      	ldr	r2, [pc, #96]	@ (8001018 <MX_SPI4_Init+0x68>)
 8000fb8:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8000fba:	4b16      	ldr	r3, [pc, #88]	@ (8001014 <MX_SPI4_Init+0x64>)
 8000fbc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000fc0:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8000fc2:	4b14      	ldr	r3, [pc, #80]	@ (8001014 <MX_SPI4_Init+0x64>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8000fc8:	4b12      	ldr	r3, [pc, #72]	@ (8001014 <MX_SPI4_Init+0x64>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000fce:	4b11      	ldr	r3, [pc, #68]	@ (8001014 <MX_SPI4_Init+0x64>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000fd4:	4b0f      	ldr	r3, [pc, #60]	@ (8001014 <MX_SPI4_Init+0x64>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8000fda:	4b0e      	ldr	r3, [pc, #56]	@ (8001014 <MX_SPI4_Init+0x64>)
 8000fdc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000fe0:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000fe2:	4b0c      	ldr	r3, [pc, #48]	@ (8001014 <MX_SPI4_Init+0x64>)
 8000fe4:	2218      	movs	r2, #24
 8000fe6:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000fe8:	4b0a      	ldr	r3, [pc, #40]	@ (8001014 <MX_SPI4_Init+0x64>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8000fee:	4b09      	ldr	r3, [pc, #36]	@ (8001014 <MX_SPI4_Init+0x64>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ff4:	4b07      	ldr	r3, [pc, #28]	@ (8001014 <MX_SPI4_Init+0x64>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi4.Init.CRCPolynomial = 10;
 8000ffa:	4b06      	ldr	r3, [pc, #24]	@ (8001014 <MX_SPI4_Init+0x64>)
 8000ffc:	220a      	movs	r2, #10
 8000ffe:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8001000:	4804      	ldr	r0, [pc, #16]	@ (8001014 <MX_SPI4_Init+0x64>)
 8001002:	f002 fd71 	bl	8003ae8 <HAL_SPI_Init>
 8001006:	4603      	mov	r3, r0
 8001008:	2b00      	cmp	r3, #0
 800100a:	d001      	beq.n	8001010 <MX_SPI4_Init+0x60>
  {
    Error_Handler();
 800100c:	f000 f8b0 	bl	8001170 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8001010:	bf00      	nop
 8001012:	bd80      	pop	{r7, pc}
 8001014:	200004e4 	.word	0x200004e4
 8001018:	40013400 	.word	0x40013400

0800101c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001020:	4b11      	ldr	r3, [pc, #68]	@ (8001068 <MX_USART1_UART_Init+0x4c>)
 8001022:	4a12      	ldr	r2, [pc, #72]	@ (800106c <MX_USART1_UART_Init+0x50>)
 8001024:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001026:	4b10      	ldr	r3, [pc, #64]	@ (8001068 <MX_USART1_UART_Init+0x4c>)
 8001028:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800102c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800102e:	4b0e      	ldr	r3, [pc, #56]	@ (8001068 <MX_USART1_UART_Init+0x4c>)
 8001030:	2200      	movs	r2, #0
 8001032:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001034:	4b0c      	ldr	r3, [pc, #48]	@ (8001068 <MX_USART1_UART_Init+0x4c>)
 8001036:	2200      	movs	r2, #0
 8001038:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800103a:	4b0b      	ldr	r3, [pc, #44]	@ (8001068 <MX_USART1_UART_Init+0x4c>)
 800103c:	2200      	movs	r2, #0
 800103e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001040:	4b09      	ldr	r3, [pc, #36]	@ (8001068 <MX_USART1_UART_Init+0x4c>)
 8001042:	220c      	movs	r2, #12
 8001044:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001046:	4b08      	ldr	r3, [pc, #32]	@ (8001068 <MX_USART1_UART_Init+0x4c>)
 8001048:	2200      	movs	r2, #0
 800104a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800104c:	4b06      	ldr	r3, [pc, #24]	@ (8001068 <MX_USART1_UART_Init+0x4c>)
 800104e:	2200      	movs	r2, #0
 8001050:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001052:	4805      	ldr	r0, [pc, #20]	@ (8001068 <MX_USART1_UART_Init+0x4c>)
 8001054:	f003 fb28 	bl	80046a8 <HAL_UART_Init>
 8001058:	4603      	mov	r3, r0
 800105a:	2b00      	cmp	r3, #0
 800105c:	d001      	beq.n	8001062 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800105e:	f000 f887 	bl	8001170 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001062:	bf00      	nop
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	2000053c 	.word	0x2000053c
 800106c:	40011000 	.word	0x40011000

08001070 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b08a      	sub	sp, #40	@ 0x28
 8001074:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001076:	f107 0314 	add.w	r3, r7, #20
 800107a:	2200      	movs	r2, #0
 800107c:	601a      	str	r2, [r3, #0]
 800107e:	605a      	str	r2, [r3, #4]
 8001080:	609a      	str	r2, [r3, #8]
 8001082:	60da      	str	r2, [r3, #12]
 8001084:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001086:	2300      	movs	r3, #0
 8001088:	613b      	str	r3, [r7, #16]
 800108a:	4b36      	ldr	r3, [pc, #216]	@ (8001164 <MX_GPIO_Init+0xf4>)
 800108c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800108e:	4a35      	ldr	r2, [pc, #212]	@ (8001164 <MX_GPIO_Init+0xf4>)
 8001090:	f043 0310 	orr.w	r3, r3, #16
 8001094:	6313      	str	r3, [r2, #48]	@ 0x30
 8001096:	4b33      	ldr	r3, [pc, #204]	@ (8001164 <MX_GPIO_Init+0xf4>)
 8001098:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800109a:	f003 0310 	and.w	r3, r3, #16
 800109e:	613b      	str	r3, [r7, #16]
 80010a0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010a2:	2300      	movs	r3, #0
 80010a4:	60fb      	str	r3, [r7, #12]
 80010a6:	4b2f      	ldr	r3, [pc, #188]	@ (8001164 <MX_GPIO_Init+0xf4>)
 80010a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010aa:	4a2e      	ldr	r2, [pc, #184]	@ (8001164 <MX_GPIO_Init+0xf4>)
 80010ac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80010b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80010b2:	4b2c      	ldr	r3, [pc, #176]	@ (8001164 <MX_GPIO_Init+0xf4>)
 80010b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80010ba:	60fb      	str	r3, [r7, #12]
 80010bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010be:	2300      	movs	r3, #0
 80010c0:	60bb      	str	r3, [r7, #8]
 80010c2:	4b28      	ldr	r3, [pc, #160]	@ (8001164 <MX_GPIO_Init+0xf4>)
 80010c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010c6:	4a27      	ldr	r2, [pc, #156]	@ (8001164 <MX_GPIO_Init+0xf4>)
 80010c8:	f043 0304 	orr.w	r3, r3, #4
 80010cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80010ce:	4b25      	ldr	r3, [pc, #148]	@ (8001164 <MX_GPIO_Init+0xf4>)
 80010d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010d2:	f003 0304 	and.w	r3, r3, #4
 80010d6:	60bb      	str	r3, [r7, #8]
 80010d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010da:	2300      	movs	r3, #0
 80010dc:	607b      	str	r3, [r7, #4]
 80010de:	4b21      	ldr	r3, [pc, #132]	@ (8001164 <MX_GPIO_Init+0xf4>)
 80010e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010e2:	4a20      	ldr	r2, [pc, #128]	@ (8001164 <MX_GPIO_Init+0xf4>)
 80010e4:	f043 0301 	orr.w	r3, r3, #1
 80010e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80010ea:	4b1e      	ldr	r3, [pc, #120]	@ (8001164 <MX_GPIO_Init+0xf4>)
 80010ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ee:	f003 0301 	and.w	r3, r3, #1
 80010f2:	607b      	str	r3, [r7, #4]
 80010f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80010f6:	2300      	movs	r3, #0
 80010f8:	603b      	str	r3, [r7, #0]
 80010fa:	4b1a      	ldr	r3, [pc, #104]	@ (8001164 <MX_GPIO_Init+0xf4>)
 80010fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010fe:	4a19      	ldr	r2, [pc, #100]	@ (8001164 <MX_GPIO_Init+0xf4>)
 8001100:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001104:	6313      	str	r3, [r2, #48]	@ 0x30
 8001106:	4b17      	ldr	r3, [pc, #92]	@ (8001164 <MX_GPIO_Init+0xf4>)
 8001108:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800110a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800110e:	603b      	str	r3, [r7, #0]
 8001110:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 8001112:	2200      	movs	r2, #0
 8001114:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 8001118:	4813      	ldr	r0, [pc, #76]	@ (8001168 <MX_GPIO_Init+0xf8>)
 800111a:	f001 f80d 	bl	8002138 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800111e:	2310      	movs	r3, #16
 8001120:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001122:	2302      	movs	r3, #2
 8001124:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001126:	2300      	movs	r3, #0
 8001128:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800112a:	2300      	movs	r3, #0
 800112c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF15_EVENTOUT;
 800112e:	230f      	movs	r3, #15
 8001130:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001132:	f107 0314 	add.w	r3, r7, #20
 8001136:	4619      	mov	r1, r3
 8001138:	480c      	ldr	r0, [pc, #48]	@ (800116c <MX_GPIO_Init+0xfc>)
 800113a:	f000 fe51 	bl	8001de0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG13 PG14 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 800113e:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8001142:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001144:	2301      	movs	r3, #1
 8001146:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001148:	2300      	movs	r3, #0
 800114a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800114c:	2300      	movs	r3, #0
 800114e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001150:	f107 0314 	add.w	r3, r7, #20
 8001154:	4619      	mov	r1, r3
 8001156:	4804      	ldr	r0, [pc, #16]	@ (8001168 <MX_GPIO_Init+0xf8>)
 8001158:	f000 fe42 	bl	8001de0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800115c:	bf00      	nop
 800115e:	3728      	adds	r7, #40	@ 0x28
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}
 8001164:	40023800 	.word	0x40023800
 8001168:	40021800 	.word	0x40021800
 800116c:	40021000 	.word	0x40021000

08001170 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001170:	b480      	push	{r7}
 8001172:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001174:	b672      	cpsid	i
}
 8001176:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001178:	bf00      	nop
 800117a:	e7fd      	b.n	8001178 <Error_Handler+0x8>

0800117c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800117c:	b480      	push	{r7}
 800117e:	b083      	sub	sp, #12
 8001180:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001182:	2300      	movs	r3, #0
 8001184:	607b      	str	r3, [r7, #4]
 8001186:	4b10      	ldr	r3, [pc, #64]	@ (80011c8 <HAL_MspInit+0x4c>)
 8001188:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800118a:	4a0f      	ldr	r2, [pc, #60]	@ (80011c8 <HAL_MspInit+0x4c>)
 800118c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001190:	6453      	str	r3, [r2, #68]	@ 0x44
 8001192:	4b0d      	ldr	r3, [pc, #52]	@ (80011c8 <HAL_MspInit+0x4c>)
 8001194:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001196:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800119a:	607b      	str	r3, [r7, #4]
 800119c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800119e:	2300      	movs	r3, #0
 80011a0:	603b      	str	r3, [r7, #0]
 80011a2:	4b09      	ldr	r3, [pc, #36]	@ (80011c8 <HAL_MspInit+0x4c>)
 80011a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011a6:	4a08      	ldr	r2, [pc, #32]	@ (80011c8 <HAL_MspInit+0x4c>)
 80011a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80011ac:	6413      	str	r3, [r2, #64]	@ 0x40
 80011ae:	4b06      	ldr	r3, [pc, #24]	@ (80011c8 <HAL_MspInit+0x4c>)
 80011b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011b6:	603b      	str	r3, [r7, #0]
 80011b8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011ba:	bf00      	nop
 80011bc:	370c      	adds	r7, #12
 80011be:	46bd      	mov	sp, r7
 80011c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c4:	4770      	bx	lr
 80011c6:	bf00      	nop
 80011c8:	40023800 	.word	0x40023800

080011cc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b08a      	sub	sp, #40	@ 0x28
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011d4:	f107 0314 	add.w	r3, r7, #20
 80011d8:	2200      	movs	r2, #0
 80011da:	601a      	str	r2, [r3, #0]
 80011dc:	605a      	str	r2, [r3, #4]
 80011de:	609a      	str	r2, [r3, #8]
 80011e0:	60da      	str	r2, [r3, #12]
 80011e2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	4a29      	ldr	r2, [pc, #164]	@ (8001290 <HAL_I2C_MspInit+0xc4>)
 80011ea:	4293      	cmp	r3, r2
 80011ec:	d14b      	bne.n	8001286 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011ee:	2300      	movs	r3, #0
 80011f0:	613b      	str	r3, [r7, #16]
 80011f2:	4b28      	ldr	r3, [pc, #160]	@ (8001294 <HAL_I2C_MspInit+0xc8>)
 80011f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011f6:	4a27      	ldr	r2, [pc, #156]	@ (8001294 <HAL_I2C_MspInit+0xc8>)
 80011f8:	f043 0304 	orr.w	r3, r3, #4
 80011fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80011fe:	4b25      	ldr	r3, [pc, #148]	@ (8001294 <HAL_I2C_MspInit+0xc8>)
 8001200:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001202:	f003 0304 	and.w	r3, r3, #4
 8001206:	613b      	str	r3, [r7, #16]
 8001208:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800120a:	2300      	movs	r3, #0
 800120c:	60fb      	str	r3, [r7, #12]
 800120e:	4b21      	ldr	r3, [pc, #132]	@ (8001294 <HAL_I2C_MspInit+0xc8>)
 8001210:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001212:	4a20      	ldr	r2, [pc, #128]	@ (8001294 <HAL_I2C_MspInit+0xc8>)
 8001214:	f043 0301 	orr.w	r3, r3, #1
 8001218:	6313      	str	r3, [r2, #48]	@ 0x30
 800121a:	4b1e      	ldr	r3, [pc, #120]	@ (8001294 <HAL_I2C_MspInit+0xc8>)
 800121c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800121e:	f003 0301 	and.w	r3, r3, #1
 8001222:	60fb      	str	r3, [r7, #12]
 8001224:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001226:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800122a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800122c:	2312      	movs	r3, #18
 800122e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001230:	2300      	movs	r3, #0
 8001232:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001234:	2303      	movs	r3, #3
 8001236:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001238:	2304      	movs	r3, #4
 800123a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800123c:	f107 0314 	add.w	r3, r7, #20
 8001240:	4619      	mov	r1, r3
 8001242:	4815      	ldr	r0, [pc, #84]	@ (8001298 <HAL_I2C_MspInit+0xcc>)
 8001244:	f000 fdcc 	bl	8001de0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001248:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800124c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800124e:	2312      	movs	r3, #18
 8001250:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001252:	2300      	movs	r3, #0
 8001254:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001256:	2303      	movs	r3, #3
 8001258:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800125a:	2304      	movs	r3, #4
 800125c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800125e:	f107 0314 	add.w	r3, r7, #20
 8001262:	4619      	mov	r1, r3
 8001264:	480d      	ldr	r0, [pc, #52]	@ (800129c <HAL_I2C_MspInit+0xd0>)
 8001266:	f000 fdbb 	bl	8001de0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 800126a:	2300      	movs	r3, #0
 800126c:	60bb      	str	r3, [r7, #8]
 800126e:	4b09      	ldr	r3, [pc, #36]	@ (8001294 <HAL_I2C_MspInit+0xc8>)
 8001270:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001272:	4a08      	ldr	r2, [pc, #32]	@ (8001294 <HAL_I2C_MspInit+0xc8>)
 8001274:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001278:	6413      	str	r3, [r2, #64]	@ 0x40
 800127a:	4b06      	ldr	r3, [pc, #24]	@ (8001294 <HAL_I2C_MspInit+0xc8>)
 800127c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800127e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001282:	60bb      	str	r3, [r7, #8]
 8001284:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C3_MspInit 1 */

  }

}
 8001286:	bf00      	nop
 8001288:	3728      	adds	r7, #40	@ 0x28
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	40005c00 	.word	0x40005c00
 8001294:	40023800 	.word	0x40023800
 8001298:	40020800 	.word	0x40020800
 800129c:	40020000 	.word	0x40020000

080012a0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b08a      	sub	sp, #40	@ 0x28
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012a8:	f107 0314 	add.w	r3, r7, #20
 80012ac:	2200      	movs	r2, #0
 80012ae:	601a      	str	r2, [r3, #0]
 80012b0:	605a      	str	r2, [r3, #4]
 80012b2:	609a      	str	r2, [r3, #8]
 80012b4:	60da      	str	r2, [r3, #12]
 80012b6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI4)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	4a19      	ldr	r2, [pc, #100]	@ (8001324 <HAL_SPI_MspInit+0x84>)
 80012be:	4293      	cmp	r3, r2
 80012c0:	d12b      	bne.n	800131a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI4_MspInit 0 */

  /* USER CODE END SPI4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 80012c2:	2300      	movs	r3, #0
 80012c4:	613b      	str	r3, [r7, #16]
 80012c6:	4b18      	ldr	r3, [pc, #96]	@ (8001328 <HAL_SPI_MspInit+0x88>)
 80012c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012ca:	4a17      	ldr	r2, [pc, #92]	@ (8001328 <HAL_SPI_MspInit+0x88>)
 80012cc:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80012d0:	6453      	str	r3, [r2, #68]	@ 0x44
 80012d2:	4b15      	ldr	r3, [pc, #84]	@ (8001328 <HAL_SPI_MspInit+0x88>)
 80012d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012d6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80012da:	613b      	str	r3, [r7, #16]
 80012dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80012de:	2300      	movs	r3, #0
 80012e0:	60fb      	str	r3, [r7, #12]
 80012e2:	4b11      	ldr	r3, [pc, #68]	@ (8001328 <HAL_SPI_MspInit+0x88>)
 80012e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012e6:	4a10      	ldr	r2, [pc, #64]	@ (8001328 <HAL_SPI_MspInit+0x88>)
 80012e8:	f043 0310 	orr.w	r3, r3, #16
 80012ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80012ee:	4b0e      	ldr	r3, [pc, #56]	@ (8001328 <HAL_SPI_MspInit+0x88>)
 80012f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012f2:	f003 0310 	and.w	r3, r3, #16
 80012f6:	60fb      	str	r3, [r7, #12]
 80012f8:	68fb      	ldr	r3, [r7, #12]
    /**SPI4 GPIO Configuration
    PE2     ------> SPI4_SCK
    PE5     ------> SPI4_MISO
    PE6     ------> SPI4_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 80012fa:	2364      	movs	r3, #100	@ 0x64
 80012fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012fe:	2302      	movs	r3, #2
 8001300:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001302:	2300      	movs	r3, #0
 8001304:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001306:	2303      	movs	r3, #3
 8001308:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 800130a:	2305      	movs	r3, #5
 800130c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800130e:	f107 0314 	add.w	r3, r7, #20
 8001312:	4619      	mov	r1, r3
 8001314:	4805      	ldr	r0, [pc, #20]	@ (800132c <HAL_SPI_MspInit+0x8c>)
 8001316:	f000 fd63 	bl	8001de0 <HAL_GPIO_Init>

  /* USER CODE END SPI4_MspInit 1 */

  }

}
 800131a:	bf00      	nop
 800131c:	3728      	adds	r7, #40	@ 0x28
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	40013400 	.word	0x40013400
 8001328:	40023800 	.word	0x40023800
 800132c:	40021000 	.word	0x40021000

08001330 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b08a      	sub	sp, #40	@ 0x28
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001338:	f107 0314 	add.w	r3, r7, #20
 800133c:	2200      	movs	r2, #0
 800133e:	601a      	str	r2, [r3, #0]
 8001340:	605a      	str	r2, [r3, #4]
 8001342:	609a      	str	r2, [r3, #8]
 8001344:	60da      	str	r2, [r3, #12]
 8001346:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	4a19      	ldr	r2, [pc, #100]	@ (80013b4 <HAL_UART_MspInit+0x84>)
 800134e:	4293      	cmp	r3, r2
 8001350:	d12c      	bne.n	80013ac <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001352:	2300      	movs	r3, #0
 8001354:	613b      	str	r3, [r7, #16]
 8001356:	4b18      	ldr	r3, [pc, #96]	@ (80013b8 <HAL_UART_MspInit+0x88>)
 8001358:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800135a:	4a17      	ldr	r2, [pc, #92]	@ (80013b8 <HAL_UART_MspInit+0x88>)
 800135c:	f043 0310 	orr.w	r3, r3, #16
 8001360:	6453      	str	r3, [r2, #68]	@ 0x44
 8001362:	4b15      	ldr	r3, [pc, #84]	@ (80013b8 <HAL_UART_MspInit+0x88>)
 8001364:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001366:	f003 0310 	and.w	r3, r3, #16
 800136a:	613b      	str	r3, [r7, #16]
 800136c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800136e:	2300      	movs	r3, #0
 8001370:	60fb      	str	r3, [r7, #12]
 8001372:	4b11      	ldr	r3, [pc, #68]	@ (80013b8 <HAL_UART_MspInit+0x88>)
 8001374:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001376:	4a10      	ldr	r2, [pc, #64]	@ (80013b8 <HAL_UART_MspInit+0x88>)
 8001378:	f043 0301 	orr.w	r3, r3, #1
 800137c:	6313      	str	r3, [r2, #48]	@ 0x30
 800137e:	4b0e      	ldr	r3, [pc, #56]	@ (80013b8 <HAL_UART_MspInit+0x88>)
 8001380:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001382:	f003 0301 	and.w	r3, r3, #1
 8001386:	60fb      	str	r3, [r7, #12]
 8001388:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800138a:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800138e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001390:	2302      	movs	r3, #2
 8001392:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001394:	2300      	movs	r3, #0
 8001396:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001398:	2303      	movs	r3, #3
 800139a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800139c:	2307      	movs	r3, #7
 800139e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013a0:	f107 0314 	add.w	r3, r7, #20
 80013a4:	4619      	mov	r1, r3
 80013a6:	4805      	ldr	r0, [pc, #20]	@ (80013bc <HAL_UART_MspInit+0x8c>)
 80013a8:	f000 fd1a 	bl	8001de0 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 80013ac:	bf00      	nop
 80013ae:	3728      	adds	r7, #40	@ 0x28
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bd80      	pop	{r7, pc}
 80013b4:	40011000 	.word	0x40011000
 80013b8:	40023800 	.word	0x40023800
 80013bc:	40020000 	.word	0x40020000

080013c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013c0:	b480      	push	{r7}
 80013c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80013c4:	bf00      	nop
 80013c6:	e7fd      	b.n	80013c4 <NMI_Handler+0x4>

080013c8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013c8:	b480      	push	{r7}
 80013ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013cc:	bf00      	nop
 80013ce:	e7fd      	b.n	80013cc <HardFault_Handler+0x4>

080013d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013d0:	b480      	push	{r7}
 80013d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013d4:	bf00      	nop
 80013d6:	e7fd      	b.n	80013d4 <MemManage_Handler+0x4>

080013d8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013d8:	b480      	push	{r7}
 80013da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013dc:	bf00      	nop
 80013de:	e7fd      	b.n	80013dc <BusFault_Handler+0x4>

080013e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013e0:	b480      	push	{r7}
 80013e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013e4:	bf00      	nop
 80013e6:	e7fd      	b.n	80013e4 <UsageFault_Handler+0x4>

080013e8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013e8:	b480      	push	{r7}
 80013ea:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013ec:	bf00      	nop
 80013ee:	46bd      	mov	sp, r7
 80013f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f4:	4770      	bx	lr

080013f6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013f6:	b480      	push	{r7}
 80013f8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013fa:	bf00      	nop
 80013fc:	46bd      	mov	sp, r7
 80013fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001402:	4770      	bx	lr

08001404 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001404:	b480      	push	{r7}
 8001406:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001408:	bf00      	nop
 800140a:	46bd      	mov	sp, r7
 800140c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001410:	4770      	bx	lr

08001412 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001412:	b580      	push	{r7, lr}
 8001414:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001416:	f000 fbb9 	bl	8001b8c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800141a:	bf00      	nop
 800141c:	bd80      	pop	{r7, pc}
	...

08001420 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b086      	sub	sp, #24
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001428:	4a14      	ldr	r2, [pc, #80]	@ (800147c <_sbrk+0x5c>)
 800142a:	4b15      	ldr	r3, [pc, #84]	@ (8001480 <_sbrk+0x60>)
 800142c:	1ad3      	subs	r3, r2, r3
 800142e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001430:	697b      	ldr	r3, [r7, #20]
 8001432:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001434:	4b13      	ldr	r3, [pc, #76]	@ (8001484 <_sbrk+0x64>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	2b00      	cmp	r3, #0
 800143a:	d102      	bne.n	8001442 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800143c:	4b11      	ldr	r3, [pc, #68]	@ (8001484 <_sbrk+0x64>)
 800143e:	4a12      	ldr	r2, [pc, #72]	@ (8001488 <_sbrk+0x68>)
 8001440:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001442:	4b10      	ldr	r3, [pc, #64]	@ (8001484 <_sbrk+0x64>)
 8001444:	681a      	ldr	r2, [r3, #0]
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	4413      	add	r3, r2
 800144a:	693a      	ldr	r2, [r7, #16]
 800144c:	429a      	cmp	r2, r3
 800144e:	d207      	bcs.n	8001460 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001450:	f003 fd5e 	bl	8004f10 <__errno>
 8001454:	4603      	mov	r3, r0
 8001456:	220c      	movs	r2, #12
 8001458:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800145a:	f04f 33ff 	mov.w	r3, #4294967295
 800145e:	e009      	b.n	8001474 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001460:	4b08      	ldr	r3, [pc, #32]	@ (8001484 <_sbrk+0x64>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001466:	4b07      	ldr	r3, [pc, #28]	@ (8001484 <_sbrk+0x64>)
 8001468:	681a      	ldr	r2, [r3, #0]
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	4413      	add	r3, r2
 800146e:	4a05      	ldr	r2, [pc, #20]	@ (8001484 <_sbrk+0x64>)
 8001470:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001472:	68fb      	ldr	r3, [r7, #12]
}
 8001474:	4618      	mov	r0, r3
 8001476:	3718      	adds	r7, #24
 8001478:	46bd      	mov	sp, r7
 800147a:	bd80      	pop	{r7, pc}
 800147c:	20030000 	.word	0x20030000
 8001480:	00000400 	.word	0x00000400
 8001484:	200005ec 	.word	0x200005ec
 8001488:	20000740 	.word	0x20000740

0800148c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800148c:	b480      	push	{r7}
 800148e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001490:	4b06      	ldr	r3, [pc, #24]	@ (80014ac <SystemInit+0x20>)
 8001492:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001496:	4a05      	ldr	r2, [pc, #20]	@ (80014ac <SystemInit+0x20>)
 8001498:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800149c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014a0:	bf00      	nop
 80014a2:	46bd      	mov	sp, r7
 80014a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a8:	4770      	bx	lr
 80014aa:	bf00      	nop
 80014ac:	e000ed00 	.word	0xe000ed00

080014b0 <TM_MFRC522_Init>:
 */
#include "tm_stm32f4_mfrc522.h"

extern SPI_HandleTypeDef hspi4;

void TM_MFRC522_Init(void) {
 80014b0:	b580      	push	{r7, lr}
 80014b2:	af00      	add	r7, sp, #0
	TM_MFRC522_InitPins();
 80014b4:	f000 f84a 	bl	800154c <TM_MFRC522_InitPins>
	//TM_SPI_Init(MFRC522_SPI, MFRC522_SPI_PINSPACK);

	// Hardware reset
	MFRC522_CS_HIGH;
 80014b8:	2201      	movs	r2, #1
 80014ba:	2110      	movs	r1, #16
 80014bc:	4815      	ldr	r0, [pc, #84]	@ (8001514 <TM_MFRC522_Init+0x64>)
 80014be:	f000 fe3b 	bl	8002138 <HAL_GPIO_WritePin>
	HAL_Delay(50);  // Power-up delay
 80014c2:	2032      	movs	r0, #50	@ 0x32
 80014c4:	f000 fb82 	bl	8001bcc <HAL_Delay>
	
	// Software reset
	TM_MFRC522_Reset();
 80014c8:	f000 f947 	bl	800175a <TM_MFRC522_Reset>
	HAL_Delay(50);  // Wait for reset to complete
 80014cc:	2032      	movs	r0, #50	@ 0x32
 80014ce:	f000 fb7d 	bl	8001bcc <HAL_Delay>

	// Set timer and prescaler
	TM_MFRC522_WriteRegister(MFRC522_REG_T_MODE, 0x8D);
 80014d2:	218d      	movs	r1, #141	@ 0x8d
 80014d4:	202a      	movs	r0, #42	@ 0x2a
 80014d6:	f000 f865 	bl	80015a4 <TM_MFRC522_WriteRegister>
	TM_MFRC522_WriteRegister(MFRC522_REG_T_PRESCALER, 0x3E);
 80014da:	213e      	movs	r1, #62	@ 0x3e
 80014dc:	202b      	movs	r0, #43	@ 0x2b
 80014de:	f000 f861 	bl	80015a4 <TM_MFRC522_WriteRegister>
	TM_MFRC522_WriteRegister(MFRC522_REG_T_RELOAD_L, 30);           
 80014e2:	211e      	movs	r1, #30
 80014e4:	202d      	movs	r0, #45	@ 0x2d
 80014e6:	f000 f85d 	bl	80015a4 <TM_MFRC522_WriteRegister>
	TM_MFRC522_WriteRegister(MFRC522_REG_T_RELOAD_H, 0);
 80014ea:	2100      	movs	r1, #0
 80014ec:	202c      	movs	r0, #44	@ 0x2c
 80014ee:	f000 f859 	bl	80015a4 <TM_MFRC522_WriteRegister>

	// Configure the receiver gain
	TM_MFRC522_WriteRegister(MFRC522_REG_RF_CFG, 0x70);  // 48dB gain
 80014f2:	2170      	movs	r1, #112	@ 0x70
 80014f4:	2026      	movs	r0, #38	@ 0x26
 80014f6:	f000 f855 	bl	80015a4 <TM_MFRC522_WriteRegister>
	
	// Configure modulation
	TM_MFRC522_WriteRegister(MFRC522_REG_TX_AUTO, 0x40);
 80014fa:	2140      	movs	r1, #64	@ 0x40
 80014fc:	2015      	movs	r0, #21
 80014fe:	f000 f851 	bl	80015a4 <TM_MFRC522_WriteRegister>
	TM_MFRC522_WriteRegister(MFRC522_REG_MODE, 0x3D);
 8001502:	213d      	movs	r1, #61	@ 0x3d
 8001504:	2011      	movs	r0, #17
 8001506:	f000 f84d 	bl	80015a4 <TM_MFRC522_WriteRegister>

	// Turn on the antenna
	TM_MFRC522_AntennaOn();
 800150a:	f000 f911 	bl	8001730 <TM_MFRC522_AntennaOn>
}
 800150e:	bf00      	nop
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	40021000 	.word	0x40021000

08001518 <TM_MFRC522_Check>:

TM_MFRC522_Status_t TM_MFRC522_Check(uint8_t* id) {
 8001518:	b580      	push	{r7, lr}
 800151a:	b084      	sub	sp, #16
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
	TM_MFRC522_Status_t status;
	//Find cards, return card type
	status = TM_MFRC522_Request(PICC_REQIDL, id);	
 8001520:	6879      	ldr	r1, [r7, #4]
 8001522:	2026      	movs	r0, #38	@ 0x26
 8001524:	f000 f921 	bl	800176a <TM_MFRC522_Request>
 8001528:	4603      	mov	r3, r0
 800152a:	73fb      	strb	r3, [r7, #15]
	if (status == MI_OK) {
 800152c:	7bfb      	ldrb	r3, [r7, #15]
 800152e:	2b00      	cmp	r3, #0
 8001530:	d104      	bne.n	800153c <TM_MFRC522_Check+0x24>
		//Card detected
		//Anti-collision, return card serial number 4 bytes
		status = TM_MFRC522_Anticoll(id);	
 8001532:	6878      	ldr	r0, [r7, #4]
 8001534:	f000 fa0d 	bl	8001952 <TM_MFRC522_Anticoll>
 8001538:	4603      	mov	r3, r0
 800153a:	73fb      	strb	r3, [r7, #15]
	}
	TM_MFRC522_Halt();			//Command card into hibernation 
 800153c:	f000 fa8f 	bl	8001a5e <TM_MFRC522_Halt>

	return status;
 8001540:	7bfb      	ldrb	r3, [r7, #15]
}
 8001542:	4618      	mov	r0, r3
 8001544:	3710      	adds	r7, #16
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}
	...

0800154c <TM_MFRC522_InitPins>:
		}
	}
	return MI_OK;
}

void TM_MFRC522_InitPins(void) {
 800154c:	b580      	push	{r7, lr}
 800154e:	b086      	sub	sp, #24
 8001550:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct;
	
	// Enable clock for GPIOE
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8001552:	2300      	movs	r3, #0
 8001554:	603b      	str	r3, [r7, #0]
 8001556:	4b11      	ldr	r3, [pc, #68]	@ (800159c <TM_MFRC522_InitPins+0x50>)
 8001558:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800155a:	4a10      	ldr	r2, [pc, #64]	@ (800159c <TM_MFRC522_InitPins+0x50>)
 800155c:	f043 0310 	orr.w	r3, r3, #16
 8001560:	6313      	str	r3, [r2, #48]	@ 0x30
 8001562:	4b0e      	ldr	r3, [pc, #56]	@ (800159c <TM_MFRC522_InitPins+0x50>)
 8001564:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001566:	f003 0310 	and.w	r3, r3, #16
 800156a:	603b      	str	r3, [r7, #0]
 800156c:	683b      	ldr	r3, [r7, #0]
	
	// Configure CS pin as output
	GPIO_InitStruct.Pin = MFRC522_CS_PIN;
 800156e:	2310      	movs	r3, #16
 8001570:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001572:	2301      	movs	r3, #1
 8001574:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001576:	2300      	movs	r3, #0
 8001578:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800157a:	2301      	movs	r3, #1
 800157c:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(MFRC522_CS_PORT, &GPIO_InitStruct);
 800157e:	1d3b      	adds	r3, r7, #4
 8001580:	4619      	mov	r1, r3
 8001582:	4807      	ldr	r0, [pc, #28]	@ (80015a0 <TM_MFRC522_InitPins+0x54>)
 8001584:	f000 fc2c 	bl	8001de0 <HAL_GPIO_Init>
	
	// Set CS pin high (inactive)
	MFRC522_CS_HIGH;
 8001588:	2201      	movs	r2, #1
 800158a:	2110      	movs	r1, #16
 800158c:	4804      	ldr	r0, [pc, #16]	@ (80015a0 <TM_MFRC522_InitPins+0x54>)
 800158e:	f000 fdd3 	bl	8002138 <HAL_GPIO_WritePin>
}
 8001592:	bf00      	nop
 8001594:	3718      	adds	r7, #24
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	40023800 	.word	0x40023800
 80015a0:	40021000 	.word	0x40021000

080015a4 <TM_MFRC522_WriteRegister>:

void TM_MFRC522_WriteRegister(uint8_t addr, uint8_t val) {
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b084      	sub	sp, #16
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	4603      	mov	r3, r0
 80015ac:	460a      	mov	r2, r1
 80015ae:	71fb      	strb	r3, [r7, #7]
 80015b0:	4613      	mov	r3, r2
 80015b2:	71bb      	strb	r3, [r7, #6]
	//CS low
	MFRC522_CS_LOW;
 80015b4:	2200      	movs	r2, #0
 80015b6:	2110      	movs	r1, #16
 80015b8:	481a      	ldr	r0, [pc, #104]	@ (8001624 <TM_MFRC522_WriteRegister+0x80>)
 80015ba:	f000 fdbd 	bl	8002138 <HAL_GPIO_WritePin>
	//Send address
	uint8_t buf = (addr << 1) & 0x7E;
 80015be:	79fb      	ldrb	r3, [r7, #7]
 80015c0:	005b      	lsls	r3, r3, #1
 80015c2:	b2db      	uxtb	r3, r3
 80015c4:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 80015c8:	b2db      	uxtb	r3, r3
 80015ca:	73bb      	strb	r3, [r7, #14]
	HAL_StatusTypeDef ret = 0;
 80015cc:	2300      	movs	r3, #0
 80015ce:	73fb      	strb	r3, [r7, #15]
	ret = HAL_SPI_Transmit(&hspi4, &buf, 1, 100);
 80015d0:	f107 010e 	add.w	r1, r7, #14
 80015d4:	2364      	movs	r3, #100	@ 0x64
 80015d6:	2201      	movs	r2, #1
 80015d8:	4813      	ldr	r0, [pc, #76]	@ (8001628 <TM_MFRC522_WriteRegister+0x84>)
 80015da:	f002 fb0e 	bl	8003bfa <HAL_SPI_Transmit>
 80015de:	4603      	mov	r3, r0
 80015e0:	73fb      	strb	r3, [r7, #15]
	while ((ret = HAL_SPI_GetState(&hspi4)) == HAL_SPI_STATE_BUSY);
 80015e2:	bf00      	nop
 80015e4:	4810      	ldr	r0, [pc, #64]	@ (8001628 <TM_MFRC522_WriteRegister+0x84>)
 80015e6:	f002 ff0e 	bl	8004406 <HAL_SPI_GetState>
 80015ea:	4603      	mov	r3, r0
 80015ec:	73fb      	strb	r3, [r7, #15]
 80015ee:	7bfb      	ldrb	r3, [r7, #15]
 80015f0:	2b02      	cmp	r3, #2
 80015f2:	d0f7      	beq.n	80015e4 <TM_MFRC522_WriteRegister+0x40>
	//Send data	
	HAL_SPI_Transmit(&hspi4, &val, 1, 100);
 80015f4:	1db9      	adds	r1, r7, #6
 80015f6:	2364      	movs	r3, #100	@ 0x64
 80015f8:	2201      	movs	r2, #1
 80015fa:	480b      	ldr	r0, [pc, #44]	@ (8001628 <TM_MFRC522_WriteRegister+0x84>)
 80015fc:	f002 fafd 	bl	8003bfa <HAL_SPI_Transmit>
	while ((ret = HAL_SPI_GetState(&hspi4)) == HAL_SPI_STATE_BUSY);
 8001600:	bf00      	nop
 8001602:	4809      	ldr	r0, [pc, #36]	@ (8001628 <TM_MFRC522_WriteRegister+0x84>)
 8001604:	f002 feff 	bl	8004406 <HAL_SPI_GetState>
 8001608:	4603      	mov	r3, r0
 800160a:	73fb      	strb	r3, [r7, #15]
 800160c:	7bfb      	ldrb	r3, [r7, #15]
 800160e:	2b02      	cmp	r3, #2
 8001610:	d0f7      	beq.n	8001602 <TM_MFRC522_WriteRegister+0x5e>
	//CS high
	MFRC522_CS_HIGH;
 8001612:	2201      	movs	r2, #1
 8001614:	2110      	movs	r1, #16
 8001616:	4803      	ldr	r0, [pc, #12]	@ (8001624 <TM_MFRC522_WriteRegister+0x80>)
 8001618:	f000 fd8e 	bl	8002138 <HAL_GPIO_WritePin>
}
 800161c:	bf00      	nop
 800161e:	3710      	adds	r7, #16
 8001620:	46bd      	mov	sp, r7
 8001622:	bd80      	pop	{r7, pc}
 8001624:	40021000 	.word	0x40021000
 8001628:	200004e4 	.word	0x200004e4

0800162c <TM_MFRC522_ReadRegister>:

uint8_t TM_MFRC522_ReadRegister(uint8_t addr) {
 800162c:	b580      	push	{r7, lr}
 800162e:	b084      	sub	sp, #16
 8001630:	af00      	add	r7, sp, #0
 8001632:	4603      	mov	r3, r0
 8001634:	71fb      	strb	r3, [r7, #7]
	uint8_t val;
	//CS low
	MFRC522_CS_LOW;
 8001636:	2200      	movs	r2, #0
 8001638:	2110      	movs	r1, #16
 800163a:	481f      	ldr	r0, [pc, #124]	@ (80016b8 <TM_MFRC522_ReadRegister+0x8c>)
 800163c:	f000 fd7c 	bl	8002138 <HAL_GPIO_WritePin>

	uint8_t buf = ((addr << 1) & 0x7E) | 0x80;
 8001640:	79fb      	ldrb	r3, [r7, #7]
 8001642:	005b      	lsls	r3, r3, #1
 8001644:	b25b      	sxtb	r3, r3
 8001646:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 800164a:	b25b      	sxtb	r3, r3
 800164c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001650:	b25b      	sxtb	r3, r3
 8001652:	b2db      	uxtb	r3, r3
 8001654:	737b      	strb	r3, [r7, #13]
	HAL_StatusTypeDef ret = 0;
 8001656:	2300      	movs	r3, #0
 8001658:	73fb      	strb	r3, [r7, #15]
	ret = HAL_SPI_Transmit(&hspi4, &buf, 1, 100);
 800165a:	f107 010d 	add.w	r1, r7, #13
 800165e:	2364      	movs	r3, #100	@ 0x64
 8001660:	2201      	movs	r2, #1
 8001662:	4816      	ldr	r0, [pc, #88]	@ (80016bc <TM_MFRC522_ReadRegister+0x90>)
 8001664:	f002 fac9 	bl	8003bfa <HAL_SPI_Transmit>
 8001668:	4603      	mov	r3, r0
 800166a:	73fb      	strb	r3, [r7, #15]
	while ((ret = HAL_SPI_GetState(&hspi4)) == HAL_SPI_STATE_BUSY);
 800166c:	bf00      	nop
 800166e:	4813      	ldr	r0, [pc, #76]	@ (80016bc <TM_MFRC522_ReadRegister+0x90>)
 8001670:	f002 fec9 	bl	8004406 <HAL_SPI_GetState>
 8001674:	4603      	mov	r3, r0
 8001676:	73fb      	strb	r3, [r7, #15]
 8001678:	7bfb      	ldrb	r3, [r7, #15]
 800167a:	2b02      	cmp	r3, #2
 800167c:	d0f7      	beq.n	800166e <TM_MFRC522_ReadRegister+0x42>
	ret = HAL_SPI_Receive(&hspi4, &val, 1, 100);
 800167e:	f107 010e 	add.w	r1, r7, #14
 8001682:	2364      	movs	r3, #100	@ 0x64
 8001684:	2201      	movs	r2, #1
 8001686:	480d      	ldr	r0, [pc, #52]	@ (80016bc <TM_MFRC522_ReadRegister+0x90>)
 8001688:	f002 fbfb 	bl	8003e82 <HAL_SPI_Receive>
 800168c:	4603      	mov	r3, r0
 800168e:	73fb      	strb	r3, [r7, #15]
	while ((ret = HAL_SPI_GetState(&hspi4)) == HAL_SPI_STATE_BUSY);
 8001690:	bf00      	nop
 8001692:	480a      	ldr	r0, [pc, #40]	@ (80016bc <TM_MFRC522_ReadRegister+0x90>)
 8001694:	f002 feb7 	bl	8004406 <HAL_SPI_GetState>
 8001698:	4603      	mov	r3, r0
 800169a:	73fb      	strb	r3, [r7, #15]
 800169c:	7bfb      	ldrb	r3, [r7, #15]
 800169e:	2b02      	cmp	r3, #2
 80016a0:	d0f7      	beq.n	8001692 <TM_MFRC522_ReadRegister+0x66>
	//CS high
	MFRC522_CS_HIGH;
 80016a2:	2201      	movs	r2, #1
 80016a4:	2110      	movs	r1, #16
 80016a6:	4804      	ldr	r0, [pc, #16]	@ (80016b8 <TM_MFRC522_ReadRegister+0x8c>)
 80016a8:	f000 fd46 	bl	8002138 <HAL_GPIO_WritePin>

	return val;	
 80016ac:	7bbb      	ldrb	r3, [r7, #14]
}
 80016ae:	4618      	mov	r0, r3
 80016b0:	3710      	adds	r7, #16
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	bf00      	nop
 80016b8:	40021000 	.word	0x40021000
 80016bc:	200004e4 	.word	0x200004e4

080016c0 <TM_MFRC522_SetBitMask>:

void TM_MFRC522_SetBitMask(uint8_t reg, uint8_t mask) {
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b082      	sub	sp, #8
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	4603      	mov	r3, r0
 80016c8:	460a      	mov	r2, r1
 80016ca:	71fb      	strb	r3, [r7, #7]
 80016cc:	4613      	mov	r3, r2
 80016ce:	71bb      	strb	r3, [r7, #6]
	TM_MFRC522_WriteRegister(reg, TM_MFRC522_ReadRegister(reg) | mask);
 80016d0:	79fb      	ldrb	r3, [r7, #7]
 80016d2:	4618      	mov	r0, r3
 80016d4:	f7ff ffaa 	bl	800162c <TM_MFRC522_ReadRegister>
 80016d8:	4603      	mov	r3, r0
 80016da:	461a      	mov	r2, r3
 80016dc:	79bb      	ldrb	r3, [r7, #6]
 80016de:	4313      	orrs	r3, r2
 80016e0:	b2da      	uxtb	r2, r3
 80016e2:	79fb      	ldrb	r3, [r7, #7]
 80016e4:	4611      	mov	r1, r2
 80016e6:	4618      	mov	r0, r3
 80016e8:	f7ff ff5c 	bl	80015a4 <TM_MFRC522_WriteRegister>
}
 80016ec:	bf00      	nop
 80016ee:	3708      	adds	r7, #8
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd80      	pop	{r7, pc}

080016f4 <TM_MFRC522_ClearBitMask>:

void TM_MFRC522_ClearBitMask(uint8_t reg, uint8_t mask){
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b082      	sub	sp, #8
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	4603      	mov	r3, r0
 80016fc:	460a      	mov	r2, r1
 80016fe:	71fb      	strb	r3, [r7, #7]
 8001700:	4613      	mov	r3, r2
 8001702:	71bb      	strb	r3, [r7, #6]
	TM_MFRC522_WriteRegister(reg, TM_MFRC522_ReadRegister(reg) & (~mask));
 8001704:	79fb      	ldrb	r3, [r7, #7]
 8001706:	4618      	mov	r0, r3
 8001708:	f7ff ff90 	bl	800162c <TM_MFRC522_ReadRegister>
 800170c:	4603      	mov	r3, r0
 800170e:	b25a      	sxtb	r2, r3
 8001710:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001714:	43db      	mvns	r3, r3
 8001716:	b25b      	sxtb	r3, r3
 8001718:	4013      	ands	r3, r2
 800171a:	b25b      	sxtb	r3, r3
 800171c:	b2da      	uxtb	r2, r3
 800171e:	79fb      	ldrb	r3, [r7, #7]
 8001720:	4611      	mov	r1, r2
 8001722:	4618      	mov	r0, r3
 8001724:	f7ff ff3e 	bl	80015a4 <TM_MFRC522_WriteRegister>
} 
 8001728:	bf00      	nop
 800172a:	3708      	adds	r7, #8
 800172c:	46bd      	mov	sp, r7
 800172e:	bd80      	pop	{r7, pc}

08001730 <TM_MFRC522_AntennaOn>:

void TM_MFRC522_AntennaOn(void) {
 8001730:	b580      	push	{r7, lr}
 8001732:	b082      	sub	sp, #8
 8001734:	af00      	add	r7, sp, #0
	uint8_t temp;

	temp = TM_MFRC522_ReadRegister(MFRC522_REG_TX_CONTROL);
 8001736:	2014      	movs	r0, #20
 8001738:	f7ff ff78 	bl	800162c <TM_MFRC522_ReadRegister>
 800173c:	4603      	mov	r3, r0
 800173e:	71fb      	strb	r3, [r7, #7]
	if (!(temp & 0x03)) {
 8001740:	79fb      	ldrb	r3, [r7, #7]
 8001742:	f003 0303 	and.w	r3, r3, #3
 8001746:	2b00      	cmp	r3, #0
 8001748:	d103      	bne.n	8001752 <TM_MFRC522_AntennaOn+0x22>
		TM_MFRC522_SetBitMask(MFRC522_REG_TX_CONTROL, 0x03);
 800174a:	2103      	movs	r1, #3
 800174c:	2014      	movs	r0, #20
 800174e:	f7ff ffb7 	bl	80016c0 <TM_MFRC522_SetBitMask>
	}
}
 8001752:	bf00      	nop
 8001754:	3708      	adds	r7, #8
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}

0800175a <TM_MFRC522_Reset>:

void TM_MFRC522_AntennaOff(void) {
	TM_MFRC522_ClearBitMask(MFRC522_REG_TX_CONTROL, 0x03);
}

void TM_MFRC522_Reset(void) {
 800175a:	b580      	push	{r7, lr}
 800175c:	af00      	add	r7, sp, #0
	TM_MFRC522_WriteRegister(MFRC522_REG_COMMAND, PCD_RESETPHASE);
 800175e:	210f      	movs	r1, #15
 8001760:	2001      	movs	r0, #1
 8001762:	f7ff ff1f 	bl	80015a4 <TM_MFRC522_WriteRegister>
}
 8001766:	bf00      	nop
 8001768:	bd80      	pop	{r7, pc}

0800176a <TM_MFRC522_Request>:

TM_MFRC522_Status_t TM_MFRC522_Request(uint8_t reqMode, uint8_t* TagType) {
 800176a:	b580      	push	{r7, lr}
 800176c:	b086      	sub	sp, #24
 800176e:	af02      	add	r7, sp, #8
 8001770:	4603      	mov	r3, r0
 8001772:	6039      	str	r1, [r7, #0]
 8001774:	71fb      	strb	r3, [r7, #7]
	TM_MFRC522_Status_t status;  
	uint16_t backBits;			//The received data bits

	TM_MFRC522_WriteRegister(MFRC522_REG_BIT_FRAMING, 0x07);		//TxLastBists = BitFramingReg[2..0]	???
 8001776:	2107      	movs	r1, #7
 8001778:	200d      	movs	r0, #13
 800177a:	f7ff ff13 	bl	80015a4 <TM_MFRC522_WriteRegister>

	TagType[0] = reqMode;
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	79fa      	ldrb	r2, [r7, #7]
 8001782:	701a      	strb	r2, [r3, #0]
	status = TM_MFRC522_ToCard(PCD_TRANSCEIVE, TagType, 1, TagType, &backBits);
 8001784:	f107 030c 	add.w	r3, r7, #12
 8001788:	9300      	str	r3, [sp, #0]
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	2201      	movs	r2, #1
 800178e:	6839      	ldr	r1, [r7, #0]
 8001790:	200c      	movs	r0, #12
 8001792:	f000 f80f 	bl	80017b4 <TM_MFRC522_ToCard>
 8001796:	4603      	mov	r3, r0
 8001798:	73fb      	strb	r3, [r7, #15]

	if ((status != MI_OK) || (backBits != 0x10)) {    
 800179a:	7bfb      	ldrb	r3, [r7, #15]
 800179c:	2b00      	cmp	r3, #0
 800179e:	d102      	bne.n	80017a6 <TM_MFRC522_Request+0x3c>
 80017a0:	89bb      	ldrh	r3, [r7, #12]
 80017a2:	2b10      	cmp	r3, #16
 80017a4:	d001      	beq.n	80017aa <TM_MFRC522_Request+0x40>
		status = MI_ERR;
 80017a6:	2302      	movs	r3, #2
 80017a8:	73fb      	strb	r3, [r7, #15]
	}

	return status;
 80017aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80017ac:	4618      	mov	r0, r3
 80017ae:	3710      	adds	r7, #16
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bd80      	pop	{r7, pc}

080017b4 <TM_MFRC522_ToCard>:

TM_MFRC522_Status_t TM_MFRC522_ToCard(uint8_t command, uint8_t* sendData, uint8_t sendLen, uint8_t* backData, uint16_t* backLen) {
 80017b4:	b590      	push	{r4, r7, lr}
 80017b6:	b087      	sub	sp, #28
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	60b9      	str	r1, [r7, #8]
 80017bc:	607b      	str	r3, [r7, #4]
 80017be:	4603      	mov	r3, r0
 80017c0:	73fb      	strb	r3, [r7, #15]
 80017c2:	4613      	mov	r3, r2
 80017c4:	73bb      	strb	r3, [r7, #14]
	TM_MFRC522_Status_t status = MI_ERR;
 80017c6:	2302      	movs	r3, #2
 80017c8:	75fb      	strb	r3, [r7, #23]
	uint8_t irqEn = 0x00;
 80017ca:	2300      	movs	r3, #0
 80017cc:	75bb      	strb	r3, [r7, #22]
	uint8_t waitIRq = 0x00;
 80017ce:	2300      	movs	r3, #0
 80017d0:	757b      	strb	r3, [r7, #21]
	uint8_t lastBits;
	uint8_t n;
	uint16_t i;

	switch (command) {
 80017d2:	7bfb      	ldrb	r3, [r7, #15]
 80017d4:	2b0c      	cmp	r3, #12
 80017d6:	d006      	beq.n	80017e6 <TM_MFRC522_ToCard+0x32>
 80017d8:	2b0e      	cmp	r3, #14
 80017da:	d109      	bne.n	80017f0 <TM_MFRC522_ToCard+0x3c>
		case PCD_AUTHENT: {
			irqEn = 0x12;
 80017dc:	2312      	movs	r3, #18
 80017de:	75bb      	strb	r3, [r7, #22]
			waitIRq = 0x10;
 80017e0:	2310      	movs	r3, #16
 80017e2:	757b      	strb	r3, [r7, #21]
			break;
 80017e4:	e005      	b.n	80017f2 <TM_MFRC522_ToCard+0x3e>
		}
		case PCD_TRANSCEIVE: {
			irqEn = 0x77;
 80017e6:	2377      	movs	r3, #119	@ 0x77
 80017e8:	75bb      	strb	r3, [r7, #22]
			waitIRq = 0x30;
 80017ea:	2330      	movs	r3, #48	@ 0x30
 80017ec:	757b      	strb	r3, [r7, #21]
			break;
 80017ee:	e000      	b.n	80017f2 <TM_MFRC522_ToCard+0x3e>
		}
		default:
			break;
 80017f0:	bf00      	nop
	}

	TM_MFRC522_WriteRegister(MFRC522_REG_COMM_IE_N, irqEn | 0x80);
 80017f2:	7dbb      	ldrb	r3, [r7, #22]
 80017f4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80017f8:	b2db      	uxtb	r3, r3
 80017fa:	4619      	mov	r1, r3
 80017fc:	2002      	movs	r0, #2
 80017fe:	f7ff fed1 	bl	80015a4 <TM_MFRC522_WriteRegister>
	TM_MFRC522_ClearBitMask(MFRC522_REG_COMM_IRQ, 0x80);
 8001802:	2180      	movs	r1, #128	@ 0x80
 8001804:	2004      	movs	r0, #4
 8001806:	f7ff ff75 	bl	80016f4 <TM_MFRC522_ClearBitMask>
	TM_MFRC522_SetBitMask(MFRC522_REG_FIFO_LEVEL, 0x80);
 800180a:	2180      	movs	r1, #128	@ 0x80
 800180c:	200a      	movs	r0, #10
 800180e:	f7ff ff57 	bl	80016c0 <TM_MFRC522_SetBitMask>

	TM_MFRC522_WriteRegister(MFRC522_REG_COMMAND, PCD_IDLE);
 8001812:	2100      	movs	r1, #0
 8001814:	2001      	movs	r0, #1
 8001816:	f7ff fec5 	bl	80015a4 <TM_MFRC522_WriteRegister>

	//Writing data to the FIFO
	for (i = 0; i < sendLen; i++) {   
 800181a:	2300      	movs	r3, #0
 800181c:	827b      	strh	r3, [r7, #18]
 800181e:	e00a      	b.n	8001836 <TM_MFRC522_ToCard+0x82>
		TM_MFRC522_WriteRegister(MFRC522_REG_FIFO_DATA, sendData[i]);    
 8001820:	8a7b      	ldrh	r3, [r7, #18]
 8001822:	68ba      	ldr	r2, [r7, #8]
 8001824:	4413      	add	r3, r2
 8001826:	781b      	ldrb	r3, [r3, #0]
 8001828:	4619      	mov	r1, r3
 800182a:	2009      	movs	r0, #9
 800182c:	f7ff feba 	bl	80015a4 <TM_MFRC522_WriteRegister>
	for (i = 0; i < sendLen; i++) {   
 8001830:	8a7b      	ldrh	r3, [r7, #18]
 8001832:	3301      	adds	r3, #1
 8001834:	827b      	strh	r3, [r7, #18]
 8001836:	7bbb      	ldrb	r3, [r7, #14]
 8001838:	b29b      	uxth	r3, r3
 800183a:	8a7a      	ldrh	r2, [r7, #18]
 800183c:	429a      	cmp	r2, r3
 800183e:	d3ef      	bcc.n	8001820 <TM_MFRC522_ToCard+0x6c>
	}

	//Execute the command
	TM_MFRC522_WriteRegister(MFRC522_REG_COMMAND, command);
 8001840:	7bfb      	ldrb	r3, [r7, #15]
 8001842:	4619      	mov	r1, r3
 8001844:	2001      	movs	r0, #1
 8001846:	f7ff fead 	bl	80015a4 <TM_MFRC522_WriteRegister>
	if (command == PCD_TRANSCEIVE) {    
 800184a:	7bfb      	ldrb	r3, [r7, #15]
 800184c:	2b0c      	cmp	r3, #12
 800184e:	d103      	bne.n	8001858 <TM_MFRC522_ToCard+0xa4>
		TM_MFRC522_SetBitMask(MFRC522_REG_BIT_FRAMING, 0x80);		//StartSend=1,transmission of data starts  
 8001850:	2180      	movs	r1, #128	@ 0x80
 8001852:	200d      	movs	r0, #13
 8001854:	f7ff ff34 	bl	80016c0 <TM_MFRC522_SetBitMask>
	}   

	//Waiting to receive data to complete
	i = 2000;	//i according to the clock frequency adjustment, the operator M1 card maximum waiting time 25ms???
 8001858:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800185c:	827b      	strh	r3, [r7, #18]
	do {
		//CommIrqReg[7..0]
		//Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
		n = TM_MFRC522_ReadRegister(MFRC522_REG_COMM_IRQ);
 800185e:	2004      	movs	r0, #4
 8001860:	f7ff fee4 	bl	800162c <TM_MFRC522_ReadRegister>
 8001864:	4603      	mov	r3, r0
 8001866:	753b      	strb	r3, [r7, #20]
		i--;
 8001868:	8a7b      	ldrh	r3, [r7, #18]
 800186a:	3b01      	subs	r3, #1
 800186c:	827b      	strh	r3, [r7, #18]
	} while ((i!=0) && !(n&0x01) && !(n&waitIRq));
 800186e:	8a7b      	ldrh	r3, [r7, #18]
 8001870:	2b00      	cmp	r3, #0
 8001872:	d00a      	beq.n	800188a <TM_MFRC522_ToCard+0xd6>
 8001874:	7d3b      	ldrb	r3, [r7, #20]
 8001876:	f003 0301 	and.w	r3, r3, #1
 800187a:	2b00      	cmp	r3, #0
 800187c:	d105      	bne.n	800188a <TM_MFRC522_ToCard+0xd6>
 800187e:	7d3a      	ldrb	r2, [r7, #20]
 8001880:	7d7b      	ldrb	r3, [r7, #21]
 8001882:	4013      	ands	r3, r2
 8001884:	b2db      	uxtb	r3, r3
 8001886:	2b00      	cmp	r3, #0
 8001888:	d0e9      	beq.n	800185e <TM_MFRC522_ToCard+0xaa>

	TM_MFRC522_ClearBitMask(MFRC522_REG_BIT_FRAMING, 0x80);			//StartSend=0
 800188a:	2180      	movs	r1, #128	@ 0x80
 800188c:	200d      	movs	r0, #13
 800188e:	f7ff ff31 	bl	80016f4 <TM_MFRC522_ClearBitMask>

	if (i != 0)  {
 8001892:	8a7b      	ldrh	r3, [r7, #18]
 8001894:	2b00      	cmp	r3, #0
 8001896:	d057      	beq.n	8001948 <TM_MFRC522_ToCard+0x194>
		if (!(TM_MFRC522_ReadRegister(MFRC522_REG_ERROR) & 0x1B)) {
 8001898:	2006      	movs	r0, #6
 800189a:	f7ff fec7 	bl	800162c <TM_MFRC522_ReadRegister>
 800189e:	4603      	mov	r3, r0
 80018a0:	f003 031b 	and.w	r3, r3, #27
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d14d      	bne.n	8001944 <TM_MFRC522_ToCard+0x190>
			status = MI_OK;
 80018a8:	2300      	movs	r3, #0
 80018aa:	75fb      	strb	r3, [r7, #23]
			if (n & irqEn & 0x01) {   
 80018ac:	7d3a      	ldrb	r2, [r7, #20]
 80018ae:	7dbb      	ldrb	r3, [r7, #22]
 80018b0:	4013      	ands	r3, r2
 80018b2:	b2db      	uxtb	r3, r3
 80018b4:	f003 0301 	and.w	r3, r3, #1
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d001      	beq.n	80018c0 <TM_MFRC522_ToCard+0x10c>
				status = MI_NOTAGERR;			
 80018bc:	2301      	movs	r3, #1
 80018be:	75fb      	strb	r3, [r7, #23]
			}

			if (command == PCD_TRANSCEIVE) {
 80018c0:	7bfb      	ldrb	r3, [r7, #15]
 80018c2:	2b0c      	cmp	r3, #12
 80018c4:	d140      	bne.n	8001948 <TM_MFRC522_ToCard+0x194>
				n = TM_MFRC522_ReadRegister(MFRC522_REG_FIFO_LEVEL);
 80018c6:	200a      	movs	r0, #10
 80018c8:	f7ff feb0 	bl	800162c <TM_MFRC522_ReadRegister>
 80018cc:	4603      	mov	r3, r0
 80018ce:	753b      	strb	r3, [r7, #20]
				lastBits = TM_MFRC522_ReadRegister(MFRC522_REG_CONTROL) & 0x07;
 80018d0:	200c      	movs	r0, #12
 80018d2:	f7ff feab 	bl	800162c <TM_MFRC522_ReadRegister>
 80018d6:	4603      	mov	r3, r0
 80018d8:	f003 0307 	and.w	r3, r3, #7
 80018dc:	747b      	strb	r3, [r7, #17]
				if (lastBits) {   
 80018de:	7c7b      	ldrb	r3, [r7, #17]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d00b      	beq.n	80018fc <TM_MFRC522_ToCard+0x148>
					*backLen = (n - 1) * 8 + lastBits;   
 80018e4:	7d3b      	ldrb	r3, [r7, #20]
 80018e6:	3b01      	subs	r3, #1
 80018e8:	b29b      	uxth	r3, r3
 80018ea:	00db      	lsls	r3, r3, #3
 80018ec:	b29a      	uxth	r2, r3
 80018ee:	7c7b      	ldrb	r3, [r7, #17]
 80018f0:	b29b      	uxth	r3, r3
 80018f2:	4413      	add	r3, r2
 80018f4:	b29a      	uxth	r2, r3
 80018f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80018f8:	801a      	strh	r2, [r3, #0]
 80018fa:	e005      	b.n	8001908 <TM_MFRC522_ToCard+0x154>
				} else {   
					*backLen = n * 8;   
 80018fc:	7d3b      	ldrb	r3, [r7, #20]
 80018fe:	b29b      	uxth	r3, r3
 8001900:	00db      	lsls	r3, r3, #3
 8001902:	b29a      	uxth	r2, r3
 8001904:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001906:	801a      	strh	r2, [r3, #0]
				}

				if (n == 0) {   
 8001908:	7d3b      	ldrb	r3, [r7, #20]
 800190a:	2b00      	cmp	r3, #0
 800190c:	d101      	bne.n	8001912 <TM_MFRC522_ToCard+0x15e>
					n = 1;    
 800190e:	2301      	movs	r3, #1
 8001910:	753b      	strb	r3, [r7, #20]
				}
				if (n > MFRC522_MAX_LEN) {   
 8001912:	7d3b      	ldrb	r3, [r7, #20]
 8001914:	2b10      	cmp	r3, #16
 8001916:	d901      	bls.n	800191c <TM_MFRC522_ToCard+0x168>
					n = MFRC522_MAX_LEN;   
 8001918:	2310      	movs	r3, #16
 800191a:	753b      	strb	r3, [r7, #20]
				}

				//Reading the received data in FIFO
				for (i = 0; i < n; i++) {   
 800191c:	2300      	movs	r3, #0
 800191e:	827b      	strh	r3, [r7, #18]
 8001920:	e00a      	b.n	8001938 <TM_MFRC522_ToCard+0x184>
					backData[i] = TM_MFRC522_ReadRegister(MFRC522_REG_FIFO_DATA);    
 8001922:	8a7b      	ldrh	r3, [r7, #18]
 8001924:	687a      	ldr	r2, [r7, #4]
 8001926:	18d4      	adds	r4, r2, r3
 8001928:	2009      	movs	r0, #9
 800192a:	f7ff fe7f 	bl	800162c <TM_MFRC522_ReadRegister>
 800192e:	4603      	mov	r3, r0
 8001930:	7023      	strb	r3, [r4, #0]
				for (i = 0; i < n; i++) {   
 8001932:	8a7b      	ldrh	r3, [r7, #18]
 8001934:	3301      	adds	r3, #1
 8001936:	827b      	strh	r3, [r7, #18]
 8001938:	7d3b      	ldrb	r3, [r7, #20]
 800193a:	b29b      	uxth	r3, r3
 800193c:	8a7a      	ldrh	r2, [r7, #18]
 800193e:	429a      	cmp	r2, r3
 8001940:	d3ef      	bcc.n	8001922 <TM_MFRC522_ToCard+0x16e>
 8001942:	e001      	b.n	8001948 <TM_MFRC522_ToCard+0x194>
				}
			}
		} else {   
			status = MI_ERR;  
 8001944:	2302      	movs	r3, #2
 8001946:	75fb      	strb	r3, [r7, #23]
		}
	}

	return status;
 8001948:	7dfb      	ldrb	r3, [r7, #23]
}
 800194a:	4618      	mov	r0, r3
 800194c:	371c      	adds	r7, #28
 800194e:	46bd      	mov	sp, r7
 8001950:	bd90      	pop	{r4, r7, pc}

08001952 <TM_MFRC522_Anticoll>:

TM_MFRC522_Status_t TM_MFRC522_Anticoll(uint8_t* serNum) {
 8001952:	b580      	push	{r7, lr}
 8001954:	b086      	sub	sp, #24
 8001956:	af02      	add	r7, sp, #8
 8001958:	6078      	str	r0, [r7, #4]
	TM_MFRC522_Status_t status;
	uint8_t i;
	uint8_t serNumCheck = 0;
 800195a:	2300      	movs	r3, #0
 800195c:	737b      	strb	r3, [r7, #13]
	uint16_t unLen;

	TM_MFRC522_WriteRegister(MFRC522_REG_BIT_FRAMING, 0x00);		//TxLastBists = BitFramingReg[2..0]
 800195e:	2100      	movs	r1, #0
 8001960:	200d      	movs	r0, #13
 8001962:	f7ff fe1f 	bl	80015a4 <TM_MFRC522_WriteRegister>

	serNum[0] = PICC_ANTICOLL;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	2293      	movs	r2, #147	@ 0x93
 800196a:	701a      	strb	r2, [r3, #0]
	serNum[1] = 0x20;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	3301      	adds	r3, #1
 8001970:	2220      	movs	r2, #32
 8001972:	701a      	strb	r2, [r3, #0]
	status = TM_MFRC522_ToCard(PCD_TRANSCEIVE, serNum, 2, serNum, &unLen);
 8001974:	f107 030a 	add.w	r3, r7, #10
 8001978:	9300      	str	r3, [sp, #0]
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	2202      	movs	r2, #2
 800197e:	6879      	ldr	r1, [r7, #4]
 8001980:	200c      	movs	r0, #12
 8001982:	f7ff ff17 	bl	80017b4 <TM_MFRC522_ToCard>
 8001986:	4603      	mov	r3, r0
 8001988:	73fb      	strb	r3, [r7, #15]

	if (status == MI_OK) {
 800198a:	7bfb      	ldrb	r3, [r7, #15]
 800198c:	2b00      	cmp	r3, #0
 800198e:	d118      	bne.n	80019c2 <TM_MFRC522_Anticoll+0x70>
		//Check card serial number
		for (i = 0; i < 4; i++) {   
 8001990:	2300      	movs	r3, #0
 8001992:	73bb      	strb	r3, [r7, #14]
 8001994:	e009      	b.n	80019aa <TM_MFRC522_Anticoll+0x58>
			serNumCheck ^= serNum[i];
 8001996:	7bbb      	ldrb	r3, [r7, #14]
 8001998:	687a      	ldr	r2, [r7, #4]
 800199a:	4413      	add	r3, r2
 800199c:	781a      	ldrb	r2, [r3, #0]
 800199e:	7b7b      	ldrb	r3, [r7, #13]
 80019a0:	4053      	eors	r3, r2
 80019a2:	737b      	strb	r3, [r7, #13]
		for (i = 0; i < 4; i++) {   
 80019a4:	7bbb      	ldrb	r3, [r7, #14]
 80019a6:	3301      	adds	r3, #1
 80019a8:	73bb      	strb	r3, [r7, #14]
 80019aa:	7bbb      	ldrb	r3, [r7, #14]
 80019ac:	2b03      	cmp	r3, #3
 80019ae:	d9f2      	bls.n	8001996 <TM_MFRC522_Anticoll+0x44>
		}
		if (serNumCheck != serNum[i]) {   
 80019b0:	7bbb      	ldrb	r3, [r7, #14]
 80019b2:	687a      	ldr	r2, [r7, #4]
 80019b4:	4413      	add	r3, r2
 80019b6:	781b      	ldrb	r3, [r3, #0]
 80019b8:	7b7a      	ldrb	r2, [r7, #13]
 80019ba:	429a      	cmp	r2, r3
 80019bc:	d001      	beq.n	80019c2 <TM_MFRC522_Anticoll+0x70>
			status = MI_ERR;    
 80019be:	2302      	movs	r3, #2
 80019c0:	73fb      	strb	r3, [r7, #15]
		}
	}
	return status;
 80019c2:	7bfb      	ldrb	r3, [r7, #15]
} 
 80019c4:	4618      	mov	r0, r3
 80019c6:	3710      	adds	r7, #16
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bd80      	pop	{r7, pc}

080019cc <TM_MFRC522_CalculateCRC>:

void TM_MFRC522_CalculateCRC(uint8_t*  pIndata, uint8_t len, uint8_t* pOutData) {
 80019cc:	b590      	push	{r4, r7, lr}
 80019ce:	b087      	sub	sp, #28
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	60f8      	str	r0, [r7, #12]
 80019d4:	460b      	mov	r3, r1
 80019d6:	607a      	str	r2, [r7, #4]
 80019d8:	72fb      	strb	r3, [r7, #11]
	uint8_t i, n;

	TM_MFRC522_ClearBitMask(MFRC522_REG_DIV_IRQ, 0x04);				//CRCIrq = 0
 80019da:	2104      	movs	r1, #4
 80019dc:	2005      	movs	r0, #5
 80019de:	f7ff fe89 	bl	80016f4 <TM_MFRC522_ClearBitMask>
	TM_MFRC522_SetBitMask(MFRC522_REG_FIFO_LEVEL, 0x80);			//Clear the FIFO pointer
 80019e2:	2180      	movs	r1, #128	@ 0x80
 80019e4:	200a      	movs	r0, #10
 80019e6:	f7ff fe6b 	bl	80016c0 <TM_MFRC522_SetBitMask>
	//Write_MFRC522(CommandReg, PCD_IDLE);

	//Writing data to the FIFO	
	for (i = 0; i < len; i++) {   
 80019ea:	2300      	movs	r3, #0
 80019ec:	75fb      	strb	r3, [r7, #23]
 80019ee:	e00a      	b.n	8001a06 <TM_MFRC522_CalculateCRC+0x3a>
		TM_MFRC522_WriteRegister(MFRC522_REG_FIFO_DATA, *(pIndata+i));   
 80019f0:	7dfb      	ldrb	r3, [r7, #23]
 80019f2:	68fa      	ldr	r2, [r7, #12]
 80019f4:	4413      	add	r3, r2
 80019f6:	781b      	ldrb	r3, [r3, #0]
 80019f8:	4619      	mov	r1, r3
 80019fa:	2009      	movs	r0, #9
 80019fc:	f7ff fdd2 	bl	80015a4 <TM_MFRC522_WriteRegister>
	for (i = 0; i < len; i++) {   
 8001a00:	7dfb      	ldrb	r3, [r7, #23]
 8001a02:	3301      	adds	r3, #1
 8001a04:	75fb      	strb	r3, [r7, #23]
 8001a06:	7dfa      	ldrb	r2, [r7, #23]
 8001a08:	7afb      	ldrb	r3, [r7, #11]
 8001a0a:	429a      	cmp	r2, r3
 8001a0c:	d3f0      	bcc.n	80019f0 <TM_MFRC522_CalculateCRC+0x24>
	}
	TM_MFRC522_WriteRegister(MFRC522_REG_COMMAND, PCD_CALCCRC);
 8001a0e:	2103      	movs	r1, #3
 8001a10:	2001      	movs	r0, #1
 8001a12:	f7ff fdc7 	bl	80015a4 <TM_MFRC522_WriteRegister>

	//Wait CRC calculation is complete
	i = 0xFF;
 8001a16:	23ff      	movs	r3, #255	@ 0xff
 8001a18:	75fb      	strb	r3, [r7, #23]
	do {
		n = TM_MFRC522_ReadRegister(MFRC522_REG_DIV_IRQ);
 8001a1a:	2005      	movs	r0, #5
 8001a1c:	f7ff fe06 	bl	800162c <TM_MFRC522_ReadRegister>
 8001a20:	4603      	mov	r3, r0
 8001a22:	75bb      	strb	r3, [r7, #22]
		i--;
 8001a24:	7dfb      	ldrb	r3, [r7, #23]
 8001a26:	3b01      	subs	r3, #1
 8001a28:	75fb      	strb	r3, [r7, #23]
	} while ((i!=0) && !(n&0x04));			//CRCIrq = 1
 8001a2a:	7dfb      	ldrb	r3, [r7, #23]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d004      	beq.n	8001a3a <TM_MFRC522_CalculateCRC+0x6e>
 8001a30:	7dbb      	ldrb	r3, [r7, #22]
 8001a32:	f003 0304 	and.w	r3, r3, #4
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d0ef      	beq.n	8001a1a <TM_MFRC522_CalculateCRC+0x4e>

	//Read CRC calculation result
	pOutData[0] = TM_MFRC522_ReadRegister(MFRC522_REG_CRC_RESULT_L);
 8001a3a:	2022      	movs	r0, #34	@ 0x22
 8001a3c:	f7ff fdf6 	bl	800162c <TM_MFRC522_ReadRegister>
 8001a40:	4603      	mov	r3, r0
 8001a42:	461a      	mov	r2, r3
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	701a      	strb	r2, [r3, #0]
	pOutData[1] = TM_MFRC522_ReadRegister(MFRC522_REG_CRC_RESULT_M);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	1c5c      	adds	r4, r3, #1
 8001a4c:	2021      	movs	r0, #33	@ 0x21
 8001a4e:	f7ff fded 	bl	800162c <TM_MFRC522_ReadRegister>
 8001a52:	4603      	mov	r3, r0
 8001a54:	7023      	strb	r3, [r4, #0]
}
 8001a56:	bf00      	nop
 8001a58:	371c      	adds	r7, #28
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd90      	pop	{r4, r7, pc}

08001a5e <TM_MFRC522_Halt>:
	}

	return status;
}

void TM_MFRC522_Halt(void) {
 8001a5e:	b580      	push	{r7, lr}
 8001a60:	b084      	sub	sp, #16
 8001a62:	af02      	add	r7, sp, #8
	uint16_t unLen;
	uint8_t buff[4]; 

	buff[0] = PICC_HALT;
 8001a64:	2350      	movs	r3, #80	@ 0x50
 8001a66:	703b      	strb	r3, [r7, #0]
	buff[1] = 0;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	707b      	strb	r3, [r7, #1]
	TM_MFRC522_CalculateCRC(buff, 2, &buff[2]);
 8001a6c:	463b      	mov	r3, r7
 8001a6e:	1c9a      	adds	r2, r3, #2
 8001a70:	463b      	mov	r3, r7
 8001a72:	2102      	movs	r1, #2
 8001a74:	4618      	mov	r0, r3
 8001a76:	f7ff ffa9 	bl	80019cc <TM_MFRC522_CalculateCRC>

	TM_MFRC522_ToCard(PCD_TRANSCEIVE, buff, 4, buff, &unLen);
 8001a7a:	463a      	mov	r2, r7
 8001a7c:	4639      	mov	r1, r7
 8001a7e:	1dbb      	adds	r3, r7, #6
 8001a80:	9300      	str	r3, [sp, #0]
 8001a82:	4613      	mov	r3, r2
 8001a84:	2204      	movs	r2, #4
 8001a86:	200c      	movs	r0, #12
 8001a88:	f7ff fe94 	bl	80017b4 <TM_MFRC522_ToCard>
}
 8001a8c:	bf00      	nop
 8001a8e:	3708      	adds	r7, #8
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bd80      	pop	{r7, pc}

08001a94 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001a94:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001acc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001a98:	f7ff fcf8 	bl	800148c <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001a9c:	480c      	ldr	r0, [pc, #48]	@ (8001ad0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001a9e:	490d      	ldr	r1, [pc, #52]	@ (8001ad4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001aa0:	4a0d      	ldr	r2, [pc, #52]	@ (8001ad8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001aa2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001aa4:	e002      	b.n	8001aac <LoopCopyDataInit>

08001aa6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001aa6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001aa8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001aaa:	3304      	adds	r3, #4

08001aac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001aac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001aae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ab0:	d3f9      	bcc.n	8001aa6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ab2:	4a0a      	ldr	r2, [pc, #40]	@ (8001adc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001ab4:	4c0a      	ldr	r4, [pc, #40]	@ (8001ae0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001ab6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ab8:	e001      	b.n	8001abe <LoopFillZerobss>

08001aba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001aba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001abc:	3204      	adds	r2, #4

08001abe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001abe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ac0:	d3fb      	bcc.n	8001aba <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001ac2:	f003 fa2b 	bl	8004f1c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ac6:	f7ff f817 	bl	8000af8 <main>
  bx  lr    
 8001aca:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001acc:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001ad0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ad4:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8001ad8:	08006f84 	.word	0x08006f84
  ldr r2, =_sbss
 8001adc:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8001ae0:	2000073c 	.word	0x2000073c

08001ae4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ae4:	e7fe      	b.n	8001ae4 <ADC_IRQHandler>
	...

08001ae8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001aec:	4b0e      	ldr	r3, [pc, #56]	@ (8001b28 <HAL_Init+0x40>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4a0d      	ldr	r2, [pc, #52]	@ (8001b28 <HAL_Init+0x40>)
 8001af2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001af6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001af8:	4b0b      	ldr	r3, [pc, #44]	@ (8001b28 <HAL_Init+0x40>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4a0a      	ldr	r2, [pc, #40]	@ (8001b28 <HAL_Init+0x40>)
 8001afe:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001b02:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b04:	4b08      	ldr	r3, [pc, #32]	@ (8001b28 <HAL_Init+0x40>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4a07      	ldr	r2, [pc, #28]	@ (8001b28 <HAL_Init+0x40>)
 8001b0a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b0e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b10:	2003      	movs	r0, #3
 8001b12:	f000 f931 	bl	8001d78 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b16:	200f      	movs	r0, #15
 8001b18:	f000 f808 	bl	8001b2c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b1c:	f7ff fb2e 	bl	800117c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b20:	2300      	movs	r3, #0
}
 8001b22:	4618      	mov	r0, r3
 8001b24:	bd80      	pop	{r7, pc}
 8001b26:	bf00      	nop
 8001b28:	40023c00 	.word	0x40023c00

08001b2c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b082      	sub	sp, #8
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b34:	4b12      	ldr	r3, [pc, #72]	@ (8001b80 <HAL_InitTick+0x54>)
 8001b36:	681a      	ldr	r2, [r3, #0]
 8001b38:	4b12      	ldr	r3, [pc, #72]	@ (8001b84 <HAL_InitTick+0x58>)
 8001b3a:	781b      	ldrb	r3, [r3, #0]
 8001b3c:	4619      	mov	r1, r3
 8001b3e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b42:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b46:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f000 f93b 	bl	8001dc6 <HAL_SYSTICK_Config>
 8001b50:	4603      	mov	r3, r0
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d001      	beq.n	8001b5a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b56:	2301      	movs	r3, #1
 8001b58:	e00e      	b.n	8001b78 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	2b0f      	cmp	r3, #15
 8001b5e:	d80a      	bhi.n	8001b76 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b60:	2200      	movs	r2, #0
 8001b62:	6879      	ldr	r1, [r7, #4]
 8001b64:	f04f 30ff 	mov.w	r0, #4294967295
 8001b68:	f000 f911 	bl	8001d8e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b6c:	4a06      	ldr	r2, [pc, #24]	@ (8001b88 <HAL_InitTick+0x5c>)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b72:	2300      	movs	r3, #0
 8001b74:	e000      	b.n	8001b78 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b76:	2301      	movs	r3, #1
}
 8001b78:	4618      	mov	r0, r3
 8001b7a:	3708      	adds	r7, #8
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bd80      	pop	{r7, pc}
 8001b80:	20000010 	.word	0x20000010
 8001b84:	20000018 	.word	0x20000018
 8001b88:	20000014 	.word	0x20000014

08001b8c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b90:	4b06      	ldr	r3, [pc, #24]	@ (8001bac <HAL_IncTick+0x20>)
 8001b92:	781b      	ldrb	r3, [r3, #0]
 8001b94:	461a      	mov	r2, r3
 8001b96:	4b06      	ldr	r3, [pc, #24]	@ (8001bb0 <HAL_IncTick+0x24>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	4413      	add	r3, r2
 8001b9c:	4a04      	ldr	r2, [pc, #16]	@ (8001bb0 <HAL_IncTick+0x24>)
 8001b9e:	6013      	str	r3, [r2, #0]
}
 8001ba0:	bf00      	nop
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba8:	4770      	bx	lr
 8001baa:	bf00      	nop
 8001bac:	20000018 	.word	0x20000018
 8001bb0:	200005f0 	.word	0x200005f0

08001bb4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	af00      	add	r7, sp, #0
  return uwTick;
 8001bb8:	4b03      	ldr	r3, [pc, #12]	@ (8001bc8 <HAL_GetTick+0x14>)
 8001bba:	681b      	ldr	r3, [r3, #0]
}
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc4:	4770      	bx	lr
 8001bc6:	bf00      	nop
 8001bc8:	200005f0 	.word	0x200005f0

08001bcc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b084      	sub	sp, #16
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001bd4:	f7ff ffee 	bl	8001bb4 <HAL_GetTick>
 8001bd8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001be4:	d005      	beq.n	8001bf2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001be6:	4b0a      	ldr	r3, [pc, #40]	@ (8001c10 <HAL_Delay+0x44>)
 8001be8:	781b      	ldrb	r3, [r3, #0]
 8001bea:	461a      	mov	r2, r3
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	4413      	add	r3, r2
 8001bf0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001bf2:	bf00      	nop
 8001bf4:	f7ff ffde 	bl	8001bb4 <HAL_GetTick>
 8001bf8:	4602      	mov	r2, r0
 8001bfa:	68bb      	ldr	r3, [r7, #8]
 8001bfc:	1ad3      	subs	r3, r2, r3
 8001bfe:	68fa      	ldr	r2, [r7, #12]
 8001c00:	429a      	cmp	r2, r3
 8001c02:	d8f7      	bhi.n	8001bf4 <HAL_Delay+0x28>
  {
  }
}
 8001c04:	bf00      	nop
 8001c06:	bf00      	nop
 8001c08:	3710      	adds	r7, #16
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}
 8001c0e:	bf00      	nop
 8001c10:	20000018 	.word	0x20000018

08001c14 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c14:	b480      	push	{r7}
 8001c16:	b085      	sub	sp, #20
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	f003 0307 	and.w	r3, r3, #7
 8001c22:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c24:	4b0c      	ldr	r3, [pc, #48]	@ (8001c58 <__NVIC_SetPriorityGrouping+0x44>)
 8001c26:	68db      	ldr	r3, [r3, #12]
 8001c28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c2a:	68ba      	ldr	r2, [r7, #8]
 8001c2c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001c30:	4013      	ands	r3, r2
 8001c32:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c38:	68bb      	ldr	r3, [r7, #8]
 8001c3a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c3c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001c40:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c46:	4a04      	ldr	r2, [pc, #16]	@ (8001c58 <__NVIC_SetPriorityGrouping+0x44>)
 8001c48:	68bb      	ldr	r3, [r7, #8]
 8001c4a:	60d3      	str	r3, [r2, #12]
}
 8001c4c:	bf00      	nop
 8001c4e:	3714      	adds	r7, #20
 8001c50:	46bd      	mov	sp, r7
 8001c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c56:	4770      	bx	lr
 8001c58:	e000ed00 	.word	0xe000ed00

08001c5c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c60:	4b04      	ldr	r3, [pc, #16]	@ (8001c74 <__NVIC_GetPriorityGrouping+0x18>)
 8001c62:	68db      	ldr	r3, [r3, #12]
 8001c64:	0a1b      	lsrs	r3, r3, #8
 8001c66:	f003 0307 	and.w	r3, r3, #7
}
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c72:	4770      	bx	lr
 8001c74:	e000ed00 	.word	0xe000ed00

08001c78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	b083      	sub	sp, #12
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	4603      	mov	r3, r0
 8001c80:	6039      	str	r1, [r7, #0]
 8001c82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	db0a      	blt.n	8001ca2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	b2da      	uxtb	r2, r3
 8001c90:	490c      	ldr	r1, [pc, #48]	@ (8001cc4 <__NVIC_SetPriority+0x4c>)
 8001c92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c96:	0112      	lsls	r2, r2, #4
 8001c98:	b2d2      	uxtb	r2, r2
 8001c9a:	440b      	add	r3, r1
 8001c9c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ca0:	e00a      	b.n	8001cb8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	b2da      	uxtb	r2, r3
 8001ca6:	4908      	ldr	r1, [pc, #32]	@ (8001cc8 <__NVIC_SetPriority+0x50>)
 8001ca8:	79fb      	ldrb	r3, [r7, #7]
 8001caa:	f003 030f 	and.w	r3, r3, #15
 8001cae:	3b04      	subs	r3, #4
 8001cb0:	0112      	lsls	r2, r2, #4
 8001cb2:	b2d2      	uxtb	r2, r2
 8001cb4:	440b      	add	r3, r1
 8001cb6:	761a      	strb	r2, [r3, #24]
}
 8001cb8:	bf00      	nop
 8001cba:	370c      	adds	r7, #12
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc2:	4770      	bx	lr
 8001cc4:	e000e100 	.word	0xe000e100
 8001cc8:	e000ed00 	.word	0xe000ed00

08001ccc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	b089      	sub	sp, #36	@ 0x24
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	60f8      	str	r0, [r7, #12]
 8001cd4:	60b9      	str	r1, [r7, #8]
 8001cd6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	f003 0307 	and.w	r3, r3, #7
 8001cde:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ce0:	69fb      	ldr	r3, [r7, #28]
 8001ce2:	f1c3 0307 	rsb	r3, r3, #7
 8001ce6:	2b04      	cmp	r3, #4
 8001ce8:	bf28      	it	cs
 8001cea:	2304      	movcs	r3, #4
 8001cec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cee:	69fb      	ldr	r3, [r7, #28]
 8001cf0:	3304      	adds	r3, #4
 8001cf2:	2b06      	cmp	r3, #6
 8001cf4:	d902      	bls.n	8001cfc <NVIC_EncodePriority+0x30>
 8001cf6:	69fb      	ldr	r3, [r7, #28]
 8001cf8:	3b03      	subs	r3, #3
 8001cfa:	e000      	b.n	8001cfe <NVIC_EncodePriority+0x32>
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d00:	f04f 32ff 	mov.w	r2, #4294967295
 8001d04:	69bb      	ldr	r3, [r7, #24]
 8001d06:	fa02 f303 	lsl.w	r3, r2, r3
 8001d0a:	43da      	mvns	r2, r3
 8001d0c:	68bb      	ldr	r3, [r7, #8]
 8001d0e:	401a      	ands	r2, r3
 8001d10:	697b      	ldr	r3, [r7, #20]
 8001d12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d14:	f04f 31ff 	mov.w	r1, #4294967295
 8001d18:	697b      	ldr	r3, [r7, #20]
 8001d1a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d1e:	43d9      	mvns	r1, r3
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d24:	4313      	orrs	r3, r2
         );
}
 8001d26:	4618      	mov	r0, r3
 8001d28:	3724      	adds	r7, #36	@ 0x24
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d30:	4770      	bx	lr
	...

08001d34 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b082      	sub	sp, #8
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	3b01      	subs	r3, #1
 8001d40:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001d44:	d301      	bcc.n	8001d4a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d46:	2301      	movs	r3, #1
 8001d48:	e00f      	b.n	8001d6a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d4a:	4a0a      	ldr	r2, [pc, #40]	@ (8001d74 <SysTick_Config+0x40>)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	3b01      	subs	r3, #1
 8001d50:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d52:	210f      	movs	r1, #15
 8001d54:	f04f 30ff 	mov.w	r0, #4294967295
 8001d58:	f7ff ff8e 	bl	8001c78 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d5c:	4b05      	ldr	r3, [pc, #20]	@ (8001d74 <SysTick_Config+0x40>)
 8001d5e:	2200      	movs	r2, #0
 8001d60:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d62:	4b04      	ldr	r3, [pc, #16]	@ (8001d74 <SysTick_Config+0x40>)
 8001d64:	2207      	movs	r2, #7
 8001d66:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d68:	2300      	movs	r3, #0
}
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	3708      	adds	r7, #8
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}
 8001d72:	bf00      	nop
 8001d74:	e000e010 	.word	0xe000e010

08001d78 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b082      	sub	sp, #8
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d80:	6878      	ldr	r0, [r7, #4]
 8001d82:	f7ff ff47 	bl	8001c14 <__NVIC_SetPriorityGrouping>
}
 8001d86:	bf00      	nop
 8001d88:	3708      	adds	r7, #8
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}

08001d8e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d8e:	b580      	push	{r7, lr}
 8001d90:	b086      	sub	sp, #24
 8001d92:	af00      	add	r7, sp, #0
 8001d94:	4603      	mov	r3, r0
 8001d96:	60b9      	str	r1, [r7, #8]
 8001d98:	607a      	str	r2, [r7, #4]
 8001d9a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001da0:	f7ff ff5c 	bl	8001c5c <__NVIC_GetPriorityGrouping>
 8001da4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001da6:	687a      	ldr	r2, [r7, #4]
 8001da8:	68b9      	ldr	r1, [r7, #8]
 8001daa:	6978      	ldr	r0, [r7, #20]
 8001dac:	f7ff ff8e 	bl	8001ccc <NVIC_EncodePriority>
 8001db0:	4602      	mov	r2, r0
 8001db2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001db6:	4611      	mov	r1, r2
 8001db8:	4618      	mov	r0, r3
 8001dba:	f7ff ff5d 	bl	8001c78 <__NVIC_SetPriority>
}
 8001dbe:	bf00      	nop
 8001dc0:	3718      	adds	r7, #24
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}

08001dc6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001dc6:	b580      	push	{r7, lr}
 8001dc8:	b082      	sub	sp, #8
 8001dca:	af00      	add	r7, sp, #0
 8001dcc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001dce:	6878      	ldr	r0, [r7, #4]
 8001dd0:	f7ff ffb0 	bl	8001d34 <SysTick_Config>
 8001dd4:	4603      	mov	r3, r0
}
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	3708      	adds	r7, #8
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd80      	pop	{r7, pc}
	...

08001de0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001de0:	b480      	push	{r7}
 8001de2:	b089      	sub	sp, #36	@ 0x24
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
 8001de8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001dea:	2300      	movs	r3, #0
 8001dec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001dee:	2300      	movs	r3, #0
 8001df0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001df2:	2300      	movs	r3, #0
 8001df4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001df6:	2300      	movs	r3, #0
 8001df8:	61fb      	str	r3, [r7, #28]
 8001dfa:	e177      	b.n	80020ec <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001dfc:	2201      	movs	r2, #1
 8001dfe:	69fb      	ldr	r3, [r7, #28]
 8001e00:	fa02 f303 	lsl.w	r3, r2, r3
 8001e04:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	697a      	ldr	r2, [r7, #20]
 8001e0c:	4013      	ands	r3, r2
 8001e0e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001e10:	693a      	ldr	r2, [r7, #16]
 8001e12:	697b      	ldr	r3, [r7, #20]
 8001e14:	429a      	cmp	r2, r3
 8001e16:	f040 8166 	bne.w	80020e6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	685b      	ldr	r3, [r3, #4]
 8001e1e:	f003 0303 	and.w	r3, r3, #3
 8001e22:	2b01      	cmp	r3, #1
 8001e24:	d005      	beq.n	8001e32 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e2e:	2b02      	cmp	r3, #2
 8001e30:	d130      	bne.n	8001e94 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	689b      	ldr	r3, [r3, #8]
 8001e36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001e38:	69fb      	ldr	r3, [r7, #28]
 8001e3a:	005b      	lsls	r3, r3, #1
 8001e3c:	2203      	movs	r2, #3
 8001e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e42:	43db      	mvns	r3, r3
 8001e44:	69ba      	ldr	r2, [r7, #24]
 8001e46:	4013      	ands	r3, r2
 8001e48:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	68da      	ldr	r2, [r3, #12]
 8001e4e:	69fb      	ldr	r3, [r7, #28]
 8001e50:	005b      	lsls	r3, r3, #1
 8001e52:	fa02 f303 	lsl.w	r3, r2, r3
 8001e56:	69ba      	ldr	r2, [r7, #24]
 8001e58:	4313      	orrs	r3, r2
 8001e5a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	69ba      	ldr	r2, [r7, #24]
 8001e60:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e68:	2201      	movs	r2, #1
 8001e6a:	69fb      	ldr	r3, [r7, #28]
 8001e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e70:	43db      	mvns	r3, r3
 8001e72:	69ba      	ldr	r2, [r7, #24]
 8001e74:	4013      	ands	r3, r2
 8001e76:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	091b      	lsrs	r3, r3, #4
 8001e7e:	f003 0201 	and.w	r2, r3, #1
 8001e82:	69fb      	ldr	r3, [r7, #28]
 8001e84:	fa02 f303 	lsl.w	r3, r2, r3
 8001e88:	69ba      	ldr	r2, [r7, #24]
 8001e8a:	4313      	orrs	r3, r2
 8001e8c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	69ba      	ldr	r2, [r7, #24]
 8001e92:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	f003 0303 	and.w	r3, r3, #3
 8001e9c:	2b03      	cmp	r3, #3
 8001e9e:	d017      	beq.n	8001ed0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	68db      	ldr	r3, [r3, #12]
 8001ea4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001ea6:	69fb      	ldr	r3, [r7, #28]
 8001ea8:	005b      	lsls	r3, r3, #1
 8001eaa:	2203      	movs	r2, #3
 8001eac:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb0:	43db      	mvns	r3, r3
 8001eb2:	69ba      	ldr	r2, [r7, #24]
 8001eb4:	4013      	ands	r3, r2
 8001eb6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	689a      	ldr	r2, [r3, #8]
 8001ebc:	69fb      	ldr	r3, [r7, #28]
 8001ebe:	005b      	lsls	r3, r3, #1
 8001ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec4:	69ba      	ldr	r2, [r7, #24]
 8001ec6:	4313      	orrs	r3, r2
 8001ec8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	69ba      	ldr	r2, [r7, #24]
 8001ece:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	f003 0303 	and.w	r3, r3, #3
 8001ed8:	2b02      	cmp	r3, #2
 8001eda:	d123      	bne.n	8001f24 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001edc:	69fb      	ldr	r3, [r7, #28]
 8001ede:	08da      	lsrs	r2, r3, #3
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	3208      	adds	r2, #8
 8001ee4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ee8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001eea:	69fb      	ldr	r3, [r7, #28]
 8001eec:	f003 0307 	and.w	r3, r3, #7
 8001ef0:	009b      	lsls	r3, r3, #2
 8001ef2:	220f      	movs	r2, #15
 8001ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef8:	43db      	mvns	r3, r3
 8001efa:	69ba      	ldr	r2, [r7, #24]
 8001efc:	4013      	ands	r3, r2
 8001efe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	691a      	ldr	r2, [r3, #16]
 8001f04:	69fb      	ldr	r3, [r7, #28]
 8001f06:	f003 0307 	and.w	r3, r3, #7
 8001f0a:	009b      	lsls	r3, r3, #2
 8001f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f10:	69ba      	ldr	r2, [r7, #24]
 8001f12:	4313      	orrs	r3, r2
 8001f14:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001f16:	69fb      	ldr	r3, [r7, #28]
 8001f18:	08da      	lsrs	r2, r3, #3
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	3208      	adds	r2, #8
 8001f1e:	69b9      	ldr	r1, [r7, #24]
 8001f20:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001f2a:	69fb      	ldr	r3, [r7, #28]
 8001f2c:	005b      	lsls	r3, r3, #1
 8001f2e:	2203      	movs	r2, #3
 8001f30:	fa02 f303 	lsl.w	r3, r2, r3
 8001f34:	43db      	mvns	r3, r3
 8001f36:	69ba      	ldr	r2, [r7, #24]
 8001f38:	4013      	ands	r3, r2
 8001f3a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	f003 0203 	and.w	r2, r3, #3
 8001f44:	69fb      	ldr	r3, [r7, #28]
 8001f46:	005b      	lsls	r3, r3, #1
 8001f48:	fa02 f303 	lsl.w	r3, r2, r3
 8001f4c:	69ba      	ldr	r2, [r7, #24]
 8001f4e:	4313      	orrs	r3, r2
 8001f50:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	69ba      	ldr	r2, [r7, #24]
 8001f56:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	f000 80c0 	beq.w	80020e6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f66:	2300      	movs	r3, #0
 8001f68:	60fb      	str	r3, [r7, #12]
 8001f6a:	4b66      	ldr	r3, [pc, #408]	@ (8002104 <HAL_GPIO_Init+0x324>)
 8001f6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f6e:	4a65      	ldr	r2, [pc, #404]	@ (8002104 <HAL_GPIO_Init+0x324>)
 8001f70:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001f74:	6453      	str	r3, [r2, #68]	@ 0x44
 8001f76:	4b63      	ldr	r3, [pc, #396]	@ (8002104 <HAL_GPIO_Init+0x324>)
 8001f78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f7a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001f7e:	60fb      	str	r3, [r7, #12]
 8001f80:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001f82:	4a61      	ldr	r2, [pc, #388]	@ (8002108 <HAL_GPIO_Init+0x328>)
 8001f84:	69fb      	ldr	r3, [r7, #28]
 8001f86:	089b      	lsrs	r3, r3, #2
 8001f88:	3302      	adds	r3, #2
 8001f8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001f90:	69fb      	ldr	r3, [r7, #28]
 8001f92:	f003 0303 	and.w	r3, r3, #3
 8001f96:	009b      	lsls	r3, r3, #2
 8001f98:	220f      	movs	r2, #15
 8001f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f9e:	43db      	mvns	r3, r3
 8001fa0:	69ba      	ldr	r2, [r7, #24]
 8001fa2:	4013      	ands	r3, r2
 8001fa4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	4a58      	ldr	r2, [pc, #352]	@ (800210c <HAL_GPIO_Init+0x32c>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d037      	beq.n	800201e <HAL_GPIO_Init+0x23e>
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	4a57      	ldr	r2, [pc, #348]	@ (8002110 <HAL_GPIO_Init+0x330>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d031      	beq.n	800201a <HAL_GPIO_Init+0x23a>
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	4a56      	ldr	r2, [pc, #344]	@ (8002114 <HAL_GPIO_Init+0x334>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d02b      	beq.n	8002016 <HAL_GPIO_Init+0x236>
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	4a55      	ldr	r2, [pc, #340]	@ (8002118 <HAL_GPIO_Init+0x338>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d025      	beq.n	8002012 <HAL_GPIO_Init+0x232>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	4a54      	ldr	r2, [pc, #336]	@ (800211c <HAL_GPIO_Init+0x33c>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d01f      	beq.n	800200e <HAL_GPIO_Init+0x22e>
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	4a53      	ldr	r2, [pc, #332]	@ (8002120 <HAL_GPIO_Init+0x340>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d019      	beq.n	800200a <HAL_GPIO_Init+0x22a>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	4a52      	ldr	r2, [pc, #328]	@ (8002124 <HAL_GPIO_Init+0x344>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d013      	beq.n	8002006 <HAL_GPIO_Init+0x226>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	4a51      	ldr	r2, [pc, #324]	@ (8002128 <HAL_GPIO_Init+0x348>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d00d      	beq.n	8002002 <HAL_GPIO_Init+0x222>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	4a50      	ldr	r2, [pc, #320]	@ (800212c <HAL_GPIO_Init+0x34c>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d007      	beq.n	8001ffe <HAL_GPIO_Init+0x21e>
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	4a4f      	ldr	r2, [pc, #316]	@ (8002130 <HAL_GPIO_Init+0x350>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d101      	bne.n	8001ffa <HAL_GPIO_Init+0x21a>
 8001ff6:	2309      	movs	r3, #9
 8001ff8:	e012      	b.n	8002020 <HAL_GPIO_Init+0x240>
 8001ffa:	230a      	movs	r3, #10
 8001ffc:	e010      	b.n	8002020 <HAL_GPIO_Init+0x240>
 8001ffe:	2308      	movs	r3, #8
 8002000:	e00e      	b.n	8002020 <HAL_GPIO_Init+0x240>
 8002002:	2307      	movs	r3, #7
 8002004:	e00c      	b.n	8002020 <HAL_GPIO_Init+0x240>
 8002006:	2306      	movs	r3, #6
 8002008:	e00a      	b.n	8002020 <HAL_GPIO_Init+0x240>
 800200a:	2305      	movs	r3, #5
 800200c:	e008      	b.n	8002020 <HAL_GPIO_Init+0x240>
 800200e:	2304      	movs	r3, #4
 8002010:	e006      	b.n	8002020 <HAL_GPIO_Init+0x240>
 8002012:	2303      	movs	r3, #3
 8002014:	e004      	b.n	8002020 <HAL_GPIO_Init+0x240>
 8002016:	2302      	movs	r3, #2
 8002018:	e002      	b.n	8002020 <HAL_GPIO_Init+0x240>
 800201a:	2301      	movs	r3, #1
 800201c:	e000      	b.n	8002020 <HAL_GPIO_Init+0x240>
 800201e:	2300      	movs	r3, #0
 8002020:	69fa      	ldr	r2, [r7, #28]
 8002022:	f002 0203 	and.w	r2, r2, #3
 8002026:	0092      	lsls	r2, r2, #2
 8002028:	4093      	lsls	r3, r2
 800202a:	69ba      	ldr	r2, [r7, #24]
 800202c:	4313      	orrs	r3, r2
 800202e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002030:	4935      	ldr	r1, [pc, #212]	@ (8002108 <HAL_GPIO_Init+0x328>)
 8002032:	69fb      	ldr	r3, [r7, #28]
 8002034:	089b      	lsrs	r3, r3, #2
 8002036:	3302      	adds	r3, #2
 8002038:	69ba      	ldr	r2, [r7, #24]
 800203a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800203e:	4b3d      	ldr	r3, [pc, #244]	@ (8002134 <HAL_GPIO_Init+0x354>)
 8002040:	689b      	ldr	r3, [r3, #8]
 8002042:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002044:	693b      	ldr	r3, [r7, #16]
 8002046:	43db      	mvns	r3, r3
 8002048:	69ba      	ldr	r2, [r7, #24]
 800204a:	4013      	ands	r3, r2
 800204c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002056:	2b00      	cmp	r3, #0
 8002058:	d003      	beq.n	8002062 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800205a:	69ba      	ldr	r2, [r7, #24]
 800205c:	693b      	ldr	r3, [r7, #16]
 800205e:	4313      	orrs	r3, r2
 8002060:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002062:	4a34      	ldr	r2, [pc, #208]	@ (8002134 <HAL_GPIO_Init+0x354>)
 8002064:	69bb      	ldr	r3, [r7, #24]
 8002066:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002068:	4b32      	ldr	r3, [pc, #200]	@ (8002134 <HAL_GPIO_Init+0x354>)
 800206a:	68db      	ldr	r3, [r3, #12]
 800206c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800206e:	693b      	ldr	r3, [r7, #16]
 8002070:	43db      	mvns	r3, r3
 8002072:	69ba      	ldr	r2, [r7, #24]
 8002074:	4013      	ands	r3, r2
 8002076:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002080:	2b00      	cmp	r3, #0
 8002082:	d003      	beq.n	800208c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002084:	69ba      	ldr	r2, [r7, #24]
 8002086:	693b      	ldr	r3, [r7, #16]
 8002088:	4313      	orrs	r3, r2
 800208a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800208c:	4a29      	ldr	r2, [pc, #164]	@ (8002134 <HAL_GPIO_Init+0x354>)
 800208e:	69bb      	ldr	r3, [r7, #24]
 8002090:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002092:	4b28      	ldr	r3, [pc, #160]	@ (8002134 <HAL_GPIO_Init+0x354>)
 8002094:	685b      	ldr	r3, [r3, #4]
 8002096:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002098:	693b      	ldr	r3, [r7, #16]
 800209a:	43db      	mvns	r3, r3
 800209c:	69ba      	ldr	r2, [r7, #24]
 800209e:	4013      	ands	r3, r2
 80020a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d003      	beq.n	80020b6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80020ae:	69ba      	ldr	r2, [r7, #24]
 80020b0:	693b      	ldr	r3, [r7, #16]
 80020b2:	4313      	orrs	r3, r2
 80020b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80020b6:	4a1f      	ldr	r2, [pc, #124]	@ (8002134 <HAL_GPIO_Init+0x354>)
 80020b8:	69bb      	ldr	r3, [r7, #24]
 80020ba:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80020bc:	4b1d      	ldr	r3, [pc, #116]	@ (8002134 <HAL_GPIO_Init+0x354>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020c2:	693b      	ldr	r3, [r7, #16]
 80020c4:	43db      	mvns	r3, r3
 80020c6:	69ba      	ldr	r2, [r7, #24]
 80020c8:	4013      	ands	r3, r2
 80020ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d003      	beq.n	80020e0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80020d8:	69ba      	ldr	r2, [r7, #24]
 80020da:	693b      	ldr	r3, [r7, #16]
 80020dc:	4313      	orrs	r3, r2
 80020de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80020e0:	4a14      	ldr	r2, [pc, #80]	@ (8002134 <HAL_GPIO_Init+0x354>)
 80020e2:	69bb      	ldr	r3, [r7, #24]
 80020e4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80020e6:	69fb      	ldr	r3, [r7, #28]
 80020e8:	3301      	adds	r3, #1
 80020ea:	61fb      	str	r3, [r7, #28]
 80020ec:	69fb      	ldr	r3, [r7, #28]
 80020ee:	2b0f      	cmp	r3, #15
 80020f0:	f67f ae84 	bls.w	8001dfc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80020f4:	bf00      	nop
 80020f6:	bf00      	nop
 80020f8:	3724      	adds	r7, #36	@ 0x24
 80020fa:	46bd      	mov	sp, r7
 80020fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002100:	4770      	bx	lr
 8002102:	bf00      	nop
 8002104:	40023800 	.word	0x40023800
 8002108:	40013800 	.word	0x40013800
 800210c:	40020000 	.word	0x40020000
 8002110:	40020400 	.word	0x40020400
 8002114:	40020800 	.word	0x40020800
 8002118:	40020c00 	.word	0x40020c00
 800211c:	40021000 	.word	0x40021000
 8002120:	40021400 	.word	0x40021400
 8002124:	40021800 	.word	0x40021800
 8002128:	40021c00 	.word	0x40021c00
 800212c:	40022000 	.word	0x40022000
 8002130:	40022400 	.word	0x40022400
 8002134:	40013c00 	.word	0x40013c00

08002138 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002138:	b480      	push	{r7}
 800213a:	b083      	sub	sp, #12
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
 8002140:	460b      	mov	r3, r1
 8002142:	807b      	strh	r3, [r7, #2]
 8002144:	4613      	mov	r3, r2
 8002146:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002148:	787b      	ldrb	r3, [r7, #1]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d003      	beq.n	8002156 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800214e:	887a      	ldrh	r2, [r7, #2]
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002154:	e003      	b.n	800215e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002156:	887b      	ldrh	r3, [r7, #2]
 8002158:	041a      	lsls	r2, r3, #16
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	619a      	str	r2, [r3, #24]
}
 800215e:	bf00      	nop
 8002160:	370c      	adds	r7, #12
 8002162:	46bd      	mov	sp, r7
 8002164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002168:	4770      	bx	lr
	...

0800216c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b084      	sub	sp, #16
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2b00      	cmp	r3, #0
 8002178:	d101      	bne.n	800217e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800217a:	2301      	movs	r3, #1
 800217c:	e12b      	b.n	80023d6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002184:	b2db      	uxtb	r3, r3
 8002186:	2b00      	cmp	r3, #0
 8002188:	d106      	bne.n	8002198 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	2200      	movs	r2, #0
 800218e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002192:	6878      	ldr	r0, [r7, #4]
 8002194:	f7ff f81a 	bl	80011cc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2224      	movs	r2, #36	@ 0x24
 800219c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	681a      	ldr	r2, [r3, #0]
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f022 0201 	bic.w	r2, r2, #1
 80021ae:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	681a      	ldr	r2, [r3, #0]
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80021be:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	681a      	ldr	r2, [r3, #0]
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80021ce:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80021d0:	f001 fc62 	bl	8003a98 <HAL_RCC_GetPCLK1Freq>
 80021d4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	685b      	ldr	r3, [r3, #4]
 80021da:	4a81      	ldr	r2, [pc, #516]	@ (80023e0 <HAL_I2C_Init+0x274>)
 80021dc:	4293      	cmp	r3, r2
 80021de:	d807      	bhi.n	80021f0 <HAL_I2C_Init+0x84>
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	4a80      	ldr	r2, [pc, #512]	@ (80023e4 <HAL_I2C_Init+0x278>)
 80021e4:	4293      	cmp	r3, r2
 80021e6:	bf94      	ite	ls
 80021e8:	2301      	movls	r3, #1
 80021ea:	2300      	movhi	r3, #0
 80021ec:	b2db      	uxtb	r3, r3
 80021ee:	e006      	b.n	80021fe <HAL_I2C_Init+0x92>
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	4a7d      	ldr	r2, [pc, #500]	@ (80023e8 <HAL_I2C_Init+0x27c>)
 80021f4:	4293      	cmp	r3, r2
 80021f6:	bf94      	ite	ls
 80021f8:	2301      	movls	r3, #1
 80021fa:	2300      	movhi	r3, #0
 80021fc:	b2db      	uxtb	r3, r3
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d001      	beq.n	8002206 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002202:	2301      	movs	r3, #1
 8002204:	e0e7      	b.n	80023d6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	4a78      	ldr	r2, [pc, #480]	@ (80023ec <HAL_I2C_Init+0x280>)
 800220a:	fba2 2303 	umull	r2, r3, r2, r3
 800220e:	0c9b      	lsrs	r3, r3, #18
 8002210:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	68ba      	ldr	r2, [r7, #8]
 8002222:	430a      	orrs	r2, r1
 8002224:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	6a1b      	ldr	r3, [r3, #32]
 800222c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	4a6a      	ldr	r2, [pc, #424]	@ (80023e0 <HAL_I2C_Init+0x274>)
 8002236:	4293      	cmp	r3, r2
 8002238:	d802      	bhi.n	8002240 <HAL_I2C_Init+0xd4>
 800223a:	68bb      	ldr	r3, [r7, #8]
 800223c:	3301      	adds	r3, #1
 800223e:	e009      	b.n	8002254 <HAL_I2C_Init+0xe8>
 8002240:	68bb      	ldr	r3, [r7, #8]
 8002242:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002246:	fb02 f303 	mul.w	r3, r2, r3
 800224a:	4a69      	ldr	r2, [pc, #420]	@ (80023f0 <HAL_I2C_Init+0x284>)
 800224c:	fba2 2303 	umull	r2, r3, r2, r3
 8002250:	099b      	lsrs	r3, r3, #6
 8002252:	3301      	adds	r3, #1
 8002254:	687a      	ldr	r2, [r7, #4]
 8002256:	6812      	ldr	r2, [r2, #0]
 8002258:	430b      	orrs	r3, r1
 800225a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	69db      	ldr	r3, [r3, #28]
 8002262:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002266:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	495c      	ldr	r1, [pc, #368]	@ (80023e0 <HAL_I2C_Init+0x274>)
 8002270:	428b      	cmp	r3, r1
 8002272:	d819      	bhi.n	80022a8 <HAL_I2C_Init+0x13c>
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	1e59      	subs	r1, r3, #1
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	005b      	lsls	r3, r3, #1
 800227e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002282:	1c59      	adds	r1, r3, #1
 8002284:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002288:	400b      	ands	r3, r1
 800228a:	2b00      	cmp	r3, #0
 800228c:	d00a      	beq.n	80022a4 <HAL_I2C_Init+0x138>
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	1e59      	subs	r1, r3, #1
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	005b      	lsls	r3, r3, #1
 8002298:	fbb1 f3f3 	udiv	r3, r1, r3
 800229c:	3301      	adds	r3, #1
 800229e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022a2:	e051      	b.n	8002348 <HAL_I2C_Init+0x1dc>
 80022a4:	2304      	movs	r3, #4
 80022a6:	e04f      	b.n	8002348 <HAL_I2C_Init+0x1dc>
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	689b      	ldr	r3, [r3, #8]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d111      	bne.n	80022d4 <HAL_I2C_Init+0x168>
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	1e58      	subs	r0, r3, #1
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6859      	ldr	r1, [r3, #4]
 80022b8:	460b      	mov	r3, r1
 80022ba:	005b      	lsls	r3, r3, #1
 80022bc:	440b      	add	r3, r1
 80022be:	fbb0 f3f3 	udiv	r3, r0, r3
 80022c2:	3301      	adds	r3, #1
 80022c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	bf0c      	ite	eq
 80022cc:	2301      	moveq	r3, #1
 80022ce:	2300      	movne	r3, #0
 80022d0:	b2db      	uxtb	r3, r3
 80022d2:	e012      	b.n	80022fa <HAL_I2C_Init+0x18e>
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	1e58      	subs	r0, r3, #1
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6859      	ldr	r1, [r3, #4]
 80022dc:	460b      	mov	r3, r1
 80022de:	009b      	lsls	r3, r3, #2
 80022e0:	440b      	add	r3, r1
 80022e2:	0099      	lsls	r1, r3, #2
 80022e4:	440b      	add	r3, r1
 80022e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80022ea:	3301      	adds	r3, #1
 80022ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	bf0c      	ite	eq
 80022f4:	2301      	moveq	r3, #1
 80022f6:	2300      	movne	r3, #0
 80022f8:	b2db      	uxtb	r3, r3
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d001      	beq.n	8002302 <HAL_I2C_Init+0x196>
 80022fe:	2301      	movs	r3, #1
 8002300:	e022      	b.n	8002348 <HAL_I2C_Init+0x1dc>
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	689b      	ldr	r3, [r3, #8]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d10e      	bne.n	8002328 <HAL_I2C_Init+0x1bc>
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	1e58      	subs	r0, r3, #1
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6859      	ldr	r1, [r3, #4]
 8002312:	460b      	mov	r3, r1
 8002314:	005b      	lsls	r3, r3, #1
 8002316:	440b      	add	r3, r1
 8002318:	fbb0 f3f3 	udiv	r3, r0, r3
 800231c:	3301      	adds	r3, #1
 800231e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002322:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002326:	e00f      	b.n	8002348 <HAL_I2C_Init+0x1dc>
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	1e58      	subs	r0, r3, #1
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6859      	ldr	r1, [r3, #4]
 8002330:	460b      	mov	r3, r1
 8002332:	009b      	lsls	r3, r3, #2
 8002334:	440b      	add	r3, r1
 8002336:	0099      	lsls	r1, r3, #2
 8002338:	440b      	add	r3, r1
 800233a:	fbb0 f3f3 	udiv	r3, r0, r3
 800233e:	3301      	adds	r3, #1
 8002340:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002344:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002348:	6879      	ldr	r1, [r7, #4]
 800234a:	6809      	ldr	r1, [r1, #0]
 800234c:	4313      	orrs	r3, r2
 800234e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	69da      	ldr	r2, [r3, #28]
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6a1b      	ldr	r3, [r3, #32]
 8002362:	431a      	orrs	r2, r3
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	430a      	orrs	r2, r1
 800236a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	689b      	ldr	r3, [r3, #8]
 8002372:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002376:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800237a:	687a      	ldr	r2, [r7, #4]
 800237c:	6911      	ldr	r1, [r2, #16]
 800237e:	687a      	ldr	r2, [r7, #4]
 8002380:	68d2      	ldr	r2, [r2, #12]
 8002382:	4311      	orrs	r1, r2
 8002384:	687a      	ldr	r2, [r7, #4]
 8002386:	6812      	ldr	r2, [r2, #0]
 8002388:	430b      	orrs	r3, r1
 800238a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	68db      	ldr	r3, [r3, #12]
 8002392:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	695a      	ldr	r2, [r3, #20]
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	699b      	ldr	r3, [r3, #24]
 800239e:	431a      	orrs	r2, r3
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	430a      	orrs	r2, r1
 80023a6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	681a      	ldr	r2, [r3, #0]
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f042 0201 	orr.w	r2, r2, #1
 80023b6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2200      	movs	r2, #0
 80023bc:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	2220      	movs	r2, #32
 80023c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	2200      	movs	r2, #0
 80023ca:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2200      	movs	r2, #0
 80023d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80023d4:	2300      	movs	r3, #0
}
 80023d6:	4618      	mov	r0, r3
 80023d8:	3710      	adds	r7, #16
 80023da:	46bd      	mov	sp, r7
 80023dc:	bd80      	pop	{r7, pc}
 80023de:	bf00      	nop
 80023e0:	000186a0 	.word	0x000186a0
 80023e4:	001e847f 	.word	0x001e847f
 80023e8:	003d08ff 	.word	0x003d08ff
 80023ec:	431bde83 	.word	0x431bde83
 80023f0:	10624dd3 	.word	0x10624dd3

080023f4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b088      	sub	sp, #32
 80023f8:	af02      	add	r7, sp, #8
 80023fa:	60f8      	str	r0, [r7, #12]
 80023fc:	607a      	str	r2, [r7, #4]
 80023fe:	461a      	mov	r2, r3
 8002400:	460b      	mov	r3, r1
 8002402:	817b      	strh	r3, [r7, #10]
 8002404:	4613      	mov	r3, r2
 8002406:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002408:	f7ff fbd4 	bl	8001bb4 <HAL_GetTick>
 800240c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002414:	b2db      	uxtb	r3, r3
 8002416:	2b20      	cmp	r3, #32
 8002418:	f040 80e0 	bne.w	80025dc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800241c:	697b      	ldr	r3, [r7, #20]
 800241e:	9300      	str	r3, [sp, #0]
 8002420:	2319      	movs	r3, #25
 8002422:	2201      	movs	r2, #1
 8002424:	4970      	ldr	r1, [pc, #448]	@ (80025e8 <HAL_I2C_Master_Transmit+0x1f4>)
 8002426:	68f8      	ldr	r0, [r7, #12]
 8002428:	f000 fc22 	bl	8002c70 <I2C_WaitOnFlagUntilTimeout>
 800242c:	4603      	mov	r3, r0
 800242e:	2b00      	cmp	r3, #0
 8002430:	d001      	beq.n	8002436 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002432:	2302      	movs	r3, #2
 8002434:	e0d3      	b.n	80025de <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800243c:	2b01      	cmp	r3, #1
 800243e:	d101      	bne.n	8002444 <HAL_I2C_Master_Transmit+0x50>
 8002440:	2302      	movs	r3, #2
 8002442:	e0cc      	b.n	80025de <HAL_I2C_Master_Transmit+0x1ea>
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	2201      	movs	r2, #1
 8002448:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f003 0301 	and.w	r3, r3, #1
 8002456:	2b01      	cmp	r3, #1
 8002458:	d007      	beq.n	800246a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	681a      	ldr	r2, [r3, #0]
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f042 0201 	orr.w	r2, r2, #1
 8002468:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	681a      	ldr	r2, [r3, #0]
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002478:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	2221      	movs	r2, #33	@ 0x21
 800247e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	2210      	movs	r2, #16
 8002486:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	2200      	movs	r2, #0
 800248e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	687a      	ldr	r2, [r7, #4]
 8002494:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	893a      	ldrh	r2, [r7, #8]
 800249a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024a0:	b29a      	uxth	r2, r3
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	4a50      	ldr	r2, [pc, #320]	@ (80025ec <HAL_I2C_Master_Transmit+0x1f8>)
 80024aa:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80024ac:	8979      	ldrh	r1, [r7, #10]
 80024ae:	697b      	ldr	r3, [r7, #20]
 80024b0:	6a3a      	ldr	r2, [r7, #32]
 80024b2:	68f8      	ldr	r0, [r7, #12]
 80024b4:	f000 fac4 	bl	8002a40 <I2C_MasterRequestWrite>
 80024b8:	4603      	mov	r3, r0
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d001      	beq.n	80024c2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80024be:	2301      	movs	r3, #1
 80024c0:	e08d      	b.n	80025de <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80024c2:	2300      	movs	r3, #0
 80024c4:	613b      	str	r3, [r7, #16]
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	695b      	ldr	r3, [r3, #20]
 80024cc:	613b      	str	r3, [r7, #16]
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	699b      	ldr	r3, [r3, #24]
 80024d4:	613b      	str	r3, [r7, #16]
 80024d6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80024d8:	e066      	b.n	80025a8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80024da:	697a      	ldr	r2, [r7, #20]
 80024dc:	6a39      	ldr	r1, [r7, #32]
 80024de:	68f8      	ldr	r0, [r7, #12]
 80024e0:	f000 fce0 	bl	8002ea4 <I2C_WaitOnTXEFlagUntilTimeout>
 80024e4:	4603      	mov	r3, r0
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d00d      	beq.n	8002506 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024ee:	2b04      	cmp	r3, #4
 80024f0:	d107      	bne.n	8002502 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	681a      	ldr	r2, [r3, #0]
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002500:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002502:	2301      	movs	r3, #1
 8002504:	e06b      	b.n	80025de <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800250a:	781a      	ldrb	r2, [r3, #0]
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002516:	1c5a      	adds	r2, r3, #1
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002520:	b29b      	uxth	r3, r3
 8002522:	3b01      	subs	r3, #1
 8002524:	b29a      	uxth	r2, r3
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800252e:	3b01      	subs	r3, #1
 8002530:	b29a      	uxth	r2, r3
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	695b      	ldr	r3, [r3, #20]
 800253c:	f003 0304 	and.w	r3, r3, #4
 8002540:	2b04      	cmp	r3, #4
 8002542:	d11b      	bne.n	800257c <HAL_I2C_Master_Transmit+0x188>
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002548:	2b00      	cmp	r3, #0
 800254a:	d017      	beq.n	800257c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002550:	781a      	ldrb	r2, [r3, #0]
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800255c:	1c5a      	adds	r2, r3, #1
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002566:	b29b      	uxth	r3, r3
 8002568:	3b01      	subs	r3, #1
 800256a:	b29a      	uxth	r2, r3
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002574:	3b01      	subs	r3, #1
 8002576:	b29a      	uxth	r2, r3
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800257c:	697a      	ldr	r2, [r7, #20]
 800257e:	6a39      	ldr	r1, [r7, #32]
 8002580:	68f8      	ldr	r0, [r7, #12]
 8002582:	f000 fcd7 	bl	8002f34 <I2C_WaitOnBTFFlagUntilTimeout>
 8002586:	4603      	mov	r3, r0
 8002588:	2b00      	cmp	r3, #0
 800258a:	d00d      	beq.n	80025a8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002590:	2b04      	cmp	r3, #4
 8002592:	d107      	bne.n	80025a4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	681a      	ldr	r2, [r3, #0]
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80025a2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80025a4:	2301      	movs	r3, #1
 80025a6:	e01a      	b.n	80025de <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d194      	bne.n	80024da <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	681a      	ldr	r2, [r3, #0]
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80025be:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	2220      	movs	r2, #32
 80025c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	2200      	movs	r2, #0
 80025cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	2200      	movs	r2, #0
 80025d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80025d8:	2300      	movs	r3, #0
 80025da:	e000      	b.n	80025de <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80025dc:	2302      	movs	r3, #2
  }
}
 80025de:	4618      	mov	r0, r3
 80025e0:	3718      	adds	r7, #24
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bd80      	pop	{r7, pc}
 80025e6:	bf00      	nop
 80025e8:	00100002 	.word	0x00100002
 80025ec:	ffff0000 	.word	0xffff0000

080025f0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b088      	sub	sp, #32
 80025f4:	af02      	add	r7, sp, #8
 80025f6:	60f8      	str	r0, [r7, #12]
 80025f8:	4608      	mov	r0, r1
 80025fa:	4611      	mov	r1, r2
 80025fc:	461a      	mov	r2, r3
 80025fe:	4603      	mov	r3, r0
 8002600:	817b      	strh	r3, [r7, #10]
 8002602:	460b      	mov	r3, r1
 8002604:	813b      	strh	r3, [r7, #8]
 8002606:	4613      	mov	r3, r2
 8002608:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800260a:	f7ff fad3 	bl	8001bb4 <HAL_GetTick>
 800260e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002616:	b2db      	uxtb	r3, r3
 8002618:	2b20      	cmp	r3, #32
 800261a:	f040 80d9 	bne.w	80027d0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800261e:	697b      	ldr	r3, [r7, #20]
 8002620:	9300      	str	r3, [sp, #0]
 8002622:	2319      	movs	r3, #25
 8002624:	2201      	movs	r2, #1
 8002626:	496d      	ldr	r1, [pc, #436]	@ (80027dc <HAL_I2C_Mem_Write+0x1ec>)
 8002628:	68f8      	ldr	r0, [r7, #12]
 800262a:	f000 fb21 	bl	8002c70 <I2C_WaitOnFlagUntilTimeout>
 800262e:	4603      	mov	r3, r0
 8002630:	2b00      	cmp	r3, #0
 8002632:	d001      	beq.n	8002638 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002634:	2302      	movs	r3, #2
 8002636:	e0cc      	b.n	80027d2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800263e:	2b01      	cmp	r3, #1
 8002640:	d101      	bne.n	8002646 <HAL_I2C_Mem_Write+0x56>
 8002642:	2302      	movs	r3, #2
 8002644:	e0c5      	b.n	80027d2 <HAL_I2C_Mem_Write+0x1e2>
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	2201      	movs	r2, #1
 800264a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f003 0301 	and.w	r3, r3, #1
 8002658:	2b01      	cmp	r3, #1
 800265a:	d007      	beq.n	800266c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	681a      	ldr	r2, [r3, #0]
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f042 0201 	orr.w	r2, r2, #1
 800266a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	681a      	ldr	r2, [r3, #0]
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800267a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	2221      	movs	r2, #33	@ 0x21
 8002680:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	2240      	movs	r2, #64	@ 0x40
 8002688:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	2200      	movs	r2, #0
 8002690:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	6a3a      	ldr	r2, [r7, #32]
 8002696:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800269c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026a2:	b29a      	uxth	r2, r3
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	4a4d      	ldr	r2, [pc, #308]	@ (80027e0 <HAL_I2C_Mem_Write+0x1f0>)
 80026ac:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80026ae:	88f8      	ldrh	r0, [r7, #6]
 80026b0:	893a      	ldrh	r2, [r7, #8]
 80026b2:	8979      	ldrh	r1, [r7, #10]
 80026b4:	697b      	ldr	r3, [r7, #20]
 80026b6:	9301      	str	r3, [sp, #4]
 80026b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026ba:	9300      	str	r3, [sp, #0]
 80026bc:	4603      	mov	r3, r0
 80026be:	68f8      	ldr	r0, [r7, #12]
 80026c0:	f000 fa40 	bl	8002b44 <I2C_RequestMemoryWrite>
 80026c4:	4603      	mov	r3, r0
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d052      	beq.n	8002770 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80026ca:	2301      	movs	r3, #1
 80026cc:	e081      	b.n	80027d2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80026ce:	697a      	ldr	r2, [r7, #20]
 80026d0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80026d2:	68f8      	ldr	r0, [r7, #12]
 80026d4:	f000 fbe6 	bl	8002ea4 <I2C_WaitOnTXEFlagUntilTimeout>
 80026d8:	4603      	mov	r3, r0
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d00d      	beq.n	80026fa <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026e2:	2b04      	cmp	r3, #4
 80026e4:	d107      	bne.n	80026f6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	681a      	ldr	r2, [r3, #0]
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80026f4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80026f6:	2301      	movs	r3, #1
 80026f8:	e06b      	b.n	80027d2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026fe:	781a      	ldrb	r2, [r3, #0]
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800270a:	1c5a      	adds	r2, r3, #1
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002714:	3b01      	subs	r3, #1
 8002716:	b29a      	uxth	r2, r3
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002720:	b29b      	uxth	r3, r3
 8002722:	3b01      	subs	r3, #1
 8002724:	b29a      	uxth	r2, r3
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	695b      	ldr	r3, [r3, #20]
 8002730:	f003 0304 	and.w	r3, r3, #4
 8002734:	2b04      	cmp	r3, #4
 8002736:	d11b      	bne.n	8002770 <HAL_I2C_Mem_Write+0x180>
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800273c:	2b00      	cmp	r3, #0
 800273e:	d017      	beq.n	8002770 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002744:	781a      	ldrb	r2, [r3, #0]
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002750:	1c5a      	adds	r2, r3, #1
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800275a:	3b01      	subs	r3, #1
 800275c:	b29a      	uxth	r2, r3
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002766:	b29b      	uxth	r3, r3
 8002768:	3b01      	subs	r3, #1
 800276a:	b29a      	uxth	r2, r3
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002774:	2b00      	cmp	r3, #0
 8002776:	d1aa      	bne.n	80026ce <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002778:	697a      	ldr	r2, [r7, #20]
 800277a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800277c:	68f8      	ldr	r0, [r7, #12]
 800277e:	f000 fbd9 	bl	8002f34 <I2C_WaitOnBTFFlagUntilTimeout>
 8002782:	4603      	mov	r3, r0
 8002784:	2b00      	cmp	r3, #0
 8002786:	d00d      	beq.n	80027a4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800278c:	2b04      	cmp	r3, #4
 800278e:	d107      	bne.n	80027a0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	681a      	ldr	r2, [r3, #0]
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800279e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80027a0:	2301      	movs	r3, #1
 80027a2:	e016      	b.n	80027d2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	681a      	ldr	r2, [r3, #0]
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80027b2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	2220      	movs	r2, #32
 80027b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	2200      	movs	r2, #0
 80027c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	2200      	movs	r2, #0
 80027c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80027cc:	2300      	movs	r3, #0
 80027ce:	e000      	b.n	80027d2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80027d0:	2302      	movs	r3, #2
  }
}
 80027d2:	4618      	mov	r0, r3
 80027d4:	3718      	adds	r7, #24
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}
 80027da:	bf00      	nop
 80027dc:	00100002 	.word	0x00100002
 80027e0:	ffff0000 	.word	0xffff0000

080027e4 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b08a      	sub	sp, #40	@ 0x28
 80027e8:	af02      	add	r7, sp, #8
 80027ea:	60f8      	str	r0, [r7, #12]
 80027ec:	607a      	str	r2, [r7, #4]
 80027ee:	603b      	str	r3, [r7, #0]
 80027f0:	460b      	mov	r3, r1
 80027f2:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80027f4:	f7ff f9de 	bl	8001bb4 <HAL_GetTick>
 80027f8:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 80027fa:	2300      	movs	r3, #0
 80027fc:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002804:	b2db      	uxtb	r3, r3
 8002806:	2b20      	cmp	r3, #32
 8002808:	f040 8111 	bne.w	8002a2e <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800280c:	69fb      	ldr	r3, [r7, #28]
 800280e:	9300      	str	r3, [sp, #0]
 8002810:	2319      	movs	r3, #25
 8002812:	2201      	movs	r2, #1
 8002814:	4988      	ldr	r1, [pc, #544]	@ (8002a38 <HAL_I2C_IsDeviceReady+0x254>)
 8002816:	68f8      	ldr	r0, [r7, #12]
 8002818:	f000 fa2a 	bl	8002c70 <I2C_WaitOnFlagUntilTimeout>
 800281c:	4603      	mov	r3, r0
 800281e:	2b00      	cmp	r3, #0
 8002820:	d001      	beq.n	8002826 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002822:	2302      	movs	r3, #2
 8002824:	e104      	b.n	8002a30 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800282c:	2b01      	cmp	r3, #1
 800282e:	d101      	bne.n	8002834 <HAL_I2C_IsDeviceReady+0x50>
 8002830:	2302      	movs	r3, #2
 8002832:	e0fd      	b.n	8002a30 <HAL_I2C_IsDeviceReady+0x24c>
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	2201      	movs	r2, #1
 8002838:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f003 0301 	and.w	r3, r3, #1
 8002846:	2b01      	cmp	r3, #1
 8002848:	d007      	beq.n	800285a <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	681a      	ldr	r2, [r3, #0]
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f042 0201 	orr.w	r2, r2, #1
 8002858:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	681a      	ldr	r2, [r3, #0]
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002868:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	2224      	movs	r2, #36	@ 0x24
 800286e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	2200      	movs	r2, #0
 8002876:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	4a70      	ldr	r2, [pc, #448]	@ (8002a3c <HAL_I2C_IsDeviceReady+0x258>)
 800287c:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	681a      	ldr	r2, [r3, #0]
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800288c:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800288e:	69fb      	ldr	r3, [r7, #28]
 8002890:	9300      	str	r3, [sp, #0]
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	2200      	movs	r2, #0
 8002896:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800289a:	68f8      	ldr	r0, [r7, #12]
 800289c:	f000 f9e8 	bl	8002c70 <I2C_WaitOnFlagUntilTimeout>
 80028a0:	4603      	mov	r3, r0
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d00d      	beq.n	80028c2 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028b0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80028b4:	d103      	bne.n	80028be <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80028bc:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 80028be:	2303      	movs	r3, #3
 80028c0:	e0b6      	b.n	8002a30 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80028c2:	897b      	ldrh	r3, [r7, #10]
 80028c4:	b2db      	uxtb	r3, r3
 80028c6:	461a      	mov	r2, r3
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80028d0:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80028d2:	f7ff f96f 	bl	8001bb4 <HAL_GetTick>
 80028d6:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	695b      	ldr	r3, [r3, #20]
 80028de:	f003 0302 	and.w	r3, r3, #2
 80028e2:	2b02      	cmp	r3, #2
 80028e4:	bf0c      	ite	eq
 80028e6:	2301      	moveq	r3, #1
 80028e8:	2300      	movne	r3, #0
 80028ea:	b2db      	uxtb	r3, r3
 80028ec:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	695b      	ldr	r3, [r3, #20]
 80028f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80028f8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80028fc:	bf0c      	ite	eq
 80028fe:	2301      	moveq	r3, #1
 8002900:	2300      	movne	r3, #0
 8002902:	b2db      	uxtb	r3, r3
 8002904:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002906:	e025      	b.n	8002954 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002908:	f7ff f954 	bl	8001bb4 <HAL_GetTick>
 800290c:	4602      	mov	r2, r0
 800290e:	69fb      	ldr	r3, [r7, #28]
 8002910:	1ad3      	subs	r3, r2, r3
 8002912:	683a      	ldr	r2, [r7, #0]
 8002914:	429a      	cmp	r2, r3
 8002916:	d302      	bcc.n	800291e <HAL_I2C_IsDeviceReady+0x13a>
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	2b00      	cmp	r3, #0
 800291c:	d103      	bne.n	8002926 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	22a0      	movs	r2, #160	@ 0xa0
 8002922:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	695b      	ldr	r3, [r3, #20]
 800292c:	f003 0302 	and.w	r3, r3, #2
 8002930:	2b02      	cmp	r3, #2
 8002932:	bf0c      	ite	eq
 8002934:	2301      	moveq	r3, #1
 8002936:	2300      	movne	r3, #0
 8002938:	b2db      	uxtb	r3, r3
 800293a:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	695b      	ldr	r3, [r3, #20]
 8002942:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002946:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800294a:	bf0c      	ite	eq
 800294c:	2301      	moveq	r3, #1
 800294e:	2300      	movne	r3, #0
 8002950:	b2db      	uxtb	r3, r3
 8002952:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800295a:	b2db      	uxtb	r3, r3
 800295c:	2ba0      	cmp	r3, #160	@ 0xa0
 800295e:	d005      	beq.n	800296c <HAL_I2C_IsDeviceReady+0x188>
 8002960:	7dfb      	ldrb	r3, [r7, #23]
 8002962:	2b00      	cmp	r3, #0
 8002964:	d102      	bne.n	800296c <HAL_I2C_IsDeviceReady+0x188>
 8002966:	7dbb      	ldrb	r3, [r7, #22]
 8002968:	2b00      	cmp	r3, #0
 800296a:	d0cd      	beq.n	8002908 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	2220      	movs	r2, #32
 8002970:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	695b      	ldr	r3, [r3, #20]
 800297a:	f003 0302 	and.w	r3, r3, #2
 800297e:	2b02      	cmp	r3, #2
 8002980:	d129      	bne.n	80029d6 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	681a      	ldr	r2, [r3, #0]
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002990:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002992:	2300      	movs	r3, #0
 8002994:	613b      	str	r3, [r7, #16]
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	695b      	ldr	r3, [r3, #20]
 800299c:	613b      	str	r3, [r7, #16]
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	699b      	ldr	r3, [r3, #24]
 80029a4:	613b      	str	r3, [r7, #16]
 80029a6:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80029a8:	69fb      	ldr	r3, [r7, #28]
 80029aa:	9300      	str	r3, [sp, #0]
 80029ac:	2319      	movs	r3, #25
 80029ae:	2201      	movs	r2, #1
 80029b0:	4921      	ldr	r1, [pc, #132]	@ (8002a38 <HAL_I2C_IsDeviceReady+0x254>)
 80029b2:	68f8      	ldr	r0, [r7, #12]
 80029b4:	f000 f95c 	bl	8002c70 <I2C_WaitOnFlagUntilTimeout>
 80029b8:	4603      	mov	r3, r0
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d001      	beq.n	80029c2 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80029be:	2301      	movs	r3, #1
 80029c0:	e036      	b.n	8002a30 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	2220      	movs	r2, #32
 80029c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	2200      	movs	r2, #0
 80029ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 80029d2:	2300      	movs	r3, #0
 80029d4:	e02c      	b.n	8002a30 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	681a      	ldr	r2, [r3, #0]
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80029e4:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80029ee:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80029f0:	69fb      	ldr	r3, [r7, #28]
 80029f2:	9300      	str	r3, [sp, #0]
 80029f4:	2319      	movs	r3, #25
 80029f6:	2201      	movs	r2, #1
 80029f8:	490f      	ldr	r1, [pc, #60]	@ (8002a38 <HAL_I2C_IsDeviceReady+0x254>)
 80029fa:	68f8      	ldr	r0, [r7, #12]
 80029fc:	f000 f938 	bl	8002c70 <I2C_WaitOnFlagUntilTimeout>
 8002a00:	4603      	mov	r3, r0
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d001      	beq.n	8002a0a <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8002a06:	2301      	movs	r3, #1
 8002a08:	e012      	b.n	8002a30 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8002a0a:	69bb      	ldr	r3, [r7, #24]
 8002a0c:	3301      	adds	r3, #1
 8002a0e:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002a10:	69ba      	ldr	r2, [r7, #24]
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	429a      	cmp	r2, r3
 8002a16:	f4ff af32 	bcc.w	800287e <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	2220      	movs	r2, #32
 8002a1e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	2200      	movs	r2, #0
 8002a26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	e000      	b.n	8002a30 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8002a2e:	2302      	movs	r3, #2
  }
}
 8002a30:	4618      	mov	r0, r3
 8002a32:	3720      	adds	r7, #32
 8002a34:	46bd      	mov	sp, r7
 8002a36:	bd80      	pop	{r7, pc}
 8002a38:	00100002 	.word	0x00100002
 8002a3c:	ffff0000 	.word	0xffff0000

08002a40 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b088      	sub	sp, #32
 8002a44:	af02      	add	r7, sp, #8
 8002a46:	60f8      	str	r0, [r7, #12]
 8002a48:	607a      	str	r2, [r7, #4]
 8002a4a:	603b      	str	r3, [r7, #0]
 8002a4c:	460b      	mov	r3, r1
 8002a4e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a54:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002a56:	697b      	ldr	r3, [r7, #20]
 8002a58:	2b08      	cmp	r3, #8
 8002a5a:	d006      	beq.n	8002a6a <I2C_MasterRequestWrite+0x2a>
 8002a5c:	697b      	ldr	r3, [r7, #20]
 8002a5e:	2b01      	cmp	r3, #1
 8002a60:	d003      	beq.n	8002a6a <I2C_MasterRequestWrite+0x2a>
 8002a62:	697b      	ldr	r3, [r7, #20]
 8002a64:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002a68:	d108      	bne.n	8002a7c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	681a      	ldr	r2, [r3, #0]
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002a78:	601a      	str	r2, [r3, #0]
 8002a7a:	e00b      	b.n	8002a94 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a80:	2b12      	cmp	r3, #18
 8002a82:	d107      	bne.n	8002a94 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	681a      	ldr	r2, [r3, #0]
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002a92:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	9300      	str	r3, [sp, #0]
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002aa0:	68f8      	ldr	r0, [r7, #12]
 8002aa2:	f000 f8e5 	bl	8002c70 <I2C_WaitOnFlagUntilTimeout>
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d00d      	beq.n	8002ac8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ab6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002aba:	d103      	bne.n	8002ac4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002ac2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002ac4:	2303      	movs	r3, #3
 8002ac6:	e035      	b.n	8002b34 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	691b      	ldr	r3, [r3, #16]
 8002acc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002ad0:	d108      	bne.n	8002ae4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002ad2:	897b      	ldrh	r3, [r7, #10]
 8002ad4:	b2db      	uxtb	r3, r3
 8002ad6:	461a      	mov	r2, r3
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002ae0:	611a      	str	r2, [r3, #16]
 8002ae2:	e01b      	b.n	8002b1c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002ae4:	897b      	ldrh	r3, [r7, #10]
 8002ae6:	11db      	asrs	r3, r3, #7
 8002ae8:	b2db      	uxtb	r3, r3
 8002aea:	f003 0306 	and.w	r3, r3, #6
 8002aee:	b2db      	uxtb	r3, r3
 8002af0:	f063 030f 	orn	r3, r3, #15
 8002af4:	b2da      	uxtb	r2, r3
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	687a      	ldr	r2, [r7, #4]
 8002b00:	490e      	ldr	r1, [pc, #56]	@ (8002b3c <I2C_MasterRequestWrite+0xfc>)
 8002b02:	68f8      	ldr	r0, [r7, #12]
 8002b04:	f000 f92e 	bl	8002d64 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d001      	beq.n	8002b12 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002b0e:	2301      	movs	r3, #1
 8002b10:	e010      	b.n	8002b34 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002b12:	897b      	ldrh	r3, [r7, #10]
 8002b14:	b2da      	uxtb	r2, r3
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	687a      	ldr	r2, [r7, #4]
 8002b20:	4907      	ldr	r1, [pc, #28]	@ (8002b40 <I2C_MasterRequestWrite+0x100>)
 8002b22:	68f8      	ldr	r0, [r7, #12]
 8002b24:	f000 f91e 	bl	8002d64 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002b28:	4603      	mov	r3, r0
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d001      	beq.n	8002b32 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002b2e:	2301      	movs	r3, #1
 8002b30:	e000      	b.n	8002b34 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002b32:	2300      	movs	r3, #0
}
 8002b34:	4618      	mov	r0, r3
 8002b36:	3718      	adds	r7, #24
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	bd80      	pop	{r7, pc}
 8002b3c:	00010008 	.word	0x00010008
 8002b40:	00010002 	.word	0x00010002

08002b44 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b088      	sub	sp, #32
 8002b48:	af02      	add	r7, sp, #8
 8002b4a:	60f8      	str	r0, [r7, #12]
 8002b4c:	4608      	mov	r0, r1
 8002b4e:	4611      	mov	r1, r2
 8002b50:	461a      	mov	r2, r3
 8002b52:	4603      	mov	r3, r0
 8002b54:	817b      	strh	r3, [r7, #10]
 8002b56:	460b      	mov	r3, r1
 8002b58:	813b      	strh	r3, [r7, #8]
 8002b5a:	4613      	mov	r3, r2
 8002b5c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	681a      	ldr	r2, [r3, #0]
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002b6c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002b6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b70:	9300      	str	r3, [sp, #0]
 8002b72:	6a3b      	ldr	r3, [r7, #32]
 8002b74:	2200      	movs	r2, #0
 8002b76:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002b7a:	68f8      	ldr	r0, [r7, #12]
 8002b7c:	f000 f878 	bl	8002c70 <I2C_WaitOnFlagUntilTimeout>
 8002b80:	4603      	mov	r3, r0
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d00d      	beq.n	8002ba2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b90:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002b94:	d103      	bne.n	8002b9e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002b9c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002b9e:	2303      	movs	r3, #3
 8002ba0:	e05f      	b.n	8002c62 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002ba2:	897b      	ldrh	r3, [r7, #10]
 8002ba4:	b2db      	uxtb	r3, r3
 8002ba6:	461a      	mov	r2, r3
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002bb0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002bb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bb4:	6a3a      	ldr	r2, [r7, #32]
 8002bb6:	492d      	ldr	r1, [pc, #180]	@ (8002c6c <I2C_RequestMemoryWrite+0x128>)
 8002bb8:	68f8      	ldr	r0, [r7, #12]
 8002bba:	f000 f8d3 	bl	8002d64 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d001      	beq.n	8002bc8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002bc4:	2301      	movs	r3, #1
 8002bc6:	e04c      	b.n	8002c62 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002bc8:	2300      	movs	r3, #0
 8002bca:	617b      	str	r3, [r7, #20]
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	695b      	ldr	r3, [r3, #20]
 8002bd2:	617b      	str	r3, [r7, #20]
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	699b      	ldr	r3, [r3, #24]
 8002bda:	617b      	str	r3, [r7, #20]
 8002bdc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002bde:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002be0:	6a39      	ldr	r1, [r7, #32]
 8002be2:	68f8      	ldr	r0, [r7, #12]
 8002be4:	f000 f95e 	bl	8002ea4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002be8:	4603      	mov	r3, r0
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d00d      	beq.n	8002c0a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bf2:	2b04      	cmp	r3, #4
 8002bf4:	d107      	bne.n	8002c06 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	681a      	ldr	r2, [r3, #0]
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c04:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002c06:	2301      	movs	r3, #1
 8002c08:	e02b      	b.n	8002c62 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002c0a:	88fb      	ldrh	r3, [r7, #6]
 8002c0c:	2b01      	cmp	r3, #1
 8002c0e:	d105      	bne.n	8002c1c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002c10:	893b      	ldrh	r3, [r7, #8]
 8002c12:	b2da      	uxtb	r2, r3
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	611a      	str	r2, [r3, #16]
 8002c1a:	e021      	b.n	8002c60 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002c1c:	893b      	ldrh	r3, [r7, #8]
 8002c1e:	0a1b      	lsrs	r3, r3, #8
 8002c20:	b29b      	uxth	r3, r3
 8002c22:	b2da      	uxtb	r2, r3
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c2a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c2c:	6a39      	ldr	r1, [r7, #32]
 8002c2e:	68f8      	ldr	r0, [r7, #12]
 8002c30:	f000 f938 	bl	8002ea4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002c34:	4603      	mov	r3, r0
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d00d      	beq.n	8002c56 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c3e:	2b04      	cmp	r3, #4
 8002c40:	d107      	bne.n	8002c52 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	681a      	ldr	r2, [r3, #0]
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c50:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002c52:	2301      	movs	r3, #1
 8002c54:	e005      	b.n	8002c62 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002c56:	893b      	ldrh	r3, [r7, #8]
 8002c58:	b2da      	uxtb	r2, r3
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002c60:	2300      	movs	r3, #0
}
 8002c62:	4618      	mov	r0, r3
 8002c64:	3718      	adds	r7, #24
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bd80      	pop	{r7, pc}
 8002c6a:	bf00      	nop
 8002c6c:	00010002 	.word	0x00010002

08002c70 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b084      	sub	sp, #16
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	60f8      	str	r0, [r7, #12]
 8002c78:	60b9      	str	r1, [r7, #8]
 8002c7a:	603b      	str	r3, [r7, #0]
 8002c7c:	4613      	mov	r3, r2
 8002c7e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002c80:	e048      	b.n	8002d14 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c88:	d044      	beq.n	8002d14 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c8a:	f7fe ff93 	bl	8001bb4 <HAL_GetTick>
 8002c8e:	4602      	mov	r2, r0
 8002c90:	69bb      	ldr	r3, [r7, #24]
 8002c92:	1ad3      	subs	r3, r2, r3
 8002c94:	683a      	ldr	r2, [r7, #0]
 8002c96:	429a      	cmp	r2, r3
 8002c98:	d302      	bcc.n	8002ca0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d139      	bne.n	8002d14 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002ca0:	68bb      	ldr	r3, [r7, #8]
 8002ca2:	0c1b      	lsrs	r3, r3, #16
 8002ca4:	b2db      	uxtb	r3, r3
 8002ca6:	2b01      	cmp	r3, #1
 8002ca8:	d10d      	bne.n	8002cc6 <I2C_WaitOnFlagUntilTimeout+0x56>
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	695b      	ldr	r3, [r3, #20]
 8002cb0:	43da      	mvns	r2, r3
 8002cb2:	68bb      	ldr	r3, [r7, #8]
 8002cb4:	4013      	ands	r3, r2
 8002cb6:	b29b      	uxth	r3, r3
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	bf0c      	ite	eq
 8002cbc:	2301      	moveq	r3, #1
 8002cbe:	2300      	movne	r3, #0
 8002cc0:	b2db      	uxtb	r3, r3
 8002cc2:	461a      	mov	r2, r3
 8002cc4:	e00c      	b.n	8002ce0 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	699b      	ldr	r3, [r3, #24]
 8002ccc:	43da      	mvns	r2, r3
 8002cce:	68bb      	ldr	r3, [r7, #8]
 8002cd0:	4013      	ands	r3, r2
 8002cd2:	b29b      	uxth	r3, r3
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	bf0c      	ite	eq
 8002cd8:	2301      	moveq	r3, #1
 8002cda:	2300      	movne	r3, #0
 8002cdc:	b2db      	uxtb	r3, r3
 8002cde:	461a      	mov	r2, r3
 8002ce0:	79fb      	ldrb	r3, [r7, #7]
 8002ce2:	429a      	cmp	r2, r3
 8002ce4:	d116      	bne.n	8002d14 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	2200      	movs	r2, #0
 8002cea:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	2220      	movs	r2, #32
 8002cf0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d00:	f043 0220 	orr.w	r2, r3, #32
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002d10:	2301      	movs	r3, #1
 8002d12:	e023      	b.n	8002d5c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002d14:	68bb      	ldr	r3, [r7, #8]
 8002d16:	0c1b      	lsrs	r3, r3, #16
 8002d18:	b2db      	uxtb	r3, r3
 8002d1a:	2b01      	cmp	r3, #1
 8002d1c:	d10d      	bne.n	8002d3a <I2C_WaitOnFlagUntilTimeout+0xca>
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	695b      	ldr	r3, [r3, #20]
 8002d24:	43da      	mvns	r2, r3
 8002d26:	68bb      	ldr	r3, [r7, #8]
 8002d28:	4013      	ands	r3, r2
 8002d2a:	b29b      	uxth	r3, r3
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	bf0c      	ite	eq
 8002d30:	2301      	moveq	r3, #1
 8002d32:	2300      	movne	r3, #0
 8002d34:	b2db      	uxtb	r3, r3
 8002d36:	461a      	mov	r2, r3
 8002d38:	e00c      	b.n	8002d54 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	699b      	ldr	r3, [r3, #24]
 8002d40:	43da      	mvns	r2, r3
 8002d42:	68bb      	ldr	r3, [r7, #8]
 8002d44:	4013      	ands	r3, r2
 8002d46:	b29b      	uxth	r3, r3
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	bf0c      	ite	eq
 8002d4c:	2301      	moveq	r3, #1
 8002d4e:	2300      	movne	r3, #0
 8002d50:	b2db      	uxtb	r3, r3
 8002d52:	461a      	mov	r2, r3
 8002d54:	79fb      	ldrb	r3, [r7, #7]
 8002d56:	429a      	cmp	r2, r3
 8002d58:	d093      	beq.n	8002c82 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002d5a:	2300      	movs	r3, #0
}
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	3710      	adds	r7, #16
 8002d60:	46bd      	mov	sp, r7
 8002d62:	bd80      	pop	{r7, pc}

08002d64 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b084      	sub	sp, #16
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	60f8      	str	r0, [r7, #12]
 8002d6c:	60b9      	str	r1, [r7, #8]
 8002d6e:	607a      	str	r2, [r7, #4]
 8002d70:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002d72:	e071      	b.n	8002e58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	695b      	ldr	r3, [r3, #20]
 8002d7a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d7e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002d82:	d123      	bne.n	8002dcc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	681a      	ldr	r2, [r3, #0]
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d92:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002d9c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	2200      	movs	r2, #0
 8002da2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	2220      	movs	r2, #32
 8002da8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	2200      	movs	r2, #0
 8002db0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002db8:	f043 0204 	orr.w	r2, r3, #4
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002dc8:	2301      	movs	r3, #1
 8002dca:	e067      	b.n	8002e9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dd2:	d041      	beq.n	8002e58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002dd4:	f7fe feee 	bl	8001bb4 <HAL_GetTick>
 8002dd8:	4602      	mov	r2, r0
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	1ad3      	subs	r3, r2, r3
 8002dde:	687a      	ldr	r2, [r7, #4]
 8002de0:	429a      	cmp	r2, r3
 8002de2:	d302      	bcc.n	8002dea <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d136      	bne.n	8002e58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002dea:	68bb      	ldr	r3, [r7, #8]
 8002dec:	0c1b      	lsrs	r3, r3, #16
 8002dee:	b2db      	uxtb	r3, r3
 8002df0:	2b01      	cmp	r3, #1
 8002df2:	d10c      	bne.n	8002e0e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	695b      	ldr	r3, [r3, #20]
 8002dfa:	43da      	mvns	r2, r3
 8002dfc:	68bb      	ldr	r3, [r7, #8]
 8002dfe:	4013      	ands	r3, r2
 8002e00:	b29b      	uxth	r3, r3
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	bf14      	ite	ne
 8002e06:	2301      	movne	r3, #1
 8002e08:	2300      	moveq	r3, #0
 8002e0a:	b2db      	uxtb	r3, r3
 8002e0c:	e00b      	b.n	8002e26 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	699b      	ldr	r3, [r3, #24]
 8002e14:	43da      	mvns	r2, r3
 8002e16:	68bb      	ldr	r3, [r7, #8]
 8002e18:	4013      	ands	r3, r2
 8002e1a:	b29b      	uxth	r3, r3
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	bf14      	ite	ne
 8002e20:	2301      	movne	r3, #1
 8002e22:	2300      	moveq	r3, #0
 8002e24:	b2db      	uxtb	r3, r3
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d016      	beq.n	8002e58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	2220      	movs	r2, #32
 8002e34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e44:	f043 0220 	orr.w	r2, r3, #32
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	2200      	movs	r2, #0
 8002e50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002e54:	2301      	movs	r3, #1
 8002e56:	e021      	b.n	8002e9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002e58:	68bb      	ldr	r3, [r7, #8]
 8002e5a:	0c1b      	lsrs	r3, r3, #16
 8002e5c:	b2db      	uxtb	r3, r3
 8002e5e:	2b01      	cmp	r3, #1
 8002e60:	d10c      	bne.n	8002e7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	695b      	ldr	r3, [r3, #20]
 8002e68:	43da      	mvns	r2, r3
 8002e6a:	68bb      	ldr	r3, [r7, #8]
 8002e6c:	4013      	ands	r3, r2
 8002e6e:	b29b      	uxth	r3, r3
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	bf14      	ite	ne
 8002e74:	2301      	movne	r3, #1
 8002e76:	2300      	moveq	r3, #0
 8002e78:	b2db      	uxtb	r3, r3
 8002e7a:	e00b      	b.n	8002e94 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	699b      	ldr	r3, [r3, #24]
 8002e82:	43da      	mvns	r2, r3
 8002e84:	68bb      	ldr	r3, [r7, #8]
 8002e86:	4013      	ands	r3, r2
 8002e88:	b29b      	uxth	r3, r3
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	bf14      	ite	ne
 8002e8e:	2301      	movne	r3, #1
 8002e90:	2300      	moveq	r3, #0
 8002e92:	b2db      	uxtb	r3, r3
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	f47f af6d 	bne.w	8002d74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002e9a:	2300      	movs	r3, #0
}
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	3710      	adds	r7, #16
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	bd80      	pop	{r7, pc}

08002ea4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b084      	sub	sp, #16
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	60f8      	str	r0, [r7, #12]
 8002eac:	60b9      	str	r1, [r7, #8]
 8002eae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002eb0:	e034      	b.n	8002f1c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002eb2:	68f8      	ldr	r0, [r7, #12]
 8002eb4:	f000 f886 	bl	8002fc4 <I2C_IsAcknowledgeFailed>
 8002eb8:	4603      	mov	r3, r0
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d001      	beq.n	8002ec2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	e034      	b.n	8002f2c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ec2:	68bb      	ldr	r3, [r7, #8]
 8002ec4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ec8:	d028      	beq.n	8002f1c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002eca:	f7fe fe73 	bl	8001bb4 <HAL_GetTick>
 8002ece:	4602      	mov	r2, r0
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	1ad3      	subs	r3, r2, r3
 8002ed4:	68ba      	ldr	r2, [r7, #8]
 8002ed6:	429a      	cmp	r2, r3
 8002ed8:	d302      	bcc.n	8002ee0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002eda:	68bb      	ldr	r3, [r7, #8]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d11d      	bne.n	8002f1c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	695b      	ldr	r3, [r3, #20]
 8002ee6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002eea:	2b80      	cmp	r3, #128	@ 0x80
 8002eec:	d016      	beq.n	8002f1c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	2220      	movs	r2, #32
 8002ef8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	2200      	movs	r2, #0
 8002f00:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f08:	f043 0220 	orr.w	r2, r3, #32
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	2200      	movs	r2, #0
 8002f14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002f18:	2301      	movs	r3, #1
 8002f1a:	e007      	b.n	8002f2c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	695b      	ldr	r3, [r3, #20]
 8002f22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f26:	2b80      	cmp	r3, #128	@ 0x80
 8002f28:	d1c3      	bne.n	8002eb2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002f2a:	2300      	movs	r3, #0
}
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	3710      	adds	r7, #16
 8002f30:	46bd      	mov	sp, r7
 8002f32:	bd80      	pop	{r7, pc}

08002f34 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b084      	sub	sp, #16
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	60f8      	str	r0, [r7, #12]
 8002f3c:	60b9      	str	r1, [r7, #8]
 8002f3e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002f40:	e034      	b.n	8002fac <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002f42:	68f8      	ldr	r0, [r7, #12]
 8002f44:	f000 f83e 	bl	8002fc4 <I2C_IsAcknowledgeFailed>
 8002f48:	4603      	mov	r3, r0
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d001      	beq.n	8002f52 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002f4e:	2301      	movs	r3, #1
 8002f50:	e034      	b.n	8002fbc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f52:	68bb      	ldr	r3, [r7, #8]
 8002f54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f58:	d028      	beq.n	8002fac <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f5a:	f7fe fe2b 	bl	8001bb4 <HAL_GetTick>
 8002f5e:	4602      	mov	r2, r0
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	1ad3      	subs	r3, r2, r3
 8002f64:	68ba      	ldr	r2, [r7, #8]
 8002f66:	429a      	cmp	r2, r3
 8002f68:	d302      	bcc.n	8002f70 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002f6a:	68bb      	ldr	r3, [r7, #8]
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d11d      	bne.n	8002fac <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	695b      	ldr	r3, [r3, #20]
 8002f76:	f003 0304 	and.w	r3, r3, #4
 8002f7a:	2b04      	cmp	r3, #4
 8002f7c:	d016      	beq.n	8002fac <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	2200      	movs	r2, #0
 8002f82:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	2220      	movs	r2, #32
 8002f88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	2200      	movs	r2, #0
 8002f90:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f98:	f043 0220 	orr.w	r2, r3, #32
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002fa8:	2301      	movs	r3, #1
 8002faa:	e007      	b.n	8002fbc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	695b      	ldr	r3, [r3, #20]
 8002fb2:	f003 0304 	and.w	r3, r3, #4
 8002fb6:	2b04      	cmp	r3, #4
 8002fb8:	d1c3      	bne.n	8002f42 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002fba:	2300      	movs	r3, #0
}
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	3710      	adds	r7, #16
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	bd80      	pop	{r7, pc}

08002fc4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002fc4:	b480      	push	{r7}
 8002fc6:	b083      	sub	sp, #12
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	695b      	ldr	r3, [r3, #20]
 8002fd2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002fd6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002fda:	d11b      	bne.n	8003014 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002fe4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2200      	movs	r2, #0
 8002fea:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2220      	movs	r2, #32
 8002ff0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003000:	f043 0204 	orr.w	r2, r3, #4
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2200      	movs	r2, #0
 800300c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003010:	2301      	movs	r3, #1
 8003012:	e000      	b.n	8003016 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003014:	2300      	movs	r3, #0
}
 8003016:	4618      	mov	r0, r3
 8003018:	370c      	adds	r7, #12
 800301a:	46bd      	mov	sp, r7
 800301c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003020:	4770      	bx	lr

08003022 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003022:	b480      	push	{r7}
 8003024:	b083      	sub	sp, #12
 8003026:	af00      	add	r7, sp, #0
 8003028:	6078      	str	r0, [r7, #4]
 800302a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003032:	b2db      	uxtb	r3, r3
 8003034:	2b20      	cmp	r3, #32
 8003036:	d129      	bne.n	800308c <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2224      	movs	r2, #36	@ 0x24
 800303c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	681a      	ldr	r2, [r3, #0]
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f022 0201 	bic.w	r2, r2, #1
 800304e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f022 0210 	bic.w	r2, r2, #16
 800305e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	683a      	ldr	r2, [r7, #0]
 800306c:	430a      	orrs	r2, r1
 800306e:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	681a      	ldr	r2, [r3, #0]
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f042 0201 	orr.w	r2, r2, #1
 800307e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2220      	movs	r2, #32
 8003084:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8003088:	2300      	movs	r3, #0
 800308a:	e000      	b.n	800308e <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 800308c:	2302      	movs	r3, #2
  }
}
 800308e:	4618      	mov	r0, r3
 8003090:	370c      	adds	r7, #12
 8003092:	46bd      	mov	sp, r7
 8003094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003098:	4770      	bx	lr

0800309a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800309a:	b480      	push	{r7}
 800309c:	b085      	sub	sp, #20
 800309e:	af00      	add	r7, sp, #0
 80030a0:	6078      	str	r0, [r7, #4]
 80030a2:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 80030a4:	2300      	movs	r3, #0
 80030a6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80030ae:	b2db      	uxtb	r3, r3
 80030b0:	2b20      	cmp	r3, #32
 80030b2:	d12a      	bne.n	800310a <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2224      	movs	r2, #36	@ 0x24
 80030b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	681a      	ldr	r2, [r3, #0]
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f022 0201 	bic.w	r2, r2, #1
 80030ca:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030d2:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 80030d4:	89fb      	ldrh	r3, [r7, #14]
 80030d6:	f023 030f 	bic.w	r3, r3, #15
 80030da:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	b29a      	uxth	r2, r3
 80030e0:	89fb      	ldrh	r3, [r7, #14]
 80030e2:	4313      	orrs	r3, r2
 80030e4:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	89fa      	ldrh	r2, [r7, #14]
 80030ec:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	681a      	ldr	r2, [r3, #0]
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f042 0201 	orr.w	r2, r2, #1
 80030fc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2220      	movs	r2, #32
 8003102:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8003106:	2300      	movs	r3, #0
 8003108:	e000      	b.n	800310c <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 800310a:	2302      	movs	r3, #2
  }
}
 800310c:	4618      	mov	r0, r3
 800310e:	3714      	adds	r7, #20
 8003110:	46bd      	mov	sp, r7
 8003112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003116:	4770      	bx	lr

08003118 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b082      	sub	sp, #8
 800311c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800311e:	2300      	movs	r3, #0
 8003120:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003122:	2300      	movs	r3, #0
 8003124:	603b      	str	r3, [r7, #0]
 8003126:	4b20      	ldr	r3, [pc, #128]	@ (80031a8 <HAL_PWREx_EnableOverDrive+0x90>)
 8003128:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800312a:	4a1f      	ldr	r2, [pc, #124]	@ (80031a8 <HAL_PWREx_EnableOverDrive+0x90>)
 800312c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003130:	6413      	str	r3, [r2, #64]	@ 0x40
 8003132:	4b1d      	ldr	r3, [pc, #116]	@ (80031a8 <HAL_PWREx_EnableOverDrive+0x90>)
 8003134:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003136:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800313a:	603b      	str	r3, [r7, #0]
 800313c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800313e:	4b1b      	ldr	r3, [pc, #108]	@ (80031ac <HAL_PWREx_EnableOverDrive+0x94>)
 8003140:	2201      	movs	r2, #1
 8003142:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003144:	f7fe fd36 	bl	8001bb4 <HAL_GetTick>
 8003148:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800314a:	e009      	b.n	8003160 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800314c:	f7fe fd32 	bl	8001bb4 <HAL_GetTick>
 8003150:	4602      	mov	r2, r0
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	1ad3      	subs	r3, r2, r3
 8003156:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800315a:	d901      	bls.n	8003160 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 800315c:	2303      	movs	r3, #3
 800315e:	e01f      	b.n	80031a0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003160:	4b13      	ldr	r3, [pc, #76]	@ (80031b0 <HAL_PWREx_EnableOverDrive+0x98>)
 8003162:	685b      	ldr	r3, [r3, #4]
 8003164:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003168:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800316c:	d1ee      	bne.n	800314c <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800316e:	4b11      	ldr	r3, [pc, #68]	@ (80031b4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003170:	2201      	movs	r2, #1
 8003172:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003174:	f7fe fd1e 	bl	8001bb4 <HAL_GetTick>
 8003178:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800317a:	e009      	b.n	8003190 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800317c:	f7fe fd1a 	bl	8001bb4 <HAL_GetTick>
 8003180:	4602      	mov	r2, r0
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	1ad3      	subs	r3, r2, r3
 8003186:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800318a:	d901      	bls.n	8003190 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800318c:	2303      	movs	r3, #3
 800318e:	e007      	b.n	80031a0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003190:	4b07      	ldr	r3, [pc, #28]	@ (80031b0 <HAL_PWREx_EnableOverDrive+0x98>)
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003198:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800319c:	d1ee      	bne.n	800317c <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800319e:	2300      	movs	r3, #0
}
 80031a0:	4618      	mov	r0, r3
 80031a2:	3708      	adds	r7, #8
 80031a4:	46bd      	mov	sp, r7
 80031a6:	bd80      	pop	{r7, pc}
 80031a8:	40023800 	.word	0x40023800
 80031ac:	420e0040 	.word	0x420e0040
 80031b0:	40007000 	.word	0x40007000
 80031b4:	420e0044 	.word	0x420e0044

080031b8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b086      	sub	sp, #24
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d101      	bne.n	80031ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80031c6:	2301      	movs	r3, #1
 80031c8:	e267      	b.n	800369a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f003 0301 	and.w	r3, r3, #1
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d075      	beq.n	80032c2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80031d6:	4b88      	ldr	r3, [pc, #544]	@ (80033f8 <HAL_RCC_OscConfig+0x240>)
 80031d8:	689b      	ldr	r3, [r3, #8]
 80031da:	f003 030c 	and.w	r3, r3, #12
 80031de:	2b04      	cmp	r3, #4
 80031e0:	d00c      	beq.n	80031fc <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80031e2:	4b85      	ldr	r3, [pc, #532]	@ (80033f8 <HAL_RCC_OscConfig+0x240>)
 80031e4:	689b      	ldr	r3, [r3, #8]
 80031e6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80031ea:	2b08      	cmp	r3, #8
 80031ec:	d112      	bne.n	8003214 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80031ee:	4b82      	ldr	r3, [pc, #520]	@ (80033f8 <HAL_RCC_OscConfig+0x240>)
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80031f6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80031fa:	d10b      	bne.n	8003214 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031fc:	4b7e      	ldr	r3, [pc, #504]	@ (80033f8 <HAL_RCC_OscConfig+0x240>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003204:	2b00      	cmp	r3, #0
 8003206:	d05b      	beq.n	80032c0 <HAL_RCC_OscConfig+0x108>
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	2b00      	cmp	r3, #0
 800320e:	d157      	bne.n	80032c0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003210:	2301      	movs	r3, #1
 8003212:	e242      	b.n	800369a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	685b      	ldr	r3, [r3, #4]
 8003218:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800321c:	d106      	bne.n	800322c <HAL_RCC_OscConfig+0x74>
 800321e:	4b76      	ldr	r3, [pc, #472]	@ (80033f8 <HAL_RCC_OscConfig+0x240>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4a75      	ldr	r2, [pc, #468]	@ (80033f8 <HAL_RCC_OscConfig+0x240>)
 8003224:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003228:	6013      	str	r3, [r2, #0]
 800322a:	e01d      	b.n	8003268 <HAL_RCC_OscConfig+0xb0>
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	685b      	ldr	r3, [r3, #4]
 8003230:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003234:	d10c      	bne.n	8003250 <HAL_RCC_OscConfig+0x98>
 8003236:	4b70      	ldr	r3, [pc, #448]	@ (80033f8 <HAL_RCC_OscConfig+0x240>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4a6f      	ldr	r2, [pc, #444]	@ (80033f8 <HAL_RCC_OscConfig+0x240>)
 800323c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003240:	6013      	str	r3, [r2, #0]
 8003242:	4b6d      	ldr	r3, [pc, #436]	@ (80033f8 <HAL_RCC_OscConfig+0x240>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4a6c      	ldr	r2, [pc, #432]	@ (80033f8 <HAL_RCC_OscConfig+0x240>)
 8003248:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800324c:	6013      	str	r3, [r2, #0]
 800324e:	e00b      	b.n	8003268 <HAL_RCC_OscConfig+0xb0>
 8003250:	4b69      	ldr	r3, [pc, #420]	@ (80033f8 <HAL_RCC_OscConfig+0x240>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4a68      	ldr	r2, [pc, #416]	@ (80033f8 <HAL_RCC_OscConfig+0x240>)
 8003256:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800325a:	6013      	str	r3, [r2, #0]
 800325c:	4b66      	ldr	r3, [pc, #408]	@ (80033f8 <HAL_RCC_OscConfig+0x240>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4a65      	ldr	r2, [pc, #404]	@ (80033f8 <HAL_RCC_OscConfig+0x240>)
 8003262:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003266:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	685b      	ldr	r3, [r3, #4]
 800326c:	2b00      	cmp	r3, #0
 800326e:	d013      	beq.n	8003298 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003270:	f7fe fca0 	bl	8001bb4 <HAL_GetTick>
 8003274:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003276:	e008      	b.n	800328a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003278:	f7fe fc9c 	bl	8001bb4 <HAL_GetTick>
 800327c:	4602      	mov	r2, r0
 800327e:	693b      	ldr	r3, [r7, #16]
 8003280:	1ad3      	subs	r3, r2, r3
 8003282:	2b64      	cmp	r3, #100	@ 0x64
 8003284:	d901      	bls.n	800328a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003286:	2303      	movs	r3, #3
 8003288:	e207      	b.n	800369a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800328a:	4b5b      	ldr	r3, [pc, #364]	@ (80033f8 <HAL_RCC_OscConfig+0x240>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003292:	2b00      	cmp	r3, #0
 8003294:	d0f0      	beq.n	8003278 <HAL_RCC_OscConfig+0xc0>
 8003296:	e014      	b.n	80032c2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003298:	f7fe fc8c 	bl	8001bb4 <HAL_GetTick>
 800329c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800329e:	e008      	b.n	80032b2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032a0:	f7fe fc88 	bl	8001bb4 <HAL_GetTick>
 80032a4:	4602      	mov	r2, r0
 80032a6:	693b      	ldr	r3, [r7, #16]
 80032a8:	1ad3      	subs	r3, r2, r3
 80032aa:	2b64      	cmp	r3, #100	@ 0x64
 80032ac:	d901      	bls.n	80032b2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80032ae:	2303      	movs	r3, #3
 80032b0:	e1f3      	b.n	800369a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032b2:	4b51      	ldr	r3, [pc, #324]	@ (80033f8 <HAL_RCC_OscConfig+0x240>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d1f0      	bne.n	80032a0 <HAL_RCC_OscConfig+0xe8>
 80032be:	e000      	b.n	80032c2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f003 0302 	and.w	r3, r3, #2
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d063      	beq.n	8003396 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80032ce:	4b4a      	ldr	r3, [pc, #296]	@ (80033f8 <HAL_RCC_OscConfig+0x240>)
 80032d0:	689b      	ldr	r3, [r3, #8]
 80032d2:	f003 030c 	and.w	r3, r3, #12
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d00b      	beq.n	80032f2 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80032da:	4b47      	ldr	r3, [pc, #284]	@ (80033f8 <HAL_RCC_OscConfig+0x240>)
 80032dc:	689b      	ldr	r3, [r3, #8]
 80032de:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80032e2:	2b08      	cmp	r3, #8
 80032e4:	d11c      	bne.n	8003320 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80032e6:	4b44      	ldr	r3, [pc, #272]	@ (80033f8 <HAL_RCC_OscConfig+0x240>)
 80032e8:	685b      	ldr	r3, [r3, #4]
 80032ea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d116      	bne.n	8003320 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032f2:	4b41      	ldr	r3, [pc, #260]	@ (80033f8 <HAL_RCC_OscConfig+0x240>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f003 0302 	and.w	r3, r3, #2
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d005      	beq.n	800330a <HAL_RCC_OscConfig+0x152>
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	68db      	ldr	r3, [r3, #12]
 8003302:	2b01      	cmp	r3, #1
 8003304:	d001      	beq.n	800330a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003306:	2301      	movs	r3, #1
 8003308:	e1c7      	b.n	800369a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800330a:	4b3b      	ldr	r3, [pc, #236]	@ (80033f8 <HAL_RCC_OscConfig+0x240>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	691b      	ldr	r3, [r3, #16]
 8003316:	00db      	lsls	r3, r3, #3
 8003318:	4937      	ldr	r1, [pc, #220]	@ (80033f8 <HAL_RCC_OscConfig+0x240>)
 800331a:	4313      	orrs	r3, r2
 800331c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800331e:	e03a      	b.n	8003396 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	68db      	ldr	r3, [r3, #12]
 8003324:	2b00      	cmp	r3, #0
 8003326:	d020      	beq.n	800336a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003328:	4b34      	ldr	r3, [pc, #208]	@ (80033fc <HAL_RCC_OscConfig+0x244>)
 800332a:	2201      	movs	r2, #1
 800332c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800332e:	f7fe fc41 	bl	8001bb4 <HAL_GetTick>
 8003332:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003334:	e008      	b.n	8003348 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003336:	f7fe fc3d 	bl	8001bb4 <HAL_GetTick>
 800333a:	4602      	mov	r2, r0
 800333c:	693b      	ldr	r3, [r7, #16]
 800333e:	1ad3      	subs	r3, r2, r3
 8003340:	2b02      	cmp	r3, #2
 8003342:	d901      	bls.n	8003348 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003344:	2303      	movs	r3, #3
 8003346:	e1a8      	b.n	800369a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003348:	4b2b      	ldr	r3, [pc, #172]	@ (80033f8 <HAL_RCC_OscConfig+0x240>)
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f003 0302 	and.w	r3, r3, #2
 8003350:	2b00      	cmp	r3, #0
 8003352:	d0f0      	beq.n	8003336 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003354:	4b28      	ldr	r3, [pc, #160]	@ (80033f8 <HAL_RCC_OscConfig+0x240>)
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	691b      	ldr	r3, [r3, #16]
 8003360:	00db      	lsls	r3, r3, #3
 8003362:	4925      	ldr	r1, [pc, #148]	@ (80033f8 <HAL_RCC_OscConfig+0x240>)
 8003364:	4313      	orrs	r3, r2
 8003366:	600b      	str	r3, [r1, #0]
 8003368:	e015      	b.n	8003396 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800336a:	4b24      	ldr	r3, [pc, #144]	@ (80033fc <HAL_RCC_OscConfig+0x244>)
 800336c:	2200      	movs	r2, #0
 800336e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003370:	f7fe fc20 	bl	8001bb4 <HAL_GetTick>
 8003374:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003376:	e008      	b.n	800338a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003378:	f7fe fc1c 	bl	8001bb4 <HAL_GetTick>
 800337c:	4602      	mov	r2, r0
 800337e:	693b      	ldr	r3, [r7, #16]
 8003380:	1ad3      	subs	r3, r2, r3
 8003382:	2b02      	cmp	r3, #2
 8003384:	d901      	bls.n	800338a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003386:	2303      	movs	r3, #3
 8003388:	e187      	b.n	800369a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800338a:	4b1b      	ldr	r3, [pc, #108]	@ (80033f8 <HAL_RCC_OscConfig+0x240>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f003 0302 	and.w	r3, r3, #2
 8003392:	2b00      	cmp	r3, #0
 8003394:	d1f0      	bne.n	8003378 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f003 0308 	and.w	r3, r3, #8
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d036      	beq.n	8003410 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	695b      	ldr	r3, [r3, #20]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d016      	beq.n	80033d8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80033aa:	4b15      	ldr	r3, [pc, #84]	@ (8003400 <HAL_RCC_OscConfig+0x248>)
 80033ac:	2201      	movs	r2, #1
 80033ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033b0:	f7fe fc00 	bl	8001bb4 <HAL_GetTick>
 80033b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033b6:	e008      	b.n	80033ca <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033b8:	f7fe fbfc 	bl	8001bb4 <HAL_GetTick>
 80033bc:	4602      	mov	r2, r0
 80033be:	693b      	ldr	r3, [r7, #16]
 80033c0:	1ad3      	subs	r3, r2, r3
 80033c2:	2b02      	cmp	r3, #2
 80033c4:	d901      	bls.n	80033ca <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80033c6:	2303      	movs	r3, #3
 80033c8:	e167      	b.n	800369a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033ca:	4b0b      	ldr	r3, [pc, #44]	@ (80033f8 <HAL_RCC_OscConfig+0x240>)
 80033cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80033ce:	f003 0302 	and.w	r3, r3, #2
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d0f0      	beq.n	80033b8 <HAL_RCC_OscConfig+0x200>
 80033d6:	e01b      	b.n	8003410 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80033d8:	4b09      	ldr	r3, [pc, #36]	@ (8003400 <HAL_RCC_OscConfig+0x248>)
 80033da:	2200      	movs	r2, #0
 80033dc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033de:	f7fe fbe9 	bl	8001bb4 <HAL_GetTick>
 80033e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033e4:	e00e      	b.n	8003404 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033e6:	f7fe fbe5 	bl	8001bb4 <HAL_GetTick>
 80033ea:	4602      	mov	r2, r0
 80033ec:	693b      	ldr	r3, [r7, #16]
 80033ee:	1ad3      	subs	r3, r2, r3
 80033f0:	2b02      	cmp	r3, #2
 80033f2:	d907      	bls.n	8003404 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80033f4:	2303      	movs	r3, #3
 80033f6:	e150      	b.n	800369a <HAL_RCC_OscConfig+0x4e2>
 80033f8:	40023800 	.word	0x40023800
 80033fc:	42470000 	.word	0x42470000
 8003400:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003404:	4b88      	ldr	r3, [pc, #544]	@ (8003628 <HAL_RCC_OscConfig+0x470>)
 8003406:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003408:	f003 0302 	and.w	r3, r3, #2
 800340c:	2b00      	cmp	r3, #0
 800340e:	d1ea      	bne.n	80033e6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f003 0304 	and.w	r3, r3, #4
 8003418:	2b00      	cmp	r3, #0
 800341a:	f000 8097 	beq.w	800354c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800341e:	2300      	movs	r3, #0
 8003420:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003422:	4b81      	ldr	r3, [pc, #516]	@ (8003628 <HAL_RCC_OscConfig+0x470>)
 8003424:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003426:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800342a:	2b00      	cmp	r3, #0
 800342c:	d10f      	bne.n	800344e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800342e:	2300      	movs	r3, #0
 8003430:	60bb      	str	r3, [r7, #8]
 8003432:	4b7d      	ldr	r3, [pc, #500]	@ (8003628 <HAL_RCC_OscConfig+0x470>)
 8003434:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003436:	4a7c      	ldr	r2, [pc, #496]	@ (8003628 <HAL_RCC_OscConfig+0x470>)
 8003438:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800343c:	6413      	str	r3, [r2, #64]	@ 0x40
 800343e:	4b7a      	ldr	r3, [pc, #488]	@ (8003628 <HAL_RCC_OscConfig+0x470>)
 8003440:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003442:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003446:	60bb      	str	r3, [r7, #8]
 8003448:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800344a:	2301      	movs	r3, #1
 800344c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800344e:	4b77      	ldr	r3, [pc, #476]	@ (800362c <HAL_RCC_OscConfig+0x474>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003456:	2b00      	cmp	r3, #0
 8003458:	d118      	bne.n	800348c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800345a:	4b74      	ldr	r3, [pc, #464]	@ (800362c <HAL_RCC_OscConfig+0x474>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	4a73      	ldr	r2, [pc, #460]	@ (800362c <HAL_RCC_OscConfig+0x474>)
 8003460:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003464:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003466:	f7fe fba5 	bl	8001bb4 <HAL_GetTick>
 800346a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800346c:	e008      	b.n	8003480 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800346e:	f7fe fba1 	bl	8001bb4 <HAL_GetTick>
 8003472:	4602      	mov	r2, r0
 8003474:	693b      	ldr	r3, [r7, #16]
 8003476:	1ad3      	subs	r3, r2, r3
 8003478:	2b02      	cmp	r3, #2
 800347a:	d901      	bls.n	8003480 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800347c:	2303      	movs	r3, #3
 800347e:	e10c      	b.n	800369a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003480:	4b6a      	ldr	r3, [pc, #424]	@ (800362c <HAL_RCC_OscConfig+0x474>)
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003488:	2b00      	cmp	r3, #0
 800348a:	d0f0      	beq.n	800346e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	689b      	ldr	r3, [r3, #8]
 8003490:	2b01      	cmp	r3, #1
 8003492:	d106      	bne.n	80034a2 <HAL_RCC_OscConfig+0x2ea>
 8003494:	4b64      	ldr	r3, [pc, #400]	@ (8003628 <HAL_RCC_OscConfig+0x470>)
 8003496:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003498:	4a63      	ldr	r2, [pc, #396]	@ (8003628 <HAL_RCC_OscConfig+0x470>)
 800349a:	f043 0301 	orr.w	r3, r3, #1
 800349e:	6713      	str	r3, [r2, #112]	@ 0x70
 80034a0:	e01c      	b.n	80034dc <HAL_RCC_OscConfig+0x324>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	689b      	ldr	r3, [r3, #8]
 80034a6:	2b05      	cmp	r3, #5
 80034a8:	d10c      	bne.n	80034c4 <HAL_RCC_OscConfig+0x30c>
 80034aa:	4b5f      	ldr	r3, [pc, #380]	@ (8003628 <HAL_RCC_OscConfig+0x470>)
 80034ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034ae:	4a5e      	ldr	r2, [pc, #376]	@ (8003628 <HAL_RCC_OscConfig+0x470>)
 80034b0:	f043 0304 	orr.w	r3, r3, #4
 80034b4:	6713      	str	r3, [r2, #112]	@ 0x70
 80034b6:	4b5c      	ldr	r3, [pc, #368]	@ (8003628 <HAL_RCC_OscConfig+0x470>)
 80034b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034ba:	4a5b      	ldr	r2, [pc, #364]	@ (8003628 <HAL_RCC_OscConfig+0x470>)
 80034bc:	f043 0301 	orr.w	r3, r3, #1
 80034c0:	6713      	str	r3, [r2, #112]	@ 0x70
 80034c2:	e00b      	b.n	80034dc <HAL_RCC_OscConfig+0x324>
 80034c4:	4b58      	ldr	r3, [pc, #352]	@ (8003628 <HAL_RCC_OscConfig+0x470>)
 80034c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034c8:	4a57      	ldr	r2, [pc, #348]	@ (8003628 <HAL_RCC_OscConfig+0x470>)
 80034ca:	f023 0301 	bic.w	r3, r3, #1
 80034ce:	6713      	str	r3, [r2, #112]	@ 0x70
 80034d0:	4b55      	ldr	r3, [pc, #340]	@ (8003628 <HAL_RCC_OscConfig+0x470>)
 80034d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034d4:	4a54      	ldr	r2, [pc, #336]	@ (8003628 <HAL_RCC_OscConfig+0x470>)
 80034d6:	f023 0304 	bic.w	r3, r3, #4
 80034da:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	689b      	ldr	r3, [r3, #8]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d015      	beq.n	8003510 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034e4:	f7fe fb66 	bl	8001bb4 <HAL_GetTick>
 80034e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034ea:	e00a      	b.n	8003502 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034ec:	f7fe fb62 	bl	8001bb4 <HAL_GetTick>
 80034f0:	4602      	mov	r2, r0
 80034f2:	693b      	ldr	r3, [r7, #16]
 80034f4:	1ad3      	subs	r3, r2, r3
 80034f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d901      	bls.n	8003502 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80034fe:	2303      	movs	r3, #3
 8003500:	e0cb      	b.n	800369a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003502:	4b49      	ldr	r3, [pc, #292]	@ (8003628 <HAL_RCC_OscConfig+0x470>)
 8003504:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003506:	f003 0302 	and.w	r3, r3, #2
 800350a:	2b00      	cmp	r3, #0
 800350c:	d0ee      	beq.n	80034ec <HAL_RCC_OscConfig+0x334>
 800350e:	e014      	b.n	800353a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003510:	f7fe fb50 	bl	8001bb4 <HAL_GetTick>
 8003514:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003516:	e00a      	b.n	800352e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003518:	f7fe fb4c 	bl	8001bb4 <HAL_GetTick>
 800351c:	4602      	mov	r2, r0
 800351e:	693b      	ldr	r3, [r7, #16]
 8003520:	1ad3      	subs	r3, r2, r3
 8003522:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003526:	4293      	cmp	r3, r2
 8003528:	d901      	bls.n	800352e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800352a:	2303      	movs	r3, #3
 800352c:	e0b5      	b.n	800369a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800352e:	4b3e      	ldr	r3, [pc, #248]	@ (8003628 <HAL_RCC_OscConfig+0x470>)
 8003530:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003532:	f003 0302 	and.w	r3, r3, #2
 8003536:	2b00      	cmp	r3, #0
 8003538:	d1ee      	bne.n	8003518 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800353a:	7dfb      	ldrb	r3, [r7, #23]
 800353c:	2b01      	cmp	r3, #1
 800353e:	d105      	bne.n	800354c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003540:	4b39      	ldr	r3, [pc, #228]	@ (8003628 <HAL_RCC_OscConfig+0x470>)
 8003542:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003544:	4a38      	ldr	r2, [pc, #224]	@ (8003628 <HAL_RCC_OscConfig+0x470>)
 8003546:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800354a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	699b      	ldr	r3, [r3, #24]
 8003550:	2b00      	cmp	r3, #0
 8003552:	f000 80a1 	beq.w	8003698 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003556:	4b34      	ldr	r3, [pc, #208]	@ (8003628 <HAL_RCC_OscConfig+0x470>)
 8003558:	689b      	ldr	r3, [r3, #8]
 800355a:	f003 030c 	and.w	r3, r3, #12
 800355e:	2b08      	cmp	r3, #8
 8003560:	d05c      	beq.n	800361c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	699b      	ldr	r3, [r3, #24]
 8003566:	2b02      	cmp	r3, #2
 8003568:	d141      	bne.n	80035ee <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800356a:	4b31      	ldr	r3, [pc, #196]	@ (8003630 <HAL_RCC_OscConfig+0x478>)
 800356c:	2200      	movs	r2, #0
 800356e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003570:	f7fe fb20 	bl	8001bb4 <HAL_GetTick>
 8003574:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003576:	e008      	b.n	800358a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003578:	f7fe fb1c 	bl	8001bb4 <HAL_GetTick>
 800357c:	4602      	mov	r2, r0
 800357e:	693b      	ldr	r3, [r7, #16]
 8003580:	1ad3      	subs	r3, r2, r3
 8003582:	2b02      	cmp	r3, #2
 8003584:	d901      	bls.n	800358a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003586:	2303      	movs	r3, #3
 8003588:	e087      	b.n	800369a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800358a:	4b27      	ldr	r3, [pc, #156]	@ (8003628 <HAL_RCC_OscConfig+0x470>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003592:	2b00      	cmp	r3, #0
 8003594:	d1f0      	bne.n	8003578 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	69da      	ldr	r2, [r3, #28]
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6a1b      	ldr	r3, [r3, #32]
 800359e:	431a      	orrs	r2, r3
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035a4:	019b      	lsls	r3, r3, #6
 80035a6:	431a      	orrs	r2, r3
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035ac:	085b      	lsrs	r3, r3, #1
 80035ae:	3b01      	subs	r3, #1
 80035b0:	041b      	lsls	r3, r3, #16
 80035b2:	431a      	orrs	r2, r3
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035b8:	061b      	lsls	r3, r3, #24
 80035ba:	491b      	ldr	r1, [pc, #108]	@ (8003628 <HAL_RCC_OscConfig+0x470>)
 80035bc:	4313      	orrs	r3, r2
 80035be:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80035c0:	4b1b      	ldr	r3, [pc, #108]	@ (8003630 <HAL_RCC_OscConfig+0x478>)
 80035c2:	2201      	movs	r2, #1
 80035c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035c6:	f7fe faf5 	bl	8001bb4 <HAL_GetTick>
 80035ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035cc:	e008      	b.n	80035e0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035ce:	f7fe faf1 	bl	8001bb4 <HAL_GetTick>
 80035d2:	4602      	mov	r2, r0
 80035d4:	693b      	ldr	r3, [r7, #16]
 80035d6:	1ad3      	subs	r3, r2, r3
 80035d8:	2b02      	cmp	r3, #2
 80035da:	d901      	bls.n	80035e0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80035dc:	2303      	movs	r3, #3
 80035de:	e05c      	b.n	800369a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035e0:	4b11      	ldr	r3, [pc, #68]	@ (8003628 <HAL_RCC_OscConfig+0x470>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d0f0      	beq.n	80035ce <HAL_RCC_OscConfig+0x416>
 80035ec:	e054      	b.n	8003698 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035ee:	4b10      	ldr	r3, [pc, #64]	@ (8003630 <HAL_RCC_OscConfig+0x478>)
 80035f0:	2200      	movs	r2, #0
 80035f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035f4:	f7fe fade 	bl	8001bb4 <HAL_GetTick>
 80035f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035fa:	e008      	b.n	800360e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035fc:	f7fe fada 	bl	8001bb4 <HAL_GetTick>
 8003600:	4602      	mov	r2, r0
 8003602:	693b      	ldr	r3, [r7, #16]
 8003604:	1ad3      	subs	r3, r2, r3
 8003606:	2b02      	cmp	r3, #2
 8003608:	d901      	bls.n	800360e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800360a:	2303      	movs	r3, #3
 800360c:	e045      	b.n	800369a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800360e:	4b06      	ldr	r3, [pc, #24]	@ (8003628 <HAL_RCC_OscConfig+0x470>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003616:	2b00      	cmp	r3, #0
 8003618:	d1f0      	bne.n	80035fc <HAL_RCC_OscConfig+0x444>
 800361a:	e03d      	b.n	8003698 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	699b      	ldr	r3, [r3, #24]
 8003620:	2b01      	cmp	r3, #1
 8003622:	d107      	bne.n	8003634 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003624:	2301      	movs	r3, #1
 8003626:	e038      	b.n	800369a <HAL_RCC_OscConfig+0x4e2>
 8003628:	40023800 	.word	0x40023800
 800362c:	40007000 	.word	0x40007000
 8003630:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003634:	4b1b      	ldr	r3, [pc, #108]	@ (80036a4 <HAL_RCC_OscConfig+0x4ec>)
 8003636:	685b      	ldr	r3, [r3, #4]
 8003638:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	699b      	ldr	r3, [r3, #24]
 800363e:	2b01      	cmp	r3, #1
 8003640:	d028      	beq.n	8003694 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800364c:	429a      	cmp	r2, r3
 800364e:	d121      	bne.n	8003694 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800365a:	429a      	cmp	r2, r3
 800365c:	d11a      	bne.n	8003694 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800365e:	68fa      	ldr	r2, [r7, #12]
 8003660:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003664:	4013      	ands	r3, r2
 8003666:	687a      	ldr	r2, [r7, #4]
 8003668:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800366a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800366c:	4293      	cmp	r3, r2
 800366e:	d111      	bne.n	8003694 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800367a:	085b      	lsrs	r3, r3, #1
 800367c:	3b01      	subs	r3, #1
 800367e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003680:	429a      	cmp	r2, r3
 8003682:	d107      	bne.n	8003694 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800368e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003690:	429a      	cmp	r2, r3
 8003692:	d001      	beq.n	8003698 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003694:	2301      	movs	r3, #1
 8003696:	e000      	b.n	800369a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003698:	2300      	movs	r3, #0
}
 800369a:	4618      	mov	r0, r3
 800369c:	3718      	adds	r7, #24
 800369e:	46bd      	mov	sp, r7
 80036a0:	bd80      	pop	{r7, pc}
 80036a2:	bf00      	nop
 80036a4:	40023800 	.word	0x40023800

080036a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b084      	sub	sp, #16
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
 80036b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d101      	bne.n	80036bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80036b8:	2301      	movs	r3, #1
 80036ba:	e0cc      	b.n	8003856 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80036bc:	4b68      	ldr	r3, [pc, #416]	@ (8003860 <HAL_RCC_ClockConfig+0x1b8>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f003 030f 	and.w	r3, r3, #15
 80036c4:	683a      	ldr	r2, [r7, #0]
 80036c6:	429a      	cmp	r2, r3
 80036c8:	d90c      	bls.n	80036e4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036ca:	4b65      	ldr	r3, [pc, #404]	@ (8003860 <HAL_RCC_ClockConfig+0x1b8>)
 80036cc:	683a      	ldr	r2, [r7, #0]
 80036ce:	b2d2      	uxtb	r2, r2
 80036d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80036d2:	4b63      	ldr	r3, [pc, #396]	@ (8003860 <HAL_RCC_ClockConfig+0x1b8>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f003 030f 	and.w	r3, r3, #15
 80036da:	683a      	ldr	r2, [r7, #0]
 80036dc:	429a      	cmp	r2, r3
 80036de:	d001      	beq.n	80036e4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80036e0:	2301      	movs	r3, #1
 80036e2:	e0b8      	b.n	8003856 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f003 0302 	and.w	r3, r3, #2
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d020      	beq.n	8003732 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f003 0304 	and.w	r3, r3, #4
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d005      	beq.n	8003708 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80036fc:	4b59      	ldr	r3, [pc, #356]	@ (8003864 <HAL_RCC_ClockConfig+0x1bc>)
 80036fe:	689b      	ldr	r3, [r3, #8]
 8003700:	4a58      	ldr	r2, [pc, #352]	@ (8003864 <HAL_RCC_ClockConfig+0x1bc>)
 8003702:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003706:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f003 0308 	and.w	r3, r3, #8
 8003710:	2b00      	cmp	r3, #0
 8003712:	d005      	beq.n	8003720 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003714:	4b53      	ldr	r3, [pc, #332]	@ (8003864 <HAL_RCC_ClockConfig+0x1bc>)
 8003716:	689b      	ldr	r3, [r3, #8]
 8003718:	4a52      	ldr	r2, [pc, #328]	@ (8003864 <HAL_RCC_ClockConfig+0x1bc>)
 800371a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800371e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003720:	4b50      	ldr	r3, [pc, #320]	@ (8003864 <HAL_RCC_ClockConfig+0x1bc>)
 8003722:	689b      	ldr	r3, [r3, #8]
 8003724:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	689b      	ldr	r3, [r3, #8]
 800372c:	494d      	ldr	r1, [pc, #308]	@ (8003864 <HAL_RCC_ClockConfig+0x1bc>)
 800372e:	4313      	orrs	r3, r2
 8003730:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f003 0301 	and.w	r3, r3, #1
 800373a:	2b00      	cmp	r3, #0
 800373c:	d044      	beq.n	80037c8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	685b      	ldr	r3, [r3, #4]
 8003742:	2b01      	cmp	r3, #1
 8003744:	d107      	bne.n	8003756 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003746:	4b47      	ldr	r3, [pc, #284]	@ (8003864 <HAL_RCC_ClockConfig+0x1bc>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800374e:	2b00      	cmp	r3, #0
 8003750:	d119      	bne.n	8003786 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003752:	2301      	movs	r3, #1
 8003754:	e07f      	b.n	8003856 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	685b      	ldr	r3, [r3, #4]
 800375a:	2b02      	cmp	r3, #2
 800375c:	d003      	beq.n	8003766 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003762:	2b03      	cmp	r3, #3
 8003764:	d107      	bne.n	8003776 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003766:	4b3f      	ldr	r3, [pc, #252]	@ (8003864 <HAL_RCC_ClockConfig+0x1bc>)
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800376e:	2b00      	cmp	r3, #0
 8003770:	d109      	bne.n	8003786 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003772:	2301      	movs	r3, #1
 8003774:	e06f      	b.n	8003856 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003776:	4b3b      	ldr	r3, [pc, #236]	@ (8003864 <HAL_RCC_ClockConfig+0x1bc>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f003 0302 	and.w	r3, r3, #2
 800377e:	2b00      	cmp	r3, #0
 8003780:	d101      	bne.n	8003786 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003782:	2301      	movs	r3, #1
 8003784:	e067      	b.n	8003856 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003786:	4b37      	ldr	r3, [pc, #220]	@ (8003864 <HAL_RCC_ClockConfig+0x1bc>)
 8003788:	689b      	ldr	r3, [r3, #8]
 800378a:	f023 0203 	bic.w	r2, r3, #3
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	685b      	ldr	r3, [r3, #4]
 8003792:	4934      	ldr	r1, [pc, #208]	@ (8003864 <HAL_RCC_ClockConfig+0x1bc>)
 8003794:	4313      	orrs	r3, r2
 8003796:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003798:	f7fe fa0c 	bl	8001bb4 <HAL_GetTick>
 800379c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800379e:	e00a      	b.n	80037b6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037a0:	f7fe fa08 	bl	8001bb4 <HAL_GetTick>
 80037a4:	4602      	mov	r2, r0
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	1ad3      	subs	r3, r2, r3
 80037aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d901      	bls.n	80037b6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80037b2:	2303      	movs	r3, #3
 80037b4:	e04f      	b.n	8003856 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037b6:	4b2b      	ldr	r3, [pc, #172]	@ (8003864 <HAL_RCC_ClockConfig+0x1bc>)
 80037b8:	689b      	ldr	r3, [r3, #8]
 80037ba:	f003 020c 	and.w	r2, r3, #12
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	685b      	ldr	r3, [r3, #4]
 80037c2:	009b      	lsls	r3, r3, #2
 80037c4:	429a      	cmp	r2, r3
 80037c6:	d1eb      	bne.n	80037a0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80037c8:	4b25      	ldr	r3, [pc, #148]	@ (8003860 <HAL_RCC_ClockConfig+0x1b8>)
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f003 030f 	and.w	r3, r3, #15
 80037d0:	683a      	ldr	r2, [r7, #0]
 80037d2:	429a      	cmp	r2, r3
 80037d4:	d20c      	bcs.n	80037f0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037d6:	4b22      	ldr	r3, [pc, #136]	@ (8003860 <HAL_RCC_ClockConfig+0x1b8>)
 80037d8:	683a      	ldr	r2, [r7, #0]
 80037da:	b2d2      	uxtb	r2, r2
 80037dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80037de:	4b20      	ldr	r3, [pc, #128]	@ (8003860 <HAL_RCC_ClockConfig+0x1b8>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f003 030f 	and.w	r3, r3, #15
 80037e6:	683a      	ldr	r2, [r7, #0]
 80037e8:	429a      	cmp	r2, r3
 80037ea:	d001      	beq.n	80037f0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80037ec:	2301      	movs	r3, #1
 80037ee:	e032      	b.n	8003856 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f003 0304 	and.w	r3, r3, #4
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d008      	beq.n	800380e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80037fc:	4b19      	ldr	r3, [pc, #100]	@ (8003864 <HAL_RCC_ClockConfig+0x1bc>)
 80037fe:	689b      	ldr	r3, [r3, #8]
 8003800:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	68db      	ldr	r3, [r3, #12]
 8003808:	4916      	ldr	r1, [pc, #88]	@ (8003864 <HAL_RCC_ClockConfig+0x1bc>)
 800380a:	4313      	orrs	r3, r2
 800380c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f003 0308 	and.w	r3, r3, #8
 8003816:	2b00      	cmp	r3, #0
 8003818:	d009      	beq.n	800382e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800381a:	4b12      	ldr	r3, [pc, #72]	@ (8003864 <HAL_RCC_ClockConfig+0x1bc>)
 800381c:	689b      	ldr	r3, [r3, #8]
 800381e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	691b      	ldr	r3, [r3, #16]
 8003826:	00db      	lsls	r3, r3, #3
 8003828:	490e      	ldr	r1, [pc, #56]	@ (8003864 <HAL_RCC_ClockConfig+0x1bc>)
 800382a:	4313      	orrs	r3, r2
 800382c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800382e:	f000 f821 	bl	8003874 <HAL_RCC_GetSysClockFreq>
 8003832:	4602      	mov	r2, r0
 8003834:	4b0b      	ldr	r3, [pc, #44]	@ (8003864 <HAL_RCC_ClockConfig+0x1bc>)
 8003836:	689b      	ldr	r3, [r3, #8]
 8003838:	091b      	lsrs	r3, r3, #4
 800383a:	f003 030f 	and.w	r3, r3, #15
 800383e:	490a      	ldr	r1, [pc, #40]	@ (8003868 <HAL_RCC_ClockConfig+0x1c0>)
 8003840:	5ccb      	ldrb	r3, [r1, r3]
 8003842:	fa22 f303 	lsr.w	r3, r2, r3
 8003846:	4a09      	ldr	r2, [pc, #36]	@ (800386c <HAL_RCC_ClockConfig+0x1c4>)
 8003848:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800384a:	4b09      	ldr	r3, [pc, #36]	@ (8003870 <HAL_RCC_ClockConfig+0x1c8>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	4618      	mov	r0, r3
 8003850:	f7fe f96c 	bl	8001b2c <HAL_InitTick>

  return HAL_OK;
 8003854:	2300      	movs	r3, #0
}
 8003856:	4618      	mov	r0, r3
 8003858:	3710      	adds	r7, #16
 800385a:	46bd      	mov	sp, r7
 800385c:	bd80      	pop	{r7, pc}
 800385e:	bf00      	nop
 8003860:	40023c00 	.word	0x40023c00
 8003864:	40023800 	.word	0x40023800
 8003868:	08006f28 	.word	0x08006f28
 800386c:	20000010 	.word	0x20000010
 8003870:	20000014 	.word	0x20000014

08003874 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003874:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003878:	b094      	sub	sp, #80	@ 0x50
 800387a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800387c:	2300      	movs	r3, #0
 800387e:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8003880:	2300      	movs	r3, #0
 8003882:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8003884:	2300      	movs	r3, #0
 8003886:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003888:	2300      	movs	r3, #0
 800388a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800388c:	4b79      	ldr	r3, [pc, #484]	@ (8003a74 <HAL_RCC_GetSysClockFreq+0x200>)
 800388e:	689b      	ldr	r3, [r3, #8]
 8003890:	f003 030c 	and.w	r3, r3, #12
 8003894:	2b08      	cmp	r3, #8
 8003896:	d00d      	beq.n	80038b4 <HAL_RCC_GetSysClockFreq+0x40>
 8003898:	2b08      	cmp	r3, #8
 800389a:	f200 80e1 	bhi.w	8003a60 <HAL_RCC_GetSysClockFreq+0x1ec>
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d002      	beq.n	80038a8 <HAL_RCC_GetSysClockFreq+0x34>
 80038a2:	2b04      	cmp	r3, #4
 80038a4:	d003      	beq.n	80038ae <HAL_RCC_GetSysClockFreq+0x3a>
 80038a6:	e0db      	b.n	8003a60 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80038a8:	4b73      	ldr	r3, [pc, #460]	@ (8003a78 <HAL_RCC_GetSysClockFreq+0x204>)
 80038aa:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80038ac:	e0db      	b.n	8003a66 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80038ae:	4b73      	ldr	r3, [pc, #460]	@ (8003a7c <HAL_RCC_GetSysClockFreq+0x208>)
 80038b0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80038b2:	e0d8      	b.n	8003a66 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80038b4:	4b6f      	ldr	r3, [pc, #444]	@ (8003a74 <HAL_RCC_GetSysClockFreq+0x200>)
 80038b6:	685b      	ldr	r3, [r3, #4]
 80038b8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80038bc:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80038be:	4b6d      	ldr	r3, [pc, #436]	@ (8003a74 <HAL_RCC_GetSysClockFreq+0x200>)
 80038c0:	685b      	ldr	r3, [r3, #4]
 80038c2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d063      	beq.n	8003992 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80038ca:	4b6a      	ldr	r3, [pc, #424]	@ (8003a74 <HAL_RCC_GetSysClockFreq+0x200>)
 80038cc:	685b      	ldr	r3, [r3, #4]
 80038ce:	099b      	lsrs	r3, r3, #6
 80038d0:	2200      	movs	r2, #0
 80038d2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80038d4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80038d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80038d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038dc:	633b      	str	r3, [r7, #48]	@ 0x30
 80038de:	2300      	movs	r3, #0
 80038e0:	637b      	str	r3, [r7, #52]	@ 0x34
 80038e2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80038e6:	4622      	mov	r2, r4
 80038e8:	462b      	mov	r3, r5
 80038ea:	f04f 0000 	mov.w	r0, #0
 80038ee:	f04f 0100 	mov.w	r1, #0
 80038f2:	0159      	lsls	r1, r3, #5
 80038f4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80038f8:	0150      	lsls	r0, r2, #5
 80038fa:	4602      	mov	r2, r0
 80038fc:	460b      	mov	r3, r1
 80038fe:	4621      	mov	r1, r4
 8003900:	1a51      	subs	r1, r2, r1
 8003902:	6139      	str	r1, [r7, #16]
 8003904:	4629      	mov	r1, r5
 8003906:	eb63 0301 	sbc.w	r3, r3, r1
 800390a:	617b      	str	r3, [r7, #20]
 800390c:	f04f 0200 	mov.w	r2, #0
 8003910:	f04f 0300 	mov.w	r3, #0
 8003914:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003918:	4659      	mov	r1, fp
 800391a:	018b      	lsls	r3, r1, #6
 800391c:	4651      	mov	r1, sl
 800391e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003922:	4651      	mov	r1, sl
 8003924:	018a      	lsls	r2, r1, #6
 8003926:	4651      	mov	r1, sl
 8003928:	ebb2 0801 	subs.w	r8, r2, r1
 800392c:	4659      	mov	r1, fp
 800392e:	eb63 0901 	sbc.w	r9, r3, r1
 8003932:	f04f 0200 	mov.w	r2, #0
 8003936:	f04f 0300 	mov.w	r3, #0
 800393a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800393e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003942:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003946:	4690      	mov	r8, r2
 8003948:	4699      	mov	r9, r3
 800394a:	4623      	mov	r3, r4
 800394c:	eb18 0303 	adds.w	r3, r8, r3
 8003950:	60bb      	str	r3, [r7, #8]
 8003952:	462b      	mov	r3, r5
 8003954:	eb49 0303 	adc.w	r3, r9, r3
 8003958:	60fb      	str	r3, [r7, #12]
 800395a:	f04f 0200 	mov.w	r2, #0
 800395e:	f04f 0300 	mov.w	r3, #0
 8003962:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003966:	4629      	mov	r1, r5
 8003968:	024b      	lsls	r3, r1, #9
 800396a:	4621      	mov	r1, r4
 800396c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003970:	4621      	mov	r1, r4
 8003972:	024a      	lsls	r2, r1, #9
 8003974:	4610      	mov	r0, r2
 8003976:	4619      	mov	r1, r3
 8003978:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800397a:	2200      	movs	r2, #0
 800397c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800397e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003980:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003984:	f7fc fc8c 	bl	80002a0 <__aeabi_uldivmod>
 8003988:	4602      	mov	r2, r0
 800398a:	460b      	mov	r3, r1
 800398c:	4613      	mov	r3, r2
 800398e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003990:	e058      	b.n	8003a44 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003992:	4b38      	ldr	r3, [pc, #224]	@ (8003a74 <HAL_RCC_GetSysClockFreq+0x200>)
 8003994:	685b      	ldr	r3, [r3, #4]
 8003996:	099b      	lsrs	r3, r3, #6
 8003998:	2200      	movs	r2, #0
 800399a:	4618      	mov	r0, r3
 800399c:	4611      	mov	r1, r2
 800399e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80039a2:	623b      	str	r3, [r7, #32]
 80039a4:	2300      	movs	r3, #0
 80039a6:	627b      	str	r3, [r7, #36]	@ 0x24
 80039a8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80039ac:	4642      	mov	r2, r8
 80039ae:	464b      	mov	r3, r9
 80039b0:	f04f 0000 	mov.w	r0, #0
 80039b4:	f04f 0100 	mov.w	r1, #0
 80039b8:	0159      	lsls	r1, r3, #5
 80039ba:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80039be:	0150      	lsls	r0, r2, #5
 80039c0:	4602      	mov	r2, r0
 80039c2:	460b      	mov	r3, r1
 80039c4:	4641      	mov	r1, r8
 80039c6:	ebb2 0a01 	subs.w	sl, r2, r1
 80039ca:	4649      	mov	r1, r9
 80039cc:	eb63 0b01 	sbc.w	fp, r3, r1
 80039d0:	f04f 0200 	mov.w	r2, #0
 80039d4:	f04f 0300 	mov.w	r3, #0
 80039d8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80039dc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80039e0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80039e4:	ebb2 040a 	subs.w	r4, r2, sl
 80039e8:	eb63 050b 	sbc.w	r5, r3, fp
 80039ec:	f04f 0200 	mov.w	r2, #0
 80039f0:	f04f 0300 	mov.w	r3, #0
 80039f4:	00eb      	lsls	r3, r5, #3
 80039f6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80039fa:	00e2      	lsls	r2, r4, #3
 80039fc:	4614      	mov	r4, r2
 80039fe:	461d      	mov	r5, r3
 8003a00:	4643      	mov	r3, r8
 8003a02:	18e3      	adds	r3, r4, r3
 8003a04:	603b      	str	r3, [r7, #0]
 8003a06:	464b      	mov	r3, r9
 8003a08:	eb45 0303 	adc.w	r3, r5, r3
 8003a0c:	607b      	str	r3, [r7, #4]
 8003a0e:	f04f 0200 	mov.w	r2, #0
 8003a12:	f04f 0300 	mov.w	r3, #0
 8003a16:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003a1a:	4629      	mov	r1, r5
 8003a1c:	028b      	lsls	r3, r1, #10
 8003a1e:	4621      	mov	r1, r4
 8003a20:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003a24:	4621      	mov	r1, r4
 8003a26:	028a      	lsls	r2, r1, #10
 8003a28:	4610      	mov	r0, r2
 8003a2a:	4619      	mov	r1, r3
 8003a2c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003a2e:	2200      	movs	r2, #0
 8003a30:	61bb      	str	r3, [r7, #24]
 8003a32:	61fa      	str	r2, [r7, #28]
 8003a34:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003a38:	f7fc fc32 	bl	80002a0 <__aeabi_uldivmod>
 8003a3c:	4602      	mov	r2, r0
 8003a3e:	460b      	mov	r3, r1
 8003a40:	4613      	mov	r3, r2
 8003a42:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003a44:	4b0b      	ldr	r3, [pc, #44]	@ (8003a74 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a46:	685b      	ldr	r3, [r3, #4]
 8003a48:	0c1b      	lsrs	r3, r3, #16
 8003a4a:	f003 0303 	and.w	r3, r3, #3
 8003a4e:	3301      	adds	r3, #1
 8003a50:	005b      	lsls	r3, r3, #1
 8003a52:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003a54:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003a56:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003a58:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a5c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003a5e:	e002      	b.n	8003a66 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003a60:	4b05      	ldr	r3, [pc, #20]	@ (8003a78 <HAL_RCC_GetSysClockFreq+0x204>)
 8003a62:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003a64:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003a66:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003a68:	4618      	mov	r0, r3
 8003a6a:	3750      	adds	r7, #80	@ 0x50
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003a72:	bf00      	nop
 8003a74:	40023800 	.word	0x40023800
 8003a78:	00f42400 	.word	0x00f42400
 8003a7c:	007a1200 	.word	0x007a1200

08003a80 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a80:	b480      	push	{r7}
 8003a82:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a84:	4b03      	ldr	r3, [pc, #12]	@ (8003a94 <HAL_RCC_GetHCLKFreq+0x14>)
 8003a86:	681b      	ldr	r3, [r3, #0]
}
 8003a88:	4618      	mov	r0, r3
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a90:	4770      	bx	lr
 8003a92:	bf00      	nop
 8003a94:	20000010 	.word	0x20000010

08003a98 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003a9c:	f7ff fff0 	bl	8003a80 <HAL_RCC_GetHCLKFreq>
 8003aa0:	4602      	mov	r2, r0
 8003aa2:	4b05      	ldr	r3, [pc, #20]	@ (8003ab8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003aa4:	689b      	ldr	r3, [r3, #8]
 8003aa6:	0a9b      	lsrs	r3, r3, #10
 8003aa8:	f003 0307 	and.w	r3, r3, #7
 8003aac:	4903      	ldr	r1, [pc, #12]	@ (8003abc <HAL_RCC_GetPCLK1Freq+0x24>)
 8003aae:	5ccb      	ldrb	r3, [r1, r3]
 8003ab0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	bd80      	pop	{r7, pc}
 8003ab8:	40023800 	.word	0x40023800
 8003abc:	08006f38 	.word	0x08006f38

08003ac0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003ac4:	f7ff ffdc 	bl	8003a80 <HAL_RCC_GetHCLKFreq>
 8003ac8:	4602      	mov	r2, r0
 8003aca:	4b05      	ldr	r3, [pc, #20]	@ (8003ae0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003acc:	689b      	ldr	r3, [r3, #8]
 8003ace:	0b5b      	lsrs	r3, r3, #13
 8003ad0:	f003 0307 	and.w	r3, r3, #7
 8003ad4:	4903      	ldr	r1, [pc, #12]	@ (8003ae4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003ad6:	5ccb      	ldrb	r3, [r1, r3]
 8003ad8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003adc:	4618      	mov	r0, r3
 8003ade:	bd80      	pop	{r7, pc}
 8003ae0:	40023800 	.word	0x40023800
 8003ae4:	08006f38 	.word	0x08006f38

08003ae8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b082      	sub	sp, #8
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d101      	bne.n	8003afa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003af6:	2301      	movs	r3, #1
 8003af8:	e07b      	b.n	8003bf2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d108      	bne.n	8003b14 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	685b      	ldr	r3, [r3, #4]
 8003b06:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003b0a:	d009      	beq.n	8003b20 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2200      	movs	r2, #0
 8003b10:	61da      	str	r2, [r3, #28]
 8003b12:	e005      	b.n	8003b20 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2200      	movs	r2, #0
 8003b18:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2200      	movs	r2, #0
 8003b24:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003b2c:	b2db      	uxtb	r3, r3
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d106      	bne.n	8003b40 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2200      	movs	r2, #0
 8003b36:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003b3a:	6878      	ldr	r0, [r7, #4]
 8003b3c:	f7fd fbb0 	bl	80012a0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2202      	movs	r2, #2
 8003b44:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	681a      	ldr	r2, [r3, #0]
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003b56:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	685b      	ldr	r3, [r3, #4]
 8003b5c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	689b      	ldr	r3, [r3, #8]
 8003b64:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003b68:	431a      	orrs	r2, r3
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	68db      	ldr	r3, [r3, #12]
 8003b6e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003b72:	431a      	orrs	r2, r3
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	691b      	ldr	r3, [r3, #16]
 8003b78:	f003 0302 	and.w	r3, r3, #2
 8003b7c:	431a      	orrs	r2, r3
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	695b      	ldr	r3, [r3, #20]
 8003b82:	f003 0301 	and.w	r3, r3, #1
 8003b86:	431a      	orrs	r2, r3
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	699b      	ldr	r3, [r3, #24]
 8003b8c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003b90:	431a      	orrs	r2, r3
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	69db      	ldr	r3, [r3, #28]
 8003b96:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003b9a:	431a      	orrs	r2, r3
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6a1b      	ldr	r3, [r3, #32]
 8003ba0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ba4:	ea42 0103 	orr.w	r1, r2, r3
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bac:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	430a      	orrs	r2, r1
 8003bb6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	699b      	ldr	r3, [r3, #24]
 8003bbc:	0c1b      	lsrs	r3, r3, #16
 8003bbe:	f003 0104 	and.w	r1, r3, #4
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bc6:	f003 0210 	and.w	r2, r3, #16
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	430a      	orrs	r2, r1
 8003bd0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	69da      	ldr	r2, [r3, #28]
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003be0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2200      	movs	r2, #0
 8003be6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2201      	movs	r2, #1
 8003bec:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8003bf0:	2300      	movs	r3, #0
}
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	3708      	adds	r7, #8
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	bd80      	pop	{r7, pc}

08003bfa <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003bfa:	b580      	push	{r7, lr}
 8003bfc:	b088      	sub	sp, #32
 8003bfe:	af00      	add	r7, sp, #0
 8003c00:	60f8      	str	r0, [r7, #12]
 8003c02:	60b9      	str	r1, [r7, #8]
 8003c04:	603b      	str	r3, [r7, #0]
 8003c06:	4613      	mov	r3, r2
 8003c08:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003c0a:	f7fd ffd3 	bl	8001bb4 <HAL_GetTick>
 8003c0e:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8003c10:	88fb      	ldrh	r3, [r7, #6]
 8003c12:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003c1a:	b2db      	uxtb	r3, r3
 8003c1c:	2b01      	cmp	r3, #1
 8003c1e:	d001      	beq.n	8003c24 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8003c20:	2302      	movs	r3, #2
 8003c22:	e12a      	b.n	8003e7a <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8003c24:	68bb      	ldr	r3, [r7, #8]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d002      	beq.n	8003c30 <HAL_SPI_Transmit+0x36>
 8003c2a:	88fb      	ldrh	r3, [r7, #6]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d101      	bne.n	8003c34 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8003c30:	2301      	movs	r3, #1
 8003c32:	e122      	b.n	8003e7a <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003c3a:	2b01      	cmp	r3, #1
 8003c3c:	d101      	bne.n	8003c42 <HAL_SPI_Transmit+0x48>
 8003c3e:	2302      	movs	r3, #2
 8003c40:	e11b      	b.n	8003e7a <HAL_SPI_Transmit+0x280>
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	2201      	movs	r2, #1
 8003c46:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	2203      	movs	r2, #3
 8003c4e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	2200      	movs	r2, #0
 8003c56:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	68ba      	ldr	r2, [r7, #8]
 8003c5c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	88fa      	ldrh	r2, [r7, #6]
 8003c62:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	88fa      	ldrh	r2, [r7, #6]
 8003c68:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	2200      	movs	r2, #0
 8003c74:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	2200      	movs	r2, #0
 8003c7a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	2200      	movs	r2, #0
 8003c80:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	2200      	movs	r2, #0
 8003c86:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	689b      	ldr	r3, [r3, #8]
 8003c8c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003c90:	d10f      	bne.n	8003cb2 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	681a      	ldr	r2, [r3, #0]
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003ca0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	681a      	ldr	r2, [r3, #0]
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003cb0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003cbc:	2b40      	cmp	r3, #64	@ 0x40
 8003cbe:	d007      	beq.n	8003cd0 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	681a      	ldr	r2, [r3, #0]
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003cce:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	68db      	ldr	r3, [r3, #12]
 8003cd4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003cd8:	d152      	bne.n	8003d80 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	685b      	ldr	r3, [r3, #4]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d002      	beq.n	8003ce8 <HAL_SPI_Transmit+0xee>
 8003ce2:	8b7b      	ldrh	r3, [r7, #26]
 8003ce4:	2b01      	cmp	r3, #1
 8003ce6:	d145      	bne.n	8003d74 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cec:	881a      	ldrh	r2, [r3, #0]
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cf8:	1c9a      	adds	r2, r3, #2
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003d02:	b29b      	uxth	r3, r3
 8003d04:	3b01      	subs	r3, #1
 8003d06:	b29a      	uxth	r2, r3
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003d0c:	e032      	b.n	8003d74 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	689b      	ldr	r3, [r3, #8]
 8003d14:	f003 0302 	and.w	r3, r3, #2
 8003d18:	2b02      	cmp	r3, #2
 8003d1a:	d112      	bne.n	8003d42 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d20:	881a      	ldrh	r2, [r3, #0]
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d2c:	1c9a      	adds	r2, r3, #2
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003d36:	b29b      	uxth	r3, r3
 8003d38:	3b01      	subs	r3, #1
 8003d3a:	b29a      	uxth	r2, r3
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003d40:	e018      	b.n	8003d74 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003d42:	f7fd ff37 	bl	8001bb4 <HAL_GetTick>
 8003d46:	4602      	mov	r2, r0
 8003d48:	69fb      	ldr	r3, [r7, #28]
 8003d4a:	1ad3      	subs	r3, r2, r3
 8003d4c:	683a      	ldr	r2, [r7, #0]
 8003d4e:	429a      	cmp	r2, r3
 8003d50:	d803      	bhi.n	8003d5a <HAL_SPI_Transmit+0x160>
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d58:	d102      	bne.n	8003d60 <HAL_SPI_Transmit+0x166>
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d109      	bne.n	8003d74 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	2201      	movs	r2, #1
 8003d64:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003d70:	2303      	movs	r3, #3
 8003d72:	e082      	b.n	8003e7a <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003d78:	b29b      	uxth	r3, r3
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d1c7      	bne.n	8003d0e <HAL_SPI_Transmit+0x114>
 8003d7e:	e053      	b.n	8003e28 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	685b      	ldr	r3, [r3, #4]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d002      	beq.n	8003d8e <HAL_SPI_Transmit+0x194>
 8003d88:	8b7b      	ldrh	r3, [r7, #26]
 8003d8a:	2b01      	cmp	r3, #1
 8003d8c:	d147      	bne.n	8003e1e <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	330c      	adds	r3, #12
 8003d98:	7812      	ldrb	r2, [r2, #0]
 8003d9a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003da0:	1c5a      	adds	r2, r3, #1
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003daa:	b29b      	uxth	r3, r3
 8003dac:	3b01      	subs	r3, #1
 8003dae:	b29a      	uxth	r2, r3
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003db4:	e033      	b.n	8003e1e <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	689b      	ldr	r3, [r3, #8]
 8003dbc:	f003 0302 	and.w	r3, r3, #2
 8003dc0:	2b02      	cmp	r3, #2
 8003dc2:	d113      	bne.n	8003dec <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	330c      	adds	r3, #12
 8003dce:	7812      	ldrb	r2, [r2, #0]
 8003dd0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dd6:	1c5a      	adds	r2, r3, #1
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003de0:	b29b      	uxth	r3, r3
 8003de2:	3b01      	subs	r3, #1
 8003de4:	b29a      	uxth	r2, r3
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003dea:	e018      	b.n	8003e1e <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003dec:	f7fd fee2 	bl	8001bb4 <HAL_GetTick>
 8003df0:	4602      	mov	r2, r0
 8003df2:	69fb      	ldr	r3, [r7, #28]
 8003df4:	1ad3      	subs	r3, r2, r3
 8003df6:	683a      	ldr	r2, [r7, #0]
 8003df8:	429a      	cmp	r2, r3
 8003dfa:	d803      	bhi.n	8003e04 <HAL_SPI_Transmit+0x20a>
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e02:	d102      	bne.n	8003e0a <HAL_SPI_Transmit+0x210>
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d109      	bne.n	8003e1e <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	2201      	movs	r2, #1
 8003e0e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	2200      	movs	r2, #0
 8003e16:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003e1a:	2303      	movs	r3, #3
 8003e1c:	e02d      	b.n	8003e7a <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003e22:	b29b      	uxth	r3, r3
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d1c6      	bne.n	8003db6 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003e28:	69fa      	ldr	r2, [r7, #28]
 8003e2a:	6839      	ldr	r1, [r7, #0]
 8003e2c:	68f8      	ldr	r0, [r7, #12]
 8003e2e:	f000 fbe7 	bl	8004600 <SPI_EndRxTxTransaction>
 8003e32:	4603      	mov	r3, r0
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d002      	beq.n	8003e3e <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	2220      	movs	r2, #32
 8003e3c:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	689b      	ldr	r3, [r3, #8]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d10a      	bne.n	8003e5c <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003e46:	2300      	movs	r3, #0
 8003e48:	617b      	str	r3, [r7, #20]
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	68db      	ldr	r3, [r3, #12]
 8003e50:	617b      	str	r3, [r7, #20]
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	689b      	ldr	r3, [r3, #8]
 8003e58:	617b      	str	r3, [r7, #20]
 8003e5a:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	2201      	movs	r2, #1
 8003e60:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	2200      	movs	r2, #0
 8003e68:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d001      	beq.n	8003e78 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8003e74:	2301      	movs	r3, #1
 8003e76:	e000      	b.n	8003e7a <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8003e78:	2300      	movs	r3, #0
  }
}
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	3720      	adds	r7, #32
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	bd80      	pop	{r7, pc}

08003e82 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e82:	b580      	push	{r7, lr}
 8003e84:	b088      	sub	sp, #32
 8003e86:	af02      	add	r7, sp, #8
 8003e88:	60f8      	str	r0, [r7, #12]
 8003e8a:	60b9      	str	r1, [r7, #8]
 8003e8c:	603b      	str	r3, [r7, #0]
 8003e8e:	4613      	mov	r3, r2
 8003e90:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003e98:	b2db      	uxtb	r3, r3
 8003e9a:	2b01      	cmp	r3, #1
 8003e9c:	d001      	beq.n	8003ea2 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8003e9e:	2302      	movs	r3, #2
 8003ea0:	e104      	b.n	80040ac <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	685b      	ldr	r3, [r3, #4]
 8003ea6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003eaa:	d112      	bne.n	8003ed2 <HAL_SPI_Receive+0x50>
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	689b      	ldr	r3, [r3, #8]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d10e      	bne.n	8003ed2 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	2204      	movs	r2, #4
 8003eb8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003ebc:	88fa      	ldrh	r2, [r7, #6]
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	9300      	str	r3, [sp, #0]
 8003ec2:	4613      	mov	r3, r2
 8003ec4:	68ba      	ldr	r2, [r7, #8]
 8003ec6:	68b9      	ldr	r1, [r7, #8]
 8003ec8:	68f8      	ldr	r0, [r7, #12]
 8003eca:	f000 f8f3 	bl	80040b4 <HAL_SPI_TransmitReceive>
 8003ece:	4603      	mov	r3, r0
 8003ed0:	e0ec      	b.n	80040ac <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003ed2:	f7fd fe6f 	bl	8001bb4 <HAL_GetTick>
 8003ed6:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8003ed8:	68bb      	ldr	r3, [r7, #8]
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d002      	beq.n	8003ee4 <HAL_SPI_Receive+0x62>
 8003ede:	88fb      	ldrh	r3, [r7, #6]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d101      	bne.n	8003ee8 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8003ee4:	2301      	movs	r3, #1
 8003ee6:	e0e1      	b.n	80040ac <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003eee:	2b01      	cmp	r3, #1
 8003ef0:	d101      	bne.n	8003ef6 <HAL_SPI_Receive+0x74>
 8003ef2:	2302      	movs	r3, #2
 8003ef4:	e0da      	b.n	80040ac <HAL_SPI_Receive+0x22a>
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	2201      	movs	r2, #1
 8003efa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	2204      	movs	r2, #4
 8003f02:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	2200      	movs	r2, #0
 8003f0a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	68ba      	ldr	r2, [r7, #8]
 8003f10:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	88fa      	ldrh	r2, [r7, #6]
 8003f16:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	88fa      	ldrh	r2, [r7, #6]
 8003f1c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	2200      	movs	r2, #0
 8003f22:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	2200      	movs	r2, #0
 8003f28:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	2200      	movs	r2, #0
 8003f34:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	2200      	movs	r2, #0
 8003f3a:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	689b      	ldr	r3, [r3, #8]
 8003f40:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003f44:	d10f      	bne.n	8003f66 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	681a      	ldr	r2, [r3, #0]
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003f54:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	681a      	ldr	r2, [r3, #0]
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003f64:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f70:	2b40      	cmp	r3, #64	@ 0x40
 8003f72:	d007      	beq.n	8003f84 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	681a      	ldr	r2, [r3, #0]
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003f82:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	68db      	ldr	r3, [r3, #12]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d170      	bne.n	800406e <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003f8c:	e035      	b.n	8003ffa <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	689b      	ldr	r3, [r3, #8]
 8003f94:	f003 0301 	and.w	r3, r3, #1
 8003f98:	2b01      	cmp	r3, #1
 8003f9a:	d115      	bne.n	8003fc8 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f103 020c 	add.w	r2, r3, #12
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fa8:	7812      	ldrb	r2, [r2, #0]
 8003faa:	b2d2      	uxtb	r2, r2
 8003fac:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fb2:	1c5a      	adds	r2, r3, #1
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003fbc:	b29b      	uxth	r3, r3
 8003fbe:	3b01      	subs	r3, #1
 8003fc0:	b29a      	uxth	r2, r3
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003fc6:	e018      	b.n	8003ffa <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003fc8:	f7fd fdf4 	bl	8001bb4 <HAL_GetTick>
 8003fcc:	4602      	mov	r2, r0
 8003fce:	697b      	ldr	r3, [r7, #20]
 8003fd0:	1ad3      	subs	r3, r2, r3
 8003fd2:	683a      	ldr	r2, [r7, #0]
 8003fd4:	429a      	cmp	r2, r3
 8003fd6:	d803      	bhi.n	8003fe0 <HAL_SPI_Receive+0x15e>
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fde:	d102      	bne.n	8003fe6 <HAL_SPI_Receive+0x164>
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d109      	bne.n	8003ffa <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	2201      	movs	r2, #1
 8003fea:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003ff6:	2303      	movs	r3, #3
 8003ff8:	e058      	b.n	80040ac <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003ffe:	b29b      	uxth	r3, r3
 8004000:	2b00      	cmp	r3, #0
 8004002:	d1c4      	bne.n	8003f8e <HAL_SPI_Receive+0x10c>
 8004004:	e038      	b.n	8004078 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	689b      	ldr	r3, [r3, #8]
 800400c:	f003 0301 	and.w	r3, r3, #1
 8004010:	2b01      	cmp	r3, #1
 8004012:	d113      	bne.n	800403c <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	68da      	ldr	r2, [r3, #12]
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800401e:	b292      	uxth	r2, r2
 8004020:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004026:	1c9a      	adds	r2, r3, #2
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004030:	b29b      	uxth	r3, r3
 8004032:	3b01      	subs	r3, #1
 8004034:	b29a      	uxth	r2, r3
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800403a:	e018      	b.n	800406e <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800403c:	f7fd fdba 	bl	8001bb4 <HAL_GetTick>
 8004040:	4602      	mov	r2, r0
 8004042:	697b      	ldr	r3, [r7, #20]
 8004044:	1ad3      	subs	r3, r2, r3
 8004046:	683a      	ldr	r2, [r7, #0]
 8004048:	429a      	cmp	r2, r3
 800404a:	d803      	bhi.n	8004054 <HAL_SPI_Receive+0x1d2>
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004052:	d102      	bne.n	800405a <HAL_SPI_Receive+0x1d8>
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	2b00      	cmp	r3, #0
 8004058:	d109      	bne.n	800406e <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	2201      	movs	r2, #1
 800405e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	2200      	movs	r2, #0
 8004066:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800406a:	2303      	movs	r3, #3
 800406c:	e01e      	b.n	80040ac <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004072:	b29b      	uxth	r3, r3
 8004074:	2b00      	cmp	r3, #0
 8004076:	d1c6      	bne.n	8004006 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004078:	697a      	ldr	r2, [r7, #20]
 800407a:	6839      	ldr	r1, [r7, #0]
 800407c:	68f8      	ldr	r0, [r7, #12]
 800407e:	f000 fa59 	bl	8004534 <SPI_EndRxTransaction>
 8004082:	4603      	mov	r3, r0
 8004084:	2b00      	cmp	r3, #0
 8004086:	d002      	beq.n	800408e <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	2220      	movs	r2, #32
 800408c:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	2201      	movs	r2, #1
 8004092:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	2200      	movs	r2, #0
 800409a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d001      	beq.n	80040aa <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 80040a6:	2301      	movs	r3, #1
 80040a8:	e000      	b.n	80040ac <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 80040aa:	2300      	movs	r3, #0
  }
}
 80040ac:	4618      	mov	r0, r3
 80040ae:	3718      	adds	r7, #24
 80040b0:	46bd      	mov	sp, r7
 80040b2:	bd80      	pop	{r7, pc}

080040b4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b08a      	sub	sp, #40	@ 0x28
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	60f8      	str	r0, [r7, #12]
 80040bc:	60b9      	str	r1, [r7, #8]
 80040be:	607a      	str	r2, [r7, #4]
 80040c0:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80040c2:	2301      	movs	r3, #1
 80040c4:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80040c6:	f7fd fd75 	bl	8001bb4 <HAL_GetTick>
 80040ca:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80040d2:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	685b      	ldr	r3, [r3, #4]
 80040d8:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80040da:	887b      	ldrh	r3, [r7, #2]
 80040dc:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80040de:	7ffb      	ldrb	r3, [r7, #31]
 80040e0:	2b01      	cmp	r3, #1
 80040e2:	d00c      	beq.n	80040fe <HAL_SPI_TransmitReceive+0x4a>
 80040e4:	69bb      	ldr	r3, [r7, #24]
 80040e6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80040ea:	d106      	bne.n	80040fa <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	689b      	ldr	r3, [r3, #8]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d102      	bne.n	80040fa <HAL_SPI_TransmitReceive+0x46>
 80040f4:	7ffb      	ldrb	r3, [r7, #31]
 80040f6:	2b04      	cmp	r3, #4
 80040f8:	d001      	beq.n	80040fe <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 80040fa:	2302      	movs	r3, #2
 80040fc:	e17f      	b.n	80043fe <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80040fe:	68bb      	ldr	r3, [r7, #8]
 8004100:	2b00      	cmp	r3, #0
 8004102:	d005      	beq.n	8004110 <HAL_SPI_TransmitReceive+0x5c>
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2b00      	cmp	r3, #0
 8004108:	d002      	beq.n	8004110 <HAL_SPI_TransmitReceive+0x5c>
 800410a:	887b      	ldrh	r3, [r7, #2]
 800410c:	2b00      	cmp	r3, #0
 800410e:	d101      	bne.n	8004114 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8004110:	2301      	movs	r3, #1
 8004112:	e174      	b.n	80043fe <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800411a:	2b01      	cmp	r3, #1
 800411c:	d101      	bne.n	8004122 <HAL_SPI_TransmitReceive+0x6e>
 800411e:	2302      	movs	r3, #2
 8004120:	e16d      	b.n	80043fe <HAL_SPI_TransmitReceive+0x34a>
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	2201      	movs	r2, #1
 8004126:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004130:	b2db      	uxtb	r3, r3
 8004132:	2b04      	cmp	r3, #4
 8004134:	d003      	beq.n	800413e <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	2205      	movs	r2, #5
 800413a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	2200      	movs	r2, #0
 8004142:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	687a      	ldr	r2, [r7, #4]
 8004148:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	887a      	ldrh	r2, [r7, #2]
 800414e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	887a      	ldrh	r2, [r7, #2]
 8004154:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	68ba      	ldr	r2, [r7, #8]
 800415a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	887a      	ldrh	r2, [r7, #2]
 8004160:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	887a      	ldrh	r2, [r7, #2]
 8004166:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	2200      	movs	r2, #0
 800416c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	2200      	movs	r2, #0
 8004172:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800417e:	2b40      	cmp	r3, #64	@ 0x40
 8004180:	d007      	beq.n	8004192 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	681a      	ldr	r2, [r3, #0]
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004190:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	68db      	ldr	r3, [r3, #12]
 8004196:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800419a:	d17e      	bne.n	800429a <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	685b      	ldr	r3, [r3, #4]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d002      	beq.n	80041aa <HAL_SPI_TransmitReceive+0xf6>
 80041a4:	8afb      	ldrh	r3, [r7, #22]
 80041a6:	2b01      	cmp	r3, #1
 80041a8:	d16c      	bne.n	8004284 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041ae:	881a      	ldrh	r2, [r3, #0]
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041ba:	1c9a      	adds	r2, r3, #2
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80041c4:	b29b      	uxth	r3, r3
 80041c6:	3b01      	subs	r3, #1
 80041c8:	b29a      	uxth	r2, r3
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80041ce:	e059      	b.n	8004284 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	689b      	ldr	r3, [r3, #8]
 80041d6:	f003 0302 	and.w	r3, r3, #2
 80041da:	2b02      	cmp	r3, #2
 80041dc:	d11b      	bne.n	8004216 <HAL_SPI_TransmitReceive+0x162>
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80041e2:	b29b      	uxth	r3, r3
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d016      	beq.n	8004216 <HAL_SPI_TransmitReceive+0x162>
 80041e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041ea:	2b01      	cmp	r3, #1
 80041ec:	d113      	bne.n	8004216 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041f2:	881a      	ldrh	r2, [r3, #0]
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041fe:	1c9a      	adds	r2, r3, #2
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004208:	b29b      	uxth	r3, r3
 800420a:	3b01      	subs	r3, #1
 800420c:	b29a      	uxth	r2, r3
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004212:	2300      	movs	r3, #0
 8004214:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	689b      	ldr	r3, [r3, #8]
 800421c:	f003 0301 	and.w	r3, r3, #1
 8004220:	2b01      	cmp	r3, #1
 8004222:	d119      	bne.n	8004258 <HAL_SPI_TransmitReceive+0x1a4>
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004228:	b29b      	uxth	r3, r3
 800422a:	2b00      	cmp	r3, #0
 800422c:	d014      	beq.n	8004258 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	68da      	ldr	r2, [r3, #12]
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004238:	b292      	uxth	r2, r2
 800423a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004240:	1c9a      	adds	r2, r3, #2
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800424a:	b29b      	uxth	r3, r3
 800424c:	3b01      	subs	r3, #1
 800424e:	b29a      	uxth	r2, r3
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004254:	2301      	movs	r3, #1
 8004256:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004258:	f7fd fcac 	bl	8001bb4 <HAL_GetTick>
 800425c:	4602      	mov	r2, r0
 800425e:	6a3b      	ldr	r3, [r7, #32]
 8004260:	1ad3      	subs	r3, r2, r3
 8004262:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004264:	429a      	cmp	r2, r3
 8004266:	d80d      	bhi.n	8004284 <HAL_SPI_TransmitReceive+0x1d0>
 8004268:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800426a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800426e:	d009      	beq.n	8004284 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	2201      	movs	r2, #1
 8004274:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	2200      	movs	r2, #0
 800427c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8004280:	2303      	movs	r3, #3
 8004282:	e0bc      	b.n	80043fe <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004288:	b29b      	uxth	r3, r3
 800428a:	2b00      	cmp	r3, #0
 800428c:	d1a0      	bne.n	80041d0 <HAL_SPI_TransmitReceive+0x11c>
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004292:	b29b      	uxth	r3, r3
 8004294:	2b00      	cmp	r3, #0
 8004296:	d19b      	bne.n	80041d0 <HAL_SPI_TransmitReceive+0x11c>
 8004298:	e082      	b.n	80043a0 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	685b      	ldr	r3, [r3, #4]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d002      	beq.n	80042a8 <HAL_SPI_TransmitReceive+0x1f4>
 80042a2:	8afb      	ldrh	r3, [r7, #22]
 80042a4:	2b01      	cmp	r3, #1
 80042a6:	d171      	bne.n	800438c <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	330c      	adds	r3, #12
 80042b2:	7812      	ldrb	r2, [r2, #0]
 80042b4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042ba:	1c5a      	adds	r2, r3, #1
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80042c4:	b29b      	uxth	r3, r3
 80042c6:	3b01      	subs	r3, #1
 80042c8:	b29a      	uxth	r2, r3
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80042ce:	e05d      	b.n	800438c <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	689b      	ldr	r3, [r3, #8]
 80042d6:	f003 0302 	and.w	r3, r3, #2
 80042da:	2b02      	cmp	r3, #2
 80042dc:	d11c      	bne.n	8004318 <HAL_SPI_TransmitReceive+0x264>
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80042e2:	b29b      	uxth	r3, r3
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d017      	beq.n	8004318 <HAL_SPI_TransmitReceive+0x264>
 80042e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042ea:	2b01      	cmp	r3, #1
 80042ec:	d114      	bne.n	8004318 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	330c      	adds	r3, #12
 80042f8:	7812      	ldrb	r2, [r2, #0]
 80042fa:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004300:	1c5a      	adds	r2, r3, #1
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800430a:	b29b      	uxth	r3, r3
 800430c:	3b01      	subs	r3, #1
 800430e:	b29a      	uxth	r2, r3
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004314:	2300      	movs	r3, #0
 8004316:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	689b      	ldr	r3, [r3, #8]
 800431e:	f003 0301 	and.w	r3, r3, #1
 8004322:	2b01      	cmp	r3, #1
 8004324:	d119      	bne.n	800435a <HAL_SPI_TransmitReceive+0x2a6>
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800432a:	b29b      	uxth	r3, r3
 800432c:	2b00      	cmp	r3, #0
 800432e:	d014      	beq.n	800435a <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	68da      	ldr	r2, [r3, #12]
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800433a:	b2d2      	uxtb	r2, r2
 800433c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004342:	1c5a      	adds	r2, r3, #1
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800434c:	b29b      	uxth	r3, r3
 800434e:	3b01      	subs	r3, #1
 8004350:	b29a      	uxth	r2, r3
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004356:	2301      	movs	r3, #1
 8004358:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800435a:	f7fd fc2b 	bl	8001bb4 <HAL_GetTick>
 800435e:	4602      	mov	r2, r0
 8004360:	6a3b      	ldr	r3, [r7, #32]
 8004362:	1ad3      	subs	r3, r2, r3
 8004364:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004366:	429a      	cmp	r2, r3
 8004368:	d803      	bhi.n	8004372 <HAL_SPI_TransmitReceive+0x2be>
 800436a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800436c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004370:	d102      	bne.n	8004378 <HAL_SPI_TransmitReceive+0x2c4>
 8004372:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004374:	2b00      	cmp	r3, #0
 8004376:	d109      	bne.n	800438c <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	2201      	movs	r2, #1
 800437c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	2200      	movs	r2, #0
 8004384:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8004388:	2303      	movs	r3, #3
 800438a:	e038      	b.n	80043fe <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004390:	b29b      	uxth	r3, r3
 8004392:	2b00      	cmp	r3, #0
 8004394:	d19c      	bne.n	80042d0 <HAL_SPI_TransmitReceive+0x21c>
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800439a:	b29b      	uxth	r3, r3
 800439c:	2b00      	cmp	r3, #0
 800439e:	d197      	bne.n	80042d0 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80043a0:	6a3a      	ldr	r2, [r7, #32]
 80043a2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80043a4:	68f8      	ldr	r0, [r7, #12]
 80043a6:	f000 f92b 	bl	8004600 <SPI_EndRxTxTransaction>
 80043aa:	4603      	mov	r3, r0
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d008      	beq.n	80043c2 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	2220      	movs	r2, #32
 80043b4:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	2200      	movs	r2, #0
 80043ba:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 80043be:	2301      	movs	r3, #1
 80043c0:	e01d      	b.n	80043fe <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	689b      	ldr	r3, [r3, #8]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d10a      	bne.n	80043e0 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80043ca:	2300      	movs	r3, #0
 80043cc:	613b      	str	r3, [r7, #16]
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	68db      	ldr	r3, [r3, #12]
 80043d4:	613b      	str	r3, [r7, #16]
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	689b      	ldr	r3, [r3, #8]
 80043dc:	613b      	str	r3, [r7, #16]
 80043de:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	2201      	movs	r2, #1
 80043e4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	2200      	movs	r2, #0
 80043ec:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d001      	beq.n	80043fc <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 80043f8:	2301      	movs	r3, #1
 80043fa:	e000      	b.n	80043fe <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 80043fc:	2300      	movs	r3, #0
  }
}
 80043fe:	4618      	mov	r0, r3
 8004400:	3728      	adds	r7, #40	@ 0x28
 8004402:	46bd      	mov	sp, r7
 8004404:	bd80      	pop	{r7, pc}

08004406 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 8004406:	b480      	push	{r7}
 8004408:	b083      	sub	sp, #12
 800440a:	af00      	add	r7, sp, #0
 800440c:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004414:	b2db      	uxtb	r3, r3
}
 8004416:	4618      	mov	r0, r3
 8004418:	370c      	adds	r7, #12
 800441a:	46bd      	mov	sp, r7
 800441c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004420:	4770      	bx	lr
	...

08004424 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004424:	b580      	push	{r7, lr}
 8004426:	b088      	sub	sp, #32
 8004428:	af00      	add	r7, sp, #0
 800442a:	60f8      	str	r0, [r7, #12]
 800442c:	60b9      	str	r1, [r7, #8]
 800442e:	603b      	str	r3, [r7, #0]
 8004430:	4613      	mov	r3, r2
 8004432:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004434:	f7fd fbbe 	bl	8001bb4 <HAL_GetTick>
 8004438:	4602      	mov	r2, r0
 800443a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800443c:	1a9b      	subs	r3, r3, r2
 800443e:	683a      	ldr	r2, [r7, #0]
 8004440:	4413      	add	r3, r2
 8004442:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004444:	f7fd fbb6 	bl	8001bb4 <HAL_GetTick>
 8004448:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800444a:	4b39      	ldr	r3, [pc, #228]	@ (8004530 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	015b      	lsls	r3, r3, #5
 8004450:	0d1b      	lsrs	r3, r3, #20
 8004452:	69fa      	ldr	r2, [r7, #28]
 8004454:	fb02 f303 	mul.w	r3, r2, r3
 8004458:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800445a:	e054      	b.n	8004506 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004462:	d050      	beq.n	8004506 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004464:	f7fd fba6 	bl	8001bb4 <HAL_GetTick>
 8004468:	4602      	mov	r2, r0
 800446a:	69bb      	ldr	r3, [r7, #24]
 800446c:	1ad3      	subs	r3, r2, r3
 800446e:	69fa      	ldr	r2, [r7, #28]
 8004470:	429a      	cmp	r2, r3
 8004472:	d902      	bls.n	800447a <SPI_WaitFlagStateUntilTimeout+0x56>
 8004474:	69fb      	ldr	r3, [r7, #28]
 8004476:	2b00      	cmp	r3, #0
 8004478:	d13d      	bne.n	80044f6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	685a      	ldr	r2, [r3, #4]
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004488:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	685b      	ldr	r3, [r3, #4]
 800448e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004492:	d111      	bne.n	80044b8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	689b      	ldr	r3, [r3, #8]
 8004498:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800449c:	d004      	beq.n	80044a8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	689b      	ldr	r3, [r3, #8]
 80044a2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80044a6:	d107      	bne.n	80044b8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	681a      	ldr	r2, [r3, #0]
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80044b6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044bc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80044c0:	d10f      	bne.n	80044e2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	681a      	ldr	r2, [r3, #0]
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80044d0:	601a      	str	r2, [r3, #0]
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	681a      	ldr	r2, [r3, #0]
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80044e0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	2201      	movs	r2, #1
 80044e6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	2200      	movs	r2, #0
 80044ee:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80044f2:	2303      	movs	r3, #3
 80044f4:	e017      	b.n	8004526 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80044f6:	697b      	ldr	r3, [r7, #20]
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d101      	bne.n	8004500 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80044fc:	2300      	movs	r3, #0
 80044fe:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004500:	697b      	ldr	r3, [r7, #20]
 8004502:	3b01      	subs	r3, #1
 8004504:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	689a      	ldr	r2, [r3, #8]
 800450c:	68bb      	ldr	r3, [r7, #8]
 800450e:	4013      	ands	r3, r2
 8004510:	68ba      	ldr	r2, [r7, #8]
 8004512:	429a      	cmp	r2, r3
 8004514:	bf0c      	ite	eq
 8004516:	2301      	moveq	r3, #1
 8004518:	2300      	movne	r3, #0
 800451a:	b2db      	uxtb	r3, r3
 800451c:	461a      	mov	r2, r3
 800451e:	79fb      	ldrb	r3, [r7, #7]
 8004520:	429a      	cmp	r2, r3
 8004522:	d19b      	bne.n	800445c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004524:	2300      	movs	r3, #0
}
 8004526:	4618      	mov	r0, r3
 8004528:	3720      	adds	r7, #32
 800452a:	46bd      	mov	sp, r7
 800452c:	bd80      	pop	{r7, pc}
 800452e:	bf00      	nop
 8004530:	20000010 	.word	0x20000010

08004534 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004534:	b580      	push	{r7, lr}
 8004536:	b086      	sub	sp, #24
 8004538:	af02      	add	r7, sp, #8
 800453a:	60f8      	str	r0, [r7, #12]
 800453c:	60b9      	str	r1, [r7, #8]
 800453e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	685b      	ldr	r3, [r3, #4]
 8004544:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004548:	d111      	bne.n	800456e <SPI_EndRxTransaction+0x3a>
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	689b      	ldr	r3, [r3, #8]
 800454e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004552:	d004      	beq.n	800455e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	689b      	ldr	r3, [r3, #8]
 8004558:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800455c:	d107      	bne.n	800456e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	681a      	ldr	r2, [r3, #0]
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800456c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	685b      	ldr	r3, [r3, #4]
 8004572:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004576:	d12a      	bne.n	80045ce <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	689b      	ldr	r3, [r3, #8]
 800457c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004580:	d012      	beq.n	80045a8 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	9300      	str	r3, [sp, #0]
 8004586:	68bb      	ldr	r3, [r7, #8]
 8004588:	2200      	movs	r2, #0
 800458a:	2180      	movs	r1, #128	@ 0x80
 800458c:	68f8      	ldr	r0, [r7, #12]
 800458e:	f7ff ff49 	bl	8004424 <SPI_WaitFlagStateUntilTimeout>
 8004592:	4603      	mov	r3, r0
 8004594:	2b00      	cmp	r3, #0
 8004596:	d02d      	beq.n	80045f4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800459c:	f043 0220 	orr.w	r2, r3, #32
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 80045a4:	2303      	movs	r3, #3
 80045a6:	e026      	b.n	80045f6 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	9300      	str	r3, [sp, #0]
 80045ac:	68bb      	ldr	r3, [r7, #8]
 80045ae:	2200      	movs	r2, #0
 80045b0:	2101      	movs	r1, #1
 80045b2:	68f8      	ldr	r0, [r7, #12]
 80045b4:	f7ff ff36 	bl	8004424 <SPI_WaitFlagStateUntilTimeout>
 80045b8:	4603      	mov	r3, r0
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d01a      	beq.n	80045f4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045c2:	f043 0220 	orr.w	r2, r3, #32
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 80045ca:	2303      	movs	r3, #3
 80045cc:	e013      	b.n	80045f6 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	9300      	str	r3, [sp, #0]
 80045d2:	68bb      	ldr	r3, [r7, #8]
 80045d4:	2200      	movs	r2, #0
 80045d6:	2101      	movs	r1, #1
 80045d8:	68f8      	ldr	r0, [r7, #12]
 80045da:	f7ff ff23 	bl	8004424 <SPI_WaitFlagStateUntilTimeout>
 80045de:	4603      	mov	r3, r0
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d007      	beq.n	80045f4 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045e8:	f043 0220 	orr.w	r2, r3, #32
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80045f0:	2303      	movs	r3, #3
 80045f2:	e000      	b.n	80045f6 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80045f4:	2300      	movs	r3, #0
}
 80045f6:	4618      	mov	r0, r3
 80045f8:	3710      	adds	r7, #16
 80045fa:	46bd      	mov	sp, r7
 80045fc:	bd80      	pop	{r7, pc}
	...

08004600 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004600:	b580      	push	{r7, lr}
 8004602:	b088      	sub	sp, #32
 8004604:	af02      	add	r7, sp, #8
 8004606:	60f8      	str	r0, [r7, #12]
 8004608:	60b9      	str	r1, [r7, #8]
 800460a:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	9300      	str	r3, [sp, #0]
 8004610:	68bb      	ldr	r3, [r7, #8]
 8004612:	2201      	movs	r2, #1
 8004614:	2102      	movs	r1, #2
 8004616:	68f8      	ldr	r0, [r7, #12]
 8004618:	f7ff ff04 	bl	8004424 <SPI_WaitFlagStateUntilTimeout>
 800461c:	4603      	mov	r3, r0
 800461e:	2b00      	cmp	r3, #0
 8004620:	d007      	beq.n	8004632 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004626:	f043 0220 	orr.w	r2, r3, #32
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800462e:	2303      	movs	r3, #3
 8004630:	e032      	b.n	8004698 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004632:	4b1b      	ldr	r3, [pc, #108]	@ (80046a0 <SPI_EndRxTxTransaction+0xa0>)
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	4a1b      	ldr	r2, [pc, #108]	@ (80046a4 <SPI_EndRxTxTransaction+0xa4>)
 8004638:	fba2 2303 	umull	r2, r3, r2, r3
 800463c:	0d5b      	lsrs	r3, r3, #21
 800463e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004642:	fb02 f303 	mul.w	r3, r2, r3
 8004646:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	685b      	ldr	r3, [r3, #4]
 800464c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004650:	d112      	bne.n	8004678 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	9300      	str	r3, [sp, #0]
 8004656:	68bb      	ldr	r3, [r7, #8]
 8004658:	2200      	movs	r2, #0
 800465a:	2180      	movs	r1, #128	@ 0x80
 800465c:	68f8      	ldr	r0, [r7, #12]
 800465e:	f7ff fee1 	bl	8004424 <SPI_WaitFlagStateUntilTimeout>
 8004662:	4603      	mov	r3, r0
 8004664:	2b00      	cmp	r3, #0
 8004666:	d016      	beq.n	8004696 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800466c:	f043 0220 	orr.w	r2, r3, #32
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8004674:	2303      	movs	r3, #3
 8004676:	e00f      	b.n	8004698 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004678:	697b      	ldr	r3, [r7, #20]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d00a      	beq.n	8004694 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800467e:	697b      	ldr	r3, [r7, #20]
 8004680:	3b01      	subs	r3, #1
 8004682:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	689b      	ldr	r3, [r3, #8]
 800468a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800468e:	2b80      	cmp	r3, #128	@ 0x80
 8004690:	d0f2      	beq.n	8004678 <SPI_EndRxTxTransaction+0x78>
 8004692:	e000      	b.n	8004696 <SPI_EndRxTxTransaction+0x96>
        break;
 8004694:	bf00      	nop
  }

  return HAL_OK;
 8004696:	2300      	movs	r3, #0
}
 8004698:	4618      	mov	r0, r3
 800469a:	3718      	adds	r7, #24
 800469c:	46bd      	mov	sp, r7
 800469e:	bd80      	pop	{r7, pc}
 80046a0:	20000010 	.word	0x20000010
 80046a4:	165e9f81 	.word	0x165e9f81

080046a8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b082      	sub	sp, #8
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d101      	bne.n	80046ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80046b6:	2301      	movs	r3, #1
 80046b8:	e042      	b.n	8004740 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80046c0:	b2db      	uxtb	r3, r3
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d106      	bne.n	80046d4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	2200      	movs	r2, #0
 80046ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80046ce:	6878      	ldr	r0, [r7, #4]
 80046d0:	f7fc fe2e 	bl	8001330 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2224      	movs	r2, #36	@ 0x24
 80046d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	68da      	ldr	r2, [r3, #12]
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80046ea:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80046ec:	6878      	ldr	r0, [r7, #4]
 80046ee:	f000 f973 	bl	80049d8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	691a      	ldr	r2, [r3, #16]
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004700:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	695a      	ldr	r2, [r3, #20]
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004710:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	68da      	ldr	r2, [r3, #12]
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004720:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	2200      	movs	r2, #0
 8004726:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2220      	movs	r2, #32
 800472c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2220      	movs	r2, #32
 8004734:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2200      	movs	r2, #0
 800473c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800473e:	2300      	movs	r3, #0
}
 8004740:	4618      	mov	r0, r3
 8004742:	3708      	adds	r7, #8
 8004744:	46bd      	mov	sp, r7
 8004746:	bd80      	pop	{r7, pc}

08004748 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004748:	b580      	push	{r7, lr}
 800474a:	b08a      	sub	sp, #40	@ 0x28
 800474c:	af02      	add	r7, sp, #8
 800474e:	60f8      	str	r0, [r7, #12]
 8004750:	60b9      	str	r1, [r7, #8]
 8004752:	603b      	str	r3, [r7, #0]
 8004754:	4613      	mov	r3, r2
 8004756:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004758:	2300      	movs	r3, #0
 800475a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004762:	b2db      	uxtb	r3, r3
 8004764:	2b20      	cmp	r3, #32
 8004766:	d175      	bne.n	8004854 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004768:	68bb      	ldr	r3, [r7, #8]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d002      	beq.n	8004774 <HAL_UART_Transmit+0x2c>
 800476e:	88fb      	ldrh	r3, [r7, #6]
 8004770:	2b00      	cmp	r3, #0
 8004772:	d101      	bne.n	8004778 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004774:	2301      	movs	r3, #1
 8004776:	e06e      	b.n	8004856 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	2200      	movs	r2, #0
 800477c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	2221      	movs	r2, #33	@ 0x21
 8004782:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004786:	f7fd fa15 	bl	8001bb4 <HAL_GetTick>
 800478a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	88fa      	ldrh	r2, [r7, #6]
 8004790:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	88fa      	ldrh	r2, [r7, #6]
 8004796:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	689b      	ldr	r3, [r3, #8]
 800479c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80047a0:	d108      	bne.n	80047b4 <HAL_UART_Transmit+0x6c>
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	691b      	ldr	r3, [r3, #16]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d104      	bne.n	80047b4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80047aa:	2300      	movs	r3, #0
 80047ac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80047ae:	68bb      	ldr	r3, [r7, #8]
 80047b0:	61bb      	str	r3, [r7, #24]
 80047b2:	e003      	b.n	80047bc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80047b4:	68bb      	ldr	r3, [r7, #8]
 80047b6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80047b8:	2300      	movs	r3, #0
 80047ba:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80047bc:	e02e      	b.n	800481c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80047be:	683b      	ldr	r3, [r7, #0]
 80047c0:	9300      	str	r3, [sp, #0]
 80047c2:	697b      	ldr	r3, [r7, #20]
 80047c4:	2200      	movs	r2, #0
 80047c6:	2180      	movs	r1, #128	@ 0x80
 80047c8:	68f8      	ldr	r0, [r7, #12]
 80047ca:	f000 f848 	bl	800485e <UART_WaitOnFlagUntilTimeout>
 80047ce:	4603      	mov	r3, r0
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d005      	beq.n	80047e0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	2220      	movs	r2, #32
 80047d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80047dc:	2303      	movs	r3, #3
 80047de:	e03a      	b.n	8004856 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80047e0:	69fb      	ldr	r3, [r7, #28]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d10b      	bne.n	80047fe <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80047e6:	69bb      	ldr	r3, [r7, #24]
 80047e8:	881b      	ldrh	r3, [r3, #0]
 80047ea:	461a      	mov	r2, r3
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80047f4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80047f6:	69bb      	ldr	r3, [r7, #24]
 80047f8:	3302      	adds	r3, #2
 80047fa:	61bb      	str	r3, [r7, #24]
 80047fc:	e007      	b.n	800480e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80047fe:	69fb      	ldr	r3, [r7, #28]
 8004800:	781a      	ldrb	r2, [r3, #0]
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004808:	69fb      	ldr	r3, [r7, #28]
 800480a:	3301      	adds	r3, #1
 800480c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004812:	b29b      	uxth	r3, r3
 8004814:	3b01      	subs	r3, #1
 8004816:	b29a      	uxth	r2, r3
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004820:	b29b      	uxth	r3, r3
 8004822:	2b00      	cmp	r3, #0
 8004824:	d1cb      	bne.n	80047be <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	9300      	str	r3, [sp, #0]
 800482a:	697b      	ldr	r3, [r7, #20]
 800482c:	2200      	movs	r2, #0
 800482e:	2140      	movs	r1, #64	@ 0x40
 8004830:	68f8      	ldr	r0, [r7, #12]
 8004832:	f000 f814 	bl	800485e <UART_WaitOnFlagUntilTimeout>
 8004836:	4603      	mov	r3, r0
 8004838:	2b00      	cmp	r3, #0
 800483a:	d005      	beq.n	8004848 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	2220      	movs	r2, #32
 8004840:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004844:	2303      	movs	r3, #3
 8004846:	e006      	b.n	8004856 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	2220      	movs	r2, #32
 800484c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004850:	2300      	movs	r3, #0
 8004852:	e000      	b.n	8004856 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004854:	2302      	movs	r3, #2
  }
}
 8004856:	4618      	mov	r0, r3
 8004858:	3720      	adds	r7, #32
 800485a:	46bd      	mov	sp, r7
 800485c:	bd80      	pop	{r7, pc}

0800485e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800485e:	b580      	push	{r7, lr}
 8004860:	b086      	sub	sp, #24
 8004862:	af00      	add	r7, sp, #0
 8004864:	60f8      	str	r0, [r7, #12]
 8004866:	60b9      	str	r1, [r7, #8]
 8004868:	603b      	str	r3, [r7, #0]
 800486a:	4613      	mov	r3, r2
 800486c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800486e:	e03b      	b.n	80048e8 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004870:	6a3b      	ldr	r3, [r7, #32]
 8004872:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004876:	d037      	beq.n	80048e8 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004878:	f7fd f99c 	bl	8001bb4 <HAL_GetTick>
 800487c:	4602      	mov	r2, r0
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	1ad3      	subs	r3, r2, r3
 8004882:	6a3a      	ldr	r2, [r7, #32]
 8004884:	429a      	cmp	r2, r3
 8004886:	d302      	bcc.n	800488e <UART_WaitOnFlagUntilTimeout+0x30>
 8004888:	6a3b      	ldr	r3, [r7, #32]
 800488a:	2b00      	cmp	r3, #0
 800488c:	d101      	bne.n	8004892 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800488e:	2303      	movs	r3, #3
 8004890:	e03a      	b.n	8004908 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	68db      	ldr	r3, [r3, #12]
 8004898:	f003 0304 	and.w	r3, r3, #4
 800489c:	2b00      	cmp	r3, #0
 800489e:	d023      	beq.n	80048e8 <UART_WaitOnFlagUntilTimeout+0x8a>
 80048a0:	68bb      	ldr	r3, [r7, #8]
 80048a2:	2b80      	cmp	r3, #128	@ 0x80
 80048a4:	d020      	beq.n	80048e8 <UART_WaitOnFlagUntilTimeout+0x8a>
 80048a6:	68bb      	ldr	r3, [r7, #8]
 80048a8:	2b40      	cmp	r3, #64	@ 0x40
 80048aa:	d01d      	beq.n	80048e8 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f003 0308 	and.w	r3, r3, #8
 80048b6:	2b08      	cmp	r3, #8
 80048b8:	d116      	bne.n	80048e8 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80048ba:	2300      	movs	r3, #0
 80048bc:	617b      	str	r3, [r7, #20]
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	617b      	str	r3, [r7, #20]
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	685b      	ldr	r3, [r3, #4]
 80048cc:	617b      	str	r3, [r7, #20]
 80048ce:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80048d0:	68f8      	ldr	r0, [r7, #12]
 80048d2:	f000 f81d 	bl	8004910 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	2208      	movs	r2, #8
 80048da:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	2200      	movs	r2, #0
 80048e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80048e4:	2301      	movs	r3, #1
 80048e6:	e00f      	b.n	8004908 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	681a      	ldr	r2, [r3, #0]
 80048ee:	68bb      	ldr	r3, [r7, #8]
 80048f0:	4013      	ands	r3, r2
 80048f2:	68ba      	ldr	r2, [r7, #8]
 80048f4:	429a      	cmp	r2, r3
 80048f6:	bf0c      	ite	eq
 80048f8:	2301      	moveq	r3, #1
 80048fa:	2300      	movne	r3, #0
 80048fc:	b2db      	uxtb	r3, r3
 80048fe:	461a      	mov	r2, r3
 8004900:	79fb      	ldrb	r3, [r7, #7]
 8004902:	429a      	cmp	r2, r3
 8004904:	d0b4      	beq.n	8004870 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004906:	2300      	movs	r3, #0
}
 8004908:	4618      	mov	r0, r3
 800490a:	3718      	adds	r7, #24
 800490c:	46bd      	mov	sp, r7
 800490e:	bd80      	pop	{r7, pc}

08004910 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004910:	b480      	push	{r7}
 8004912:	b095      	sub	sp, #84	@ 0x54
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	330c      	adds	r3, #12
 800491e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004920:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004922:	e853 3f00 	ldrex	r3, [r3]
 8004926:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004928:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800492a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800492e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	330c      	adds	r3, #12
 8004936:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004938:	643a      	str	r2, [r7, #64]	@ 0x40
 800493a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800493c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800493e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004940:	e841 2300 	strex	r3, r2, [r1]
 8004944:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004946:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004948:	2b00      	cmp	r3, #0
 800494a:	d1e5      	bne.n	8004918 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	3314      	adds	r3, #20
 8004952:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004954:	6a3b      	ldr	r3, [r7, #32]
 8004956:	e853 3f00 	ldrex	r3, [r3]
 800495a:	61fb      	str	r3, [r7, #28]
   return(result);
 800495c:	69fb      	ldr	r3, [r7, #28]
 800495e:	f023 0301 	bic.w	r3, r3, #1
 8004962:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	3314      	adds	r3, #20
 800496a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800496c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800496e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004970:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004972:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004974:	e841 2300 	strex	r3, r2, [r1]
 8004978:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800497a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800497c:	2b00      	cmp	r3, #0
 800497e:	d1e5      	bne.n	800494c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004984:	2b01      	cmp	r3, #1
 8004986:	d119      	bne.n	80049bc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	330c      	adds	r3, #12
 800498e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	e853 3f00 	ldrex	r3, [r3]
 8004996:	60bb      	str	r3, [r7, #8]
   return(result);
 8004998:	68bb      	ldr	r3, [r7, #8]
 800499a:	f023 0310 	bic.w	r3, r3, #16
 800499e:	647b      	str	r3, [r7, #68]	@ 0x44
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	330c      	adds	r3, #12
 80049a6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80049a8:	61ba      	str	r2, [r7, #24]
 80049aa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049ac:	6979      	ldr	r1, [r7, #20]
 80049ae:	69ba      	ldr	r2, [r7, #24]
 80049b0:	e841 2300 	strex	r3, r2, [r1]
 80049b4:	613b      	str	r3, [r7, #16]
   return(result);
 80049b6:	693b      	ldr	r3, [r7, #16]
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d1e5      	bne.n	8004988 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2220      	movs	r2, #32
 80049c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2200      	movs	r2, #0
 80049c8:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80049ca:	bf00      	nop
 80049cc:	3754      	adds	r7, #84	@ 0x54
 80049ce:	46bd      	mov	sp, r7
 80049d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d4:	4770      	bx	lr
	...

080049d8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80049d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80049dc:	b0c0      	sub	sp, #256	@ 0x100
 80049de:	af00      	add	r7, sp, #0
 80049e0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80049e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	691b      	ldr	r3, [r3, #16]
 80049ec:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80049f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049f4:	68d9      	ldr	r1, [r3, #12]
 80049f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049fa:	681a      	ldr	r2, [r3, #0]
 80049fc:	ea40 0301 	orr.w	r3, r0, r1
 8004a00:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004a02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a06:	689a      	ldr	r2, [r3, #8]
 8004a08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a0c:	691b      	ldr	r3, [r3, #16]
 8004a0e:	431a      	orrs	r2, r3
 8004a10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a14:	695b      	ldr	r3, [r3, #20]
 8004a16:	431a      	orrs	r2, r3
 8004a18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a1c:	69db      	ldr	r3, [r3, #28]
 8004a1e:	4313      	orrs	r3, r2
 8004a20:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004a24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	68db      	ldr	r3, [r3, #12]
 8004a2c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004a30:	f021 010c 	bic.w	r1, r1, #12
 8004a34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a38:	681a      	ldr	r2, [r3, #0]
 8004a3a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004a3e:	430b      	orrs	r3, r1
 8004a40:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004a42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	695b      	ldr	r3, [r3, #20]
 8004a4a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004a4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a52:	6999      	ldr	r1, [r3, #24]
 8004a54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a58:	681a      	ldr	r2, [r3, #0]
 8004a5a:	ea40 0301 	orr.w	r3, r0, r1
 8004a5e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004a60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a64:	681a      	ldr	r2, [r3, #0]
 8004a66:	4b8f      	ldr	r3, [pc, #572]	@ (8004ca4 <UART_SetConfig+0x2cc>)
 8004a68:	429a      	cmp	r2, r3
 8004a6a:	d005      	beq.n	8004a78 <UART_SetConfig+0xa0>
 8004a6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a70:	681a      	ldr	r2, [r3, #0]
 8004a72:	4b8d      	ldr	r3, [pc, #564]	@ (8004ca8 <UART_SetConfig+0x2d0>)
 8004a74:	429a      	cmp	r2, r3
 8004a76:	d104      	bne.n	8004a82 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004a78:	f7ff f822 	bl	8003ac0 <HAL_RCC_GetPCLK2Freq>
 8004a7c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004a80:	e003      	b.n	8004a8a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004a82:	f7ff f809 	bl	8003a98 <HAL_RCC_GetPCLK1Freq>
 8004a86:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004a8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a8e:	69db      	ldr	r3, [r3, #28]
 8004a90:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004a94:	f040 810c 	bne.w	8004cb0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004a98:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004aa2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004aa6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004aaa:	4622      	mov	r2, r4
 8004aac:	462b      	mov	r3, r5
 8004aae:	1891      	adds	r1, r2, r2
 8004ab0:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004ab2:	415b      	adcs	r3, r3
 8004ab4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004ab6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004aba:	4621      	mov	r1, r4
 8004abc:	eb12 0801 	adds.w	r8, r2, r1
 8004ac0:	4629      	mov	r1, r5
 8004ac2:	eb43 0901 	adc.w	r9, r3, r1
 8004ac6:	f04f 0200 	mov.w	r2, #0
 8004aca:	f04f 0300 	mov.w	r3, #0
 8004ace:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004ad2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004ad6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004ada:	4690      	mov	r8, r2
 8004adc:	4699      	mov	r9, r3
 8004ade:	4623      	mov	r3, r4
 8004ae0:	eb18 0303 	adds.w	r3, r8, r3
 8004ae4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004ae8:	462b      	mov	r3, r5
 8004aea:	eb49 0303 	adc.w	r3, r9, r3
 8004aee:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004af2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004af6:	685b      	ldr	r3, [r3, #4]
 8004af8:	2200      	movs	r2, #0
 8004afa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004afe:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004b02:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004b06:	460b      	mov	r3, r1
 8004b08:	18db      	adds	r3, r3, r3
 8004b0a:	653b      	str	r3, [r7, #80]	@ 0x50
 8004b0c:	4613      	mov	r3, r2
 8004b0e:	eb42 0303 	adc.w	r3, r2, r3
 8004b12:	657b      	str	r3, [r7, #84]	@ 0x54
 8004b14:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004b18:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004b1c:	f7fb fbc0 	bl	80002a0 <__aeabi_uldivmod>
 8004b20:	4602      	mov	r2, r0
 8004b22:	460b      	mov	r3, r1
 8004b24:	4b61      	ldr	r3, [pc, #388]	@ (8004cac <UART_SetConfig+0x2d4>)
 8004b26:	fba3 2302 	umull	r2, r3, r3, r2
 8004b2a:	095b      	lsrs	r3, r3, #5
 8004b2c:	011c      	lsls	r4, r3, #4
 8004b2e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004b32:	2200      	movs	r2, #0
 8004b34:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004b38:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004b3c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004b40:	4642      	mov	r2, r8
 8004b42:	464b      	mov	r3, r9
 8004b44:	1891      	adds	r1, r2, r2
 8004b46:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004b48:	415b      	adcs	r3, r3
 8004b4a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004b4c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004b50:	4641      	mov	r1, r8
 8004b52:	eb12 0a01 	adds.w	sl, r2, r1
 8004b56:	4649      	mov	r1, r9
 8004b58:	eb43 0b01 	adc.w	fp, r3, r1
 8004b5c:	f04f 0200 	mov.w	r2, #0
 8004b60:	f04f 0300 	mov.w	r3, #0
 8004b64:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004b68:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004b6c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004b70:	4692      	mov	sl, r2
 8004b72:	469b      	mov	fp, r3
 8004b74:	4643      	mov	r3, r8
 8004b76:	eb1a 0303 	adds.w	r3, sl, r3
 8004b7a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004b7e:	464b      	mov	r3, r9
 8004b80:	eb4b 0303 	adc.w	r3, fp, r3
 8004b84:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004b88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b8c:	685b      	ldr	r3, [r3, #4]
 8004b8e:	2200      	movs	r2, #0
 8004b90:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004b94:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004b98:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004b9c:	460b      	mov	r3, r1
 8004b9e:	18db      	adds	r3, r3, r3
 8004ba0:	643b      	str	r3, [r7, #64]	@ 0x40
 8004ba2:	4613      	mov	r3, r2
 8004ba4:	eb42 0303 	adc.w	r3, r2, r3
 8004ba8:	647b      	str	r3, [r7, #68]	@ 0x44
 8004baa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004bae:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004bb2:	f7fb fb75 	bl	80002a0 <__aeabi_uldivmod>
 8004bb6:	4602      	mov	r2, r0
 8004bb8:	460b      	mov	r3, r1
 8004bba:	4611      	mov	r1, r2
 8004bbc:	4b3b      	ldr	r3, [pc, #236]	@ (8004cac <UART_SetConfig+0x2d4>)
 8004bbe:	fba3 2301 	umull	r2, r3, r3, r1
 8004bc2:	095b      	lsrs	r3, r3, #5
 8004bc4:	2264      	movs	r2, #100	@ 0x64
 8004bc6:	fb02 f303 	mul.w	r3, r2, r3
 8004bca:	1acb      	subs	r3, r1, r3
 8004bcc:	00db      	lsls	r3, r3, #3
 8004bce:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004bd2:	4b36      	ldr	r3, [pc, #216]	@ (8004cac <UART_SetConfig+0x2d4>)
 8004bd4:	fba3 2302 	umull	r2, r3, r3, r2
 8004bd8:	095b      	lsrs	r3, r3, #5
 8004bda:	005b      	lsls	r3, r3, #1
 8004bdc:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004be0:	441c      	add	r4, r3
 8004be2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004be6:	2200      	movs	r2, #0
 8004be8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004bec:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004bf0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004bf4:	4642      	mov	r2, r8
 8004bf6:	464b      	mov	r3, r9
 8004bf8:	1891      	adds	r1, r2, r2
 8004bfa:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004bfc:	415b      	adcs	r3, r3
 8004bfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004c00:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004c04:	4641      	mov	r1, r8
 8004c06:	1851      	adds	r1, r2, r1
 8004c08:	6339      	str	r1, [r7, #48]	@ 0x30
 8004c0a:	4649      	mov	r1, r9
 8004c0c:	414b      	adcs	r3, r1
 8004c0e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004c10:	f04f 0200 	mov.w	r2, #0
 8004c14:	f04f 0300 	mov.w	r3, #0
 8004c18:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004c1c:	4659      	mov	r1, fp
 8004c1e:	00cb      	lsls	r3, r1, #3
 8004c20:	4651      	mov	r1, sl
 8004c22:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004c26:	4651      	mov	r1, sl
 8004c28:	00ca      	lsls	r2, r1, #3
 8004c2a:	4610      	mov	r0, r2
 8004c2c:	4619      	mov	r1, r3
 8004c2e:	4603      	mov	r3, r0
 8004c30:	4642      	mov	r2, r8
 8004c32:	189b      	adds	r3, r3, r2
 8004c34:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004c38:	464b      	mov	r3, r9
 8004c3a:	460a      	mov	r2, r1
 8004c3c:	eb42 0303 	adc.w	r3, r2, r3
 8004c40:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004c44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c48:	685b      	ldr	r3, [r3, #4]
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004c50:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004c54:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004c58:	460b      	mov	r3, r1
 8004c5a:	18db      	adds	r3, r3, r3
 8004c5c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004c5e:	4613      	mov	r3, r2
 8004c60:	eb42 0303 	adc.w	r3, r2, r3
 8004c64:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004c66:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004c6a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004c6e:	f7fb fb17 	bl	80002a0 <__aeabi_uldivmod>
 8004c72:	4602      	mov	r2, r0
 8004c74:	460b      	mov	r3, r1
 8004c76:	4b0d      	ldr	r3, [pc, #52]	@ (8004cac <UART_SetConfig+0x2d4>)
 8004c78:	fba3 1302 	umull	r1, r3, r3, r2
 8004c7c:	095b      	lsrs	r3, r3, #5
 8004c7e:	2164      	movs	r1, #100	@ 0x64
 8004c80:	fb01 f303 	mul.w	r3, r1, r3
 8004c84:	1ad3      	subs	r3, r2, r3
 8004c86:	00db      	lsls	r3, r3, #3
 8004c88:	3332      	adds	r3, #50	@ 0x32
 8004c8a:	4a08      	ldr	r2, [pc, #32]	@ (8004cac <UART_SetConfig+0x2d4>)
 8004c8c:	fba2 2303 	umull	r2, r3, r2, r3
 8004c90:	095b      	lsrs	r3, r3, #5
 8004c92:	f003 0207 	and.w	r2, r3, #7
 8004c96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	4422      	add	r2, r4
 8004c9e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004ca0:	e106      	b.n	8004eb0 <UART_SetConfig+0x4d8>
 8004ca2:	bf00      	nop
 8004ca4:	40011000 	.word	0x40011000
 8004ca8:	40011400 	.word	0x40011400
 8004cac:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004cb0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004cba:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004cbe:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004cc2:	4642      	mov	r2, r8
 8004cc4:	464b      	mov	r3, r9
 8004cc6:	1891      	adds	r1, r2, r2
 8004cc8:	6239      	str	r1, [r7, #32]
 8004cca:	415b      	adcs	r3, r3
 8004ccc:	627b      	str	r3, [r7, #36]	@ 0x24
 8004cce:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004cd2:	4641      	mov	r1, r8
 8004cd4:	1854      	adds	r4, r2, r1
 8004cd6:	4649      	mov	r1, r9
 8004cd8:	eb43 0501 	adc.w	r5, r3, r1
 8004cdc:	f04f 0200 	mov.w	r2, #0
 8004ce0:	f04f 0300 	mov.w	r3, #0
 8004ce4:	00eb      	lsls	r3, r5, #3
 8004ce6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004cea:	00e2      	lsls	r2, r4, #3
 8004cec:	4614      	mov	r4, r2
 8004cee:	461d      	mov	r5, r3
 8004cf0:	4643      	mov	r3, r8
 8004cf2:	18e3      	adds	r3, r4, r3
 8004cf4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004cf8:	464b      	mov	r3, r9
 8004cfa:	eb45 0303 	adc.w	r3, r5, r3
 8004cfe:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004d02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d06:	685b      	ldr	r3, [r3, #4]
 8004d08:	2200      	movs	r2, #0
 8004d0a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004d0e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004d12:	f04f 0200 	mov.w	r2, #0
 8004d16:	f04f 0300 	mov.w	r3, #0
 8004d1a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004d1e:	4629      	mov	r1, r5
 8004d20:	008b      	lsls	r3, r1, #2
 8004d22:	4621      	mov	r1, r4
 8004d24:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004d28:	4621      	mov	r1, r4
 8004d2a:	008a      	lsls	r2, r1, #2
 8004d2c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004d30:	f7fb fab6 	bl	80002a0 <__aeabi_uldivmod>
 8004d34:	4602      	mov	r2, r0
 8004d36:	460b      	mov	r3, r1
 8004d38:	4b60      	ldr	r3, [pc, #384]	@ (8004ebc <UART_SetConfig+0x4e4>)
 8004d3a:	fba3 2302 	umull	r2, r3, r3, r2
 8004d3e:	095b      	lsrs	r3, r3, #5
 8004d40:	011c      	lsls	r4, r3, #4
 8004d42:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004d46:	2200      	movs	r2, #0
 8004d48:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004d4c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004d50:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004d54:	4642      	mov	r2, r8
 8004d56:	464b      	mov	r3, r9
 8004d58:	1891      	adds	r1, r2, r2
 8004d5a:	61b9      	str	r1, [r7, #24]
 8004d5c:	415b      	adcs	r3, r3
 8004d5e:	61fb      	str	r3, [r7, #28]
 8004d60:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004d64:	4641      	mov	r1, r8
 8004d66:	1851      	adds	r1, r2, r1
 8004d68:	6139      	str	r1, [r7, #16]
 8004d6a:	4649      	mov	r1, r9
 8004d6c:	414b      	adcs	r3, r1
 8004d6e:	617b      	str	r3, [r7, #20]
 8004d70:	f04f 0200 	mov.w	r2, #0
 8004d74:	f04f 0300 	mov.w	r3, #0
 8004d78:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004d7c:	4659      	mov	r1, fp
 8004d7e:	00cb      	lsls	r3, r1, #3
 8004d80:	4651      	mov	r1, sl
 8004d82:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004d86:	4651      	mov	r1, sl
 8004d88:	00ca      	lsls	r2, r1, #3
 8004d8a:	4610      	mov	r0, r2
 8004d8c:	4619      	mov	r1, r3
 8004d8e:	4603      	mov	r3, r0
 8004d90:	4642      	mov	r2, r8
 8004d92:	189b      	adds	r3, r3, r2
 8004d94:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004d98:	464b      	mov	r3, r9
 8004d9a:	460a      	mov	r2, r1
 8004d9c:	eb42 0303 	adc.w	r3, r2, r3
 8004da0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004da4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004da8:	685b      	ldr	r3, [r3, #4]
 8004daa:	2200      	movs	r2, #0
 8004dac:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004dae:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004db0:	f04f 0200 	mov.w	r2, #0
 8004db4:	f04f 0300 	mov.w	r3, #0
 8004db8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004dbc:	4649      	mov	r1, r9
 8004dbe:	008b      	lsls	r3, r1, #2
 8004dc0:	4641      	mov	r1, r8
 8004dc2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004dc6:	4641      	mov	r1, r8
 8004dc8:	008a      	lsls	r2, r1, #2
 8004dca:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004dce:	f7fb fa67 	bl	80002a0 <__aeabi_uldivmod>
 8004dd2:	4602      	mov	r2, r0
 8004dd4:	460b      	mov	r3, r1
 8004dd6:	4611      	mov	r1, r2
 8004dd8:	4b38      	ldr	r3, [pc, #224]	@ (8004ebc <UART_SetConfig+0x4e4>)
 8004dda:	fba3 2301 	umull	r2, r3, r3, r1
 8004dde:	095b      	lsrs	r3, r3, #5
 8004de0:	2264      	movs	r2, #100	@ 0x64
 8004de2:	fb02 f303 	mul.w	r3, r2, r3
 8004de6:	1acb      	subs	r3, r1, r3
 8004de8:	011b      	lsls	r3, r3, #4
 8004dea:	3332      	adds	r3, #50	@ 0x32
 8004dec:	4a33      	ldr	r2, [pc, #204]	@ (8004ebc <UART_SetConfig+0x4e4>)
 8004dee:	fba2 2303 	umull	r2, r3, r2, r3
 8004df2:	095b      	lsrs	r3, r3, #5
 8004df4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004df8:	441c      	add	r4, r3
 8004dfa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004dfe:	2200      	movs	r2, #0
 8004e00:	673b      	str	r3, [r7, #112]	@ 0x70
 8004e02:	677a      	str	r2, [r7, #116]	@ 0x74
 8004e04:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004e08:	4642      	mov	r2, r8
 8004e0a:	464b      	mov	r3, r9
 8004e0c:	1891      	adds	r1, r2, r2
 8004e0e:	60b9      	str	r1, [r7, #8]
 8004e10:	415b      	adcs	r3, r3
 8004e12:	60fb      	str	r3, [r7, #12]
 8004e14:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004e18:	4641      	mov	r1, r8
 8004e1a:	1851      	adds	r1, r2, r1
 8004e1c:	6039      	str	r1, [r7, #0]
 8004e1e:	4649      	mov	r1, r9
 8004e20:	414b      	adcs	r3, r1
 8004e22:	607b      	str	r3, [r7, #4]
 8004e24:	f04f 0200 	mov.w	r2, #0
 8004e28:	f04f 0300 	mov.w	r3, #0
 8004e2c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004e30:	4659      	mov	r1, fp
 8004e32:	00cb      	lsls	r3, r1, #3
 8004e34:	4651      	mov	r1, sl
 8004e36:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004e3a:	4651      	mov	r1, sl
 8004e3c:	00ca      	lsls	r2, r1, #3
 8004e3e:	4610      	mov	r0, r2
 8004e40:	4619      	mov	r1, r3
 8004e42:	4603      	mov	r3, r0
 8004e44:	4642      	mov	r2, r8
 8004e46:	189b      	adds	r3, r3, r2
 8004e48:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004e4a:	464b      	mov	r3, r9
 8004e4c:	460a      	mov	r2, r1
 8004e4e:	eb42 0303 	adc.w	r3, r2, r3
 8004e52:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004e54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e58:	685b      	ldr	r3, [r3, #4]
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	663b      	str	r3, [r7, #96]	@ 0x60
 8004e5e:	667a      	str	r2, [r7, #100]	@ 0x64
 8004e60:	f04f 0200 	mov.w	r2, #0
 8004e64:	f04f 0300 	mov.w	r3, #0
 8004e68:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004e6c:	4649      	mov	r1, r9
 8004e6e:	008b      	lsls	r3, r1, #2
 8004e70:	4641      	mov	r1, r8
 8004e72:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004e76:	4641      	mov	r1, r8
 8004e78:	008a      	lsls	r2, r1, #2
 8004e7a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004e7e:	f7fb fa0f 	bl	80002a0 <__aeabi_uldivmod>
 8004e82:	4602      	mov	r2, r0
 8004e84:	460b      	mov	r3, r1
 8004e86:	4b0d      	ldr	r3, [pc, #52]	@ (8004ebc <UART_SetConfig+0x4e4>)
 8004e88:	fba3 1302 	umull	r1, r3, r3, r2
 8004e8c:	095b      	lsrs	r3, r3, #5
 8004e8e:	2164      	movs	r1, #100	@ 0x64
 8004e90:	fb01 f303 	mul.w	r3, r1, r3
 8004e94:	1ad3      	subs	r3, r2, r3
 8004e96:	011b      	lsls	r3, r3, #4
 8004e98:	3332      	adds	r3, #50	@ 0x32
 8004e9a:	4a08      	ldr	r2, [pc, #32]	@ (8004ebc <UART_SetConfig+0x4e4>)
 8004e9c:	fba2 2303 	umull	r2, r3, r2, r3
 8004ea0:	095b      	lsrs	r3, r3, #5
 8004ea2:	f003 020f 	and.w	r2, r3, #15
 8004ea6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	4422      	add	r2, r4
 8004eae:	609a      	str	r2, [r3, #8]
}
 8004eb0:	bf00      	nop
 8004eb2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004ebc:	51eb851f 	.word	0x51eb851f

08004ec0 <siprintf>:
 8004ec0:	b40e      	push	{r1, r2, r3}
 8004ec2:	b500      	push	{lr}
 8004ec4:	b09c      	sub	sp, #112	@ 0x70
 8004ec6:	ab1d      	add	r3, sp, #116	@ 0x74
 8004ec8:	9002      	str	r0, [sp, #8]
 8004eca:	9006      	str	r0, [sp, #24]
 8004ecc:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004ed0:	4809      	ldr	r0, [pc, #36]	@ (8004ef8 <siprintf+0x38>)
 8004ed2:	9107      	str	r1, [sp, #28]
 8004ed4:	9104      	str	r1, [sp, #16]
 8004ed6:	4909      	ldr	r1, [pc, #36]	@ (8004efc <siprintf+0x3c>)
 8004ed8:	f853 2b04 	ldr.w	r2, [r3], #4
 8004edc:	9105      	str	r1, [sp, #20]
 8004ede:	6800      	ldr	r0, [r0, #0]
 8004ee0:	9301      	str	r3, [sp, #4]
 8004ee2:	a902      	add	r1, sp, #8
 8004ee4:	f000 f994 	bl	8005210 <_svfiprintf_r>
 8004ee8:	9b02      	ldr	r3, [sp, #8]
 8004eea:	2200      	movs	r2, #0
 8004eec:	701a      	strb	r2, [r3, #0]
 8004eee:	b01c      	add	sp, #112	@ 0x70
 8004ef0:	f85d eb04 	ldr.w	lr, [sp], #4
 8004ef4:	b003      	add	sp, #12
 8004ef6:	4770      	bx	lr
 8004ef8:	2000001c 	.word	0x2000001c
 8004efc:	ffff0208 	.word	0xffff0208

08004f00 <memset>:
 8004f00:	4402      	add	r2, r0
 8004f02:	4603      	mov	r3, r0
 8004f04:	4293      	cmp	r3, r2
 8004f06:	d100      	bne.n	8004f0a <memset+0xa>
 8004f08:	4770      	bx	lr
 8004f0a:	f803 1b01 	strb.w	r1, [r3], #1
 8004f0e:	e7f9      	b.n	8004f04 <memset+0x4>

08004f10 <__errno>:
 8004f10:	4b01      	ldr	r3, [pc, #4]	@ (8004f18 <__errno+0x8>)
 8004f12:	6818      	ldr	r0, [r3, #0]
 8004f14:	4770      	bx	lr
 8004f16:	bf00      	nop
 8004f18:	2000001c 	.word	0x2000001c

08004f1c <__libc_init_array>:
 8004f1c:	b570      	push	{r4, r5, r6, lr}
 8004f1e:	4d0d      	ldr	r5, [pc, #52]	@ (8004f54 <__libc_init_array+0x38>)
 8004f20:	4c0d      	ldr	r4, [pc, #52]	@ (8004f58 <__libc_init_array+0x3c>)
 8004f22:	1b64      	subs	r4, r4, r5
 8004f24:	10a4      	asrs	r4, r4, #2
 8004f26:	2600      	movs	r6, #0
 8004f28:	42a6      	cmp	r6, r4
 8004f2a:	d109      	bne.n	8004f40 <__libc_init_array+0x24>
 8004f2c:	4d0b      	ldr	r5, [pc, #44]	@ (8004f5c <__libc_init_array+0x40>)
 8004f2e:	4c0c      	ldr	r4, [pc, #48]	@ (8004f60 <__libc_init_array+0x44>)
 8004f30:	f000 fc66 	bl	8005800 <_init>
 8004f34:	1b64      	subs	r4, r4, r5
 8004f36:	10a4      	asrs	r4, r4, #2
 8004f38:	2600      	movs	r6, #0
 8004f3a:	42a6      	cmp	r6, r4
 8004f3c:	d105      	bne.n	8004f4a <__libc_init_array+0x2e>
 8004f3e:	bd70      	pop	{r4, r5, r6, pc}
 8004f40:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f44:	4798      	blx	r3
 8004f46:	3601      	adds	r6, #1
 8004f48:	e7ee      	b.n	8004f28 <__libc_init_array+0xc>
 8004f4a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f4e:	4798      	blx	r3
 8004f50:	3601      	adds	r6, #1
 8004f52:	e7f2      	b.n	8004f3a <__libc_init_array+0x1e>
 8004f54:	08006f7c 	.word	0x08006f7c
 8004f58:	08006f7c 	.word	0x08006f7c
 8004f5c:	08006f7c 	.word	0x08006f7c
 8004f60:	08006f80 	.word	0x08006f80

08004f64 <__retarget_lock_acquire_recursive>:
 8004f64:	4770      	bx	lr

08004f66 <__retarget_lock_release_recursive>:
 8004f66:	4770      	bx	lr

08004f68 <_free_r>:
 8004f68:	b538      	push	{r3, r4, r5, lr}
 8004f6a:	4605      	mov	r5, r0
 8004f6c:	2900      	cmp	r1, #0
 8004f6e:	d041      	beq.n	8004ff4 <_free_r+0x8c>
 8004f70:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004f74:	1f0c      	subs	r4, r1, #4
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	bfb8      	it	lt
 8004f7a:	18e4      	addlt	r4, r4, r3
 8004f7c:	f000 f8e0 	bl	8005140 <__malloc_lock>
 8004f80:	4a1d      	ldr	r2, [pc, #116]	@ (8004ff8 <_free_r+0x90>)
 8004f82:	6813      	ldr	r3, [r2, #0]
 8004f84:	b933      	cbnz	r3, 8004f94 <_free_r+0x2c>
 8004f86:	6063      	str	r3, [r4, #4]
 8004f88:	6014      	str	r4, [r2, #0]
 8004f8a:	4628      	mov	r0, r5
 8004f8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004f90:	f000 b8dc 	b.w	800514c <__malloc_unlock>
 8004f94:	42a3      	cmp	r3, r4
 8004f96:	d908      	bls.n	8004faa <_free_r+0x42>
 8004f98:	6820      	ldr	r0, [r4, #0]
 8004f9a:	1821      	adds	r1, r4, r0
 8004f9c:	428b      	cmp	r3, r1
 8004f9e:	bf01      	itttt	eq
 8004fa0:	6819      	ldreq	r1, [r3, #0]
 8004fa2:	685b      	ldreq	r3, [r3, #4]
 8004fa4:	1809      	addeq	r1, r1, r0
 8004fa6:	6021      	streq	r1, [r4, #0]
 8004fa8:	e7ed      	b.n	8004f86 <_free_r+0x1e>
 8004faa:	461a      	mov	r2, r3
 8004fac:	685b      	ldr	r3, [r3, #4]
 8004fae:	b10b      	cbz	r3, 8004fb4 <_free_r+0x4c>
 8004fb0:	42a3      	cmp	r3, r4
 8004fb2:	d9fa      	bls.n	8004faa <_free_r+0x42>
 8004fb4:	6811      	ldr	r1, [r2, #0]
 8004fb6:	1850      	adds	r0, r2, r1
 8004fb8:	42a0      	cmp	r0, r4
 8004fba:	d10b      	bne.n	8004fd4 <_free_r+0x6c>
 8004fbc:	6820      	ldr	r0, [r4, #0]
 8004fbe:	4401      	add	r1, r0
 8004fc0:	1850      	adds	r0, r2, r1
 8004fc2:	4283      	cmp	r3, r0
 8004fc4:	6011      	str	r1, [r2, #0]
 8004fc6:	d1e0      	bne.n	8004f8a <_free_r+0x22>
 8004fc8:	6818      	ldr	r0, [r3, #0]
 8004fca:	685b      	ldr	r3, [r3, #4]
 8004fcc:	6053      	str	r3, [r2, #4]
 8004fce:	4408      	add	r0, r1
 8004fd0:	6010      	str	r0, [r2, #0]
 8004fd2:	e7da      	b.n	8004f8a <_free_r+0x22>
 8004fd4:	d902      	bls.n	8004fdc <_free_r+0x74>
 8004fd6:	230c      	movs	r3, #12
 8004fd8:	602b      	str	r3, [r5, #0]
 8004fda:	e7d6      	b.n	8004f8a <_free_r+0x22>
 8004fdc:	6820      	ldr	r0, [r4, #0]
 8004fde:	1821      	adds	r1, r4, r0
 8004fe0:	428b      	cmp	r3, r1
 8004fe2:	bf04      	itt	eq
 8004fe4:	6819      	ldreq	r1, [r3, #0]
 8004fe6:	685b      	ldreq	r3, [r3, #4]
 8004fe8:	6063      	str	r3, [r4, #4]
 8004fea:	bf04      	itt	eq
 8004fec:	1809      	addeq	r1, r1, r0
 8004fee:	6021      	streq	r1, [r4, #0]
 8004ff0:	6054      	str	r4, [r2, #4]
 8004ff2:	e7ca      	b.n	8004f8a <_free_r+0x22>
 8004ff4:	bd38      	pop	{r3, r4, r5, pc}
 8004ff6:	bf00      	nop
 8004ff8:	20000738 	.word	0x20000738

08004ffc <sbrk_aligned>:
 8004ffc:	b570      	push	{r4, r5, r6, lr}
 8004ffe:	4e0f      	ldr	r6, [pc, #60]	@ (800503c <sbrk_aligned+0x40>)
 8005000:	460c      	mov	r4, r1
 8005002:	6831      	ldr	r1, [r6, #0]
 8005004:	4605      	mov	r5, r0
 8005006:	b911      	cbnz	r1, 800500e <sbrk_aligned+0x12>
 8005008:	f000 fba6 	bl	8005758 <_sbrk_r>
 800500c:	6030      	str	r0, [r6, #0]
 800500e:	4621      	mov	r1, r4
 8005010:	4628      	mov	r0, r5
 8005012:	f000 fba1 	bl	8005758 <_sbrk_r>
 8005016:	1c43      	adds	r3, r0, #1
 8005018:	d103      	bne.n	8005022 <sbrk_aligned+0x26>
 800501a:	f04f 34ff 	mov.w	r4, #4294967295
 800501e:	4620      	mov	r0, r4
 8005020:	bd70      	pop	{r4, r5, r6, pc}
 8005022:	1cc4      	adds	r4, r0, #3
 8005024:	f024 0403 	bic.w	r4, r4, #3
 8005028:	42a0      	cmp	r0, r4
 800502a:	d0f8      	beq.n	800501e <sbrk_aligned+0x22>
 800502c:	1a21      	subs	r1, r4, r0
 800502e:	4628      	mov	r0, r5
 8005030:	f000 fb92 	bl	8005758 <_sbrk_r>
 8005034:	3001      	adds	r0, #1
 8005036:	d1f2      	bne.n	800501e <sbrk_aligned+0x22>
 8005038:	e7ef      	b.n	800501a <sbrk_aligned+0x1e>
 800503a:	bf00      	nop
 800503c:	20000734 	.word	0x20000734

08005040 <_malloc_r>:
 8005040:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005044:	1ccd      	adds	r5, r1, #3
 8005046:	f025 0503 	bic.w	r5, r5, #3
 800504a:	3508      	adds	r5, #8
 800504c:	2d0c      	cmp	r5, #12
 800504e:	bf38      	it	cc
 8005050:	250c      	movcc	r5, #12
 8005052:	2d00      	cmp	r5, #0
 8005054:	4606      	mov	r6, r0
 8005056:	db01      	blt.n	800505c <_malloc_r+0x1c>
 8005058:	42a9      	cmp	r1, r5
 800505a:	d904      	bls.n	8005066 <_malloc_r+0x26>
 800505c:	230c      	movs	r3, #12
 800505e:	6033      	str	r3, [r6, #0]
 8005060:	2000      	movs	r0, #0
 8005062:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005066:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800513c <_malloc_r+0xfc>
 800506a:	f000 f869 	bl	8005140 <__malloc_lock>
 800506e:	f8d8 3000 	ldr.w	r3, [r8]
 8005072:	461c      	mov	r4, r3
 8005074:	bb44      	cbnz	r4, 80050c8 <_malloc_r+0x88>
 8005076:	4629      	mov	r1, r5
 8005078:	4630      	mov	r0, r6
 800507a:	f7ff ffbf 	bl	8004ffc <sbrk_aligned>
 800507e:	1c43      	adds	r3, r0, #1
 8005080:	4604      	mov	r4, r0
 8005082:	d158      	bne.n	8005136 <_malloc_r+0xf6>
 8005084:	f8d8 4000 	ldr.w	r4, [r8]
 8005088:	4627      	mov	r7, r4
 800508a:	2f00      	cmp	r7, #0
 800508c:	d143      	bne.n	8005116 <_malloc_r+0xd6>
 800508e:	2c00      	cmp	r4, #0
 8005090:	d04b      	beq.n	800512a <_malloc_r+0xea>
 8005092:	6823      	ldr	r3, [r4, #0]
 8005094:	4639      	mov	r1, r7
 8005096:	4630      	mov	r0, r6
 8005098:	eb04 0903 	add.w	r9, r4, r3
 800509c:	f000 fb5c 	bl	8005758 <_sbrk_r>
 80050a0:	4581      	cmp	r9, r0
 80050a2:	d142      	bne.n	800512a <_malloc_r+0xea>
 80050a4:	6821      	ldr	r1, [r4, #0]
 80050a6:	1a6d      	subs	r5, r5, r1
 80050a8:	4629      	mov	r1, r5
 80050aa:	4630      	mov	r0, r6
 80050ac:	f7ff ffa6 	bl	8004ffc <sbrk_aligned>
 80050b0:	3001      	adds	r0, #1
 80050b2:	d03a      	beq.n	800512a <_malloc_r+0xea>
 80050b4:	6823      	ldr	r3, [r4, #0]
 80050b6:	442b      	add	r3, r5
 80050b8:	6023      	str	r3, [r4, #0]
 80050ba:	f8d8 3000 	ldr.w	r3, [r8]
 80050be:	685a      	ldr	r2, [r3, #4]
 80050c0:	bb62      	cbnz	r2, 800511c <_malloc_r+0xdc>
 80050c2:	f8c8 7000 	str.w	r7, [r8]
 80050c6:	e00f      	b.n	80050e8 <_malloc_r+0xa8>
 80050c8:	6822      	ldr	r2, [r4, #0]
 80050ca:	1b52      	subs	r2, r2, r5
 80050cc:	d420      	bmi.n	8005110 <_malloc_r+0xd0>
 80050ce:	2a0b      	cmp	r2, #11
 80050d0:	d917      	bls.n	8005102 <_malloc_r+0xc2>
 80050d2:	1961      	adds	r1, r4, r5
 80050d4:	42a3      	cmp	r3, r4
 80050d6:	6025      	str	r5, [r4, #0]
 80050d8:	bf18      	it	ne
 80050da:	6059      	strne	r1, [r3, #4]
 80050dc:	6863      	ldr	r3, [r4, #4]
 80050de:	bf08      	it	eq
 80050e0:	f8c8 1000 	streq.w	r1, [r8]
 80050e4:	5162      	str	r2, [r4, r5]
 80050e6:	604b      	str	r3, [r1, #4]
 80050e8:	4630      	mov	r0, r6
 80050ea:	f000 f82f 	bl	800514c <__malloc_unlock>
 80050ee:	f104 000b 	add.w	r0, r4, #11
 80050f2:	1d23      	adds	r3, r4, #4
 80050f4:	f020 0007 	bic.w	r0, r0, #7
 80050f8:	1ac2      	subs	r2, r0, r3
 80050fa:	bf1c      	itt	ne
 80050fc:	1a1b      	subne	r3, r3, r0
 80050fe:	50a3      	strne	r3, [r4, r2]
 8005100:	e7af      	b.n	8005062 <_malloc_r+0x22>
 8005102:	6862      	ldr	r2, [r4, #4]
 8005104:	42a3      	cmp	r3, r4
 8005106:	bf0c      	ite	eq
 8005108:	f8c8 2000 	streq.w	r2, [r8]
 800510c:	605a      	strne	r2, [r3, #4]
 800510e:	e7eb      	b.n	80050e8 <_malloc_r+0xa8>
 8005110:	4623      	mov	r3, r4
 8005112:	6864      	ldr	r4, [r4, #4]
 8005114:	e7ae      	b.n	8005074 <_malloc_r+0x34>
 8005116:	463c      	mov	r4, r7
 8005118:	687f      	ldr	r7, [r7, #4]
 800511a:	e7b6      	b.n	800508a <_malloc_r+0x4a>
 800511c:	461a      	mov	r2, r3
 800511e:	685b      	ldr	r3, [r3, #4]
 8005120:	42a3      	cmp	r3, r4
 8005122:	d1fb      	bne.n	800511c <_malloc_r+0xdc>
 8005124:	2300      	movs	r3, #0
 8005126:	6053      	str	r3, [r2, #4]
 8005128:	e7de      	b.n	80050e8 <_malloc_r+0xa8>
 800512a:	230c      	movs	r3, #12
 800512c:	6033      	str	r3, [r6, #0]
 800512e:	4630      	mov	r0, r6
 8005130:	f000 f80c 	bl	800514c <__malloc_unlock>
 8005134:	e794      	b.n	8005060 <_malloc_r+0x20>
 8005136:	6005      	str	r5, [r0, #0]
 8005138:	e7d6      	b.n	80050e8 <_malloc_r+0xa8>
 800513a:	bf00      	nop
 800513c:	20000738 	.word	0x20000738

08005140 <__malloc_lock>:
 8005140:	4801      	ldr	r0, [pc, #4]	@ (8005148 <__malloc_lock+0x8>)
 8005142:	f7ff bf0f 	b.w	8004f64 <__retarget_lock_acquire_recursive>
 8005146:	bf00      	nop
 8005148:	20000730 	.word	0x20000730

0800514c <__malloc_unlock>:
 800514c:	4801      	ldr	r0, [pc, #4]	@ (8005154 <__malloc_unlock+0x8>)
 800514e:	f7ff bf0a 	b.w	8004f66 <__retarget_lock_release_recursive>
 8005152:	bf00      	nop
 8005154:	20000730 	.word	0x20000730

08005158 <__ssputs_r>:
 8005158:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800515c:	688e      	ldr	r6, [r1, #8]
 800515e:	461f      	mov	r7, r3
 8005160:	42be      	cmp	r6, r7
 8005162:	680b      	ldr	r3, [r1, #0]
 8005164:	4682      	mov	sl, r0
 8005166:	460c      	mov	r4, r1
 8005168:	4690      	mov	r8, r2
 800516a:	d82d      	bhi.n	80051c8 <__ssputs_r+0x70>
 800516c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005170:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005174:	d026      	beq.n	80051c4 <__ssputs_r+0x6c>
 8005176:	6965      	ldr	r5, [r4, #20]
 8005178:	6909      	ldr	r1, [r1, #16]
 800517a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800517e:	eba3 0901 	sub.w	r9, r3, r1
 8005182:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005186:	1c7b      	adds	r3, r7, #1
 8005188:	444b      	add	r3, r9
 800518a:	106d      	asrs	r5, r5, #1
 800518c:	429d      	cmp	r5, r3
 800518e:	bf38      	it	cc
 8005190:	461d      	movcc	r5, r3
 8005192:	0553      	lsls	r3, r2, #21
 8005194:	d527      	bpl.n	80051e6 <__ssputs_r+0x8e>
 8005196:	4629      	mov	r1, r5
 8005198:	f7ff ff52 	bl	8005040 <_malloc_r>
 800519c:	4606      	mov	r6, r0
 800519e:	b360      	cbz	r0, 80051fa <__ssputs_r+0xa2>
 80051a0:	6921      	ldr	r1, [r4, #16]
 80051a2:	464a      	mov	r2, r9
 80051a4:	f000 fae8 	bl	8005778 <memcpy>
 80051a8:	89a3      	ldrh	r3, [r4, #12]
 80051aa:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80051ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80051b2:	81a3      	strh	r3, [r4, #12]
 80051b4:	6126      	str	r6, [r4, #16]
 80051b6:	6165      	str	r5, [r4, #20]
 80051b8:	444e      	add	r6, r9
 80051ba:	eba5 0509 	sub.w	r5, r5, r9
 80051be:	6026      	str	r6, [r4, #0]
 80051c0:	60a5      	str	r5, [r4, #8]
 80051c2:	463e      	mov	r6, r7
 80051c4:	42be      	cmp	r6, r7
 80051c6:	d900      	bls.n	80051ca <__ssputs_r+0x72>
 80051c8:	463e      	mov	r6, r7
 80051ca:	6820      	ldr	r0, [r4, #0]
 80051cc:	4632      	mov	r2, r6
 80051ce:	4641      	mov	r1, r8
 80051d0:	f000 faa8 	bl	8005724 <memmove>
 80051d4:	68a3      	ldr	r3, [r4, #8]
 80051d6:	1b9b      	subs	r3, r3, r6
 80051d8:	60a3      	str	r3, [r4, #8]
 80051da:	6823      	ldr	r3, [r4, #0]
 80051dc:	4433      	add	r3, r6
 80051de:	6023      	str	r3, [r4, #0]
 80051e0:	2000      	movs	r0, #0
 80051e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80051e6:	462a      	mov	r2, r5
 80051e8:	f000 fad4 	bl	8005794 <_realloc_r>
 80051ec:	4606      	mov	r6, r0
 80051ee:	2800      	cmp	r0, #0
 80051f0:	d1e0      	bne.n	80051b4 <__ssputs_r+0x5c>
 80051f2:	6921      	ldr	r1, [r4, #16]
 80051f4:	4650      	mov	r0, sl
 80051f6:	f7ff feb7 	bl	8004f68 <_free_r>
 80051fa:	230c      	movs	r3, #12
 80051fc:	f8ca 3000 	str.w	r3, [sl]
 8005200:	89a3      	ldrh	r3, [r4, #12]
 8005202:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005206:	81a3      	strh	r3, [r4, #12]
 8005208:	f04f 30ff 	mov.w	r0, #4294967295
 800520c:	e7e9      	b.n	80051e2 <__ssputs_r+0x8a>
	...

08005210 <_svfiprintf_r>:
 8005210:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005214:	4698      	mov	r8, r3
 8005216:	898b      	ldrh	r3, [r1, #12]
 8005218:	061b      	lsls	r3, r3, #24
 800521a:	b09d      	sub	sp, #116	@ 0x74
 800521c:	4607      	mov	r7, r0
 800521e:	460d      	mov	r5, r1
 8005220:	4614      	mov	r4, r2
 8005222:	d510      	bpl.n	8005246 <_svfiprintf_r+0x36>
 8005224:	690b      	ldr	r3, [r1, #16]
 8005226:	b973      	cbnz	r3, 8005246 <_svfiprintf_r+0x36>
 8005228:	2140      	movs	r1, #64	@ 0x40
 800522a:	f7ff ff09 	bl	8005040 <_malloc_r>
 800522e:	6028      	str	r0, [r5, #0]
 8005230:	6128      	str	r0, [r5, #16]
 8005232:	b930      	cbnz	r0, 8005242 <_svfiprintf_r+0x32>
 8005234:	230c      	movs	r3, #12
 8005236:	603b      	str	r3, [r7, #0]
 8005238:	f04f 30ff 	mov.w	r0, #4294967295
 800523c:	b01d      	add	sp, #116	@ 0x74
 800523e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005242:	2340      	movs	r3, #64	@ 0x40
 8005244:	616b      	str	r3, [r5, #20]
 8005246:	2300      	movs	r3, #0
 8005248:	9309      	str	r3, [sp, #36]	@ 0x24
 800524a:	2320      	movs	r3, #32
 800524c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005250:	f8cd 800c 	str.w	r8, [sp, #12]
 8005254:	2330      	movs	r3, #48	@ 0x30
 8005256:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80053f4 <_svfiprintf_r+0x1e4>
 800525a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800525e:	f04f 0901 	mov.w	r9, #1
 8005262:	4623      	mov	r3, r4
 8005264:	469a      	mov	sl, r3
 8005266:	f813 2b01 	ldrb.w	r2, [r3], #1
 800526a:	b10a      	cbz	r2, 8005270 <_svfiprintf_r+0x60>
 800526c:	2a25      	cmp	r2, #37	@ 0x25
 800526e:	d1f9      	bne.n	8005264 <_svfiprintf_r+0x54>
 8005270:	ebba 0b04 	subs.w	fp, sl, r4
 8005274:	d00b      	beq.n	800528e <_svfiprintf_r+0x7e>
 8005276:	465b      	mov	r3, fp
 8005278:	4622      	mov	r2, r4
 800527a:	4629      	mov	r1, r5
 800527c:	4638      	mov	r0, r7
 800527e:	f7ff ff6b 	bl	8005158 <__ssputs_r>
 8005282:	3001      	adds	r0, #1
 8005284:	f000 80a7 	beq.w	80053d6 <_svfiprintf_r+0x1c6>
 8005288:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800528a:	445a      	add	r2, fp
 800528c:	9209      	str	r2, [sp, #36]	@ 0x24
 800528e:	f89a 3000 	ldrb.w	r3, [sl]
 8005292:	2b00      	cmp	r3, #0
 8005294:	f000 809f 	beq.w	80053d6 <_svfiprintf_r+0x1c6>
 8005298:	2300      	movs	r3, #0
 800529a:	f04f 32ff 	mov.w	r2, #4294967295
 800529e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80052a2:	f10a 0a01 	add.w	sl, sl, #1
 80052a6:	9304      	str	r3, [sp, #16]
 80052a8:	9307      	str	r3, [sp, #28]
 80052aa:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80052ae:	931a      	str	r3, [sp, #104]	@ 0x68
 80052b0:	4654      	mov	r4, sl
 80052b2:	2205      	movs	r2, #5
 80052b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80052b8:	484e      	ldr	r0, [pc, #312]	@ (80053f4 <_svfiprintf_r+0x1e4>)
 80052ba:	f7fa ffa1 	bl	8000200 <memchr>
 80052be:	9a04      	ldr	r2, [sp, #16]
 80052c0:	b9d8      	cbnz	r0, 80052fa <_svfiprintf_r+0xea>
 80052c2:	06d0      	lsls	r0, r2, #27
 80052c4:	bf44      	itt	mi
 80052c6:	2320      	movmi	r3, #32
 80052c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80052cc:	0711      	lsls	r1, r2, #28
 80052ce:	bf44      	itt	mi
 80052d0:	232b      	movmi	r3, #43	@ 0x2b
 80052d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80052d6:	f89a 3000 	ldrb.w	r3, [sl]
 80052da:	2b2a      	cmp	r3, #42	@ 0x2a
 80052dc:	d015      	beq.n	800530a <_svfiprintf_r+0xfa>
 80052de:	9a07      	ldr	r2, [sp, #28]
 80052e0:	4654      	mov	r4, sl
 80052e2:	2000      	movs	r0, #0
 80052e4:	f04f 0c0a 	mov.w	ip, #10
 80052e8:	4621      	mov	r1, r4
 80052ea:	f811 3b01 	ldrb.w	r3, [r1], #1
 80052ee:	3b30      	subs	r3, #48	@ 0x30
 80052f0:	2b09      	cmp	r3, #9
 80052f2:	d94b      	bls.n	800538c <_svfiprintf_r+0x17c>
 80052f4:	b1b0      	cbz	r0, 8005324 <_svfiprintf_r+0x114>
 80052f6:	9207      	str	r2, [sp, #28]
 80052f8:	e014      	b.n	8005324 <_svfiprintf_r+0x114>
 80052fa:	eba0 0308 	sub.w	r3, r0, r8
 80052fe:	fa09 f303 	lsl.w	r3, r9, r3
 8005302:	4313      	orrs	r3, r2
 8005304:	9304      	str	r3, [sp, #16]
 8005306:	46a2      	mov	sl, r4
 8005308:	e7d2      	b.n	80052b0 <_svfiprintf_r+0xa0>
 800530a:	9b03      	ldr	r3, [sp, #12]
 800530c:	1d19      	adds	r1, r3, #4
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	9103      	str	r1, [sp, #12]
 8005312:	2b00      	cmp	r3, #0
 8005314:	bfbb      	ittet	lt
 8005316:	425b      	neglt	r3, r3
 8005318:	f042 0202 	orrlt.w	r2, r2, #2
 800531c:	9307      	strge	r3, [sp, #28]
 800531e:	9307      	strlt	r3, [sp, #28]
 8005320:	bfb8      	it	lt
 8005322:	9204      	strlt	r2, [sp, #16]
 8005324:	7823      	ldrb	r3, [r4, #0]
 8005326:	2b2e      	cmp	r3, #46	@ 0x2e
 8005328:	d10a      	bne.n	8005340 <_svfiprintf_r+0x130>
 800532a:	7863      	ldrb	r3, [r4, #1]
 800532c:	2b2a      	cmp	r3, #42	@ 0x2a
 800532e:	d132      	bne.n	8005396 <_svfiprintf_r+0x186>
 8005330:	9b03      	ldr	r3, [sp, #12]
 8005332:	1d1a      	adds	r2, r3, #4
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	9203      	str	r2, [sp, #12]
 8005338:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800533c:	3402      	adds	r4, #2
 800533e:	9305      	str	r3, [sp, #20]
 8005340:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8005404 <_svfiprintf_r+0x1f4>
 8005344:	7821      	ldrb	r1, [r4, #0]
 8005346:	2203      	movs	r2, #3
 8005348:	4650      	mov	r0, sl
 800534a:	f7fa ff59 	bl	8000200 <memchr>
 800534e:	b138      	cbz	r0, 8005360 <_svfiprintf_r+0x150>
 8005350:	9b04      	ldr	r3, [sp, #16]
 8005352:	eba0 000a 	sub.w	r0, r0, sl
 8005356:	2240      	movs	r2, #64	@ 0x40
 8005358:	4082      	lsls	r2, r0
 800535a:	4313      	orrs	r3, r2
 800535c:	3401      	adds	r4, #1
 800535e:	9304      	str	r3, [sp, #16]
 8005360:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005364:	4824      	ldr	r0, [pc, #144]	@ (80053f8 <_svfiprintf_r+0x1e8>)
 8005366:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800536a:	2206      	movs	r2, #6
 800536c:	f7fa ff48 	bl	8000200 <memchr>
 8005370:	2800      	cmp	r0, #0
 8005372:	d036      	beq.n	80053e2 <_svfiprintf_r+0x1d2>
 8005374:	4b21      	ldr	r3, [pc, #132]	@ (80053fc <_svfiprintf_r+0x1ec>)
 8005376:	bb1b      	cbnz	r3, 80053c0 <_svfiprintf_r+0x1b0>
 8005378:	9b03      	ldr	r3, [sp, #12]
 800537a:	3307      	adds	r3, #7
 800537c:	f023 0307 	bic.w	r3, r3, #7
 8005380:	3308      	adds	r3, #8
 8005382:	9303      	str	r3, [sp, #12]
 8005384:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005386:	4433      	add	r3, r6
 8005388:	9309      	str	r3, [sp, #36]	@ 0x24
 800538a:	e76a      	b.n	8005262 <_svfiprintf_r+0x52>
 800538c:	fb0c 3202 	mla	r2, ip, r2, r3
 8005390:	460c      	mov	r4, r1
 8005392:	2001      	movs	r0, #1
 8005394:	e7a8      	b.n	80052e8 <_svfiprintf_r+0xd8>
 8005396:	2300      	movs	r3, #0
 8005398:	3401      	adds	r4, #1
 800539a:	9305      	str	r3, [sp, #20]
 800539c:	4619      	mov	r1, r3
 800539e:	f04f 0c0a 	mov.w	ip, #10
 80053a2:	4620      	mov	r0, r4
 80053a4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80053a8:	3a30      	subs	r2, #48	@ 0x30
 80053aa:	2a09      	cmp	r2, #9
 80053ac:	d903      	bls.n	80053b6 <_svfiprintf_r+0x1a6>
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d0c6      	beq.n	8005340 <_svfiprintf_r+0x130>
 80053b2:	9105      	str	r1, [sp, #20]
 80053b4:	e7c4      	b.n	8005340 <_svfiprintf_r+0x130>
 80053b6:	fb0c 2101 	mla	r1, ip, r1, r2
 80053ba:	4604      	mov	r4, r0
 80053bc:	2301      	movs	r3, #1
 80053be:	e7f0      	b.n	80053a2 <_svfiprintf_r+0x192>
 80053c0:	ab03      	add	r3, sp, #12
 80053c2:	9300      	str	r3, [sp, #0]
 80053c4:	462a      	mov	r2, r5
 80053c6:	4b0e      	ldr	r3, [pc, #56]	@ (8005400 <_svfiprintf_r+0x1f0>)
 80053c8:	a904      	add	r1, sp, #16
 80053ca:	4638      	mov	r0, r7
 80053cc:	f3af 8000 	nop.w
 80053d0:	1c42      	adds	r2, r0, #1
 80053d2:	4606      	mov	r6, r0
 80053d4:	d1d6      	bne.n	8005384 <_svfiprintf_r+0x174>
 80053d6:	89ab      	ldrh	r3, [r5, #12]
 80053d8:	065b      	lsls	r3, r3, #25
 80053da:	f53f af2d 	bmi.w	8005238 <_svfiprintf_r+0x28>
 80053de:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80053e0:	e72c      	b.n	800523c <_svfiprintf_r+0x2c>
 80053e2:	ab03      	add	r3, sp, #12
 80053e4:	9300      	str	r3, [sp, #0]
 80053e6:	462a      	mov	r2, r5
 80053e8:	4b05      	ldr	r3, [pc, #20]	@ (8005400 <_svfiprintf_r+0x1f0>)
 80053ea:	a904      	add	r1, sp, #16
 80053ec:	4638      	mov	r0, r7
 80053ee:	f000 f879 	bl	80054e4 <_printf_i>
 80053f2:	e7ed      	b.n	80053d0 <_svfiprintf_r+0x1c0>
 80053f4:	08006f40 	.word	0x08006f40
 80053f8:	08006f4a 	.word	0x08006f4a
 80053fc:	00000000 	.word	0x00000000
 8005400:	08005159 	.word	0x08005159
 8005404:	08006f46 	.word	0x08006f46

08005408 <_printf_common>:
 8005408:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800540c:	4616      	mov	r6, r2
 800540e:	4698      	mov	r8, r3
 8005410:	688a      	ldr	r2, [r1, #8]
 8005412:	690b      	ldr	r3, [r1, #16]
 8005414:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005418:	4293      	cmp	r3, r2
 800541a:	bfb8      	it	lt
 800541c:	4613      	movlt	r3, r2
 800541e:	6033      	str	r3, [r6, #0]
 8005420:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005424:	4607      	mov	r7, r0
 8005426:	460c      	mov	r4, r1
 8005428:	b10a      	cbz	r2, 800542e <_printf_common+0x26>
 800542a:	3301      	adds	r3, #1
 800542c:	6033      	str	r3, [r6, #0]
 800542e:	6823      	ldr	r3, [r4, #0]
 8005430:	0699      	lsls	r1, r3, #26
 8005432:	bf42      	ittt	mi
 8005434:	6833      	ldrmi	r3, [r6, #0]
 8005436:	3302      	addmi	r3, #2
 8005438:	6033      	strmi	r3, [r6, #0]
 800543a:	6825      	ldr	r5, [r4, #0]
 800543c:	f015 0506 	ands.w	r5, r5, #6
 8005440:	d106      	bne.n	8005450 <_printf_common+0x48>
 8005442:	f104 0a19 	add.w	sl, r4, #25
 8005446:	68e3      	ldr	r3, [r4, #12]
 8005448:	6832      	ldr	r2, [r6, #0]
 800544a:	1a9b      	subs	r3, r3, r2
 800544c:	42ab      	cmp	r3, r5
 800544e:	dc26      	bgt.n	800549e <_printf_common+0x96>
 8005450:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005454:	6822      	ldr	r2, [r4, #0]
 8005456:	3b00      	subs	r3, #0
 8005458:	bf18      	it	ne
 800545a:	2301      	movne	r3, #1
 800545c:	0692      	lsls	r2, r2, #26
 800545e:	d42b      	bmi.n	80054b8 <_printf_common+0xb0>
 8005460:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005464:	4641      	mov	r1, r8
 8005466:	4638      	mov	r0, r7
 8005468:	47c8      	blx	r9
 800546a:	3001      	adds	r0, #1
 800546c:	d01e      	beq.n	80054ac <_printf_common+0xa4>
 800546e:	6823      	ldr	r3, [r4, #0]
 8005470:	6922      	ldr	r2, [r4, #16]
 8005472:	f003 0306 	and.w	r3, r3, #6
 8005476:	2b04      	cmp	r3, #4
 8005478:	bf02      	ittt	eq
 800547a:	68e5      	ldreq	r5, [r4, #12]
 800547c:	6833      	ldreq	r3, [r6, #0]
 800547e:	1aed      	subeq	r5, r5, r3
 8005480:	68a3      	ldr	r3, [r4, #8]
 8005482:	bf0c      	ite	eq
 8005484:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005488:	2500      	movne	r5, #0
 800548a:	4293      	cmp	r3, r2
 800548c:	bfc4      	itt	gt
 800548e:	1a9b      	subgt	r3, r3, r2
 8005490:	18ed      	addgt	r5, r5, r3
 8005492:	2600      	movs	r6, #0
 8005494:	341a      	adds	r4, #26
 8005496:	42b5      	cmp	r5, r6
 8005498:	d11a      	bne.n	80054d0 <_printf_common+0xc8>
 800549a:	2000      	movs	r0, #0
 800549c:	e008      	b.n	80054b0 <_printf_common+0xa8>
 800549e:	2301      	movs	r3, #1
 80054a0:	4652      	mov	r2, sl
 80054a2:	4641      	mov	r1, r8
 80054a4:	4638      	mov	r0, r7
 80054a6:	47c8      	blx	r9
 80054a8:	3001      	adds	r0, #1
 80054aa:	d103      	bne.n	80054b4 <_printf_common+0xac>
 80054ac:	f04f 30ff 	mov.w	r0, #4294967295
 80054b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80054b4:	3501      	adds	r5, #1
 80054b6:	e7c6      	b.n	8005446 <_printf_common+0x3e>
 80054b8:	18e1      	adds	r1, r4, r3
 80054ba:	1c5a      	adds	r2, r3, #1
 80054bc:	2030      	movs	r0, #48	@ 0x30
 80054be:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80054c2:	4422      	add	r2, r4
 80054c4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80054c8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80054cc:	3302      	adds	r3, #2
 80054ce:	e7c7      	b.n	8005460 <_printf_common+0x58>
 80054d0:	2301      	movs	r3, #1
 80054d2:	4622      	mov	r2, r4
 80054d4:	4641      	mov	r1, r8
 80054d6:	4638      	mov	r0, r7
 80054d8:	47c8      	blx	r9
 80054da:	3001      	adds	r0, #1
 80054dc:	d0e6      	beq.n	80054ac <_printf_common+0xa4>
 80054de:	3601      	adds	r6, #1
 80054e0:	e7d9      	b.n	8005496 <_printf_common+0x8e>
	...

080054e4 <_printf_i>:
 80054e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80054e8:	7e0f      	ldrb	r7, [r1, #24]
 80054ea:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80054ec:	2f78      	cmp	r7, #120	@ 0x78
 80054ee:	4691      	mov	r9, r2
 80054f0:	4680      	mov	r8, r0
 80054f2:	460c      	mov	r4, r1
 80054f4:	469a      	mov	sl, r3
 80054f6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80054fa:	d807      	bhi.n	800550c <_printf_i+0x28>
 80054fc:	2f62      	cmp	r7, #98	@ 0x62
 80054fe:	d80a      	bhi.n	8005516 <_printf_i+0x32>
 8005500:	2f00      	cmp	r7, #0
 8005502:	f000 80d2 	beq.w	80056aa <_printf_i+0x1c6>
 8005506:	2f58      	cmp	r7, #88	@ 0x58
 8005508:	f000 80b9 	beq.w	800567e <_printf_i+0x19a>
 800550c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005510:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005514:	e03a      	b.n	800558c <_printf_i+0xa8>
 8005516:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800551a:	2b15      	cmp	r3, #21
 800551c:	d8f6      	bhi.n	800550c <_printf_i+0x28>
 800551e:	a101      	add	r1, pc, #4	@ (adr r1, 8005524 <_printf_i+0x40>)
 8005520:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005524:	0800557d 	.word	0x0800557d
 8005528:	08005591 	.word	0x08005591
 800552c:	0800550d 	.word	0x0800550d
 8005530:	0800550d 	.word	0x0800550d
 8005534:	0800550d 	.word	0x0800550d
 8005538:	0800550d 	.word	0x0800550d
 800553c:	08005591 	.word	0x08005591
 8005540:	0800550d 	.word	0x0800550d
 8005544:	0800550d 	.word	0x0800550d
 8005548:	0800550d 	.word	0x0800550d
 800554c:	0800550d 	.word	0x0800550d
 8005550:	08005691 	.word	0x08005691
 8005554:	080055bb 	.word	0x080055bb
 8005558:	0800564b 	.word	0x0800564b
 800555c:	0800550d 	.word	0x0800550d
 8005560:	0800550d 	.word	0x0800550d
 8005564:	080056b3 	.word	0x080056b3
 8005568:	0800550d 	.word	0x0800550d
 800556c:	080055bb 	.word	0x080055bb
 8005570:	0800550d 	.word	0x0800550d
 8005574:	0800550d 	.word	0x0800550d
 8005578:	08005653 	.word	0x08005653
 800557c:	6833      	ldr	r3, [r6, #0]
 800557e:	1d1a      	adds	r2, r3, #4
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	6032      	str	r2, [r6, #0]
 8005584:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005588:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800558c:	2301      	movs	r3, #1
 800558e:	e09d      	b.n	80056cc <_printf_i+0x1e8>
 8005590:	6833      	ldr	r3, [r6, #0]
 8005592:	6820      	ldr	r0, [r4, #0]
 8005594:	1d19      	adds	r1, r3, #4
 8005596:	6031      	str	r1, [r6, #0]
 8005598:	0606      	lsls	r6, r0, #24
 800559a:	d501      	bpl.n	80055a0 <_printf_i+0xbc>
 800559c:	681d      	ldr	r5, [r3, #0]
 800559e:	e003      	b.n	80055a8 <_printf_i+0xc4>
 80055a0:	0645      	lsls	r5, r0, #25
 80055a2:	d5fb      	bpl.n	800559c <_printf_i+0xb8>
 80055a4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80055a8:	2d00      	cmp	r5, #0
 80055aa:	da03      	bge.n	80055b4 <_printf_i+0xd0>
 80055ac:	232d      	movs	r3, #45	@ 0x2d
 80055ae:	426d      	negs	r5, r5
 80055b0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80055b4:	4859      	ldr	r0, [pc, #356]	@ (800571c <_printf_i+0x238>)
 80055b6:	230a      	movs	r3, #10
 80055b8:	e011      	b.n	80055de <_printf_i+0xfa>
 80055ba:	6821      	ldr	r1, [r4, #0]
 80055bc:	6833      	ldr	r3, [r6, #0]
 80055be:	0608      	lsls	r0, r1, #24
 80055c0:	f853 5b04 	ldr.w	r5, [r3], #4
 80055c4:	d402      	bmi.n	80055cc <_printf_i+0xe8>
 80055c6:	0649      	lsls	r1, r1, #25
 80055c8:	bf48      	it	mi
 80055ca:	b2ad      	uxthmi	r5, r5
 80055cc:	2f6f      	cmp	r7, #111	@ 0x6f
 80055ce:	4853      	ldr	r0, [pc, #332]	@ (800571c <_printf_i+0x238>)
 80055d0:	6033      	str	r3, [r6, #0]
 80055d2:	bf14      	ite	ne
 80055d4:	230a      	movne	r3, #10
 80055d6:	2308      	moveq	r3, #8
 80055d8:	2100      	movs	r1, #0
 80055da:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80055de:	6866      	ldr	r6, [r4, #4]
 80055e0:	60a6      	str	r6, [r4, #8]
 80055e2:	2e00      	cmp	r6, #0
 80055e4:	bfa2      	ittt	ge
 80055e6:	6821      	ldrge	r1, [r4, #0]
 80055e8:	f021 0104 	bicge.w	r1, r1, #4
 80055ec:	6021      	strge	r1, [r4, #0]
 80055ee:	b90d      	cbnz	r5, 80055f4 <_printf_i+0x110>
 80055f0:	2e00      	cmp	r6, #0
 80055f2:	d04b      	beq.n	800568c <_printf_i+0x1a8>
 80055f4:	4616      	mov	r6, r2
 80055f6:	fbb5 f1f3 	udiv	r1, r5, r3
 80055fa:	fb03 5711 	mls	r7, r3, r1, r5
 80055fe:	5dc7      	ldrb	r7, [r0, r7]
 8005600:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005604:	462f      	mov	r7, r5
 8005606:	42bb      	cmp	r3, r7
 8005608:	460d      	mov	r5, r1
 800560a:	d9f4      	bls.n	80055f6 <_printf_i+0x112>
 800560c:	2b08      	cmp	r3, #8
 800560e:	d10b      	bne.n	8005628 <_printf_i+0x144>
 8005610:	6823      	ldr	r3, [r4, #0]
 8005612:	07df      	lsls	r7, r3, #31
 8005614:	d508      	bpl.n	8005628 <_printf_i+0x144>
 8005616:	6923      	ldr	r3, [r4, #16]
 8005618:	6861      	ldr	r1, [r4, #4]
 800561a:	4299      	cmp	r1, r3
 800561c:	bfde      	ittt	le
 800561e:	2330      	movle	r3, #48	@ 0x30
 8005620:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005624:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005628:	1b92      	subs	r2, r2, r6
 800562a:	6122      	str	r2, [r4, #16]
 800562c:	f8cd a000 	str.w	sl, [sp]
 8005630:	464b      	mov	r3, r9
 8005632:	aa03      	add	r2, sp, #12
 8005634:	4621      	mov	r1, r4
 8005636:	4640      	mov	r0, r8
 8005638:	f7ff fee6 	bl	8005408 <_printf_common>
 800563c:	3001      	adds	r0, #1
 800563e:	d14a      	bne.n	80056d6 <_printf_i+0x1f2>
 8005640:	f04f 30ff 	mov.w	r0, #4294967295
 8005644:	b004      	add	sp, #16
 8005646:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800564a:	6823      	ldr	r3, [r4, #0]
 800564c:	f043 0320 	orr.w	r3, r3, #32
 8005650:	6023      	str	r3, [r4, #0]
 8005652:	4833      	ldr	r0, [pc, #204]	@ (8005720 <_printf_i+0x23c>)
 8005654:	2778      	movs	r7, #120	@ 0x78
 8005656:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800565a:	6823      	ldr	r3, [r4, #0]
 800565c:	6831      	ldr	r1, [r6, #0]
 800565e:	061f      	lsls	r7, r3, #24
 8005660:	f851 5b04 	ldr.w	r5, [r1], #4
 8005664:	d402      	bmi.n	800566c <_printf_i+0x188>
 8005666:	065f      	lsls	r7, r3, #25
 8005668:	bf48      	it	mi
 800566a:	b2ad      	uxthmi	r5, r5
 800566c:	6031      	str	r1, [r6, #0]
 800566e:	07d9      	lsls	r1, r3, #31
 8005670:	bf44      	itt	mi
 8005672:	f043 0320 	orrmi.w	r3, r3, #32
 8005676:	6023      	strmi	r3, [r4, #0]
 8005678:	b11d      	cbz	r5, 8005682 <_printf_i+0x19e>
 800567a:	2310      	movs	r3, #16
 800567c:	e7ac      	b.n	80055d8 <_printf_i+0xf4>
 800567e:	4827      	ldr	r0, [pc, #156]	@ (800571c <_printf_i+0x238>)
 8005680:	e7e9      	b.n	8005656 <_printf_i+0x172>
 8005682:	6823      	ldr	r3, [r4, #0]
 8005684:	f023 0320 	bic.w	r3, r3, #32
 8005688:	6023      	str	r3, [r4, #0]
 800568a:	e7f6      	b.n	800567a <_printf_i+0x196>
 800568c:	4616      	mov	r6, r2
 800568e:	e7bd      	b.n	800560c <_printf_i+0x128>
 8005690:	6833      	ldr	r3, [r6, #0]
 8005692:	6825      	ldr	r5, [r4, #0]
 8005694:	6961      	ldr	r1, [r4, #20]
 8005696:	1d18      	adds	r0, r3, #4
 8005698:	6030      	str	r0, [r6, #0]
 800569a:	062e      	lsls	r6, r5, #24
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	d501      	bpl.n	80056a4 <_printf_i+0x1c0>
 80056a0:	6019      	str	r1, [r3, #0]
 80056a2:	e002      	b.n	80056aa <_printf_i+0x1c6>
 80056a4:	0668      	lsls	r0, r5, #25
 80056a6:	d5fb      	bpl.n	80056a0 <_printf_i+0x1bc>
 80056a8:	8019      	strh	r1, [r3, #0]
 80056aa:	2300      	movs	r3, #0
 80056ac:	6123      	str	r3, [r4, #16]
 80056ae:	4616      	mov	r6, r2
 80056b0:	e7bc      	b.n	800562c <_printf_i+0x148>
 80056b2:	6833      	ldr	r3, [r6, #0]
 80056b4:	1d1a      	adds	r2, r3, #4
 80056b6:	6032      	str	r2, [r6, #0]
 80056b8:	681e      	ldr	r6, [r3, #0]
 80056ba:	6862      	ldr	r2, [r4, #4]
 80056bc:	2100      	movs	r1, #0
 80056be:	4630      	mov	r0, r6
 80056c0:	f7fa fd9e 	bl	8000200 <memchr>
 80056c4:	b108      	cbz	r0, 80056ca <_printf_i+0x1e6>
 80056c6:	1b80      	subs	r0, r0, r6
 80056c8:	6060      	str	r0, [r4, #4]
 80056ca:	6863      	ldr	r3, [r4, #4]
 80056cc:	6123      	str	r3, [r4, #16]
 80056ce:	2300      	movs	r3, #0
 80056d0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80056d4:	e7aa      	b.n	800562c <_printf_i+0x148>
 80056d6:	6923      	ldr	r3, [r4, #16]
 80056d8:	4632      	mov	r2, r6
 80056da:	4649      	mov	r1, r9
 80056dc:	4640      	mov	r0, r8
 80056de:	47d0      	blx	sl
 80056e0:	3001      	adds	r0, #1
 80056e2:	d0ad      	beq.n	8005640 <_printf_i+0x15c>
 80056e4:	6823      	ldr	r3, [r4, #0]
 80056e6:	079b      	lsls	r3, r3, #30
 80056e8:	d413      	bmi.n	8005712 <_printf_i+0x22e>
 80056ea:	68e0      	ldr	r0, [r4, #12]
 80056ec:	9b03      	ldr	r3, [sp, #12]
 80056ee:	4298      	cmp	r0, r3
 80056f0:	bfb8      	it	lt
 80056f2:	4618      	movlt	r0, r3
 80056f4:	e7a6      	b.n	8005644 <_printf_i+0x160>
 80056f6:	2301      	movs	r3, #1
 80056f8:	4632      	mov	r2, r6
 80056fa:	4649      	mov	r1, r9
 80056fc:	4640      	mov	r0, r8
 80056fe:	47d0      	blx	sl
 8005700:	3001      	adds	r0, #1
 8005702:	d09d      	beq.n	8005640 <_printf_i+0x15c>
 8005704:	3501      	adds	r5, #1
 8005706:	68e3      	ldr	r3, [r4, #12]
 8005708:	9903      	ldr	r1, [sp, #12]
 800570a:	1a5b      	subs	r3, r3, r1
 800570c:	42ab      	cmp	r3, r5
 800570e:	dcf2      	bgt.n	80056f6 <_printf_i+0x212>
 8005710:	e7eb      	b.n	80056ea <_printf_i+0x206>
 8005712:	2500      	movs	r5, #0
 8005714:	f104 0619 	add.w	r6, r4, #25
 8005718:	e7f5      	b.n	8005706 <_printf_i+0x222>
 800571a:	bf00      	nop
 800571c:	08006f51 	.word	0x08006f51
 8005720:	08006f62 	.word	0x08006f62

08005724 <memmove>:
 8005724:	4288      	cmp	r0, r1
 8005726:	b510      	push	{r4, lr}
 8005728:	eb01 0402 	add.w	r4, r1, r2
 800572c:	d902      	bls.n	8005734 <memmove+0x10>
 800572e:	4284      	cmp	r4, r0
 8005730:	4623      	mov	r3, r4
 8005732:	d807      	bhi.n	8005744 <memmove+0x20>
 8005734:	1e43      	subs	r3, r0, #1
 8005736:	42a1      	cmp	r1, r4
 8005738:	d008      	beq.n	800574c <memmove+0x28>
 800573a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800573e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005742:	e7f8      	b.n	8005736 <memmove+0x12>
 8005744:	4402      	add	r2, r0
 8005746:	4601      	mov	r1, r0
 8005748:	428a      	cmp	r2, r1
 800574a:	d100      	bne.n	800574e <memmove+0x2a>
 800574c:	bd10      	pop	{r4, pc}
 800574e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005752:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005756:	e7f7      	b.n	8005748 <memmove+0x24>

08005758 <_sbrk_r>:
 8005758:	b538      	push	{r3, r4, r5, lr}
 800575a:	4d06      	ldr	r5, [pc, #24]	@ (8005774 <_sbrk_r+0x1c>)
 800575c:	2300      	movs	r3, #0
 800575e:	4604      	mov	r4, r0
 8005760:	4608      	mov	r0, r1
 8005762:	602b      	str	r3, [r5, #0]
 8005764:	f7fb fe5c 	bl	8001420 <_sbrk>
 8005768:	1c43      	adds	r3, r0, #1
 800576a:	d102      	bne.n	8005772 <_sbrk_r+0x1a>
 800576c:	682b      	ldr	r3, [r5, #0]
 800576e:	b103      	cbz	r3, 8005772 <_sbrk_r+0x1a>
 8005770:	6023      	str	r3, [r4, #0]
 8005772:	bd38      	pop	{r3, r4, r5, pc}
 8005774:	2000072c 	.word	0x2000072c

08005778 <memcpy>:
 8005778:	440a      	add	r2, r1
 800577a:	4291      	cmp	r1, r2
 800577c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005780:	d100      	bne.n	8005784 <memcpy+0xc>
 8005782:	4770      	bx	lr
 8005784:	b510      	push	{r4, lr}
 8005786:	f811 4b01 	ldrb.w	r4, [r1], #1
 800578a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800578e:	4291      	cmp	r1, r2
 8005790:	d1f9      	bne.n	8005786 <memcpy+0xe>
 8005792:	bd10      	pop	{r4, pc}

08005794 <_realloc_r>:
 8005794:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005798:	4680      	mov	r8, r0
 800579a:	4615      	mov	r5, r2
 800579c:	460c      	mov	r4, r1
 800579e:	b921      	cbnz	r1, 80057aa <_realloc_r+0x16>
 80057a0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80057a4:	4611      	mov	r1, r2
 80057a6:	f7ff bc4b 	b.w	8005040 <_malloc_r>
 80057aa:	b92a      	cbnz	r2, 80057b8 <_realloc_r+0x24>
 80057ac:	f7ff fbdc 	bl	8004f68 <_free_r>
 80057b0:	2400      	movs	r4, #0
 80057b2:	4620      	mov	r0, r4
 80057b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80057b8:	f000 f81a 	bl	80057f0 <_malloc_usable_size_r>
 80057bc:	4285      	cmp	r5, r0
 80057be:	4606      	mov	r6, r0
 80057c0:	d802      	bhi.n	80057c8 <_realloc_r+0x34>
 80057c2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80057c6:	d8f4      	bhi.n	80057b2 <_realloc_r+0x1e>
 80057c8:	4629      	mov	r1, r5
 80057ca:	4640      	mov	r0, r8
 80057cc:	f7ff fc38 	bl	8005040 <_malloc_r>
 80057d0:	4607      	mov	r7, r0
 80057d2:	2800      	cmp	r0, #0
 80057d4:	d0ec      	beq.n	80057b0 <_realloc_r+0x1c>
 80057d6:	42b5      	cmp	r5, r6
 80057d8:	462a      	mov	r2, r5
 80057da:	4621      	mov	r1, r4
 80057dc:	bf28      	it	cs
 80057de:	4632      	movcs	r2, r6
 80057e0:	f7ff ffca 	bl	8005778 <memcpy>
 80057e4:	4621      	mov	r1, r4
 80057e6:	4640      	mov	r0, r8
 80057e8:	f7ff fbbe 	bl	8004f68 <_free_r>
 80057ec:	463c      	mov	r4, r7
 80057ee:	e7e0      	b.n	80057b2 <_realloc_r+0x1e>

080057f0 <_malloc_usable_size_r>:
 80057f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80057f4:	1f18      	subs	r0, r3, #4
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	bfbc      	itt	lt
 80057fa:	580b      	ldrlt	r3, [r1, r0]
 80057fc:	18c0      	addlt	r0, r0, r3
 80057fe:	4770      	bx	lr

08005800 <_init>:
 8005800:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005802:	bf00      	nop
 8005804:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005806:	bc08      	pop	{r3}
 8005808:	469e      	mov	lr, r3
 800580a:	4770      	bx	lr

0800580c <_fini>:
 800580c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800580e:	bf00      	nop
 8005810:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005812:	bc08      	pop	{r3}
 8005814:	469e      	mov	lr, r3
 8005816:	4770      	bx	lr
