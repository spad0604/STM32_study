
RFID.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003bd4  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000cc  08003d84  08003d84  00004d84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003e50  08003e50  0000505c  2**0
                  CONTENTS
  4 .ARM          00000008  08003e50  08003e50  00004e50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003e58  08003e58  0000505c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003e58  08003e58  00004e58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003e5c  08003e5c  00004e5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08003e60  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000505c  2**0
                  CONTENTS
 10 .bss          0000020c  2000005c  2000005c  0000505c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000268  20000268  0000505c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000505c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009bfe  00000000  00000000  0000508c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000018b4  00000000  00000000  0000ec8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000008f8  00000000  00000000  00010540  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000006e1  00000000  00000000  00010e38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000230d2  00000000  00000000  00011519  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ac3b  00000000  00000000  000345eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d3a5f  00000000  00000000  0003f226  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00112c85  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002954  00000000  00000000  00112cc8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000003c  00000000  00000000  0011561c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000005c 	.word	0x2000005c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08003d6c 	.word	0x08003d6c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000060 	.word	0x20000060
 80001ec:	08003d6c 	.word	0x08003d6c

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b96a 	b.w	800058c <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	460c      	mov	r4, r1
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d14e      	bne.n	800037a <__udivmoddi4+0xaa>
 80002dc:	4694      	mov	ip, r2
 80002de:	458c      	cmp	ip, r1
 80002e0:	4686      	mov	lr, r0
 80002e2:	fab2 f282 	clz	r2, r2
 80002e6:	d962      	bls.n	80003ae <__udivmoddi4+0xde>
 80002e8:	b14a      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ea:	f1c2 0320 	rsb	r3, r2, #32
 80002ee:	4091      	lsls	r1, r2
 80002f0:	fa20 f303 	lsr.w	r3, r0, r3
 80002f4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002f8:	4319      	orrs	r1, r3
 80002fa:	fa00 fe02 	lsl.w	lr, r0, r2
 80002fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000302:	fa1f f68c 	uxth.w	r6, ip
 8000306:	fbb1 f4f7 	udiv	r4, r1, r7
 800030a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800030e:	fb07 1114 	mls	r1, r7, r4, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb04 f106 	mul.w	r1, r4, r6
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f104 30ff 	add.w	r0, r4, #4294967295
 8000326:	f080 8112 	bcs.w	800054e <__udivmoddi4+0x27e>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 810f 	bls.w	800054e <__udivmoddi4+0x27e>
 8000330:	3c02      	subs	r4, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a59      	subs	r1, r3, r1
 8000336:	fa1f f38e 	uxth.w	r3, lr
 800033a:	fbb1 f0f7 	udiv	r0, r1, r7
 800033e:	fb07 1110 	mls	r1, r7, r0, r1
 8000342:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000346:	fb00 f606 	mul.w	r6, r0, r6
 800034a:	429e      	cmp	r6, r3
 800034c:	d90a      	bls.n	8000364 <__udivmoddi4+0x94>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f100 31ff 	add.w	r1, r0, #4294967295
 8000356:	f080 80fc 	bcs.w	8000552 <__udivmoddi4+0x282>
 800035a:	429e      	cmp	r6, r3
 800035c:	f240 80f9 	bls.w	8000552 <__udivmoddi4+0x282>
 8000360:	4463      	add	r3, ip
 8000362:	3802      	subs	r0, #2
 8000364:	1b9b      	subs	r3, r3, r6
 8000366:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800036a:	2100      	movs	r1, #0
 800036c:	b11d      	cbz	r5, 8000376 <__udivmoddi4+0xa6>
 800036e:	40d3      	lsrs	r3, r2
 8000370:	2200      	movs	r2, #0
 8000372:	e9c5 3200 	strd	r3, r2, [r5]
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d905      	bls.n	800038a <__udivmoddi4+0xba>
 800037e:	b10d      	cbz	r5, 8000384 <__udivmoddi4+0xb4>
 8000380:	e9c5 0100 	strd	r0, r1, [r5]
 8000384:	2100      	movs	r1, #0
 8000386:	4608      	mov	r0, r1
 8000388:	e7f5      	b.n	8000376 <__udivmoddi4+0xa6>
 800038a:	fab3 f183 	clz	r1, r3
 800038e:	2900      	cmp	r1, #0
 8000390:	d146      	bne.n	8000420 <__udivmoddi4+0x150>
 8000392:	42a3      	cmp	r3, r4
 8000394:	d302      	bcc.n	800039c <__udivmoddi4+0xcc>
 8000396:	4290      	cmp	r0, r2
 8000398:	f0c0 80f0 	bcc.w	800057c <__udivmoddi4+0x2ac>
 800039c:	1a86      	subs	r6, r0, r2
 800039e:	eb64 0303 	sbc.w	r3, r4, r3
 80003a2:	2001      	movs	r0, #1
 80003a4:	2d00      	cmp	r5, #0
 80003a6:	d0e6      	beq.n	8000376 <__udivmoddi4+0xa6>
 80003a8:	e9c5 6300 	strd	r6, r3, [r5]
 80003ac:	e7e3      	b.n	8000376 <__udivmoddi4+0xa6>
 80003ae:	2a00      	cmp	r2, #0
 80003b0:	f040 8090 	bne.w	80004d4 <__udivmoddi4+0x204>
 80003b4:	eba1 040c 	sub.w	r4, r1, ip
 80003b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003bc:	fa1f f78c 	uxth.w	r7, ip
 80003c0:	2101      	movs	r1, #1
 80003c2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003c6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ca:	fb08 4416 	mls	r4, r8, r6, r4
 80003ce:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003d2:	fb07 f006 	mul.w	r0, r7, r6
 80003d6:	4298      	cmp	r0, r3
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x11c>
 80003da:	eb1c 0303 	adds.w	r3, ip, r3
 80003de:	f106 34ff 	add.w	r4, r6, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x11a>
 80003e4:	4298      	cmp	r0, r3
 80003e6:	f200 80cd 	bhi.w	8000584 <__udivmoddi4+0x2b4>
 80003ea:	4626      	mov	r6, r4
 80003ec:	1a1c      	subs	r4, r3, r0
 80003ee:	fa1f f38e 	uxth.w	r3, lr
 80003f2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003f6:	fb08 4410 	mls	r4, r8, r0, r4
 80003fa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003fe:	fb00 f707 	mul.w	r7, r0, r7
 8000402:	429f      	cmp	r7, r3
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x148>
 8000406:	eb1c 0303 	adds.w	r3, ip, r3
 800040a:	f100 34ff 	add.w	r4, r0, #4294967295
 800040e:	d202      	bcs.n	8000416 <__udivmoddi4+0x146>
 8000410:	429f      	cmp	r7, r3
 8000412:	f200 80b0 	bhi.w	8000576 <__udivmoddi4+0x2a6>
 8000416:	4620      	mov	r0, r4
 8000418:	1bdb      	subs	r3, r3, r7
 800041a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800041e:	e7a5      	b.n	800036c <__udivmoddi4+0x9c>
 8000420:	f1c1 0620 	rsb	r6, r1, #32
 8000424:	408b      	lsls	r3, r1
 8000426:	fa22 f706 	lsr.w	r7, r2, r6
 800042a:	431f      	orrs	r7, r3
 800042c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000430:	fa04 f301 	lsl.w	r3, r4, r1
 8000434:	ea43 030c 	orr.w	r3, r3, ip
 8000438:	40f4      	lsrs	r4, r6
 800043a:	fa00 f801 	lsl.w	r8, r0, r1
 800043e:	0c38      	lsrs	r0, r7, #16
 8000440:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000444:	fbb4 fef0 	udiv	lr, r4, r0
 8000448:	fa1f fc87 	uxth.w	ip, r7
 800044c:	fb00 441e 	mls	r4, r0, lr, r4
 8000450:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000454:	fb0e f90c 	mul.w	r9, lr, ip
 8000458:	45a1      	cmp	r9, r4
 800045a:	fa02 f201 	lsl.w	r2, r2, r1
 800045e:	d90a      	bls.n	8000476 <__udivmoddi4+0x1a6>
 8000460:	193c      	adds	r4, r7, r4
 8000462:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000466:	f080 8084 	bcs.w	8000572 <__udivmoddi4+0x2a2>
 800046a:	45a1      	cmp	r9, r4
 800046c:	f240 8081 	bls.w	8000572 <__udivmoddi4+0x2a2>
 8000470:	f1ae 0e02 	sub.w	lr, lr, #2
 8000474:	443c      	add	r4, r7
 8000476:	eba4 0409 	sub.w	r4, r4, r9
 800047a:	fa1f f983 	uxth.w	r9, r3
 800047e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000482:	fb00 4413 	mls	r4, r0, r3, r4
 8000486:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048a:	fb03 fc0c 	mul.w	ip, r3, ip
 800048e:	45a4      	cmp	ip, r4
 8000490:	d907      	bls.n	80004a2 <__udivmoddi4+0x1d2>
 8000492:	193c      	adds	r4, r7, r4
 8000494:	f103 30ff 	add.w	r0, r3, #4294967295
 8000498:	d267      	bcs.n	800056a <__udivmoddi4+0x29a>
 800049a:	45a4      	cmp	ip, r4
 800049c:	d965      	bls.n	800056a <__udivmoddi4+0x29a>
 800049e:	3b02      	subs	r3, #2
 80004a0:	443c      	add	r4, r7
 80004a2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004a6:	fba0 9302 	umull	r9, r3, r0, r2
 80004aa:	eba4 040c 	sub.w	r4, r4, ip
 80004ae:	429c      	cmp	r4, r3
 80004b0:	46ce      	mov	lr, r9
 80004b2:	469c      	mov	ip, r3
 80004b4:	d351      	bcc.n	800055a <__udivmoddi4+0x28a>
 80004b6:	d04e      	beq.n	8000556 <__udivmoddi4+0x286>
 80004b8:	b155      	cbz	r5, 80004d0 <__udivmoddi4+0x200>
 80004ba:	ebb8 030e 	subs.w	r3, r8, lr
 80004be:	eb64 040c 	sbc.w	r4, r4, ip
 80004c2:	fa04 f606 	lsl.w	r6, r4, r6
 80004c6:	40cb      	lsrs	r3, r1
 80004c8:	431e      	orrs	r6, r3
 80004ca:	40cc      	lsrs	r4, r1
 80004cc:	e9c5 6400 	strd	r6, r4, [r5]
 80004d0:	2100      	movs	r1, #0
 80004d2:	e750      	b.n	8000376 <__udivmoddi4+0xa6>
 80004d4:	f1c2 0320 	rsb	r3, r2, #32
 80004d8:	fa20 f103 	lsr.w	r1, r0, r3
 80004dc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e0:	fa24 f303 	lsr.w	r3, r4, r3
 80004e4:	4094      	lsls	r4, r2
 80004e6:	430c      	orrs	r4, r1
 80004e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ec:	fa00 fe02 	lsl.w	lr, r0, r2
 80004f0:	fa1f f78c 	uxth.w	r7, ip
 80004f4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004f8:	fb08 3110 	mls	r1, r8, r0, r3
 80004fc:	0c23      	lsrs	r3, r4, #16
 80004fe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000502:	fb00 f107 	mul.w	r1, r0, r7
 8000506:	4299      	cmp	r1, r3
 8000508:	d908      	bls.n	800051c <__udivmoddi4+0x24c>
 800050a:	eb1c 0303 	adds.w	r3, ip, r3
 800050e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000512:	d22c      	bcs.n	800056e <__udivmoddi4+0x29e>
 8000514:	4299      	cmp	r1, r3
 8000516:	d92a      	bls.n	800056e <__udivmoddi4+0x29e>
 8000518:	3802      	subs	r0, #2
 800051a:	4463      	add	r3, ip
 800051c:	1a5b      	subs	r3, r3, r1
 800051e:	b2a4      	uxth	r4, r4
 8000520:	fbb3 f1f8 	udiv	r1, r3, r8
 8000524:	fb08 3311 	mls	r3, r8, r1, r3
 8000528:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800052c:	fb01 f307 	mul.w	r3, r1, r7
 8000530:	42a3      	cmp	r3, r4
 8000532:	d908      	bls.n	8000546 <__udivmoddi4+0x276>
 8000534:	eb1c 0404 	adds.w	r4, ip, r4
 8000538:	f101 36ff 	add.w	r6, r1, #4294967295
 800053c:	d213      	bcs.n	8000566 <__udivmoddi4+0x296>
 800053e:	42a3      	cmp	r3, r4
 8000540:	d911      	bls.n	8000566 <__udivmoddi4+0x296>
 8000542:	3902      	subs	r1, #2
 8000544:	4464      	add	r4, ip
 8000546:	1ae4      	subs	r4, r4, r3
 8000548:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800054c:	e739      	b.n	80003c2 <__udivmoddi4+0xf2>
 800054e:	4604      	mov	r4, r0
 8000550:	e6f0      	b.n	8000334 <__udivmoddi4+0x64>
 8000552:	4608      	mov	r0, r1
 8000554:	e706      	b.n	8000364 <__udivmoddi4+0x94>
 8000556:	45c8      	cmp	r8, r9
 8000558:	d2ae      	bcs.n	80004b8 <__udivmoddi4+0x1e8>
 800055a:	ebb9 0e02 	subs.w	lr, r9, r2
 800055e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000562:	3801      	subs	r0, #1
 8000564:	e7a8      	b.n	80004b8 <__udivmoddi4+0x1e8>
 8000566:	4631      	mov	r1, r6
 8000568:	e7ed      	b.n	8000546 <__udivmoddi4+0x276>
 800056a:	4603      	mov	r3, r0
 800056c:	e799      	b.n	80004a2 <__udivmoddi4+0x1d2>
 800056e:	4630      	mov	r0, r6
 8000570:	e7d4      	b.n	800051c <__udivmoddi4+0x24c>
 8000572:	46d6      	mov	lr, sl
 8000574:	e77f      	b.n	8000476 <__udivmoddi4+0x1a6>
 8000576:	4463      	add	r3, ip
 8000578:	3802      	subs	r0, #2
 800057a:	e74d      	b.n	8000418 <__udivmoddi4+0x148>
 800057c:	4606      	mov	r6, r0
 800057e:	4623      	mov	r3, r4
 8000580:	4608      	mov	r0, r1
 8000582:	e70f      	b.n	80003a4 <__udivmoddi4+0xd4>
 8000584:	3e02      	subs	r6, #2
 8000586:	4463      	add	r3, ip
 8000588:	e730      	b.n	80003ec <__udivmoddi4+0x11c>
 800058a:	bf00      	nop

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000590:	b5b0      	push	{r4, r5, r7, lr}
 8000592:	b0a0      	sub	sp, #128	@ 0x80
 8000594:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000596:	f000 fdc3 	bl	8001120 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800059a:	f000 f88d 	bl	80006b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800059e:	f000 f94b 	bl	8000838 <MX_GPIO_Init>
  MX_SPI4_Init();
 80005a2:	f000 f8e9 	bl	8000778 <MX_SPI4_Init>
  MX_USART1_UART_Init();
 80005a6:	f000 f91d 	bl	80007e4 <MX_USART1_UART_Init>
  TM_MFRC522_Init();
 80005aa:	f000 fabd 	bl	8000b28 <TM_MFRC522_Init>
  HAL_Delay(100); // Give the RFID module time to initialize
 80005ae:	2064      	movs	r0, #100	@ 0x64
 80005b0:	f000 fe28 	bl	8001204 <HAL_Delay>
  
  char buf[100];
  sprintf(buf, "RFID Reader Initialized\r\n");
 80005b4:	f107 0308 	add.w	r3, r7, #8
 80005b8:	493a      	ldr	r1, [pc, #232]	@ (80006a4 <main+0x114>)
 80005ba:	4618      	mov	r0, r3
 80005bc:	f002 ff36 	bl	800342c <siprintf>
  HAL_UART_Transmit(&huart1, (const uint8_t*) buf, strlen(buf), 100);
 80005c0:	f107 0308 	add.w	r3, r7, #8
 80005c4:	4618      	mov	r0, r3
 80005c6:	f7ff fe13 	bl	80001f0 <strlen>
 80005ca:	4603      	mov	r3, r0
 80005cc:	b29a      	uxth	r2, r3
 80005ce:	f107 0108 	add.w	r1, r7, #8
 80005d2:	2364      	movs	r3, #100	@ 0x64
 80005d4:	4834      	ldr	r0, [pc, #208]	@ (80006a8 <main+0x118>)
 80005d6:	f002 fb6d 	bl	8002cb4 <HAL_UART_Transmit>
  
  // Read the MFRC522 version to verify communication
  uint8_t version = TM_MFRC522_ReadRegister(MFRC522_REG_VERSION);
 80005da:	2037      	movs	r0, #55	@ 0x37
 80005dc:	f000 fb42 	bl	8000c64 <TM_MFRC522_ReadRegister>
 80005e0:	4603      	mov	r3, r0
 80005e2:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  sprintf(buf, "MFRC522 Version: 0x%02X\r\n", version);
 80005e6:	f897 206f 	ldrb.w	r2, [r7, #111]	@ 0x6f
 80005ea:	f107 0308 	add.w	r3, r7, #8
 80005ee:	492f      	ldr	r1, [pc, #188]	@ (80006ac <main+0x11c>)
 80005f0:	4618      	mov	r0, r3
 80005f2:	f002 ff1b 	bl	800342c <siprintf>
  HAL_UART_Transmit(&huart1, (const uint8_t*) buf, strlen(buf), 100);
 80005f6:	f107 0308 	add.w	r3, r7, #8
 80005fa:	4618      	mov	r0, r3
 80005fc:	f7ff fdf8 	bl	80001f0 <strlen>
 8000600:	4603      	mov	r3, r0
 8000602:	b29a      	uxth	r2, r3
 8000604:	f107 0108 	add.w	r1, r7, #8
 8000608:	2364      	movs	r3, #100	@ 0x64
 800060a:	4827      	ldr	r0, [pc, #156]	@ (80006a8 <main+0x118>)
 800060c:	f002 fb52 	bl	8002cb4 <HAL_UART_Transmit>
  
  HAL_Delay(500);
 8000610:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000614:	f000 fdf6 	bl	8001204 <HAL_Delay>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  uint8_t CardID[5];
	  HAL_Delay(100);
 8000618:	2064      	movs	r0, #100	@ 0x64
 800061a:	f000 fdf3 	bl	8001204 <HAL_Delay>
	  if(TM_MFRC522_Check(CardID) == MI_OK) {
 800061e:	463b      	mov	r3, r7
 8000620:	4618      	mov	r0, r3
 8000622:	f000 fab5 	bl	8000b90 <TM_MFRC522_Check>
 8000626:	4603      	mov	r3, r0
 8000628:	2b00      	cmp	r3, #0
 800062a:	d122      	bne.n	8000672 <main+0xe2>
		  sprintf(buf, "RFID Card Found! ID: %02X:%02X:%02X:%02X:%02X\r\n", 
                  CardID[0], CardID[1], CardID[2], CardID[3], CardID[4]);
 800062c:	783b      	ldrb	r3, [r7, #0]
		  sprintf(buf, "RFID Card Found! ID: %02X:%02X:%02X:%02X:%02X\r\n", 
 800062e:	461c      	mov	r4, r3
                  CardID[0], CardID[1], CardID[2], CardID[3], CardID[4]);
 8000630:	787b      	ldrb	r3, [r7, #1]
		  sprintf(buf, "RFID Card Found! ID: %02X:%02X:%02X:%02X:%02X\r\n", 
 8000632:	461d      	mov	r5, r3
                  CardID[0], CardID[1], CardID[2], CardID[3], CardID[4]);
 8000634:	78bb      	ldrb	r3, [r7, #2]
 8000636:	78fa      	ldrb	r2, [r7, #3]
 8000638:	7939      	ldrb	r1, [r7, #4]
		  sprintf(buf, "RFID Card Found! ID: %02X:%02X:%02X:%02X:%02X\r\n", 
 800063a:	f107 0008 	add.w	r0, r7, #8
 800063e:	9102      	str	r1, [sp, #8]
 8000640:	9201      	str	r2, [sp, #4]
 8000642:	9300      	str	r3, [sp, #0]
 8000644:	462b      	mov	r3, r5
 8000646:	4622      	mov	r2, r4
 8000648:	4919      	ldr	r1, [pc, #100]	@ (80006b0 <main+0x120>)
 800064a:	f002 feef 	bl	800342c <siprintf>
		  HAL_UART_Transmit(&huart1, (const uint8_t*) buf, strlen(buf), 100);
 800064e:	f107 0308 	add.w	r3, r7, #8
 8000652:	4618      	mov	r0, r3
 8000654:	f7ff fdcc 	bl	80001f0 <strlen>
 8000658:	4603      	mov	r3, r0
 800065a:	b29a      	uxth	r2, r3
 800065c:	f107 0108 	add.w	r1, r7, #8
 8000660:	2364      	movs	r3, #100	@ 0x64
 8000662:	4811      	ldr	r0, [pc, #68]	@ (80006a8 <main+0x118>)
 8000664:	f002 fb26 	bl	8002cb4 <HAL_UART_Transmit>
		  HAL_Delay(300);
 8000668:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800066c:	f000 fdca 	bl	8001204 <HAL_Delay>
 8000670:	e7d2      	b.n	8000618 <main+0x88>
	  } else {
		  sprintf(buf, "RFID Card Not Found!\r\n");
 8000672:	f107 0308 	add.w	r3, r7, #8
 8000676:	490f      	ldr	r1, [pc, #60]	@ (80006b4 <main+0x124>)
 8000678:	4618      	mov	r0, r3
 800067a:	f002 fed7 	bl	800342c <siprintf>
		  HAL_UART_Transmit(&huart1, (const uint8_t*) buf, strlen(buf), 100);
 800067e:	f107 0308 	add.w	r3, r7, #8
 8000682:	4618      	mov	r0, r3
 8000684:	f7ff fdb4 	bl	80001f0 <strlen>
 8000688:	4603      	mov	r3, r0
 800068a:	b29a      	uxth	r2, r3
 800068c:	f107 0108 	add.w	r1, r7, #8
 8000690:	2364      	movs	r3, #100	@ 0x64
 8000692:	4805      	ldr	r0, [pc, #20]	@ (80006a8 <main+0x118>)
 8000694:	f002 fb0e 	bl	8002cb4 <HAL_UART_Transmit>
		  HAL_Delay(300);
 8000698:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800069c:	f000 fdb2 	bl	8001204 <HAL_Delay>
  {
 80006a0:	e7ba      	b.n	8000618 <main+0x88>
 80006a2:	bf00      	nop
 80006a4:	08003d84 	.word	0x08003d84
 80006a8:	200000d0 	.word	0x200000d0
 80006ac:	08003da0 	.word	0x08003da0
 80006b0:	08003dbc 	.word	0x08003dbc
 80006b4:	08003dec 	.word	0x08003dec

080006b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b094      	sub	sp, #80	@ 0x50
 80006bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006be:	f107 0320 	add.w	r3, r7, #32
 80006c2:	2230      	movs	r2, #48	@ 0x30
 80006c4:	2100      	movs	r1, #0
 80006c6:	4618      	mov	r0, r3
 80006c8:	f002 fed0 	bl	800346c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006cc:	f107 030c 	add.w	r3, r7, #12
 80006d0:	2200      	movs	r2, #0
 80006d2:	601a      	str	r2, [r3, #0]
 80006d4:	605a      	str	r2, [r3, #4]
 80006d6:	609a      	str	r2, [r3, #8]
 80006d8:	60da      	str	r2, [r3, #12]
 80006da:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006dc:	2300      	movs	r3, #0
 80006de:	60bb      	str	r3, [r7, #8]
 80006e0:	4b23      	ldr	r3, [pc, #140]	@ (8000770 <SystemClock_Config+0xb8>)
 80006e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006e4:	4a22      	ldr	r2, [pc, #136]	@ (8000770 <SystemClock_Config+0xb8>)
 80006e6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006ea:	6413      	str	r3, [r2, #64]	@ 0x40
 80006ec:	4b20      	ldr	r3, [pc, #128]	@ (8000770 <SystemClock_Config+0xb8>)
 80006ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006f0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006f4:	60bb      	str	r3, [r7, #8]
 80006f6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80006f8:	2300      	movs	r3, #0
 80006fa:	607b      	str	r3, [r7, #4]
 80006fc:	4b1d      	ldr	r3, [pc, #116]	@ (8000774 <SystemClock_Config+0xbc>)
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000704:	4a1b      	ldr	r2, [pc, #108]	@ (8000774 <SystemClock_Config+0xbc>)
 8000706:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800070a:	6013      	str	r3, [r2, #0]
 800070c:	4b19      	ldr	r3, [pc, #100]	@ (8000774 <SystemClock_Config+0xbc>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000714:	607b      	str	r3, [r7, #4]
 8000716:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000718:	2302      	movs	r3, #2
 800071a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800071c:	2301      	movs	r3, #1
 800071e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000720:	2310      	movs	r3, #16
 8000722:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000724:	2300      	movs	r3, #0
 8000726:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000728:	f107 0320 	add.w	r3, r7, #32
 800072c:	4618      	mov	r0, r3
 800072e:	f001 f839 	bl	80017a4 <HAL_RCC_OscConfig>
 8000732:	4603      	mov	r3, r0
 8000734:	2b00      	cmp	r3, #0
 8000736:	d001      	beq.n	800073c <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000738:	f000 f8c0 	bl	80008bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800073c:	230f      	movs	r3, #15
 800073e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000740:	2300      	movs	r3, #0
 8000742:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000744:	2300      	movs	r3, #0
 8000746:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000748:	2300      	movs	r3, #0
 800074a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800074c:	2300      	movs	r3, #0
 800074e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000750:	f107 030c 	add.w	r3, r7, #12
 8000754:	2100      	movs	r1, #0
 8000756:	4618      	mov	r0, r3
 8000758:	f001 fa9c 	bl	8001c94 <HAL_RCC_ClockConfig>
 800075c:	4603      	mov	r3, r0
 800075e:	2b00      	cmp	r3, #0
 8000760:	d001      	beq.n	8000766 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000762:	f000 f8ab 	bl	80008bc <Error_Handler>
  }
}
 8000766:	bf00      	nop
 8000768:	3750      	adds	r7, #80	@ 0x50
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}
 800076e:	bf00      	nop
 8000770:	40023800 	.word	0x40023800
 8000774:	40007000 	.word	0x40007000

08000778 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 800077c:	4b17      	ldr	r3, [pc, #92]	@ (80007dc <MX_SPI4_Init+0x64>)
 800077e:	4a18      	ldr	r2, [pc, #96]	@ (80007e0 <MX_SPI4_Init+0x68>)
 8000780:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8000782:	4b16      	ldr	r3, [pc, #88]	@ (80007dc <MX_SPI4_Init+0x64>)
 8000784:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000788:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 800078a:	4b14      	ldr	r3, [pc, #80]	@ (80007dc <MX_SPI4_Init+0x64>)
 800078c:	2200      	movs	r2, #0
 800078e:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8000790:	4b12      	ldr	r3, [pc, #72]	@ (80007dc <MX_SPI4_Init+0x64>)
 8000792:	2200      	movs	r2, #0
 8000794:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000796:	4b11      	ldr	r3, [pc, #68]	@ (80007dc <MX_SPI4_Init+0x64>)
 8000798:	2200      	movs	r2, #0
 800079a:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 800079c:	4b0f      	ldr	r3, [pc, #60]	@ (80007dc <MX_SPI4_Init+0x64>)
 800079e:	2200      	movs	r2, #0
 80007a0:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 80007a2:	4b0e      	ldr	r3, [pc, #56]	@ (80007dc <MX_SPI4_Init+0x64>)
 80007a4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80007a8:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80007aa:	4b0c      	ldr	r3, [pc, #48]	@ (80007dc <MX_SPI4_Init+0x64>)
 80007ac:	2228      	movs	r2, #40	@ 0x28
 80007ae:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007b0:	4b0a      	ldr	r3, [pc, #40]	@ (80007dc <MX_SPI4_Init+0x64>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 80007b6:	4b09      	ldr	r3, [pc, #36]	@ (80007dc <MX_SPI4_Init+0x64>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007bc:	4b07      	ldr	r3, [pc, #28]	@ (80007dc <MX_SPI4_Init+0x64>)
 80007be:	2200      	movs	r2, #0
 80007c0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi4.Init.CRCPolynomial = 10;
 80007c2:	4b06      	ldr	r3, [pc, #24]	@ (80007dc <MX_SPI4_Init+0x64>)
 80007c4:	220a      	movs	r2, #10
 80007c6:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 80007c8:	4804      	ldr	r0, [pc, #16]	@ (80007dc <MX_SPI4_Init+0x64>)
 80007ca:	f001 fc43 	bl	8002054 <HAL_SPI_Init>
 80007ce:	4603      	mov	r3, r0
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d001      	beq.n	80007d8 <MX_SPI4_Init+0x60>
  {
    Error_Handler();
 80007d4:	f000 f872 	bl	80008bc <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 80007d8:	bf00      	nop
 80007da:	bd80      	pop	{r7, pc}
 80007dc:	20000078 	.word	0x20000078
 80007e0:	40013400 	.word	0x40013400

080007e4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80007e8:	4b11      	ldr	r3, [pc, #68]	@ (8000830 <MX_USART1_UART_Init+0x4c>)
 80007ea:	4a12      	ldr	r2, [pc, #72]	@ (8000834 <MX_USART1_UART_Init+0x50>)
 80007ec:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80007ee:	4b10      	ldr	r3, [pc, #64]	@ (8000830 <MX_USART1_UART_Init+0x4c>)
 80007f0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80007f4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80007f6:	4b0e      	ldr	r3, [pc, #56]	@ (8000830 <MX_USART1_UART_Init+0x4c>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80007fc:	4b0c      	ldr	r3, [pc, #48]	@ (8000830 <MX_USART1_UART_Init+0x4c>)
 80007fe:	2200      	movs	r2, #0
 8000800:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000802:	4b0b      	ldr	r3, [pc, #44]	@ (8000830 <MX_USART1_UART_Init+0x4c>)
 8000804:	2200      	movs	r2, #0
 8000806:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000808:	4b09      	ldr	r3, [pc, #36]	@ (8000830 <MX_USART1_UART_Init+0x4c>)
 800080a:	220c      	movs	r2, #12
 800080c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800080e:	4b08      	ldr	r3, [pc, #32]	@ (8000830 <MX_USART1_UART_Init+0x4c>)
 8000810:	2200      	movs	r2, #0
 8000812:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000814:	4b06      	ldr	r3, [pc, #24]	@ (8000830 <MX_USART1_UART_Init+0x4c>)
 8000816:	2200      	movs	r2, #0
 8000818:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800081a:	4805      	ldr	r0, [pc, #20]	@ (8000830 <MX_USART1_UART_Init+0x4c>)
 800081c:	f002 f9fa 	bl	8002c14 <HAL_UART_Init>
 8000820:	4603      	mov	r3, r0
 8000822:	2b00      	cmp	r3, #0
 8000824:	d001      	beq.n	800082a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000826:	f000 f849 	bl	80008bc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800082a:	bf00      	nop
 800082c:	bd80      	pop	{r7, pc}
 800082e:	bf00      	nop
 8000830:	200000d0 	.word	0x200000d0
 8000834:	40011000 	.word	0x40011000

08000838 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b088      	sub	sp, #32
 800083c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800083e:	f107 030c 	add.w	r3, r7, #12
 8000842:	2200      	movs	r2, #0
 8000844:	601a      	str	r2, [r3, #0]
 8000846:	605a      	str	r2, [r3, #4]
 8000848:	609a      	str	r2, [r3, #8]
 800084a:	60da      	str	r2, [r3, #12]
 800084c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800084e:	2300      	movs	r3, #0
 8000850:	60bb      	str	r3, [r7, #8]
 8000852:	4b18      	ldr	r3, [pc, #96]	@ (80008b4 <MX_GPIO_Init+0x7c>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000856:	4a17      	ldr	r2, [pc, #92]	@ (80008b4 <MX_GPIO_Init+0x7c>)
 8000858:	f043 0310 	orr.w	r3, r3, #16
 800085c:	6313      	str	r3, [r2, #48]	@ 0x30
 800085e:	4b15      	ldr	r3, [pc, #84]	@ (80008b4 <MX_GPIO_Init+0x7c>)
 8000860:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000862:	f003 0310 	and.w	r3, r3, #16
 8000866:	60bb      	str	r3, [r7, #8]
 8000868:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800086a:	2300      	movs	r3, #0
 800086c:	607b      	str	r3, [r7, #4]
 800086e:	4b11      	ldr	r3, [pc, #68]	@ (80008b4 <MX_GPIO_Init+0x7c>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000872:	4a10      	ldr	r2, [pc, #64]	@ (80008b4 <MX_GPIO_Init+0x7c>)
 8000874:	f043 0301 	orr.w	r3, r3, #1
 8000878:	6313      	str	r3, [r2, #48]	@ 0x30
 800087a:	4b0e      	ldr	r3, [pc, #56]	@ (80008b4 <MX_GPIO_Init+0x7c>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800087e:	f003 0301 	and.w	r3, r3, #1
 8000882:	607b      	str	r3, [r7, #4]
 8000884:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, GPIO_PIN_RESET);
 8000886:	2200      	movs	r2, #0
 8000888:	2110      	movs	r1, #16
 800088a:	480b      	ldr	r0, [pc, #44]	@ (80008b8 <MX_GPIO_Init+0x80>)
 800088c:	f000 ff70 	bl	8001770 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000890:	2310      	movs	r3, #16
 8000892:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000894:	2301      	movs	r3, #1
 8000896:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000898:	2300      	movs	r3, #0
 800089a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800089c:	2300      	movs	r3, #0
 800089e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80008a0:	f107 030c 	add.w	r3, r7, #12
 80008a4:	4619      	mov	r1, r3
 80008a6:	4804      	ldr	r0, [pc, #16]	@ (80008b8 <MX_GPIO_Init+0x80>)
 80008a8:	f000 fdb6 	bl	8001418 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008ac:	bf00      	nop
 80008ae:	3720      	adds	r7, #32
 80008b0:	46bd      	mov	sp, r7
 80008b2:	bd80      	pop	{r7, pc}
 80008b4:	40023800 	.word	0x40023800
 80008b8:	40021000 	.word	0x40021000

080008bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008bc:	b480      	push	{r7}
 80008be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008c0:	b672      	cpsid	i
}
 80008c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008c4:	bf00      	nop
 80008c6:	e7fd      	b.n	80008c4 <Error_Handler+0x8>

080008c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008c8:	b480      	push	{r7}
 80008ca:	b083      	sub	sp, #12
 80008cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008ce:	2300      	movs	r3, #0
 80008d0:	607b      	str	r3, [r7, #4]
 80008d2:	4b10      	ldr	r3, [pc, #64]	@ (8000914 <HAL_MspInit+0x4c>)
 80008d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008d6:	4a0f      	ldr	r2, [pc, #60]	@ (8000914 <HAL_MspInit+0x4c>)
 80008d8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80008dc:	6453      	str	r3, [r2, #68]	@ 0x44
 80008de:	4b0d      	ldr	r3, [pc, #52]	@ (8000914 <HAL_MspInit+0x4c>)
 80008e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008e2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80008e6:	607b      	str	r3, [r7, #4]
 80008e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008ea:	2300      	movs	r3, #0
 80008ec:	603b      	str	r3, [r7, #0]
 80008ee:	4b09      	ldr	r3, [pc, #36]	@ (8000914 <HAL_MspInit+0x4c>)
 80008f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008f2:	4a08      	ldr	r2, [pc, #32]	@ (8000914 <HAL_MspInit+0x4c>)
 80008f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008f8:	6413      	str	r3, [r2, #64]	@ 0x40
 80008fa:	4b06      	ldr	r3, [pc, #24]	@ (8000914 <HAL_MspInit+0x4c>)
 80008fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000902:	603b      	str	r3, [r7, #0]
 8000904:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000906:	bf00      	nop
 8000908:	370c      	adds	r7, #12
 800090a:	46bd      	mov	sp, r7
 800090c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000910:	4770      	bx	lr
 8000912:	bf00      	nop
 8000914:	40023800 	.word	0x40023800

08000918 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b08a      	sub	sp, #40	@ 0x28
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000920:	f107 0314 	add.w	r3, r7, #20
 8000924:	2200      	movs	r2, #0
 8000926:	601a      	str	r2, [r3, #0]
 8000928:	605a      	str	r2, [r3, #4]
 800092a:	609a      	str	r2, [r3, #8]
 800092c:	60da      	str	r2, [r3, #12]
 800092e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI4)
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	4a19      	ldr	r2, [pc, #100]	@ (800099c <HAL_SPI_MspInit+0x84>)
 8000936:	4293      	cmp	r3, r2
 8000938:	d12b      	bne.n	8000992 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI4_MspInit 0 */

  /* USER CODE END SPI4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 800093a:	2300      	movs	r3, #0
 800093c:	613b      	str	r3, [r7, #16]
 800093e:	4b18      	ldr	r3, [pc, #96]	@ (80009a0 <HAL_SPI_MspInit+0x88>)
 8000940:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000942:	4a17      	ldr	r2, [pc, #92]	@ (80009a0 <HAL_SPI_MspInit+0x88>)
 8000944:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000948:	6453      	str	r3, [r2, #68]	@ 0x44
 800094a:	4b15      	ldr	r3, [pc, #84]	@ (80009a0 <HAL_SPI_MspInit+0x88>)
 800094c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800094e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000952:	613b      	str	r3, [r7, #16]
 8000954:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000956:	2300      	movs	r3, #0
 8000958:	60fb      	str	r3, [r7, #12]
 800095a:	4b11      	ldr	r3, [pc, #68]	@ (80009a0 <HAL_SPI_MspInit+0x88>)
 800095c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800095e:	4a10      	ldr	r2, [pc, #64]	@ (80009a0 <HAL_SPI_MspInit+0x88>)
 8000960:	f043 0310 	orr.w	r3, r3, #16
 8000964:	6313      	str	r3, [r2, #48]	@ 0x30
 8000966:	4b0e      	ldr	r3, [pc, #56]	@ (80009a0 <HAL_SPI_MspInit+0x88>)
 8000968:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800096a:	f003 0310 	and.w	r3, r3, #16
 800096e:	60fb      	str	r3, [r7, #12]
 8000970:	68fb      	ldr	r3, [r7, #12]
    /**SPI4 GPIO Configuration
    PE2     ------> SPI4_SCK
    PE5     ------> SPI4_MISO
    PE6     ------> SPI4_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 8000972:	2364      	movs	r3, #100	@ 0x64
 8000974:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000976:	2302      	movs	r3, #2
 8000978:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097a:	2300      	movs	r3, #0
 800097c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800097e:	2303      	movs	r3, #3
 8000980:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8000982:	2305      	movs	r3, #5
 8000984:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000986:	f107 0314 	add.w	r3, r7, #20
 800098a:	4619      	mov	r1, r3
 800098c:	4805      	ldr	r0, [pc, #20]	@ (80009a4 <HAL_SPI_MspInit+0x8c>)
 800098e:	f000 fd43 	bl	8001418 <HAL_GPIO_Init>

  /* USER CODE END SPI4_MspInit 1 */

  }

}
 8000992:	bf00      	nop
 8000994:	3728      	adds	r7, #40	@ 0x28
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	40013400 	.word	0x40013400
 80009a0:	40023800 	.word	0x40023800
 80009a4:	40021000 	.word	0x40021000

080009a8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b08a      	sub	sp, #40	@ 0x28
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009b0:	f107 0314 	add.w	r3, r7, #20
 80009b4:	2200      	movs	r2, #0
 80009b6:	601a      	str	r2, [r3, #0]
 80009b8:	605a      	str	r2, [r3, #4]
 80009ba:	609a      	str	r2, [r3, #8]
 80009bc:	60da      	str	r2, [r3, #12]
 80009be:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	4a19      	ldr	r2, [pc, #100]	@ (8000a2c <HAL_UART_MspInit+0x84>)
 80009c6:	4293      	cmp	r3, r2
 80009c8:	d12c      	bne.n	8000a24 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80009ca:	2300      	movs	r3, #0
 80009cc:	613b      	str	r3, [r7, #16]
 80009ce:	4b18      	ldr	r3, [pc, #96]	@ (8000a30 <HAL_UART_MspInit+0x88>)
 80009d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009d2:	4a17      	ldr	r2, [pc, #92]	@ (8000a30 <HAL_UART_MspInit+0x88>)
 80009d4:	f043 0310 	orr.w	r3, r3, #16
 80009d8:	6453      	str	r3, [r2, #68]	@ 0x44
 80009da:	4b15      	ldr	r3, [pc, #84]	@ (8000a30 <HAL_UART_MspInit+0x88>)
 80009dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009de:	f003 0310 	and.w	r3, r3, #16
 80009e2:	613b      	str	r3, [r7, #16]
 80009e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009e6:	2300      	movs	r3, #0
 80009e8:	60fb      	str	r3, [r7, #12]
 80009ea:	4b11      	ldr	r3, [pc, #68]	@ (8000a30 <HAL_UART_MspInit+0x88>)
 80009ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ee:	4a10      	ldr	r2, [pc, #64]	@ (8000a30 <HAL_UART_MspInit+0x88>)
 80009f0:	f043 0301 	orr.w	r3, r3, #1
 80009f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80009f6:	4b0e      	ldr	r3, [pc, #56]	@ (8000a30 <HAL_UART_MspInit+0x88>)
 80009f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009fa:	f003 0301 	and.w	r3, r3, #1
 80009fe:	60fb      	str	r3, [r7, #12]
 8000a00:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000a02:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000a06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a08:	2302      	movs	r3, #2
 8000a0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a10:	2303      	movs	r3, #3
 8000a12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000a14:	2307      	movs	r3, #7
 8000a16:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a18:	f107 0314 	add.w	r3, r7, #20
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	4805      	ldr	r0, [pc, #20]	@ (8000a34 <HAL_UART_MspInit+0x8c>)
 8000a20:	f000 fcfa 	bl	8001418 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8000a24:	bf00      	nop
 8000a26:	3728      	adds	r7, #40	@ 0x28
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bd80      	pop	{r7, pc}
 8000a2c:	40011000 	.word	0x40011000
 8000a30:	40023800 	.word	0x40023800
 8000a34:	40020000 	.word	0x40020000

08000a38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a3c:	bf00      	nop
 8000a3e:	e7fd      	b.n	8000a3c <NMI_Handler+0x4>

08000a40 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a40:	b480      	push	{r7}
 8000a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a44:	bf00      	nop
 8000a46:	e7fd      	b.n	8000a44 <HardFault_Handler+0x4>

08000a48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a4c:	bf00      	nop
 8000a4e:	e7fd      	b.n	8000a4c <MemManage_Handler+0x4>

08000a50 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a50:	b480      	push	{r7}
 8000a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a54:	bf00      	nop
 8000a56:	e7fd      	b.n	8000a54 <BusFault_Handler+0x4>

08000a58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a5c:	bf00      	nop
 8000a5e:	e7fd      	b.n	8000a5c <UsageFault_Handler+0x4>

08000a60 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a60:	b480      	push	{r7}
 8000a62:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a64:	bf00      	nop
 8000a66:	46bd      	mov	sp, r7
 8000a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6c:	4770      	bx	lr

08000a6e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a6e:	b480      	push	{r7}
 8000a70:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a72:	bf00      	nop
 8000a74:	46bd      	mov	sp, r7
 8000a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7a:	4770      	bx	lr

08000a7c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a80:	bf00      	nop
 8000a82:	46bd      	mov	sp, r7
 8000a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a88:	4770      	bx	lr

08000a8a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a8a:	b580      	push	{r7, lr}
 8000a8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a8e:	f000 fb99 	bl	80011c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a92:	bf00      	nop
 8000a94:	bd80      	pop	{r7, pc}
	...

08000a98 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b086      	sub	sp, #24
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000aa0:	4a14      	ldr	r2, [pc, #80]	@ (8000af4 <_sbrk+0x5c>)
 8000aa2:	4b15      	ldr	r3, [pc, #84]	@ (8000af8 <_sbrk+0x60>)
 8000aa4:	1ad3      	subs	r3, r2, r3
 8000aa6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000aa8:	697b      	ldr	r3, [r7, #20]
 8000aaa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000aac:	4b13      	ldr	r3, [pc, #76]	@ (8000afc <_sbrk+0x64>)
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d102      	bne.n	8000aba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ab4:	4b11      	ldr	r3, [pc, #68]	@ (8000afc <_sbrk+0x64>)
 8000ab6:	4a12      	ldr	r2, [pc, #72]	@ (8000b00 <_sbrk+0x68>)
 8000ab8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000aba:	4b10      	ldr	r3, [pc, #64]	@ (8000afc <_sbrk+0x64>)
 8000abc:	681a      	ldr	r2, [r3, #0]
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	4413      	add	r3, r2
 8000ac2:	693a      	ldr	r2, [r7, #16]
 8000ac4:	429a      	cmp	r2, r3
 8000ac6:	d207      	bcs.n	8000ad8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ac8:	f002 fcd8 	bl	800347c <__errno>
 8000acc:	4603      	mov	r3, r0
 8000ace:	220c      	movs	r2, #12
 8000ad0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ad2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ad6:	e009      	b.n	8000aec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ad8:	4b08      	ldr	r3, [pc, #32]	@ (8000afc <_sbrk+0x64>)
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ade:	4b07      	ldr	r3, [pc, #28]	@ (8000afc <_sbrk+0x64>)
 8000ae0:	681a      	ldr	r2, [r3, #0]
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	4413      	add	r3, r2
 8000ae6:	4a05      	ldr	r2, [pc, #20]	@ (8000afc <_sbrk+0x64>)
 8000ae8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000aea:	68fb      	ldr	r3, [r7, #12]
}
 8000aec:	4618      	mov	r0, r3
 8000aee:	3718      	adds	r7, #24
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bd80      	pop	{r7, pc}
 8000af4:	20030000 	.word	0x20030000
 8000af8:	00000400 	.word	0x00000400
 8000afc:	20000118 	.word	0x20000118
 8000b00:	20000268 	.word	0x20000268

08000b04 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b04:	b480      	push	{r7}
 8000b06:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b08:	4b06      	ldr	r3, [pc, #24]	@ (8000b24 <SystemInit+0x20>)
 8000b0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b0e:	4a05      	ldr	r2, [pc, #20]	@ (8000b24 <SystemInit+0x20>)
 8000b10:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b14:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b18:	bf00      	nop
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop
 8000b24:	e000ed00 	.word	0xe000ed00

08000b28 <TM_MFRC522_Init>:
 */
#include "tm_stm32f4_mfrc522.h"

extern SPI_HandleTypeDef hspi4;

void TM_MFRC522_Init(void) {
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	af00      	add	r7, sp, #0
	TM_MFRC522_InitPins();
 8000b2c:	f000 f84a 	bl	8000bc4 <TM_MFRC522_InitPins>
	//TM_SPI_Init(MFRC522_SPI, MFRC522_SPI_PINSPACK);

	// Hardware reset
	MFRC522_CS_HIGH;
 8000b30:	2201      	movs	r2, #1
 8000b32:	2110      	movs	r1, #16
 8000b34:	4815      	ldr	r0, [pc, #84]	@ (8000b8c <TM_MFRC522_Init+0x64>)
 8000b36:	f000 fe1b 	bl	8001770 <HAL_GPIO_WritePin>
	HAL_Delay(50);  // Power-up delay
 8000b3a:	2032      	movs	r0, #50	@ 0x32
 8000b3c:	f000 fb62 	bl	8001204 <HAL_Delay>
	
	// Software reset
	TM_MFRC522_Reset();
 8000b40:	f000 f927 	bl	8000d92 <TM_MFRC522_Reset>
	HAL_Delay(50);  // Wait for reset to complete
 8000b44:	2032      	movs	r0, #50	@ 0x32
 8000b46:	f000 fb5d 	bl	8001204 <HAL_Delay>

	// Set timer and prescaler
	TM_MFRC522_WriteRegister(MFRC522_REG_T_MODE, 0x8D);
 8000b4a:	218d      	movs	r1, #141	@ 0x8d
 8000b4c:	202a      	movs	r0, #42	@ 0x2a
 8000b4e:	f000 f845 	bl	8000bdc <TM_MFRC522_WriteRegister>
	TM_MFRC522_WriteRegister(MFRC522_REG_T_PRESCALER, 0x3E);
 8000b52:	213e      	movs	r1, #62	@ 0x3e
 8000b54:	202b      	movs	r0, #43	@ 0x2b
 8000b56:	f000 f841 	bl	8000bdc <TM_MFRC522_WriteRegister>
	TM_MFRC522_WriteRegister(MFRC522_REG_T_RELOAD_L, 30);           
 8000b5a:	211e      	movs	r1, #30
 8000b5c:	202d      	movs	r0, #45	@ 0x2d
 8000b5e:	f000 f83d 	bl	8000bdc <TM_MFRC522_WriteRegister>
	TM_MFRC522_WriteRegister(MFRC522_REG_T_RELOAD_H, 0);
 8000b62:	2100      	movs	r1, #0
 8000b64:	202c      	movs	r0, #44	@ 0x2c
 8000b66:	f000 f839 	bl	8000bdc <TM_MFRC522_WriteRegister>

	// Configure the receiver gain
	TM_MFRC522_WriteRegister(MFRC522_REG_RF_CFG, 0x70);  // 48dB gain
 8000b6a:	2170      	movs	r1, #112	@ 0x70
 8000b6c:	2026      	movs	r0, #38	@ 0x26
 8000b6e:	f000 f835 	bl	8000bdc <TM_MFRC522_WriteRegister>
	
	// Configure modulation
	TM_MFRC522_WriteRegister(MFRC522_REG_TX_AUTO, 0x40);
 8000b72:	2140      	movs	r1, #64	@ 0x40
 8000b74:	2015      	movs	r0, #21
 8000b76:	f000 f831 	bl	8000bdc <TM_MFRC522_WriteRegister>
	TM_MFRC522_WriteRegister(MFRC522_REG_MODE, 0x3D);
 8000b7a:	213d      	movs	r1, #61	@ 0x3d
 8000b7c:	2011      	movs	r0, #17
 8000b7e:	f000 f82d 	bl	8000bdc <TM_MFRC522_WriteRegister>

	// Turn on the antenna
	TM_MFRC522_AntennaOn();
 8000b82:	f000 f8f1 	bl	8000d68 <TM_MFRC522_AntennaOn>
}
 8000b86:	bf00      	nop
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	40021000 	.word	0x40021000

08000b90 <TM_MFRC522_Check>:

TM_MFRC522_Status_t TM_MFRC522_Check(uint8_t* id) {
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b084      	sub	sp, #16
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
	TM_MFRC522_Status_t status;
	//Find cards, return card type
	status = TM_MFRC522_Request(PICC_REQIDL, id);	
 8000b98:	6879      	ldr	r1, [r7, #4]
 8000b9a:	2026      	movs	r0, #38	@ 0x26
 8000b9c:	f000 f901 	bl	8000da2 <TM_MFRC522_Request>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	73fb      	strb	r3, [r7, #15]
	if (status == MI_OK) {
 8000ba4:	7bfb      	ldrb	r3, [r7, #15]
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d104      	bne.n	8000bb4 <TM_MFRC522_Check+0x24>
		//Card detected
		//Anti-collision, return card serial number 4 bytes
		status = TM_MFRC522_Anticoll(id);	
 8000baa:	6878      	ldr	r0, [r7, #4]
 8000bac:	f000 f9ed 	bl	8000f8a <TM_MFRC522_Anticoll>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	73fb      	strb	r3, [r7, #15]
	}
	TM_MFRC522_Halt();			//Command card into hibernation 
 8000bb4:	f000 fa6f 	bl	8001096 <TM_MFRC522_Halt>

	return status;
 8000bb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bba:	4618      	mov	r0, r3
 8000bbc:	3710      	adds	r7, #16
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}
	...

08000bc4 <TM_MFRC522_InitPins>:
		}
	}
	return MI_OK;
}

void TM_MFRC522_InitPins(void) {
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	af00      	add	r7, sp, #0
//	GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_NOPULL;
	//CS pin
//	GPIO_InitStruct.GPIO_Pin = MFRC522_CS_PIN;
//	GPIO_Init(MFRC522_CS_PORT, &GPIO_InitStruct);

	MFRC522_CS_HIGH;
 8000bc8:	2201      	movs	r2, #1
 8000bca:	2110      	movs	r1, #16
 8000bcc:	4802      	ldr	r0, [pc, #8]	@ (8000bd8 <TM_MFRC522_InitPins+0x14>)
 8000bce:	f000 fdcf 	bl	8001770 <HAL_GPIO_WritePin>
}
 8000bd2:	bf00      	nop
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	bf00      	nop
 8000bd8:	40021000 	.word	0x40021000

08000bdc <TM_MFRC522_WriteRegister>:

void TM_MFRC522_WriteRegister(uint8_t addr, uint8_t val) {
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b084      	sub	sp, #16
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	4603      	mov	r3, r0
 8000be4:	460a      	mov	r2, r1
 8000be6:	71fb      	strb	r3, [r7, #7]
 8000be8:	4613      	mov	r3, r2
 8000bea:	71bb      	strb	r3, [r7, #6]
	//CS low
	MFRC522_CS_LOW;
 8000bec:	2200      	movs	r2, #0
 8000bee:	2110      	movs	r1, #16
 8000bf0:	481a      	ldr	r0, [pc, #104]	@ (8000c5c <TM_MFRC522_WriteRegister+0x80>)
 8000bf2:	f000 fdbd 	bl	8001770 <HAL_GPIO_WritePin>
	//Send address
	uint8_t buf = (addr << 1) & 0x7E;
 8000bf6:	79fb      	ldrb	r3, [r7, #7]
 8000bf8:	005b      	lsls	r3, r3, #1
 8000bfa:	b2db      	uxtb	r3, r3
 8000bfc:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 8000c00:	b2db      	uxtb	r3, r3
 8000c02:	73bb      	strb	r3, [r7, #14]
	HAL_StatusTypeDef ret = 0;
 8000c04:	2300      	movs	r3, #0
 8000c06:	73fb      	strb	r3, [r7, #15]
	ret = HAL_SPI_Transmit(&hspi4, &buf, 1, 100);
 8000c08:	f107 010e 	add.w	r1, r7, #14
 8000c0c:	2364      	movs	r3, #100	@ 0x64
 8000c0e:	2201      	movs	r2, #1
 8000c10:	4813      	ldr	r0, [pc, #76]	@ (8000c60 <TM_MFRC522_WriteRegister+0x84>)
 8000c12:	f001 faa8 	bl	8002166 <HAL_SPI_Transmit>
 8000c16:	4603      	mov	r3, r0
 8000c18:	73fb      	strb	r3, [r7, #15]
	while ((ret = HAL_SPI_GetState(&hspi4)) == HAL_SPI_STATE_BUSY);
 8000c1a:	bf00      	nop
 8000c1c:	4810      	ldr	r0, [pc, #64]	@ (8000c60 <TM_MFRC522_WriteRegister+0x84>)
 8000c1e:	f001 fea8 	bl	8002972 <HAL_SPI_GetState>
 8000c22:	4603      	mov	r3, r0
 8000c24:	73fb      	strb	r3, [r7, #15]
 8000c26:	7bfb      	ldrb	r3, [r7, #15]
 8000c28:	2b02      	cmp	r3, #2
 8000c2a:	d0f7      	beq.n	8000c1c <TM_MFRC522_WriteRegister+0x40>
	//Send data	
	HAL_SPI_Transmit(&hspi4, &val, 1, 100);
 8000c2c:	1db9      	adds	r1, r7, #6
 8000c2e:	2364      	movs	r3, #100	@ 0x64
 8000c30:	2201      	movs	r2, #1
 8000c32:	480b      	ldr	r0, [pc, #44]	@ (8000c60 <TM_MFRC522_WriteRegister+0x84>)
 8000c34:	f001 fa97 	bl	8002166 <HAL_SPI_Transmit>
	while ((ret = HAL_SPI_GetState(&hspi4)) == HAL_SPI_STATE_BUSY);
 8000c38:	bf00      	nop
 8000c3a:	4809      	ldr	r0, [pc, #36]	@ (8000c60 <TM_MFRC522_WriteRegister+0x84>)
 8000c3c:	f001 fe99 	bl	8002972 <HAL_SPI_GetState>
 8000c40:	4603      	mov	r3, r0
 8000c42:	73fb      	strb	r3, [r7, #15]
 8000c44:	7bfb      	ldrb	r3, [r7, #15]
 8000c46:	2b02      	cmp	r3, #2
 8000c48:	d0f7      	beq.n	8000c3a <TM_MFRC522_WriteRegister+0x5e>
	//CS high
	MFRC522_CS_HIGH;
 8000c4a:	2201      	movs	r2, #1
 8000c4c:	2110      	movs	r1, #16
 8000c4e:	4803      	ldr	r0, [pc, #12]	@ (8000c5c <TM_MFRC522_WriteRegister+0x80>)
 8000c50:	f000 fd8e 	bl	8001770 <HAL_GPIO_WritePin>
}
 8000c54:	bf00      	nop
 8000c56:	3710      	adds	r7, #16
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bd80      	pop	{r7, pc}
 8000c5c:	40021000 	.word	0x40021000
 8000c60:	20000078 	.word	0x20000078

08000c64 <TM_MFRC522_ReadRegister>:

uint8_t TM_MFRC522_ReadRegister(uint8_t addr) {
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b084      	sub	sp, #16
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	71fb      	strb	r3, [r7, #7]
	uint8_t val;
	//CS low
	MFRC522_CS_LOW;
 8000c6e:	2200      	movs	r2, #0
 8000c70:	2110      	movs	r1, #16
 8000c72:	481f      	ldr	r0, [pc, #124]	@ (8000cf0 <TM_MFRC522_ReadRegister+0x8c>)
 8000c74:	f000 fd7c 	bl	8001770 <HAL_GPIO_WritePin>

	uint8_t buf = ((addr << 1) & 0x7E) | 0x80;
 8000c78:	79fb      	ldrb	r3, [r7, #7]
 8000c7a:	005b      	lsls	r3, r3, #1
 8000c7c:	b25b      	sxtb	r3, r3
 8000c7e:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 8000c82:	b25b      	sxtb	r3, r3
 8000c84:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000c88:	b25b      	sxtb	r3, r3
 8000c8a:	b2db      	uxtb	r3, r3
 8000c8c:	737b      	strb	r3, [r7, #13]
	HAL_StatusTypeDef ret = 0;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	73fb      	strb	r3, [r7, #15]
	ret = HAL_SPI_Transmit(&hspi4, &buf, 1, 100);
 8000c92:	f107 010d 	add.w	r1, r7, #13
 8000c96:	2364      	movs	r3, #100	@ 0x64
 8000c98:	2201      	movs	r2, #1
 8000c9a:	4816      	ldr	r0, [pc, #88]	@ (8000cf4 <TM_MFRC522_ReadRegister+0x90>)
 8000c9c:	f001 fa63 	bl	8002166 <HAL_SPI_Transmit>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	73fb      	strb	r3, [r7, #15]
	while ((ret = HAL_SPI_GetState(&hspi4)) == HAL_SPI_STATE_BUSY);
 8000ca4:	bf00      	nop
 8000ca6:	4813      	ldr	r0, [pc, #76]	@ (8000cf4 <TM_MFRC522_ReadRegister+0x90>)
 8000ca8:	f001 fe63 	bl	8002972 <HAL_SPI_GetState>
 8000cac:	4603      	mov	r3, r0
 8000cae:	73fb      	strb	r3, [r7, #15]
 8000cb0:	7bfb      	ldrb	r3, [r7, #15]
 8000cb2:	2b02      	cmp	r3, #2
 8000cb4:	d0f7      	beq.n	8000ca6 <TM_MFRC522_ReadRegister+0x42>
	ret = HAL_SPI_Receive(&hspi4, &val, 1, 100);
 8000cb6:	f107 010e 	add.w	r1, r7, #14
 8000cba:	2364      	movs	r3, #100	@ 0x64
 8000cbc:	2201      	movs	r2, #1
 8000cbe:	480d      	ldr	r0, [pc, #52]	@ (8000cf4 <TM_MFRC522_ReadRegister+0x90>)
 8000cc0:	f001 fb95 	bl	80023ee <HAL_SPI_Receive>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	73fb      	strb	r3, [r7, #15]
	while ((ret = HAL_SPI_GetState(&hspi4)) == HAL_SPI_STATE_BUSY);
 8000cc8:	bf00      	nop
 8000cca:	480a      	ldr	r0, [pc, #40]	@ (8000cf4 <TM_MFRC522_ReadRegister+0x90>)
 8000ccc:	f001 fe51 	bl	8002972 <HAL_SPI_GetState>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	73fb      	strb	r3, [r7, #15]
 8000cd4:	7bfb      	ldrb	r3, [r7, #15]
 8000cd6:	2b02      	cmp	r3, #2
 8000cd8:	d0f7      	beq.n	8000cca <TM_MFRC522_ReadRegister+0x66>
	//CS high
	MFRC522_CS_HIGH;
 8000cda:	2201      	movs	r2, #1
 8000cdc:	2110      	movs	r1, #16
 8000cde:	4804      	ldr	r0, [pc, #16]	@ (8000cf0 <TM_MFRC522_ReadRegister+0x8c>)
 8000ce0:	f000 fd46 	bl	8001770 <HAL_GPIO_WritePin>

	return val;	
 8000ce4:	7bbb      	ldrb	r3, [r7, #14]
}
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	3710      	adds	r7, #16
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	40021000 	.word	0x40021000
 8000cf4:	20000078 	.word	0x20000078

08000cf8 <TM_MFRC522_SetBitMask>:

void TM_MFRC522_SetBitMask(uint8_t reg, uint8_t mask) {
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b082      	sub	sp, #8
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	4603      	mov	r3, r0
 8000d00:	460a      	mov	r2, r1
 8000d02:	71fb      	strb	r3, [r7, #7]
 8000d04:	4613      	mov	r3, r2
 8000d06:	71bb      	strb	r3, [r7, #6]
	TM_MFRC522_WriteRegister(reg, TM_MFRC522_ReadRegister(reg) | mask);
 8000d08:	79fb      	ldrb	r3, [r7, #7]
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	f7ff ffaa 	bl	8000c64 <TM_MFRC522_ReadRegister>
 8000d10:	4603      	mov	r3, r0
 8000d12:	461a      	mov	r2, r3
 8000d14:	79bb      	ldrb	r3, [r7, #6]
 8000d16:	4313      	orrs	r3, r2
 8000d18:	b2da      	uxtb	r2, r3
 8000d1a:	79fb      	ldrb	r3, [r7, #7]
 8000d1c:	4611      	mov	r1, r2
 8000d1e:	4618      	mov	r0, r3
 8000d20:	f7ff ff5c 	bl	8000bdc <TM_MFRC522_WriteRegister>
}
 8000d24:	bf00      	nop
 8000d26:	3708      	adds	r7, #8
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd80      	pop	{r7, pc}

08000d2c <TM_MFRC522_ClearBitMask>:

void TM_MFRC522_ClearBitMask(uint8_t reg, uint8_t mask){
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b082      	sub	sp, #8
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	4603      	mov	r3, r0
 8000d34:	460a      	mov	r2, r1
 8000d36:	71fb      	strb	r3, [r7, #7]
 8000d38:	4613      	mov	r3, r2
 8000d3a:	71bb      	strb	r3, [r7, #6]
	TM_MFRC522_WriteRegister(reg, TM_MFRC522_ReadRegister(reg) & (~mask));
 8000d3c:	79fb      	ldrb	r3, [r7, #7]
 8000d3e:	4618      	mov	r0, r3
 8000d40:	f7ff ff90 	bl	8000c64 <TM_MFRC522_ReadRegister>
 8000d44:	4603      	mov	r3, r0
 8000d46:	b25a      	sxtb	r2, r3
 8000d48:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000d4c:	43db      	mvns	r3, r3
 8000d4e:	b25b      	sxtb	r3, r3
 8000d50:	4013      	ands	r3, r2
 8000d52:	b25b      	sxtb	r3, r3
 8000d54:	b2da      	uxtb	r2, r3
 8000d56:	79fb      	ldrb	r3, [r7, #7]
 8000d58:	4611      	mov	r1, r2
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	f7ff ff3e 	bl	8000bdc <TM_MFRC522_WriteRegister>
} 
 8000d60:	bf00      	nop
 8000d62:	3708      	adds	r7, #8
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd80      	pop	{r7, pc}

08000d68 <TM_MFRC522_AntennaOn>:

void TM_MFRC522_AntennaOn(void) {
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b082      	sub	sp, #8
 8000d6c:	af00      	add	r7, sp, #0
	uint8_t temp;

	temp = TM_MFRC522_ReadRegister(MFRC522_REG_TX_CONTROL);
 8000d6e:	2014      	movs	r0, #20
 8000d70:	f7ff ff78 	bl	8000c64 <TM_MFRC522_ReadRegister>
 8000d74:	4603      	mov	r3, r0
 8000d76:	71fb      	strb	r3, [r7, #7]
	if (!(temp & 0x03)) {
 8000d78:	79fb      	ldrb	r3, [r7, #7]
 8000d7a:	f003 0303 	and.w	r3, r3, #3
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d103      	bne.n	8000d8a <TM_MFRC522_AntennaOn+0x22>
		TM_MFRC522_SetBitMask(MFRC522_REG_TX_CONTROL, 0x03);
 8000d82:	2103      	movs	r1, #3
 8000d84:	2014      	movs	r0, #20
 8000d86:	f7ff ffb7 	bl	8000cf8 <TM_MFRC522_SetBitMask>
	}
}
 8000d8a:	bf00      	nop
 8000d8c:	3708      	adds	r7, #8
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}

08000d92 <TM_MFRC522_Reset>:

void TM_MFRC522_AntennaOff(void) {
	TM_MFRC522_ClearBitMask(MFRC522_REG_TX_CONTROL, 0x03);
}

void TM_MFRC522_Reset(void) {
 8000d92:	b580      	push	{r7, lr}
 8000d94:	af00      	add	r7, sp, #0
	TM_MFRC522_WriteRegister(MFRC522_REG_COMMAND, PCD_RESETPHASE);
 8000d96:	210f      	movs	r1, #15
 8000d98:	2001      	movs	r0, #1
 8000d9a:	f7ff ff1f 	bl	8000bdc <TM_MFRC522_WriteRegister>
}
 8000d9e:	bf00      	nop
 8000da0:	bd80      	pop	{r7, pc}

08000da2 <TM_MFRC522_Request>:

TM_MFRC522_Status_t TM_MFRC522_Request(uint8_t reqMode, uint8_t* TagType) {
 8000da2:	b580      	push	{r7, lr}
 8000da4:	b086      	sub	sp, #24
 8000da6:	af02      	add	r7, sp, #8
 8000da8:	4603      	mov	r3, r0
 8000daa:	6039      	str	r1, [r7, #0]
 8000dac:	71fb      	strb	r3, [r7, #7]
	TM_MFRC522_Status_t status;  
	uint16_t backBits;			//The received data bits

	TM_MFRC522_WriteRegister(MFRC522_REG_BIT_FRAMING, 0x07);		//TxLastBists = BitFramingReg[2..0]	???
 8000dae:	2107      	movs	r1, #7
 8000db0:	200d      	movs	r0, #13
 8000db2:	f7ff ff13 	bl	8000bdc <TM_MFRC522_WriteRegister>

	TagType[0] = reqMode;
 8000db6:	683b      	ldr	r3, [r7, #0]
 8000db8:	79fa      	ldrb	r2, [r7, #7]
 8000dba:	701a      	strb	r2, [r3, #0]
	status = TM_MFRC522_ToCard(PCD_TRANSCEIVE, TagType, 1, TagType, &backBits);
 8000dbc:	f107 030c 	add.w	r3, r7, #12
 8000dc0:	9300      	str	r3, [sp, #0]
 8000dc2:	683b      	ldr	r3, [r7, #0]
 8000dc4:	2201      	movs	r2, #1
 8000dc6:	6839      	ldr	r1, [r7, #0]
 8000dc8:	200c      	movs	r0, #12
 8000dca:	f000 f80f 	bl	8000dec <TM_MFRC522_ToCard>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	73fb      	strb	r3, [r7, #15]

	if ((status != MI_OK) || (backBits != 0x10)) {    
 8000dd2:	7bfb      	ldrb	r3, [r7, #15]
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d102      	bne.n	8000dde <TM_MFRC522_Request+0x3c>
 8000dd8:	89bb      	ldrh	r3, [r7, #12]
 8000dda:	2b10      	cmp	r3, #16
 8000ddc:	d001      	beq.n	8000de2 <TM_MFRC522_Request+0x40>
		status = MI_ERR;
 8000dde:	2302      	movs	r3, #2
 8000de0:	73fb      	strb	r3, [r7, #15]
	}

	return status;
 8000de2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000de4:	4618      	mov	r0, r3
 8000de6:	3710      	adds	r7, #16
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bd80      	pop	{r7, pc}

08000dec <TM_MFRC522_ToCard>:

TM_MFRC522_Status_t TM_MFRC522_ToCard(uint8_t command, uint8_t* sendData, uint8_t sendLen, uint8_t* backData, uint16_t* backLen) {
 8000dec:	b590      	push	{r4, r7, lr}
 8000dee:	b087      	sub	sp, #28
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	60b9      	str	r1, [r7, #8]
 8000df4:	607b      	str	r3, [r7, #4]
 8000df6:	4603      	mov	r3, r0
 8000df8:	73fb      	strb	r3, [r7, #15]
 8000dfa:	4613      	mov	r3, r2
 8000dfc:	73bb      	strb	r3, [r7, #14]
	TM_MFRC522_Status_t status = MI_ERR;
 8000dfe:	2302      	movs	r3, #2
 8000e00:	75fb      	strb	r3, [r7, #23]
	uint8_t irqEn = 0x00;
 8000e02:	2300      	movs	r3, #0
 8000e04:	75bb      	strb	r3, [r7, #22]
	uint8_t waitIRq = 0x00;
 8000e06:	2300      	movs	r3, #0
 8000e08:	757b      	strb	r3, [r7, #21]
	uint8_t lastBits;
	uint8_t n;
	uint16_t i;

	switch (command) {
 8000e0a:	7bfb      	ldrb	r3, [r7, #15]
 8000e0c:	2b0c      	cmp	r3, #12
 8000e0e:	d006      	beq.n	8000e1e <TM_MFRC522_ToCard+0x32>
 8000e10:	2b0e      	cmp	r3, #14
 8000e12:	d109      	bne.n	8000e28 <TM_MFRC522_ToCard+0x3c>
		case PCD_AUTHENT: {
			irqEn = 0x12;
 8000e14:	2312      	movs	r3, #18
 8000e16:	75bb      	strb	r3, [r7, #22]
			waitIRq = 0x10;
 8000e18:	2310      	movs	r3, #16
 8000e1a:	757b      	strb	r3, [r7, #21]
			break;
 8000e1c:	e005      	b.n	8000e2a <TM_MFRC522_ToCard+0x3e>
		}
		case PCD_TRANSCEIVE: {
			irqEn = 0x77;
 8000e1e:	2377      	movs	r3, #119	@ 0x77
 8000e20:	75bb      	strb	r3, [r7, #22]
			waitIRq = 0x30;
 8000e22:	2330      	movs	r3, #48	@ 0x30
 8000e24:	757b      	strb	r3, [r7, #21]
			break;
 8000e26:	e000      	b.n	8000e2a <TM_MFRC522_ToCard+0x3e>
		}
		default:
			break;
 8000e28:	bf00      	nop
	}

	TM_MFRC522_WriteRegister(MFRC522_REG_COMM_IE_N, irqEn | 0x80);
 8000e2a:	7dbb      	ldrb	r3, [r7, #22]
 8000e2c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000e30:	b2db      	uxtb	r3, r3
 8000e32:	4619      	mov	r1, r3
 8000e34:	2002      	movs	r0, #2
 8000e36:	f7ff fed1 	bl	8000bdc <TM_MFRC522_WriteRegister>
	TM_MFRC522_ClearBitMask(MFRC522_REG_COMM_IRQ, 0x80);
 8000e3a:	2180      	movs	r1, #128	@ 0x80
 8000e3c:	2004      	movs	r0, #4
 8000e3e:	f7ff ff75 	bl	8000d2c <TM_MFRC522_ClearBitMask>
	TM_MFRC522_SetBitMask(MFRC522_REG_FIFO_LEVEL, 0x80);
 8000e42:	2180      	movs	r1, #128	@ 0x80
 8000e44:	200a      	movs	r0, #10
 8000e46:	f7ff ff57 	bl	8000cf8 <TM_MFRC522_SetBitMask>

	TM_MFRC522_WriteRegister(MFRC522_REG_COMMAND, PCD_IDLE);
 8000e4a:	2100      	movs	r1, #0
 8000e4c:	2001      	movs	r0, #1
 8000e4e:	f7ff fec5 	bl	8000bdc <TM_MFRC522_WriteRegister>

	//Writing data to the FIFO
	for (i = 0; i < sendLen; i++) {   
 8000e52:	2300      	movs	r3, #0
 8000e54:	827b      	strh	r3, [r7, #18]
 8000e56:	e00a      	b.n	8000e6e <TM_MFRC522_ToCard+0x82>
		TM_MFRC522_WriteRegister(MFRC522_REG_FIFO_DATA, sendData[i]);    
 8000e58:	8a7b      	ldrh	r3, [r7, #18]
 8000e5a:	68ba      	ldr	r2, [r7, #8]
 8000e5c:	4413      	add	r3, r2
 8000e5e:	781b      	ldrb	r3, [r3, #0]
 8000e60:	4619      	mov	r1, r3
 8000e62:	2009      	movs	r0, #9
 8000e64:	f7ff feba 	bl	8000bdc <TM_MFRC522_WriteRegister>
	for (i = 0; i < sendLen; i++) {   
 8000e68:	8a7b      	ldrh	r3, [r7, #18]
 8000e6a:	3301      	adds	r3, #1
 8000e6c:	827b      	strh	r3, [r7, #18]
 8000e6e:	7bbb      	ldrb	r3, [r7, #14]
 8000e70:	b29b      	uxth	r3, r3
 8000e72:	8a7a      	ldrh	r2, [r7, #18]
 8000e74:	429a      	cmp	r2, r3
 8000e76:	d3ef      	bcc.n	8000e58 <TM_MFRC522_ToCard+0x6c>
	}

	//Execute the command
	TM_MFRC522_WriteRegister(MFRC522_REG_COMMAND, command);
 8000e78:	7bfb      	ldrb	r3, [r7, #15]
 8000e7a:	4619      	mov	r1, r3
 8000e7c:	2001      	movs	r0, #1
 8000e7e:	f7ff fead 	bl	8000bdc <TM_MFRC522_WriteRegister>
	if (command == PCD_TRANSCEIVE) {    
 8000e82:	7bfb      	ldrb	r3, [r7, #15]
 8000e84:	2b0c      	cmp	r3, #12
 8000e86:	d103      	bne.n	8000e90 <TM_MFRC522_ToCard+0xa4>
		TM_MFRC522_SetBitMask(MFRC522_REG_BIT_FRAMING, 0x80);		//StartSend=1,transmission of data starts  
 8000e88:	2180      	movs	r1, #128	@ 0x80
 8000e8a:	200d      	movs	r0, #13
 8000e8c:	f7ff ff34 	bl	8000cf8 <TM_MFRC522_SetBitMask>
	}   

	//Waiting to receive data to complete
	i = 2000;	//i according to the clock frequency adjustment, the operator M1 card maximum waiting time 25ms???
 8000e90:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000e94:	827b      	strh	r3, [r7, #18]
	do {
		//CommIrqReg[7..0]
		//Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
		n = TM_MFRC522_ReadRegister(MFRC522_REG_COMM_IRQ);
 8000e96:	2004      	movs	r0, #4
 8000e98:	f7ff fee4 	bl	8000c64 <TM_MFRC522_ReadRegister>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	753b      	strb	r3, [r7, #20]
		i--;
 8000ea0:	8a7b      	ldrh	r3, [r7, #18]
 8000ea2:	3b01      	subs	r3, #1
 8000ea4:	827b      	strh	r3, [r7, #18]
	} while ((i!=0) && !(n&0x01) && !(n&waitIRq));
 8000ea6:	8a7b      	ldrh	r3, [r7, #18]
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d00a      	beq.n	8000ec2 <TM_MFRC522_ToCard+0xd6>
 8000eac:	7d3b      	ldrb	r3, [r7, #20]
 8000eae:	f003 0301 	and.w	r3, r3, #1
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d105      	bne.n	8000ec2 <TM_MFRC522_ToCard+0xd6>
 8000eb6:	7d3a      	ldrb	r2, [r7, #20]
 8000eb8:	7d7b      	ldrb	r3, [r7, #21]
 8000eba:	4013      	ands	r3, r2
 8000ebc:	b2db      	uxtb	r3, r3
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d0e9      	beq.n	8000e96 <TM_MFRC522_ToCard+0xaa>

	TM_MFRC522_ClearBitMask(MFRC522_REG_BIT_FRAMING, 0x80);			//StartSend=0
 8000ec2:	2180      	movs	r1, #128	@ 0x80
 8000ec4:	200d      	movs	r0, #13
 8000ec6:	f7ff ff31 	bl	8000d2c <TM_MFRC522_ClearBitMask>

	if (i != 0)  {
 8000eca:	8a7b      	ldrh	r3, [r7, #18]
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d057      	beq.n	8000f80 <TM_MFRC522_ToCard+0x194>
		if (!(TM_MFRC522_ReadRegister(MFRC522_REG_ERROR) & 0x1B)) {
 8000ed0:	2006      	movs	r0, #6
 8000ed2:	f7ff fec7 	bl	8000c64 <TM_MFRC522_ReadRegister>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	f003 031b 	and.w	r3, r3, #27
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d14d      	bne.n	8000f7c <TM_MFRC522_ToCard+0x190>
			status = MI_OK;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	75fb      	strb	r3, [r7, #23]
			if (n & irqEn & 0x01) {   
 8000ee4:	7d3a      	ldrb	r2, [r7, #20]
 8000ee6:	7dbb      	ldrb	r3, [r7, #22]
 8000ee8:	4013      	ands	r3, r2
 8000eea:	b2db      	uxtb	r3, r3
 8000eec:	f003 0301 	and.w	r3, r3, #1
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d001      	beq.n	8000ef8 <TM_MFRC522_ToCard+0x10c>
				status = MI_NOTAGERR;			
 8000ef4:	2301      	movs	r3, #1
 8000ef6:	75fb      	strb	r3, [r7, #23]
			}

			if (command == PCD_TRANSCEIVE) {
 8000ef8:	7bfb      	ldrb	r3, [r7, #15]
 8000efa:	2b0c      	cmp	r3, #12
 8000efc:	d140      	bne.n	8000f80 <TM_MFRC522_ToCard+0x194>
				n = TM_MFRC522_ReadRegister(MFRC522_REG_FIFO_LEVEL);
 8000efe:	200a      	movs	r0, #10
 8000f00:	f7ff feb0 	bl	8000c64 <TM_MFRC522_ReadRegister>
 8000f04:	4603      	mov	r3, r0
 8000f06:	753b      	strb	r3, [r7, #20]
				lastBits = TM_MFRC522_ReadRegister(MFRC522_REG_CONTROL) & 0x07;
 8000f08:	200c      	movs	r0, #12
 8000f0a:	f7ff feab 	bl	8000c64 <TM_MFRC522_ReadRegister>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	f003 0307 	and.w	r3, r3, #7
 8000f14:	747b      	strb	r3, [r7, #17]
				if (lastBits) {   
 8000f16:	7c7b      	ldrb	r3, [r7, #17]
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d00b      	beq.n	8000f34 <TM_MFRC522_ToCard+0x148>
					*backLen = (n - 1) * 8 + lastBits;   
 8000f1c:	7d3b      	ldrb	r3, [r7, #20]
 8000f1e:	3b01      	subs	r3, #1
 8000f20:	b29b      	uxth	r3, r3
 8000f22:	00db      	lsls	r3, r3, #3
 8000f24:	b29a      	uxth	r2, r3
 8000f26:	7c7b      	ldrb	r3, [r7, #17]
 8000f28:	b29b      	uxth	r3, r3
 8000f2a:	4413      	add	r3, r2
 8000f2c:	b29a      	uxth	r2, r3
 8000f2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000f30:	801a      	strh	r2, [r3, #0]
 8000f32:	e005      	b.n	8000f40 <TM_MFRC522_ToCard+0x154>
				} else {   
					*backLen = n * 8;   
 8000f34:	7d3b      	ldrb	r3, [r7, #20]
 8000f36:	b29b      	uxth	r3, r3
 8000f38:	00db      	lsls	r3, r3, #3
 8000f3a:	b29a      	uxth	r2, r3
 8000f3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000f3e:	801a      	strh	r2, [r3, #0]
				}

				if (n == 0) {   
 8000f40:	7d3b      	ldrb	r3, [r7, #20]
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d101      	bne.n	8000f4a <TM_MFRC522_ToCard+0x15e>
					n = 1;    
 8000f46:	2301      	movs	r3, #1
 8000f48:	753b      	strb	r3, [r7, #20]
				}
				if (n > MFRC522_MAX_LEN) {   
 8000f4a:	7d3b      	ldrb	r3, [r7, #20]
 8000f4c:	2b10      	cmp	r3, #16
 8000f4e:	d901      	bls.n	8000f54 <TM_MFRC522_ToCard+0x168>
					n = MFRC522_MAX_LEN;   
 8000f50:	2310      	movs	r3, #16
 8000f52:	753b      	strb	r3, [r7, #20]
				}

				//Reading the received data in FIFO
				for (i = 0; i < n; i++) {   
 8000f54:	2300      	movs	r3, #0
 8000f56:	827b      	strh	r3, [r7, #18]
 8000f58:	e00a      	b.n	8000f70 <TM_MFRC522_ToCard+0x184>
					backData[i] = TM_MFRC522_ReadRegister(MFRC522_REG_FIFO_DATA);    
 8000f5a:	8a7b      	ldrh	r3, [r7, #18]
 8000f5c:	687a      	ldr	r2, [r7, #4]
 8000f5e:	18d4      	adds	r4, r2, r3
 8000f60:	2009      	movs	r0, #9
 8000f62:	f7ff fe7f 	bl	8000c64 <TM_MFRC522_ReadRegister>
 8000f66:	4603      	mov	r3, r0
 8000f68:	7023      	strb	r3, [r4, #0]
				for (i = 0; i < n; i++) {   
 8000f6a:	8a7b      	ldrh	r3, [r7, #18]
 8000f6c:	3301      	adds	r3, #1
 8000f6e:	827b      	strh	r3, [r7, #18]
 8000f70:	7d3b      	ldrb	r3, [r7, #20]
 8000f72:	b29b      	uxth	r3, r3
 8000f74:	8a7a      	ldrh	r2, [r7, #18]
 8000f76:	429a      	cmp	r2, r3
 8000f78:	d3ef      	bcc.n	8000f5a <TM_MFRC522_ToCard+0x16e>
 8000f7a:	e001      	b.n	8000f80 <TM_MFRC522_ToCard+0x194>
				}
			}
		} else {   
			status = MI_ERR;  
 8000f7c:	2302      	movs	r3, #2
 8000f7e:	75fb      	strb	r3, [r7, #23]
		}
	}

	return status;
 8000f80:	7dfb      	ldrb	r3, [r7, #23]
}
 8000f82:	4618      	mov	r0, r3
 8000f84:	371c      	adds	r7, #28
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd90      	pop	{r4, r7, pc}

08000f8a <TM_MFRC522_Anticoll>:

TM_MFRC522_Status_t TM_MFRC522_Anticoll(uint8_t* serNum) {
 8000f8a:	b580      	push	{r7, lr}
 8000f8c:	b086      	sub	sp, #24
 8000f8e:	af02      	add	r7, sp, #8
 8000f90:	6078      	str	r0, [r7, #4]
	TM_MFRC522_Status_t status;
	uint8_t i;
	uint8_t serNumCheck = 0;
 8000f92:	2300      	movs	r3, #0
 8000f94:	737b      	strb	r3, [r7, #13]
	uint16_t unLen;

	TM_MFRC522_WriteRegister(MFRC522_REG_BIT_FRAMING, 0x00);		//TxLastBists = BitFramingReg[2..0]
 8000f96:	2100      	movs	r1, #0
 8000f98:	200d      	movs	r0, #13
 8000f9a:	f7ff fe1f 	bl	8000bdc <TM_MFRC522_WriteRegister>

	serNum[0] = PICC_ANTICOLL;
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	2293      	movs	r2, #147	@ 0x93
 8000fa2:	701a      	strb	r2, [r3, #0]
	serNum[1] = 0x20;
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	3301      	adds	r3, #1
 8000fa8:	2220      	movs	r2, #32
 8000faa:	701a      	strb	r2, [r3, #0]
	status = TM_MFRC522_ToCard(PCD_TRANSCEIVE, serNum, 2, serNum, &unLen);
 8000fac:	f107 030a 	add.w	r3, r7, #10
 8000fb0:	9300      	str	r3, [sp, #0]
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	2202      	movs	r2, #2
 8000fb6:	6879      	ldr	r1, [r7, #4]
 8000fb8:	200c      	movs	r0, #12
 8000fba:	f7ff ff17 	bl	8000dec <TM_MFRC522_ToCard>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	73fb      	strb	r3, [r7, #15]

	if (status == MI_OK) {
 8000fc2:	7bfb      	ldrb	r3, [r7, #15]
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d118      	bne.n	8000ffa <TM_MFRC522_Anticoll+0x70>
		//Check card serial number
		for (i = 0; i < 4; i++) {   
 8000fc8:	2300      	movs	r3, #0
 8000fca:	73bb      	strb	r3, [r7, #14]
 8000fcc:	e009      	b.n	8000fe2 <TM_MFRC522_Anticoll+0x58>
			serNumCheck ^= serNum[i];
 8000fce:	7bbb      	ldrb	r3, [r7, #14]
 8000fd0:	687a      	ldr	r2, [r7, #4]
 8000fd2:	4413      	add	r3, r2
 8000fd4:	781a      	ldrb	r2, [r3, #0]
 8000fd6:	7b7b      	ldrb	r3, [r7, #13]
 8000fd8:	4053      	eors	r3, r2
 8000fda:	737b      	strb	r3, [r7, #13]
		for (i = 0; i < 4; i++) {   
 8000fdc:	7bbb      	ldrb	r3, [r7, #14]
 8000fde:	3301      	adds	r3, #1
 8000fe0:	73bb      	strb	r3, [r7, #14]
 8000fe2:	7bbb      	ldrb	r3, [r7, #14]
 8000fe4:	2b03      	cmp	r3, #3
 8000fe6:	d9f2      	bls.n	8000fce <TM_MFRC522_Anticoll+0x44>
		}
		if (serNumCheck != serNum[i]) {   
 8000fe8:	7bbb      	ldrb	r3, [r7, #14]
 8000fea:	687a      	ldr	r2, [r7, #4]
 8000fec:	4413      	add	r3, r2
 8000fee:	781b      	ldrb	r3, [r3, #0]
 8000ff0:	7b7a      	ldrb	r2, [r7, #13]
 8000ff2:	429a      	cmp	r2, r3
 8000ff4:	d001      	beq.n	8000ffa <TM_MFRC522_Anticoll+0x70>
			status = MI_ERR;    
 8000ff6:	2302      	movs	r3, #2
 8000ff8:	73fb      	strb	r3, [r7, #15]
		}
	}
	return status;
 8000ffa:	7bfb      	ldrb	r3, [r7, #15]
} 
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	3710      	adds	r7, #16
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}

08001004 <TM_MFRC522_CalculateCRC>:

void TM_MFRC522_CalculateCRC(uint8_t*  pIndata, uint8_t len, uint8_t* pOutData) {
 8001004:	b590      	push	{r4, r7, lr}
 8001006:	b087      	sub	sp, #28
 8001008:	af00      	add	r7, sp, #0
 800100a:	60f8      	str	r0, [r7, #12]
 800100c:	460b      	mov	r3, r1
 800100e:	607a      	str	r2, [r7, #4]
 8001010:	72fb      	strb	r3, [r7, #11]
	uint8_t i, n;

	TM_MFRC522_ClearBitMask(MFRC522_REG_DIV_IRQ, 0x04);				//CRCIrq = 0
 8001012:	2104      	movs	r1, #4
 8001014:	2005      	movs	r0, #5
 8001016:	f7ff fe89 	bl	8000d2c <TM_MFRC522_ClearBitMask>
	TM_MFRC522_SetBitMask(MFRC522_REG_FIFO_LEVEL, 0x80);			//Clear the FIFO pointer
 800101a:	2180      	movs	r1, #128	@ 0x80
 800101c:	200a      	movs	r0, #10
 800101e:	f7ff fe6b 	bl	8000cf8 <TM_MFRC522_SetBitMask>
	//Write_MFRC522(CommandReg, PCD_IDLE);

	//Writing data to the FIFO	
	for (i = 0; i < len; i++) {   
 8001022:	2300      	movs	r3, #0
 8001024:	75fb      	strb	r3, [r7, #23]
 8001026:	e00a      	b.n	800103e <TM_MFRC522_CalculateCRC+0x3a>
		TM_MFRC522_WriteRegister(MFRC522_REG_FIFO_DATA, *(pIndata+i));   
 8001028:	7dfb      	ldrb	r3, [r7, #23]
 800102a:	68fa      	ldr	r2, [r7, #12]
 800102c:	4413      	add	r3, r2
 800102e:	781b      	ldrb	r3, [r3, #0]
 8001030:	4619      	mov	r1, r3
 8001032:	2009      	movs	r0, #9
 8001034:	f7ff fdd2 	bl	8000bdc <TM_MFRC522_WriteRegister>
	for (i = 0; i < len; i++) {   
 8001038:	7dfb      	ldrb	r3, [r7, #23]
 800103a:	3301      	adds	r3, #1
 800103c:	75fb      	strb	r3, [r7, #23]
 800103e:	7dfa      	ldrb	r2, [r7, #23]
 8001040:	7afb      	ldrb	r3, [r7, #11]
 8001042:	429a      	cmp	r2, r3
 8001044:	d3f0      	bcc.n	8001028 <TM_MFRC522_CalculateCRC+0x24>
	}
	TM_MFRC522_WriteRegister(MFRC522_REG_COMMAND, PCD_CALCCRC);
 8001046:	2103      	movs	r1, #3
 8001048:	2001      	movs	r0, #1
 800104a:	f7ff fdc7 	bl	8000bdc <TM_MFRC522_WriteRegister>

	//Wait CRC calculation is complete
	i = 0xFF;
 800104e:	23ff      	movs	r3, #255	@ 0xff
 8001050:	75fb      	strb	r3, [r7, #23]
	do {
		n = TM_MFRC522_ReadRegister(MFRC522_REG_DIV_IRQ);
 8001052:	2005      	movs	r0, #5
 8001054:	f7ff fe06 	bl	8000c64 <TM_MFRC522_ReadRegister>
 8001058:	4603      	mov	r3, r0
 800105a:	75bb      	strb	r3, [r7, #22]
		i--;
 800105c:	7dfb      	ldrb	r3, [r7, #23]
 800105e:	3b01      	subs	r3, #1
 8001060:	75fb      	strb	r3, [r7, #23]
	} while ((i!=0) && !(n&0x04));			//CRCIrq = 1
 8001062:	7dfb      	ldrb	r3, [r7, #23]
 8001064:	2b00      	cmp	r3, #0
 8001066:	d004      	beq.n	8001072 <TM_MFRC522_CalculateCRC+0x6e>
 8001068:	7dbb      	ldrb	r3, [r7, #22]
 800106a:	f003 0304 	and.w	r3, r3, #4
 800106e:	2b00      	cmp	r3, #0
 8001070:	d0ef      	beq.n	8001052 <TM_MFRC522_CalculateCRC+0x4e>

	//Read CRC calculation result
	pOutData[0] = TM_MFRC522_ReadRegister(MFRC522_REG_CRC_RESULT_L);
 8001072:	2022      	movs	r0, #34	@ 0x22
 8001074:	f7ff fdf6 	bl	8000c64 <TM_MFRC522_ReadRegister>
 8001078:	4603      	mov	r3, r0
 800107a:	461a      	mov	r2, r3
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	701a      	strb	r2, [r3, #0]
	pOutData[1] = TM_MFRC522_ReadRegister(MFRC522_REG_CRC_RESULT_M);
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	1c5c      	adds	r4, r3, #1
 8001084:	2021      	movs	r0, #33	@ 0x21
 8001086:	f7ff fded 	bl	8000c64 <TM_MFRC522_ReadRegister>
 800108a:	4603      	mov	r3, r0
 800108c:	7023      	strb	r3, [r4, #0]
}
 800108e:	bf00      	nop
 8001090:	371c      	adds	r7, #28
 8001092:	46bd      	mov	sp, r7
 8001094:	bd90      	pop	{r4, r7, pc}

08001096 <TM_MFRC522_Halt>:
	}

	return status;
}

void TM_MFRC522_Halt(void) {
 8001096:	b580      	push	{r7, lr}
 8001098:	b084      	sub	sp, #16
 800109a:	af02      	add	r7, sp, #8
	uint16_t unLen;
	uint8_t buff[4]; 

	buff[0] = PICC_HALT;
 800109c:	2350      	movs	r3, #80	@ 0x50
 800109e:	703b      	strb	r3, [r7, #0]
	buff[1] = 0;
 80010a0:	2300      	movs	r3, #0
 80010a2:	707b      	strb	r3, [r7, #1]
	TM_MFRC522_CalculateCRC(buff, 2, &buff[2]);
 80010a4:	463b      	mov	r3, r7
 80010a6:	1c9a      	adds	r2, r3, #2
 80010a8:	463b      	mov	r3, r7
 80010aa:	2102      	movs	r1, #2
 80010ac:	4618      	mov	r0, r3
 80010ae:	f7ff ffa9 	bl	8001004 <TM_MFRC522_CalculateCRC>

	TM_MFRC522_ToCard(PCD_TRANSCEIVE, buff, 4, buff, &unLen);
 80010b2:	463a      	mov	r2, r7
 80010b4:	4639      	mov	r1, r7
 80010b6:	1dbb      	adds	r3, r7, #6
 80010b8:	9300      	str	r3, [sp, #0]
 80010ba:	4613      	mov	r3, r2
 80010bc:	2204      	movs	r2, #4
 80010be:	200c      	movs	r0, #12
 80010c0:	f7ff fe94 	bl	8000dec <TM_MFRC522_ToCard>
}
 80010c4:	bf00      	nop
 80010c6:	3708      	adds	r7, #8
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}

080010cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80010cc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001104 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80010d0:	f7ff fd18 	bl	8000b04 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80010d4:	480c      	ldr	r0, [pc, #48]	@ (8001108 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80010d6:	490d      	ldr	r1, [pc, #52]	@ (800110c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80010d8:	4a0d      	ldr	r2, [pc, #52]	@ (8001110 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80010da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010dc:	e002      	b.n	80010e4 <LoopCopyDataInit>

080010de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010e2:	3304      	adds	r3, #4

080010e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010e8:	d3f9      	bcc.n	80010de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010ea:	4a0a      	ldr	r2, [pc, #40]	@ (8001114 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80010ec:	4c0a      	ldr	r4, [pc, #40]	@ (8001118 <LoopFillZerobss+0x22>)
  movs r3, #0
 80010ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010f0:	e001      	b.n	80010f6 <LoopFillZerobss>

080010f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010f4:	3204      	adds	r2, #4

080010f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010f8:	d3fb      	bcc.n	80010f2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80010fa:	f002 f9c5 	bl	8003488 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010fe:	f7ff fa47 	bl	8000590 <main>
  bx  lr    
 8001102:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001104:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001108:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800110c:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001110:	08003e60 	.word	0x08003e60
  ldr r2, =_sbss
 8001114:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001118:	20000268 	.word	0x20000268

0800111c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800111c:	e7fe      	b.n	800111c <ADC_IRQHandler>
	...

08001120 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001124:	4b0e      	ldr	r3, [pc, #56]	@ (8001160 <HAL_Init+0x40>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	4a0d      	ldr	r2, [pc, #52]	@ (8001160 <HAL_Init+0x40>)
 800112a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800112e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001130:	4b0b      	ldr	r3, [pc, #44]	@ (8001160 <HAL_Init+0x40>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	4a0a      	ldr	r2, [pc, #40]	@ (8001160 <HAL_Init+0x40>)
 8001136:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800113a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800113c:	4b08      	ldr	r3, [pc, #32]	@ (8001160 <HAL_Init+0x40>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	4a07      	ldr	r2, [pc, #28]	@ (8001160 <HAL_Init+0x40>)
 8001142:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001146:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001148:	2003      	movs	r0, #3
 800114a:	f000 f931 	bl	80013b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800114e:	200f      	movs	r0, #15
 8001150:	f000 f808 	bl	8001164 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001154:	f7ff fbb8 	bl	80008c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001158:	2300      	movs	r3, #0
}
 800115a:	4618      	mov	r0, r3
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	40023c00 	.word	0x40023c00

08001164 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b082      	sub	sp, #8
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800116c:	4b12      	ldr	r3, [pc, #72]	@ (80011b8 <HAL_InitTick+0x54>)
 800116e:	681a      	ldr	r2, [r3, #0]
 8001170:	4b12      	ldr	r3, [pc, #72]	@ (80011bc <HAL_InitTick+0x58>)
 8001172:	781b      	ldrb	r3, [r3, #0]
 8001174:	4619      	mov	r1, r3
 8001176:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800117a:	fbb3 f3f1 	udiv	r3, r3, r1
 800117e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001182:	4618      	mov	r0, r3
 8001184:	f000 f93b 	bl	80013fe <HAL_SYSTICK_Config>
 8001188:	4603      	mov	r3, r0
 800118a:	2b00      	cmp	r3, #0
 800118c:	d001      	beq.n	8001192 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800118e:	2301      	movs	r3, #1
 8001190:	e00e      	b.n	80011b0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	2b0f      	cmp	r3, #15
 8001196:	d80a      	bhi.n	80011ae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001198:	2200      	movs	r2, #0
 800119a:	6879      	ldr	r1, [r7, #4]
 800119c:	f04f 30ff 	mov.w	r0, #4294967295
 80011a0:	f000 f911 	bl	80013c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011a4:	4a06      	ldr	r2, [pc, #24]	@ (80011c0 <HAL_InitTick+0x5c>)
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011aa:	2300      	movs	r3, #0
 80011ac:	e000      	b.n	80011b0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011ae:	2301      	movs	r3, #1
}
 80011b0:	4618      	mov	r0, r3
 80011b2:	3708      	adds	r7, #8
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	20000000 	.word	0x20000000
 80011bc:	20000008 	.word	0x20000008
 80011c0:	20000004 	.word	0x20000004

080011c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011c4:	b480      	push	{r7}
 80011c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011c8:	4b06      	ldr	r3, [pc, #24]	@ (80011e4 <HAL_IncTick+0x20>)
 80011ca:	781b      	ldrb	r3, [r3, #0]
 80011cc:	461a      	mov	r2, r3
 80011ce:	4b06      	ldr	r3, [pc, #24]	@ (80011e8 <HAL_IncTick+0x24>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	4413      	add	r3, r2
 80011d4:	4a04      	ldr	r2, [pc, #16]	@ (80011e8 <HAL_IncTick+0x24>)
 80011d6:	6013      	str	r3, [r2, #0]
}
 80011d8:	bf00      	nop
 80011da:	46bd      	mov	sp, r7
 80011dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e0:	4770      	bx	lr
 80011e2:	bf00      	nop
 80011e4:	20000008 	.word	0x20000008
 80011e8:	2000011c 	.word	0x2000011c

080011ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011ec:	b480      	push	{r7}
 80011ee:	af00      	add	r7, sp, #0
  return uwTick;
 80011f0:	4b03      	ldr	r3, [pc, #12]	@ (8001200 <HAL_GetTick+0x14>)
 80011f2:	681b      	ldr	r3, [r3, #0]
}
 80011f4:	4618      	mov	r0, r3
 80011f6:	46bd      	mov	sp, r7
 80011f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fc:	4770      	bx	lr
 80011fe:	bf00      	nop
 8001200:	2000011c 	.word	0x2000011c

08001204 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b084      	sub	sp, #16
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800120c:	f7ff ffee 	bl	80011ec <HAL_GetTick>
 8001210:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	f1b3 3fff 	cmp.w	r3, #4294967295
 800121c:	d005      	beq.n	800122a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800121e:	4b0a      	ldr	r3, [pc, #40]	@ (8001248 <HAL_Delay+0x44>)
 8001220:	781b      	ldrb	r3, [r3, #0]
 8001222:	461a      	mov	r2, r3
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	4413      	add	r3, r2
 8001228:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800122a:	bf00      	nop
 800122c:	f7ff ffde 	bl	80011ec <HAL_GetTick>
 8001230:	4602      	mov	r2, r0
 8001232:	68bb      	ldr	r3, [r7, #8]
 8001234:	1ad3      	subs	r3, r2, r3
 8001236:	68fa      	ldr	r2, [r7, #12]
 8001238:	429a      	cmp	r2, r3
 800123a:	d8f7      	bhi.n	800122c <HAL_Delay+0x28>
  {
  }
}
 800123c:	bf00      	nop
 800123e:	bf00      	nop
 8001240:	3710      	adds	r7, #16
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	20000008 	.word	0x20000008

0800124c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800124c:	b480      	push	{r7}
 800124e:	b085      	sub	sp, #20
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	f003 0307 	and.w	r3, r3, #7
 800125a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800125c:	4b0c      	ldr	r3, [pc, #48]	@ (8001290 <__NVIC_SetPriorityGrouping+0x44>)
 800125e:	68db      	ldr	r3, [r3, #12]
 8001260:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001262:	68ba      	ldr	r2, [r7, #8]
 8001264:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001268:	4013      	ands	r3, r2
 800126a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001270:	68bb      	ldr	r3, [r7, #8]
 8001272:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001274:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001278:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800127c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800127e:	4a04      	ldr	r2, [pc, #16]	@ (8001290 <__NVIC_SetPriorityGrouping+0x44>)
 8001280:	68bb      	ldr	r3, [r7, #8]
 8001282:	60d3      	str	r3, [r2, #12]
}
 8001284:	bf00      	nop
 8001286:	3714      	adds	r7, #20
 8001288:	46bd      	mov	sp, r7
 800128a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128e:	4770      	bx	lr
 8001290:	e000ed00 	.word	0xe000ed00

08001294 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001294:	b480      	push	{r7}
 8001296:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001298:	4b04      	ldr	r3, [pc, #16]	@ (80012ac <__NVIC_GetPriorityGrouping+0x18>)
 800129a:	68db      	ldr	r3, [r3, #12]
 800129c:	0a1b      	lsrs	r3, r3, #8
 800129e:	f003 0307 	and.w	r3, r3, #7
}
 80012a2:	4618      	mov	r0, r3
 80012a4:	46bd      	mov	sp, r7
 80012a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012aa:	4770      	bx	lr
 80012ac:	e000ed00 	.word	0xe000ed00

080012b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012b0:	b480      	push	{r7}
 80012b2:	b083      	sub	sp, #12
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	4603      	mov	r3, r0
 80012b8:	6039      	str	r1, [r7, #0]
 80012ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	db0a      	blt.n	80012da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	b2da      	uxtb	r2, r3
 80012c8:	490c      	ldr	r1, [pc, #48]	@ (80012fc <__NVIC_SetPriority+0x4c>)
 80012ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ce:	0112      	lsls	r2, r2, #4
 80012d0:	b2d2      	uxtb	r2, r2
 80012d2:	440b      	add	r3, r1
 80012d4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012d8:	e00a      	b.n	80012f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	b2da      	uxtb	r2, r3
 80012de:	4908      	ldr	r1, [pc, #32]	@ (8001300 <__NVIC_SetPriority+0x50>)
 80012e0:	79fb      	ldrb	r3, [r7, #7]
 80012e2:	f003 030f 	and.w	r3, r3, #15
 80012e6:	3b04      	subs	r3, #4
 80012e8:	0112      	lsls	r2, r2, #4
 80012ea:	b2d2      	uxtb	r2, r2
 80012ec:	440b      	add	r3, r1
 80012ee:	761a      	strb	r2, [r3, #24]
}
 80012f0:	bf00      	nop
 80012f2:	370c      	adds	r7, #12
 80012f4:	46bd      	mov	sp, r7
 80012f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fa:	4770      	bx	lr
 80012fc:	e000e100 	.word	0xe000e100
 8001300:	e000ed00 	.word	0xe000ed00

08001304 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001304:	b480      	push	{r7}
 8001306:	b089      	sub	sp, #36	@ 0x24
 8001308:	af00      	add	r7, sp, #0
 800130a:	60f8      	str	r0, [r7, #12]
 800130c:	60b9      	str	r1, [r7, #8]
 800130e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	f003 0307 	and.w	r3, r3, #7
 8001316:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001318:	69fb      	ldr	r3, [r7, #28]
 800131a:	f1c3 0307 	rsb	r3, r3, #7
 800131e:	2b04      	cmp	r3, #4
 8001320:	bf28      	it	cs
 8001322:	2304      	movcs	r3, #4
 8001324:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001326:	69fb      	ldr	r3, [r7, #28]
 8001328:	3304      	adds	r3, #4
 800132a:	2b06      	cmp	r3, #6
 800132c:	d902      	bls.n	8001334 <NVIC_EncodePriority+0x30>
 800132e:	69fb      	ldr	r3, [r7, #28]
 8001330:	3b03      	subs	r3, #3
 8001332:	e000      	b.n	8001336 <NVIC_EncodePriority+0x32>
 8001334:	2300      	movs	r3, #0
 8001336:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001338:	f04f 32ff 	mov.w	r2, #4294967295
 800133c:	69bb      	ldr	r3, [r7, #24]
 800133e:	fa02 f303 	lsl.w	r3, r2, r3
 8001342:	43da      	mvns	r2, r3
 8001344:	68bb      	ldr	r3, [r7, #8]
 8001346:	401a      	ands	r2, r3
 8001348:	697b      	ldr	r3, [r7, #20]
 800134a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800134c:	f04f 31ff 	mov.w	r1, #4294967295
 8001350:	697b      	ldr	r3, [r7, #20]
 8001352:	fa01 f303 	lsl.w	r3, r1, r3
 8001356:	43d9      	mvns	r1, r3
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800135c:	4313      	orrs	r3, r2
         );
}
 800135e:	4618      	mov	r0, r3
 8001360:	3724      	adds	r7, #36	@ 0x24
 8001362:	46bd      	mov	sp, r7
 8001364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001368:	4770      	bx	lr
	...

0800136c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b082      	sub	sp, #8
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	3b01      	subs	r3, #1
 8001378:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800137c:	d301      	bcc.n	8001382 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800137e:	2301      	movs	r3, #1
 8001380:	e00f      	b.n	80013a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001382:	4a0a      	ldr	r2, [pc, #40]	@ (80013ac <SysTick_Config+0x40>)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	3b01      	subs	r3, #1
 8001388:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800138a:	210f      	movs	r1, #15
 800138c:	f04f 30ff 	mov.w	r0, #4294967295
 8001390:	f7ff ff8e 	bl	80012b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001394:	4b05      	ldr	r3, [pc, #20]	@ (80013ac <SysTick_Config+0x40>)
 8001396:	2200      	movs	r2, #0
 8001398:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800139a:	4b04      	ldr	r3, [pc, #16]	@ (80013ac <SysTick_Config+0x40>)
 800139c:	2207      	movs	r2, #7
 800139e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013a0:	2300      	movs	r3, #0
}
 80013a2:	4618      	mov	r0, r3
 80013a4:	3708      	adds	r7, #8
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	e000e010 	.word	0xe000e010

080013b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b082      	sub	sp, #8
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013b8:	6878      	ldr	r0, [r7, #4]
 80013ba:	f7ff ff47 	bl	800124c <__NVIC_SetPriorityGrouping>
}
 80013be:	bf00      	nop
 80013c0:	3708      	adds	r7, #8
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}

080013c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013c6:	b580      	push	{r7, lr}
 80013c8:	b086      	sub	sp, #24
 80013ca:	af00      	add	r7, sp, #0
 80013cc:	4603      	mov	r3, r0
 80013ce:	60b9      	str	r1, [r7, #8]
 80013d0:	607a      	str	r2, [r7, #4]
 80013d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013d4:	2300      	movs	r3, #0
 80013d6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013d8:	f7ff ff5c 	bl	8001294 <__NVIC_GetPriorityGrouping>
 80013dc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013de:	687a      	ldr	r2, [r7, #4]
 80013e0:	68b9      	ldr	r1, [r7, #8]
 80013e2:	6978      	ldr	r0, [r7, #20]
 80013e4:	f7ff ff8e 	bl	8001304 <NVIC_EncodePriority>
 80013e8:	4602      	mov	r2, r0
 80013ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013ee:	4611      	mov	r1, r2
 80013f0:	4618      	mov	r0, r3
 80013f2:	f7ff ff5d 	bl	80012b0 <__NVIC_SetPriority>
}
 80013f6:	bf00      	nop
 80013f8:	3718      	adds	r7, #24
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}

080013fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013fe:	b580      	push	{r7, lr}
 8001400:	b082      	sub	sp, #8
 8001402:	af00      	add	r7, sp, #0
 8001404:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001406:	6878      	ldr	r0, [r7, #4]
 8001408:	f7ff ffb0 	bl	800136c <SysTick_Config>
 800140c:	4603      	mov	r3, r0
}
 800140e:	4618      	mov	r0, r3
 8001410:	3708      	adds	r7, #8
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}
	...

08001418 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001418:	b480      	push	{r7}
 800141a:	b089      	sub	sp, #36	@ 0x24
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
 8001420:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001422:	2300      	movs	r3, #0
 8001424:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001426:	2300      	movs	r3, #0
 8001428:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800142a:	2300      	movs	r3, #0
 800142c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800142e:	2300      	movs	r3, #0
 8001430:	61fb      	str	r3, [r7, #28]
 8001432:	e177      	b.n	8001724 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001434:	2201      	movs	r2, #1
 8001436:	69fb      	ldr	r3, [r7, #28]
 8001438:	fa02 f303 	lsl.w	r3, r2, r3
 800143c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	697a      	ldr	r2, [r7, #20]
 8001444:	4013      	ands	r3, r2
 8001446:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001448:	693a      	ldr	r2, [r7, #16]
 800144a:	697b      	ldr	r3, [r7, #20]
 800144c:	429a      	cmp	r2, r3
 800144e:	f040 8166 	bne.w	800171e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	685b      	ldr	r3, [r3, #4]
 8001456:	f003 0303 	and.w	r3, r3, #3
 800145a:	2b01      	cmp	r3, #1
 800145c:	d005      	beq.n	800146a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	685b      	ldr	r3, [r3, #4]
 8001462:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001466:	2b02      	cmp	r3, #2
 8001468:	d130      	bne.n	80014cc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	689b      	ldr	r3, [r3, #8]
 800146e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001470:	69fb      	ldr	r3, [r7, #28]
 8001472:	005b      	lsls	r3, r3, #1
 8001474:	2203      	movs	r2, #3
 8001476:	fa02 f303 	lsl.w	r3, r2, r3
 800147a:	43db      	mvns	r3, r3
 800147c:	69ba      	ldr	r2, [r7, #24]
 800147e:	4013      	ands	r3, r2
 8001480:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	68da      	ldr	r2, [r3, #12]
 8001486:	69fb      	ldr	r3, [r7, #28]
 8001488:	005b      	lsls	r3, r3, #1
 800148a:	fa02 f303 	lsl.w	r3, r2, r3
 800148e:	69ba      	ldr	r2, [r7, #24]
 8001490:	4313      	orrs	r3, r2
 8001492:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	69ba      	ldr	r2, [r7, #24]
 8001498:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	685b      	ldr	r3, [r3, #4]
 800149e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80014a0:	2201      	movs	r2, #1
 80014a2:	69fb      	ldr	r3, [r7, #28]
 80014a4:	fa02 f303 	lsl.w	r3, r2, r3
 80014a8:	43db      	mvns	r3, r3
 80014aa:	69ba      	ldr	r2, [r7, #24]
 80014ac:	4013      	ands	r3, r2
 80014ae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	685b      	ldr	r3, [r3, #4]
 80014b4:	091b      	lsrs	r3, r3, #4
 80014b6:	f003 0201 	and.w	r2, r3, #1
 80014ba:	69fb      	ldr	r3, [r7, #28]
 80014bc:	fa02 f303 	lsl.w	r3, r2, r3
 80014c0:	69ba      	ldr	r2, [r7, #24]
 80014c2:	4313      	orrs	r3, r2
 80014c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	69ba      	ldr	r2, [r7, #24]
 80014ca:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	685b      	ldr	r3, [r3, #4]
 80014d0:	f003 0303 	and.w	r3, r3, #3
 80014d4:	2b03      	cmp	r3, #3
 80014d6:	d017      	beq.n	8001508 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	68db      	ldr	r3, [r3, #12]
 80014dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80014de:	69fb      	ldr	r3, [r7, #28]
 80014e0:	005b      	lsls	r3, r3, #1
 80014e2:	2203      	movs	r2, #3
 80014e4:	fa02 f303 	lsl.w	r3, r2, r3
 80014e8:	43db      	mvns	r3, r3
 80014ea:	69ba      	ldr	r2, [r7, #24]
 80014ec:	4013      	ands	r3, r2
 80014ee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	689a      	ldr	r2, [r3, #8]
 80014f4:	69fb      	ldr	r3, [r7, #28]
 80014f6:	005b      	lsls	r3, r3, #1
 80014f8:	fa02 f303 	lsl.w	r3, r2, r3
 80014fc:	69ba      	ldr	r2, [r7, #24]
 80014fe:	4313      	orrs	r3, r2
 8001500:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	69ba      	ldr	r2, [r7, #24]
 8001506:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	f003 0303 	and.w	r3, r3, #3
 8001510:	2b02      	cmp	r3, #2
 8001512:	d123      	bne.n	800155c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001514:	69fb      	ldr	r3, [r7, #28]
 8001516:	08da      	lsrs	r2, r3, #3
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	3208      	adds	r2, #8
 800151c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001520:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001522:	69fb      	ldr	r3, [r7, #28]
 8001524:	f003 0307 	and.w	r3, r3, #7
 8001528:	009b      	lsls	r3, r3, #2
 800152a:	220f      	movs	r2, #15
 800152c:	fa02 f303 	lsl.w	r3, r2, r3
 8001530:	43db      	mvns	r3, r3
 8001532:	69ba      	ldr	r2, [r7, #24]
 8001534:	4013      	ands	r3, r2
 8001536:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	691a      	ldr	r2, [r3, #16]
 800153c:	69fb      	ldr	r3, [r7, #28]
 800153e:	f003 0307 	and.w	r3, r3, #7
 8001542:	009b      	lsls	r3, r3, #2
 8001544:	fa02 f303 	lsl.w	r3, r2, r3
 8001548:	69ba      	ldr	r2, [r7, #24]
 800154a:	4313      	orrs	r3, r2
 800154c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800154e:	69fb      	ldr	r3, [r7, #28]
 8001550:	08da      	lsrs	r2, r3, #3
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	3208      	adds	r2, #8
 8001556:	69b9      	ldr	r1, [r7, #24]
 8001558:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001562:	69fb      	ldr	r3, [r7, #28]
 8001564:	005b      	lsls	r3, r3, #1
 8001566:	2203      	movs	r2, #3
 8001568:	fa02 f303 	lsl.w	r3, r2, r3
 800156c:	43db      	mvns	r3, r3
 800156e:	69ba      	ldr	r2, [r7, #24]
 8001570:	4013      	ands	r3, r2
 8001572:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	685b      	ldr	r3, [r3, #4]
 8001578:	f003 0203 	and.w	r2, r3, #3
 800157c:	69fb      	ldr	r3, [r7, #28]
 800157e:	005b      	lsls	r3, r3, #1
 8001580:	fa02 f303 	lsl.w	r3, r2, r3
 8001584:	69ba      	ldr	r2, [r7, #24]
 8001586:	4313      	orrs	r3, r2
 8001588:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	69ba      	ldr	r2, [r7, #24]
 800158e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	685b      	ldr	r3, [r3, #4]
 8001594:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001598:	2b00      	cmp	r3, #0
 800159a:	f000 80c0 	beq.w	800171e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800159e:	2300      	movs	r3, #0
 80015a0:	60fb      	str	r3, [r7, #12]
 80015a2:	4b66      	ldr	r3, [pc, #408]	@ (800173c <HAL_GPIO_Init+0x324>)
 80015a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015a6:	4a65      	ldr	r2, [pc, #404]	@ (800173c <HAL_GPIO_Init+0x324>)
 80015a8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80015ac:	6453      	str	r3, [r2, #68]	@ 0x44
 80015ae:	4b63      	ldr	r3, [pc, #396]	@ (800173c <HAL_GPIO_Init+0x324>)
 80015b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015b2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80015b6:	60fb      	str	r3, [r7, #12]
 80015b8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80015ba:	4a61      	ldr	r2, [pc, #388]	@ (8001740 <HAL_GPIO_Init+0x328>)
 80015bc:	69fb      	ldr	r3, [r7, #28]
 80015be:	089b      	lsrs	r3, r3, #2
 80015c0:	3302      	adds	r3, #2
 80015c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80015c8:	69fb      	ldr	r3, [r7, #28]
 80015ca:	f003 0303 	and.w	r3, r3, #3
 80015ce:	009b      	lsls	r3, r3, #2
 80015d0:	220f      	movs	r2, #15
 80015d2:	fa02 f303 	lsl.w	r3, r2, r3
 80015d6:	43db      	mvns	r3, r3
 80015d8:	69ba      	ldr	r2, [r7, #24]
 80015da:	4013      	ands	r3, r2
 80015dc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	4a58      	ldr	r2, [pc, #352]	@ (8001744 <HAL_GPIO_Init+0x32c>)
 80015e2:	4293      	cmp	r3, r2
 80015e4:	d037      	beq.n	8001656 <HAL_GPIO_Init+0x23e>
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	4a57      	ldr	r2, [pc, #348]	@ (8001748 <HAL_GPIO_Init+0x330>)
 80015ea:	4293      	cmp	r3, r2
 80015ec:	d031      	beq.n	8001652 <HAL_GPIO_Init+0x23a>
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	4a56      	ldr	r2, [pc, #344]	@ (800174c <HAL_GPIO_Init+0x334>)
 80015f2:	4293      	cmp	r3, r2
 80015f4:	d02b      	beq.n	800164e <HAL_GPIO_Init+0x236>
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	4a55      	ldr	r2, [pc, #340]	@ (8001750 <HAL_GPIO_Init+0x338>)
 80015fa:	4293      	cmp	r3, r2
 80015fc:	d025      	beq.n	800164a <HAL_GPIO_Init+0x232>
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	4a54      	ldr	r2, [pc, #336]	@ (8001754 <HAL_GPIO_Init+0x33c>)
 8001602:	4293      	cmp	r3, r2
 8001604:	d01f      	beq.n	8001646 <HAL_GPIO_Init+0x22e>
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	4a53      	ldr	r2, [pc, #332]	@ (8001758 <HAL_GPIO_Init+0x340>)
 800160a:	4293      	cmp	r3, r2
 800160c:	d019      	beq.n	8001642 <HAL_GPIO_Init+0x22a>
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	4a52      	ldr	r2, [pc, #328]	@ (800175c <HAL_GPIO_Init+0x344>)
 8001612:	4293      	cmp	r3, r2
 8001614:	d013      	beq.n	800163e <HAL_GPIO_Init+0x226>
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	4a51      	ldr	r2, [pc, #324]	@ (8001760 <HAL_GPIO_Init+0x348>)
 800161a:	4293      	cmp	r3, r2
 800161c:	d00d      	beq.n	800163a <HAL_GPIO_Init+0x222>
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	4a50      	ldr	r2, [pc, #320]	@ (8001764 <HAL_GPIO_Init+0x34c>)
 8001622:	4293      	cmp	r3, r2
 8001624:	d007      	beq.n	8001636 <HAL_GPIO_Init+0x21e>
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	4a4f      	ldr	r2, [pc, #316]	@ (8001768 <HAL_GPIO_Init+0x350>)
 800162a:	4293      	cmp	r3, r2
 800162c:	d101      	bne.n	8001632 <HAL_GPIO_Init+0x21a>
 800162e:	2309      	movs	r3, #9
 8001630:	e012      	b.n	8001658 <HAL_GPIO_Init+0x240>
 8001632:	230a      	movs	r3, #10
 8001634:	e010      	b.n	8001658 <HAL_GPIO_Init+0x240>
 8001636:	2308      	movs	r3, #8
 8001638:	e00e      	b.n	8001658 <HAL_GPIO_Init+0x240>
 800163a:	2307      	movs	r3, #7
 800163c:	e00c      	b.n	8001658 <HAL_GPIO_Init+0x240>
 800163e:	2306      	movs	r3, #6
 8001640:	e00a      	b.n	8001658 <HAL_GPIO_Init+0x240>
 8001642:	2305      	movs	r3, #5
 8001644:	e008      	b.n	8001658 <HAL_GPIO_Init+0x240>
 8001646:	2304      	movs	r3, #4
 8001648:	e006      	b.n	8001658 <HAL_GPIO_Init+0x240>
 800164a:	2303      	movs	r3, #3
 800164c:	e004      	b.n	8001658 <HAL_GPIO_Init+0x240>
 800164e:	2302      	movs	r3, #2
 8001650:	e002      	b.n	8001658 <HAL_GPIO_Init+0x240>
 8001652:	2301      	movs	r3, #1
 8001654:	e000      	b.n	8001658 <HAL_GPIO_Init+0x240>
 8001656:	2300      	movs	r3, #0
 8001658:	69fa      	ldr	r2, [r7, #28]
 800165a:	f002 0203 	and.w	r2, r2, #3
 800165e:	0092      	lsls	r2, r2, #2
 8001660:	4093      	lsls	r3, r2
 8001662:	69ba      	ldr	r2, [r7, #24]
 8001664:	4313      	orrs	r3, r2
 8001666:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001668:	4935      	ldr	r1, [pc, #212]	@ (8001740 <HAL_GPIO_Init+0x328>)
 800166a:	69fb      	ldr	r3, [r7, #28]
 800166c:	089b      	lsrs	r3, r3, #2
 800166e:	3302      	adds	r3, #2
 8001670:	69ba      	ldr	r2, [r7, #24]
 8001672:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001676:	4b3d      	ldr	r3, [pc, #244]	@ (800176c <HAL_GPIO_Init+0x354>)
 8001678:	689b      	ldr	r3, [r3, #8]
 800167a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800167c:	693b      	ldr	r3, [r7, #16]
 800167e:	43db      	mvns	r3, r3
 8001680:	69ba      	ldr	r2, [r7, #24]
 8001682:	4013      	ands	r3, r2
 8001684:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800168e:	2b00      	cmp	r3, #0
 8001690:	d003      	beq.n	800169a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001692:	69ba      	ldr	r2, [r7, #24]
 8001694:	693b      	ldr	r3, [r7, #16]
 8001696:	4313      	orrs	r3, r2
 8001698:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800169a:	4a34      	ldr	r2, [pc, #208]	@ (800176c <HAL_GPIO_Init+0x354>)
 800169c:	69bb      	ldr	r3, [r7, #24]
 800169e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80016a0:	4b32      	ldr	r3, [pc, #200]	@ (800176c <HAL_GPIO_Init+0x354>)
 80016a2:	68db      	ldr	r3, [r3, #12]
 80016a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016a6:	693b      	ldr	r3, [r7, #16]
 80016a8:	43db      	mvns	r3, r3
 80016aa:	69ba      	ldr	r2, [r7, #24]
 80016ac:	4013      	ands	r3, r2
 80016ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d003      	beq.n	80016c4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80016bc:	69ba      	ldr	r2, [r7, #24]
 80016be:	693b      	ldr	r3, [r7, #16]
 80016c0:	4313      	orrs	r3, r2
 80016c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80016c4:	4a29      	ldr	r2, [pc, #164]	@ (800176c <HAL_GPIO_Init+0x354>)
 80016c6:	69bb      	ldr	r3, [r7, #24]
 80016c8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80016ca:	4b28      	ldr	r3, [pc, #160]	@ (800176c <HAL_GPIO_Init+0x354>)
 80016cc:	685b      	ldr	r3, [r3, #4]
 80016ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016d0:	693b      	ldr	r3, [r7, #16]
 80016d2:	43db      	mvns	r3, r3
 80016d4:	69ba      	ldr	r2, [r7, #24]
 80016d6:	4013      	ands	r3, r2
 80016d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	685b      	ldr	r3, [r3, #4]
 80016de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d003      	beq.n	80016ee <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80016e6:	69ba      	ldr	r2, [r7, #24]
 80016e8:	693b      	ldr	r3, [r7, #16]
 80016ea:	4313      	orrs	r3, r2
 80016ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80016ee:	4a1f      	ldr	r2, [pc, #124]	@ (800176c <HAL_GPIO_Init+0x354>)
 80016f0:	69bb      	ldr	r3, [r7, #24]
 80016f2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80016f4:	4b1d      	ldr	r3, [pc, #116]	@ (800176c <HAL_GPIO_Init+0x354>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016fa:	693b      	ldr	r3, [r7, #16]
 80016fc:	43db      	mvns	r3, r3
 80016fe:	69ba      	ldr	r2, [r7, #24]
 8001700:	4013      	ands	r3, r2
 8001702:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800170c:	2b00      	cmp	r3, #0
 800170e:	d003      	beq.n	8001718 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001710:	69ba      	ldr	r2, [r7, #24]
 8001712:	693b      	ldr	r3, [r7, #16]
 8001714:	4313      	orrs	r3, r2
 8001716:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001718:	4a14      	ldr	r2, [pc, #80]	@ (800176c <HAL_GPIO_Init+0x354>)
 800171a:	69bb      	ldr	r3, [r7, #24]
 800171c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800171e:	69fb      	ldr	r3, [r7, #28]
 8001720:	3301      	adds	r3, #1
 8001722:	61fb      	str	r3, [r7, #28]
 8001724:	69fb      	ldr	r3, [r7, #28]
 8001726:	2b0f      	cmp	r3, #15
 8001728:	f67f ae84 	bls.w	8001434 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800172c:	bf00      	nop
 800172e:	bf00      	nop
 8001730:	3724      	adds	r7, #36	@ 0x24
 8001732:	46bd      	mov	sp, r7
 8001734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001738:	4770      	bx	lr
 800173a:	bf00      	nop
 800173c:	40023800 	.word	0x40023800
 8001740:	40013800 	.word	0x40013800
 8001744:	40020000 	.word	0x40020000
 8001748:	40020400 	.word	0x40020400
 800174c:	40020800 	.word	0x40020800
 8001750:	40020c00 	.word	0x40020c00
 8001754:	40021000 	.word	0x40021000
 8001758:	40021400 	.word	0x40021400
 800175c:	40021800 	.word	0x40021800
 8001760:	40021c00 	.word	0x40021c00
 8001764:	40022000 	.word	0x40022000
 8001768:	40022400 	.word	0x40022400
 800176c:	40013c00 	.word	0x40013c00

08001770 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001770:	b480      	push	{r7}
 8001772:	b083      	sub	sp, #12
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
 8001778:	460b      	mov	r3, r1
 800177a:	807b      	strh	r3, [r7, #2]
 800177c:	4613      	mov	r3, r2
 800177e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001780:	787b      	ldrb	r3, [r7, #1]
 8001782:	2b00      	cmp	r3, #0
 8001784:	d003      	beq.n	800178e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001786:	887a      	ldrh	r2, [r7, #2]
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800178c:	e003      	b.n	8001796 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800178e:	887b      	ldrh	r3, [r7, #2]
 8001790:	041a      	lsls	r2, r3, #16
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	619a      	str	r2, [r3, #24]
}
 8001796:	bf00      	nop
 8001798:	370c      	adds	r7, #12
 800179a:	46bd      	mov	sp, r7
 800179c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a0:	4770      	bx	lr
	...

080017a4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b086      	sub	sp, #24
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d101      	bne.n	80017b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80017b2:	2301      	movs	r3, #1
 80017b4:	e267      	b.n	8001c86 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f003 0301 	and.w	r3, r3, #1
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d075      	beq.n	80018ae <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80017c2:	4b88      	ldr	r3, [pc, #544]	@ (80019e4 <HAL_RCC_OscConfig+0x240>)
 80017c4:	689b      	ldr	r3, [r3, #8]
 80017c6:	f003 030c 	and.w	r3, r3, #12
 80017ca:	2b04      	cmp	r3, #4
 80017cc:	d00c      	beq.n	80017e8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80017ce:	4b85      	ldr	r3, [pc, #532]	@ (80019e4 <HAL_RCC_OscConfig+0x240>)
 80017d0:	689b      	ldr	r3, [r3, #8]
 80017d2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80017d6:	2b08      	cmp	r3, #8
 80017d8:	d112      	bne.n	8001800 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80017da:	4b82      	ldr	r3, [pc, #520]	@ (80019e4 <HAL_RCC_OscConfig+0x240>)
 80017dc:	685b      	ldr	r3, [r3, #4]
 80017de:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80017e2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80017e6:	d10b      	bne.n	8001800 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017e8:	4b7e      	ldr	r3, [pc, #504]	@ (80019e4 <HAL_RCC_OscConfig+0x240>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d05b      	beq.n	80018ac <HAL_RCC_OscConfig+0x108>
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d157      	bne.n	80018ac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80017fc:	2301      	movs	r3, #1
 80017fe:	e242      	b.n	8001c86 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	685b      	ldr	r3, [r3, #4]
 8001804:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001808:	d106      	bne.n	8001818 <HAL_RCC_OscConfig+0x74>
 800180a:	4b76      	ldr	r3, [pc, #472]	@ (80019e4 <HAL_RCC_OscConfig+0x240>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	4a75      	ldr	r2, [pc, #468]	@ (80019e4 <HAL_RCC_OscConfig+0x240>)
 8001810:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001814:	6013      	str	r3, [r2, #0]
 8001816:	e01d      	b.n	8001854 <HAL_RCC_OscConfig+0xb0>
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	685b      	ldr	r3, [r3, #4]
 800181c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001820:	d10c      	bne.n	800183c <HAL_RCC_OscConfig+0x98>
 8001822:	4b70      	ldr	r3, [pc, #448]	@ (80019e4 <HAL_RCC_OscConfig+0x240>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	4a6f      	ldr	r2, [pc, #444]	@ (80019e4 <HAL_RCC_OscConfig+0x240>)
 8001828:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800182c:	6013      	str	r3, [r2, #0]
 800182e:	4b6d      	ldr	r3, [pc, #436]	@ (80019e4 <HAL_RCC_OscConfig+0x240>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	4a6c      	ldr	r2, [pc, #432]	@ (80019e4 <HAL_RCC_OscConfig+0x240>)
 8001834:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001838:	6013      	str	r3, [r2, #0]
 800183a:	e00b      	b.n	8001854 <HAL_RCC_OscConfig+0xb0>
 800183c:	4b69      	ldr	r3, [pc, #420]	@ (80019e4 <HAL_RCC_OscConfig+0x240>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4a68      	ldr	r2, [pc, #416]	@ (80019e4 <HAL_RCC_OscConfig+0x240>)
 8001842:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001846:	6013      	str	r3, [r2, #0]
 8001848:	4b66      	ldr	r3, [pc, #408]	@ (80019e4 <HAL_RCC_OscConfig+0x240>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4a65      	ldr	r2, [pc, #404]	@ (80019e4 <HAL_RCC_OscConfig+0x240>)
 800184e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001852:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	2b00      	cmp	r3, #0
 800185a:	d013      	beq.n	8001884 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800185c:	f7ff fcc6 	bl	80011ec <HAL_GetTick>
 8001860:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001862:	e008      	b.n	8001876 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001864:	f7ff fcc2 	bl	80011ec <HAL_GetTick>
 8001868:	4602      	mov	r2, r0
 800186a:	693b      	ldr	r3, [r7, #16]
 800186c:	1ad3      	subs	r3, r2, r3
 800186e:	2b64      	cmp	r3, #100	@ 0x64
 8001870:	d901      	bls.n	8001876 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001872:	2303      	movs	r3, #3
 8001874:	e207      	b.n	8001c86 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001876:	4b5b      	ldr	r3, [pc, #364]	@ (80019e4 <HAL_RCC_OscConfig+0x240>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800187e:	2b00      	cmp	r3, #0
 8001880:	d0f0      	beq.n	8001864 <HAL_RCC_OscConfig+0xc0>
 8001882:	e014      	b.n	80018ae <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001884:	f7ff fcb2 	bl	80011ec <HAL_GetTick>
 8001888:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800188a:	e008      	b.n	800189e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800188c:	f7ff fcae 	bl	80011ec <HAL_GetTick>
 8001890:	4602      	mov	r2, r0
 8001892:	693b      	ldr	r3, [r7, #16]
 8001894:	1ad3      	subs	r3, r2, r3
 8001896:	2b64      	cmp	r3, #100	@ 0x64
 8001898:	d901      	bls.n	800189e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800189a:	2303      	movs	r3, #3
 800189c:	e1f3      	b.n	8001c86 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800189e:	4b51      	ldr	r3, [pc, #324]	@ (80019e4 <HAL_RCC_OscConfig+0x240>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d1f0      	bne.n	800188c <HAL_RCC_OscConfig+0xe8>
 80018aa:	e000      	b.n	80018ae <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f003 0302 	and.w	r3, r3, #2
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d063      	beq.n	8001982 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80018ba:	4b4a      	ldr	r3, [pc, #296]	@ (80019e4 <HAL_RCC_OscConfig+0x240>)
 80018bc:	689b      	ldr	r3, [r3, #8]
 80018be:	f003 030c 	and.w	r3, r3, #12
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d00b      	beq.n	80018de <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80018c6:	4b47      	ldr	r3, [pc, #284]	@ (80019e4 <HAL_RCC_OscConfig+0x240>)
 80018c8:	689b      	ldr	r3, [r3, #8]
 80018ca:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80018ce:	2b08      	cmp	r3, #8
 80018d0:	d11c      	bne.n	800190c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80018d2:	4b44      	ldr	r3, [pc, #272]	@ (80019e4 <HAL_RCC_OscConfig+0x240>)
 80018d4:	685b      	ldr	r3, [r3, #4]
 80018d6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d116      	bne.n	800190c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018de:	4b41      	ldr	r3, [pc, #260]	@ (80019e4 <HAL_RCC_OscConfig+0x240>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f003 0302 	and.w	r3, r3, #2
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d005      	beq.n	80018f6 <HAL_RCC_OscConfig+0x152>
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	68db      	ldr	r3, [r3, #12]
 80018ee:	2b01      	cmp	r3, #1
 80018f0:	d001      	beq.n	80018f6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80018f2:	2301      	movs	r3, #1
 80018f4:	e1c7      	b.n	8001c86 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018f6:	4b3b      	ldr	r3, [pc, #236]	@ (80019e4 <HAL_RCC_OscConfig+0x240>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	691b      	ldr	r3, [r3, #16]
 8001902:	00db      	lsls	r3, r3, #3
 8001904:	4937      	ldr	r1, [pc, #220]	@ (80019e4 <HAL_RCC_OscConfig+0x240>)
 8001906:	4313      	orrs	r3, r2
 8001908:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800190a:	e03a      	b.n	8001982 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	68db      	ldr	r3, [r3, #12]
 8001910:	2b00      	cmp	r3, #0
 8001912:	d020      	beq.n	8001956 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001914:	4b34      	ldr	r3, [pc, #208]	@ (80019e8 <HAL_RCC_OscConfig+0x244>)
 8001916:	2201      	movs	r2, #1
 8001918:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800191a:	f7ff fc67 	bl	80011ec <HAL_GetTick>
 800191e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001920:	e008      	b.n	8001934 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001922:	f7ff fc63 	bl	80011ec <HAL_GetTick>
 8001926:	4602      	mov	r2, r0
 8001928:	693b      	ldr	r3, [r7, #16]
 800192a:	1ad3      	subs	r3, r2, r3
 800192c:	2b02      	cmp	r3, #2
 800192e:	d901      	bls.n	8001934 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001930:	2303      	movs	r3, #3
 8001932:	e1a8      	b.n	8001c86 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001934:	4b2b      	ldr	r3, [pc, #172]	@ (80019e4 <HAL_RCC_OscConfig+0x240>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f003 0302 	and.w	r3, r3, #2
 800193c:	2b00      	cmp	r3, #0
 800193e:	d0f0      	beq.n	8001922 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001940:	4b28      	ldr	r3, [pc, #160]	@ (80019e4 <HAL_RCC_OscConfig+0x240>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	691b      	ldr	r3, [r3, #16]
 800194c:	00db      	lsls	r3, r3, #3
 800194e:	4925      	ldr	r1, [pc, #148]	@ (80019e4 <HAL_RCC_OscConfig+0x240>)
 8001950:	4313      	orrs	r3, r2
 8001952:	600b      	str	r3, [r1, #0]
 8001954:	e015      	b.n	8001982 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001956:	4b24      	ldr	r3, [pc, #144]	@ (80019e8 <HAL_RCC_OscConfig+0x244>)
 8001958:	2200      	movs	r2, #0
 800195a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800195c:	f7ff fc46 	bl	80011ec <HAL_GetTick>
 8001960:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001962:	e008      	b.n	8001976 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001964:	f7ff fc42 	bl	80011ec <HAL_GetTick>
 8001968:	4602      	mov	r2, r0
 800196a:	693b      	ldr	r3, [r7, #16]
 800196c:	1ad3      	subs	r3, r2, r3
 800196e:	2b02      	cmp	r3, #2
 8001970:	d901      	bls.n	8001976 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001972:	2303      	movs	r3, #3
 8001974:	e187      	b.n	8001c86 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001976:	4b1b      	ldr	r3, [pc, #108]	@ (80019e4 <HAL_RCC_OscConfig+0x240>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f003 0302 	and.w	r3, r3, #2
 800197e:	2b00      	cmp	r3, #0
 8001980:	d1f0      	bne.n	8001964 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f003 0308 	and.w	r3, r3, #8
 800198a:	2b00      	cmp	r3, #0
 800198c:	d036      	beq.n	80019fc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	695b      	ldr	r3, [r3, #20]
 8001992:	2b00      	cmp	r3, #0
 8001994:	d016      	beq.n	80019c4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001996:	4b15      	ldr	r3, [pc, #84]	@ (80019ec <HAL_RCC_OscConfig+0x248>)
 8001998:	2201      	movs	r2, #1
 800199a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800199c:	f7ff fc26 	bl	80011ec <HAL_GetTick>
 80019a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019a2:	e008      	b.n	80019b6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019a4:	f7ff fc22 	bl	80011ec <HAL_GetTick>
 80019a8:	4602      	mov	r2, r0
 80019aa:	693b      	ldr	r3, [r7, #16]
 80019ac:	1ad3      	subs	r3, r2, r3
 80019ae:	2b02      	cmp	r3, #2
 80019b0:	d901      	bls.n	80019b6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80019b2:	2303      	movs	r3, #3
 80019b4:	e167      	b.n	8001c86 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019b6:	4b0b      	ldr	r3, [pc, #44]	@ (80019e4 <HAL_RCC_OscConfig+0x240>)
 80019b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80019ba:	f003 0302 	and.w	r3, r3, #2
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d0f0      	beq.n	80019a4 <HAL_RCC_OscConfig+0x200>
 80019c2:	e01b      	b.n	80019fc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019c4:	4b09      	ldr	r3, [pc, #36]	@ (80019ec <HAL_RCC_OscConfig+0x248>)
 80019c6:	2200      	movs	r2, #0
 80019c8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019ca:	f7ff fc0f 	bl	80011ec <HAL_GetTick>
 80019ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019d0:	e00e      	b.n	80019f0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019d2:	f7ff fc0b 	bl	80011ec <HAL_GetTick>
 80019d6:	4602      	mov	r2, r0
 80019d8:	693b      	ldr	r3, [r7, #16]
 80019da:	1ad3      	subs	r3, r2, r3
 80019dc:	2b02      	cmp	r3, #2
 80019de:	d907      	bls.n	80019f0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80019e0:	2303      	movs	r3, #3
 80019e2:	e150      	b.n	8001c86 <HAL_RCC_OscConfig+0x4e2>
 80019e4:	40023800 	.word	0x40023800
 80019e8:	42470000 	.word	0x42470000
 80019ec:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019f0:	4b88      	ldr	r3, [pc, #544]	@ (8001c14 <HAL_RCC_OscConfig+0x470>)
 80019f2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80019f4:	f003 0302 	and.w	r3, r3, #2
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d1ea      	bne.n	80019d2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f003 0304 	and.w	r3, r3, #4
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	f000 8097 	beq.w	8001b38 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a0e:	4b81      	ldr	r3, [pc, #516]	@ (8001c14 <HAL_RCC_OscConfig+0x470>)
 8001a10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d10f      	bne.n	8001a3a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	60bb      	str	r3, [r7, #8]
 8001a1e:	4b7d      	ldr	r3, [pc, #500]	@ (8001c14 <HAL_RCC_OscConfig+0x470>)
 8001a20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a22:	4a7c      	ldr	r2, [pc, #496]	@ (8001c14 <HAL_RCC_OscConfig+0x470>)
 8001a24:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a28:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a2a:	4b7a      	ldr	r3, [pc, #488]	@ (8001c14 <HAL_RCC_OscConfig+0x470>)
 8001a2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a2e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a32:	60bb      	str	r3, [r7, #8]
 8001a34:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a36:	2301      	movs	r3, #1
 8001a38:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a3a:	4b77      	ldr	r3, [pc, #476]	@ (8001c18 <HAL_RCC_OscConfig+0x474>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d118      	bne.n	8001a78 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a46:	4b74      	ldr	r3, [pc, #464]	@ (8001c18 <HAL_RCC_OscConfig+0x474>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	4a73      	ldr	r2, [pc, #460]	@ (8001c18 <HAL_RCC_OscConfig+0x474>)
 8001a4c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a50:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a52:	f7ff fbcb 	bl	80011ec <HAL_GetTick>
 8001a56:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a58:	e008      	b.n	8001a6c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a5a:	f7ff fbc7 	bl	80011ec <HAL_GetTick>
 8001a5e:	4602      	mov	r2, r0
 8001a60:	693b      	ldr	r3, [r7, #16]
 8001a62:	1ad3      	subs	r3, r2, r3
 8001a64:	2b02      	cmp	r3, #2
 8001a66:	d901      	bls.n	8001a6c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001a68:	2303      	movs	r3, #3
 8001a6a:	e10c      	b.n	8001c86 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a6c:	4b6a      	ldr	r3, [pc, #424]	@ (8001c18 <HAL_RCC_OscConfig+0x474>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d0f0      	beq.n	8001a5a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	689b      	ldr	r3, [r3, #8]
 8001a7c:	2b01      	cmp	r3, #1
 8001a7e:	d106      	bne.n	8001a8e <HAL_RCC_OscConfig+0x2ea>
 8001a80:	4b64      	ldr	r3, [pc, #400]	@ (8001c14 <HAL_RCC_OscConfig+0x470>)
 8001a82:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a84:	4a63      	ldr	r2, [pc, #396]	@ (8001c14 <HAL_RCC_OscConfig+0x470>)
 8001a86:	f043 0301 	orr.w	r3, r3, #1
 8001a8a:	6713      	str	r3, [r2, #112]	@ 0x70
 8001a8c:	e01c      	b.n	8001ac8 <HAL_RCC_OscConfig+0x324>
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	689b      	ldr	r3, [r3, #8]
 8001a92:	2b05      	cmp	r3, #5
 8001a94:	d10c      	bne.n	8001ab0 <HAL_RCC_OscConfig+0x30c>
 8001a96:	4b5f      	ldr	r3, [pc, #380]	@ (8001c14 <HAL_RCC_OscConfig+0x470>)
 8001a98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a9a:	4a5e      	ldr	r2, [pc, #376]	@ (8001c14 <HAL_RCC_OscConfig+0x470>)
 8001a9c:	f043 0304 	orr.w	r3, r3, #4
 8001aa0:	6713      	str	r3, [r2, #112]	@ 0x70
 8001aa2:	4b5c      	ldr	r3, [pc, #368]	@ (8001c14 <HAL_RCC_OscConfig+0x470>)
 8001aa4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001aa6:	4a5b      	ldr	r2, [pc, #364]	@ (8001c14 <HAL_RCC_OscConfig+0x470>)
 8001aa8:	f043 0301 	orr.w	r3, r3, #1
 8001aac:	6713      	str	r3, [r2, #112]	@ 0x70
 8001aae:	e00b      	b.n	8001ac8 <HAL_RCC_OscConfig+0x324>
 8001ab0:	4b58      	ldr	r3, [pc, #352]	@ (8001c14 <HAL_RCC_OscConfig+0x470>)
 8001ab2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ab4:	4a57      	ldr	r2, [pc, #348]	@ (8001c14 <HAL_RCC_OscConfig+0x470>)
 8001ab6:	f023 0301 	bic.w	r3, r3, #1
 8001aba:	6713      	str	r3, [r2, #112]	@ 0x70
 8001abc:	4b55      	ldr	r3, [pc, #340]	@ (8001c14 <HAL_RCC_OscConfig+0x470>)
 8001abe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ac0:	4a54      	ldr	r2, [pc, #336]	@ (8001c14 <HAL_RCC_OscConfig+0x470>)
 8001ac2:	f023 0304 	bic.w	r3, r3, #4
 8001ac6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	689b      	ldr	r3, [r3, #8]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d015      	beq.n	8001afc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ad0:	f7ff fb8c 	bl	80011ec <HAL_GetTick>
 8001ad4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ad6:	e00a      	b.n	8001aee <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ad8:	f7ff fb88 	bl	80011ec <HAL_GetTick>
 8001adc:	4602      	mov	r2, r0
 8001ade:	693b      	ldr	r3, [r7, #16]
 8001ae0:	1ad3      	subs	r3, r2, r3
 8001ae2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d901      	bls.n	8001aee <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001aea:	2303      	movs	r3, #3
 8001aec:	e0cb      	b.n	8001c86 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001aee:	4b49      	ldr	r3, [pc, #292]	@ (8001c14 <HAL_RCC_OscConfig+0x470>)
 8001af0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001af2:	f003 0302 	and.w	r3, r3, #2
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d0ee      	beq.n	8001ad8 <HAL_RCC_OscConfig+0x334>
 8001afa:	e014      	b.n	8001b26 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001afc:	f7ff fb76 	bl	80011ec <HAL_GetTick>
 8001b00:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b02:	e00a      	b.n	8001b1a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b04:	f7ff fb72 	bl	80011ec <HAL_GetTick>
 8001b08:	4602      	mov	r2, r0
 8001b0a:	693b      	ldr	r3, [r7, #16]
 8001b0c:	1ad3      	subs	r3, r2, r3
 8001b0e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d901      	bls.n	8001b1a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001b16:	2303      	movs	r3, #3
 8001b18:	e0b5      	b.n	8001c86 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b1a:	4b3e      	ldr	r3, [pc, #248]	@ (8001c14 <HAL_RCC_OscConfig+0x470>)
 8001b1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b1e:	f003 0302 	and.w	r3, r3, #2
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d1ee      	bne.n	8001b04 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001b26:	7dfb      	ldrb	r3, [r7, #23]
 8001b28:	2b01      	cmp	r3, #1
 8001b2a:	d105      	bne.n	8001b38 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b2c:	4b39      	ldr	r3, [pc, #228]	@ (8001c14 <HAL_RCC_OscConfig+0x470>)
 8001b2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b30:	4a38      	ldr	r2, [pc, #224]	@ (8001c14 <HAL_RCC_OscConfig+0x470>)
 8001b32:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001b36:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	699b      	ldr	r3, [r3, #24]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	f000 80a1 	beq.w	8001c84 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001b42:	4b34      	ldr	r3, [pc, #208]	@ (8001c14 <HAL_RCC_OscConfig+0x470>)
 8001b44:	689b      	ldr	r3, [r3, #8]
 8001b46:	f003 030c 	and.w	r3, r3, #12
 8001b4a:	2b08      	cmp	r3, #8
 8001b4c:	d05c      	beq.n	8001c08 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	699b      	ldr	r3, [r3, #24]
 8001b52:	2b02      	cmp	r3, #2
 8001b54:	d141      	bne.n	8001bda <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b56:	4b31      	ldr	r3, [pc, #196]	@ (8001c1c <HAL_RCC_OscConfig+0x478>)
 8001b58:	2200      	movs	r2, #0
 8001b5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b5c:	f7ff fb46 	bl	80011ec <HAL_GetTick>
 8001b60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b62:	e008      	b.n	8001b76 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b64:	f7ff fb42 	bl	80011ec <HAL_GetTick>
 8001b68:	4602      	mov	r2, r0
 8001b6a:	693b      	ldr	r3, [r7, #16]
 8001b6c:	1ad3      	subs	r3, r2, r3
 8001b6e:	2b02      	cmp	r3, #2
 8001b70:	d901      	bls.n	8001b76 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001b72:	2303      	movs	r3, #3
 8001b74:	e087      	b.n	8001c86 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b76:	4b27      	ldr	r3, [pc, #156]	@ (8001c14 <HAL_RCC_OscConfig+0x470>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d1f0      	bne.n	8001b64 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	69da      	ldr	r2, [r3, #28]
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6a1b      	ldr	r3, [r3, #32]
 8001b8a:	431a      	orrs	r2, r3
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b90:	019b      	lsls	r3, r3, #6
 8001b92:	431a      	orrs	r2, r3
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b98:	085b      	lsrs	r3, r3, #1
 8001b9a:	3b01      	subs	r3, #1
 8001b9c:	041b      	lsls	r3, r3, #16
 8001b9e:	431a      	orrs	r2, r3
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ba4:	061b      	lsls	r3, r3, #24
 8001ba6:	491b      	ldr	r1, [pc, #108]	@ (8001c14 <HAL_RCC_OscConfig+0x470>)
 8001ba8:	4313      	orrs	r3, r2
 8001baa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001bac:	4b1b      	ldr	r3, [pc, #108]	@ (8001c1c <HAL_RCC_OscConfig+0x478>)
 8001bae:	2201      	movs	r2, #1
 8001bb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bb2:	f7ff fb1b 	bl	80011ec <HAL_GetTick>
 8001bb6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001bb8:	e008      	b.n	8001bcc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bba:	f7ff fb17 	bl	80011ec <HAL_GetTick>
 8001bbe:	4602      	mov	r2, r0
 8001bc0:	693b      	ldr	r3, [r7, #16]
 8001bc2:	1ad3      	subs	r3, r2, r3
 8001bc4:	2b02      	cmp	r3, #2
 8001bc6:	d901      	bls.n	8001bcc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001bc8:	2303      	movs	r3, #3
 8001bca:	e05c      	b.n	8001c86 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001bcc:	4b11      	ldr	r3, [pc, #68]	@ (8001c14 <HAL_RCC_OscConfig+0x470>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d0f0      	beq.n	8001bba <HAL_RCC_OscConfig+0x416>
 8001bd8:	e054      	b.n	8001c84 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bda:	4b10      	ldr	r3, [pc, #64]	@ (8001c1c <HAL_RCC_OscConfig+0x478>)
 8001bdc:	2200      	movs	r2, #0
 8001bde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001be0:	f7ff fb04 	bl	80011ec <HAL_GetTick>
 8001be4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001be6:	e008      	b.n	8001bfa <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001be8:	f7ff fb00 	bl	80011ec <HAL_GetTick>
 8001bec:	4602      	mov	r2, r0
 8001bee:	693b      	ldr	r3, [r7, #16]
 8001bf0:	1ad3      	subs	r3, r2, r3
 8001bf2:	2b02      	cmp	r3, #2
 8001bf4:	d901      	bls.n	8001bfa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001bf6:	2303      	movs	r3, #3
 8001bf8:	e045      	b.n	8001c86 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bfa:	4b06      	ldr	r3, [pc, #24]	@ (8001c14 <HAL_RCC_OscConfig+0x470>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d1f0      	bne.n	8001be8 <HAL_RCC_OscConfig+0x444>
 8001c06:	e03d      	b.n	8001c84 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	699b      	ldr	r3, [r3, #24]
 8001c0c:	2b01      	cmp	r3, #1
 8001c0e:	d107      	bne.n	8001c20 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001c10:	2301      	movs	r3, #1
 8001c12:	e038      	b.n	8001c86 <HAL_RCC_OscConfig+0x4e2>
 8001c14:	40023800 	.word	0x40023800
 8001c18:	40007000 	.word	0x40007000
 8001c1c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001c20:	4b1b      	ldr	r3, [pc, #108]	@ (8001c90 <HAL_RCC_OscConfig+0x4ec>)
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	699b      	ldr	r3, [r3, #24]
 8001c2a:	2b01      	cmp	r3, #1
 8001c2c:	d028      	beq.n	8001c80 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c38:	429a      	cmp	r2, r3
 8001c3a:	d121      	bne.n	8001c80 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c46:	429a      	cmp	r2, r3
 8001c48:	d11a      	bne.n	8001c80 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001c4a:	68fa      	ldr	r2, [r7, #12]
 8001c4c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001c50:	4013      	ands	r3, r2
 8001c52:	687a      	ldr	r2, [r7, #4]
 8001c54:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001c56:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001c58:	4293      	cmp	r3, r2
 8001c5a:	d111      	bne.n	8001c80 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c66:	085b      	lsrs	r3, r3, #1
 8001c68:	3b01      	subs	r3, #1
 8001c6a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001c6c:	429a      	cmp	r2, r3
 8001c6e:	d107      	bne.n	8001c80 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c7a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001c7c:	429a      	cmp	r2, r3
 8001c7e:	d001      	beq.n	8001c84 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001c80:	2301      	movs	r3, #1
 8001c82:	e000      	b.n	8001c86 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001c84:	2300      	movs	r3, #0
}
 8001c86:	4618      	mov	r0, r3
 8001c88:	3718      	adds	r7, #24
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}
 8001c8e:	bf00      	nop
 8001c90:	40023800 	.word	0x40023800

08001c94 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b084      	sub	sp, #16
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
 8001c9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d101      	bne.n	8001ca8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ca4:	2301      	movs	r3, #1
 8001ca6:	e0cc      	b.n	8001e42 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001ca8:	4b68      	ldr	r3, [pc, #416]	@ (8001e4c <HAL_RCC_ClockConfig+0x1b8>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f003 030f 	and.w	r3, r3, #15
 8001cb0:	683a      	ldr	r2, [r7, #0]
 8001cb2:	429a      	cmp	r2, r3
 8001cb4:	d90c      	bls.n	8001cd0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cb6:	4b65      	ldr	r3, [pc, #404]	@ (8001e4c <HAL_RCC_ClockConfig+0x1b8>)
 8001cb8:	683a      	ldr	r2, [r7, #0]
 8001cba:	b2d2      	uxtb	r2, r2
 8001cbc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cbe:	4b63      	ldr	r3, [pc, #396]	@ (8001e4c <HAL_RCC_ClockConfig+0x1b8>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f003 030f 	and.w	r3, r3, #15
 8001cc6:	683a      	ldr	r2, [r7, #0]
 8001cc8:	429a      	cmp	r2, r3
 8001cca:	d001      	beq.n	8001cd0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001ccc:	2301      	movs	r3, #1
 8001cce:	e0b8      	b.n	8001e42 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f003 0302 	and.w	r3, r3, #2
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d020      	beq.n	8001d1e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f003 0304 	and.w	r3, r3, #4
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d005      	beq.n	8001cf4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ce8:	4b59      	ldr	r3, [pc, #356]	@ (8001e50 <HAL_RCC_ClockConfig+0x1bc>)
 8001cea:	689b      	ldr	r3, [r3, #8]
 8001cec:	4a58      	ldr	r2, [pc, #352]	@ (8001e50 <HAL_RCC_ClockConfig+0x1bc>)
 8001cee:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001cf2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f003 0308 	and.w	r3, r3, #8
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d005      	beq.n	8001d0c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001d00:	4b53      	ldr	r3, [pc, #332]	@ (8001e50 <HAL_RCC_ClockConfig+0x1bc>)
 8001d02:	689b      	ldr	r3, [r3, #8]
 8001d04:	4a52      	ldr	r2, [pc, #328]	@ (8001e50 <HAL_RCC_ClockConfig+0x1bc>)
 8001d06:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001d0a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d0c:	4b50      	ldr	r3, [pc, #320]	@ (8001e50 <HAL_RCC_ClockConfig+0x1bc>)
 8001d0e:	689b      	ldr	r3, [r3, #8]
 8001d10:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	689b      	ldr	r3, [r3, #8]
 8001d18:	494d      	ldr	r1, [pc, #308]	@ (8001e50 <HAL_RCC_ClockConfig+0x1bc>)
 8001d1a:	4313      	orrs	r3, r2
 8001d1c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f003 0301 	and.w	r3, r3, #1
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d044      	beq.n	8001db4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	2b01      	cmp	r3, #1
 8001d30:	d107      	bne.n	8001d42 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d32:	4b47      	ldr	r3, [pc, #284]	@ (8001e50 <HAL_RCC_ClockConfig+0x1bc>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d119      	bne.n	8001d72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d3e:	2301      	movs	r3, #1
 8001d40:	e07f      	b.n	8001e42 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	685b      	ldr	r3, [r3, #4]
 8001d46:	2b02      	cmp	r3, #2
 8001d48:	d003      	beq.n	8001d52 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001d4e:	2b03      	cmp	r3, #3
 8001d50:	d107      	bne.n	8001d62 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d52:	4b3f      	ldr	r3, [pc, #252]	@ (8001e50 <HAL_RCC_ClockConfig+0x1bc>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d109      	bne.n	8001d72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d5e:	2301      	movs	r3, #1
 8001d60:	e06f      	b.n	8001e42 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d62:	4b3b      	ldr	r3, [pc, #236]	@ (8001e50 <HAL_RCC_ClockConfig+0x1bc>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f003 0302 	and.w	r3, r3, #2
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d101      	bne.n	8001d72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d6e:	2301      	movs	r3, #1
 8001d70:	e067      	b.n	8001e42 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d72:	4b37      	ldr	r3, [pc, #220]	@ (8001e50 <HAL_RCC_ClockConfig+0x1bc>)
 8001d74:	689b      	ldr	r3, [r3, #8]
 8001d76:	f023 0203 	bic.w	r2, r3, #3
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	685b      	ldr	r3, [r3, #4]
 8001d7e:	4934      	ldr	r1, [pc, #208]	@ (8001e50 <HAL_RCC_ClockConfig+0x1bc>)
 8001d80:	4313      	orrs	r3, r2
 8001d82:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d84:	f7ff fa32 	bl	80011ec <HAL_GetTick>
 8001d88:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d8a:	e00a      	b.n	8001da2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d8c:	f7ff fa2e 	bl	80011ec <HAL_GetTick>
 8001d90:	4602      	mov	r2, r0
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	1ad3      	subs	r3, r2, r3
 8001d96:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d901      	bls.n	8001da2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001d9e:	2303      	movs	r3, #3
 8001da0:	e04f      	b.n	8001e42 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001da2:	4b2b      	ldr	r3, [pc, #172]	@ (8001e50 <HAL_RCC_ClockConfig+0x1bc>)
 8001da4:	689b      	ldr	r3, [r3, #8]
 8001da6:	f003 020c 	and.w	r2, r3, #12
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	685b      	ldr	r3, [r3, #4]
 8001dae:	009b      	lsls	r3, r3, #2
 8001db0:	429a      	cmp	r2, r3
 8001db2:	d1eb      	bne.n	8001d8c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001db4:	4b25      	ldr	r3, [pc, #148]	@ (8001e4c <HAL_RCC_ClockConfig+0x1b8>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f003 030f 	and.w	r3, r3, #15
 8001dbc:	683a      	ldr	r2, [r7, #0]
 8001dbe:	429a      	cmp	r2, r3
 8001dc0:	d20c      	bcs.n	8001ddc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dc2:	4b22      	ldr	r3, [pc, #136]	@ (8001e4c <HAL_RCC_ClockConfig+0x1b8>)
 8001dc4:	683a      	ldr	r2, [r7, #0]
 8001dc6:	b2d2      	uxtb	r2, r2
 8001dc8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dca:	4b20      	ldr	r3, [pc, #128]	@ (8001e4c <HAL_RCC_ClockConfig+0x1b8>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f003 030f 	and.w	r3, r3, #15
 8001dd2:	683a      	ldr	r2, [r7, #0]
 8001dd4:	429a      	cmp	r2, r3
 8001dd6:	d001      	beq.n	8001ddc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001dd8:	2301      	movs	r3, #1
 8001dda:	e032      	b.n	8001e42 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f003 0304 	and.w	r3, r3, #4
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d008      	beq.n	8001dfa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001de8:	4b19      	ldr	r3, [pc, #100]	@ (8001e50 <HAL_RCC_ClockConfig+0x1bc>)
 8001dea:	689b      	ldr	r3, [r3, #8]
 8001dec:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	68db      	ldr	r3, [r3, #12]
 8001df4:	4916      	ldr	r1, [pc, #88]	@ (8001e50 <HAL_RCC_ClockConfig+0x1bc>)
 8001df6:	4313      	orrs	r3, r2
 8001df8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f003 0308 	and.w	r3, r3, #8
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d009      	beq.n	8001e1a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001e06:	4b12      	ldr	r3, [pc, #72]	@ (8001e50 <HAL_RCC_ClockConfig+0x1bc>)
 8001e08:	689b      	ldr	r3, [r3, #8]
 8001e0a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	691b      	ldr	r3, [r3, #16]
 8001e12:	00db      	lsls	r3, r3, #3
 8001e14:	490e      	ldr	r1, [pc, #56]	@ (8001e50 <HAL_RCC_ClockConfig+0x1bc>)
 8001e16:	4313      	orrs	r3, r2
 8001e18:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001e1a:	f000 f821 	bl	8001e60 <HAL_RCC_GetSysClockFreq>
 8001e1e:	4602      	mov	r2, r0
 8001e20:	4b0b      	ldr	r3, [pc, #44]	@ (8001e50 <HAL_RCC_ClockConfig+0x1bc>)
 8001e22:	689b      	ldr	r3, [r3, #8]
 8001e24:	091b      	lsrs	r3, r3, #4
 8001e26:	f003 030f 	and.w	r3, r3, #15
 8001e2a:	490a      	ldr	r1, [pc, #40]	@ (8001e54 <HAL_RCC_ClockConfig+0x1c0>)
 8001e2c:	5ccb      	ldrb	r3, [r1, r3]
 8001e2e:	fa22 f303 	lsr.w	r3, r2, r3
 8001e32:	4a09      	ldr	r2, [pc, #36]	@ (8001e58 <HAL_RCC_ClockConfig+0x1c4>)
 8001e34:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001e36:	4b09      	ldr	r3, [pc, #36]	@ (8001e5c <HAL_RCC_ClockConfig+0x1c8>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	f7ff f992 	bl	8001164 <HAL_InitTick>

  return HAL_OK;
 8001e40:	2300      	movs	r3, #0
}
 8001e42:	4618      	mov	r0, r3
 8001e44:	3710      	adds	r7, #16
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}
 8001e4a:	bf00      	nop
 8001e4c:	40023c00 	.word	0x40023c00
 8001e50:	40023800 	.word	0x40023800
 8001e54:	08003e04 	.word	0x08003e04
 8001e58:	20000000 	.word	0x20000000
 8001e5c:	20000004 	.word	0x20000004

08001e60 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e60:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001e64:	b090      	sub	sp, #64	@ 0x40
 8001e66:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8001e70:	2300      	movs	r3, #0
 8001e72:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8001e74:	2300      	movs	r3, #0
 8001e76:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001e78:	4b59      	ldr	r3, [pc, #356]	@ (8001fe0 <HAL_RCC_GetSysClockFreq+0x180>)
 8001e7a:	689b      	ldr	r3, [r3, #8]
 8001e7c:	f003 030c 	and.w	r3, r3, #12
 8001e80:	2b08      	cmp	r3, #8
 8001e82:	d00d      	beq.n	8001ea0 <HAL_RCC_GetSysClockFreq+0x40>
 8001e84:	2b08      	cmp	r3, #8
 8001e86:	f200 80a1 	bhi.w	8001fcc <HAL_RCC_GetSysClockFreq+0x16c>
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d002      	beq.n	8001e94 <HAL_RCC_GetSysClockFreq+0x34>
 8001e8e:	2b04      	cmp	r3, #4
 8001e90:	d003      	beq.n	8001e9a <HAL_RCC_GetSysClockFreq+0x3a>
 8001e92:	e09b      	b.n	8001fcc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001e94:	4b53      	ldr	r3, [pc, #332]	@ (8001fe4 <HAL_RCC_GetSysClockFreq+0x184>)
 8001e96:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001e98:	e09b      	b.n	8001fd2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001e9a:	4b53      	ldr	r3, [pc, #332]	@ (8001fe8 <HAL_RCC_GetSysClockFreq+0x188>)
 8001e9c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001e9e:	e098      	b.n	8001fd2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001ea0:	4b4f      	ldr	r3, [pc, #316]	@ (8001fe0 <HAL_RCC_GetSysClockFreq+0x180>)
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001ea8:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001eaa:	4b4d      	ldr	r3, [pc, #308]	@ (8001fe0 <HAL_RCC_GetSysClockFreq+0x180>)
 8001eac:	685b      	ldr	r3, [r3, #4]
 8001eae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d028      	beq.n	8001f08 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001eb6:	4b4a      	ldr	r3, [pc, #296]	@ (8001fe0 <HAL_RCC_GetSysClockFreq+0x180>)
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	099b      	lsrs	r3, r3, #6
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	623b      	str	r3, [r7, #32]
 8001ec0:	627a      	str	r2, [r7, #36]	@ 0x24
 8001ec2:	6a3b      	ldr	r3, [r7, #32]
 8001ec4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001ec8:	2100      	movs	r1, #0
 8001eca:	4b47      	ldr	r3, [pc, #284]	@ (8001fe8 <HAL_RCC_GetSysClockFreq+0x188>)
 8001ecc:	fb03 f201 	mul.w	r2, r3, r1
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	fb00 f303 	mul.w	r3, r0, r3
 8001ed6:	4413      	add	r3, r2
 8001ed8:	4a43      	ldr	r2, [pc, #268]	@ (8001fe8 <HAL_RCC_GetSysClockFreq+0x188>)
 8001eda:	fba0 1202 	umull	r1, r2, r0, r2
 8001ede:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001ee0:	460a      	mov	r2, r1
 8001ee2:	62ba      	str	r2, [r7, #40]	@ 0x28
 8001ee4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001ee6:	4413      	add	r3, r2
 8001ee8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001eea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001eec:	2200      	movs	r2, #0
 8001eee:	61bb      	str	r3, [r7, #24]
 8001ef0:	61fa      	str	r2, [r7, #28]
 8001ef2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001ef6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001efa:	f7fe f9d1 	bl	80002a0 <__aeabi_uldivmod>
 8001efe:	4602      	mov	r2, r0
 8001f00:	460b      	mov	r3, r1
 8001f02:	4613      	mov	r3, r2
 8001f04:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001f06:	e053      	b.n	8001fb0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f08:	4b35      	ldr	r3, [pc, #212]	@ (8001fe0 <HAL_RCC_GetSysClockFreq+0x180>)
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	099b      	lsrs	r3, r3, #6
 8001f0e:	2200      	movs	r2, #0
 8001f10:	613b      	str	r3, [r7, #16]
 8001f12:	617a      	str	r2, [r7, #20]
 8001f14:	693b      	ldr	r3, [r7, #16]
 8001f16:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001f1a:	f04f 0b00 	mov.w	fp, #0
 8001f1e:	4652      	mov	r2, sl
 8001f20:	465b      	mov	r3, fp
 8001f22:	f04f 0000 	mov.w	r0, #0
 8001f26:	f04f 0100 	mov.w	r1, #0
 8001f2a:	0159      	lsls	r1, r3, #5
 8001f2c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001f30:	0150      	lsls	r0, r2, #5
 8001f32:	4602      	mov	r2, r0
 8001f34:	460b      	mov	r3, r1
 8001f36:	ebb2 080a 	subs.w	r8, r2, sl
 8001f3a:	eb63 090b 	sbc.w	r9, r3, fp
 8001f3e:	f04f 0200 	mov.w	r2, #0
 8001f42:	f04f 0300 	mov.w	r3, #0
 8001f46:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001f4a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001f4e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001f52:	ebb2 0408 	subs.w	r4, r2, r8
 8001f56:	eb63 0509 	sbc.w	r5, r3, r9
 8001f5a:	f04f 0200 	mov.w	r2, #0
 8001f5e:	f04f 0300 	mov.w	r3, #0
 8001f62:	00eb      	lsls	r3, r5, #3
 8001f64:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001f68:	00e2      	lsls	r2, r4, #3
 8001f6a:	4614      	mov	r4, r2
 8001f6c:	461d      	mov	r5, r3
 8001f6e:	eb14 030a 	adds.w	r3, r4, sl
 8001f72:	603b      	str	r3, [r7, #0]
 8001f74:	eb45 030b 	adc.w	r3, r5, fp
 8001f78:	607b      	str	r3, [r7, #4]
 8001f7a:	f04f 0200 	mov.w	r2, #0
 8001f7e:	f04f 0300 	mov.w	r3, #0
 8001f82:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001f86:	4629      	mov	r1, r5
 8001f88:	028b      	lsls	r3, r1, #10
 8001f8a:	4621      	mov	r1, r4
 8001f8c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001f90:	4621      	mov	r1, r4
 8001f92:	028a      	lsls	r2, r1, #10
 8001f94:	4610      	mov	r0, r2
 8001f96:	4619      	mov	r1, r3
 8001f98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	60bb      	str	r3, [r7, #8]
 8001f9e:	60fa      	str	r2, [r7, #12]
 8001fa0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001fa4:	f7fe f97c 	bl	80002a0 <__aeabi_uldivmod>
 8001fa8:	4602      	mov	r2, r0
 8001faa:	460b      	mov	r3, r1
 8001fac:	4613      	mov	r3, r2
 8001fae:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001fb0:	4b0b      	ldr	r3, [pc, #44]	@ (8001fe0 <HAL_RCC_GetSysClockFreq+0x180>)
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	0c1b      	lsrs	r3, r3, #16
 8001fb6:	f003 0303 	and.w	r3, r3, #3
 8001fba:	3301      	adds	r3, #1
 8001fbc:	005b      	lsls	r3, r3, #1
 8001fbe:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8001fc0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001fc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001fc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fc8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001fca:	e002      	b.n	8001fd2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001fcc:	4b05      	ldr	r3, [pc, #20]	@ (8001fe4 <HAL_RCC_GetSysClockFreq+0x184>)
 8001fce:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001fd0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001fd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	3740      	adds	r7, #64	@ 0x40
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001fde:	bf00      	nop
 8001fe0:	40023800 	.word	0x40023800
 8001fe4:	00f42400 	.word	0x00f42400
 8001fe8:	017d7840 	.word	0x017d7840

08001fec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001fec:	b480      	push	{r7}
 8001fee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ff0:	4b03      	ldr	r3, [pc, #12]	@ (8002000 <HAL_RCC_GetHCLKFreq+0x14>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
}
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffc:	4770      	bx	lr
 8001ffe:	bf00      	nop
 8002000:	20000000 	.word	0x20000000

08002004 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002008:	f7ff fff0 	bl	8001fec <HAL_RCC_GetHCLKFreq>
 800200c:	4602      	mov	r2, r0
 800200e:	4b05      	ldr	r3, [pc, #20]	@ (8002024 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002010:	689b      	ldr	r3, [r3, #8]
 8002012:	0a9b      	lsrs	r3, r3, #10
 8002014:	f003 0307 	and.w	r3, r3, #7
 8002018:	4903      	ldr	r1, [pc, #12]	@ (8002028 <HAL_RCC_GetPCLK1Freq+0x24>)
 800201a:	5ccb      	ldrb	r3, [r1, r3]
 800201c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002020:	4618      	mov	r0, r3
 8002022:	bd80      	pop	{r7, pc}
 8002024:	40023800 	.word	0x40023800
 8002028:	08003e14 	.word	0x08003e14

0800202c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002030:	f7ff ffdc 	bl	8001fec <HAL_RCC_GetHCLKFreq>
 8002034:	4602      	mov	r2, r0
 8002036:	4b05      	ldr	r3, [pc, #20]	@ (800204c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002038:	689b      	ldr	r3, [r3, #8]
 800203a:	0b5b      	lsrs	r3, r3, #13
 800203c:	f003 0307 	and.w	r3, r3, #7
 8002040:	4903      	ldr	r1, [pc, #12]	@ (8002050 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002042:	5ccb      	ldrb	r3, [r1, r3]
 8002044:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002048:	4618      	mov	r0, r3
 800204a:	bd80      	pop	{r7, pc}
 800204c:	40023800 	.word	0x40023800
 8002050:	08003e14 	.word	0x08003e14

08002054 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b082      	sub	sp, #8
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d101      	bne.n	8002066 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002062:	2301      	movs	r3, #1
 8002064:	e07b      	b.n	800215e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800206a:	2b00      	cmp	r3, #0
 800206c:	d108      	bne.n	8002080 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002076:	d009      	beq.n	800208c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2200      	movs	r2, #0
 800207c:	61da      	str	r2, [r3, #28]
 800207e:	e005      	b.n	800208c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2200      	movs	r2, #0
 8002084:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2200      	movs	r2, #0
 800208a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2200      	movs	r2, #0
 8002090:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002098:	b2db      	uxtb	r3, r3
 800209a:	2b00      	cmp	r3, #0
 800209c:	d106      	bne.n	80020ac <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	2200      	movs	r2, #0
 80020a2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80020a6:	6878      	ldr	r0, [r7, #4]
 80020a8:	f7fe fc36 	bl	8000918 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2202      	movs	r2, #2
 80020b0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	681a      	ldr	r2, [r3, #0]
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80020c2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	689b      	ldr	r3, [r3, #8]
 80020d0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80020d4:	431a      	orrs	r2, r3
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	68db      	ldr	r3, [r3, #12]
 80020da:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80020de:	431a      	orrs	r2, r3
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	691b      	ldr	r3, [r3, #16]
 80020e4:	f003 0302 	and.w	r3, r3, #2
 80020e8:	431a      	orrs	r2, r3
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	695b      	ldr	r3, [r3, #20]
 80020ee:	f003 0301 	and.w	r3, r3, #1
 80020f2:	431a      	orrs	r2, r3
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	699b      	ldr	r3, [r3, #24]
 80020f8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80020fc:	431a      	orrs	r2, r3
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	69db      	ldr	r3, [r3, #28]
 8002102:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002106:	431a      	orrs	r2, r3
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6a1b      	ldr	r3, [r3, #32]
 800210c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002110:	ea42 0103 	orr.w	r1, r2, r3
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002118:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	430a      	orrs	r2, r1
 8002122:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	699b      	ldr	r3, [r3, #24]
 8002128:	0c1b      	lsrs	r3, r3, #16
 800212a:	f003 0104 	and.w	r1, r3, #4
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002132:	f003 0210 	and.w	r2, r3, #16
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	430a      	orrs	r2, r1
 800213c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	69da      	ldr	r2, [r3, #28]
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800214c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2200      	movs	r2, #0
 8002152:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2201      	movs	r2, #1
 8002158:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800215c:	2300      	movs	r3, #0
}
 800215e:	4618      	mov	r0, r3
 8002160:	3708      	adds	r7, #8
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}

08002166 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002166:	b580      	push	{r7, lr}
 8002168:	b088      	sub	sp, #32
 800216a:	af00      	add	r7, sp, #0
 800216c:	60f8      	str	r0, [r7, #12]
 800216e:	60b9      	str	r1, [r7, #8]
 8002170:	603b      	str	r3, [r7, #0]
 8002172:	4613      	mov	r3, r2
 8002174:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002176:	f7ff f839 	bl	80011ec <HAL_GetTick>
 800217a:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 800217c:	88fb      	ldrh	r3, [r7, #6]
 800217e:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002186:	b2db      	uxtb	r3, r3
 8002188:	2b01      	cmp	r3, #1
 800218a:	d001      	beq.n	8002190 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800218c:	2302      	movs	r3, #2
 800218e:	e12a      	b.n	80023e6 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8002190:	68bb      	ldr	r3, [r7, #8]
 8002192:	2b00      	cmp	r3, #0
 8002194:	d002      	beq.n	800219c <HAL_SPI_Transmit+0x36>
 8002196:	88fb      	ldrh	r3, [r7, #6]
 8002198:	2b00      	cmp	r3, #0
 800219a:	d101      	bne.n	80021a0 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800219c:	2301      	movs	r3, #1
 800219e:	e122      	b.n	80023e6 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80021a6:	2b01      	cmp	r3, #1
 80021a8:	d101      	bne.n	80021ae <HAL_SPI_Transmit+0x48>
 80021aa:	2302      	movs	r3, #2
 80021ac:	e11b      	b.n	80023e6 <HAL_SPI_Transmit+0x280>
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	2201      	movs	r2, #1
 80021b2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	2203      	movs	r2, #3
 80021ba:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	2200      	movs	r2, #0
 80021c2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	68ba      	ldr	r2, [r7, #8]
 80021c8:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	88fa      	ldrh	r2, [r7, #6]
 80021ce:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	88fa      	ldrh	r2, [r7, #6]
 80021d4:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	2200      	movs	r2, #0
 80021da:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	2200      	movs	r2, #0
 80021e0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	2200      	movs	r2, #0
 80021e6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	2200      	movs	r2, #0
 80021ec:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	2200      	movs	r2, #0
 80021f2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	689b      	ldr	r3, [r3, #8]
 80021f8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80021fc:	d10f      	bne.n	800221e <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	681a      	ldr	r2, [r3, #0]
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800220c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	681a      	ldr	r2, [r3, #0]
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800221c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002228:	2b40      	cmp	r3, #64	@ 0x40
 800222a:	d007      	beq.n	800223c <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	681a      	ldr	r2, [r3, #0]
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800223a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	68db      	ldr	r3, [r3, #12]
 8002240:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002244:	d152      	bne.n	80022ec <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	685b      	ldr	r3, [r3, #4]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d002      	beq.n	8002254 <HAL_SPI_Transmit+0xee>
 800224e:	8b7b      	ldrh	r3, [r7, #26]
 8002250:	2b01      	cmp	r3, #1
 8002252:	d145      	bne.n	80022e0 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002258:	881a      	ldrh	r2, [r3, #0]
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002264:	1c9a      	adds	r2, r3, #2
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800226e:	b29b      	uxth	r3, r3
 8002270:	3b01      	subs	r3, #1
 8002272:	b29a      	uxth	r2, r3
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002278:	e032      	b.n	80022e0 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	689b      	ldr	r3, [r3, #8]
 8002280:	f003 0302 	and.w	r3, r3, #2
 8002284:	2b02      	cmp	r3, #2
 8002286:	d112      	bne.n	80022ae <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800228c:	881a      	ldrh	r2, [r3, #0]
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002298:	1c9a      	adds	r2, r3, #2
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80022a2:	b29b      	uxth	r3, r3
 80022a4:	3b01      	subs	r3, #1
 80022a6:	b29a      	uxth	r2, r3
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	86da      	strh	r2, [r3, #54]	@ 0x36
 80022ac:	e018      	b.n	80022e0 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80022ae:	f7fe ff9d 	bl	80011ec <HAL_GetTick>
 80022b2:	4602      	mov	r2, r0
 80022b4:	69fb      	ldr	r3, [r7, #28]
 80022b6:	1ad3      	subs	r3, r2, r3
 80022b8:	683a      	ldr	r2, [r7, #0]
 80022ba:	429a      	cmp	r2, r3
 80022bc:	d803      	bhi.n	80022c6 <HAL_SPI_Transmit+0x160>
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022c4:	d102      	bne.n	80022cc <HAL_SPI_Transmit+0x166>
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d109      	bne.n	80022e0 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	2201      	movs	r2, #1
 80022d0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	2200      	movs	r2, #0
 80022d8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80022dc:	2303      	movs	r3, #3
 80022de:	e082      	b.n	80023e6 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80022e4:	b29b      	uxth	r3, r3
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d1c7      	bne.n	800227a <HAL_SPI_Transmit+0x114>
 80022ea:	e053      	b.n	8002394 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d002      	beq.n	80022fa <HAL_SPI_Transmit+0x194>
 80022f4:	8b7b      	ldrh	r3, [r7, #26]
 80022f6:	2b01      	cmp	r3, #1
 80022f8:	d147      	bne.n	800238a <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	330c      	adds	r3, #12
 8002304:	7812      	ldrb	r2, [r2, #0]
 8002306:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800230c:	1c5a      	adds	r2, r3, #1
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002316:	b29b      	uxth	r3, r3
 8002318:	3b01      	subs	r3, #1
 800231a:	b29a      	uxth	r2, r3
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002320:	e033      	b.n	800238a <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	689b      	ldr	r3, [r3, #8]
 8002328:	f003 0302 	and.w	r3, r3, #2
 800232c:	2b02      	cmp	r3, #2
 800232e:	d113      	bne.n	8002358 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	330c      	adds	r3, #12
 800233a:	7812      	ldrb	r2, [r2, #0]
 800233c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002342:	1c5a      	adds	r2, r3, #1
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800234c:	b29b      	uxth	r3, r3
 800234e:	3b01      	subs	r3, #1
 8002350:	b29a      	uxth	r2, r3
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002356:	e018      	b.n	800238a <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002358:	f7fe ff48 	bl	80011ec <HAL_GetTick>
 800235c:	4602      	mov	r2, r0
 800235e:	69fb      	ldr	r3, [r7, #28]
 8002360:	1ad3      	subs	r3, r2, r3
 8002362:	683a      	ldr	r2, [r7, #0]
 8002364:	429a      	cmp	r2, r3
 8002366:	d803      	bhi.n	8002370 <HAL_SPI_Transmit+0x20a>
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800236e:	d102      	bne.n	8002376 <HAL_SPI_Transmit+0x210>
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d109      	bne.n	800238a <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	2201      	movs	r2, #1
 800237a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	2200      	movs	r2, #0
 8002382:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002386:	2303      	movs	r3, #3
 8002388:	e02d      	b.n	80023e6 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800238e:	b29b      	uxth	r3, r3
 8002390:	2b00      	cmp	r3, #0
 8002392:	d1c6      	bne.n	8002322 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002394:	69fa      	ldr	r2, [r7, #28]
 8002396:	6839      	ldr	r1, [r7, #0]
 8002398:	68f8      	ldr	r0, [r7, #12]
 800239a:	f000 fbe7 	bl	8002b6c <SPI_EndRxTxTransaction>
 800239e:	4603      	mov	r3, r0
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d002      	beq.n	80023aa <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	2220      	movs	r2, #32
 80023a8:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	689b      	ldr	r3, [r3, #8]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d10a      	bne.n	80023c8 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80023b2:	2300      	movs	r3, #0
 80023b4:	617b      	str	r3, [r7, #20]
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	68db      	ldr	r3, [r3, #12]
 80023bc:	617b      	str	r3, [r7, #20]
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	689b      	ldr	r3, [r3, #8]
 80023c4:	617b      	str	r3, [r7, #20]
 80023c6:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	2201      	movs	r2, #1
 80023cc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	2200      	movs	r2, #0
 80023d4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d001      	beq.n	80023e4 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 80023e0:	2301      	movs	r3, #1
 80023e2:	e000      	b.n	80023e6 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 80023e4:	2300      	movs	r3, #0
  }
}
 80023e6:	4618      	mov	r0, r3
 80023e8:	3720      	adds	r7, #32
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}

080023ee <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80023ee:	b580      	push	{r7, lr}
 80023f0:	b088      	sub	sp, #32
 80023f2:	af02      	add	r7, sp, #8
 80023f4:	60f8      	str	r0, [r7, #12]
 80023f6:	60b9      	str	r1, [r7, #8]
 80023f8:	603b      	str	r3, [r7, #0]
 80023fa:	4613      	mov	r3, r2
 80023fc:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002404:	b2db      	uxtb	r3, r3
 8002406:	2b01      	cmp	r3, #1
 8002408:	d001      	beq.n	800240e <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 800240a:	2302      	movs	r3, #2
 800240c:	e104      	b.n	8002618 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002416:	d112      	bne.n	800243e <HAL_SPI_Receive+0x50>
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	689b      	ldr	r3, [r3, #8]
 800241c:	2b00      	cmp	r3, #0
 800241e:	d10e      	bne.n	800243e <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	2204      	movs	r2, #4
 8002424:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002428:	88fa      	ldrh	r2, [r7, #6]
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	9300      	str	r3, [sp, #0]
 800242e:	4613      	mov	r3, r2
 8002430:	68ba      	ldr	r2, [r7, #8]
 8002432:	68b9      	ldr	r1, [r7, #8]
 8002434:	68f8      	ldr	r0, [r7, #12]
 8002436:	f000 f8f3 	bl	8002620 <HAL_SPI_TransmitReceive>
 800243a:	4603      	mov	r3, r0
 800243c:	e0ec      	b.n	8002618 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800243e:	f7fe fed5 	bl	80011ec <HAL_GetTick>
 8002442:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8002444:	68bb      	ldr	r3, [r7, #8]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d002      	beq.n	8002450 <HAL_SPI_Receive+0x62>
 800244a:	88fb      	ldrh	r3, [r7, #6]
 800244c:	2b00      	cmp	r3, #0
 800244e:	d101      	bne.n	8002454 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8002450:	2301      	movs	r3, #1
 8002452:	e0e1      	b.n	8002618 <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800245a:	2b01      	cmp	r3, #1
 800245c:	d101      	bne.n	8002462 <HAL_SPI_Receive+0x74>
 800245e:	2302      	movs	r3, #2
 8002460:	e0da      	b.n	8002618 <HAL_SPI_Receive+0x22a>
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	2201      	movs	r2, #1
 8002466:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	2204      	movs	r2, #4
 800246e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	2200      	movs	r2, #0
 8002476:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	68ba      	ldr	r2, [r7, #8]
 800247c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	88fa      	ldrh	r2, [r7, #6]
 8002482:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	88fa      	ldrh	r2, [r7, #6]
 8002488:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	2200      	movs	r2, #0
 800248e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	2200      	movs	r2, #0
 8002494:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	2200      	movs	r2, #0
 800249a:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	2200      	movs	r2, #0
 80024a0:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	2200      	movs	r2, #0
 80024a6:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	689b      	ldr	r3, [r3, #8]
 80024ac:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80024b0:	d10f      	bne.n	80024d2 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	681a      	ldr	r2, [r3, #0]
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80024c0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	681a      	ldr	r2, [r3, #0]
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80024d0:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80024dc:	2b40      	cmp	r3, #64	@ 0x40
 80024de:	d007      	beq.n	80024f0 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	681a      	ldr	r2, [r3, #0]
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80024ee:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	68db      	ldr	r3, [r3, #12]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d170      	bne.n	80025da <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80024f8:	e035      	b.n	8002566 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	689b      	ldr	r3, [r3, #8]
 8002500:	f003 0301 	and.w	r3, r3, #1
 8002504:	2b01      	cmp	r3, #1
 8002506:	d115      	bne.n	8002534 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f103 020c 	add.w	r2, r3, #12
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002514:	7812      	ldrb	r2, [r2, #0]
 8002516:	b2d2      	uxtb	r2, r2
 8002518:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800251e:	1c5a      	adds	r2, r3, #1
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002528:	b29b      	uxth	r3, r3
 800252a:	3b01      	subs	r3, #1
 800252c:	b29a      	uxth	r2, r3
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002532:	e018      	b.n	8002566 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002534:	f7fe fe5a 	bl	80011ec <HAL_GetTick>
 8002538:	4602      	mov	r2, r0
 800253a:	697b      	ldr	r3, [r7, #20]
 800253c:	1ad3      	subs	r3, r2, r3
 800253e:	683a      	ldr	r2, [r7, #0]
 8002540:	429a      	cmp	r2, r3
 8002542:	d803      	bhi.n	800254c <HAL_SPI_Receive+0x15e>
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	f1b3 3fff 	cmp.w	r3, #4294967295
 800254a:	d102      	bne.n	8002552 <HAL_SPI_Receive+0x164>
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d109      	bne.n	8002566 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	2201      	movs	r2, #1
 8002556:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	2200      	movs	r2, #0
 800255e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002562:	2303      	movs	r3, #3
 8002564:	e058      	b.n	8002618 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800256a:	b29b      	uxth	r3, r3
 800256c:	2b00      	cmp	r3, #0
 800256e:	d1c4      	bne.n	80024fa <HAL_SPI_Receive+0x10c>
 8002570:	e038      	b.n	80025e4 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	689b      	ldr	r3, [r3, #8]
 8002578:	f003 0301 	and.w	r3, r3, #1
 800257c:	2b01      	cmp	r3, #1
 800257e:	d113      	bne.n	80025a8 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	68da      	ldr	r2, [r3, #12]
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800258a:	b292      	uxth	r2, r2
 800258c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002592:	1c9a      	adds	r2, r3, #2
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800259c:	b29b      	uxth	r3, r3
 800259e:	3b01      	subs	r3, #1
 80025a0:	b29a      	uxth	r2, r3
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80025a6:	e018      	b.n	80025da <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80025a8:	f7fe fe20 	bl	80011ec <HAL_GetTick>
 80025ac:	4602      	mov	r2, r0
 80025ae:	697b      	ldr	r3, [r7, #20]
 80025b0:	1ad3      	subs	r3, r2, r3
 80025b2:	683a      	ldr	r2, [r7, #0]
 80025b4:	429a      	cmp	r2, r3
 80025b6:	d803      	bhi.n	80025c0 <HAL_SPI_Receive+0x1d2>
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025be:	d102      	bne.n	80025c6 <HAL_SPI_Receive+0x1d8>
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d109      	bne.n	80025da <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	2201      	movs	r2, #1
 80025ca:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	2200      	movs	r2, #0
 80025d2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80025d6:	2303      	movs	r3, #3
 80025d8:	e01e      	b.n	8002618 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80025de:	b29b      	uxth	r3, r3
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d1c6      	bne.n	8002572 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80025e4:	697a      	ldr	r2, [r7, #20]
 80025e6:	6839      	ldr	r1, [r7, #0]
 80025e8:	68f8      	ldr	r0, [r7, #12]
 80025ea:	f000 fa59 	bl	8002aa0 <SPI_EndRxTransaction>
 80025ee:	4603      	mov	r3, r0
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d002      	beq.n	80025fa <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	2220      	movs	r2, #32
 80025f8:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	2201      	movs	r2, #1
 80025fe:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	2200      	movs	r2, #0
 8002606:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800260e:	2b00      	cmp	r3, #0
 8002610:	d001      	beq.n	8002616 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8002612:	2301      	movs	r3, #1
 8002614:	e000      	b.n	8002618 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8002616:	2300      	movs	r3, #0
  }
}
 8002618:	4618      	mov	r0, r3
 800261a:	3718      	adds	r7, #24
 800261c:	46bd      	mov	sp, r7
 800261e:	bd80      	pop	{r7, pc}

08002620 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b08a      	sub	sp, #40	@ 0x28
 8002624:	af00      	add	r7, sp, #0
 8002626:	60f8      	str	r0, [r7, #12]
 8002628:	60b9      	str	r1, [r7, #8]
 800262a:	607a      	str	r2, [r7, #4]
 800262c:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800262e:	2301      	movs	r3, #1
 8002630:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002632:	f7fe fddb 	bl	80011ec <HAL_GetTick>
 8002636:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800263e:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8002646:	887b      	ldrh	r3, [r7, #2]
 8002648:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800264a:	7ffb      	ldrb	r3, [r7, #31]
 800264c:	2b01      	cmp	r3, #1
 800264e:	d00c      	beq.n	800266a <HAL_SPI_TransmitReceive+0x4a>
 8002650:	69bb      	ldr	r3, [r7, #24]
 8002652:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002656:	d106      	bne.n	8002666 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	689b      	ldr	r3, [r3, #8]
 800265c:	2b00      	cmp	r3, #0
 800265e:	d102      	bne.n	8002666 <HAL_SPI_TransmitReceive+0x46>
 8002660:	7ffb      	ldrb	r3, [r7, #31]
 8002662:	2b04      	cmp	r3, #4
 8002664:	d001      	beq.n	800266a <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 8002666:	2302      	movs	r3, #2
 8002668:	e17f      	b.n	800296a <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800266a:	68bb      	ldr	r3, [r7, #8]
 800266c:	2b00      	cmp	r3, #0
 800266e:	d005      	beq.n	800267c <HAL_SPI_TransmitReceive+0x5c>
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d002      	beq.n	800267c <HAL_SPI_TransmitReceive+0x5c>
 8002676:	887b      	ldrh	r3, [r7, #2]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d101      	bne.n	8002680 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 800267c:	2301      	movs	r3, #1
 800267e:	e174      	b.n	800296a <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002686:	2b01      	cmp	r3, #1
 8002688:	d101      	bne.n	800268e <HAL_SPI_TransmitReceive+0x6e>
 800268a:	2302      	movs	r3, #2
 800268c:	e16d      	b.n	800296a <HAL_SPI_TransmitReceive+0x34a>
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	2201      	movs	r2, #1
 8002692:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800269c:	b2db      	uxtb	r3, r3
 800269e:	2b04      	cmp	r3, #4
 80026a0:	d003      	beq.n	80026aa <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	2205      	movs	r2, #5
 80026a6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	2200      	movs	r2, #0
 80026ae:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	687a      	ldr	r2, [r7, #4]
 80026b4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	887a      	ldrh	r2, [r7, #2]
 80026ba:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	887a      	ldrh	r2, [r7, #2]
 80026c0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	68ba      	ldr	r2, [r7, #8]
 80026c6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	887a      	ldrh	r2, [r7, #2]
 80026cc:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	887a      	ldrh	r2, [r7, #2]
 80026d2:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	2200      	movs	r2, #0
 80026d8:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	2200      	movs	r2, #0
 80026de:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80026ea:	2b40      	cmp	r3, #64	@ 0x40
 80026ec:	d007      	beq.n	80026fe <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	681a      	ldr	r2, [r3, #0]
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80026fc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	68db      	ldr	r3, [r3, #12]
 8002702:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002706:	d17e      	bne.n	8002806 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d002      	beq.n	8002716 <HAL_SPI_TransmitReceive+0xf6>
 8002710:	8afb      	ldrh	r3, [r7, #22]
 8002712:	2b01      	cmp	r3, #1
 8002714:	d16c      	bne.n	80027f0 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800271a:	881a      	ldrh	r2, [r3, #0]
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002726:	1c9a      	adds	r2, r3, #2
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002730:	b29b      	uxth	r3, r3
 8002732:	3b01      	subs	r3, #1
 8002734:	b29a      	uxth	r2, r3
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800273a:	e059      	b.n	80027f0 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	689b      	ldr	r3, [r3, #8]
 8002742:	f003 0302 	and.w	r3, r3, #2
 8002746:	2b02      	cmp	r3, #2
 8002748:	d11b      	bne.n	8002782 <HAL_SPI_TransmitReceive+0x162>
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800274e:	b29b      	uxth	r3, r3
 8002750:	2b00      	cmp	r3, #0
 8002752:	d016      	beq.n	8002782 <HAL_SPI_TransmitReceive+0x162>
 8002754:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002756:	2b01      	cmp	r3, #1
 8002758:	d113      	bne.n	8002782 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800275e:	881a      	ldrh	r2, [r3, #0]
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800276a:	1c9a      	adds	r2, r3, #2
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002774:	b29b      	uxth	r3, r3
 8002776:	3b01      	subs	r3, #1
 8002778:	b29a      	uxth	r2, r3
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800277e:	2300      	movs	r3, #0
 8002780:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	689b      	ldr	r3, [r3, #8]
 8002788:	f003 0301 	and.w	r3, r3, #1
 800278c:	2b01      	cmp	r3, #1
 800278e:	d119      	bne.n	80027c4 <HAL_SPI_TransmitReceive+0x1a4>
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002794:	b29b      	uxth	r3, r3
 8002796:	2b00      	cmp	r3, #0
 8002798:	d014      	beq.n	80027c4 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	68da      	ldr	r2, [r3, #12]
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027a4:	b292      	uxth	r2, r2
 80027a6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027ac:	1c9a      	adds	r2, r3, #2
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80027b6:	b29b      	uxth	r3, r3
 80027b8:	3b01      	subs	r3, #1
 80027ba:	b29a      	uxth	r2, r3
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80027c0:	2301      	movs	r3, #1
 80027c2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80027c4:	f7fe fd12 	bl	80011ec <HAL_GetTick>
 80027c8:	4602      	mov	r2, r0
 80027ca:	6a3b      	ldr	r3, [r7, #32]
 80027cc:	1ad3      	subs	r3, r2, r3
 80027ce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80027d0:	429a      	cmp	r2, r3
 80027d2:	d80d      	bhi.n	80027f0 <HAL_SPI_TransmitReceive+0x1d0>
 80027d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027da:	d009      	beq.n	80027f0 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	2201      	movs	r2, #1
 80027e0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	2200      	movs	r2, #0
 80027e8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80027ec:	2303      	movs	r3, #3
 80027ee:	e0bc      	b.n	800296a <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80027f4:	b29b      	uxth	r3, r3
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d1a0      	bne.n	800273c <HAL_SPI_TransmitReceive+0x11c>
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80027fe:	b29b      	uxth	r3, r3
 8002800:	2b00      	cmp	r3, #0
 8002802:	d19b      	bne.n	800273c <HAL_SPI_TransmitReceive+0x11c>
 8002804:	e082      	b.n	800290c <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	2b00      	cmp	r3, #0
 800280c:	d002      	beq.n	8002814 <HAL_SPI_TransmitReceive+0x1f4>
 800280e:	8afb      	ldrh	r3, [r7, #22]
 8002810:	2b01      	cmp	r3, #1
 8002812:	d171      	bne.n	80028f8 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	330c      	adds	r3, #12
 800281e:	7812      	ldrb	r2, [r2, #0]
 8002820:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002826:	1c5a      	adds	r2, r3, #1
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002830:	b29b      	uxth	r3, r3
 8002832:	3b01      	subs	r3, #1
 8002834:	b29a      	uxth	r2, r3
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800283a:	e05d      	b.n	80028f8 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	689b      	ldr	r3, [r3, #8]
 8002842:	f003 0302 	and.w	r3, r3, #2
 8002846:	2b02      	cmp	r3, #2
 8002848:	d11c      	bne.n	8002884 <HAL_SPI_TransmitReceive+0x264>
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800284e:	b29b      	uxth	r3, r3
 8002850:	2b00      	cmp	r3, #0
 8002852:	d017      	beq.n	8002884 <HAL_SPI_TransmitReceive+0x264>
 8002854:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002856:	2b01      	cmp	r3, #1
 8002858:	d114      	bne.n	8002884 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	330c      	adds	r3, #12
 8002864:	7812      	ldrb	r2, [r2, #0]
 8002866:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800286c:	1c5a      	adds	r2, r3, #1
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002876:	b29b      	uxth	r3, r3
 8002878:	3b01      	subs	r3, #1
 800287a:	b29a      	uxth	r2, r3
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002880:	2300      	movs	r3, #0
 8002882:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	689b      	ldr	r3, [r3, #8]
 800288a:	f003 0301 	and.w	r3, r3, #1
 800288e:	2b01      	cmp	r3, #1
 8002890:	d119      	bne.n	80028c6 <HAL_SPI_TransmitReceive+0x2a6>
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002896:	b29b      	uxth	r3, r3
 8002898:	2b00      	cmp	r3, #0
 800289a:	d014      	beq.n	80028c6 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	68da      	ldr	r2, [r3, #12]
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028a6:	b2d2      	uxtb	r2, r2
 80028a8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028ae:	1c5a      	adds	r2, r3, #1
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80028b8:	b29b      	uxth	r3, r3
 80028ba:	3b01      	subs	r3, #1
 80028bc:	b29a      	uxth	r2, r3
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80028c2:	2301      	movs	r3, #1
 80028c4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80028c6:	f7fe fc91 	bl	80011ec <HAL_GetTick>
 80028ca:	4602      	mov	r2, r0
 80028cc:	6a3b      	ldr	r3, [r7, #32]
 80028ce:	1ad3      	subs	r3, r2, r3
 80028d0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80028d2:	429a      	cmp	r2, r3
 80028d4:	d803      	bhi.n	80028de <HAL_SPI_TransmitReceive+0x2be>
 80028d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028dc:	d102      	bne.n	80028e4 <HAL_SPI_TransmitReceive+0x2c4>
 80028de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d109      	bne.n	80028f8 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	2201      	movs	r2, #1
 80028e8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	2200      	movs	r2, #0
 80028f0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80028f4:	2303      	movs	r3, #3
 80028f6:	e038      	b.n	800296a <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80028fc:	b29b      	uxth	r3, r3
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d19c      	bne.n	800283c <HAL_SPI_TransmitReceive+0x21c>
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002906:	b29b      	uxth	r3, r3
 8002908:	2b00      	cmp	r3, #0
 800290a:	d197      	bne.n	800283c <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800290c:	6a3a      	ldr	r2, [r7, #32]
 800290e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002910:	68f8      	ldr	r0, [r7, #12]
 8002912:	f000 f92b 	bl	8002b6c <SPI_EndRxTxTransaction>
 8002916:	4603      	mov	r3, r0
 8002918:	2b00      	cmp	r3, #0
 800291a:	d008      	beq.n	800292e <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	2220      	movs	r2, #32
 8002920:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	2200      	movs	r2, #0
 8002926:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 800292a:	2301      	movs	r3, #1
 800292c:	e01d      	b.n	800296a <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	689b      	ldr	r3, [r3, #8]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d10a      	bne.n	800294c <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002936:	2300      	movs	r3, #0
 8002938:	613b      	str	r3, [r7, #16]
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	68db      	ldr	r3, [r3, #12]
 8002940:	613b      	str	r3, [r7, #16]
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	689b      	ldr	r3, [r3, #8]
 8002948:	613b      	str	r3, [r7, #16]
 800294a:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	2201      	movs	r2, #1
 8002950:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	2200      	movs	r2, #0
 8002958:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002960:	2b00      	cmp	r3, #0
 8002962:	d001      	beq.n	8002968 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8002964:	2301      	movs	r3, #1
 8002966:	e000      	b.n	800296a <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8002968:	2300      	movs	r3, #0
  }
}
 800296a:	4618      	mov	r0, r3
 800296c:	3728      	adds	r7, #40	@ 0x28
 800296e:	46bd      	mov	sp, r7
 8002970:	bd80      	pop	{r7, pc}

08002972 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 8002972:	b480      	push	{r7}
 8002974:	b083      	sub	sp, #12
 8002976:	af00      	add	r7, sp, #0
 8002978:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002980:	b2db      	uxtb	r3, r3
}
 8002982:	4618      	mov	r0, r3
 8002984:	370c      	adds	r7, #12
 8002986:	46bd      	mov	sp, r7
 8002988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298c:	4770      	bx	lr
	...

08002990 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b088      	sub	sp, #32
 8002994:	af00      	add	r7, sp, #0
 8002996:	60f8      	str	r0, [r7, #12]
 8002998:	60b9      	str	r1, [r7, #8]
 800299a:	603b      	str	r3, [r7, #0]
 800299c:	4613      	mov	r3, r2
 800299e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80029a0:	f7fe fc24 	bl	80011ec <HAL_GetTick>
 80029a4:	4602      	mov	r2, r0
 80029a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029a8:	1a9b      	subs	r3, r3, r2
 80029aa:	683a      	ldr	r2, [r7, #0]
 80029ac:	4413      	add	r3, r2
 80029ae:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80029b0:	f7fe fc1c 	bl	80011ec <HAL_GetTick>
 80029b4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80029b6:	4b39      	ldr	r3, [pc, #228]	@ (8002a9c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	015b      	lsls	r3, r3, #5
 80029bc:	0d1b      	lsrs	r3, r3, #20
 80029be:	69fa      	ldr	r2, [r7, #28]
 80029c0:	fb02 f303 	mul.w	r3, r2, r3
 80029c4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80029c6:	e054      	b.n	8002a72 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029ce:	d050      	beq.n	8002a72 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80029d0:	f7fe fc0c 	bl	80011ec <HAL_GetTick>
 80029d4:	4602      	mov	r2, r0
 80029d6:	69bb      	ldr	r3, [r7, #24]
 80029d8:	1ad3      	subs	r3, r2, r3
 80029da:	69fa      	ldr	r2, [r7, #28]
 80029dc:	429a      	cmp	r2, r3
 80029de:	d902      	bls.n	80029e6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80029e0:	69fb      	ldr	r3, [r7, #28]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d13d      	bne.n	8002a62 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	685a      	ldr	r2, [r3, #4]
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80029f4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80029fe:	d111      	bne.n	8002a24 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	689b      	ldr	r3, [r3, #8]
 8002a04:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002a08:	d004      	beq.n	8002a14 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	689b      	ldr	r3, [r3, #8]
 8002a0e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002a12:	d107      	bne.n	8002a24 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	681a      	ldr	r2, [r3, #0]
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002a22:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a28:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002a2c:	d10f      	bne.n	8002a4e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	681a      	ldr	r2, [r3, #0]
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002a3c:	601a      	str	r2, [r3, #0]
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	681a      	ldr	r2, [r3, #0]
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002a4c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	2201      	movs	r2, #1
 8002a52:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	2200      	movs	r2, #0
 8002a5a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8002a5e:	2303      	movs	r3, #3
 8002a60:	e017      	b.n	8002a92 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002a62:	697b      	ldr	r3, [r7, #20]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d101      	bne.n	8002a6c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002a68:	2300      	movs	r3, #0
 8002a6a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002a6c:	697b      	ldr	r3, [r7, #20]
 8002a6e:	3b01      	subs	r3, #1
 8002a70:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	689a      	ldr	r2, [r3, #8]
 8002a78:	68bb      	ldr	r3, [r7, #8]
 8002a7a:	4013      	ands	r3, r2
 8002a7c:	68ba      	ldr	r2, [r7, #8]
 8002a7e:	429a      	cmp	r2, r3
 8002a80:	bf0c      	ite	eq
 8002a82:	2301      	moveq	r3, #1
 8002a84:	2300      	movne	r3, #0
 8002a86:	b2db      	uxtb	r3, r3
 8002a88:	461a      	mov	r2, r3
 8002a8a:	79fb      	ldrb	r3, [r7, #7]
 8002a8c:	429a      	cmp	r2, r3
 8002a8e:	d19b      	bne.n	80029c8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002a90:	2300      	movs	r3, #0
}
 8002a92:	4618      	mov	r0, r3
 8002a94:	3720      	adds	r7, #32
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bd80      	pop	{r7, pc}
 8002a9a:	bf00      	nop
 8002a9c:	20000000 	.word	0x20000000

08002aa0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b086      	sub	sp, #24
 8002aa4:	af02      	add	r7, sp, #8
 8002aa6:	60f8      	str	r0, [r7, #12]
 8002aa8:	60b9      	str	r1, [r7, #8]
 8002aaa:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002ab4:	d111      	bne.n	8002ada <SPI_EndRxTransaction+0x3a>
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	689b      	ldr	r3, [r3, #8]
 8002aba:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002abe:	d004      	beq.n	8002aca <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	689b      	ldr	r3, [r3, #8]
 8002ac4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002ac8:	d107      	bne.n	8002ada <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	681a      	ldr	r2, [r3, #0]
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002ad8:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002ae2:	d12a      	bne.n	8002b3a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	689b      	ldr	r3, [r3, #8]
 8002ae8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002aec:	d012      	beq.n	8002b14 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	9300      	str	r3, [sp, #0]
 8002af2:	68bb      	ldr	r3, [r7, #8]
 8002af4:	2200      	movs	r2, #0
 8002af6:	2180      	movs	r1, #128	@ 0x80
 8002af8:	68f8      	ldr	r0, [r7, #12]
 8002afa:	f7ff ff49 	bl	8002990 <SPI_WaitFlagStateUntilTimeout>
 8002afe:	4603      	mov	r3, r0
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d02d      	beq.n	8002b60 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b08:	f043 0220 	orr.w	r2, r3, #32
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8002b10:	2303      	movs	r3, #3
 8002b12:	e026      	b.n	8002b62 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	9300      	str	r3, [sp, #0]
 8002b18:	68bb      	ldr	r3, [r7, #8]
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	2101      	movs	r1, #1
 8002b1e:	68f8      	ldr	r0, [r7, #12]
 8002b20:	f7ff ff36 	bl	8002990 <SPI_WaitFlagStateUntilTimeout>
 8002b24:	4603      	mov	r3, r0
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d01a      	beq.n	8002b60 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b2e:	f043 0220 	orr.w	r2, r3, #32
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8002b36:	2303      	movs	r3, #3
 8002b38:	e013      	b.n	8002b62 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	9300      	str	r3, [sp, #0]
 8002b3e:	68bb      	ldr	r3, [r7, #8]
 8002b40:	2200      	movs	r2, #0
 8002b42:	2101      	movs	r1, #1
 8002b44:	68f8      	ldr	r0, [r7, #12]
 8002b46:	f7ff ff23 	bl	8002990 <SPI_WaitFlagStateUntilTimeout>
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d007      	beq.n	8002b60 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b54:	f043 0220 	orr.w	r2, r3, #32
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8002b5c:	2303      	movs	r3, #3
 8002b5e:	e000      	b.n	8002b62 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8002b60:	2300      	movs	r3, #0
}
 8002b62:	4618      	mov	r0, r3
 8002b64:	3710      	adds	r7, #16
 8002b66:	46bd      	mov	sp, r7
 8002b68:	bd80      	pop	{r7, pc}
	...

08002b6c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b088      	sub	sp, #32
 8002b70:	af02      	add	r7, sp, #8
 8002b72:	60f8      	str	r0, [r7, #12]
 8002b74:	60b9      	str	r1, [r7, #8]
 8002b76:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	9300      	str	r3, [sp, #0]
 8002b7c:	68bb      	ldr	r3, [r7, #8]
 8002b7e:	2201      	movs	r2, #1
 8002b80:	2102      	movs	r1, #2
 8002b82:	68f8      	ldr	r0, [r7, #12]
 8002b84:	f7ff ff04 	bl	8002990 <SPI_WaitFlagStateUntilTimeout>
 8002b88:	4603      	mov	r3, r0
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d007      	beq.n	8002b9e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b92:	f043 0220 	orr.w	r2, r3, #32
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8002b9a:	2303      	movs	r3, #3
 8002b9c:	e032      	b.n	8002c04 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002b9e:	4b1b      	ldr	r3, [pc, #108]	@ (8002c0c <SPI_EndRxTxTransaction+0xa0>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4a1b      	ldr	r2, [pc, #108]	@ (8002c10 <SPI_EndRxTxTransaction+0xa4>)
 8002ba4:	fba2 2303 	umull	r2, r3, r2, r3
 8002ba8:	0d5b      	lsrs	r3, r3, #21
 8002baa:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002bae:	fb02 f303 	mul.w	r3, r2, r3
 8002bb2:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002bbc:	d112      	bne.n	8002be4 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	9300      	str	r3, [sp, #0]
 8002bc2:	68bb      	ldr	r3, [r7, #8]
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	2180      	movs	r1, #128	@ 0x80
 8002bc8:	68f8      	ldr	r0, [r7, #12]
 8002bca:	f7ff fee1 	bl	8002990 <SPI_WaitFlagStateUntilTimeout>
 8002bce:	4603      	mov	r3, r0
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d016      	beq.n	8002c02 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bd8:	f043 0220 	orr.w	r2, r3, #32
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8002be0:	2303      	movs	r3, #3
 8002be2:	e00f      	b.n	8002c04 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002be4:	697b      	ldr	r3, [r7, #20]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d00a      	beq.n	8002c00 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8002bea:	697b      	ldr	r3, [r7, #20]
 8002bec:	3b01      	subs	r3, #1
 8002bee:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	689b      	ldr	r3, [r3, #8]
 8002bf6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002bfa:	2b80      	cmp	r3, #128	@ 0x80
 8002bfc:	d0f2      	beq.n	8002be4 <SPI_EndRxTxTransaction+0x78>
 8002bfe:	e000      	b.n	8002c02 <SPI_EndRxTxTransaction+0x96>
        break;
 8002c00:	bf00      	nop
  }

  return HAL_OK;
 8002c02:	2300      	movs	r3, #0
}
 8002c04:	4618      	mov	r0, r3
 8002c06:	3718      	adds	r7, #24
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	bd80      	pop	{r7, pc}
 8002c0c:	20000000 	.word	0x20000000
 8002c10:	165e9f81 	.word	0x165e9f81

08002c14 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b082      	sub	sp, #8
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d101      	bne.n	8002c26 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002c22:	2301      	movs	r3, #1
 8002c24:	e042      	b.n	8002cac <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002c2c:	b2db      	uxtb	r3, r3
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d106      	bne.n	8002c40 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2200      	movs	r2, #0
 8002c36:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002c3a:	6878      	ldr	r0, [r7, #4]
 8002c3c:	f7fd feb4 	bl	80009a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2224      	movs	r2, #36	@ 0x24
 8002c44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	68da      	ldr	r2, [r3, #12]
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002c56:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002c58:	6878      	ldr	r0, [r7, #4]
 8002c5a:	f000 f973 	bl	8002f44 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	691a      	ldr	r2, [r3, #16]
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002c6c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	695a      	ldr	r2, [r3, #20]
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002c7c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	68da      	ldr	r2, [r3, #12]
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002c8c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2200      	movs	r2, #0
 8002c92:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2220      	movs	r2, #32
 8002c98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2220      	movs	r2, #32
 8002ca0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002caa:	2300      	movs	r3, #0
}
 8002cac:	4618      	mov	r0, r3
 8002cae:	3708      	adds	r7, #8
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	bd80      	pop	{r7, pc}

08002cb4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b08a      	sub	sp, #40	@ 0x28
 8002cb8:	af02      	add	r7, sp, #8
 8002cba:	60f8      	str	r0, [r7, #12]
 8002cbc:	60b9      	str	r1, [r7, #8]
 8002cbe:	603b      	str	r3, [r7, #0]
 8002cc0:	4613      	mov	r3, r2
 8002cc2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002cce:	b2db      	uxtb	r3, r3
 8002cd0:	2b20      	cmp	r3, #32
 8002cd2:	d175      	bne.n	8002dc0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002cd4:	68bb      	ldr	r3, [r7, #8]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d002      	beq.n	8002ce0 <HAL_UART_Transmit+0x2c>
 8002cda:	88fb      	ldrh	r3, [r7, #6]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d101      	bne.n	8002ce4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	e06e      	b.n	8002dc2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	2221      	movs	r2, #33	@ 0x21
 8002cee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002cf2:	f7fe fa7b 	bl	80011ec <HAL_GetTick>
 8002cf6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	88fa      	ldrh	r2, [r7, #6]
 8002cfc:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	88fa      	ldrh	r2, [r7, #6]
 8002d02:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	689b      	ldr	r3, [r3, #8]
 8002d08:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002d0c:	d108      	bne.n	8002d20 <HAL_UART_Transmit+0x6c>
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	691b      	ldr	r3, [r3, #16]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d104      	bne.n	8002d20 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002d16:	2300      	movs	r3, #0
 8002d18:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002d1a:	68bb      	ldr	r3, [r7, #8]
 8002d1c:	61bb      	str	r3, [r7, #24]
 8002d1e:	e003      	b.n	8002d28 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002d20:	68bb      	ldr	r3, [r7, #8]
 8002d22:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002d24:	2300      	movs	r3, #0
 8002d26:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002d28:	e02e      	b.n	8002d88 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	9300      	str	r3, [sp, #0]
 8002d2e:	697b      	ldr	r3, [r7, #20]
 8002d30:	2200      	movs	r2, #0
 8002d32:	2180      	movs	r1, #128	@ 0x80
 8002d34:	68f8      	ldr	r0, [r7, #12]
 8002d36:	f000 f848 	bl	8002dca <UART_WaitOnFlagUntilTimeout>
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d005      	beq.n	8002d4c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	2220      	movs	r2, #32
 8002d44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002d48:	2303      	movs	r3, #3
 8002d4a:	e03a      	b.n	8002dc2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002d4c:	69fb      	ldr	r3, [r7, #28]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d10b      	bne.n	8002d6a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002d52:	69bb      	ldr	r3, [r7, #24]
 8002d54:	881b      	ldrh	r3, [r3, #0]
 8002d56:	461a      	mov	r2, r3
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002d60:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002d62:	69bb      	ldr	r3, [r7, #24]
 8002d64:	3302      	adds	r3, #2
 8002d66:	61bb      	str	r3, [r7, #24]
 8002d68:	e007      	b.n	8002d7a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002d6a:	69fb      	ldr	r3, [r7, #28]
 8002d6c:	781a      	ldrb	r2, [r3, #0]
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002d74:	69fb      	ldr	r3, [r7, #28]
 8002d76:	3301      	adds	r3, #1
 8002d78:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002d7e:	b29b      	uxth	r3, r3
 8002d80:	3b01      	subs	r3, #1
 8002d82:	b29a      	uxth	r2, r3
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002d8c:	b29b      	uxth	r3, r3
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d1cb      	bne.n	8002d2a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	9300      	str	r3, [sp, #0]
 8002d96:	697b      	ldr	r3, [r7, #20]
 8002d98:	2200      	movs	r2, #0
 8002d9a:	2140      	movs	r1, #64	@ 0x40
 8002d9c:	68f8      	ldr	r0, [r7, #12]
 8002d9e:	f000 f814 	bl	8002dca <UART_WaitOnFlagUntilTimeout>
 8002da2:	4603      	mov	r3, r0
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d005      	beq.n	8002db4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	2220      	movs	r2, #32
 8002dac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002db0:	2303      	movs	r3, #3
 8002db2:	e006      	b.n	8002dc2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	2220      	movs	r2, #32
 8002db8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	e000      	b.n	8002dc2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002dc0:	2302      	movs	r3, #2
  }
}
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	3720      	adds	r7, #32
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bd80      	pop	{r7, pc}

08002dca <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002dca:	b580      	push	{r7, lr}
 8002dcc:	b086      	sub	sp, #24
 8002dce:	af00      	add	r7, sp, #0
 8002dd0:	60f8      	str	r0, [r7, #12]
 8002dd2:	60b9      	str	r1, [r7, #8]
 8002dd4:	603b      	str	r3, [r7, #0]
 8002dd6:	4613      	mov	r3, r2
 8002dd8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002dda:	e03b      	b.n	8002e54 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ddc:	6a3b      	ldr	r3, [r7, #32]
 8002dde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002de2:	d037      	beq.n	8002e54 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002de4:	f7fe fa02 	bl	80011ec <HAL_GetTick>
 8002de8:	4602      	mov	r2, r0
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	1ad3      	subs	r3, r2, r3
 8002dee:	6a3a      	ldr	r2, [r7, #32]
 8002df0:	429a      	cmp	r2, r3
 8002df2:	d302      	bcc.n	8002dfa <UART_WaitOnFlagUntilTimeout+0x30>
 8002df4:	6a3b      	ldr	r3, [r7, #32]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d101      	bne.n	8002dfe <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002dfa:	2303      	movs	r3, #3
 8002dfc:	e03a      	b.n	8002e74 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	68db      	ldr	r3, [r3, #12]
 8002e04:	f003 0304 	and.w	r3, r3, #4
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d023      	beq.n	8002e54 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002e0c:	68bb      	ldr	r3, [r7, #8]
 8002e0e:	2b80      	cmp	r3, #128	@ 0x80
 8002e10:	d020      	beq.n	8002e54 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002e12:	68bb      	ldr	r3, [r7, #8]
 8002e14:	2b40      	cmp	r3, #64	@ 0x40
 8002e16:	d01d      	beq.n	8002e54 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f003 0308 	and.w	r3, r3, #8
 8002e22:	2b08      	cmp	r3, #8
 8002e24:	d116      	bne.n	8002e54 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002e26:	2300      	movs	r3, #0
 8002e28:	617b      	str	r3, [r7, #20]
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	617b      	str	r3, [r7, #20]
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	685b      	ldr	r3, [r3, #4]
 8002e38:	617b      	str	r3, [r7, #20]
 8002e3a:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002e3c:	68f8      	ldr	r0, [r7, #12]
 8002e3e:	f000 f81d 	bl	8002e7c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	2208      	movs	r2, #8
 8002e46:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002e50:	2301      	movs	r3, #1
 8002e52:	e00f      	b.n	8002e74 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	681a      	ldr	r2, [r3, #0]
 8002e5a:	68bb      	ldr	r3, [r7, #8]
 8002e5c:	4013      	ands	r3, r2
 8002e5e:	68ba      	ldr	r2, [r7, #8]
 8002e60:	429a      	cmp	r2, r3
 8002e62:	bf0c      	ite	eq
 8002e64:	2301      	moveq	r3, #1
 8002e66:	2300      	movne	r3, #0
 8002e68:	b2db      	uxtb	r3, r3
 8002e6a:	461a      	mov	r2, r3
 8002e6c:	79fb      	ldrb	r3, [r7, #7]
 8002e6e:	429a      	cmp	r2, r3
 8002e70:	d0b4      	beq.n	8002ddc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002e72:	2300      	movs	r3, #0
}
 8002e74:	4618      	mov	r0, r3
 8002e76:	3718      	adds	r7, #24
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	bd80      	pop	{r7, pc}

08002e7c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	b095      	sub	sp, #84	@ 0x54
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	330c      	adds	r3, #12
 8002e8a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e8e:	e853 3f00 	ldrex	r3, [r3]
 8002e92:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002e94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e96:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002e9a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	330c      	adds	r3, #12
 8002ea2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002ea4:	643a      	str	r2, [r7, #64]	@ 0x40
 8002ea6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ea8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002eaa:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002eac:	e841 2300 	strex	r3, r2, [r1]
 8002eb0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002eb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d1e5      	bne.n	8002e84 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	3314      	adds	r3, #20
 8002ebe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ec0:	6a3b      	ldr	r3, [r7, #32]
 8002ec2:	e853 3f00 	ldrex	r3, [r3]
 8002ec6:	61fb      	str	r3, [r7, #28]
   return(result);
 8002ec8:	69fb      	ldr	r3, [r7, #28]
 8002eca:	f023 0301 	bic.w	r3, r3, #1
 8002ece:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	3314      	adds	r3, #20
 8002ed6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002ed8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002eda:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002edc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002ede:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002ee0:	e841 2300 	strex	r3, r2, [r1]
 8002ee4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002ee6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d1e5      	bne.n	8002eb8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ef0:	2b01      	cmp	r3, #1
 8002ef2:	d119      	bne.n	8002f28 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	330c      	adds	r3, #12
 8002efa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	e853 3f00 	ldrex	r3, [r3]
 8002f02:	60bb      	str	r3, [r7, #8]
   return(result);
 8002f04:	68bb      	ldr	r3, [r7, #8]
 8002f06:	f023 0310 	bic.w	r3, r3, #16
 8002f0a:	647b      	str	r3, [r7, #68]	@ 0x44
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	330c      	adds	r3, #12
 8002f12:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002f14:	61ba      	str	r2, [r7, #24]
 8002f16:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f18:	6979      	ldr	r1, [r7, #20]
 8002f1a:	69ba      	ldr	r2, [r7, #24]
 8002f1c:	e841 2300 	strex	r3, r2, [r1]
 8002f20:	613b      	str	r3, [r7, #16]
   return(result);
 8002f22:	693b      	ldr	r3, [r7, #16]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d1e5      	bne.n	8002ef4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2220      	movs	r2, #32
 8002f2c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2200      	movs	r2, #0
 8002f34:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002f36:	bf00      	nop
 8002f38:	3754      	adds	r7, #84	@ 0x54
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f40:	4770      	bx	lr
	...

08002f44 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002f44:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f48:	b0c0      	sub	sp, #256	@ 0x100
 8002f4a:	af00      	add	r7, sp, #0
 8002f4c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002f50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	691b      	ldr	r3, [r3, #16]
 8002f58:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002f5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f60:	68d9      	ldr	r1, [r3, #12]
 8002f62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f66:	681a      	ldr	r2, [r3, #0]
 8002f68:	ea40 0301 	orr.w	r3, r0, r1
 8002f6c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002f6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f72:	689a      	ldr	r2, [r3, #8]
 8002f74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f78:	691b      	ldr	r3, [r3, #16]
 8002f7a:	431a      	orrs	r2, r3
 8002f7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f80:	695b      	ldr	r3, [r3, #20]
 8002f82:	431a      	orrs	r2, r3
 8002f84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f88:	69db      	ldr	r3, [r3, #28]
 8002f8a:	4313      	orrs	r3, r2
 8002f8c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002f90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	68db      	ldr	r3, [r3, #12]
 8002f98:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002f9c:	f021 010c 	bic.w	r1, r1, #12
 8002fa0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002fa4:	681a      	ldr	r2, [r3, #0]
 8002fa6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002faa:	430b      	orrs	r3, r1
 8002fac:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002fae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	695b      	ldr	r3, [r3, #20]
 8002fb6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8002fba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002fbe:	6999      	ldr	r1, [r3, #24]
 8002fc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002fc4:	681a      	ldr	r2, [r3, #0]
 8002fc6:	ea40 0301 	orr.w	r3, r0, r1
 8002fca:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002fcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002fd0:	681a      	ldr	r2, [r3, #0]
 8002fd2:	4b8f      	ldr	r3, [pc, #572]	@ (8003210 <UART_SetConfig+0x2cc>)
 8002fd4:	429a      	cmp	r2, r3
 8002fd6:	d005      	beq.n	8002fe4 <UART_SetConfig+0xa0>
 8002fd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002fdc:	681a      	ldr	r2, [r3, #0]
 8002fde:	4b8d      	ldr	r3, [pc, #564]	@ (8003214 <UART_SetConfig+0x2d0>)
 8002fe0:	429a      	cmp	r2, r3
 8002fe2:	d104      	bne.n	8002fee <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002fe4:	f7ff f822 	bl	800202c <HAL_RCC_GetPCLK2Freq>
 8002fe8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002fec:	e003      	b.n	8002ff6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002fee:	f7ff f809 	bl	8002004 <HAL_RCC_GetPCLK1Freq>
 8002ff2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002ff6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ffa:	69db      	ldr	r3, [r3, #28]
 8002ffc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003000:	f040 810c 	bne.w	800321c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003004:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003008:	2200      	movs	r2, #0
 800300a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800300e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003012:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003016:	4622      	mov	r2, r4
 8003018:	462b      	mov	r3, r5
 800301a:	1891      	adds	r1, r2, r2
 800301c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800301e:	415b      	adcs	r3, r3
 8003020:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003022:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003026:	4621      	mov	r1, r4
 8003028:	eb12 0801 	adds.w	r8, r2, r1
 800302c:	4629      	mov	r1, r5
 800302e:	eb43 0901 	adc.w	r9, r3, r1
 8003032:	f04f 0200 	mov.w	r2, #0
 8003036:	f04f 0300 	mov.w	r3, #0
 800303a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800303e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003042:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003046:	4690      	mov	r8, r2
 8003048:	4699      	mov	r9, r3
 800304a:	4623      	mov	r3, r4
 800304c:	eb18 0303 	adds.w	r3, r8, r3
 8003050:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003054:	462b      	mov	r3, r5
 8003056:	eb49 0303 	adc.w	r3, r9, r3
 800305a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800305e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003062:	685b      	ldr	r3, [r3, #4]
 8003064:	2200      	movs	r2, #0
 8003066:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800306a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800306e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003072:	460b      	mov	r3, r1
 8003074:	18db      	adds	r3, r3, r3
 8003076:	653b      	str	r3, [r7, #80]	@ 0x50
 8003078:	4613      	mov	r3, r2
 800307a:	eb42 0303 	adc.w	r3, r2, r3
 800307e:	657b      	str	r3, [r7, #84]	@ 0x54
 8003080:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003084:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003088:	f7fd f90a 	bl	80002a0 <__aeabi_uldivmod>
 800308c:	4602      	mov	r2, r0
 800308e:	460b      	mov	r3, r1
 8003090:	4b61      	ldr	r3, [pc, #388]	@ (8003218 <UART_SetConfig+0x2d4>)
 8003092:	fba3 2302 	umull	r2, r3, r3, r2
 8003096:	095b      	lsrs	r3, r3, #5
 8003098:	011c      	lsls	r4, r3, #4
 800309a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800309e:	2200      	movs	r2, #0
 80030a0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80030a4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80030a8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80030ac:	4642      	mov	r2, r8
 80030ae:	464b      	mov	r3, r9
 80030b0:	1891      	adds	r1, r2, r2
 80030b2:	64b9      	str	r1, [r7, #72]	@ 0x48
 80030b4:	415b      	adcs	r3, r3
 80030b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80030b8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80030bc:	4641      	mov	r1, r8
 80030be:	eb12 0a01 	adds.w	sl, r2, r1
 80030c2:	4649      	mov	r1, r9
 80030c4:	eb43 0b01 	adc.w	fp, r3, r1
 80030c8:	f04f 0200 	mov.w	r2, #0
 80030cc:	f04f 0300 	mov.w	r3, #0
 80030d0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80030d4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80030d8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80030dc:	4692      	mov	sl, r2
 80030de:	469b      	mov	fp, r3
 80030e0:	4643      	mov	r3, r8
 80030e2:	eb1a 0303 	adds.w	r3, sl, r3
 80030e6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80030ea:	464b      	mov	r3, r9
 80030ec:	eb4b 0303 	adc.w	r3, fp, r3
 80030f0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80030f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80030f8:	685b      	ldr	r3, [r3, #4]
 80030fa:	2200      	movs	r2, #0
 80030fc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003100:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003104:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003108:	460b      	mov	r3, r1
 800310a:	18db      	adds	r3, r3, r3
 800310c:	643b      	str	r3, [r7, #64]	@ 0x40
 800310e:	4613      	mov	r3, r2
 8003110:	eb42 0303 	adc.w	r3, r2, r3
 8003114:	647b      	str	r3, [r7, #68]	@ 0x44
 8003116:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800311a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800311e:	f7fd f8bf 	bl	80002a0 <__aeabi_uldivmod>
 8003122:	4602      	mov	r2, r0
 8003124:	460b      	mov	r3, r1
 8003126:	4611      	mov	r1, r2
 8003128:	4b3b      	ldr	r3, [pc, #236]	@ (8003218 <UART_SetConfig+0x2d4>)
 800312a:	fba3 2301 	umull	r2, r3, r3, r1
 800312e:	095b      	lsrs	r3, r3, #5
 8003130:	2264      	movs	r2, #100	@ 0x64
 8003132:	fb02 f303 	mul.w	r3, r2, r3
 8003136:	1acb      	subs	r3, r1, r3
 8003138:	00db      	lsls	r3, r3, #3
 800313a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800313e:	4b36      	ldr	r3, [pc, #216]	@ (8003218 <UART_SetConfig+0x2d4>)
 8003140:	fba3 2302 	umull	r2, r3, r3, r2
 8003144:	095b      	lsrs	r3, r3, #5
 8003146:	005b      	lsls	r3, r3, #1
 8003148:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800314c:	441c      	add	r4, r3
 800314e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003152:	2200      	movs	r2, #0
 8003154:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003158:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800315c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003160:	4642      	mov	r2, r8
 8003162:	464b      	mov	r3, r9
 8003164:	1891      	adds	r1, r2, r2
 8003166:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003168:	415b      	adcs	r3, r3
 800316a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800316c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003170:	4641      	mov	r1, r8
 8003172:	1851      	adds	r1, r2, r1
 8003174:	6339      	str	r1, [r7, #48]	@ 0x30
 8003176:	4649      	mov	r1, r9
 8003178:	414b      	adcs	r3, r1
 800317a:	637b      	str	r3, [r7, #52]	@ 0x34
 800317c:	f04f 0200 	mov.w	r2, #0
 8003180:	f04f 0300 	mov.w	r3, #0
 8003184:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003188:	4659      	mov	r1, fp
 800318a:	00cb      	lsls	r3, r1, #3
 800318c:	4651      	mov	r1, sl
 800318e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003192:	4651      	mov	r1, sl
 8003194:	00ca      	lsls	r2, r1, #3
 8003196:	4610      	mov	r0, r2
 8003198:	4619      	mov	r1, r3
 800319a:	4603      	mov	r3, r0
 800319c:	4642      	mov	r2, r8
 800319e:	189b      	adds	r3, r3, r2
 80031a0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80031a4:	464b      	mov	r3, r9
 80031a6:	460a      	mov	r2, r1
 80031a8:	eb42 0303 	adc.w	r3, r2, r3
 80031ac:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80031b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031b4:	685b      	ldr	r3, [r3, #4]
 80031b6:	2200      	movs	r2, #0
 80031b8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80031bc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80031c0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80031c4:	460b      	mov	r3, r1
 80031c6:	18db      	adds	r3, r3, r3
 80031c8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80031ca:	4613      	mov	r3, r2
 80031cc:	eb42 0303 	adc.w	r3, r2, r3
 80031d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80031d2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80031d6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80031da:	f7fd f861 	bl	80002a0 <__aeabi_uldivmod>
 80031de:	4602      	mov	r2, r0
 80031e0:	460b      	mov	r3, r1
 80031e2:	4b0d      	ldr	r3, [pc, #52]	@ (8003218 <UART_SetConfig+0x2d4>)
 80031e4:	fba3 1302 	umull	r1, r3, r3, r2
 80031e8:	095b      	lsrs	r3, r3, #5
 80031ea:	2164      	movs	r1, #100	@ 0x64
 80031ec:	fb01 f303 	mul.w	r3, r1, r3
 80031f0:	1ad3      	subs	r3, r2, r3
 80031f2:	00db      	lsls	r3, r3, #3
 80031f4:	3332      	adds	r3, #50	@ 0x32
 80031f6:	4a08      	ldr	r2, [pc, #32]	@ (8003218 <UART_SetConfig+0x2d4>)
 80031f8:	fba2 2303 	umull	r2, r3, r2, r3
 80031fc:	095b      	lsrs	r3, r3, #5
 80031fe:	f003 0207 	and.w	r2, r3, #7
 8003202:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4422      	add	r2, r4
 800320a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800320c:	e106      	b.n	800341c <UART_SetConfig+0x4d8>
 800320e:	bf00      	nop
 8003210:	40011000 	.word	0x40011000
 8003214:	40011400 	.word	0x40011400
 8003218:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800321c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003220:	2200      	movs	r2, #0
 8003222:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003226:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800322a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800322e:	4642      	mov	r2, r8
 8003230:	464b      	mov	r3, r9
 8003232:	1891      	adds	r1, r2, r2
 8003234:	6239      	str	r1, [r7, #32]
 8003236:	415b      	adcs	r3, r3
 8003238:	627b      	str	r3, [r7, #36]	@ 0x24
 800323a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800323e:	4641      	mov	r1, r8
 8003240:	1854      	adds	r4, r2, r1
 8003242:	4649      	mov	r1, r9
 8003244:	eb43 0501 	adc.w	r5, r3, r1
 8003248:	f04f 0200 	mov.w	r2, #0
 800324c:	f04f 0300 	mov.w	r3, #0
 8003250:	00eb      	lsls	r3, r5, #3
 8003252:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003256:	00e2      	lsls	r2, r4, #3
 8003258:	4614      	mov	r4, r2
 800325a:	461d      	mov	r5, r3
 800325c:	4643      	mov	r3, r8
 800325e:	18e3      	adds	r3, r4, r3
 8003260:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003264:	464b      	mov	r3, r9
 8003266:	eb45 0303 	adc.w	r3, r5, r3
 800326a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800326e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	2200      	movs	r2, #0
 8003276:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800327a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800327e:	f04f 0200 	mov.w	r2, #0
 8003282:	f04f 0300 	mov.w	r3, #0
 8003286:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800328a:	4629      	mov	r1, r5
 800328c:	008b      	lsls	r3, r1, #2
 800328e:	4621      	mov	r1, r4
 8003290:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003294:	4621      	mov	r1, r4
 8003296:	008a      	lsls	r2, r1, #2
 8003298:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800329c:	f7fd f800 	bl	80002a0 <__aeabi_uldivmod>
 80032a0:	4602      	mov	r2, r0
 80032a2:	460b      	mov	r3, r1
 80032a4:	4b60      	ldr	r3, [pc, #384]	@ (8003428 <UART_SetConfig+0x4e4>)
 80032a6:	fba3 2302 	umull	r2, r3, r3, r2
 80032aa:	095b      	lsrs	r3, r3, #5
 80032ac:	011c      	lsls	r4, r3, #4
 80032ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80032b2:	2200      	movs	r2, #0
 80032b4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80032b8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80032bc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80032c0:	4642      	mov	r2, r8
 80032c2:	464b      	mov	r3, r9
 80032c4:	1891      	adds	r1, r2, r2
 80032c6:	61b9      	str	r1, [r7, #24]
 80032c8:	415b      	adcs	r3, r3
 80032ca:	61fb      	str	r3, [r7, #28]
 80032cc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80032d0:	4641      	mov	r1, r8
 80032d2:	1851      	adds	r1, r2, r1
 80032d4:	6139      	str	r1, [r7, #16]
 80032d6:	4649      	mov	r1, r9
 80032d8:	414b      	adcs	r3, r1
 80032da:	617b      	str	r3, [r7, #20]
 80032dc:	f04f 0200 	mov.w	r2, #0
 80032e0:	f04f 0300 	mov.w	r3, #0
 80032e4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80032e8:	4659      	mov	r1, fp
 80032ea:	00cb      	lsls	r3, r1, #3
 80032ec:	4651      	mov	r1, sl
 80032ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80032f2:	4651      	mov	r1, sl
 80032f4:	00ca      	lsls	r2, r1, #3
 80032f6:	4610      	mov	r0, r2
 80032f8:	4619      	mov	r1, r3
 80032fa:	4603      	mov	r3, r0
 80032fc:	4642      	mov	r2, r8
 80032fe:	189b      	adds	r3, r3, r2
 8003300:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003304:	464b      	mov	r3, r9
 8003306:	460a      	mov	r2, r1
 8003308:	eb42 0303 	adc.w	r3, r2, r3
 800330c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003310:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003314:	685b      	ldr	r3, [r3, #4]
 8003316:	2200      	movs	r2, #0
 8003318:	67bb      	str	r3, [r7, #120]	@ 0x78
 800331a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800331c:	f04f 0200 	mov.w	r2, #0
 8003320:	f04f 0300 	mov.w	r3, #0
 8003324:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003328:	4649      	mov	r1, r9
 800332a:	008b      	lsls	r3, r1, #2
 800332c:	4641      	mov	r1, r8
 800332e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003332:	4641      	mov	r1, r8
 8003334:	008a      	lsls	r2, r1, #2
 8003336:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800333a:	f7fc ffb1 	bl	80002a0 <__aeabi_uldivmod>
 800333e:	4602      	mov	r2, r0
 8003340:	460b      	mov	r3, r1
 8003342:	4611      	mov	r1, r2
 8003344:	4b38      	ldr	r3, [pc, #224]	@ (8003428 <UART_SetConfig+0x4e4>)
 8003346:	fba3 2301 	umull	r2, r3, r3, r1
 800334a:	095b      	lsrs	r3, r3, #5
 800334c:	2264      	movs	r2, #100	@ 0x64
 800334e:	fb02 f303 	mul.w	r3, r2, r3
 8003352:	1acb      	subs	r3, r1, r3
 8003354:	011b      	lsls	r3, r3, #4
 8003356:	3332      	adds	r3, #50	@ 0x32
 8003358:	4a33      	ldr	r2, [pc, #204]	@ (8003428 <UART_SetConfig+0x4e4>)
 800335a:	fba2 2303 	umull	r2, r3, r2, r3
 800335e:	095b      	lsrs	r3, r3, #5
 8003360:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003364:	441c      	add	r4, r3
 8003366:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800336a:	2200      	movs	r2, #0
 800336c:	673b      	str	r3, [r7, #112]	@ 0x70
 800336e:	677a      	str	r2, [r7, #116]	@ 0x74
 8003370:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003374:	4642      	mov	r2, r8
 8003376:	464b      	mov	r3, r9
 8003378:	1891      	adds	r1, r2, r2
 800337a:	60b9      	str	r1, [r7, #8]
 800337c:	415b      	adcs	r3, r3
 800337e:	60fb      	str	r3, [r7, #12]
 8003380:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003384:	4641      	mov	r1, r8
 8003386:	1851      	adds	r1, r2, r1
 8003388:	6039      	str	r1, [r7, #0]
 800338a:	4649      	mov	r1, r9
 800338c:	414b      	adcs	r3, r1
 800338e:	607b      	str	r3, [r7, #4]
 8003390:	f04f 0200 	mov.w	r2, #0
 8003394:	f04f 0300 	mov.w	r3, #0
 8003398:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800339c:	4659      	mov	r1, fp
 800339e:	00cb      	lsls	r3, r1, #3
 80033a0:	4651      	mov	r1, sl
 80033a2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80033a6:	4651      	mov	r1, sl
 80033a8:	00ca      	lsls	r2, r1, #3
 80033aa:	4610      	mov	r0, r2
 80033ac:	4619      	mov	r1, r3
 80033ae:	4603      	mov	r3, r0
 80033b0:	4642      	mov	r2, r8
 80033b2:	189b      	adds	r3, r3, r2
 80033b4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80033b6:	464b      	mov	r3, r9
 80033b8:	460a      	mov	r2, r1
 80033ba:	eb42 0303 	adc.w	r3, r2, r3
 80033be:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80033c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033c4:	685b      	ldr	r3, [r3, #4]
 80033c6:	2200      	movs	r2, #0
 80033c8:	663b      	str	r3, [r7, #96]	@ 0x60
 80033ca:	667a      	str	r2, [r7, #100]	@ 0x64
 80033cc:	f04f 0200 	mov.w	r2, #0
 80033d0:	f04f 0300 	mov.w	r3, #0
 80033d4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80033d8:	4649      	mov	r1, r9
 80033da:	008b      	lsls	r3, r1, #2
 80033dc:	4641      	mov	r1, r8
 80033de:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80033e2:	4641      	mov	r1, r8
 80033e4:	008a      	lsls	r2, r1, #2
 80033e6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80033ea:	f7fc ff59 	bl	80002a0 <__aeabi_uldivmod>
 80033ee:	4602      	mov	r2, r0
 80033f0:	460b      	mov	r3, r1
 80033f2:	4b0d      	ldr	r3, [pc, #52]	@ (8003428 <UART_SetConfig+0x4e4>)
 80033f4:	fba3 1302 	umull	r1, r3, r3, r2
 80033f8:	095b      	lsrs	r3, r3, #5
 80033fa:	2164      	movs	r1, #100	@ 0x64
 80033fc:	fb01 f303 	mul.w	r3, r1, r3
 8003400:	1ad3      	subs	r3, r2, r3
 8003402:	011b      	lsls	r3, r3, #4
 8003404:	3332      	adds	r3, #50	@ 0x32
 8003406:	4a08      	ldr	r2, [pc, #32]	@ (8003428 <UART_SetConfig+0x4e4>)
 8003408:	fba2 2303 	umull	r2, r3, r2, r3
 800340c:	095b      	lsrs	r3, r3, #5
 800340e:	f003 020f 	and.w	r2, r3, #15
 8003412:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4422      	add	r2, r4
 800341a:	609a      	str	r2, [r3, #8]
}
 800341c:	bf00      	nop
 800341e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003422:	46bd      	mov	sp, r7
 8003424:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003428:	51eb851f 	.word	0x51eb851f

0800342c <siprintf>:
 800342c:	b40e      	push	{r1, r2, r3}
 800342e:	b500      	push	{lr}
 8003430:	b09c      	sub	sp, #112	@ 0x70
 8003432:	ab1d      	add	r3, sp, #116	@ 0x74
 8003434:	9002      	str	r0, [sp, #8]
 8003436:	9006      	str	r0, [sp, #24]
 8003438:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800343c:	4809      	ldr	r0, [pc, #36]	@ (8003464 <siprintf+0x38>)
 800343e:	9107      	str	r1, [sp, #28]
 8003440:	9104      	str	r1, [sp, #16]
 8003442:	4909      	ldr	r1, [pc, #36]	@ (8003468 <siprintf+0x3c>)
 8003444:	f853 2b04 	ldr.w	r2, [r3], #4
 8003448:	9105      	str	r1, [sp, #20]
 800344a:	6800      	ldr	r0, [r0, #0]
 800344c:	9301      	str	r3, [sp, #4]
 800344e:	a902      	add	r1, sp, #8
 8003450:	f000 f994 	bl	800377c <_svfiprintf_r>
 8003454:	9b02      	ldr	r3, [sp, #8]
 8003456:	2200      	movs	r2, #0
 8003458:	701a      	strb	r2, [r3, #0]
 800345a:	b01c      	add	sp, #112	@ 0x70
 800345c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003460:	b003      	add	sp, #12
 8003462:	4770      	bx	lr
 8003464:	2000000c 	.word	0x2000000c
 8003468:	ffff0208 	.word	0xffff0208

0800346c <memset>:
 800346c:	4402      	add	r2, r0
 800346e:	4603      	mov	r3, r0
 8003470:	4293      	cmp	r3, r2
 8003472:	d100      	bne.n	8003476 <memset+0xa>
 8003474:	4770      	bx	lr
 8003476:	f803 1b01 	strb.w	r1, [r3], #1
 800347a:	e7f9      	b.n	8003470 <memset+0x4>

0800347c <__errno>:
 800347c:	4b01      	ldr	r3, [pc, #4]	@ (8003484 <__errno+0x8>)
 800347e:	6818      	ldr	r0, [r3, #0]
 8003480:	4770      	bx	lr
 8003482:	bf00      	nop
 8003484:	2000000c 	.word	0x2000000c

08003488 <__libc_init_array>:
 8003488:	b570      	push	{r4, r5, r6, lr}
 800348a:	4d0d      	ldr	r5, [pc, #52]	@ (80034c0 <__libc_init_array+0x38>)
 800348c:	4c0d      	ldr	r4, [pc, #52]	@ (80034c4 <__libc_init_array+0x3c>)
 800348e:	1b64      	subs	r4, r4, r5
 8003490:	10a4      	asrs	r4, r4, #2
 8003492:	2600      	movs	r6, #0
 8003494:	42a6      	cmp	r6, r4
 8003496:	d109      	bne.n	80034ac <__libc_init_array+0x24>
 8003498:	4d0b      	ldr	r5, [pc, #44]	@ (80034c8 <__libc_init_array+0x40>)
 800349a:	4c0c      	ldr	r4, [pc, #48]	@ (80034cc <__libc_init_array+0x44>)
 800349c:	f000 fc66 	bl	8003d6c <_init>
 80034a0:	1b64      	subs	r4, r4, r5
 80034a2:	10a4      	asrs	r4, r4, #2
 80034a4:	2600      	movs	r6, #0
 80034a6:	42a6      	cmp	r6, r4
 80034a8:	d105      	bne.n	80034b6 <__libc_init_array+0x2e>
 80034aa:	bd70      	pop	{r4, r5, r6, pc}
 80034ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80034b0:	4798      	blx	r3
 80034b2:	3601      	adds	r6, #1
 80034b4:	e7ee      	b.n	8003494 <__libc_init_array+0xc>
 80034b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80034ba:	4798      	blx	r3
 80034bc:	3601      	adds	r6, #1
 80034be:	e7f2      	b.n	80034a6 <__libc_init_array+0x1e>
 80034c0:	08003e58 	.word	0x08003e58
 80034c4:	08003e58 	.word	0x08003e58
 80034c8:	08003e58 	.word	0x08003e58
 80034cc:	08003e5c 	.word	0x08003e5c

080034d0 <__retarget_lock_acquire_recursive>:
 80034d0:	4770      	bx	lr

080034d2 <__retarget_lock_release_recursive>:
 80034d2:	4770      	bx	lr

080034d4 <_free_r>:
 80034d4:	b538      	push	{r3, r4, r5, lr}
 80034d6:	4605      	mov	r5, r0
 80034d8:	2900      	cmp	r1, #0
 80034da:	d041      	beq.n	8003560 <_free_r+0x8c>
 80034dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80034e0:	1f0c      	subs	r4, r1, #4
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	bfb8      	it	lt
 80034e6:	18e4      	addlt	r4, r4, r3
 80034e8:	f000 f8e0 	bl	80036ac <__malloc_lock>
 80034ec:	4a1d      	ldr	r2, [pc, #116]	@ (8003564 <_free_r+0x90>)
 80034ee:	6813      	ldr	r3, [r2, #0]
 80034f0:	b933      	cbnz	r3, 8003500 <_free_r+0x2c>
 80034f2:	6063      	str	r3, [r4, #4]
 80034f4:	6014      	str	r4, [r2, #0]
 80034f6:	4628      	mov	r0, r5
 80034f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80034fc:	f000 b8dc 	b.w	80036b8 <__malloc_unlock>
 8003500:	42a3      	cmp	r3, r4
 8003502:	d908      	bls.n	8003516 <_free_r+0x42>
 8003504:	6820      	ldr	r0, [r4, #0]
 8003506:	1821      	adds	r1, r4, r0
 8003508:	428b      	cmp	r3, r1
 800350a:	bf01      	itttt	eq
 800350c:	6819      	ldreq	r1, [r3, #0]
 800350e:	685b      	ldreq	r3, [r3, #4]
 8003510:	1809      	addeq	r1, r1, r0
 8003512:	6021      	streq	r1, [r4, #0]
 8003514:	e7ed      	b.n	80034f2 <_free_r+0x1e>
 8003516:	461a      	mov	r2, r3
 8003518:	685b      	ldr	r3, [r3, #4]
 800351a:	b10b      	cbz	r3, 8003520 <_free_r+0x4c>
 800351c:	42a3      	cmp	r3, r4
 800351e:	d9fa      	bls.n	8003516 <_free_r+0x42>
 8003520:	6811      	ldr	r1, [r2, #0]
 8003522:	1850      	adds	r0, r2, r1
 8003524:	42a0      	cmp	r0, r4
 8003526:	d10b      	bne.n	8003540 <_free_r+0x6c>
 8003528:	6820      	ldr	r0, [r4, #0]
 800352a:	4401      	add	r1, r0
 800352c:	1850      	adds	r0, r2, r1
 800352e:	4283      	cmp	r3, r0
 8003530:	6011      	str	r1, [r2, #0]
 8003532:	d1e0      	bne.n	80034f6 <_free_r+0x22>
 8003534:	6818      	ldr	r0, [r3, #0]
 8003536:	685b      	ldr	r3, [r3, #4]
 8003538:	6053      	str	r3, [r2, #4]
 800353a:	4408      	add	r0, r1
 800353c:	6010      	str	r0, [r2, #0]
 800353e:	e7da      	b.n	80034f6 <_free_r+0x22>
 8003540:	d902      	bls.n	8003548 <_free_r+0x74>
 8003542:	230c      	movs	r3, #12
 8003544:	602b      	str	r3, [r5, #0]
 8003546:	e7d6      	b.n	80034f6 <_free_r+0x22>
 8003548:	6820      	ldr	r0, [r4, #0]
 800354a:	1821      	adds	r1, r4, r0
 800354c:	428b      	cmp	r3, r1
 800354e:	bf04      	itt	eq
 8003550:	6819      	ldreq	r1, [r3, #0]
 8003552:	685b      	ldreq	r3, [r3, #4]
 8003554:	6063      	str	r3, [r4, #4]
 8003556:	bf04      	itt	eq
 8003558:	1809      	addeq	r1, r1, r0
 800355a:	6021      	streq	r1, [r4, #0]
 800355c:	6054      	str	r4, [r2, #4]
 800355e:	e7ca      	b.n	80034f6 <_free_r+0x22>
 8003560:	bd38      	pop	{r3, r4, r5, pc}
 8003562:	bf00      	nop
 8003564:	20000264 	.word	0x20000264

08003568 <sbrk_aligned>:
 8003568:	b570      	push	{r4, r5, r6, lr}
 800356a:	4e0f      	ldr	r6, [pc, #60]	@ (80035a8 <sbrk_aligned+0x40>)
 800356c:	460c      	mov	r4, r1
 800356e:	6831      	ldr	r1, [r6, #0]
 8003570:	4605      	mov	r5, r0
 8003572:	b911      	cbnz	r1, 800357a <sbrk_aligned+0x12>
 8003574:	f000 fba6 	bl	8003cc4 <_sbrk_r>
 8003578:	6030      	str	r0, [r6, #0]
 800357a:	4621      	mov	r1, r4
 800357c:	4628      	mov	r0, r5
 800357e:	f000 fba1 	bl	8003cc4 <_sbrk_r>
 8003582:	1c43      	adds	r3, r0, #1
 8003584:	d103      	bne.n	800358e <sbrk_aligned+0x26>
 8003586:	f04f 34ff 	mov.w	r4, #4294967295
 800358a:	4620      	mov	r0, r4
 800358c:	bd70      	pop	{r4, r5, r6, pc}
 800358e:	1cc4      	adds	r4, r0, #3
 8003590:	f024 0403 	bic.w	r4, r4, #3
 8003594:	42a0      	cmp	r0, r4
 8003596:	d0f8      	beq.n	800358a <sbrk_aligned+0x22>
 8003598:	1a21      	subs	r1, r4, r0
 800359a:	4628      	mov	r0, r5
 800359c:	f000 fb92 	bl	8003cc4 <_sbrk_r>
 80035a0:	3001      	adds	r0, #1
 80035a2:	d1f2      	bne.n	800358a <sbrk_aligned+0x22>
 80035a4:	e7ef      	b.n	8003586 <sbrk_aligned+0x1e>
 80035a6:	bf00      	nop
 80035a8:	20000260 	.word	0x20000260

080035ac <_malloc_r>:
 80035ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80035b0:	1ccd      	adds	r5, r1, #3
 80035b2:	f025 0503 	bic.w	r5, r5, #3
 80035b6:	3508      	adds	r5, #8
 80035b8:	2d0c      	cmp	r5, #12
 80035ba:	bf38      	it	cc
 80035bc:	250c      	movcc	r5, #12
 80035be:	2d00      	cmp	r5, #0
 80035c0:	4606      	mov	r6, r0
 80035c2:	db01      	blt.n	80035c8 <_malloc_r+0x1c>
 80035c4:	42a9      	cmp	r1, r5
 80035c6:	d904      	bls.n	80035d2 <_malloc_r+0x26>
 80035c8:	230c      	movs	r3, #12
 80035ca:	6033      	str	r3, [r6, #0]
 80035cc:	2000      	movs	r0, #0
 80035ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80035d2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80036a8 <_malloc_r+0xfc>
 80035d6:	f000 f869 	bl	80036ac <__malloc_lock>
 80035da:	f8d8 3000 	ldr.w	r3, [r8]
 80035de:	461c      	mov	r4, r3
 80035e0:	bb44      	cbnz	r4, 8003634 <_malloc_r+0x88>
 80035e2:	4629      	mov	r1, r5
 80035e4:	4630      	mov	r0, r6
 80035e6:	f7ff ffbf 	bl	8003568 <sbrk_aligned>
 80035ea:	1c43      	adds	r3, r0, #1
 80035ec:	4604      	mov	r4, r0
 80035ee:	d158      	bne.n	80036a2 <_malloc_r+0xf6>
 80035f0:	f8d8 4000 	ldr.w	r4, [r8]
 80035f4:	4627      	mov	r7, r4
 80035f6:	2f00      	cmp	r7, #0
 80035f8:	d143      	bne.n	8003682 <_malloc_r+0xd6>
 80035fa:	2c00      	cmp	r4, #0
 80035fc:	d04b      	beq.n	8003696 <_malloc_r+0xea>
 80035fe:	6823      	ldr	r3, [r4, #0]
 8003600:	4639      	mov	r1, r7
 8003602:	4630      	mov	r0, r6
 8003604:	eb04 0903 	add.w	r9, r4, r3
 8003608:	f000 fb5c 	bl	8003cc4 <_sbrk_r>
 800360c:	4581      	cmp	r9, r0
 800360e:	d142      	bne.n	8003696 <_malloc_r+0xea>
 8003610:	6821      	ldr	r1, [r4, #0]
 8003612:	1a6d      	subs	r5, r5, r1
 8003614:	4629      	mov	r1, r5
 8003616:	4630      	mov	r0, r6
 8003618:	f7ff ffa6 	bl	8003568 <sbrk_aligned>
 800361c:	3001      	adds	r0, #1
 800361e:	d03a      	beq.n	8003696 <_malloc_r+0xea>
 8003620:	6823      	ldr	r3, [r4, #0]
 8003622:	442b      	add	r3, r5
 8003624:	6023      	str	r3, [r4, #0]
 8003626:	f8d8 3000 	ldr.w	r3, [r8]
 800362a:	685a      	ldr	r2, [r3, #4]
 800362c:	bb62      	cbnz	r2, 8003688 <_malloc_r+0xdc>
 800362e:	f8c8 7000 	str.w	r7, [r8]
 8003632:	e00f      	b.n	8003654 <_malloc_r+0xa8>
 8003634:	6822      	ldr	r2, [r4, #0]
 8003636:	1b52      	subs	r2, r2, r5
 8003638:	d420      	bmi.n	800367c <_malloc_r+0xd0>
 800363a:	2a0b      	cmp	r2, #11
 800363c:	d917      	bls.n	800366e <_malloc_r+0xc2>
 800363e:	1961      	adds	r1, r4, r5
 8003640:	42a3      	cmp	r3, r4
 8003642:	6025      	str	r5, [r4, #0]
 8003644:	bf18      	it	ne
 8003646:	6059      	strne	r1, [r3, #4]
 8003648:	6863      	ldr	r3, [r4, #4]
 800364a:	bf08      	it	eq
 800364c:	f8c8 1000 	streq.w	r1, [r8]
 8003650:	5162      	str	r2, [r4, r5]
 8003652:	604b      	str	r3, [r1, #4]
 8003654:	4630      	mov	r0, r6
 8003656:	f000 f82f 	bl	80036b8 <__malloc_unlock>
 800365a:	f104 000b 	add.w	r0, r4, #11
 800365e:	1d23      	adds	r3, r4, #4
 8003660:	f020 0007 	bic.w	r0, r0, #7
 8003664:	1ac2      	subs	r2, r0, r3
 8003666:	bf1c      	itt	ne
 8003668:	1a1b      	subne	r3, r3, r0
 800366a:	50a3      	strne	r3, [r4, r2]
 800366c:	e7af      	b.n	80035ce <_malloc_r+0x22>
 800366e:	6862      	ldr	r2, [r4, #4]
 8003670:	42a3      	cmp	r3, r4
 8003672:	bf0c      	ite	eq
 8003674:	f8c8 2000 	streq.w	r2, [r8]
 8003678:	605a      	strne	r2, [r3, #4]
 800367a:	e7eb      	b.n	8003654 <_malloc_r+0xa8>
 800367c:	4623      	mov	r3, r4
 800367e:	6864      	ldr	r4, [r4, #4]
 8003680:	e7ae      	b.n	80035e0 <_malloc_r+0x34>
 8003682:	463c      	mov	r4, r7
 8003684:	687f      	ldr	r7, [r7, #4]
 8003686:	e7b6      	b.n	80035f6 <_malloc_r+0x4a>
 8003688:	461a      	mov	r2, r3
 800368a:	685b      	ldr	r3, [r3, #4]
 800368c:	42a3      	cmp	r3, r4
 800368e:	d1fb      	bne.n	8003688 <_malloc_r+0xdc>
 8003690:	2300      	movs	r3, #0
 8003692:	6053      	str	r3, [r2, #4]
 8003694:	e7de      	b.n	8003654 <_malloc_r+0xa8>
 8003696:	230c      	movs	r3, #12
 8003698:	6033      	str	r3, [r6, #0]
 800369a:	4630      	mov	r0, r6
 800369c:	f000 f80c 	bl	80036b8 <__malloc_unlock>
 80036a0:	e794      	b.n	80035cc <_malloc_r+0x20>
 80036a2:	6005      	str	r5, [r0, #0]
 80036a4:	e7d6      	b.n	8003654 <_malloc_r+0xa8>
 80036a6:	bf00      	nop
 80036a8:	20000264 	.word	0x20000264

080036ac <__malloc_lock>:
 80036ac:	4801      	ldr	r0, [pc, #4]	@ (80036b4 <__malloc_lock+0x8>)
 80036ae:	f7ff bf0f 	b.w	80034d0 <__retarget_lock_acquire_recursive>
 80036b2:	bf00      	nop
 80036b4:	2000025c 	.word	0x2000025c

080036b8 <__malloc_unlock>:
 80036b8:	4801      	ldr	r0, [pc, #4]	@ (80036c0 <__malloc_unlock+0x8>)
 80036ba:	f7ff bf0a 	b.w	80034d2 <__retarget_lock_release_recursive>
 80036be:	bf00      	nop
 80036c0:	2000025c 	.word	0x2000025c

080036c4 <__ssputs_r>:
 80036c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80036c8:	688e      	ldr	r6, [r1, #8]
 80036ca:	461f      	mov	r7, r3
 80036cc:	42be      	cmp	r6, r7
 80036ce:	680b      	ldr	r3, [r1, #0]
 80036d0:	4682      	mov	sl, r0
 80036d2:	460c      	mov	r4, r1
 80036d4:	4690      	mov	r8, r2
 80036d6:	d82d      	bhi.n	8003734 <__ssputs_r+0x70>
 80036d8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80036dc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80036e0:	d026      	beq.n	8003730 <__ssputs_r+0x6c>
 80036e2:	6965      	ldr	r5, [r4, #20]
 80036e4:	6909      	ldr	r1, [r1, #16]
 80036e6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80036ea:	eba3 0901 	sub.w	r9, r3, r1
 80036ee:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80036f2:	1c7b      	adds	r3, r7, #1
 80036f4:	444b      	add	r3, r9
 80036f6:	106d      	asrs	r5, r5, #1
 80036f8:	429d      	cmp	r5, r3
 80036fa:	bf38      	it	cc
 80036fc:	461d      	movcc	r5, r3
 80036fe:	0553      	lsls	r3, r2, #21
 8003700:	d527      	bpl.n	8003752 <__ssputs_r+0x8e>
 8003702:	4629      	mov	r1, r5
 8003704:	f7ff ff52 	bl	80035ac <_malloc_r>
 8003708:	4606      	mov	r6, r0
 800370a:	b360      	cbz	r0, 8003766 <__ssputs_r+0xa2>
 800370c:	6921      	ldr	r1, [r4, #16]
 800370e:	464a      	mov	r2, r9
 8003710:	f000 fae8 	bl	8003ce4 <memcpy>
 8003714:	89a3      	ldrh	r3, [r4, #12]
 8003716:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800371a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800371e:	81a3      	strh	r3, [r4, #12]
 8003720:	6126      	str	r6, [r4, #16]
 8003722:	6165      	str	r5, [r4, #20]
 8003724:	444e      	add	r6, r9
 8003726:	eba5 0509 	sub.w	r5, r5, r9
 800372a:	6026      	str	r6, [r4, #0]
 800372c:	60a5      	str	r5, [r4, #8]
 800372e:	463e      	mov	r6, r7
 8003730:	42be      	cmp	r6, r7
 8003732:	d900      	bls.n	8003736 <__ssputs_r+0x72>
 8003734:	463e      	mov	r6, r7
 8003736:	6820      	ldr	r0, [r4, #0]
 8003738:	4632      	mov	r2, r6
 800373a:	4641      	mov	r1, r8
 800373c:	f000 faa8 	bl	8003c90 <memmove>
 8003740:	68a3      	ldr	r3, [r4, #8]
 8003742:	1b9b      	subs	r3, r3, r6
 8003744:	60a3      	str	r3, [r4, #8]
 8003746:	6823      	ldr	r3, [r4, #0]
 8003748:	4433      	add	r3, r6
 800374a:	6023      	str	r3, [r4, #0]
 800374c:	2000      	movs	r0, #0
 800374e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003752:	462a      	mov	r2, r5
 8003754:	f000 fad4 	bl	8003d00 <_realloc_r>
 8003758:	4606      	mov	r6, r0
 800375a:	2800      	cmp	r0, #0
 800375c:	d1e0      	bne.n	8003720 <__ssputs_r+0x5c>
 800375e:	6921      	ldr	r1, [r4, #16]
 8003760:	4650      	mov	r0, sl
 8003762:	f7ff feb7 	bl	80034d4 <_free_r>
 8003766:	230c      	movs	r3, #12
 8003768:	f8ca 3000 	str.w	r3, [sl]
 800376c:	89a3      	ldrh	r3, [r4, #12]
 800376e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003772:	81a3      	strh	r3, [r4, #12]
 8003774:	f04f 30ff 	mov.w	r0, #4294967295
 8003778:	e7e9      	b.n	800374e <__ssputs_r+0x8a>
	...

0800377c <_svfiprintf_r>:
 800377c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003780:	4698      	mov	r8, r3
 8003782:	898b      	ldrh	r3, [r1, #12]
 8003784:	061b      	lsls	r3, r3, #24
 8003786:	b09d      	sub	sp, #116	@ 0x74
 8003788:	4607      	mov	r7, r0
 800378a:	460d      	mov	r5, r1
 800378c:	4614      	mov	r4, r2
 800378e:	d510      	bpl.n	80037b2 <_svfiprintf_r+0x36>
 8003790:	690b      	ldr	r3, [r1, #16]
 8003792:	b973      	cbnz	r3, 80037b2 <_svfiprintf_r+0x36>
 8003794:	2140      	movs	r1, #64	@ 0x40
 8003796:	f7ff ff09 	bl	80035ac <_malloc_r>
 800379a:	6028      	str	r0, [r5, #0]
 800379c:	6128      	str	r0, [r5, #16]
 800379e:	b930      	cbnz	r0, 80037ae <_svfiprintf_r+0x32>
 80037a0:	230c      	movs	r3, #12
 80037a2:	603b      	str	r3, [r7, #0]
 80037a4:	f04f 30ff 	mov.w	r0, #4294967295
 80037a8:	b01d      	add	sp, #116	@ 0x74
 80037aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80037ae:	2340      	movs	r3, #64	@ 0x40
 80037b0:	616b      	str	r3, [r5, #20]
 80037b2:	2300      	movs	r3, #0
 80037b4:	9309      	str	r3, [sp, #36]	@ 0x24
 80037b6:	2320      	movs	r3, #32
 80037b8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80037bc:	f8cd 800c 	str.w	r8, [sp, #12]
 80037c0:	2330      	movs	r3, #48	@ 0x30
 80037c2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8003960 <_svfiprintf_r+0x1e4>
 80037c6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80037ca:	f04f 0901 	mov.w	r9, #1
 80037ce:	4623      	mov	r3, r4
 80037d0:	469a      	mov	sl, r3
 80037d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80037d6:	b10a      	cbz	r2, 80037dc <_svfiprintf_r+0x60>
 80037d8:	2a25      	cmp	r2, #37	@ 0x25
 80037da:	d1f9      	bne.n	80037d0 <_svfiprintf_r+0x54>
 80037dc:	ebba 0b04 	subs.w	fp, sl, r4
 80037e0:	d00b      	beq.n	80037fa <_svfiprintf_r+0x7e>
 80037e2:	465b      	mov	r3, fp
 80037e4:	4622      	mov	r2, r4
 80037e6:	4629      	mov	r1, r5
 80037e8:	4638      	mov	r0, r7
 80037ea:	f7ff ff6b 	bl	80036c4 <__ssputs_r>
 80037ee:	3001      	adds	r0, #1
 80037f0:	f000 80a7 	beq.w	8003942 <_svfiprintf_r+0x1c6>
 80037f4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80037f6:	445a      	add	r2, fp
 80037f8:	9209      	str	r2, [sp, #36]	@ 0x24
 80037fa:	f89a 3000 	ldrb.w	r3, [sl]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	f000 809f 	beq.w	8003942 <_svfiprintf_r+0x1c6>
 8003804:	2300      	movs	r3, #0
 8003806:	f04f 32ff 	mov.w	r2, #4294967295
 800380a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800380e:	f10a 0a01 	add.w	sl, sl, #1
 8003812:	9304      	str	r3, [sp, #16]
 8003814:	9307      	str	r3, [sp, #28]
 8003816:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800381a:	931a      	str	r3, [sp, #104]	@ 0x68
 800381c:	4654      	mov	r4, sl
 800381e:	2205      	movs	r2, #5
 8003820:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003824:	484e      	ldr	r0, [pc, #312]	@ (8003960 <_svfiprintf_r+0x1e4>)
 8003826:	f7fc fceb 	bl	8000200 <memchr>
 800382a:	9a04      	ldr	r2, [sp, #16]
 800382c:	b9d8      	cbnz	r0, 8003866 <_svfiprintf_r+0xea>
 800382e:	06d0      	lsls	r0, r2, #27
 8003830:	bf44      	itt	mi
 8003832:	2320      	movmi	r3, #32
 8003834:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003838:	0711      	lsls	r1, r2, #28
 800383a:	bf44      	itt	mi
 800383c:	232b      	movmi	r3, #43	@ 0x2b
 800383e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003842:	f89a 3000 	ldrb.w	r3, [sl]
 8003846:	2b2a      	cmp	r3, #42	@ 0x2a
 8003848:	d015      	beq.n	8003876 <_svfiprintf_r+0xfa>
 800384a:	9a07      	ldr	r2, [sp, #28]
 800384c:	4654      	mov	r4, sl
 800384e:	2000      	movs	r0, #0
 8003850:	f04f 0c0a 	mov.w	ip, #10
 8003854:	4621      	mov	r1, r4
 8003856:	f811 3b01 	ldrb.w	r3, [r1], #1
 800385a:	3b30      	subs	r3, #48	@ 0x30
 800385c:	2b09      	cmp	r3, #9
 800385e:	d94b      	bls.n	80038f8 <_svfiprintf_r+0x17c>
 8003860:	b1b0      	cbz	r0, 8003890 <_svfiprintf_r+0x114>
 8003862:	9207      	str	r2, [sp, #28]
 8003864:	e014      	b.n	8003890 <_svfiprintf_r+0x114>
 8003866:	eba0 0308 	sub.w	r3, r0, r8
 800386a:	fa09 f303 	lsl.w	r3, r9, r3
 800386e:	4313      	orrs	r3, r2
 8003870:	9304      	str	r3, [sp, #16]
 8003872:	46a2      	mov	sl, r4
 8003874:	e7d2      	b.n	800381c <_svfiprintf_r+0xa0>
 8003876:	9b03      	ldr	r3, [sp, #12]
 8003878:	1d19      	adds	r1, r3, #4
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	9103      	str	r1, [sp, #12]
 800387e:	2b00      	cmp	r3, #0
 8003880:	bfbb      	ittet	lt
 8003882:	425b      	neglt	r3, r3
 8003884:	f042 0202 	orrlt.w	r2, r2, #2
 8003888:	9307      	strge	r3, [sp, #28]
 800388a:	9307      	strlt	r3, [sp, #28]
 800388c:	bfb8      	it	lt
 800388e:	9204      	strlt	r2, [sp, #16]
 8003890:	7823      	ldrb	r3, [r4, #0]
 8003892:	2b2e      	cmp	r3, #46	@ 0x2e
 8003894:	d10a      	bne.n	80038ac <_svfiprintf_r+0x130>
 8003896:	7863      	ldrb	r3, [r4, #1]
 8003898:	2b2a      	cmp	r3, #42	@ 0x2a
 800389a:	d132      	bne.n	8003902 <_svfiprintf_r+0x186>
 800389c:	9b03      	ldr	r3, [sp, #12]
 800389e:	1d1a      	adds	r2, r3, #4
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	9203      	str	r2, [sp, #12]
 80038a4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80038a8:	3402      	adds	r4, #2
 80038aa:	9305      	str	r3, [sp, #20]
 80038ac:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8003970 <_svfiprintf_r+0x1f4>
 80038b0:	7821      	ldrb	r1, [r4, #0]
 80038b2:	2203      	movs	r2, #3
 80038b4:	4650      	mov	r0, sl
 80038b6:	f7fc fca3 	bl	8000200 <memchr>
 80038ba:	b138      	cbz	r0, 80038cc <_svfiprintf_r+0x150>
 80038bc:	9b04      	ldr	r3, [sp, #16]
 80038be:	eba0 000a 	sub.w	r0, r0, sl
 80038c2:	2240      	movs	r2, #64	@ 0x40
 80038c4:	4082      	lsls	r2, r0
 80038c6:	4313      	orrs	r3, r2
 80038c8:	3401      	adds	r4, #1
 80038ca:	9304      	str	r3, [sp, #16]
 80038cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80038d0:	4824      	ldr	r0, [pc, #144]	@ (8003964 <_svfiprintf_r+0x1e8>)
 80038d2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80038d6:	2206      	movs	r2, #6
 80038d8:	f7fc fc92 	bl	8000200 <memchr>
 80038dc:	2800      	cmp	r0, #0
 80038de:	d036      	beq.n	800394e <_svfiprintf_r+0x1d2>
 80038e0:	4b21      	ldr	r3, [pc, #132]	@ (8003968 <_svfiprintf_r+0x1ec>)
 80038e2:	bb1b      	cbnz	r3, 800392c <_svfiprintf_r+0x1b0>
 80038e4:	9b03      	ldr	r3, [sp, #12]
 80038e6:	3307      	adds	r3, #7
 80038e8:	f023 0307 	bic.w	r3, r3, #7
 80038ec:	3308      	adds	r3, #8
 80038ee:	9303      	str	r3, [sp, #12]
 80038f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80038f2:	4433      	add	r3, r6
 80038f4:	9309      	str	r3, [sp, #36]	@ 0x24
 80038f6:	e76a      	b.n	80037ce <_svfiprintf_r+0x52>
 80038f8:	fb0c 3202 	mla	r2, ip, r2, r3
 80038fc:	460c      	mov	r4, r1
 80038fe:	2001      	movs	r0, #1
 8003900:	e7a8      	b.n	8003854 <_svfiprintf_r+0xd8>
 8003902:	2300      	movs	r3, #0
 8003904:	3401      	adds	r4, #1
 8003906:	9305      	str	r3, [sp, #20]
 8003908:	4619      	mov	r1, r3
 800390a:	f04f 0c0a 	mov.w	ip, #10
 800390e:	4620      	mov	r0, r4
 8003910:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003914:	3a30      	subs	r2, #48	@ 0x30
 8003916:	2a09      	cmp	r2, #9
 8003918:	d903      	bls.n	8003922 <_svfiprintf_r+0x1a6>
 800391a:	2b00      	cmp	r3, #0
 800391c:	d0c6      	beq.n	80038ac <_svfiprintf_r+0x130>
 800391e:	9105      	str	r1, [sp, #20]
 8003920:	e7c4      	b.n	80038ac <_svfiprintf_r+0x130>
 8003922:	fb0c 2101 	mla	r1, ip, r1, r2
 8003926:	4604      	mov	r4, r0
 8003928:	2301      	movs	r3, #1
 800392a:	e7f0      	b.n	800390e <_svfiprintf_r+0x192>
 800392c:	ab03      	add	r3, sp, #12
 800392e:	9300      	str	r3, [sp, #0]
 8003930:	462a      	mov	r2, r5
 8003932:	4b0e      	ldr	r3, [pc, #56]	@ (800396c <_svfiprintf_r+0x1f0>)
 8003934:	a904      	add	r1, sp, #16
 8003936:	4638      	mov	r0, r7
 8003938:	f3af 8000 	nop.w
 800393c:	1c42      	adds	r2, r0, #1
 800393e:	4606      	mov	r6, r0
 8003940:	d1d6      	bne.n	80038f0 <_svfiprintf_r+0x174>
 8003942:	89ab      	ldrh	r3, [r5, #12]
 8003944:	065b      	lsls	r3, r3, #25
 8003946:	f53f af2d 	bmi.w	80037a4 <_svfiprintf_r+0x28>
 800394a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800394c:	e72c      	b.n	80037a8 <_svfiprintf_r+0x2c>
 800394e:	ab03      	add	r3, sp, #12
 8003950:	9300      	str	r3, [sp, #0]
 8003952:	462a      	mov	r2, r5
 8003954:	4b05      	ldr	r3, [pc, #20]	@ (800396c <_svfiprintf_r+0x1f0>)
 8003956:	a904      	add	r1, sp, #16
 8003958:	4638      	mov	r0, r7
 800395a:	f000 f879 	bl	8003a50 <_printf_i>
 800395e:	e7ed      	b.n	800393c <_svfiprintf_r+0x1c0>
 8003960:	08003e1c 	.word	0x08003e1c
 8003964:	08003e26 	.word	0x08003e26
 8003968:	00000000 	.word	0x00000000
 800396c:	080036c5 	.word	0x080036c5
 8003970:	08003e22 	.word	0x08003e22

08003974 <_printf_common>:
 8003974:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003978:	4616      	mov	r6, r2
 800397a:	4698      	mov	r8, r3
 800397c:	688a      	ldr	r2, [r1, #8]
 800397e:	690b      	ldr	r3, [r1, #16]
 8003980:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003984:	4293      	cmp	r3, r2
 8003986:	bfb8      	it	lt
 8003988:	4613      	movlt	r3, r2
 800398a:	6033      	str	r3, [r6, #0]
 800398c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003990:	4607      	mov	r7, r0
 8003992:	460c      	mov	r4, r1
 8003994:	b10a      	cbz	r2, 800399a <_printf_common+0x26>
 8003996:	3301      	adds	r3, #1
 8003998:	6033      	str	r3, [r6, #0]
 800399a:	6823      	ldr	r3, [r4, #0]
 800399c:	0699      	lsls	r1, r3, #26
 800399e:	bf42      	ittt	mi
 80039a0:	6833      	ldrmi	r3, [r6, #0]
 80039a2:	3302      	addmi	r3, #2
 80039a4:	6033      	strmi	r3, [r6, #0]
 80039a6:	6825      	ldr	r5, [r4, #0]
 80039a8:	f015 0506 	ands.w	r5, r5, #6
 80039ac:	d106      	bne.n	80039bc <_printf_common+0x48>
 80039ae:	f104 0a19 	add.w	sl, r4, #25
 80039b2:	68e3      	ldr	r3, [r4, #12]
 80039b4:	6832      	ldr	r2, [r6, #0]
 80039b6:	1a9b      	subs	r3, r3, r2
 80039b8:	42ab      	cmp	r3, r5
 80039ba:	dc26      	bgt.n	8003a0a <_printf_common+0x96>
 80039bc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80039c0:	6822      	ldr	r2, [r4, #0]
 80039c2:	3b00      	subs	r3, #0
 80039c4:	bf18      	it	ne
 80039c6:	2301      	movne	r3, #1
 80039c8:	0692      	lsls	r2, r2, #26
 80039ca:	d42b      	bmi.n	8003a24 <_printf_common+0xb0>
 80039cc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80039d0:	4641      	mov	r1, r8
 80039d2:	4638      	mov	r0, r7
 80039d4:	47c8      	blx	r9
 80039d6:	3001      	adds	r0, #1
 80039d8:	d01e      	beq.n	8003a18 <_printf_common+0xa4>
 80039da:	6823      	ldr	r3, [r4, #0]
 80039dc:	6922      	ldr	r2, [r4, #16]
 80039de:	f003 0306 	and.w	r3, r3, #6
 80039e2:	2b04      	cmp	r3, #4
 80039e4:	bf02      	ittt	eq
 80039e6:	68e5      	ldreq	r5, [r4, #12]
 80039e8:	6833      	ldreq	r3, [r6, #0]
 80039ea:	1aed      	subeq	r5, r5, r3
 80039ec:	68a3      	ldr	r3, [r4, #8]
 80039ee:	bf0c      	ite	eq
 80039f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80039f4:	2500      	movne	r5, #0
 80039f6:	4293      	cmp	r3, r2
 80039f8:	bfc4      	itt	gt
 80039fa:	1a9b      	subgt	r3, r3, r2
 80039fc:	18ed      	addgt	r5, r5, r3
 80039fe:	2600      	movs	r6, #0
 8003a00:	341a      	adds	r4, #26
 8003a02:	42b5      	cmp	r5, r6
 8003a04:	d11a      	bne.n	8003a3c <_printf_common+0xc8>
 8003a06:	2000      	movs	r0, #0
 8003a08:	e008      	b.n	8003a1c <_printf_common+0xa8>
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	4652      	mov	r2, sl
 8003a0e:	4641      	mov	r1, r8
 8003a10:	4638      	mov	r0, r7
 8003a12:	47c8      	blx	r9
 8003a14:	3001      	adds	r0, #1
 8003a16:	d103      	bne.n	8003a20 <_printf_common+0xac>
 8003a18:	f04f 30ff 	mov.w	r0, #4294967295
 8003a1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a20:	3501      	adds	r5, #1
 8003a22:	e7c6      	b.n	80039b2 <_printf_common+0x3e>
 8003a24:	18e1      	adds	r1, r4, r3
 8003a26:	1c5a      	adds	r2, r3, #1
 8003a28:	2030      	movs	r0, #48	@ 0x30
 8003a2a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003a2e:	4422      	add	r2, r4
 8003a30:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003a34:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003a38:	3302      	adds	r3, #2
 8003a3a:	e7c7      	b.n	80039cc <_printf_common+0x58>
 8003a3c:	2301      	movs	r3, #1
 8003a3e:	4622      	mov	r2, r4
 8003a40:	4641      	mov	r1, r8
 8003a42:	4638      	mov	r0, r7
 8003a44:	47c8      	blx	r9
 8003a46:	3001      	adds	r0, #1
 8003a48:	d0e6      	beq.n	8003a18 <_printf_common+0xa4>
 8003a4a:	3601      	adds	r6, #1
 8003a4c:	e7d9      	b.n	8003a02 <_printf_common+0x8e>
	...

08003a50 <_printf_i>:
 8003a50:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003a54:	7e0f      	ldrb	r7, [r1, #24]
 8003a56:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003a58:	2f78      	cmp	r7, #120	@ 0x78
 8003a5a:	4691      	mov	r9, r2
 8003a5c:	4680      	mov	r8, r0
 8003a5e:	460c      	mov	r4, r1
 8003a60:	469a      	mov	sl, r3
 8003a62:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003a66:	d807      	bhi.n	8003a78 <_printf_i+0x28>
 8003a68:	2f62      	cmp	r7, #98	@ 0x62
 8003a6a:	d80a      	bhi.n	8003a82 <_printf_i+0x32>
 8003a6c:	2f00      	cmp	r7, #0
 8003a6e:	f000 80d2 	beq.w	8003c16 <_printf_i+0x1c6>
 8003a72:	2f58      	cmp	r7, #88	@ 0x58
 8003a74:	f000 80b9 	beq.w	8003bea <_printf_i+0x19a>
 8003a78:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003a7c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003a80:	e03a      	b.n	8003af8 <_printf_i+0xa8>
 8003a82:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003a86:	2b15      	cmp	r3, #21
 8003a88:	d8f6      	bhi.n	8003a78 <_printf_i+0x28>
 8003a8a:	a101      	add	r1, pc, #4	@ (adr r1, 8003a90 <_printf_i+0x40>)
 8003a8c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003a90:	08003ae9 	.word	0x08003ae9
 8003a94:	08003afd 	.word	0x08003afd
 8003a98:	08003a79 	.word	0x08003a79
 8003a9c:	08003a79 	.word	0x08003a79
 8003aa0:	08003a79 	.word	0x08003a79
 8003aa4:	08003a79 	.word	0x08003a79
 8003aa8:	08003afd 	.word	0x08003afd
 8003aac:	08003a79 	.word	0x08003a79
 8003ab0:	08003a79 	.word	0x08003a79
 8003ab4:	08003a79 	.word	0x08003a79
 8003ab8:	08003a79 	.word	0x08003a79
 8003abc:	08003bfd 	.word	0x08003bfd
 8003ac0:	08003b27 	.word	0x08003b27
 8003ac4:	08003bb7 	.word	0x08003bb7
 8003ac8:	08003a79 	.word	0x08003a79
 8003acc:	08003a79 	.word	0x08003a79
 8003ad0:	08003c1f 	.word	0x08003c1f
 8003ad4:	08003a79 	.word	0x08003a79
 8003ad8:	08003b27 	.word	0x08003b27
 8003adc:	08003a79 	.word	0x08003a79
 8003ae0:	08003a79 	.word	0x08003a79
 8003ae4:	08003bbf 	.word	0x08003bbf
 8003ae8:	6833      	ldr	r3, [r6, #0]
 8003aea:	1d1a      	adds	r2, r3, #4
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	6032      	str	r2, [r6, #0]
 8003af0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003af4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003af8:	2301      	movs	r3, #1
 8003afa:	e09d      	b.n	8003c38 <_printf_i+0x1e8>
 8003afc:	6833      	ldr	r3, [r6, #0]
 8003afe:	6820      	ldr	r0, [r4, #0]
 8003b00:	1d19      	adds	r1, r3, #4
 8003b02:	6031      	str	r1, [r6, #0]
 8003b04:	0606      	lsls	r6, r0, #24
 8003b06:	d501      	bpl.n	8003b0c <_printf_i+0xbc>
 8003b08:	681d      	ldr	r5, [r3, #0]
 8003b0a:	e003      	b.n	8003b14 <_printf_i+0xc4>
 8003b0c:	0645      	lsls	r5, r0, #25
 8003b0e:	d5fb      	bpl.n	8003b08 <_printf_i+0xb8>
 8003b10:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003b14:	2d00      	cmp	r5, #0
 8003b16:	da03      	bge.n	8003b20 <_printf_i+0xd0>
 8003b18:	232d      	movs	r3, #45	@ 0x2d
 8003b1a:	426d      	negs	r5, r5
 8003b1c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003b20:	4859      	ldr	r0, [pc, #356]	@ (8003c88 <_printf_i+0x238>)
 8003b22:	230a      	movs	r3, #10
 8003b24:	e011      	b.n	8003b4a <_printf_i+0xfa>
 8003b26:	6821      	ldr	r1, [r4, #0]
 8003b28:	6833      	ldr	r3, [r6, #0]
 8003b2a:	0608      	lsls	r0, r1, #24
 8003b2c:	f853 5b04 	ldr.w	r5, [r3], #4
 8003b30:	d402      	bmi.n	8003b38 <_printf_i+0xe8>
 8003b32:	0649      	lsls	r1, r1, #25
 8003b34:	bf48      	it	mi
 8003b36:	b2ad      	uxthmi	r5, r5
 8003b38:	2f6f      	cmp	r7, #111	@ 0x6f
 8003b3a:	4853      	ldr	r0, [pc, #332]	@ (8003c88 <_printf_i+0x238>)
 8003b3c:	6033      	str	r3, [r6, #0]
 8003b3e:	bf14      	ite	ne
 8003b40:	230a      	movne	r3, #10
 8003b42:	2308      	moveq	r3, #8
 8003b44:	2100      	movs	r1, #0
 8003b46:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003b4a:	6866      	ldr	r6, [r4, #4]
 8003b4c:	60a6      	str	r6, [r4, #8]
 8003b4e:	2e00      	cmp	r6, #0
 8003b50:	bfa2      	ittt	ge
 8003b52:	6821      	ldrge	r1, [r4, #0]
 8003b54:	f021 0104 	bicge.w	r1, r1, #4
 8003b58:	6021      	strge	r1, [r4, #0]
 8003b5a:	b90d      	cbnz	r5, 8003b60 <_printf_i+0x110>
 8003b5c:	2e00      	cmp	r6, #0
 8003b5e:	d04b      	beq.n	8003bf8 <_printf_i+0x1a8>
 8003b60:	4616      	mov	r6, r2
 8003b62:	fbb5 f1f3 	udiv	r1, r5, r3
 8003b66:	fb03 5711 	mls	r7, r3, r1, r5
 8003b6a:	5dc7      	ldrb	r7, [r0, r7]
 8003b6c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003b70:	462f      	mov	r7, r5
 8003b72:	42bb      	cmp	r3, r7
 8003b74:	460d      	mov	r5, r1
 8003b76:	d9f4      	bls.n	8003b62 <_printf_i+0x112>
 8003b78:	2b08      	cmp	r3, #8
 8003b7a:	d10b      	bne.n	8003b94 <_printf_i+0x144>
 8003b7c:	6823      	ldr	r3, [r4, #0]
 8003b7e:	07df      	lsls	r7, r3, #31
 8003b80:	d508      	bpl.n	8003b94 <_printf_i+0x144>
 8003b82:	6923      	ldr	r3, [r4, #16]
 8003b84:	6861      	ldr	r1, [r4, #4]
 8003b86:	4299      	cmp	r1, r3
 8003b88:	bfde      	ittt	le
 8003b8a:	2330      	movle	r3, #48	@ 0x30
 8003b8c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003b90:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003b94:	1b92      	subs	r2, r2, r6
 8003b96:	6122      	str	r2, [r4, #16]
 8003b98:	f8cd a000 	str.w	sl, [sp]
 8003b9c:	464b      	mov	r3, r9
 8003b9e:	aa03      	add	r2, sp, #12
 8003ba0:	4621      	mov	r1, r4
 8003ba2:	4640      	mov	r0, r8
 8003ba4:	f7ff fee6 	bl	8003974 <_printf_common>
 8003ba8:	3001      	adds	r0, #1
 8003baa:	d14a      	bne.n	8003c42 <_printf_i+0x1f2>
 8003bac:	f04f 30ff 	mov.w	r0, #4294967295
 8003bb0:	b004      	add	sp, #16
 8003bb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003bb6:	6823      	ldr	r3, [r4, #0]
 8003bb8:	f043 0320 	orr.w	r3, r3, #32
 8003bbc:	6023      	str	r3, [r4, #0]
 8003bbe:	4833      	ldr	r0, [pc, #204]	@ (8003c8c <_printf_i+0x23c>)
 8003bc0:	2778      	movs	r7, #120	@ 0x78
 8003bc2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003bc6:	6823      	ldr	r3, [r4, #0]
 8003bc8:	6831      	ldr	r1, [r6, #0]
 8003bca:	061f      	lsls	r7, r3, #24
 8003bcc:	f851 5b04 	ldr.w	r5, [r1], #4
 8003bd0:	d402      	bmi.n	8003bd8 <_printf_i+0x188>
 8003bd2:	065f      	lsls	r7, r3, #25
 8003bd4:	bf48      	it	mi
 8003bd6:	b2ad      	uxthmi	r5, r5
 8003bd8:	6031      	str	r1, [r6, #0]
 8003bda:	07d9      	lsls	r1, r3, #31
 8003bdc:	bf44      	itt	mi
 8003bde:	f043 0320 	orrmi.w	r3, r3, #32
 8003be2:	6023      	strmi	r3, [r4, #0]
 8003be4:	b11d      	cbz	r5, 8003bee <_printf_i+0x19e>
 8003be6:	2310      	movs	r3, #16
 8003be8:	e7ac      	b.n	8003b44 <_printf_i+0xf4>
 8003bea:	4827      	ldr	r0, [pc, #156]	@ (8003c88 <_printf_i+0x238>)
 8003bec:	e7e9      	b.n	8003bc2 <_printf_i+0x172>
 8003bee:	6823      	ldr	r3, [r4, #0]
 8003bf0:	f023 0320 	bic.w	r3, r3, #32
 8003bf4:	6023      	str	r3, [r4, #0]
 8003bf6:	e7f6      	b.n	8003be6 <_printf_i+0x196>
 8003bf8:	4616      	mov	r6, r2
 8003bfa:	e7bd      	b.n	8003b78 <_printf_i+0x128>
 8003bfc:	6833      	ldr	r3, [r6, #0]
 8003bfe:	6825      	ldr	r5, [r4, #0]
 8003c00:	6961      	ldr	r1, [r4, #20]
 8003c02:	1d18      	adds	r0, r3, #4
 8003c04:	6030      	str	r0, [r6, #0]
 8003c06:	062e      	lsls	r6, r5, #24
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	d501      	bpl.n	8003c10 <_printf_i+0x1c0>
 8003c0c:	6019      	str	r1, [r3, #0]
 8003c0e:	e002      	b.n	8003c16 <_printf_i+0x1c6>
 8003c10:	0668      	lsls	r0, r5, #25
 8003c12:	d5fb      	bpl.n	8003c0c <_printf_i+0x1bc>
 8003c14:	8019      	strh	r1, [r3, #0]
 8003c16:	2300      	movs	r3, #0
 8003c18:	6123      	str	r3, [r4, #16]
 8003c1a:	4616      	mov	r6, r2
 8003c1c:	e7bc      	b.n	8003b98 <_printf_i+0x148>
 8003c1e:	6833      	ldr	r3, [r6, #0]
 8003c20:	1d1a      	adds	r2, r3, #4
 8003c22:	6032      	str	r2, [r6, #0]
 8003c24:	681e      	ldr	r6, [r3, #0]
 8003c26:	6862      	ldr	r2, [r4, #4]
 8003c28:	2100      	movs	r1, #0
 8003c2a:	4630      	mov	r0, r6
 8003c2c:	f7fc fae8 	bl	8000200 <memchr>
 8003c30:	b108      	cbz	r0, 8003c36 <_printf_i+0x1e6>
 8003c32:	1b80      	subs	r0, r0, r6
 8003c34:	6060      	str	r0, [r4, #4]
 8003c36:	6863      	ldr	r3, [r4, #4]
 8003c38:	6123      	str	r3, [r4, #16]
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003c40:	e7aa      	b.n	8003b98 <_printf_i+0x148>
 8003c42:	6923      	ldr	r3, [r4, #16]
 8003c44:	4632      	mov	r2, r6
 8003c46:	4649      	mov	r1, r9
 8003c48:	4640      	mov	r0, r8
 8003c4a:	47d0      	blx	sl
 8003c4c:	3001      	adds	r0, #1
 8003c4e:	d0ad      	beq.n	8003bac <_printf_i+0x15c>
 8003c50:	6823      	ldr	r3, [r4, #0]
 8003c52:	079b      	lsls	r3, r3, #30
 8003c54:	d413      	bmi.n	8003c7e <_printf_i+0x22e>
 8003c56:	68e0      	ldr	r0, [r4, #12]
 8003c58:	9b03      	ldr	r3, [sp, #12]
 8003c5a:	4298      	cmp	r0, r3
 8003c5c:	bfb8      	it	lt
 8003c5e:	4618      	movlt	r0, r3
 8003c60:	e7a6      	b.n	8003bb0 <_printf_i+0x160>
 8003c62:	2301      	movs	r3, #1
 8003c64:	4632      	mov	r2, r6
 8003c66:	4649      	mov	r1, r9
 8003c68:	4640      	mov	r0, r8
 8003c6a:	47d0      	blx	sl
 8003c6c:	3001      	adds	r0, #1
 8003c6e:	d09d      	beq.n	8003bac <_printf_i+0x15c>
 8003c70:	3501      	adds	r5, #1
 8003c72:	68e3      	ldr	r3, [r4, #12]
 8003c74:	9903      	ldr	r1, [sp, #12]
 8003c76:	1a5b      	subs	r3, r3, r1
 8003c78:	42ab      	cmp	r3, r5
 8003c7a:	dcf2      	bgt.n	8003c62 <_printf_i+0x212>
 8003c7c:	e7eb      	b.n	8003c56 <_printf_i+0x206>
 8003c7e:	2500      	movs	r5, #0
 8003c80:	f104 0619 	add.w	r6, r4, #25
 8003c84:	e7f5      	b.n	8003c72 <_printf_i+0x222>
 8003c86:	bf00      	nop
 8003c88:	08003e2d 	.word	0x08003e2d
 8003c8c:	08003e3e 	.word	0x08003e3e

08003c90 <memmove>:
 8003c90:	4288      	cmp	r0, r1
 8003c92:	b510      	push	{r4, lr}
 8003c94:	eb01 0402 	add.w	r4, r1, r2
 8003c98:	d902      	bls.n	8003ca0 <memmove+0x10>
 8003c9a:	4284      	cmp	r4, r0
 8003c9c:	4623      	mov	r3, r4
 8003c9e:	d807      	bhi.n	8003cb0 <memmove+0x20>
 8003ca0:	1e43      	subs	r3, r0, #1
 8003ca2:	42a1      	cmp	r1, r4
 8003ca4:	d008      	beq.n	8003cb8 <memmove+0x28>
 8003ca6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003caa:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003cae:	e7f8      	b.n	8003ca2 <memmove+0x12>
 8003cb0:	4402      	add	r2, r0
 8003cb2:	4601      	mov	r1, r0
 8003cb4:	428a      	cmp	r2, r1
 8003cb6:	d100      	bne.n	8003cba <memmove+0x2a>
 8003cb8:	bd10      	pop	{r4, pc}
 8003cba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003cbe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003cc2:	e7f7      	b.n	8003cb4 <memmove+0x24>

08003cc4 <_sbrk_r>:
 8003cc4:	b538      	push	{r3, r4, r5, lr}
 8003cc6:	4d06      	ldr	r5, [pc, #24]	@ (8003ce0 <_sbrk_r+0x1c>)
 8003cc8:	2300      	movs	r3, #0
 8003cca:	4604      	mov	r4, r0
 8003ccc:	4608      	mov	r0, r1
 8003cce:	602b      	str	r3, [r5, #0]
 8003cd0:	f7fc fee2 	bl	8000a98 <_sbrk>
 8003cd4:	1c43      	adds	r3, r0, #1
 8003cd6:	d102      	bne.n	8003cde <_sbrk_r+0x1a>
 8003cd8:	682b      	ldr	r3, [r5, #0]
 8003cda:	b103      	cbz	r3, 8003cde <_sbrk_r+0x1a>
 8003cdc:	6023      	str	r3, [r4, #0]
 8003cde:	bd38      	pop	{r3, r4, r5, pc}
 8003ce0:	20000258 	.word	0x20000258

08003ce4 <memcpy>:
 8003ce4:	440a      	add	r2, r1
 8003ce6:	4291      	cmp	r1, r2
 8003ce8:	f100 33ff 	add.w	r3, r0, #4294967295
 8003cec:	d100      	bne.n	8003cf0 <memcpy+0xc>
 8003cee:	4770      	bx	lr
 8003cf0:	b510      	push	{r4, lr}
 8003cf2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003cf6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003cfa:	4291      	cmp	r1, r2
 8003cfc:	d1f9      	bne.n	8003cf2 <memcpy+0xe>
 8003cfe:	bd10      	pop	{r4, pc}

08003d00 <_realloc_r>:
 8003d00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003d04:	4680      	mov	r8, r0
 8003d06:	4615      	mov	r5, r2
 8003d08:	460c      	mov	r4, r1
 8003d0a:	b921      	cbnz	r1, 8003d16 <_realloc_r+0x16>
 8003d0c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003d10:	4611      	mov	r1, r2
 8003d12:	f7ff bc4b 	b.w	80035ac <_malloc_r>
 8003d16:	b92a      	cbnz	r2, 8003d24 <_realloc_r+0x24>
 8003d18:	f7ff fbdc 	bl	80034d4 <_free_r>
 8003d1c:	2400      	movs	r4, #0
 8003d1e:	4620      	mov	r0, r4
 8003d20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003d24:	f000 f81a 	bl	8003d5c <_malloc_usable_size_r>
 8003d28:	4285      	cmp	r5, r0
 8003d2a:	4606      	mov	r6, r0
 8003d2c:	d802      	bhi.n	8003d34 <_realloc_r+0x34>
 8003d2e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8003d32:	d8f4      	bhi.n	8003d1e <_realloc_r+0x1e>
 8003d34:	4629      	mov	r1, r5
 8003d36:	4640      	mov	r0, r8
 8003d38:	f7ff fc38 	bl	80035ac <_malloc_r>
 8003d3c:	4607      	mov	r7, r0
 8003d3e:	2800      	cmp	r0, #0
 8003d40:	d0ec      	beq.n	8003d1c <_realloc_r+0x1c>
 8003d42:	42b5      	cmp	r5, r6
 8003d44:	462a      	mov	r2, r5
 8003d46:	4621      	mov	r1, r4
 8003d48:	bf28      	it	cs
 8003d4a:	4632      	movcs	r2, r6
 8003d4c:	f7ff ffca 	bl	8003ce4 <memcpy>
 8003d50:	4621      	mov	r1, r4
 8003d52:	4640      	mov	r0, r8
 8003d54:	f7ff fbbe 	bl	80034d4 <_free_r>
 8003d58:	463c      	mov	r4, r7
 8003d5a:	e7e0      	b.n	8003d1e <_realloc_r+0x1e>

08003d5c <_malloc_usable_size_r>:
 8003d5c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003d60:	1f18      	subs	r0, r3, #4
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	bfbc      	itt	lt
 8003d66:	580b      	ldrlt	r3, [r1, r0]
 8003d68:	18c0      	addlt	r0, r0, r3
 8003d6a:	4770      	bx	lr

08003d6c <_init>:
 8003d6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d6e:	bf00      	nop
 8003d70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d72:	bc08      	pop	{r3}
 8003d74:	469e      	mov	lr, r3
 8003d76:	4770      	bx	lr

08003d78 <_fini>:
 8003d78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d7a:	bf00      	nop
 8003d7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d7e:	bc08      	pop	{r3}
 8003d80:	469e      	mov	lr, r3
 8003d82:	4770      	bx	lr
