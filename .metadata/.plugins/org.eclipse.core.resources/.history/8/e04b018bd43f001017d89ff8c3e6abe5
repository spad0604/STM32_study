/*
 * KalmanFilter.cpp
 *
 *  Created on: Jun 3, 2025
 *      Author: LENOVO
 */

#include "KalmanFilter.h"
#include <math.h>

KalmanFilter::KalmanFilter() {
	// Khởi tạo các giá trị mặc định
	angle = 0.0f;
	bias = 0.0f;
	rate = 0.0f;
	
	// Khởi tạo ma trận hiệp phương sai
	P[0][0] = 0.0f;
	P[0][1] = 0.0f;
	P[1][0] = 0.0f;
	P[1][1] = 0.0f;
}

KalmanFilter::~KalmanFilter() {
	// TODO Auto-generated destructor stub
}

void KalmanFilter::init(float Q_angle, float Q_bias, float R_measure) {
	this->Q_angle = Q_angle;
	this->Q_bias = Q_bias;
	this->R_measure = R_measure;
	
	// Khởi tạo ma trận hiệp phương sai
	P[0][0] = 0.0f;
	P[0][1] = 0.0f;
	P[1][0] = 0.0f;
	P[1][1] = 0.0f;
}

float KalmanFilter::update(float newAngle, float newRate, float dt) {
	// Bước 1: Dự đoán
	// Cập nhật góc dựa trên tốc độ góc
	angle += dt * (newRate - bias);
	
	// Cập nhật ma trận hiệp phương sai
	P[0][0] += dt * (dt * P[1][1] - P[0][1] - P[1][0] + Q_angle);
	P[0][1] -= dt * P[1][1];
	P[1][0] -= dt * P[1][1];
	P[1][1] += Q_bias * dt;
	
	// Bước 2: Cập nhật
	// Tính độ lệch giữa góc đo được và góc dự đoán
	float S = P[0][0] + R_measure;
	
	// Tính Kalman gain
	float K[2];
	K[0] = P[0][0] / S;
	K[1] = P[1][0] / S;
	
	// Cập nhật góc và độ lệch
	float y = newAngle - angle;
	angle += K[0] * y;
	bias += K[1] * y;
	
	// Cập nhật ma trận hiệp phương sai
	float P00_temp = P[0][0];
	float P01_temp = P[0][1];
	
	P[0][0] -= K[0] * P00_temp;
	P[0][1] -= K[0] * P01_temp;
	P[1][0] -= K[1] * P00_temp;
	P[1][1] -= K[1] * P01_temp;
	
	// Lưu tốc độ góc đã được lọc
	rate = newRate - bias;
	
	return angle;
}

