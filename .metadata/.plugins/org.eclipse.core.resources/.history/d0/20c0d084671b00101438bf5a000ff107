/* USER CODE BEGIN Header */
/**
 ******************************************************************************
 * @file           : main.c
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * Copyright (c) 2025 STMicroelectronics.
 * All rights reserved.
 *
 * This software is licensed under terms that can be found in the LICENSE file
 * in the root directory of this software component.
 * If no LICENSE file comes with this software, it is provided AS-IS.
 *
 ******************************************************************************
 */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include "i2c_scan.h"
#include "SH1106.h"
#include <stdio.h>
#include <string.h>
#include <stdint.h>
#include "tm_stm32f4_mfrc522.h"
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */
const char* valid_rfids[] = {
    "23 6A 2A 30 53",
    "43 E6 15 35 85",
};

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
struct Time
{
  uint8_t sec;
  uint8_t min;
  uint8_t hour;
  uint8_t weekday;
  uint8_t day;
  uint8_t month;
  uint8_t year;
};
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
I2C_HandleTypeDef hi2c3;

SPI_HandleTypeDef hspi4;

UART_HandleTypeDef huart1;

/* USER CODE BEGIN PV */
char buff[100];
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_I2C3_Init(void);
static void MX_SPI4_Init(void);
static void MX_USART1_UART_Init(void);
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void SetTime()
{
  struct Time Set_time;
  Set_time.sec = 0;
  Set_time.min = 13;
  Set_time.hour = 14;
  Set_time.day = 17;
  Set_time.month = 4;
  Set_time.year = 25;
  Set_time.weekday = 0;
  HAL_I2C_Mem_Write(&hi2c3, 0xD0, 0, 1, (uint8_t *)&Set_time, 7, 1000);
}

struct Time GetRTCTime()
{
  struct Time Get_time;
  HAL_I2C_Mem_Read(&hi2c3, 0xD0, 0, 1, (uint8_t *)&Get_time, 7, 1000);

  // Fix seconds and minutes if they exceed 60
  if (Get_time.sec >= 60)
  {
    Get_time.min += Get_time.sec / 60;
    Get_time.sec %= 60;
  }

  if (Get_time.min >= 60)
  {
    Get_time.hour += Get_time.min / 60;
    Get_time.min %= 60;
  }

  return Get_time;
}

void DisplayTimeOnUART(struct Time time)
{
  sprintf(buff, "%02d:%02d:%02d-%02d-%02d/%02d/%02d \n",
          time.hour,
          time.min,
          time.sec,
          time.weekday,
          time.day,
          time.month,
          time.year);
  HAL_UART_Transmit(&huart1, (uint8_t *)buff, strlen(buff), 1000);
}

void DisplayTimeOnSH1106(struct Time time)
{
  SH1106_Clear();

  // Display title
  sprintf(buff, "Real Time Clock");
  SH1106_GotoXY(10, 0);
  SH1106_Puts(buff, &Font_11x18, SH1106_COLOR_WHITE);

  // Display time
  sprintf(buff, "%02d:%02d:%02d", time.hour, time.min, time.sec);
  SH1106_GotoXY(25, 20);
  SH1106_Puts(buff, &Font_11x18, SH1106_COLOR_WHITE);

  // Display date
  sprintf(buff, "%02d/%02d/20%02d", time.day, time.month, time.year);
  SH1106_GotoXY(20, 40);
  SH1106_Puts(buff, &Font_11x18, SH1106_COLOR_WHITE);

  SH1106_UpdateScreen();
}

void InitDisplay()
{
  SH1106_Init();
  SH1106_Clear();
  sprintf(buff, "Starting...");
  SH1106_GotoXY(20, 20);
  SH1106_Puts(buff, &Font_11x18, SH1106_COLOR_WHITE);
  SH1106_UpdateScreen();
  HAL_Delay(1000);
}
/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{

  /* USER CODE BEGIN 1 */
  struct Time currentTime;
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_I2C3_Init();
  MX_SPI4_Init();
  MX_USART1_UART_Init();
  /* USER CODE BEGIN 2 */
  sprintf(buff, "Initializing...\r\n");
  HAL_UART_Transmit(&huart1, (uint8_t *)buff, strlen(buff), 1000);
  
  SetTime(); // Set initial time (can be commented out after first run)
  
  // Initialize OLED display
  sprintf(buff, "Initializing OLED display...\r\n");
  HAL_UART_Transmit(&huart1, (uint8_t *)buff, strlen(buff), 1000);
  
  uint8_t oled_status = SH1106_Init();
  if (oled_status) {
    sprintf(buff, "OLED display initialized successfully!\r\n");
    HAL_UART_Transmit(&huart1, (uint8_t *)buff, strlen(buff), 1000);
    SH1106_Clear();
    SH1106_GotoXY(0, 0);
    SH1106_Puts("OLED Test OK", &Font_11x18, SH1106_COLOR_WHITE);
    SH1106_UpdateScreen();
  } else {
    sprintf(buff, "OLED display initialization FAILED!\r\n");
    HAL_UART_Transmit(&huart1, (uint8_t *)buff, strlen(buff), 1000);
  }
  
  HAL_Delay(1000);
  
  // Initialize RFID
  TM_MFRC522_Init();
  
  // Read RFID version register to check if module is responding
  uint8_t version = TM_MFRC522_ReadRegister(MFRC522_REG_VERSION);
  sprintf(buff, "RFID Version: 0x%02X\r\n", version);
  HAL_UART_Transmit(&huart1, (uint8_t *)buff, strlen(buff), 1000);
  
  if (version == 0x00 || version == 0xFF) {
    sprintf(buff, "RFID module not detected!\r\n");
    HAL_UART_Transmit(&huart1, (uint8_t *)buff, strlen(buff), 1000);
    
    if (oled_status) {
      SH1106_Clear();
      SH1106_GotoXY(0, 0);
      SH1106_Puts("RFID ERROR!", &Font_11x18, SH1106_COLOR_WHITE);
      SH1106_UpdateScreen();
    }
  } else {
    sprintf(buff, "RFID module OK, scanning...\r\n");
    HAL_UART_Transmit(&huart1, (uint8_t *)buff, strlen(buff), 1000);
    
    if (oled_status) {
      SH1106_Clear();
      SH1106_GotoXY(0, 0);
      SH1106_Puts("RFID Ready", &Font_11x18, SH1106_COLOR_WHITE);
      SH1106_UpdateScreen();
    }
  }
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    uint8_t CardId[5];
    
    // Test RFID communication every few seconds
    static uint32_t lastRfidTest = 0;
    if (HAL_GetTick() - lastRfidTest > 3000) {
      lastRfidTest = HAL_GetTick();
      
      // Test reading a register
      uint8_t status = TM_MFRC522_ReadRegister(MFRC522_REG_STATUS1);
      sprintf(buff, "RFID Status: 0x%02X\r\n", status);
      HAL_UART_Transmit(&huart1, (uint8_t *)buff, strlen(buff), 1000);
    }
    
    HAL_Delay(100);

    if (TM_MFRC522_Check(CardId) == MI_OK)
    {
      sprintf(buff, "Card ID: %02X %02X %02X %02X %02X\r\n", CardId[0], CardId[1], CardId[2], CardId[3], CardId[4]);
      HAL_UART_Transmit(&huart1, (uint8_t *)buff, strlen(buff), 1000);
      
      // Display card ID on OLED
      SH1106_Clear();

      if(isCardValid(CardId)) {
        sprintf(buff, "Welcome!");
      }
      else {
        sprintf(buff, "Rejected!");
      }
      SH1106_GotoXY(0, 0);
      SH1106_Puts(buff, &Font_7x10, SH1106_COLOR_WHITE);
      
      // // Display each byte of the card ID on a separate line
      // sprintf(buff, "ID[0]: %02X", CardId[0]);
      // SH1106_GotoXY(10, 12);
      // SH1106_Puts(buff, &Font_7x10, SH1106_COLOR_WHITE);
      
      // sprintf(buff, "ID[1]: %02X", CardId[1]);
      // SH1106_GotoXY(10, 22);
      // SH1106_Puts(buff, &Font_7x10, SH1106_COLOR_WHITE);
      
      // sprintf(buff, "ID[2]: %02X", CardId[2]);
      // SH1106_GotoXY(10, 32);
      // SH1106_Puts(buff, &Font_7x10, SH1106_COLOR_WHITE);
      
      // sprintf(buff, "ID[3]: %02X", CardId[3]);
      // SH1106_GotoXY(10, 42);
      // SH1106_Puts(buff, &Font_7x10, SH1106_COLOR_WHITE);
      
      // sprintf(buff, "ID[4]: %02X", CardId[4]);
      // SH1106_GotoXY(10, 52);
      // SH1106_Puts(buff, &Font_7x10, SH1106_COLOR_WHITE);
      
      // SH1106_UpdateScreen();

      
    }
    else
    {
      sprintf(buff, "%s", "-------------");
      SH1106_Clear();
      HAL_UART_Transmit(&huart1, (uint8_t *)buff, strlen(buff), 1000);
      SH1106_GotoXY(12, 10);
      SH1106_Puts(buff, &Font_11x18, 1);
      SH1106_UpdateScreen();
    }

    //    currentTime = GetRTCTime();
    //    DisplayTimeOnSH1106(currentTime);
    //    DisplayTimeOnUART(currentTime);
    //    HAL_Delay(1000); // Update every second
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{

  /* USER CODE BEGIN I2C3_Init 0 */

  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
  hi2c3.Init.ClockSpeed = 400000;
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
  hi2c3.Init.OwnAddress1 = 0;
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c3.Init.OwnAddress2 = 0;
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
  {
    Error_Handler();
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
  {
    Error_Handler();
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}

/**
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{

  /* USER CODE BEGIN SPI4_Init 0 */

  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
  hspi4.Init.Mode = SPI_MODE_MASTER;
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi4.Init.NSS = SPI_NSS_SOFT;
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi4.Init.CRCPolynomial = 10;
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}

/**
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
  huart1.Init.BaudRate = 115200;
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();

  /*Configure GPIO pin : PE4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
