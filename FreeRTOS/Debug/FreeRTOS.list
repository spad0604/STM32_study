
FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000056f4  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f0  080058a4  080058a4  000068a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005994  08005994  00007010  2**0
                  CONTENTS
  4 .ARM          00000008  08005994  08005994  00006994  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800599c  0800599c  00007010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800599c  0800599c  0000699c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080059a0  080059a0  000069a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  080059a4  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00007010  2**0
                  CONTENTS
 10 .bss          00004a10  20000010  20000010  00007010  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20004a20  20004a20  00007010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00007010  2**0
                  CONTENTS, READONLY
 13 .debug_info   00016d2d  00000000  00000000  00007040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003253  00000000  00000000  0001dd6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001430  00000000  00000000  00020fc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000fb5  00000000  00000000  000223f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002f9c  00000000  00000000  000233a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000161ae  00000000  00000000  00026341  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e4006  00000000  00000000  0003c4ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001204f5  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005530  00000000  00000000  00120538  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000040  00000000  00000000  00125a68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000010 	.word	0x20000010
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800588c 	.word	0x0800588c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000014 	.word	0x20000014
 80001ec:	0800588c 	.word	0x0800588c

080001f0 <__aeabi_uldivmod>:
 80001f0:	b953      	cbnz	r3, 8000208 <__aeabi_uldivmod+0x18>
 80001f2:	b94a      	cbnz	r2, 8000208 <__aeabi_uldivmod+0x18>
 80001f4:	2900      	cmp	r1, #0
 80001f6:	bf08      	it	eq
 80001f8:	2800      	cmpeq	r0, #0
 80001fa:	bf1c      	itt	ne
 80001fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000200:	f04f 30ff 	movne.w	r0, #4294967295
 8000204:	f000 b96a 	b.w	80004dc <__aeabi_idiv0>
 8000208:	f1ad 0c08 	sub.w	ip, sp, #8
 800020c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000210:	f000 f806 	bl	8000220 <__udivmoddi4>
 8000214:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000218:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800021c:	b004      	add	sp, #16
 800021e:	4770      	bx	lr

08000220 <__udivmoddi4>:
 8000220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000224:	9d08      	ldr	r5, [sp, #32]
 8000226:	460c      	mov	r4, r1
 8000228:	2b00      	cmp	r3, #0
 800022a:	d14e      	bne.n	80002ca <__udivmoddi4+0xaa>
 800022c:	4694      	mov	ip, r2
 800022e:	458c      	cmp	ip, r1
 8000230:	4686      	mov	lr, r0
 8000232:	fab2 f282 	clz	r2, r2
 8000236:	d962      	bls.n	80002fe <__udivmoddi4+0xde>
 8000238:	b14a      	cbz	r2, 800024e <__udivmoddi4+0x2e>
 800023a:	f1c2 0320 	rsb	r3, r2, #32
 800023e:	4091      	lsls	r1, r2
 8000240:	fa20 f303 	lsr.w	r3, r0, r3
 8000244:	fa0c fc02 	lsl.w	ip, ip, r2
 8000248:	4319      	orrs	r1, r3
 800024a:	fa00 fe02 	lsl.w	lr, r0, r2
 800024e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000252:	fa1f f68c 	uxth.w	r6, ip
 8000256:	fbb1 f4f7 	udiv	r4, r1, r7
 800025a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800025e:	fb07 1114 	mls	r1, r7, r4, r1
 8000262:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000266:	fb04 f106 	mul.w	r1, r4, r6
 800026a:	4299      	cmp	r1, r3
 800026c:	d90a      	bls.n	8000284 <__udivmoddi4+0x64>
 800026e:	eb1c 0303 	adds.w	r3, ip, r3
 8000272:	f104 30ff 	add.w	r0, r4, #4294967295
 8000276:	f080 8112 	bcs.w	800049e <__udivmoddi4+0x27e>
 800027a:	4299      	cmp	r1, r3
 800027c:	f240 810f 	bls.w	800049e <__udivmoddi4+0x27e>
 8000280:	3c02      	subs	r4, #2
 8000282:	4463      	add	r3, ip
 8000284:	1a59      	subs	r1, r3, r1
 8000286:	fa1f f38e 	uxth.w	r3, lr
 800028a:	fbb1 f0f7 	udiv	r0, r1, r7
 800028e:	fb07 1110 	mls	r1, r7, r0, r1
 8000292:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000296:	fb00 f606 	mul.w	r6, r0, r6
 800029a:	429e      	cmp	r6, r3
 800029c:	d90a      	bls.n	80002b4 <__udivmoddi4+0x94>
 800029e:	eb1c 0303 	adds.w	r3, ip, r3
 80002a2:	f100 31ff 	add.w	r1, r0, #4294967295
 80002a6:	f080 80fc 	bcs.w	80004a2 <__udivmoddi4+0x282>
 80002aa:	429e      	cmp	r6, r3
 80002ac:	f240 80f9 	bls.w	80004a2 <__udivmoddi4+0x282>
 80002b0:	4463      	add	r3, ip
 80002b2:	3802      	subs	r0, #2
 80002b4:	1b9b      	subs	r3, r3, r6
 80002b6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002ba:	2100      	movs	r1, #0
 80002bc:	b11d      	cbz	r5, 80002c6 <__udivmoddi4+0xa6>
 80002be:	40d3      	lsrs	r3, r2
 80002c0:	2200      	movs	r2, #0
 80002c2:	e9c5 3200 	strd	r3, r2, [r5]
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d905      	bls.n	80002da <__udivmoddi4+0xba>
 80002ce:	b10d      	cbz	r5, 80002d4 <__udivmoddi4+0xb4>
 80002d0:	e9c5 0100 	strd	r0, r1, [r5]
 80002d4:	2100      	movs	r1, #0
 80002d6:	4608      	mov	r0, r1
 80002d8:	e7f5      	b.n	80002c6 <__udivmoddi4+0xa6>
 80002da:	fab3 f183 	clz	r1, r3
 80002de:	2900      	cmp	r1, #0
 80002e0:	d146      	bne.n	8000370 <__udivmoddi4+0x150>
 80002e2:	42a3      	cmp	r3, r4
 80002e4:	d302      	bcc.n	80002ec <__udivmoddi4+0xcc>
 80002e6:	4290      	cmp	r0, r2
 80002e8:	f0c0 80f0 	bcc.w	80004cc <__udivmoddi4+0x2ac>
 80002ec:	1a86      	subs	r6, r0, r2
 80002ee:	eb64 0303 	sbc.w	r3, r4, r3
 80002f2:	2001      	movs	r0, #1
 80002f4:	2d00      	cmp	r5, #0
 80002f6:	d0e6      	beq.n	80002c6 <__udivmoddi4+0xa6>
 80002f8:	e9c5 6300 	strd	r6, r3, [r5]
 80002fc:	e7e3      	b.n	80002c6 <__udivmoddi4+0xa6>
 80002fe:	2a00      	cmp	r2, #0
 8000300:	f040 8090 	bne.w	8000424 <__udivmoddi4+0x204>
 8000304:	eba1 040c 	sub.w	r4, r1, ip
 8000308:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800030c:	fa1f f78c 	uxth.w	r7, ip
 8000310:	2101      	movs	r1, #1
 8000312:	fbb4 f6f8 	udiv	r6, r4, r8
 8000316:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800031a:	fb08 4416 	mls	r4, r8, r6, r4
 800031e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000322:	fb07 f006 	mul.w	r0, r7, r6
 8000326:	4298      	cmp	r0, r3
 8000328:	d908      	bls.n	800033c <__udivmoddi4+0x11c>
 800032a:	eb1c 0303 	adds.w	r3, ip, r3
 800032e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x11a>
 8000334:	4298      	cmp	r0, r3
 8000336:	f200 80cd 	bhi.w	80004d4 <__udivmoddi4+0x2b4>
 800033a:	4626      	mov	r6, r4
 800033c:	1a1c      	subs	r4, r3, r0
 800033e:	fa1f f38e 	uxth.w	r3, lr
 8000342:	fbb4 f0f8 	udiv	r0, r4, r8
 8000346:	fb08 4410 	mls	r4, r8, r0, r4
 800034a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034e:	fb00 f707 	mul.w	r7, r0, r7
 8000352:	429f      	cmp	r7, r3
 8000354:	d908      	bls.n	8000368 <__udivmoddi4+0x148>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f100 34ff 	add.w	r4, r0, #4294967295
 800035e:	d202      	bcs.n	8000366 <__udivmoddi4+0x146>
 8000360:	429f      	cmp	r7, r3
 8000362:	f200 80b0 	bhi.w	80004c6 <__udivmoddi4+0x2a6>
 8000366:	4620      	mov	r0, r4
 8000368:	1bdb      	subs	r3, r3, r7
 800036a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800036e:	e7a5      	b.n	80002bc <__udivmoddi4+0x9c>
 8000370:	f1c1 0620 	rsb	r6, r1, #32
 8000374:	408b      	lsls	r3, r1
 8000376:	fa22 f706 	lsr.w	r7, r2, r6
 800037a:	431f      	orrs	r7, r3
 800037c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000380:	fa04 f301 	lsl.w	r3, r4, r1
 8000384:	ea43 030c 	orr.w	r3, r3, ip
 8000388:	40f4      	lsrs	r4, r6
 800038a:	fa00 f801 	lsl.w	r8, r0, r1
 800038e:	0c38      	lsrs	r0, r7, #16
 8000390:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000394:	fbb4 fef0 	udiv	lr, r4, r0
 8000398:	fa1f fc87 	uxth.w	ip, r7
 800039c:	fb00 441e 	mls	r4, r0, lr, r4
 80003a0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003a4:	fb0e f90c 	mul.w	r9, lr, ip
 80003a8:	45a1      	cmp	r9, r4
 80003aa:	fa02 f201 	lsl.w	r2, r2, r1
 80003ae:	d90a      	bls.n	80003c6 <__udivmoddi4+0x1a6>
 80003b0:	193c      	adds	r4, r7, r4
 80003b2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003b6:	f080 8084 	bcs.w	80004c2 <__udivmoddi4+0x2a2>
 80003ba:	45a1      	cmp	r9, r4
 80003bc:	f240 8081 	bls.w	80004c2 <__udivmoddi4+0x2a2>
 80003c0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003c4:	443c      	add	r4, r7
 80003c6:	eba4 0409 	sub.w	r4, r4, r9
 80003ca:	fa1f f983 	uxth.w	r9, r3
 80003ce:	fbb4 f3f0 	udiv	r3, r4, r0
 80003d2:	fb00 4413 	mls	r4, r0, r3, r4
 80003d6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003da:	fb03 fc0c 	mul.w	ip, r3, ip
 80003de:	45a4      	cmp	ip, r4
 80003e0:	d907      	bls.n	80003f2 <__udivmoddi4+0x1d2>
 80003e2:	193c      	adds	r4, r7, r4
 80003e4:	f103 30ff 	add.w	r0, r3, #4294967295
 80003e8:	d267      	bcs.n	80004ba <__udivmoddi4+0x29a>
 80003ea:	45a4      	cmp	ip, r4
 80003ec:	d965      	bls.n	80004ba <__udivmoddi4+0x29a>
 80003ee:	3b02      	subs	r3, #2
 80003f0:	443c      	add	r4, r7
 80003f2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003f6:	fba0 9302 	umull	r9, r3, r0, r2
 80003fa:	eba4 040c 	sub.w	r4, r4, ip
 80003fe:	429c      	cmp	r4, r3
 8000400:	46ce      	mov	lr, r9
 8000402:	469c      	mov	ip, r3
 8000404:	d351      	bcc.n	80004aa <__udivmoddi4+0x28a>
 8000406:	d04e      	beq.n	80004a6 <__udivmoddi4+0x286>
 8000408:	b155      	cbz	r5, 8000420 <__udivmoddi4+0x200>
 800040a:	ebb8 030e 	subs.w	r3, r8, lr
 800040e:	eb64 040c 	sbc.w	r4, r4, ip
 8000412:	fa04 f606 	lsl.w	r6, r4, r6
 8000416:	40cb      	lsrs	r3, r1
 8000418:	431e      	orrs	r6, r3
 800041a:	40cc      	lsrs	r4, r1
 800041c:	e9c5 6400 	strd	r6, r4, [r5]
 8000420:	2100      	movs	r1, #0
 8000422:	e750      	b.n	80002c6 <__udivmoddi4+0xa6>
 8000424:	f1c2 0320 	rsb	r3, r2, #32
 8000428:	fa20 f103 	lsr.w	r1, r0, r3
 800042c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000430:	fa24 f303 	lsr.w	r3, r4, r3
 8000434:	4094      	lsls	r4, r2
 8000436:	430c      	orrs	r4, r1
 8000438:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800043c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000440:	fa1f f78c 	uxth.w	r7, ip
 8000444:	fbb3 f0f8 	udiv	r0, r3, r8
 8000448:	fb08 3110 	mls	r1, r8, r0, r3
 800044c:	0c23      	lsrs	r3, r4, #16
 800044e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000452:	fb00 f107 	mul.w	r1, r0, r7
 8000456:	4299      	cmp	r1, r3
 8000458:	d908      	bls.n	800046c <__udivmoddi4+0x24c>
 800045a:	eb1c 0303 	adds.w	r3, ip, r3
 800045e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000462:	d22c      	bcs.n	80004be <__udivmoddi4+0x29e>
 8000464:	4299      	cmp	r1, r3
 8000466:	d92a      	bls.n	80004be <__udivmoddi4+0x29e>
 8000468:	3802      	subs	r0, #2
 800046a:	4463      	add	r3, ip
 800046c:	1a5b      	subs	r3, r3, r1
 800046e:	b2a4      	uxth	r4, r4
 8000470:	fbb3 f1f8 	udiv	r1, r3, r8
 8000474:	fb08 3311 	mls	r3, r8, r1, r3
 8000478:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800047c:	fb01 f307 	mul.w	r3, r1, r7
 8000480:	42a3      	cmp	r3, r4
 8000482:	d908      	bls.n	8000496 <__udivmoddi4+0x276>
 8000484:	eb1c 0404 	adds.w	r4, ip, r4
 8000488:	f101 36ff 	add.w	r6, r1, #4294967295
 800048c:	d213      	bcs.n	80004b6 <__udivmoddi4+0x296>
 800048e:	42a3      	cmp	r3, r4
 8000490:	d911      	bls.n	80004b6 <__udivmoddi4+0x296>
 8000492:	3902      	subs	r1, #2
 8000494:	4464      	add	r4, ip
 8000496:	1ae4      	subs	r4, r4, r3
 8000498:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800049c:	e739      	b.n	8000312 <__udivmoddi4+0xf2>
 800049e:	4604      	mov	r4, r0
 80004a0:	e6f0      	b.n	8000284 <__udivmoddi4+0x64>
 80004a2:	4608      	mov	r0, r1
 80004a4:	e706      	b.n	80002b4 <__udivmoddi4+0x94>
 80004a6:	45c8      	cmp	r8, r9
 80004a8:	d2ae      	bcs.n	8000408 <__udivmoddi4+0x1e8>
 80004aa:	ebb9 0e02 	subs.w	lr, r9, r2
 80004ae:	eb63 0c07 	sbc.w	ip, r3, r7
 80004b2:	3801      	subs	r0, #1
 80004b4:	e7a8      	b.n	8000408 <__udivmoddi4+0x1e8>
 80004b6:	4631      	mov	r1, r6
 80004b8:	e7ed      	b.n	8000496 <__udivmoddi4+0x276>
 80004ba:	4603      	mov	r3, r0
 80004bc:	e799      	b.n	80003f2 <__udivmoddi4+0x1d2>
 80004be:	4630      	mov	r0, r6
 80004c0:	e7d4      	b.n	800046c <__udivmoddi4+0x24c>
 80004c2:	46d6      	mov	lr, sl
 80004c4:	e77f      	b.n	80003c6 <__udivmoddi4+0x1a6>
 80004c6:	4463      	add	r3, ip
 80004c8:	3802      	subs	r0, #2
 80004ca:	e74d      	b.n	8000368 <__udivmoddi4+0x148>
 80004cc:	4606      	mov	r6, r0
 80004ce:	4623      	mov	r3, r4
 80004d0:	4608      	mov	r0, r1
 80004d2:	e70f      	b.n	80002f4 <__udivmoddi4+0xd4>
 80004d4:	3e02      	subs	r6, #2
 80004d6:	4463      	add	r3, ip
 80004d8:	e730      	b.n	800033c <__udivmoddi4+0x11c>
 80004da:	bf00      	nop

080004dc <__aeabi_idiv0>:
 80004dc:	4770      	bx	lr
 80004de:	bf00      	nop

080004e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004e4:	f000 fb00 	bl	8000ae8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004e8:	f000 f840 	bl	800056c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004ec:	f000 f8da 	bl	80006a4 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80004f0:	f000 f8ae 	bl	8000650 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80004f4:	f002 f9c6 	bl	8002884 <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of myQueue01 */
  myQueue01Handle = osMessageQueueNew (16, sizeof(uint16_t), &myQueue01_attributes);
 80004f8:	4a11      	ldr	r2, [pc, #68]	@ (8000540 <main+0x60>)
 80004fa:	2102      	movs	r1, #2
 80004fc:	2010      	movs	r0, #16
 80004fe:	f002 fab8 	bl	8002a72 <osMessageQueueNew>
 8000502:	4603      	mov	r3, r0
 8000504:	4a0f      	ldr	r2, [pc, #60]	@ (8000544 <main+0x64>)
 8000506:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000508:	4a0f      	ldr	r2, [pc, #60]	@ (8000548 <main+0x68>)
 800050a:	2100      	movs	r1, #0
 800050c:	480f      	ldr	r0, [pc, #60]	@ (800054c <main+0x6c>)
 800050e:	f002 fa03 	bl	8002918 <osThreadNew>
 8000512:	4603      	mov	r3, r0
 8000514:	4a0e      	ldr	r2, [pc, #56]	@ (8000550 <main+0x70>)
 8000516:	6013      	str	r3, [r2, #0]

  /* creation of myTask */
  myTaskHandle = osThreadNew(StartTask02, NULL, &myTask_attributes);
 8000518:	4a0e      	ldr	r2, [pc, #56]	@ (8000554 <main+0x74>)
 800051a:	2100      	movs	r1, #0
 800051c:	480e      	ldr	r0, [pc, #56]	@ (8000558 <main+0x78>)
 800051e:	f002 f9fb 	bl	8002918 <osThreadNew>
 8000522:	4603      	mov	r3, r0
 8000524:	4a0d      	ldr	r2, [pc, #52]	@ (800055c <main+0x7c>)
 8000526:	6013      	str	r3, [r2, #0]

  /* creation of myTask03 */
  myTask03Handle = osThreadNew(StartTask03, NULL, &myTask03_attributes);
 8000528:	4a0d      	ldr	r2, [pc, #52]	@ (8000560 <main+0x80>)
 800052a:	2100      	movs	r1, #0
 800052c:	480d      	ldr	r0, [pc, #52]	@ (8000564 <main+0x84>)
 800052e:	f002 f9f3 	bl	8002918 <osThreadNew>
 8000532:	4603      	mov	r3, r0
 8000534:	4a0c      	ldr	r2, [pc, #48]	@ (8000568 <main+0x88>)
 8000536:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000538:	f002 f9c8 	bl	80028cc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800053c:	bf00      	nop
 800053e:	e7fd      	b.n	800053c <main+0x5c>
 8000540:	08005964 	.word	0x08005964
 8000544:	20000080 	.word	0x20000080
 8000548:	080058f8 	.word	0x080058f8
 800054c:	08000775 	.word	0x08000775
 8000550:	20000074 	.word	0x20000074
 8000554:	0800591c 	.word	0x0800591c
 8000558:	08000785 	.word	0x08000785
 800055c:	20000078 	.word	0x20000078
 8000560:	08005940 	.word	0x08005940
 8000564:	080007d5 	.word	0x080007d5
 8000568:	2000007c 	.word	0x2000007c

0800056c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b094      	sub	sp, #80	@ 0x50
 8000570:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000572:	f107 0320 	add.w	r3, r7, #32
 8000576:	2230      	movs	r2, #48	@ 0x30
 8000578:	2100      	movs	r1, #0
 800057a:	4618      	mov	r0, r3
 800057c:	f005 f94c 	bl	8005818 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000580:	f107 030c 	add.w	r3, r7, #12
 8000584:	2200      	movs	r2, #0
 8000586:	601a      	str	r2, [r3, #0]
 8000588:	605a      	str	r2, [r3, #4]
 800058a:	609a      	str	r2, [r3, #8]
 800058c:	60da      	str	r2, [r3, #12]
 800058e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000590:	2300      	movs	r3, #0
 8000592:	60bb      	str	r3, [r7, #8]
 8000594:	4b2c      	ldr	r3, [pc, #176]	@ (8000648 <SystemClock_Config+0xdc>)
 8000596:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000598:	4a2b      	ldr	r2, [pc, #172]	@ (8000648 <SystemClock_Config+0xdc>)
 800059a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800059e:	6413      	str	r3, [r2, #64]	@ 0x40
 80005a0:	4b29      	ldr	r3, [pc, #164]	@ (8000648 <SystemClock_Config+0xdc>)
 80005a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005a8:	60bb      	str	r3, [r7, #8]
 80005aa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80005ac:	2300      	movs	r3, #0
 80005ae:	607b      	str	r3, [r7, #4]
 80005b0:	4b26      	ldr	r3, [pc, #152]	@ (800064c <SystemClock_Config+0xe0>)
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80005b8:	4a24      	ldr	r2, [pc, #144]	@ (800064c <SystemClock_Config+0xe0>)
 80005ba:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80005be:	6013      	str	r3, [r2, #0]
 80005c0:	4b22      	ldr	r3, [pc, #136]	@ (800064c <SystemClock_Config+0xe0>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80005c8:	607b      	str	r3, [r7, #4]
 80005ca:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005cc:	2302      	movs	r3, #2
 80005ce:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005d0:	2301      	movs	r3, #1
 80005d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005d4:	2310      	movs	r3, #16
 80005d6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005d8:	2302      	movs	r3, #2
 80005da:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005dc:	2300      	movs	r3, #0
 80005de:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80005e0:	2308      	movs	r3, #8
 80005e2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 90;
 80005e4:	235a      	movs	r3, #90	@ 0x5a
 80005e6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005e8:	2302      	movs	r3, #2
 80005ea:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80005ec:	2304      	movs	r3, #4
 80005ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005f0:	f107 0320 	add.w	r3, r7, #32
 80005f4:	4618      	mov	r0, r3
 80005f6:	f000 fdc9 	bl	800118c <HAL_RCC_OscConfig>
 80005fa:	4603      	mov	r3, r0
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d001      	beq.n	8000604 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000600:	f000 f91a 	bl	8000838 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000604:	f000 fd72 	bl	80010ec <HAL_PWREx_EnableOverDrive>
 8000608:	4603      	mov	r3, r0
 800060a:	2b00      	cmp	r3, #0
 800060c:	d001      	beq.n	8000612 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800060e:	f000 f913 	bl	8000838 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000612:	230f      	movs	r3, #15
 8000614:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000616:	2302      	movs	r3, #2
 8000618:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800061a:	2300      	movs	r3, #0
 800061c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800061e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000622:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000624:	2300      	movs	r3, #0
 8000626:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000628:	f107 030c 	add.w	r3, r7, #12
 800062c:	2102      	movs	r1, #2
 800062e:	4618      	mov	r0, r3
 8000630:	f001 f824 	bl	800167c <HAL_RCC_ClockConfig>
 8000634:	4603      	mov	r3, r0
 8000636:	2b00      	cmp	r3, #0
 8000638:	d001      	beq.n	800063e <SystemClock_Config+0xd2>
  {
    Error_Handler();
 800063a:	f000 f8fd 	bl	8000838 <Error_Handler>
  }
}
 800063e:	bf00      	nop
 8000640:	3750      	adds	r7, #80	@ 0x50
 8000642:	46bd      	mov	sp, r7
 8000644:	bd80      	pop	{r7, pc}
 8000646:	bf00      	nop
 8000648:	40023800 	.word	0x40023800
 800064c:	40007000 	.word	0x40007000

08000650 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000654:	4b11      	ldr	r3, [pc, #68]	@ (800069c <MX_USART1_UART_Init+0x4c>)
 8000656:	4a12      	ldr	r2, [pc, #72]	@ (80006a0 <MX_USART1_UART_Init+0x50>)
 8000658:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800065a:	4b10      	ldr	r3, [pc, #64]	@ (800069c <MX_USART1_UART_Init+0x4c>)
 800065c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000660:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000662:	4b0e      	ldr	r3, [pc, #56]	@ (800069c <MX_USART1_UART_Init+0x4c>)
 8000664:	2200      	movs	r2, #0
 8000666:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000668:	4b0c      	ldr	r3, [pc, #48]	@ (800069c <MX_USART1_UART_Init+0x4c>)
 800066a:	2200      	movs	r2, #0
 800066c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800066e:	4b0b      	ldr	r3, [pc, #44]	@ (800069c <MX_USART1_UART_Init+0x4c>)
 8000670:	2200      	movs	r2, #0
 8000672:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000674:	4b09      	ldr	r3, [pc, #36]	@ (800069c <MX_USART1_UART_Init+0x4c>)
 8000676:	220c      	movs	r2, #12
 8000678:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800067a:	4b08      	ldr	r3, [pc, #32]	@ (800069c <MX_USART1_UART_Init+0x4c>)
 800067c:	2200      	movs	r2, #0
 800067e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000680:	4b06      	ldr	r3, [pc, #24]	@ (800069c <MX_USART1_UART_Init+0x4c>)
 8000682:	2200      	movs	r2, #0
 8000684:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000686:	4805      	ldr	r0, [pc, #20]	@ (800069c <MX_USART1_UART_Init+0x4c>)
 8000688:	f001 fcac 	bl	8001fe4 <HAL_UART_Init>
 800068c:	4603      	mov	r3, r0
 800068e:	2b00      	cmp	r3, #0
 8000690:	d001      	beq.n	8000696 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000692:	f000 f8d1 	bl	8000838 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000696:	bf00      	nop
 8000698:	bd80      	pop	{r7, pc}
 800069a:	bf00      	nop
 800069c:	2000002c 	.word	0x2000002c
 80006a0:	40011000 	.word	0x40011000

080006a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b088      	sub	sp, #32
 80006a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006aa:	f107 030c 	add.w	r3, r7, #12
 80006ae:	2200      	movs	r2, #0
 80006b0:	601a      	str	r2, [r3, #0]
 80006b2:	605a      	str	r2, [r3, #4]
 80006b4:	609a      	str	r2, [r3, #8]
 80006b6:	60da      	str	r2, [r3, #12]
 80006b8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006ba:	2300      	movs	r3, #0
 80006bc:	60bb      	str	r3, [r7, #8]
 80006be:	4b2a      	ldr	r3, [pc, #168]	@ (8000768 <MX_GPIO_Init+0xc4>)
 80006c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006c2:	4a29      	ldr	r2, [pc, #164]	@ (8000768 <MX_GPIO_Init+0xc4>)
 80006c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80006c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80006ca:	4b27      	ldr	r3, [pc, #156]	@ (8000768 <MX_GPIO_Init+0xc4>)
 80006cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80006d2:	60bb      	str	r3, [r7, #8]
 80006d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006d6:	2300      	movs	r3, #0
 80006d8:	607b      	str	r3, [r7, #4]
 80006da:	4b23      	ldr	r3, [pc, #140]	@ (8000768 <MX_GPIO_Init+0xc4>)
 80006dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006de:	4a22      	ldr	r2, [pc, #136]	@ (8000768 <MX_GPIO_Init+0xc4>)
 80006e0:	f043 0301 	orr.w	r3, r3, #1
 80006e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80006e6:	4b20      	ldr	r3, [pc, #128]	@ (8000768 <MX_GPIO_Init+0xc4>)
 80006e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ea:	f003 0301 	and.w	r3, r3, #1
 80006ee:	607b      	str	r3, [r7, #4]
 80006f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80006f2:	2300      	movs	r3, #0
 80006f4:	603b      	str	r3, [r7, #0]
 80006f6:	4b1c      	ldr	r3, [pc, #112]	@ (8000768 <MX_GPIO_Init+0xc4>)
 80006f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006fa:	4a1b      	ldr	r2, [pc, #108]	@ (8000768 <MX_GPIO_Init+0xc4>)
 80006fc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000700:	6313      	str	r3, [r2, #48]	@ 0x30
 8000702:	4b19      	ldr	r3, [pc, #100]	@ (8000768 <MX_GPIO_Init+0xc4>)
 8000704:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000706:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800070a:	603b      	str	r3, [r7, #0]
 800070c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 800070e:	2200      	movs	r2, #0
 8000710:	2101      	movs	r1, #1
 8000712:	4816      	ldr	r0, [pc, #88]	@ (800076c <MX_GPIO_Init+0xc8>)
 8000714:	f000 fcd0 	bl	80010b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 8000718:	2200      	movs	r2, #0
 800071a:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 800071e:	4814      	ldr	r0, [pc, #80]	@ (8000770 <MX_GPIO_Init+0xcc>)
 8000720:	f000 fcca 	bl	80010b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000724:	2301      	movs	r3, #1
 8000726:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000728:	2301      	movs	r3, #1
 800072a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800072c:	2300      	movs	r3, #0
 800072e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000730:	2300      	movs	r3, #0
 8000732:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000734:	f107 030c 	add.w	r3, r7, #12
 8000738:	4619      	mov	r1, r3
 800073a:	480c      	ldr	r0, [pc, #48]	@ (800076c <MX_GPIO_Init+0xc8>)
 800073c:	f000 faf8 	bl	8000d30 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG13 PG14 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8000740:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8000744:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000746:	2301      	movs	r3, #1
 8000748:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800074a:	2300      	movs	r3, #0
 800074c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800074e:	2300      	movs	r3, #0
 8000750:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000752:	f107 030c 	add.w	r3, r7, #12
 8000756:	4619      	mov	r1, r3
 8000758:	4805      	ldr	r0, [pc, #20]	@ (8000770 <MX_GPIO_Init+0xcc>)
 800075a:	f000 fae9 	bl	8000d30 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800075e:	bf00      	nop
 8000760:	3720      	adds	r7, #32
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	40023800 	.word	0x40023800
 800076c:	40020000 	.word	0x40020000
 8000770:	40021800 	.word	0x40021800

08000774 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b082      	sub	sp, #8
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    //SendChar('1');
    osDelay(200);
 800077c:	20c8      	movs	r0, #200	@ 0xc8
 800077e:	f002 f95d 	bl	8002a3c <osDelay>
 8000782:	e7fb      	b.n	800077c <StartDefaultTask+0x8>

08000784 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b084      	sub	sp, #16
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
	  uint8_t res;
	  if(osMessageQueueGetCount(myQueue01Handle) > 0) {
 800078c:	4b0e      	ldr	r3, [pc, #56]	@ (80007c8 <StartTask02+0x44>)
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	4618      	mov	r0, r3
 8000792:	f002 fa9f 	bl	8002cd4 <osMessageQueueGetCount>
 8000796:	4603      	mov	r3, r0
 8000798:	2b00      	cmp	r3, #0
 800079a:	d010      	beq.n	80007be <StartTask02+0x3a>
		  osMessageQueueGet(myQueue01Handle, &res, NULL, 10);
 800079c:	4b0a      	ldr	r3, [pc, #40]	@ (80007c8 <StartTask02+0x44>)
 800079e:	6818      	ldr	r0, [r3, #0]
 80007a0:	f107 010f 	add.w	r1, r7, #15
 80007a4:	230a      	movs	r3, #10
 80007a6:	2200      	movs	r2, #0
 80007a8:	f002 fa36 	bl	8002c18 <osMessageQueueGet>
		  if(res == 'X') {
 80007ac:	7bfb      	ldrb	r3, [r7, #15]
 80007ae:	2b58      	cmp	r3, #88	@ 0x58
 80007b0:	d105      	bne.n	80007be <StartTask02+0x3a>
			  HAL_UART_Transmit(&huart1, "Button press", 12, 100);
 80007b2:	2364      	movs	r3, #100	@ 0x64
 80007b4:	220c      	movs	r2, #12
 80007b6:	4905      	ldr	r1, [pc, #20]	@ (80007cc <StartTask02+0x48>)
 80007b8:	4805      	ldr	r0, [pc, #20]	@ (80007d0 <StartTask02+0x4c>)
 80007ba:	f001 fc63 	bl	8002084 <HAL_UART_Transmit>
		  }
	  }
	  osDelay(1);
 80007be:	2001      	movs	r0, #1
 80007c0:	f002 f93c 	bl	8002a3c <osDelay>
  {
 80007c4:	e7e2      	b.n	800078c <StartTask02+0x8>
 80007c6:	bf00      	nop
 80007c8:	20000080 	.word	0x20000080
 80007cc:	080058d0 	.word	0x080058d0
 80007d0:	2000002c 	.word	0x2000002c

080007d4 <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void *argument)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b084      	sub	sp, #16
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
  /* Infinite loop */
  for(;;)
  {
	 if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == 1) {
 80007dc:	2101      	movs	r1, #1
 80007de:	480b      	ldr	r0, [pc, #44]	@ (800080c <StartTask03+0x38>)
 80007e0:	f000 fc52 	bl	8001088 <HAL_GPIO_ReadPin>
 80007e4:	4603      	mov	r3, r0
 80007e6:	2b01      	cmp	r3, #1
 80007e8:	d10c      	bne.n	8000804 <StartTask03+0x30>
		 uint8_t data = 'X';
 80007ea:	2358      	movs	r3, #88	@ 0x58
 80007ec:	73fb      	strb	r3, [r7, #15]
		 osMessageQueuePut(myQueue01Handle, &data, 0, 10);
 80007ee:	4b08      	ldr	r3, [pc, #32]	@ (8000810 <StartTask03+0x3c>)
 80007f0:	6818      	ldr	r0, [r3, #0]
 80007f2:	f107 010f 	add.w	r1, r7, #15
 80007f6:	230a      	movs	r3, #10
 80007f8:	2200      	movs	r2, #0
 80007fa:	f002 f9ad 	bl	8002b58 <osMessageQueuePut>
		 osDelay(200);
 80007fe:	20c8      	movs	r0, #200	@ 0xc8
 8000800:	f002 f91c 	bl	8002a3c <osDelay>
	 }
    osDelay(1);
 8000804:	2001      	movs	r0, #1
 8000806:	f002 f919 	bl	8002a3c <osDelay>
	 if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == 1) {
 800080a:	e7e7      	b.n	80007dc <StartTask03+0x8>
 800080c:	40020000 	.word	0x40020000
 8000810:	20000080 	.word	0x20000080

08000814 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b082      	sub	sp, #8
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	4a04      	ldr	r2, [pc, #16]	@ (8000834 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000822:	4293      	cmp	r3, r2
 8000824:	d101      	bne.n	800082a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000826:	f000 f981 	bl	8000b2c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800082a:	bf00      	nop
 800082c:	3708      	adds	r7, #8
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}
 8000832:	bf00      	nop
 8000834:	40001000 	.word	0x40001000

08000838 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000838:	b480      	push	{r7}
 800083a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800083c:	b672      	cpsid	i
}
 800083e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000840:	bf00      	nop
 8000842:	e7fd      	b.n	8000840 <Error_Handler+0x8>

08000844 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b082      	sub	sp, #8
 8000848:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800084a:	2300      	movs	r3, #0
 800084c:	607b      	str	r3, [r7, #4]
 800084e:	4b12      	ldr	r3, [pc, #72]	@ (8000898 <HAL_MspInit+0x54>)
 8000850:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000852:	4a11      	ldr	r2, [pc, #68]	@ (8000898 <HAL_MspInit+0x54>)
 8000854:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000858:	6453      	str	r3, [r2, #68]	@ 0x44
 800085a:	4b0f      	ldr	r3, [pc, #60]	@ (8000898 <HAL_MspInit+0x54>)
 800085c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800085e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000862:	607b      	str	r3, [r7, #4]
 8000864:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000866:	2300      	movs	r3, #0
 8000868:	603b      	str	r3, [r7, #0]
 800086a:	4b0b      	ldr	r3, [pc, #44]	@ (8000898 <HAL_MspInit+0x54>)
 800086c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800086e:	4a0a      	ldr	r2, [pc, #40]	@ (8000898 <HAL_MspInit+0x54>)
 8000870:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000874:	6413      	str	r3, [r2, #64]	@ 0x40
 8000876:	4b08      	ldr	r3, [pc, #32]	@ (8000898 <HAL_MspInit+0x54>)
 8000878:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800087a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800087e:	603b      	str	r3, [r7, #0]
 8000880:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000882:	2200      	movs	r2, #0
 8000884:	210f      	movs	r1, #15
 8000886:	f06f 0001 	mvn.w	r0, #1
 800088a:	f000 fa27 	bl	8000cdc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800088e:	bf00      	nop
 8000890:	3708      	adds	r7, #8
 8000892:	46bd      	mov	sp, r7
 8000894:	bd80      	pop	{r7, pc}
 8000896:	bf00      	nop
 8000898:	40023800 	.word	0x40023800

0800089c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b08a      	sub	sp, #40	@ 0x28
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008a4:	f107 0314 	add.w	r3, r7, #20
 80008a8:	2200      	movs	r2, #0
 80008aa:	601a      	str	r2, [r3, #0]
 80008ac:	605a      	str	r2, [r3, #4]
 80008ae:	609a      	str	r2, [r3, #8]
 80008b0:	60da      	str	r2, [r3, #12]
 80008b2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	4a19      	ldr	r2, [pc, #100]	@ (8000920 <HAL_UART_MspInit+0x84>)
 80008ba:	4293      	cmp	r3, r2
 80008bc:	d12c      	bne.n	8000918 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80008be:	2300      	movs	r3, #0
 80008c0:	613b      	str	r3, [r7, #16]
 80008c2:	4b18      	ldr	r3, [pc, #96]	@ (8000924 <HAL_UART_MspInit+0x88>)
 80008c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008c6:	4a17      	ldr	r2, [pc, #92]	@ (8000924 <HAL_UART_MspInit+0x88>)
 80008c8:	f043 0310 	orr.w	r3, r3, #16
 80008cc:	6453      	str	r3, [r2, #68]	@ 0x44
 80008ce:	4b15      	ldr	r3, [pc, #84]	@ (8000924 <HAL_UART_MspInit+0x88>)
 80008d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008d2:	f003 0310 	and.w	r3, r3, #16
 80008d6:	613b      	str	r3, [r7, #16]
 80008d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008da:	2300      	movs	r3, #0
 80008dc:	60fb      	str	r3, [r7, #12]
 80008de:	4b11      	ldr	r3, [pc, #68]	@ (8000924 <HAL_UART_MspInit+0x88>)
 80008e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008e2:	4a10      	ldr	r2, [pc, #64]	@ (8000924 <HAL_UART_MspInit+0x88>)
 80008e4:	f043 0301 	orr.w	r3, r3, #1
 80008e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80008ea:	4b0e      	ldr	r3, [pc, #56]	@ (8000924 <HAL_UART_MspInit+0x88>)
 80008ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ee:	f003 0301 	and.w	r3, r3, #1
 80008f2:	60fb      	str	r3, [r7, #12]
 80008f4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80008f6:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80008fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008fc:	2302      	movs	r3, #2
 80008fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000900:	2300      	movs	r3, #0
 8000902:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000904:	2303      	movs	r3, #3
 8000906:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000908:	2307      	movs	r3, #7
 800090a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800090c:	f107 0314 	add.w	r3, r7, #20
 8000910:	4619      	mov	r1, r3
 8000912:	4805      	ldr	r0, [pc, #20]	@ (8000928 <HAL_UART_MspInit+0x8c>)
 8000914:	f000 fa0c 	bl	8000d30 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8000918:	bf00      	nop
 800091a:	3728      	adds	r7, #40	@ 0x28
 800091c:	46bd      	mov	sp, r7
 800091e:	bd80      	pop	{r7, pc}
 8000920:	40011000 	.word	0x40011000
 8000924:	40023800 	.word	0x40023800
 8000928:	40020000 	.word	0x40020000

0800092c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b08e      	sub	sp, #56	@ 0x38
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000934:	2300      	movs	r3, #0
 8000936:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000938:	2300      	movs	r3, #0
 800093a:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800093c:	2300      	movs	r3, #0
 800093e:	60fb      	str	r3, [r7, #12]
 8000940:	4b33      	ldr	r3, [pc, #204]	@ (8000a10 <HAL_InitTick+0xe4>)
 8000942:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000944:	4a32      	ldr	r2, [pc, #200]	@ (8000a10 <HAL_InitTick+0xe4>)
 8000946:	f043 0310 	orr.w	r3, r3, #16
 800094a:	6413      	str	r3, [r2, #64]	@ 0x40
 800094c:	4b30      	ldr	r3, [pc, #192]	@ (8000a10 <HAL_InitTick+0xe4>)
 800094e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000950:	f003 0310 	and.w	r3, r3, #16
 8000954:	60fb      	str	r3, [r7, #12]
 8000956:	68fb      	ldr	r3, [r7, #12]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000958:	f107 0210 	add.w	r2, r7, #16
 800095c:	f107 0314 	add.w	r3, r7, #20
 8000960:	4611      	mov	r1, r2
 8000962:	4618      	mov	r0, r3
 8000964:	f001 f86a 	bl	8001a3c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000968:	6a3b      	ldr	r3, [r7, #32]
 800096a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800096c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800096e:	2b00      	cmp	r3, #0
 8000970:	d103      	bne.n	800097a <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000972:	f001 f83b 	bl	80019ec <HAL_RCC_GetPCLK1Freq>
 8000976:	6378      	str	r0, [r7, #52]	@ 0x34
 8000978:	e004      	b.n	8000984 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800097a:	f001 f837 	bl	80019ec <HAL_RCC_GetPCLK1Freq>
 800097e:	4603      	mov	r3, r0
 8000980:	005b      	lsls	r3, r3, #1
 8000982:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000984:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000986:	4a23      	ldr	r2, [pc, #140]	@ (8000a14 <HAL_InitTick+0xe8>)
 8000988:	fba2 2303 	umull	r2, r3, r2, r3
 800098c:	0c9b      	lsrs	r3, r3, #18
 800098e:	3b01      	subs	r3, #1
 8000990:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000992:	4b21      	ldr	r3, [pc, #132]	@ (8000a18 <HAL_InitTick+0xec>)
 8000994:	4a21      	ldr	r2, [pc, #132]	@ (8000a1c <HAL_InitTick+0xf0>)
 8000996:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000998:	4b1f      	ldr	r3, [pc, #124]	@ (8000a18 <HAL_InitTick+0xec>)
 800099a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800099e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80009a0:	4a1d      	ldr	r2, [pc, #116]	@ (8000a18 <HAL_InitTick+0xec>)
 80009a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80009a4:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80009a6:	4b1c      	ldr	r3, [pc, #112]	@ (8000a18 <HAL_InitTick+0xec>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009ac:	4b1a      	ldr	r3, [pc, #104]	@ (8000a18 <HAL_InitTick+0xec>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009b2:	4b19      	ldr	r3, [pc, #100]	@ (8000a18 <HAL_InitTick+0xec>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80009b8:	4817      	ldr	r0, [pc, #92]	@ (8000a18 <HAL_InitTick+0xec>)
 80009ba:	f001 f871 	bl	8001aa0 <HAL_TIM_Base_Init>
 80009be:	4603      	mov	r3, r0
 80009c0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80009c4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d11b      	bne.n	8000a04 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80009cc:	4812      	ldr	r0, [pc, #72]	@ (8000a18 <HAL_InitTick+0xec>)
 80009ce:	f001 f8c1 	bl	8001b54 <HAL_TIM_Base_Start_IT>
 80009d2:	4603      	mov	r3, r0
 80009d4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80009d8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d111      	bne.n	8000a04 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80009e0:	2036      	movs	r0, #54	@ 0x36
 80009e2:	f000 f997 	bl	8000d14 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	2b0f      	cmp	r3, #15
 80009ea:	d808      	bhi.n	80009fe <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80009ec:	2200      	movs	r2, #0
 80009ee:	6879      	ldr	r1, [r7, #4]
 80009f0:	2036      	movs	r0, #54	@ 0x36
 80009f2:	f000 f973 	bl	8000cdc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80009f6:	4a0a      	ldr	r2, [pc, #40]	@ (8000a20 <HAL_InitTick+0xf4>)
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	6013      	str	r3, [r2, #0]
 80009fc:	e002      	b.n	8000a04 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 80009fe:	2301      	movs	r3, #1
 8000a00:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000a04:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000a08:	4618      	mov	r0, r3
 8000a0a:	3738      	adds	r7, #56	@ 0x38
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bd80      	pop	{r7, pc}
 8000a10:	40023800 	.word	0x40023800
 8000a14:	431bde83 	.word	0x431bde83
 8000a18:	20000084 	.word	0x20000084
 8000a1c:	40001000 	.word	0x40001000
 8000a20:	20000004 	.word	0x20000004

08000a24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a24:	b480      	push	{r7}
 8000a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a28:	bf00      	nop
 8000a2a:	e7fd      	b.n	8000a28 <NMI_Handler+0x4>

08000a2c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a30:	bf00      	nop
 8000a32:	e7fd      	b.n	8000a30 <HardFault_Handler+0x4>

08000a34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a34:	b480      	push	{r7}
 8000a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a38:	bf00      	nop
 8000a3a:	e7fd      	b.n	8000a38 <MemManage_Handler+0x4>

08000a3c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a40:	bf00      	nop
 8000a42:	e7fd      	b.n	8000a40 <BusFault_Handler+0x4>

08000a44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a44:	b480      	push	{r7}
 8000a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a48:	bf00      	nop
 8000a4a:	e7fd      	b.n	8000a48 <UsageFault_Handler+0x4>

08000a4c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a50:	bf00      	nop
 8000a52:	46bd      	mov	sp, r7
 8000a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a58:	4770      	bx	lr
	...

08000a5c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000a60:	4802      	ldr	r0, [pc, #8]	@ (8000a6c <TIM6_DAC_IRQHandler+0x10>)
 8000a62:	f001 f8e7 	bl	8001c34 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000a66:	bf00      	nop
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	20000084 	.word	0x20000084

08000a70 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a70:	b480      	push	{r7}
 8000a72:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a74:	4b06      	ldr	r3, [pc, #24]	@ (8000a90 <SystemInit+0x20>)
 8000a76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a7a:	4a05      	ldr	r2, [pc, #20]	@ (8000a90 <SystemInit+0x20>)
 8000a7c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000a80:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a84:	bf00      	nop
 8000a86:	46bd      	mov	sp, r7
 8000a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8c:	4770      	bx	lr
 8000a8e:	bf00      	nop
 8000a90:	e000ed00 	.word	0xe000ed00

08000a94 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000a94:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000acc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000a98:	f7ff ffea 	bl	8000a70 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a9c:	480c      	ldr	r0, [pc, #48]	@ (8000ad0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000a9e:	490d      	ldr	r1, [pc, #52]	@ (8000ad4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000aa0:	4a0d      	ldr	r2, [pc, #52]	@ (8000ad8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000aa2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000aa4:	e002      	b.n	8000aac <LoopCopyDataInit>

08000aa6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000aa6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000aa8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000aaa:	3304      	adds	r3, #4

08000aac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000aac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000aae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ab0:	d3f9      	bcc.n	8000aa6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ab2:	4a0a      	ldr	r2, [pc, #40]	@ (8000adc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ab4:	4c0a      	ldr	r4, [pc, #40]	@ (8000ae0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000ab6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ab8:	e001      	b.n	8000abe <LoopFillZerobss>

08000aba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000aba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000abc:	3204      	adds	r2, #4

08000abe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000abe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ac0:	d3fb      	bcc.n	8000aba <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000ac2:	f004 feb1 	bl	8005828 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ac6:	f7ff fd0b 	bl	80004e0 <main>
  bx  lr    
 8000aca:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000acc:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000ad0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ad4:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000ad8:	080059a4 	.word	0x080059a4
  ldr r2, =_sbss
 8000adc:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000ae0:	20004a20 	.word	0x20004a20

08000ae4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ae4:	e7fe      	b.n	8000ae4 <ADC_IRQHandler>
	...

08000ae8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000aec:	4b0e      	ldr	r3, [pc, #56]	@ (8000b28 <HAL_Init+0x40>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	4a0d      	ldr	r2, [pc, #52]	@ (8000b28 <HAL_Init+0x40>)
 8000af2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000af6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000af8:	4b0b      	ldr	r3, [pc, #44]	@ (8000b28 <HAL_Init+0x40>)
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	4a0a      	ldr	r2, [pc, #40]	@ (8000b28 <HAL_Init+0x40>)
 8000afe:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000b02:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b04:	4b08      	ldr	r3, [pc, #32]	@ (8000b28 <HAL_Init+0x40>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	4a07      	ldr	r2, [pc, #28]	@ (8000b28 <HAL_Init+0x40>)
 8000b0a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000b0e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b10:	2003      	movs	r0, #3
 8000b12:	f000 f8d8 	bl	8000cc6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b16:	200f      	movs	r0, #15
 8000b18:	f7ff ff08 	bl	800092c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b1c:	f7ff fe92 	bl	8000844 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b20:	2300      	movs	r3, #0
}
 8000b22:	4618      	mov	r0, r3
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	40023c00 	.word	0x40023c00

08000b2c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b30:	4b06      	ldr	r3, [pc, #24]	@ (8000b4c <HAL_IncTick+0x20>)
 8000b32:	781b      	ldrb	r3, [r3, #0]
 8000b34:	461a      	mov	r2, r3
 8000b36:	4b06      	ldr	r3, [pc, #24]	@ (8000b50 <HAL_IncTick+0x24>)
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	4413      	add	r3, r2
 8000b3c:	4a04      	ldr	r2, [pc, #16]	@ (8000b50 <HAL_IncTick+0x24>)
 8000b3e:	6013      	str	r3, [r2, #0]
}
 8000b40:	bf00      	nop
 8000b42:	46bd      	mov	sp, r7
 8000b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b48:	4770      	bx	lr
 8000b4a:	bf00      	nop
 8000b4c:	20000008 	.word	0x20000008
 8000b50:	200000cc 	.word	0x200000cc

08000b54 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b54:	b480      	push	{r7}
 8000b56:	af00      	add	r7, sp, #0
  return uwTick;
 8000b58:	4b03      	ldr	r3, [pc, #12]	@ (8000b68 <HAL_GetTick+0x14>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
}
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop
 8000b68:	200000cc 	.word	0x200000cc

08000b6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	b085      	sub	sp, #20
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	f003 0307 	and.w	r3, r3, #7
 8000b7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b7c:	4b0c      	ldr	r3, [pc, #48]	@ (8000bb0 <__NVIC_SetPriorityGrouping+0x44>)
 8000b7e:	68db      	ldr	r3, [r3, #12]
 8000b80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b82:	68ba      	ldr	r2, [r7, #8]
 8000b84:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000b88:	4013      	ands	r3, r2
 8000b8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b8c:	68fb      	ldr	r3, [r7, #12]
 8000b8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b90:	68bb      	ldr	r3, [r7, #8]
 8000b92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b94:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000b98:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b9e:	4a04      	ldr	r2, [pc, #16]	@ (8000bb0 <__NVIC_SetPriorityGrouping+0x44>)
 8000ba0:	68bb      	ldr	r3, [r7, #8]
 8000ba2:	60d3      	str	r3, [r2, #12]
}
 8000ba4:	bf00      	nop
 8000ba6:	3714      	adds	r7, #20
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bae:	4770      	bx	lr
 8000bb0:	e000ed00 	.word	0xe000ed00

08000bb4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bb8:	4b04      	ldr	r3, [pc, #16]	@ (8000bcc <__NVIC_GetPriorityGrouping+0x18>)
 8000bba:	68db      	ldr	r3, [r3, #12]
 8000bbc:	0a1b      	lsrs	r3, r3, #8
 8000bbe:	f003 0307 	and.w	r3, r3, #7
}
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bca:	4770      	bx	lr
 8000bcc:	e000ed00 	.word	0xe000ed00

08000bd0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	b083      	sub	sp, #12
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	db0b      	blt.n	8000bfa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000be2:	79fb      	ldrb	r3, [r7, #7]
 8000be4:	f003 021f 	and.w	r2, r3, #31
 8000be8:	4907      	ldr	r1, [pc, #28]	@ (8000c08 <__NVIC_EnableIRQ+0x38>)
 8000bea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bee:	095b      	lsrs	r3, r3, #5
 8000bf0:	2001      	movs	r0, #1
 8000bf2:	fa00 f202 	lsl.w	r2, r0, r2
 8000bf6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000bfa:	bf00      	nop
 8000bfc:	370c      	adds	r7, #12
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop
 8000c08:	e000e100 	.word	0xe000e100

08000c0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	b083      	sub	sp, #12
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	4603      	mov	r3, r0
 8000c14:	6039      	str	r1, [r7, #0]
 8000c16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	db0a      	blt.n	8000c36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c20:	683b      	ldr	r3, [r7, #0]
 8000c22:	b2da      	uxtb	r2, r3
 8000c24:	490c      	ldr	r1, [pc, #48]	@ (8000c58 <__NVIC_SetPriority+0x4c>)
 8000c26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c2a:	0112      	lsls	r2, r2, #4
 8000c2c:	b2d2      	uxtb	r2, r2
 8000c2e:	440b      	add	r3, r1
 8000c30:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c34:	e00a      	b.n	8000c4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c36:	683b      	ldr	r3, [r7, #0]
 8000c38:	b2da      	uxtb	r2, r3
 8000c3a:	4908      	ldr	r1, [pc, #32]	@ (8000c5c <__NVIC_SetPriority+0x50>)
 8000c3c:	79fb      	ldrb	r3, [r7, #7]
 8000c3e:	f003 030f 	and.w	r3, r3, #15
 8000c42:	3b04      	subs	r3, #4
 8000c44:	0112      	lsls	r2, r2, #4
 8000c46:	b2d2      	uxtb	r2, r2
 8000c48:	440b      	add	r3, r1
 8000c4a:	761a      	strb	r2, [r3, #24]
}
 8000c4c:	bf00      	nop
 8000c4e:	370c      	adds	r7, #12
 8000c50:	46bd      	mov	sp, r7
 8000c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c56:	4770      	bx	lr
 8000c58:	e000e100 	.word	0xe000e100
 8000c5c:	e000ed00 	.word	0xe000ed00

08000c60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c60:	b480      	push	{r7}
 8000c62:	b089      	sub	sp, #36	@ 0x24
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	60f8      	str	r0, [r7, #12]
 8000c68:	60b9      	str	r1, [r7, #8]
 8000c6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c6c:	68fb      	ldr	r3, [r7, #12]
 8000c6e:	f003 0307 	and.w	r3, r3, #7
 8000c72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c74:	69fb      	ldr	r3, [r7, #28]
 8000c76:	f1c3 0307 	rsb	r3, r3, #7
 8000c7a:	2b04      	cmp	r3, #4
 8000c7c:	bf28      	it	cs
 8000c7e:	2304      	movcs	r3, #4
 8000c80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c82:	69fb      	ldr	r3, [r7, #28]
 8000c84:	3304      	adds	r3, #4
 8000c86:	2b06      	cmp	r3, #6
 8000c88:	d902      	bls.n	8000c90 <NVIC_EncodePriority+0x30>
 8000c8a:	69fb      	ldr	r3, [r7, #28]
 8000c8c:	3b03      	subs	r3, #3
 8000c8e:	e000      	b.n	8000c92 <NVIC_EncodePriority+0x32>
 8000c90:	2300      	movs	r3, #0
 8000c92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c94:	f04f 32ff 	mov.w	r2, #4294967295
 8000c98:	69bb      	ldr	r3, [r7, #24]
 8000c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c9e:	43da      	mvns	r2, r3
 8000ca0:	68bb      	ldr	r3, [r7, #8]
 8000ca2:	401a      	ands	r2, r3
 8000ca4:	697b      	ldr	r3, [r7, #20]
 8000ca6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ca8:	f04f 31ff 	mov.w	r1, #4294967295
 8000cac:	697b      	ldr	r3, [r7, #20]
 8000cae:	fa01 f303 	lsl.w	r3, r1, r3
 8000cb2:	43d9      	mvns	r1, r3
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cb8:	4313      	orrs	r3, r2
         );
}
 8000cba:	4618      	mov	r0, r3
 8000cbc:	3724      	adds	r7, #36	@ 0x24
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc4:	4770      	bx	lr

08000cc6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cc6:	b580      	push	{r7, lr}
 8000cc8:	b082      	sub	sp, #8
 8000cca:	af00      	add	r7, sp, #0
 8000ccc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cce:	6878      	ldr	r0, [r7, #4]
 8000cd0:	f7ff ff4c 	bl	8000b6c <__NVIC_SetPriorityGrouping>
}
 8000cd4:	bf00      	nop
 8000cd6:	3708      	adds	r7, #8
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd80      	pop	{r7, pc}

08000cdc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b086      	sub	sp, #24
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	60b9      	str	r1, [r7, #8]
 8000ce6:	607a      	str	r2, [r7, #4]
 8000ce8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000cea:	2300      	movs	r3, #0
 8000cec:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000cee:	f7ff ff61 	bl	8000bb4 <__NVIC_GetPriorityGrouping>
 8000cf2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cf4:	687a      	ldr	r2, [r7, #4]
 8000cf6:	68b9      	ldr	r1, [r7, #8]
 8000cf8:	6978      	ldr	r0, [r7, #20]
 8000cfa:	f7ff ffb1 	bl	8000c60 <NVIC_EncodePriority>
 8000cfe:	4602      	mov	r2, r0
 8000d00:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d04:	4611      	mov	r1, r2
 8000d06:	4618      	mov	r0, r3
 8000d08:	f7ff ff80 	bl	8000c0c <__NVIC_SetPriority>
}
 8000d0c:	bf00      	nop
 8000d0e:	3718      	adds	r7, #24
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bd80      	pop	{r7, pc}

08000d14 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b082      	sub	sp, #8
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d22:	4618      	mov	r0, r3
 8000d24:	f7ff ff54 	bl	8000bd0 <__NVIC_EnableIRQ>
}
 8000d28:	bf00      	nop
 8000d2a:	3708      	adds	r7, #8
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bd80      	pop	{r7, pc}

08000d30 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d30:	b480      	push	{r7}
 8000d32:	b089      	sub	sp, #36	@ 0x24
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
 8000d38:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000d42:	2300      	movs	r3, #0
 8000d44:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d46:	2300      	movs	r3, #0
 8000d48:	61fb      	str	r3, [r7, #28]
 8000d4a:	e177      	b.n	800103c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000d4c:	2201      	movs	r2, #1
 8000d4e:	69fb      	ldr	r3, [r7, #28]
 8000d50:	fa02 f303 	lsl.w	r3, r2, r3
 8000d54:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d56:	683b      	ldr	r3, [r7, #0]
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	697a      	ldr	r2, [r7, #20]
 8000d5c:	4013      	ands	r3, r2
 8000d5e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000d60:	693a      	ldr	r2, [r7, #16]
 8000d62:	697b      	ldr	r3, [r7, #20]
 8000d64:	429a      	cmp	r2, r3
 8000d66:	f040 8166 	bne.w	8001036 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d6a:	683b      	ldr	r3, [r7, #0]
 8000d6c:	685b      	ldr	r3, [r3, #4]
 8000d6e:	f003 0303 	and.w	r3, r3, #3
 8000d72:	2b01      	cmp	r3, #1
 8000d74:	d005      	beq.n	8000d82 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d76:	683b      	ldr	r3, [r7, #0]
 8000d78:	685b      	ldr	r3, [r3, #4]
 8000d7a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d7e:	2b02      	cmp	r3, #2
 8000d80:	d130      	bne.n	8000de4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	689b      	ldr	r3, [r3, #8]
 8000d86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000d88:	69fb      	ldr	r3, [r7, #28]
 8000d8a:	005b      	lsls	r3, r3, #1
 8000d8c:	2203      	movs	r2, #3
 8000d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d92:	43db      	mvns	r3, r3
 8000d94:	69ba      	ldr	r2, [r7, #24]
 8000d96:	4013      	ands	r3, r2
 8000d98:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d9a:	683b      	ldr	r3, [r7, #0]
 8000d9c:	68da      	ldr	r2, [r3, #12]
 8000d9e:	69fb      	ldr	r3, [r7, #28]
 8000da0:	005b      	lsls	r3, r3, #1
 8000da2:	fa02 f303 	lsl.w	r3, r2, r3
 8000da6:	69ba      	ldr	r2, [r7, #24]
 8000da8:	4313      	orrs	r3, r2
 8000daa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	69ba      	ldr	r2, [r7, #24]
 8000db0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	685b      	ldr	r3, [r3, #4]
 8000db6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000db8:	2201      	movs	r2, #1
 8000dba:	69fb      	ldr	r3, [r7, #28]
 8000dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc0:	43db      	mvns	r3, r3
 8000dc2:	69ba      	ldr	r2, [r7, #24]
 8000dc4:	4013      	ands	r3, r2
 8000dc6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000dc8:	683b      	ldr	r3, [r7, #0]
 8000dca:	685b      	ldr	r3, [r3, #4]
 8000dcc:	091b      	lsrs	r3, r3, #4
 8000dce:	f003 0201 	and.w	r2, r3, #1
 8000dd2:	69fb      	ldr	r3, [r7, #28]
 8000dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd8:	69ba      	ldr	r2, [r7, #24]
 8000dda:	4313      	orrs	r3, r2
 8000ddc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	69ba      	ldr	r2, [r7, #24]
 8000de2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000de4:	683b      	ldr	r3, [r7, #0]
 8000de6:	685b      	ldr	r3, [r3, #4]
 8000de8:	f003 0303 	and.w	r3, r3, #3
 8000dec:	2b03      	cmp	r3, #3
 8000dee:	d017      	beq.n	8000e20 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	68db      	ldr	r3, [r3, #12]
 8000df4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000df6:	69fb      	ldr	r3, [r7, #28]
 8000df8:	005b      	lsls	r3, r3, #1
 8000dfa:	2203      	movs	r2, #3
 8000dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8000e00:	43db      	mvns	r3, r3
 8000e02:	69ba      	ldr	r2, [r7, #24]
 8000e04:	4013      	ands	r3, r2
 8000e06:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	689a      	ldr	r2, [r3, #8]
 8000e0c:	69fb      	ldr	r3, [r7, #28]
 8000e0e:	005b      	lsls	r3, r3, #1
 8000e10:	fa02 f303 	lsl.w	r3, r2, r3
 8000e14:	69ba      	ldr	r2, [r7, #24]
 8000e16:	4313      	orrs	r3, r2
 8000e18:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	69ba      	ldr	r2, [r7, #24]
 8000e1e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	685b      	ldr	r3, [r3, #4]
 8000e24:	f003 0303 	and.w	r3, r3, #3
 8000e28:	2b02      	cmp	r3, #2
 8000e2a:	d123      	bne.n	8000e74 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e2c:	69fb      	ldr	r3, [r7, #28]
 8000e2e:	08da      	lsrs	r2, r3, #3
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	3208      	adds	r2, #8
 8000e34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e38:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e3a:	69fb      	ldr	r3, [r7, #28]
 8000e3c:	f003 0307 	and.w	r3, r3, #7
 8000e40:	009b      	lsls	r3, r3, #2
 8000e42:	220f      	movs	r2, #15
 8000e44:	fa02 f303 	lsl.w	r3, r2, r3
 8000e48:	43db      	mvns	r3, r3
 8000e4a:	69ba      	ldr	r2, [r7, #24]
 8000e4c:	4013      	ands	r3, r2
 8000e4e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000e50:	683b      	ldr	r3, [r7, #0]
 8000e52:	691a      	ldr	r2, [r3, #16]
 8000e54:	69fb      	ldr	r3, [r7, #28]
 8000e56:	f003 0307 	and.w	r3, r3, #7
 8000e5a:	009b      	lsls	r3, r3, #2
 8000e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e60:	69ba      	ldr	r2, [r7, #24]
 8000e62:	4313      	orrs	r3, r2
 8000e64:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000e66:	69fb      	ldr	r3, [r7, #28]
 8000e68:	08da      	lsrs	r2, r3, #3
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	3208      	adds	r2, #8
 8000e6e:	69b9      	ldr	r1, [r7, #24]
 8000e70:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000e7a:	69fb      	ldr	r3, [r7, #28]
 8000e7c:	005b      	lsls	r3, r3, #1
 8000e7e:	2203      	movs	r2, #3
 8000e80:	fa02 f303 	lsl.w	r3, r2, r3
 8000e84:	43db      	mvns	r3, r3
 8000e86:	69ba      	ldr	r2, [r7, #24]
 8000e88:	4013      	ands	r3, r2
 8000e8a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e8c:	683b      	ldr	r3, [r7, #0]
 8000e8e:	685b      	ldr	r3, [r3, #4]
 8000e90:	f003 0203 	and.w	r2, r3, #3
 8000e94:	69fb      	ldr	r3, [r7, #28]
 8000e96:	005b      	lsls	r3, r3, #1
 8000e98:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9c:	69ba      	ldr	r2, [r7, #24]
 8000e9e:	4313      	orrs	r3, r2
 8000ea0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	69ba      	ldr	r2, [r7, #24]
 8000ea6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	685b      	ldr	r3, [r3, #4]
 8000eac:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	f000 80c0 	beq.w	8001036 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	60fb      	str	r3, [r7, #12]
 8000eba:	4b66      	ldr	r3, [pc, #408]	@ (8001054 <HAL_GPIO_Init+0x324>)
 8000ebc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ebe:	4a65      	ldr	r2, [pc, #404]	@ (8001054 <HAL_GPIO_Init+0x324>)
 8000ec0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ec4:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ec6:	4b63      	ldr	r3, [pc, #396]	@ (8001054 <HAL_GPIO_Init+0x324>)
 8000ec8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000eca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000ece:	60fb      	str	r3, [r7, #12]
 8000ed0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000ed2:	4a61      	ldr	r2, [pc, #388]	@ (8001058 <HAL_GPIO_Init+0x328>)
 8000ed4:	69fb      	ldr	r3, [r7, #28]
 8000ed6:	089b      	lsrs	r3, r3, #2
 8000ed8:	3302      	adds	r3, #2
 8000eda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ede:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000ee0:	69fb      	ldr	r3, [r7, #28]
 8000ee2:	f003 0303 	and.w	r3, r3, #3
 8000ee6:	009b      	lsls	r3, r3, #2
 8000ee8:	220f      	movs	r2, #15
 8000eea:	fa02 f303 	lsl.w	r3, r2, r3
 8000eee:	43db      	mvns	r3, r3
 8000ef0:	69ba      	ldr	r2, [r7, #24]
 8000ef2:	4013      	ands	r3, r2
 8000ef4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	4a58      	ldr	r2, [pc, #352]	@ (800105c <HAL_GPIO_Init+0x32c>)
 8000efa:	4293      	cmp	r3, r2
 8000efc:	d037      	beq.n	8000f6e <HAL_GPIO_Init+0x23e>
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	4a57      	ldr	r2, [pc, #348]	@ (8001060 <HAL_GPIO_Init+0x330>)
 8000f02:	4293      	cmp	r3, r2
 8000f04:	d031      	beq.n	8000f6a <HAL_GPIO_Init+0x23a>
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	4a56      	ldr	r2, [pc, #344]	@ (8001064 <HAL_GPIO_Init+0x334>)
 8000f0a:	4293      	cmp	r3, r2
 8000f0c:	d02b      	beq.n	8000f66 <HAL_GPIO_Init+0x236>
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	4a55      	ldr	r2, [pc, #340]	@ (8001068 <HAL_GPIO_Init+0x338>)
 8000f12:	4293      	cmp	r3, r2
 8000f14:	d025      	beq.n	8000f62 <HAL_GPIO_Init+0x232>
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	4a54      	ldr	r2, [pc, #336]	@ (800106c <HAL_GPIO_Init+0x33c>)
 8000f1a:	4293      	cmp	r3, r2
 8000f1c:	d01f      	beq.n	8000f5e <HAL_GPIO_Init+0x22e>
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	4a53      	ldr	r2, [pc, #332]	@ (8001070 <HAL_GPIO_Init+0x340>)
 8000f22:	4293      	cmp	r3, r2
 8000f24:	d019      	beq.n	8000f5a <HAL_GPIO_Init+0x22a>
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	4a52      	ldr	r2, [pc, #328]	@ (8001074 <HAL_GPIO_Init+0x344>)
 8000f2a:	4293      	cmp	r3, r2
 8000f2c:	d013      	beq.n	8000f56 <HAL_GPIO_Init+0x226>
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	4a51      	ldr	r2, [pc, #324]	@ (8001078 <HAL_GPIO_Init+0x348>)
 8000f32:	4293      	cmp	r3, r2
 8000f34:	d00d      	beq.n	8000f52 <HAL_GPIO_Init+0x222>
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	4a50      	ldr	r2, [pc, #320]	@ (800107c <HAL_GPIO_Init+0x34c>)
 8000f3a:	4293      	cmp	r3, r2
 8000f3c:	d007      	beq.n	8000f4e <HAL_GPIO_Init+0x21e>
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	4a4f      	ldr	r2, [pc, #316]	@ (8001080 <HAL_GPIO_Init+0x350>)
 8000f42:	4293      	cmp	r3, r2
 8000f44:	d101      	bne.n	8000f4a <HAL_GPIO_Init+0x21a>
 8000f46:	2309      	movs	r3, #9
 8000f48:	e012      	b.n	8000f70 <HAL_GPIO_Init+0x240>
 8000f4a:	230a      	movs	r3, #10
 8000f4c:	e010      	b.n	8000f70 <HAL_GPIO_Init+0x240>
 8000f4e:	2308      	movs	r3, #8
 8000f50:	e00e      	b.n	8000f70 <HAL_GPIO_Init+0x240>
 8000f52:	2307      	movs	r3, #7
 8000f54:	e00c      	b.n	8000f70 <HAL_GPIO_Init+0x240>
 8000f56:	2306      	movs	r3, #6
 8000f58:	e00a      	b.n	8000f70 <HAL_GPIO_Init+0x240>
 8000f5a:	2305      	movs	r3, #5
 8000f5c:	e008      	b.n	8000f70 <HAL_GPIO_Init+0x240>
 8000f5e:	2304      	movs	r3, #4
 8000f60:	e006      	b.n	8000f70 <HAL_GPIO_Init+0x240>
 8000f62:	2303      	movs	r3, #3
 8000f64:	e004      	b.n	8000f70 <HAL_GPIO_Init+0x240>
 8000f66:	2302      	movs	r3, #2
 8000f68:	e002      	b.n	8000f70 <HAL_GPIO_Init+0x240>
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	e000      	b.n	8000f70 <HAL_GPIO_Init+0x240>
 8000f6e:	2300      	movs	r3, #0
 8000f70:	69fa      	ldr	r2, [r7, #28]
 8000f72:	f002 0203 	and.w	r2, r2, #3
 8000f76:	0092      	lsls	r2, r2, #2
 8000f78:	4093      	lsls	r3, r2
 8000f7a:	69ba      	ldr	r2, [r7, #24]
 8000f7c:	4313      	orrs	r3, r2
 8000f7e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f80:	4935      	ldr	r1, [pc, #212]	@ (8001058 <HAL_GPIO_Init+0x328>)
 8000f82:	69fb      	ldr	r3, [r7, #28]
 8000f84:	089b      	lsrs	r3, r3, #2
 8000f86:	3302      	adds	r3, #2
 8000f88:	69ba      	ldr	r2, [r7, #24]
 8000f8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f8e:	4b3d      	ldr	r3, [pc, #244]	@ (8001084 <HAL_GPIO_Init+0x354>)
 8000f90:	689b      	ldr	r3, [r3, #8]
 8000f92:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f94:	693b      	ldr	r3, [r7, #16]
 8000f96:	43db      	mvns	r3, r3
 8000f98:	69ba      	ldr	r2, [r7, #24]
 8000f9a:	4013      	ands	r3, r2
 8000f9c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000f9e:	683b      	ldr	r3, [r7, #0]
 8000fa0:	685b      	ldr	r3, [r3, #4]
 8000fa2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d003      	beq.n	8000fb2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8000faa:	69ba      	ldr	r2, [r7, #24]
 8000fac:	693b      	ldr	r3, [r7, #16]
 8000fae:	4313      	orrs	r3, r2
 8000fb0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000fb2:	4a34      	ldr	r2, [pc, #208]	@ (8001084 <HAL_GPIO_Init+0x354>)
 8000fb4:	69bb      	ldr	r3, [r7, #24]
 8000fb6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000fb8:	4b32      	ldr	r3, [pc, #200]	@ (8001084 <HAL_GPIO_Init+0x354>)
 8000fba:	68db      	ldr	r3, [r3, #12]
 8000fbc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fbe:	693b      	ldr	r3, [r7, #16]
 8000fc0:	43db      	mvns	r3, r3
 8000fc2:	69ba      	ldr	r2, [r7, #24]
 8000fc4:	4013      	ands	r3, r2
 8000fc6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	685b      	ldr	r3, [r3, #4]
 8000fcc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d003      	beq.n	8000fdc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000fd4:	69ba      	ldr	r2, [r7, #24]
 8000fd6:	693b      	ldr	r3, [r7, #16]
 8000fd8:	4313      	orrs	r3, r2
 8000fda:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000fdc:	4a29      	ldr	r2, [pc, #164]	@ (8001084 <HAL_GPIO_Init+0x354>)
 8000fde:	69bb      	ldr	r3, [r7, #24]
 8000fe0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000fe2:	4b28      	ldr	r3, [pc, #160]	@ (8001084 <HAL_GPIO_Init+0x354>)
 8000fe4:	685b      	ldr	r3, [r3, #4]
 8000fe6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fe8:	693b      	ldr	r3, [r7, #16]
 8000fea:	43db      	mvns	r3, r3
 8000fec:	69ba      	ldr	r2, [r7, #24]
 8000fee:	4013      	ands	r3, r2
 8000ff0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000ff2:	683b      	ldr	r3, [r7, #0]
 8000ff4:	685b      	ldr	r3, [r3, #4]
 8000ff6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d003      	beq.n	8001006 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8000ffe:	69ba      	ldr	r2, [r7, #24]
 8001000:	693b      	ldr	r3, [r7, #16]
 8001002:	4313      	orrs	r3, r2
 8001004:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001006:	4a1f      	ldr	r2, [pc, #124]	@ (8001084 <HAL_GPIO_Init+0x354>)
 8001008:	69bb      	ldr	r3, [r7, #24]
 800100a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800100c:	4b1d      	ldr	r3, [pc, #116]	@ (8001084 <HAL_GPIO_Init+0x354>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001012:	693b      	ldr	r3, [r7, #16]
 8001014:	43db      	mvns	r3, r3
 8001016:	69ba      	ldr	r2, [r7, #24]
 8001018:	4013      	ands	r3, r2
 800101a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	685b      	ldr	r3, [r3, #4]
 8001020:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001024:	2b00      	cmp	r3, #0
 8001026:	d003      	beq.n	8001030 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001028:	69ba      	ldr	r2, [r7, #24]
 800102a:	693b      	ldr	r3, [r7, #16]
 800102c:	4313      	orrs	r3, r2
 800102e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001030:	4a14      	ldr	r2, [pc, #80]	@ (8001084 <HAL_GPIO_Init+0x354>)
 8001032:	69bb      	ldr	r3, [r7, #24]
 8001034:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001036:	69fb      	ldr	r3, [r7, #28]
 8001038:	3301      	adds	r3, #1
 800103a:	61fb      	str	r3, [r7, #28]
 800103c:	69fb      	ldr	r3, [r7, #28]
 800103e:	2b0f      	cmp	r3, #15
 8001040:	f67f ae84 	bls.w	8000d4c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001044:	bf00      	nop
 8001046:	bf00      	nop
 8001048:	3724      	adds	r7, #36	@ 0x24
 800104a:	46bd      	mov	sp, r7
 800104c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop
 8001054:	40023800 	.word	0x40023800
 8001058:	40013800 	.word	0x40013800
 800105c:	40020000 	.word	0x40020000
 8001060:	40020400 	.word	0x40020400
 8001064:	40020800 	.word	0x40020800
 8001068:	40020c00 	.word	0x40020c00
 800106c:	40021000 	.word	0x40021000
 8001070:	40021400 	.word	0x40021400
 8001074:	40021800 	.word	0x40021800
 8001078:	40021c00 	.word	0x40021c00
 800107c:	40022000 	.word	0x40022000
 8001080:	40022400 	.word	0x40022400
 8001084:	40013c00 	.word	0x40013c00

08001088 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001088:	b480      	push	{r7}
 800108a:	b085      	sub	sp, #20
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
 8001090:	460b      	mov	r3, r1
 8001092:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	691a      	ldr	r2, [r3, #16]
 8001098:	887b      	ldrh	r3, [r7, #2]
 800109a:	4013      	ands	r3, r2
 800109c:	2b00      	cmp	r3, #0
 800109e:	d002      	beq.n	80010a6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80010a0:	2301      	movs	r3, #1
 80010a2:	73fb      	strb	r3, [r7, #15]
 80010a4:	e001      	b.n	80010aa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80010a6:	2300      	movs	r3, #0
 80010a8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80010aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80010ac:	4618      	mov	r0, r3
 80010ae:	3714      	adds	r7, #20
 80010b0:	46bd      	mov	sp, r7
 80010b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b6:	4770      	bx	lr

080010b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010b8:	b480      	push	{r7}
 80010ba:	b083      	sub	sp, #12
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
 80010c0:	460b      	mov	r3, r1
 80010c2:	807b      	strh	r3, [r7, #2]
 80010c4:	4613      	mov	r3, r2
 80010c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80010c8:	787b      	ldrb	r3, [r7, #1]
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d003      	beq.n	80010d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80010ce:	887a      	ldrh	r2, [r7, #2]
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80010d4:	e003      	b.n	80010de <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80010d6:	887b      	ldrh	r3, [r7, #2]
 80010d8:	041a      	lsls	r2, r3, #16
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	619a      	str	r2, [r3, #24]
}
 80010de:	bf00      	nop
 80010e0:	370c      	adds	r7, #12
 80010e2:	46bd      	mov	sp, r7
 80010e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e8:	4770      	bx	lr
	...

080010ec <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b082      	sub	sp, #8
 80010f0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80010f2:	2300      	movs	r3, #0
 80010f4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80010f6:	2300      	movs	r3, #0
 80010f8:	603b      	str	r3, [r7, #0]
 80010fa:	4b20      	ldr	r3, [pc, #128]	@ (800117c <HAL_PWREx_EnableOverDrive+0x90>)
 80010fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010fe:	4a1f      	ldr	r2, [pc, #124]	@ (800117c <HAL_PWREx_EnableOverDrive+0x90>)
 8001100:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001104:	6413      	str	r3, [r2, #64]	@ 0x40
 8001106:	4b1d      	ldr	r3, [pc, #116]	@ (800117c <HAL_PWREx_EnableOverDrive+0x90>)
 8001108:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800110a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800110e:	603b      	str	r3, [r7, #0]
 8001110:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001112:	4b1b      	ldr	r3, [pc, #108]	@ (8001180 <HAL_PWREx_EnableOverDrive+0x94>)
 8001114:	2201      	movs	r2, #1
 8001116:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001118:	f7ff fd1c 	bl	8000b54 <HAL_GetTick>
 800111c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800111e:	e009      	b.n	8001134 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001120:	f7ff fd18 	bl	8000b54 <HAL_GetTick>
 8001124:	4602      	mov	r2, r0
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	1ad3      	subs	r3, r2, r3
 800112a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800112e:	d901      	bls.n	8001134 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8001130:	2303      	movs	r3, #3
 8001132:	e01f      	b.n	8001174 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001134:	4b13      	ldr	r3, [pc, #76]	@ (8001184 <HAL_PWREx_EnableOverDrive+0x98>)
 8001136:	685b      	ldr	r3, [r3, #4]
 8001138:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800113c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001140:	d1ee      	bne.n	8001120 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001142:	4b11      	ldr	r3, [pc, #68]	@ (8001188 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001144:	2201      	movs	r2, #1
 8001146:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001148:	f7ff fd04 	bl	8000b54 <HAL_GetTick>
 800114c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800114e:	e009      	b.n	8001164 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001150:	f7ff fd00 	bl	8000b54 <HAL_GetTick>
 8001154:	4602      	mov	r2, r0
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	1ad3      	subs	r3, r2, r3
 800115a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800115e:	d901      	bls.n	8001164 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8001160:	2303      	movs	r3, #3
 8001162:	e007      	b.n	8001174 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001164:	4b07      	ldr	r3, [pc, #28]	@ (8001184 <HAL_PWREx_EnableOverDrive+0x98>)
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800116c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8001170:	d1ee      	bne.n	8001150 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8001172:	2300      	movs	r3, #0
}
 8001174:	4618      	mov	r0, r3
 8001176:	3708      	adds	r7, #8
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}
 800117c:	40023800 	.word	0x40023800
 8001180:	420e0040 	.word	0x420e0040
 8001184:	40007000 	.word	0x40007000
 8001188:	420e0044 	.word	0x420e0044

0800118c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b086      	sub	sp, #24
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	2b00      	cmp	r3, #0
 8001198:	d101      	bne.n	800119e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800119a:	2301      	movs	r3, #1
 800119c:	e267      	b.n	800166e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	f003 0301 	and.w	r3, r3, #1
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d075      	beq.n	8001296 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80011aa:	4b88      	ldr	r3, [pc, #544]	@ (80013cc <HAL_RCC_OscConfig+0x240>)
 80011ac:	689b      	ldr	r3, [r3, #8]
 80011ae:	f003 030c 	and.w	r3, r3, #12
 80011b2:	2b04      	cmp	r3, #4
 80011b4:	d00c      	beq.n	80011d0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80011b6:	4b85      	ldr	r3, [pc, #532]	@ (80013cc <HAL_RCC_OscConfig+0x240>)
 80011b8:	689b      	ldr	r3, [r3, #8]
 80011ba:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80011be:	2b08      	cmp	r3, #8
 80011c0:	d112      	bne.n	80011e8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80011c2:	4b82      	ldr	r3, [pc, #520]	@ (80013cc <HAL_RCC_OscConfig+0x240>)
 80011c4:	685b      	ldr	r3, [r3, #4]
 80011c6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80011ca:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80011ce:	d10b      	bne.n	80011e8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011d0:	4b7e      	ldr	r3, [pc, #504]	@ (80013cc <HAL_RCC_OscConfig+0x240>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d05b      	beq.n	8001294 <HAL_RCC_OscConfig+0x108>
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	685b      	ldr	r3, [r3, #4]
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d157      	bne.n	8001294 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80011e4:	2301      	movs	r3, #1
 80011e6:	e242      	b.n	800166e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	685b      	ldr	r3, [r3, #4]
 80011ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80011f0:	d106      	bne.n	8001200 <HAL_RCC_OscConfig+0x74>
 80011f2:	4b76      	ldr	r3, [pc, #472]	@ (80013cc <HAL_RCC_OscConfig+0x240>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	4a75      	ldr	r2, [pc, #468]	@ (80013cc <HAL_RCC_OscConfig+0x240>)
 80011f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80011fc:	6013      	str	r3, [r2, #0]
 80011fe:	e01d      	b.n	800123c <HAL_RCC_OscConfig+0xb0>
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	685b      	ldr	r3, [r3, #4]
 8001204:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001208:	d10c      	bne.n	8001224 <HAL_RCC_OscConfig+0x98>
 800120a:	4b70      	ldr	r3, [pc, #448]	@ (80013cc <HAL_RCC_OscConfig+0x240>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	4a6f      	ldr	r2, [pc, #444]	@ (80013cc <HAL_RCC_OscConfig+0x240>)
 8001210:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001214:	6013      	str	r3, [r2, #0]
 8001216:	4b6d      	ldr	r3, [pc, #436]	@ (80013cc <HAL_RCC_OscConfig+0x240>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	4a6c      	ldr	r2, [pc, #432]	@ (80013cc <HAL_RCC_OscConfig+0x240>)
 800121c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001220:	6013      	str	r3, [r2, #0]
 8001222:	e00b      	b.n	800123c <HAL_RCC_OscConfig+0xb0>
 8001224:	4b69      	ldr	r3, [pc, #420]	@ (80013cc <HAL_RCC_OscConfig+0x240>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	4a68      	ldr	r2, [pc, #416]	@ (80013cc <HAL_RCC_OscConfig+0x240>)
 800122a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800122e:	6013      	str	r3, [r2, #0]
 8001230:	4b66      	ldr	r3, [pc, #408]	@ (80013cc <HAL_RCC_OscConfig+0x240>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	4a65      	ldr	r2, [pc, #404]	@ (80013cc <HAL_RCC_OscConfig+0x240>)
 8001236:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800123a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	685b      	ldr	r3, [r3, #4]
 8001240:	2b00      	cmp	r3, #0
 8001242:	d013      	beq.n	800126c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001244:	f7ff fc86 	bl	8000b54 <HAL_GetTick>
 8001248:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800124a:	e008      	b.n	800125e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800124c:	f7ff fc82 	bl	8000b54 <HAL_GetTick>
 8001250:	4602      	mov	r2, r0
 8001252:	693b      	ldr	r3, [r7, #16]
 8001254:	1ad3      	subs	r3, r2, r3
 8001256:	2b64      	cmp	r3, #100	@ 0x64
 8001258:	d901      	bls.n	800125e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800125a:	2303      	movs	r3, #3
 800125c:	e207      	b.n	800166e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800125e:	4b5b      	ldr	r3, [pc, #364]	@ (80013cc <HAL_RCC_OscConfig+0x240>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001266:	2b00      	cmp	r3, #0
 8001268:	d0f0      	beq.n	800124c <HAL_RCC_OscConfig+0xc0>
 800126a:	e014      	b.n	8001296 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800126c:	f7ff fc72 	bl	8000b54 <HAL_GetTick>
 8001270:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001272:	e008      	b.n	8001286 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001274:	f7ff fc6e 	bl	8000b54 <HAL_GetTick>
 8001278:	4602      	mov	r2, r0
 800127a:	693b      	ldr	r3, [r7, #16]
 800127c:	1ad3      	subs	r3, r2, r3
 800127e:	2b64      	cmp	r3, #100	@ 0x64
 8001280:	d901      	bls.n	8001286 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001282:	2303      	movs	r3, #3
 8001284:	e1f3      	b.n	800166e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001286:	4b51      	ldr	r3, [pc, #324]	@ (80013cc <HAL_RCC_OscConfig+0x240>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800128e:	2b00      	cmp	r3, #0
 8001290:	d1f0      	bne.n	8001274 <HAL_RCC_OscConfig+0xe8>
 8001292:	e000      	b.n	8001296 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001294:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	f003 0302 	and.w	r3, r3, #2
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d063      	beq.n	800136a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80012a2:	4b4a      	ldr	r3, [pc, #296]	@ (80013cc <HAL_RCC_OscConfig+0x240>)
 80012a4:	689b      	ldr	r3, [r3, #8]
 80012a6:	f003 030c 	and.w	r3, r3, #12
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d00b      	beq.n	80012c6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80012ae:	4b47      	ldr	r3, [pc, #284]	@ (80013cc <HAL_RCC_OscConfig+0x240>)
 80012b0:	689b      	ldr	r3, [r3, #8]
 80012b2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80012b6:	2b08      	cmp	r3, #8
 80012b8:	d11c      	bne.n	80012f4 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80012ba:	4b44      	ldr	r3, [pc, #272]	@ (80013cc <HAL_RCC_OscConfig+0x240>)
 80012bc:	685b      	ldr	r3, [r3, #4]
 80012be:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d116      	bne.n	80012f4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012c6:	4b41      	ldr	r3, [pc, #260]	@ (80013cc <HAL_RCC_OscConfig+0x240>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f003 0302 	and.w	r3, r3, #2
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d005      	beq.n	80012de <HAL_RCC_OscConfig+0x152>
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	68db      	ldr	r3, [r3, #12]
 80012d6:	2b01      	cmp	r3, #1
 80012d8:	d001      	beq.n	80012de <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80012da:	2301      	movs	r3, #1
 80012dc:	e1c7      	b.n	800166e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012de:	4b3b      	ldr	r3, [pc, #236]	@ (80013cc <HAL_RCC_OscConfig+0x240>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	691b      	ldr	r3, [r3, #16]
 80012ea:	00db      	lsls	r3, r3, #3
 80012ec:	4937      	ldr	r1, [pc, #220]	@ (80013cc <HAL_RCC_OscConfig+0x240>)
 80012ee:	4313      	orrs	r3, r2
 80012f0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012f2:	e03a      	b.n	800136a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	68db      	ldr	r3, [r3, #12]
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d020      	beq.n	800133e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80012fc:	4b34      	ldr	r3, [pc, #208]	@ (80013d0 <HAL_RCC_OscConfig+0x244>)
 80012fe:	2201      	movs	r2, #1
 8001300:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001302:	f7ff fc27 	bl	8000b54 <HAL_GetTick>
 8001306:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001308:	e008      	b.n	800131c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800130a:	f7ff fc23 	bl	8000b54 <HAL_GetTick>
 800130e:	4602      	mov	r2, r0
 8001310:	693b      	ldr	r3, [r7, #16]
 8001312:	1ad3      	subs	r3, r2, r3
 8001314:	2b02      	cmp	r3, #2
 8001316:	d901      	bls.n	800131c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001318:	2303      	movs	r3, #3
 800131a:	e1a8      	b.n	800166e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800131c:	4b2b      	ldr	r3, [pc, #172]	@ (80013cc <HAL_RCC_OscConfig+0x240>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	f003 0302 	and.w	r3, r3, #2
 8001324:	2b00      	cmp	r3, #0
 8001326:	d0f0      	beq.n	800130a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001328:	4b28      	ldr	r3, [pc, #160]	@ (80013cc <HAL_RCC_OscConfig+0x240>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	691b      	ldr	r3, [r3, #16]
 8001334:	00db      	lsls	r3, r3, #3
 8001336:	4925      	ldr	r1, [pc, #148]	@ (80013cc <HAL_RCC_OscConfig+0x240>)
 8001338:	4313      	orrs	r3, r2
 800133a:	600b      	str	r3, [r1, #0]
 800133c:	e015      	b.n	800136a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800133e:	4b24      	ldr	r3, [pc, #144]	@ (80013d0 <HAL_RCC_OscConfig+0x244>)
 8001340:	2200      	movs	r2, #0
 8001342:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001344:	f7ff fc06 	bl	8000b54 <HAL_GetTick>
 8001348:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800134a:	e008      	b.n	800135e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800134c:	f7ff fc02 	bl	8000b54 <HAL_GetTick>
 8001350:	4602      	mov	r2, r0
 8001352:	693b      	ldr	r3, [r7, #16]
 8001354:	1ad3      	subs	r3, r2, r3
 8001356:	2b02      	cmp	r3, #2
 8001358:	d901      	bls.n	800135e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800135a:	2303      	movs	r3, #3
 800135c:	e187      	b.n	800166e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800135e:	4b1b      	ldr	r3, [pc, #108]	@ (80013cc <HAL_RCC_OscConfig+0x240>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f003 0302 	and.w	r3, r3, #2
 8001366:	2b00      	cmp	r3, #0
 8001368:	d1f0      	bne.n	800134c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f003 0308 	and.w	r3, r3, #8
 8001372:	2b00      	cmp	r3, #0
 8001374:	d036      	beq.n	80013e4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	695b      	ldr	r3, [r3, #20]
 800137a:	2b00      	cmp	r3, #0
 800137c:	d016      	beq.n	80013ac <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800137e:	4b15      	ldr	r3, [pc, #84]	@ (80013d4 <HAL_RCC_OscConfig+0x248>)
 8001380:	2201      	movs	r2, #1
 8001382:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001384:	f7ff fbe6 	bl	8000b54 <HAL_GetTick>
 8001388:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800138a:	e008      	b.n	800139e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800138c:	f7ff fbe2 	bl	8000b54 <HAL_GetTick>
 8001390:	4602      	mov	r2, r0
 8001392:	693b      	ldr	r3, [r7, #16]
 8001394:	1ad3      	subs	r3, r2, r3
 8001396:	2b02      	cmp	r3, #2
 8001398:	d901      	bls.n	800139e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800139a:	2303      	movs	r3, #3
 800139c:	e167      	b.n	800166e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800139e:	4b0b      	ldr	r3, [pc, #44]	@ (80013cc <HAL_RCC_OscConfig+0x240>)
 80013a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80013a2:	f003 0302 	and.w	r3, r3, #2
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d0f0      	beq.n	800138c <HAL_RCC_OscConfig+0x200>
 80013aa:	e01b      	b.n	80013e4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80013ac:	4b09      	ldr	r3, [pc, #36]	@ (80013d4 <HAL_RCC_OscConfig+0x248>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013b2:	f7ff fbcf 	bl	8000b54 <HAL_GetTick>
 80013b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013b8:	e00e      	b.n	80013d8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80013ba:	f7ff fbcb 	bl	8000b54 <HAL_GetTick>
 80013be:	4602      	mov	r2, r0
 80013c0:	693b      	ldr	r3, [r7, #16]
 80013c2:	1ad3      	subs	r3, r2, r3
 80013c4:	2b02      	cmp	r3, #2
 80013c6:	d907      	bls.n	80013d8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80013c8:	2303      	movs	r3, #3
 80013ca:	e150      	b.n	800166e <HAL_RCC_OscConfig+0x4e2>
 80013cc:	40023800 	.word	0x40023800
 80013d0:	42470000 	.word	0x42470000
 80013d4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013d8:	4b88      	ldr	r3, [pc, #544]	@ (80015fc <HAL_RCC_OscConfig+0x470>)
 80013da:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80013dc:	f003 0302 	and.w	r3, r3, #2
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d1ea      	bne.n	80013ba <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f003 0304 	and.w	r3, r3, #4
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	f000 8097 	beq.w	8001520 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80013f2:	2300      	movs	r3, #0
 80013f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80013f6:	4b81      	ldr	r3, [pc, #516]	@ (80015fc <HAL_RCC_OscConfig+0x470>)
 80013f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d10f      	bne.n	8001422 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001402:	2300      	movs	r3, #0
 8001404:	60bb      	str	r3, [r7, #8]
 8001406:	4b7d      	ldr	r3, [pc, #500]	@ (80015fc <HAL_RCC_OscConfig+0x470>)
 8001408:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800140a:	4a7c      	ldr	r2, [pc, #496]	@ (80015fc <HAL_RCC_OscConfig+0x470>)
 800140c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001410:	6413      	str	r3, [r2, #64]	@ 0x40
 8001412:	4b7a      	ldr	r3, [pc, #488]	@ (80015fc <HAL_RCC_OscConfig+0x470>)
 8001414:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001416:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800141a:	60bb      	str	r3, [r7, #8]
 800141c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800141e:	2301      	movs	r3, #1
 8001420:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001422:	4b77      	ldr	r3, [pc, #476]	@ (8001600 <HAL_RCC_OscConfig+0x474>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800142a:	2b00      	cmp	r3, #0
 800142c:	d118      	bne.n	8001460 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800142e:	4b74      	ldr	r3, [pc, #464]	@ (8001600 <HAL_RCC_OscConfig+0x474>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	4a73      	ldr	r2, [pc, #460]	@ (8001600 <HAL_RCC_OscConfig+0x474>)
 8001434:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001438:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800143a:	f7ff fb8b 	bl	8000b54 <HAL_GetTick>
 800143e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001440:	e008      	b.n	8001454 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001442:	f7ff fb87 	bl	8000b54 <HAL_GetTick>
 8001446:	4602      	mov	r2, r0
 8001448:	693b      	ldr	r3, [r7, #16]
 800144a:	1ad3      	subs	r3, r2, r3
 800144c:	2b02      	cmp	r3, #2
 800144e:	d901      	bls.n	8001454 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001450:	2303      	movs	r3, #3
 8001452:	e10c      	b.n	800166e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001454:	4b6a      	ldr	r3, [pc, #424]	@ (8001600 <HAL_RCC_OscConfig+0x474>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800145c:	2b00      	cmp	r3, #0
 800145e:	d0f0      	beq.n	8001442 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	689b      	ldr	r3, [r3, #8]
 8001464:	2b01      	cmp	r3, #1
 8001466:	d106      	bne.n	8001476 <HAL_RCC_OscConfig+0x2ea>
 8001468:	4b64      	ldr	r3, [pc, #400]	@ (80015fc <HAL_RCC_OscConfig+0x470>)
 800146a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800146c:	4a63      	ldr	r2, [pc, #396]	@ (80015fc <HAL_RCC_OscConfig+0x470>)
 800146e:	f043 0301 	orr.w	r3, r3, #1
 8001472:	6713      	str	r3, [r2, #112]	@ 0x70
 8001474:	e01c      	b.n	80014b0 <HAL_RCC_OscConfig+0x324>
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	689b      	ldr	r3, [r3, #8]
 800147a:	2b05      	cmp	r3, #5
 800147c:	d10c      	bne.n	8001498 <HAL_RCC_OscConfig+0x30c>
 800147e:	4b5f      	ldr	r3, [pc, #380]	@ (80015fc <HAL_RCC_OscConfig+0x470>)
 8001480:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001482:	4a5e      	ldr	r2, [pc, #376]	@ (80015fc <HAL_RCC_OscConfig+0x470>)
 8001484:	f043 0304 	orr.w	r3, r3, #4
 8001488:	6713      	str	r3, [r2, #112]	@ 0x70
 800148a:	4b5c      	ldr	r3, [pc, #368]	@ (80015fc <HAL_RCC_OscConfig+0x470>)
 800148c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800148e:	4a5b      	ldr	r2, [pc, #364]	@ (80015fc <HAL_RCC_OscConfig+0x470>)
 8001490:	f043 0301 	orr.w	r3, r3, #1
 8001494:	6713      	str	r3, [r2, #112]	@ 0x70
 8001496:	e00b      	b.n	80014b0 <HAL_RCC_OscConfig+0x324>
 8001498:	4b58      	ldr	r3, [pc, #352]	@ (80015fc <HAL_RCC_OscConfig+0x470>)
 800149a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800149c:	4a57      	ldr	r2, [pc, #348]	@ (80015fc <HAL_RCC_OscConfig+0x470>)
 800149e:	f023 0301 	bic.w	r3, r3, #1
 80014a2:	6713      	str	r3, [r2, #112]	@ 0x70
 80014a4:	4b55      	ldr	r3, [pc, #340]	@ (80015fc <HAL_RCC_OscConfig+0x470>)
 80014a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80014a8:	4a54      	ldr	r2, [pc, #336]	@ (80015fc <HAL_RCC_OscConfig+0x470>)
 80014aa:	f023 0304 	bic.w	r3, r3, #4
 80014ae:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	689b      	ldr	r3, [r3, #8]
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d015      	beq.n	80014e4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014b8:	f7ff fb4c 	bl	8000b54 <HAL_GetTick>
 80014bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014be:	e00a      	b.n	80014d6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014c0:	f7ff fb48 	bl	8000b54 <HAL_GetTick>
 80014c4:	4602      	mov	r2, r0
 80014c6:	693b      	ldr	r3, [r7, #16]
 80014c8:	1ad3      	subs	r3, r2, r3
 80014ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80014ce:	4293      	cmp	r3, r2
 80014d0:	d901      	bls.n	80014d6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80014d2:	2303      	movs	r3, #3
 80014d4:	e0cb      	b.n	800166e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014d6:	4b49      	ldr	r3, [pc, #292]	@ (80015fc <HAL_RCC_OscConfig+0x470>)
 80014d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80014da:	f003 0302 	and.w	r3, r3, #2
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d0ee      	beq.n	80014c0 <HAL_RCC_OscConfig+0x334>
 80014e2:	e014      	b.n	800150e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014e4:	f7ff fb36 	bl	8000b54 <HAL_GetTick>
 80014e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014ea:	e00a      	b.n	8001502 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014ec:	f7ff fb32 	bl	8000b54 <HAL_GetTick>
 80014f0:	4602      	mov	r2, r0
 80014f2:	693b      	ldr	r3, [r7, #16]
 80014f4:	1ad3      	subs	r3, r2, r3
 80014f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80014fa:	4293      	cmp	r3, r2
 80014fc:	d901      	bls.n	8001502 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80014fe:	2303      	movs	r3, #3
 8001500:	e0b5      	b.n	800166e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001502:	4b3e      	ldr	r3, [pc, #248]	@ (80015fc <HAL_RCC_OscConfig+0x470>)
 8001504:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001506:	f003 0302 	and.w	r3, r3, #2
 800150a:	2b00      	cmp	r3, #0
 800150c:	d1ee      	bne.n	80014ec <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800150e:	7dfb      	ldrb	r3, [r7, #23]
 8001510:	2b01      	cmp	r3, #1
 8001512:	d105      	bne.n	8001520 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001514:	4b39      	ldr	r3, [pc, #228]	@ (80015fc <HAL_RCC_OscConfig+0x470>)
 8001516:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001518:	4a38      	ldr	r2, [pc, #224]	@ (80015fc <HAL_RCC_OscConfig+0x470>)
 800151a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800151e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	699b      	ldr	r3, [r3, #24]
 8001524:	2b00      	cmp	r3, #0
 8001526:	f000 80a1 	beq.w	800166c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800152a:	4b34      	ldr	r3, [pc, #208]	@ (80015fc <HAL_RCC_OscConfig+0x470>)
 800152c:	689b      	ldr	r3, [r3, #8]
 800152e:	f003 030c 	and.w	r3, r3, #12
 8001532:	2b08      	cmp	r3, #8
 8001534:	d05c      	beq.n	80015f0 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	699b      	ldr	r3, [r3, #24]
 800153a:	2b02      	cmp	r3, #2
 800153c:	d141      	bne.n	80015c2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800153e:	4b31      	ldr	r3, [pc, #196]	@ (8001604 <HAL_RCC_OscConfig+0x478>)
 8001540:	2200      	movs	r2, #0
 8001542:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001544:	f7ff fb06 	bl	8000b54 <HAL_GetTick>
 8001548:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800154a:	e008      	b.n	800155e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800154c:	f7ff fb02 	bl	8000b54 <HAL_GetTick>
 8001550:	4602      	mov	r2, r0
 8001552:	693b      	ldr	r3, [r7, #16]
 8001554:	1ad3      	subs	r3, r2, r3
 8001556:	2b02      	cmp	r3, #2
 8001558:	d901      	bls.n	800155e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800155a:	2303      	movs	r3, #3
 800155c:	e087      	b.n	800166e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800155e:	4b27      	ldr	r3, [pc, #156]	@ (80015fc <HAL_RCC_OscConfig+0x470>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001566:	2b00      	cmp	r3, #0
 8001568:	d1f0      	bne.n	800154c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	69da      	ldr	r2, [r3, #28]
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	6a1b      	ldr	r3, [r3, #32]
 8001572:	431a      	orrs	r2, r3
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001578:	019b      	lsls	r3, r3, #6
 800157a:	431a      	orrs	r2, r3
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001580:	085b      	lsrs	r3, r3, #1
 8001582:	3b01      	subs	r3, #1
 8001584:	041b      	lsls	r3, r3, #16
 8001586:	431a      	orrs	r2, r3
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800158c:	061b      	lsls	r3, r3, #24
 800158e:	491b      	ldr	r1, [pc, #108]	@ (80015fc <HAL_RCC_OscConfig+0x470>)
 8001590:	4313      	orrs	r3, r2
 8001592:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001594:	4b1b      	ldr	r3, [pc, #108]	@ (8001604 <HAL_RCC_OscConfig+0x478>)
 8001596:	2201      	movs	r2, #1
 8001598:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800159a:	f7ff fadb 	bl	8000b54 <HAL_GetTick>
 800159e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015a0:	e008      	b.n	80015b4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015a2:	f7ff fad7 	bl	8000b54 <HAL_GetTick>
 80015a6:	4602      	mov	r2, r0
 80015a8:	693b      	ldr	r3, [r7, #16]
 80015aa:	1ad3      	subs	r3, r2, r3
 80015ac:	2b02      	cmp	r3, #2
 80015ae:	d901      	bls.n	80015b4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80015b0:	2303      	movs	r3, #3
 80015b2:	e05c      	b.n	800166e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015b4:	4b11      	ldr	r3, [pc, #68]	@ (80015fc <HAL_RCC_OscConfig+0x470>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d0f0      	beq.n	80015a2 <HAL_RCC_OscConfig+0x416>
 80015c0:	e054      	b.n	800166c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015c2:	4b10      	ldr	r3, [pc, #64]	@ (8001604 <HAL_RCC_OscConfig+0x478>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015c8:	f7ff fac4 	bl	8000b54 <HAL_GetTick>
 80015cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015ce:	e008      	b.n	80015e2 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015d0:	f7ff fac0 	bl	8000b54 <HAL_GetTick>
 80015d4:	4602      	mov	r2, r0
 80015d6:	693b      	ldr	r3, [r7, #16]
 80015d8:	1ad3      	subs	r3, r2, r3
 80015da:	2b02      	cmp	r3, #2
 80015dc:	d901      	bls.n	80015e2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80015de:	2303      	movs	r3, #3
 80015e0:	e045      	b.n	800166e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015e2:	4b06      	ldr	r3, [pc, #24]	@ (80015fc <HAL_RCC_OscConfig+0x470>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d1f0      	bne.n	80015d0 <HAL_RCC_OscConfig+0x444>
 80015ee:	e03d      	b.n	800166c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	699b      	ldr	r3, [r3, #24]
 80015f4:	2b01      	cmp	r3, #1
 80015f6:	d107      	bne.n	8001608 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80015f8:	2301      	movs	r3, #1
 80015fa:	e038      	b.n	800166e <HAL_RCC_OscConfig+0x4e2>
 80015fc:	40023800 	.word	0x40023800
 8001600:	40007000 	.word	0x40007000
 8001604:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001608:	4b1b      	ldr	r3, [pc, #108]	@ (8001678 <HAL_RCC_OscConfig+0x4ec>)
 800160a:	685b      	ldr	r3, [r3, #4]
 800160c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	699b      	ldr	r3, [r3, #24]
 8001612:	2b01      	cmp	r3, #1
 8001614:	d028      	beq.n	8001668 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001620:	429a      	cmp	r2, r3
 8001622:	d121      	bne.n	8001668 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800162e:	429a      	cmp	r2, r3
 8001630:	d11a      	bne.n	8001668 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001632:	68fa      	ldr	r2, [r7, #12]
 8001634:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001638:	4013      	ands	r3, r2
 800163a:	687a      	ldr	r2, [r7, #4]
 800163c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800163e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001640:	4293      	cmp	r3, r2
 8001642:	d111      	bne.n	8001668 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800164e:	085b      	lsrs	r3, r3, #1
 8001650:	3b01      	subs	r3, #1
 8001652:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001654:	429a      	cmp	r2, r3
 8001656:	d107      	bne.n	8001668 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001662:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001664:	429a      	cmp	r2, r3
 8001666:	d001      	beq.n	800166c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001668:	2301      	movs	r3, #1
 800166a:	e000      	b.n	800166e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800166c:	2300      	movs	r3, #0
}
 800166e:	4618      	mov	r0, r3
 8001670:	3718      	adds	r7, #24
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	40023800 	.word	0x40023800

0800167c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b084      	sub	sp, #16
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
 8001684:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	2b00      	cmp	r3, #0
 800168a:	d101      	bne.n	8001690 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800168c:	2301      	movs	r3, #1
 800168e:	e0cc      	b.n	800182a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001690:	4b68      	ldr	r3, [pc, #416]	@ (8001834 <HAL_RCC_ClockConfig+0x1b8>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f003 030f 	and.w	r3, r3, #15
 8001698:	683a      	ldr	r2, [r7, #0]
 800169a:	429a      	cmp	r2, r3
 800169c:	d90c      	bls.n	80016b8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800169e:	4b65      	ldr	r3, [pc, #404]	@ (8001834 <HAL_RCC_ClockConfig+0x1b8>)
 80016a0:	683a      	ldr	r2, [r7, #0]
 80016a2:	b2d2      	uxtb	r2, r2
 80016a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80016a6:	4b63      	ldr	r3, [pc, #396]	@ (8001834 <HAL_RCC_ClockConfig+0x1b8>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f003 030f 	and.w	r3, r3, #15
 80016ae:	683a      	ldr	r2, [r7, #0]
 80016b0:	429a      	cmp	r2, r3
 80016b2:	d001      	beq.n	80016b8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80016b4:	2301      	movs	r3, #1
 80016b6:	e0b8      	b.n	800182a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f003 0302 	and.w	r3, r3, #2
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d020      	beq.n	8001706 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f003 0304 	and.w	r3, r3, #4
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d005      	beq.n	80016dc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80016d0:	4b59      	ldr	r3, [pc, #356]	@ (8001838 <HAL_RCC_ClockConfig+0x1bc>)
 80016d2:	689b      	ldr	r3, [r3, #8]
 80016d4:	4a58      	ldr	r2, [pc, #352]	@ (8001838 <HAL_RCC_ClockConfig+0x1bc>)
 80016d6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80016da:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f003 0308 	and.w	r3, r3, #8
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d005      	beq.n	80016f4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80016e8:	4b53      	ldr	r3, [pc, #332]	@ (8001838 <HAL_RCC_ClockConfig+0x1bc>)
 80016ea:	689b      	ldr	r3, [r3, #8]
 80016ec:	4a52      	ldr	r2, [pc, #328]	@ (8001838 <HAL_RCC_ClockConfig+0x1bc>)
 80016ee:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80016f2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016f4:	4b50      	ldr	r3, [pc, #320]	@ (8001838 <HAL_RCC_ClockConfig+0x1bc>)
 80016f6:	689b      	ldr	r3, [r3, #8]
 80016f8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	689b      	ldr	r3, [r3, #8]
 8001700:	494d      	ldr	r1, [pc, #308]	@ (8001838 <HAL_RCC_ClockConfig+0x1bc>)
 8001702:	4313      	orrs	r3, r2
 8001704:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f003 0301 	and.w	r3, r3, #1
 800170e:	2b00      	cmp	r3, #0
 8001710:	d044      	beq.n	800179c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	685b      	ldr	r3, [r3, #4]
 8001716:	2b01      	cmp	r3, #1
 8001718:	d107      	bne.n	800172a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800171a:	4b47      	ldr	r3, [pc, #284]	@ (8001838 <HAL_RCC_ClockConfig+0x1bc>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001722:	2b00      	cmp	r3, #0
 8001724:	d119      	bne.n	800175a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001726:	2301      	movs	r3, #1
 8001728:	e07f      	b.n	800182a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	685b      	ldr	r3, [r3, #4]
 800172e:	2b02      	cmp	r3, #2
 8001730:	d003      	beq.n	800173a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001736:	2b03      	cmp	r3, #3
 8001738:	d107      	bne.n	800174a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800173a:	4b3f      	ldr	r3, [pc, #252]	@ (8001838 <HAL_RCC_ClockConfig+0x1bc>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001742:	2b00      	cmp	r3, #0
 8001744:	d109      	bne.n	800175a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001746:	2301      	movs	r3, #1
 8001748:	e06f      	b.n	800182a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800174a:	4b3b      	ldr	r3, [pc, #236]	@ (8001838 <HAL_RCC_ClockConfig+0x1bc>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f003 0302 	and.w	r3, r3, #2
 8001752:	2b00      	cmp	r3, #0
 8001754:	d101      	bne.n	800175a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001756:	2301      	movs	r3, #1
 8001758:	e067      	b.n	800182a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800175a:	4b37      	ldr	r3, [pc, #220]	@ (8001838 <HAL_RCC_ClockConfig+0x1bc>)
 800175c:	689b      	ldr	r3, [r3, #8]
 800175e:	f023 0203 	bic.w	r2, r3, #3
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	685b      	ldr	r3, [r3, #4]
 8001766:	4934      	ldr	r1, [pc, #208]	@ (8001838 <HAL_RCC_ClockConfig+0x1bc>)
 8001768:	4313      	orrs	r3, r2
 800176a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800176c:	f7ff f9f2 	bl	8000b54 <HAL_GetTick>
 8001770:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001772:	e00a      	b.n	800178a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001774:	f7ff f9ee 	bl	8000b54 <HAL_GetTick>
 8001778:	4602      	mov	r2, r0
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	1ad3      	subs	r3, r2, r3
 800177e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001782:	4293      	cmp	r3, r2
 8001784:	d901      	bls.n	800178a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001786:	2303      	movs	r3, #3
 8001788:	e04f      	b.n	800182a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800178a:	4b2b      	ldr	r3, [pc, #172]	@ (8001838 <HAL_RCC_ClockConfig+0x1bc>)
 800178c:	689b      	ldr	r3, [r3, #8]
 800178e:	f003 020c 	and.w	r2, r3, #12
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	685b      	ldr	r3, [r3, #4]
 8001796:	009b      	lsls	r3, r3, #2
 8001798:	429a      	cmp	r2, r3
 800179a:	d1eb      	bne.n	8001774 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800179c:	4b25      	ldr	r3, [pc, #148]	@ (8001834 <HAL_RCC_ClockConfig+0x1b8>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f003 030f 	and.w	r3, r3, #15
 80017a4:	683a      	ldr	r2, [r7, #0]
 80017a6:	429a      	cmp	r2, r3
 80017a8:	d20c      	bcs.n	80017c4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017aa:	4b22      	ldr	r3, [pc, #136]	@ (8001834 <HAL_RCC_ClockConfig+0x1b8>)
 80017ac:	683a      	ldr	r2, [r7, #0]
 80017ae:	b2d2      	uxtb	r2, r2
 80017b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80017b2:	4b20      	ldr	r3, [pc, #128]	@ (8001834 <HAL_RCC_ClockConfig+0x1b8>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f003 030f 	and.w	r3, r3, #15
 80017ba:	683a      	ldr	r2, [r7, #0]
 80017bc:	429a      	cmp	r2, r3
 80017be:	d001      	beq.n	80017c4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80017c0:	2301      	movs	r3, #1
 80017c2:	e032      	b.n	800182a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f003 0304 	and.w	r3, r3, #4
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d008      	beq.n	80017e2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80017d0:	4b19      	ldr	r3, [pc, #100]	@ (8001838 <HAL_RCC_ClockConfig+0x1bc>)
 80017d2:	689b      	ldr	r3, [r3, #8]
 80017d4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	68db      	ldr	r3, [r3, #12]
 80017dc:	4916      	ldr	r1, [pc, #88]	@ (8001838 <HAL_RCC_ClockConfig+0x1bc>)
 80017de:	4313      	orrs	r3, r2
 80017e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f003 0308 	and.w	r3, r3, #8
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d009      	beq.n	8001802 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80017ee:	4b12      	ldr	r3, [pc, #72]	@ (8001838 <HAL_RCC_ClockConfig+0x1bc>)
 80017f0:	689b      	ldr	r3, [r3, #8]
 80017f2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	691b      	ldr	r3, [r3, #16]
 80017fa:	00db      	lsls	r3, r3, #3
 80017fc:	490e      	ldr	r1, [pc, #56]	@ (8001838 <HAL_RCC_ClockConfig+0x1bc>)
 80017fe:	4313      	orrs	r3, r2
 8001800:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001802:	f000 f821 	bl	8001848 <HAL_RCC_GetSysClockFreq>
 8001806:	4602      	mov	r2, r0
 8001808:	4b0b      	ldr	r3, [pc, #44]	@ (8001838 <HAL_RCC_ClockConfig+0x1bc>)
 800180a:	689b      	ldr	r3, [r3, #8]
 800180c:	091b      	lsrs	r3, r3, #4
 800180e:	f003 030f 	and.w	r3, r3, #15
 8001812:	490a      	ldr	r1, [pc, #40]	@ (800183c <HAL_RCC_ClockConfig+0x1c0>)
 8001814:	5ccb      	ldrb	r3, [r1, r3]
 8001816:	fa22 f303 	lsr.w	r3, r2, r3
 800181a:	4a09      	ldr	r2, [pc, #36]	@ (8001840 <HAL_RCC_ClockConfig+0x1c4>)
 800181c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800181e:	4b09      	ldr	r3, [pc, #36]	@ (8001844 <HAL_RCC_ClockConfig+0x1c8>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	4618      	mov	r0, r3
 8001824:	f7ff f882 	bl	800092c <HAL_InitTick>

  return HAL_OK;
 8001828:	2300      	movs	r3, #0
}
 800182a:	4618      	mov	r0, r3
 800182c:	3710      	adds	r7, #16
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}
 8001832:	bf00      	nop
 8001834:	40023c00 	.word	0x40023c00
 8001838:	40023800 	.word	0x40023800
 800183c:	0800597c 	.word	0x0800597c
 8001840:	20000000 	.word	0x20000000
 8001844:	20000004 	.word	0x20000004

08001848 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001848:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800184c:	b090      	sub	sp, #64	@ 0x40
 800184e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001850:	2300      	movs	r3, #0
 8001852:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8001854:	2300      	movs	r3, #0
 8001856:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8001858:	2300      	movs	r3, #0
 800185a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 800185c:	2300      	movs	r3, #0
 800185e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001860:	4b59      	ldr	r3, [pc, #356]	@ (80019c8 <HAL_RCC_GetSysClockFreq+0x180>)
 8001862:	689b      	ldr	r3, [r3, #8]
 8001864:	f003 030c 	and.w	r3, r3, #12
 8001868:	2b08      	cmp	r3, #8
 800186a:	d00d      	beq.n	8001888 <HAL_RCC_GetSysClockFreq+0x40>
 800186c:	2b08      	cmp	r3, #8
 800186e:	f200 80a1 	bhi.w	80019b4 <HAL_RCC_GetSysClockFreq+0x16c>
 8001872:	2b00      	cmp	r3, #0
 8001874:	d002      	beq.n	800187c <HAL_RCC_GetSysClockFreq+0x34>
 8001876:	2b04      	cmp	r3, #4
 8001878:	d003      	beq.n	8001882 <HAL_RCC_GetSysClockFreq+0x3a>
 800187a:	e09b      	b.n	80019b4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800187c:	4b53      	ldr	r3, [pc, #332]	@ (80019cc <HAL_RCC_GetSysClockFreq+0x184>)
 800187e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001880:	e09b      	b.n	80019ba <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001882:	4b53      	ldr	r3, [pc, #332]	@ (80019d0 <HAL_RCC_GetSysClockFreq+0x188>)
 8001884:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001886:	e098      	b.n	80019ba <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001888:	4b4f      	ldr	r3, [pc, #316]	@ (80019c8 <HAL_RCC_GetSysClockFreq+0x180>)
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001890:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001892:	4b4d      	ldr	r3, [pc, #308]	@ (80019c8 <HAL_RCC_GetSysClockFreq+0x180>)
 8001894:	685b      	ldr	r3, [r3, #4]
 8001896:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800189a:	2b00      	cmp	r3, #0
 800189c:	d028      	beq.n	80018f0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800189e:	4b4a      	ldr	r3, [pc, #296]	@ (80019c8 <HAL_RCC_GetSysClockFreq+0x180>)
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	099b      	lsrs	r3, r3, #6
 80018a4:	2200      	movs	r2, #0
 80018a6:	623b      	str	r3, [r7, #32]
 80018a8:	627a      	str	r2, [r7, #36]	@ 0x24
 80018aa:	6a3b      	ldr	r3, [r7, #32]
 80018ac:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80018b0:	2100      	movs	r1, #0
 80018b2:	4b47      	ldr	r3, [pc, #284]	@ (80019d0 <HAL_RCC_GetSysClockFreq+0x188>)
 80018b4:	fb03 f201 	mul.w	r2, r3, r1
 80018b8:	2300      	movs	r3, #0
 80018ba:	fb00 f303 	mul.w	r3, r0, r3
 80018be:	4413      	add	r3, r2
 80018c0:	4a43      	ldr	r2, [pc, #268]	@ (80019d0 <HAL_RCC_GetSysClockFreq+0x188>)
 80018c2:	fba0 1202 	umull	r1, r2, r0, r2
 80018c6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80018c8:	460a      	mov	r2, r1
 80018ca:	62ba      	str	r2, [r7, #40]	@ 0x28
 80018cc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80018ce:	4413      	add	r3, r2
 80018d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80018d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80018d4:	2200      	movs	r2, #0
 80018d6:	61bb      	str	r3, [r7, #24]
 80018d8:	61fa      	str	r2, [r7, #28]
 80018da:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80018de:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80018e2:	f7fe fc85 	bl	80001f0 <__aeabi_uldivmod>
 80018e6:	4602      	mov	r2, r0
 80018e8:	460b      	mov	r3, r1
 80018ea:	4613      	mov	r3, r2
 80018ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80018ee:	e053      	b.n	8001998 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018f0:	4b35      	ldr	r3, [pc, #212]	@ (80019c8 <HAL_RCC_GetSysClockFreq+0x180>)
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	099b      	lsrs	r3, r3, #6
 80018f6:	2200      	movs	r2, #0
 80018f8:	613b      	str	r3, [r7, #16]
 80018fa:	617a      	str	r2, [r7, #20]
 80018fc:	693b      	ldr	r3, [r7, #16]
 80018fe:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001902:	f04f 0b00 	mov.w	fp, #0
 8001906:	4652      	mov	r2, sl
 8001908:	465b      	mov	r3, fp
 800190a:	f04f 0000 	mov.w	r0, #0
 800190e:	f04f 0100 	mov.w	r1, #0
 8001912:	0159      	lsls	r1, r3, #5
 8001914:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001918:	0150      	lsls	r0, r2, #5
 800191a:	4602      	mov	r2, r0
 800191c:	460b      	mov	r3, r1
 800191e:	ebb2 080a 	subs.w	r8, r2, sl
 8001922:	eb63 090b 	sbc.w	r9, r3, fp
 8001926:	f04f 0200 	mov.w	r2, #0
 800192a:	f04f 0300 	mov.w	r3, #0
 800192e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001932:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001936:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800193a:	ebb2 0408 	subs.w	r4, r2, r8
 800193e:	eb63 0509 	sbc.w	r5, r3, r9
 8001942:	f04f 0200 	mov.w	r2, #0
 8001946:	f04f 0300 	mov.w	r3, #0
 800194a:	00eb      	lsls	r3, r5, #3
 800194c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001950:	00e2      	lsls	r2, r4, #3
 8001952:	4614      	mov	r4, r2
 8001954:	461d      	mov	r5, r3
 8001956:	eb14 030a 	adds.w	r3, r4, sl
 800195a:	603b      	str	r3, [r7, #0]
 800195c:	eb45 030b 	adc.w	r3, r5, fp
 8001960:	607b      	str	r3, [r7, #4]
 8001962:	f04f 0200 	mov.w	r2, #0
 8001966:	f04f 0300 	mov.w	r3, #0
 800196a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800196e:	4629      	mov	r1, r5
 8001970:	028b      	lsls	r3, r1, #10
 8001972:	4621      	mov	r1, r4
 8001974:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001978:	4621      	mov	r1, r4
 800197a:	028a      	lsls	r2, r1, #10
 800197c:	4610      	mov	r0, r2
 800197e:	4619      	mov	r1, r3
 8001980:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001982:	2200      	movs	r2, #0
 8001984:	60bb      	str	r3, [r7, #8]
 8001986:	60fa      	str	r2, [r7, #12]
 8001988:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800198c:	f7fe fc30 	bl	80001f0 <__aeabi_uldivmod>
 8001990:	4602      	mov	r2, r0
 8001992:	460b      	mov	r3, r1
 8001994:	4613      	mov	r3, r2
 8001996:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001998:	4b0b      	ldr	r3, [pc, #44]	@ (80019c8 <HAL_RCC_GetSysClockFreq+0x180>)
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	0c1b      	lsrs	r3, r3, #16
 800199e:	f003 0303 	and.w	r3, r3, #3
 80019a2:	3301      	adds	r3, #1
 80019a4:	005b      	lsls	r3, r3, #1
 80019a6:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80019a8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80019aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80019ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80019b0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80019b2:	e002      	b.n	80019ba <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80019b4:	4b05      	ldr	r3, [pc, #20]	@ (80019cc <HAL_RCC_GetSysClockFreq+0x184>)
 80019b6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80019b8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80019ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80019bc:	4618      	mov	r0, r3
 80019be:	3740      	adds	r7, #64	@ 0x40
 80019c0:	46bd      	mov	sp, r7
 80019c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80019c6:	bf00      	nop
 80019c8:	40023800 	.word	0x40023800
 80019cc:	00f42400 	.word	0x00f42400
 80019d0:	017d7840 	.word	0x017d7840

080019d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80019d4:	b480      	push	{r7}
 80019d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80019d8:	4b03      	ldr	r3, [pc, #12]	@ (80019e8 <HAL_RCC_GetHCLKFreq+0x14>)
 80019da:	681b      	ldr	r3, [r3, #0]
}
 80019dc:	4618      	mov	r0, r3
 80019de:	46bd      	mov	sp, r7
 80019e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e4:	4770      	bx	lr
 80019e6:	bf00      	nop
 80019e8:	20000000 	.word	0x20000000

080019ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80019f0:	f7ff fff0 	bl	80019d4 <HAL_RCC_GetHCLKFreq>
 80019f4:	4602      	mov	r2, r0
 80019f6:	4b05      	ldr	r3, [pc, #20]	@ (8001a0c <HAL_RCC_GetPCLK1Freq+0x20>)
 80019f8:	689b      	ldr	r3, [r3, #8]
 80019fa:	0a9b      	lsrs	r3, r3, #10
 80019fc:	f003 0307 	and.w	r3, r3, #7
 8001a00:	4903      	ldr	r1, [pc, #12]	@ (8001a10 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001a02:	5ccb      	ldrb	r3, [r1, r3]
 8001a04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a08:	4618      	mov	r0, r3
 8001a0a:	bd80      	pop	{r7, pc}
 8001a0c:	40023800 	.word	0x40023800
 8001a10:	0800598c 	.word	0x0800598c

08001a14 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001a18:	f7ff ffdc 	bl	80019d4 <HAL_RCC_GetHCLKFreq>
 8001a1c:	4602      	mov	r2, r0
 8001a1e:	4b05      	ldr	r3, [pc, #20]	@ (8001a34 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001a20:	689b      	ldr	r3, [r3, #8]
 8001a22:	0b5b      	lsrs	r3, r3, #13
 8001a24:	f003 0307 	and.w	r3, r3, #7
 8001a28:	4903      	ldr	r1, [pc, #12]	@ (8001a38 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001a2a:	5ccb      	ldrb	r3, [r1, r3]
 8001a2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a30:	4618      	mov	r0, r3
 8001a32:	bd80      	pop	{r7, pc}
 8001a34:	40023800 	.word	0x40023800
 8001a38:	0800598c 	.word	0x0800598c

08001a3c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	b083      	sub	sp, #12
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
 8001a44:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	220f      	movs	r2, #15
 8001a4a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001a4c:	4b12      	ldr	r3, [pc, #72]	@ (8001a98 <HAL_RCC_GetClockConfig+0x5c>)
 8001a4e:	689b      	ldr	r3, [r3, #8]
 8001a50:	f003 0203 	and.w	r2, r3, #3
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001a58:	4b0f      	ldr	r3, [pc, #60]	@ (8001a98 <HAL_RCC_GetClockConfig+0x5c>)
 8001a5a:	689b      	ldr	r3, [r3, #8]
 8001a5c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001a64:	4b0c      	ldr	r3, [pc, #48]	@ (8001a98 <HAL_RCC_GetClockConfig+0x5c>)
 8001a66:	689b      	ldr	r3, [r3, #8]
 8001a68:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001a70:	4b09      	ldr	r3, [pc, #36]	@ (8001a98 <HAL_RCC_GetClockConfig+0x5c>)
 8001a72:	689b      	ldr	r3, [r3, #8]
 8001a74:	08db      	lsrs	r3, r3, #3
 8001a76:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001a7e:	4b07      	ldr	r3, [pc, #28]	@ (8001a9c <HAL_RCC_GetClockConfig+0x60>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f003 020f 	and.w	r2, r3, #15
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	601a      	str	r2, [r3, #0]
}
 8001a8a:	bf00      	nop
 8001a8c:	370c      	adds	r7, #12
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a94:	4770      	bx	lr
 8001a96:	bf00      	nop
 8001a98:	40023800 	.word	0x40023800
 8001a9c:	40023c00 	.word	0x40023c00

08001aa0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b082      	sub	sp, #8
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d101      	bne.n	8001ab2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001aae:	2301      	movs	r3, #1
 8001ab0:	e041      	b.n	8001b36 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001ab8:	b2db      	uxtb	r3, r3
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d106      	bne.n	8001acc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001ac6:	6878      	ldr	r0, [r7, #4]
 8001ac8:	f000 f839 	bl	8001b3e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2202      	movs	r2, #2
 8001ad0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681a      	ldr	r2, [r3, #0]
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	3304      	adds	r3, #4
 8001adc:	4619      	mov	r1, r3
 8001ade:	4610      	mov	r0, r2
 8001ae0:	f000 f9c0 	bl	8001e64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2201      	movs	r2, #1
 8001ae8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2201      	movs	r2, #1
 8001af0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	2201      	movs	r2, #1
 8001af8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	2201      	movs	r2, #1
 8001b00:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2201      	movs	r2, #1
 8001b08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2201      	movs	r2, #1
 8001b10:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2201      	movs	r2, #1
 8001b18:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2201      	movs	r2, #1
 8001b20:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2201      	movs	r2, #1
 8001b28:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2201      	movs	r2, #1
 8001b30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001b34:	2300      	movs	r3, #0
}
 8001b36:	4618      	mov	r0, r3
 8001b38:	3708      	adds	r7, #8
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}

08001b3e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001b3e:	b480      	push	{r7}
 8001b40:	b083      	sub	sp, #12
 8001b42:	af00      	add	r7, sp, #0
 8001b44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001b46:	bf00      	nop
 8001b48:	370c      	adds	r7, #12
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b50:	4770      	bx	lr
	...

08001b54 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001b54:	b480      	push	{r7}
 8001b56:	b085      	sub	sp, #20
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001b62:	b2db      	uxtb	r3, r3
 8001b64:	2b01      	cmp	r3, #1
 8001b66:	d001      	beq.n	8001b6c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001b68:	2301      	movs	r3, #1
 8001b6a:	e04e      	b.n	8001c0a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2202      	movs	r2, #2
 8001b70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	68da      	ldr	r2, [r3, #12]
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f042 0201 	orr.w	r2, r2, #1
 8001b82:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4a23      	ldr	r2, [pc, #140]	@ (8001c18 <HAL_TIM_Base_Start_IT+0xc4>)
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d022      	beq.n	8001bd4 <HAL_TIM_Base_Start_IT+0x80>
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001b96:	d01d      	beq.n	8001bd4 <HAL_TIM_Base_Start_IT+0x80>
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4a1f      	ldr	r2, [pc, #124]	@ (8001c1c <HAL_TIM_Base_Start_IT+0xc8>)
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d018      	beq.n	8001bd4 <HAL_TIM_Base_Start_IT+0x80>
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	4a1e      	ldr	r2, [pc, #120]	@ (8001c20 <HAL_TIM_Base_Start_IT+0xcc>)
 8001ba8:	4293      	cmp	r3, r2
 8001baa:	d013      	beq.n	8001bd4 <HAL_TIM_Base_Start_IT+0x80>
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4a1c      	ldr	r2, [pc, #112]	@ (8001c24 <HAL_TIM_Base_Start_IT+0xd0>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d00e      	beq.n	8001bd4 <HAL_TIM_Base_Start_IT+0x80>
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	4a1b      	ldr	r2, [pc, #108]	@ (8001c28 <HAL_TIM_Base_Start_IT+0xd4>)
 8001bbc:	4293      	cmp	r3, r2
 8001bbe:	d009      	beq.n	8001bd4 <HAL_TIM_Base_Start_IT+0x80>
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4a19      	ldr	r2, [pc, #100]	@ (8001c2c <HAL_TIM_Base_Start_IT+0xd8>)
 8001bc6:	4293      	cmp	r3, r2
 8001bc8:	d004      	beq.n	8001bd4 <HAL_TIM_Base_Start_IT+0x80>
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	4a18      	ldr	r2, [pc, #96]	@ (8001c30 <HAL_TIM_Base_Start_IT+0xdc>)
 8001bd0:	4293      	cmp	r3, r2
 8001bd2:	d111      	bne.n	8001bf8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	689b      	ldr	r3, [r3, #8]
 8001bda:	f003 0307 	and.w	r3, r3, #7
 8001bde:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	2b06      	cmp	r3, #6
 8001be4:	d010      	beq.n	8001c08 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	681a      	ldr	r2, [r3, #0]
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f042 0201 	orr.w	r2, r2, #1
 8001bf4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001bf6:	e007      	b.n	8001c08 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	681a      	ldr	r2, [r3, #0]
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f042 0201 	orr.w	r2, r2, #1
 8001c06:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001c08:	2300      	movs	r3, #0
}
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	3714      	adds	r7, #20
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c14:	4770      	bx	lr
 8001c16:	bf00      	nop
 8001c18:	40010000 	.word	0x40010000
 8001c1c:	40000400 	.word	0x40000400
 8001c20:	40000800 	.word	0x40000800
 8001c24:	40000c00 	.word	0x40000c00
 8001c28:	40010400 	.word	0x40010400
 8001c2c:	40014000 	.word	0x40014000
 8001c30:	40001800 	.word	0x40001800

08001c34 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b084      	sub	sp, #16
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	68db      	ldr	r3, [r3, #12]
 8001c42:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	691b      	ldr	r3, [r3, #16]
 8001c4a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001c4c:	68bb      	ldr	r3, [r7, #8]
 8001c4e:	f003 0302 	and.w	r3, r3, #2
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d020      	beq.n	8001c98 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	f003 0302 	and.w	r3, r3, #2
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d01b      	beq.n	8001c98 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f06f 0202 	mvn.w	r2, #2
 8001c68:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	2201      	movs	r2, #1
 8001c6e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	699b      	ldr	r3, [r3, #24]
 8001c76:	f003 0303 	and.w	r3, r3, #3
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d003      	beq.n	8001c86 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001c7e:	6878      	ldr	r0, [r7, #4]
 8001c80:	f000 f8d2 	bl	8001e28 <HAL_TIM_IC_CaptureCallback>
 8001c84:	e005      	b.n	8001c92 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c86:	6878      	ldr	r0, [r7, #4]
 8001c88:	f000 f8c4 	bl	8001e14 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c8c:	6878      	ldr	r0, [r7, #4]
 8001c8e:	f000 f8d5 	bl	8001e3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	2200      	movs	r2, #0
 8001c96:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001c98:	68bb      	ldr	r3, [r7, #8]
 8001c9a:	f003 0304 	and.w	r3, r3, #4
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d020      	beq.n	8001ce4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	f003 0304 	and.w	r3, r3, #4
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d01b      	beq.n	8001ce4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f06f 0204 	mvn.w	r2, #4
 8001cb4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	2202      	movs	r2, #2
 8001cba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	699b      	ldr	r3, [r3, #24]
 8001cc2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d003      	beq.n	8001cd2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001cca:	6878      	ldr	r0, [r7, #4]
 8001ccc:	f000 f8ac 	bl	8001e28 <HAL_TIM_IC_CaptureCallback>
 8001cd0:	e005      	b.n	8001cde <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001cd2:	6878      	ldr	r0, [r7, #4]
 8001cd4:	f000 f89e 	bl	8001e14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001cd8:	6878      	ldr	r0, [r7, #4]
 8001cda:	f000 f8af 	bl	8001e3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001ce4:	68bb      	ldr	r3, [r7, #8]
 8001ce6:	f003 0308 	and.w	r3, r3, #8
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d020      	beq.n	8001d30 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	f003 0308 	and.w	r3, r3, #8
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d01b      	beq.n	8001d30 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f06f 0208 	mvn.w	r2, #8
 8001d00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	2204      	movs	r2, #4
 8001d06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	69db      	ldr	r3, [r3, #28]
 8001d0e:	f003 0303 	and.w	r3, r3, #3
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d003      	beq.n	8001d1e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d16:	6878      	ldr	r0, [r7, #4]
 8001d18:	f000 f886 	bl	8001e28 <HAL_TIM_IC_CaptureCallback>
 8001d1c:	e005      	b.n	8001d2a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d1e:	6878      	ldr	r0, [r7, #4]
 8001d20:	f000 f878 	bl	8001e14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d24:	6878      	ldr	r0, [r7, #4]
 8001d26:	f000 f889 	bl	8001e3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001d30:	68bb      	ldr	r3, [r7, #8]
 8001d32:	f003 0310 	and.w	r3, r3, #16
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d020      	beq.n	8001d7c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	f003 0310 	and.w	r3, r3, #16
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d01b      	beq.n	8001d7c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f06f 0210 	mvn.w	r2, #16
 8001d4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	2208      	movs	r2, #8
 8001d52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	69db      	ldr	r3, [r3, #28]
 8001d5a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d003      	beq.n	8001d6a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d62:	6878      	ldr	r0, [r7, #4]
 8001d64:	f000 f860 	bl	8001e28 <HAL_TIM_IC_CaptureCallback>
 8001d68:	e005      	b.n	8001d76 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d6a:	6878      	ldr	r0, [r7, #4]
 8001d6c:	f000 f852 	bl	8001e14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d70:	6878      	ldr	r0, [r7, #4]
 8001d72:	f000 f863 	bl	8001e3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	2200      	movs	r2, #0
 8001d7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001d7c:	68bb      	ldr	r3, [r7, #8]
 8001d7e:	f003 0301 	and.w	r3, r3, #1
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d00c      	beq.n	8001da0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	f003 0301 	and.w	r3, r3, #1
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d007      	beq.n	8001da0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f06f 0201 	mvn.w	r2, #1
 8001d98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001d9a:	6878      	ldr	r0, [r7, #4]
 8001d9c:	f7fe fd3a 	bl	8000814 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001da0:	68bb      	ldr	r3, [r7, #8]
 8001da2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d00c      	beq.n	8001dc4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d007      	beq.n	8001dc4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001dbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001dbe:	6878      	ldr	r0, [r7, #4]
 8001dc0:	f000 f906 	bl	8001fd0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001dc4:	68bb      	ldr	r3, [r7, #8]
 8001dc6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d00c      	beq.n	8001de8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d007      	beq.n	8001de8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001de0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001de2:	6878      	ldr	r0, [r7, #4]
 8001de4:	f000 f834 	bl	8001e50 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001de8:	68bb      	ldr	r3, [r7, #8]
 8001dea:	f003 0320 	and.w	r3, r3, #32
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d00c      	beq.n	8001e0c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	f003 0320 	and.w	r3, r3, #32
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d007      	beq.n	8001e0c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f06f 0220 	mvn.w	r2, #32
 8001e04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001e06:	6878      	ldr	r0, [r7, #4]
 8001e08:	f000 f8d8 	bl	8001fbc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001e0c:	bf00      	nop
 8001e0e:	3710      	adds	r7, #16
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bd80      	pop	{r7, pc}

08001e14 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001e14:	b480      	push	{r7}
 8001e16:	b083      	sub	sp, #12
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001e1c:	bf00      	nop
 8001e1e:	370c      	adds	r7, #12
 8001e20:	46bd      	mov	sp, r7
 8001e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e26:	4770      	bx	lr

08001e28 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	b083      	sub	sp, #12
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001e30:	bf00      	nop
 8001e32:	370c      	adds	r7, #12
 8001e34:	46bd      	mov	sp, r7
 8001e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3a:	4770      	bx	lr

08001e3c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b083      	sub	sp, #12
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001e44:	bf00      	nop
 8001e46:	370c      	adds	r7, #12
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4e:	4770      	bx	lr

08001e50 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001e50:	b480      	push	{r7}
 8001e52:	b083      	sub	sp, #12
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001e58:	bf00      	nop
 8001e5a:	370c      	adds	r7, #12
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e62:	4770      	bx	lr

08001e64 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001e64:	b480      	push	{r7}
 8001e66:	b085      	sub	sp, #20
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
 8001e6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	4a46      	ldr	r2, [pc, #280]	@ (8001f90 <TIM_Base_SetConfig+0x12c>)
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	d013      	beq.n	8001ea4 <TIM_Base_SetConfig+0x40>
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001e82:	d00f      	beq.n	8001ea4 <TIM_Base_SetConfig+0x40>
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	4a43      	ldr	r2, [pc, #268]	@ (8001f94 <TIM_Base_SetConfig+0x130>)
 8001e88:	4293      	cmp	r3, r2
 8001e8a:	d00b      	beq.n	8001ea4 <TIM_Base_SetConfig+0x40>
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	4a42      	ldr	r2, [pc, #264]	@ (8001f98 <TIM_Base_SetConfig+0x134>)
 8001e90:	4293      	cmp	r3, r2
 8001e92:	d007      	beq.n	8001ea4 <TIM_Base_SetConfig+0x40>
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	4a41      	ldr	r2, [pc, #260]	@ (8001f9c <TIM_Base_SetConfig+0x138>)
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	d003      	beq.n	8001ea4 <TIM_Base_SetConfig+0x40>
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	4a40      	ldr	r2, [pc, #256]	@ (8001fa0 <TIM_Base_SetConfig+0x13c>)
 8001ea0:	4293      	cmp	r3, r2
 8001ea2:	d108      	bne.n	8001eb6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001eaa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	68fa      	ldr	r2, [r7, #12]
 8001eb2:	4313      	orrs	r3, r2
 8001eb4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	4a35      	ldr	r2, [pc, #212]	@ (8001f90 <TIM_Base_SetConfig+0x12c>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d02b      	beq.n	8001f16 <TIM_Base_SetConfig+0xb2>
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001ec4:	d027      	beq.n	8001f16 <TIM_Base_SetConfig+0xb2>
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	4a32      	ldr	r2, [pc, #200]	@ (8001f94 <TIM_Base_SetConfig+0x130>)
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d023      	beq.n	8001f16 <TIM_Base_SetConfig+0xb2>
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	4a31      	ldr	r2, [pc, #196]	@ (8001f98 <TIM_Base_SetConfig+0x134>)
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d01f      	beq.n	8001f16 <TIM_Base_SetConfig+0xb2>
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	4a30      	ldr	r2, [pc, #192]	@ (8001f9c <TIM_Base_SetConfig+0x138>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d01b      	beq.n	8001f16 <TIM_Base_SetConfig+0xb2>
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	4a2f      	ldr	r2, [pc, #188]	@ (8001fa0 <TIM_Base_SetConfig+0x13c>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d017      	beq.n	8001f16 <TIM_Base_SetConfig+0xb2>
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	4a2e      	ldr	r2, [pc, #184]	@ (8001fa4 <TIM_Base_SetConfig+0x140>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d013      	beq.n	8001f16 <TIM_Base_SetConfig+0xb2>
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	4a2d      	ldr	r2, [pc, #180]	@ (8001fa8 <TIM_Base_SetConfig+0x144>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d00f      	beq.n	8001f16 <TIM_Base_SetConfig+0xb2>
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	4a2c      	ldr	r2, [pc, #176]	@ (8001fac <TIM_Base_SetConfig+0x148>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d00b      	beq.n	8001f16 <TIM_Base_SetConfig+0xb2>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	4a2b      	ldr	r2, [pc, #172]	@ (8001fb0 <TIM_Base_SetConfig+0x14c>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d007      	beq.n	8001f16 <TIM_Base_SetConfig+0xb2>
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	4a2a      	ldr	r2, [pc, #168]	@ (8001fb4 <TIM_Base_SetConfig+0x150>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d003      	beq.n	8001f16 <TIM_Base_SetConfig+0xb2>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	4a29      	ldr	r2, [pc, #164]	@ (8001fb8 <TIM_Base_SetConfig+0x154>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d108      	bne.n	8001f28 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001f1c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	68db      	ldr	r3, [r3, #12]
 8001f22:	68fa      	ldr	r2, [r7, #12]
 8001f24:	4313      	orrs	r3, r2
 8001f26:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	695b      	ldr	r3, [r3, #20]
 8001f32:	4313      	orrs	r3, r2
 8001f34:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	68fa      	ldr	r2, [r7, #12]
 8001f3a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	689a      	ldr	r2, [r3, #8]
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	681a      	ldr	r2, [r3, #0]
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	4a10      	ldr	r2, [pc, #64]	@ (8001f90 <TIM_Base_SetConfig+0x12c>)
 8001f50:	4293      	cmp	r3, r2
 8001f52:	d003      	beq.n	8001f5c <TIM_Base_SetConfig+0xf8>
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	4a12      	ldr	r2, [pc, #72]	@ (8001fa0 <TIM_Base_SetConfig+0x13c>)
 8001f58:	4293      	cmp	r3, r2
 8001f5a:	d103      	bne.n	8001f64 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	691a      	ldr	r2, [r3, #16]
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2201      	movs	r2, #1
 8001f68:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	691b      	ldr	r3, [r3, #16]
 8001f6e:	f003 0301 	and.w	r3, r3, #1
 8001f72:	2b01      	cmp	r3, #1
 8001f74:	d105      	bne.n	8001f82 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	691b      	ldr	r3, [r3, #16]
 8001f7a:	f023 0201 	bic.w	r2, r3, #1
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	611a      	str	r2, [r3, #16]
  }
}
 8001f82:	bf00      	nop
 8001f84:	3714      	adds	r7, #20
 8001f86:	46bd      	mov	sp, r7
 8001f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8c:	4770      	bx	lr
 8001f8e:	bf00      	nop
 8001f90:	40010000 	.word	0x40010000
 8001f94:	40000400 	.word	0x40000400
 8001f98:	40000800 	.word	0x40000800
 8001f9c:	40000c00 	.word	0x40000c00
 8001fa0:	40010400 	.word	0x40010400
 8001fa4:	40014000 	.word	0x40014000
 8001fa8:	40014400 	.word	0x40014400
 8001fac:	40014800 	.word	0x40014800
 8001fb0:	40001800 	.word	0x40001800
 8001fb4:	40001c00 	.word	0x40001c00
 8001fb8:	40002000 	.word	0x40002000

08001fbc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	b083      	sub	sp, #12
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001fc4:	bf00      	nop
 8001fc6:	370c      	adds	r7, #12
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fce:	4770      	bx	lr

08001fd0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	b083      	sub	sp, #12
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001fd8:	bf00      	nop
 8001fda:	370c      	adds	r7, #12
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe2:	4770      	bx	lr

08001fe4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b082      	sub	sp, #8
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d101      	bne.n	8001ff6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	e042      	b.n	800207c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001ffc:	b2db      	uxtb	r3, r3
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d106      	bne.n	8002010 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	2200      	movs	r2, #0
 8002006:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800200a:	6878      	ldr	r0, [r7, #4]
 800200c:	f7fe fc46 	bl	800089c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2224      	movs	r2, #36	@ 0x24
 8002014:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	68da      	ldr	r2, [r3, #12]
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002026:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002028:	6878      	ldr	r0, [r7, #4]
 800202a:	f000 f973 	bl	8002314 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	691a      	ldr	r2, [r3, #16]
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800203c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	695a      	ldr	r2, [r3, #20]
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800204c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	68da      	ldr	r2, [r3, #12]
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800205c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	2200      	movs	r2, #0
 8002062:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2220      	movs	r2, #32
 8002068:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2220      	movs	r2, #32
 8002070:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2200      	movs	r2, #0
 8002078:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800207a:	2300      	movs	r3, #0
}
 800207c:	4618      	mov	r0, r3
 800207e:	3708      	adds	r7, #8
 8002080:	46bd      	mov	sp, r7
 8002082:	bd80      	pop	{r7, pc}

08002084 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b08a      	sub	sp, #40	@ 0x28
 8002088:	af02      	add	r7, sp, #8
 800208a:	60f8      	str	r0, [r7, #12]
 800208c:	60b9      	str	r1, [r7, #8]
 800208e:	603b      	str	r3, [r7, #0]
 8002090:	4613      	mov	r3, r2
 8002092:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002094:	2300      	movs	r3, #0
 8002096:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800209e:	b2db      	uxtb	r3, r3
 80020a0:	2b20      	cmp	r3, #32
 80020a2:	d175      	bne.n	8002190 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80020a4:	68bb      	ldr	r3, [r7, #8]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d002      	beq.n	80020b0 <HAL_UART_Transmit+0x2c>
 80020aa:	88fb      	ldrh	r3, [r7, #6]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d101      	bne.n	80020b4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80020b0:	2301      	movs	r3, #1
 80020b2:	e06e      	b.n	8002192 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	2200      	movs	r2, #0
 80020b8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	2221      	movs	r2, #33	@ 0x21
 80020be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80020c2:	f7fe fd47 	bl	8000b54 <HAL_GetTick>
 80020c6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	88fa      	ldrh	r2, [r7, #6]
 80020cc:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	88fa      	ldrh	r2, [r7, #6]
 80020d2:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	689b      	ldr	r3, [r3, #8]
 80020d8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80020dc:	d108      	bne.n	80020f0 <HAL_UART_Transmit+0x6c>
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	691b      	ldr	r3, [r3, #16]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d104      	bne.n	80020f0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80020e6:	2300      	movs	r3, #0
 80020e8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80020ea:	68bb      	ldr	r3, [r7, #8]
 80020ec:	61bb      	str	r3, [r7, #24]
 80020ee:	e003      	b.n	80020f8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80020f0:	68bb      	ldr	r3, [r7, #8]
 80020f2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80020f4:	2300      	movs	r3, #0
 80020f6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80020f8:	e02e      	b.n	8002158 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	9300      	str	r3, [sp, #0]
 80020fe:	697b      	ldr	r3, [r7, #20]
 8002100:	2200      	movs	r2, #0
 8002102:	2180      	movs	r1, #128	@ 0x80
 8002104:	68f8      	ldr	r0, [r7, #12]
 8002106:	f000 f848 	bl	800219a <UART_WaitOnFlagUntilTimeout>
 800210a:	4603      	mov	r3, r0
 800210c:	2b00      	cmp	r3, #0
 800210e:	d005      	beq.n	800211c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	2220      	movs	r2, #32
 8002114:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002118:	2303      	movs	r3, #3
 800211a:	e03a      	b.n	8002192 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800211c:	69fb      	ldr	r3, [r7, #28]
 800211e:	2b00      	cmp	r3, #0
 8002120:	d10b      	bne.n	800213a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002122:	69bb      	ldr	r3, [r7, #24]
 8002124:	881b      	ldrh	r3, [r3, #0]
 8002126:	461a      	mov	r2, r3
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002130:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002132:	69bb      	ldr	r3, [r7, #24]
 8002134:	3302      	adds	r3, #2
 8002136:	61bb      	str	r3, [r7, #24]
 8002138:	e007      	b.n	800214a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800213a:	69fb      	ldr	r3, [r7, #28]
 800213c:	781a      	ldrb	r2, [r3, #0]
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002144:	69fb      	ldr	r3, [r7, #28]
 8002146:	3301      	adds	r3, #1
 8002148:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800214e:	b29b      	uxth	r3, r3
 8002150:	3b01      	subs	r3, #1
 8002152:	b29a      	uxth	r2, r3
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800215c:	b29b      	uxth	r3, r3
 800215e:	2b00      	cmp	r3, #0
 8002160:	d1cb      	bne.n	80020fa <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	9300      	str	r3, [sp, #0]
 8002166:	697b      	ldr	r3, [r7, #20]
 8002168:	2200      	movs	r2, #0
 800216a:	2140      	movs	r1, #64	@ 0x40
 800216c:	68f8      	ldr	r0, [r7, #12]
 800216e:	f000 f814 	bl	800219a <UART_WaitOnFlagUntilTimeout>
 8002172:	4603      	mov	r3, r0
 8002174:	2b00      	cmp	r3, #0
 8002176:	d005      	beq.n	8002184 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	2220      	movs	r2, #32
 800217c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002180:	2303      	movs	r3, #3
 8002182:	e006      	b.n	8002192 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	2220      	movs	r2, #32
 8002188:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800218c:	2300      	movs	r3, #0
 800218e:	e000      	b.n	8002192 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002190:	2302      	movs	r3, #2
  }
}
 8002192:	4618      	mov	r0, r3
 8002194:	3720      	adds	r7, #32
 8002196:	46bd      	mov	sp, r7
 8002198:	bd80      	pop	{r7, pc}

0800219a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800219a:	b580      	push	{r7, lr}
 800219c:	b086      	sub	sp, #24
 800219e:	af00      	add	r7, sp, #0
 80021a0:	60f8      	str	r0, [r7, #12]
 80021a2:	60b9      	str	r1, [r7, #8]
 80021a4:	603b      	str	r3, [r7, #0]
 80021a6:	4613      	mov	r3, r2
 80021a8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80021aa:	e03b      	b.n	8002224 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80021ac:	6a3b      	ldr	r3, [r7, #32]
 80021ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021b2:	d037      	beq.n	8002224 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80021b4:	f7fe fcce 	bl	8000b54 <HAL_GetTick>
 80021b8:	4602      	mov	r2, r0
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	1ad3      	subs	r3, r2, r3
 80021be:	6a3a      	ldr	r2, [r7, #32]
 80021c0:	429a      	cmp	r2, r3
 80021c2:	d302      	bcc.n	80021ca <UART_WaitOnFlagUntilTimeout+0x30>
 80021c4:	6a3b      	ldr	r3, [r7, #32]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d101      	bne.n	80021ce <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80021ca:	2303      	movs	r3, #3
 80021cc:	e03a      	b.n	8002244 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	68db      	ldr	r3, [r3, #12]
 80021d4:	f003 0304 	and.w	r3, r3, #4
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d023      	beq.n	8002224 <UART_WaitOnFlagUntilTimeout+0x8a>
 80021dc:	68bb      	ldr	r3, [r7, #8]
 80021de:	2b80      	cmp	r3, #128	@ 0x80
 80021e0:	d020      	beq.n	8002224 <UART_WaitOnFlagUntilTimeout+0x8a>
 80021e2:	68bb      	ldr	r3, [r7, #8]
 80021e4:	2b40      	cmp	r3, #64	@ 0x40
 80021e6:	d01d      	beq.n	8002224 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f003 0308 	and.w	r3, r3, #8
 80021f2:	2b08      	cmp	r3, #8
 80021f4:	d116      	bne.n	8002224 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80021f6:	2300      	movs	r3, #0
 80021f8:	617b      	str	r3, [r7, #20]
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	617b      	str	r3, [r7, #20]
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	617b      	str	r3, [r7, #20]
 800220a:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800220c:	68f8      	ldr	r0, [r7, #12]
 800220e:	f000 f81d 	bl	800224c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	2208      	movs	r2, #8
 8002216:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	2200      	movs	r2, #0
 800221c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002220:	2301      	movs	r3, #1
 8002222:	e00f      	b.n	8002244 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	681a      	ldr	r2, [r3, #0]
 800222a:	68bb      	ldr	r3, [r7, #8]
 800222c:	4013      	ands	r3, r2
 800222e:	68ba      	ldr	r2, [r7, #8]
 8002230:	429a      	cmp	r2, r3
 8002232:	bf0c      	ite	eq
 8002234:	2301      	moveq	r3, #1
 8002236:	2300      	movne	r3, #0
 8002238:	b2db      	uxtb	r3, r3
 800223a:	461a      	mov	r2, r3
 800223c:	79fb      	ldrb	r3, [r7, #7]
 800223e:	429a      	cmp	r2, r3
 8002240:	d0b4      	beq.n	80021ac <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002242:	2300      	movs	r3, #0
}
 8002244:	4618      	mov	r0, r3
 8002246:	3718      	adds	r7, #24
 8002248:	46bd      	mov	sp, r7
 800224a:	bd80      	pop	{r7, pc}

0800224c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800224c:	b480      	push	{r7}
 800224e:	b095      	sub	sp, #84	@ 0x54
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	330c      	adds	r3, #12
 800225a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800225c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800225e:	e853 3f00 	ldrex	r3, [r3]
 8002262:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002264:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002266:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800226a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	330c      	adds	r3, #12
 8002272:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002274:	643a      	str	r2, [r7, #64]	@ 0x40
 8002276:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002278:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800227a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800227c:	e841 2300 	strex	r3, r2, [r1]
 8002280:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002282:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002284:	2b00      	cmp	r3, #0
 8002286:	d1e5      	bne.n	8002254 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	3314      	adds	r3, #20
 800228e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002290:	6a3b      	ldr	r3, [r7, #32]
 8002292:	e853 3f00 	ldrex	r3, [r3]
 8002296:	61fb      	str	r3, [r7, #28]
   return(result);
 8002298:	69fb      	ldr	r3, [r7, #28]
 800229a:	f023 0301 	bic.w	r3, r3, #1
 800229e:	64bb      	str	r3, [r7, #72]	@ 0x48
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	3314      	adds	r3, #20
 80022a6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80022a8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80022aa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80022ac:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80022ae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80022b0:	e841 2300 	strex	r3, r2, [r1]
 80022b4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80022b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d1e5      	bne.n	8002288 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022c0:	2b01      	cmp	r3, #1
 80022c2:	d119      	bne.n	80022f8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	330c      	adds	r3, #12
 80022ca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	e853 3f00 	ldrex	r3, [r3]
 80022d2:	60bb      	str	r3, [r7, #8]
   return(result);
 80022d4:	68bb      	ldr	r3, [r7, #8]
 80022d6:	f023 0310 	bic.w	r3, r3, #16
 80022da:	647b      	str	r3, [r7, #68]	@ 0x44
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	330c      	adds	r3, #12
 80022e2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80022e4:	61ba      	str	r2, [r7, #24]
 80022e6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80022e8:	6979      	ldr	r1, [r7, #20]
 80022ea:	69ba      	ldr	r2, [r7, #24]
 80022ec:	e841 2300 	strex	r3, r2, [r1]
 80022f0:	613b      	str	r3, [r7, #16]
   return(result);
 80022f2:	693b      	ldr	r3, [r7, #16]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d1e5      	bne.n	80022c4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2220      	movs	r2, #32
 80022fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2200      	movs	r2, #0
 8002304:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002306:	bf00      	nop
 8002308:	3754      	adds	r7, #84	@ 0x54
 800230a:	46bd      	mov	sp, r7
 800230c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002310:	4770      	bx	lr
	...

08002314 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002314:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002318:	b0c0      	sub	sp, #256	@ 0x100
 800231a:	af00      	add	r7, sp, #0
 800231c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002320:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	691b      	ldr	r3, [r3, #16]
 8002328:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800232c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002330:	68d9      	ldr	r1, [r3, #12]
 8002332:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002336:	681a      	ldr	r2, [r3, #0]
 8002338:	ea40 0301 	orr.w	r3, r0, r1
 800233c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800233e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002342:	689a      	ldr	r2, [r3, #8]
 8002344:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002348:	691b      	ldr	r3, [r3, #16]
 800234a:	431a      	orrs	r2, r3
 800234c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002350:	695b      	ldr	r3, [r3, #20]
 8002352:	431a      	orrs	r2, r3
 8002354:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002358:	69db      	ldr	r3, [r3, #28]
 800235a:	4313      	orrs	r3, r2
 800235c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002360:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	68db      	ldr	r3, [r3, #12]
 8002368:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800236c:	f021 010c 	bic.w	r1, r1, #12
 8002370:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002374:	681a      	ldr	r2, [r3, #0]
 8002376:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800237a:	430b      	orrs	r3, r1
 800237c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800237e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	695b      	ldr	r3, [r3, #20]
 8002386:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800238a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800238e:	6999      	ldr	r1, [r3, #24]
 8002390:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002394:	681a      	ldr	r2, [r3, #0]
 8002396:	ea40 0301 	orr.w	r3, r0, r1
 800239a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800239c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80023a0:	681a      	ldr	r2, [r3, #0]
 80023a2:	4b8f      	ldr	r3, [pc, #572]	@ (80025e0 <UART_SetConfig+0x2cc>)
 80023a4:	429a      	cmp	r2, r3
 80023a6:	d005      	beq.n	80023b4 <UART_SetConfig+0xa0>
 80023a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80023ac:	681a      	ldr	r2, [r3, #0]
 80023ae:	4b8d      	ldr	r3, [pc, #564]	@ (80025e4 <UART_SetConfig+0x2d0>)
 80023b0:	429a      	cmp	r2, r3
 80023b2:	d104      	bne.n	80023be <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80023b4:	f7ff fb2e 	bl	8001a14 <HAL_RCC_GetPCLK2Freq>
 80023b8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80023bc:	e003      	b.n	80023c6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80023be:	f7ff fb15 	bl	80019ec <HAL_RCC_GetPCLK1Freq>
 80023c2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80023c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80023ca:	69db      	ldr	r3, [r3, #28]
 80023cc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80023d0:	f040 810c 	bne.w	80025ec <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80023d4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80023d8:	2200      	movs	r2, #0
 80023da:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80023de:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80023e2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80023e6:	4622      	mov	r2, r4
 80023e8:	462b      	mov	r3, r5
 80023ea:	1891      	adds	r1, r2, r2
 80023ec:	65b9      	str	r1, [r7, #88]	@ 0x58
 80023ee:	415b      	adcs	r3, r3
 80023f0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80023f2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80023f6:	4621      	mov	r1, r4
 80023f8:	eb12 0801 	adds.w	r8, r2, r1
 80023fc:	4629      	mov	r1, r5
 80023fe:	eb43 0901 	adc.w	r9, r3, r1
 8002402:	f04f 0200 	mov.w	r2, #0
 8002406:	f04f 0300 	mov.w	r3, #0
 800240a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800240e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002412:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002416:	4690      	mov	r8, r2
 8002418:	4699      	mov	r9, r3
 800241a:	4623      	mov	r3, r4
 800241c:	eb18 0303 	adds.w	r3, r8, r3
 8002420:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002424:	462b      	mov	r3, r5
 8002426:	eb49 0303 	adc.w	r3, r9, r3
 800242a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800242e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	2200      	movs	r2, #0
 8002436:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800243a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800243e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002442:	460b      	mov	r3, r1
 8002444:	18db      	adds	r3, r3, r3
 8002446:	653b      	str	r3, [r7, #80]	@ 0x50
 8002448:	4613      	mov	r3, r2
 800244a:	eb42 0303 	adc.w	r3, r2, r3
 800244e:	657b      	str	r3, [r7, #84]	@ 0x54
 8002450:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002454:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002458:	f7fd feca 	bl	80001f0 <__aeabi_uldivmod>
 800245c:	4602      	mov	r2, r0
 800245e:	460b      	mov	r3, r1
 8002460:	4b61      	ldr	r3, [pc, #388]	@ (80025e8 <UART_SetConfig+0x2d4>)
 8002462:	fba3 2302 	umull	r2, r3, r3, r2
 8002466:	095b      	lsrs	r3, r3, #5
 8002468:	011c      	lsls	r4, r3, #4
 800246a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800246e:	2200      	movs	r2, #0
 8002470:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002474:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002478:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800247c:	4642      	mov	r2, r8
 800247e:	464b      	mov	r3, r9
 8002480:	1891      	adds	r1, r2, r2
 8002482:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002484:	415b      	adcs	r3, r3
 8002486:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002488:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800248c:	4641      	mov	r1, r8
 800248e:	eb12 0a01 	adds.w	sl, r2, r1
 8002492:	4649      	mov	r1, r9
 8002494:	eb43 0b01 	adc.w	fp, r3, r1
 8002498:	f04f 0200 	mov.w	r2, #0
 800249c:	f04f 0300 	mov.w	r3, #0
 80024a0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80024a4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80024a8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80024ac:	4692      	mov	sl, r2
 80024ae:	469b      	mov	fp, r3
 80024b0:	4643      	mov	r3, r8
 80024b2:	eb1a 0303 	adds.w	r3, sl, r3
 80024b6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80024ba:	464b      	mov	r3, r9
 80024bc:	eb4b 0303 	adc.w	r3, fp, r3
 80024c0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80024c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80024c8:	685b      	ldr	r3, [r3, #4]
 80024ca:	2200      	movs	r2, #0
 80024cc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80024d0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80024d4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80024d8:	460b      	mov	r3, r1
 80024da:	18db      	adds	r3, r3, r3
 80024dc:	643b      	str	r3, [r7, #64]	@ 0x40
 80024de:	4613      	mov	r3, r2
 80024e0:	eb42 0303 	adc.w	r3, r2, r3
 80024e4:	647b      	str	r3, [r7, #68]	@ 0x44
 80024e6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80024ea:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80024ee:	f7fd fe7f 	bl	80001f0 <__aeabi_uldivmod>
 80024f2:	4602      	mov	r2, r0
 80024f4:	460b      	mov	r3, r1
 80024f6:	4611      	mov	r1, r2
 80024f8:	4b3b      	ldr	r3, [pc, #236]	@ (80025e8 <UART_SetConfig+0x2d4>)
 80024fa:	fba3 2301 	umull	r2, r3, r3, r1
 80024fe:	095b      	lsrs	r3, r3, #5
 8002500:	2264      	movs	r2, #100	@ 0x64
 8002502:	fb02 f303 	mul.w	r3, r2, r3
 8002506:	1acb      	subs	r3, r1, r3
 8002508:	00db      	lsls	r3, r3, #3
 800250a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800250e:	4b36      	ldr	r3, [pc, #216]	@ (80025e8 <UART_SetConfig+0x2d4>)
 8002510:	fba3 2302 	umull	r2, r3, r3, r2
 8002514:	095b      	lsrs	r3, r3, #5
 8002516:	005b      	lsls	r3, r3, #1
 8002518:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800251c:	441c      	add	r4, r3
 800251e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002522:	2200      	movs	r2, #0
 8002524:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002528:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800252c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002530:	4642      	mov	r2, r8
 8002532:	464b      	mov	r3, r9
 8002534:	1891      	adds	r1, r2, r2
 8002536:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002538:	415b      	adcs	r3, r3
 800253a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800253c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002540:	4641      	mov	r1, r8
 8002542:	1851      	adds	r1, r2, r1
 8002544:	6339      	str	r1, [r7, #48]	@ 0x30
 8002546:	4649      	mov	r1, r9
 8002548:	414b      	adcs	r3, r1
 800254a:	637b      	str	r3, [r7, #52]	@ 0x34
 800254c:	f04f 0200 	mov.w	r2, #0
 8002550:	f04f 0300 	mov.w	r3, #0
 8002554:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002558:	4659      	mov	r1, fp
 800255a:	00cb      	lsls	r3, r1, #3
 800255c:	4651      	mov	r1, sl
 800255e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002562:	4651      	mov	r1, sl
 8002564:	00ca      	lsls	r2, r1, #3
 8002566:	4610      	mov	r0, r2
 8002568:	4619      	mov	r1, r3
 800256a:	4603      	mov	r3, r0
 800256c:	4642      	mov	r2, r8
 800256e:	189b      	adds	r3, r3, r2
 8002570:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002574:	464b      	mov	r3, r9
 8002576:	460a      	mov	r2, r1
 8002578:	eb42 0303 	adc.w	r3, r2, r3
 800257c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002580:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	2200      	movs	r2, #0
 8002588:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800258c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002590:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002594:	460b      	mov	r3, r1
 8002596:	18db      	adds	r3, r3, r3
 8002598:	62bb      	str	r3, [r7, #40]	@ 0x28
 800259a:	4613      	mov	r3, r2
 800259c:	eb42 0303 	adc.w	r3, r2, r3
 80025a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80025a2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80025a6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80025aa:	f7fd fe21 	bl	80001f0 <__aeabi_uldivmod>
 80025ae:	4602      	mov	r2, r0
 80025b0:	460b      	mov	r3, r1
 80025b2:	4b0d      	ldr	r3, [pc, #52]	@ (80025e8 <UART_SetConfig+0x2d4>)
 80025b4:	fba3 1302 	umull	r1, r3, r3, r2
 80025b8:	095b      	lsrs	r3, r3, #5
 80025ba:	2164      	movs	r1, #100	@ 0x64
 80025bc:	fb01 f303 	mul.w	r3, r1, r3
 80025c0:	1ad3      	subs	r3, r2, r3
 80025c2:	00db      	lsls	r3, r3, #3
 80025c4:	3332      	adds	r3, #50	@ 0x32
 80025c6:	4a08      	ldr	r2, [pc, #32]	@ (80025e8 <UART_SetConfig+0x2d4>)
 80025c8:	fba2 2303 	umull	r2, r3, r2, r3
 80025cc:	095b      	lsrs	r3, r3, #5
 80025ce:	f003 0207 	and.w	r2, r3, #7
 80025d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4422      	add	r2, r4
 80025da:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80025dc:	e106      	b.n	80027ec <UART_SetConfig+0x4d8>
 80025de:	bf00      	nop
 80025e0:	40011000 	.word	0x40011000
 80025e4:	40011400 	.word	0x40011400
 80025e8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80025ec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80025f0:	2200      	movs	r2, #0
 80025f2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80025f6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80025fa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80025fe:	4642      	mov	r2, r8
 8002600:	464b      	mov	r3, r9
 8002602:	1891      	adds	r1, r2, r2
 8002604:	6239      	str	r1, [r7, #32]
 8002606:	415b      	adcs	r3, r3
 8002608:	627b      	str	r3, [r7, #36]	@ 0x24
 800260a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800260e:	4641      	mov	r1, r8
 8002610:	1854      	adds	r4, r2, r1
 8002612:	4649      	mov	r1, r9
 8002614:	eb43 0501 	adc.w	r5, r3, r1
 8002618:	f04f 0200 	mov.w	r2, #0
 800261c:	f04f 0300 	mov.w	r3, #0
 8002620:	00eb      	lsls	r3, r5, #3
 8002622:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002626:	00e2      	lsls	r2, r4, #3
 8002628:	4614      	mov	r4, r2
 800262a:	461d      	mov	r5, r3
 800262c:	4643      	mov	r3, r8
 800262e:	18e3      	adds	r3, r4, r3
 8002630:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002634:	464b      	mov	r3, r9
 8002636:	eb45 0303 	adc.w	r3, r5, r3
 800263a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800263e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	2200      	movs	r2, #0
 8002646:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800264a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800264e:	f04f 0200 	mov.w	r2, #0
 8002652:	f04f 0300 	mov.w	r3, #0
 8002656:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800265a:	4629      	mov	r1, r5
 800265c:	008b      	lsls	r3, r1, #2
 800265e:	4621      	mov	r1, r4
 8002660:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002664:	4621      	mov	r1, r4
 8002666:	008a      	lsls	r2, r1, #2
 8002668:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800266c:	f7fd fdc0 	bl	80001f0 <__aeabi_uldivmod>
 8002670:	4602      	mov	r2, r0
 8002672:	460b      	mov	r3, r1
 8002674:	4b60      	ldr	r3, [pc, #384]	@ (80027f8 <UART_SetConfig+0x4e4>)
 8002676:	fba3 2302 	umull	r2, r3, r3, r2
 800267a:	095b      	lsrs	r3, r3, #5
 800267c:	011c      	lsls	r4, r3, #4
 800267e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002682:	2200      	movs	r2, #0
 8002684:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002688:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800268c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002690:	4642      	mov	r2, r8
 8002692:	464b      	mov	r3, r9
 8002694:	1891      	adds	r1, r2, r2
 8002696:	61b9      	str	r1, [r7, #24]
 8002698:	415b      	adcs	r3, r3
 800269a:	61fb      	str	r3, [r7, #28]
 800269c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80026a0:	4641      	mov	r1, r8
 80026a2:	1851      	adds	r1, r2, r1
 80026a4:	6139      	str	r1, [r7, #16]
 80026a6:	4649      	mov	r1, r9
 80026a8:	414b      	adcs	r3, r1
 80026aa:	617b      	str	r3, [r7, #20]
 80026ac:	f04f 0200 	mov.w	r2, #0
 80026b0:	f04f 0300 	mov.w	r3, #0
 80026b4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80026b8:	4659      	mov	r1, fp
 80026ba:	00cb      	lsls	r3, r1, #3
 80026bc:	4651      	mov	r1, sl
 80026be:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80026c2:	4651      	mov	r1, sl
 80026c4:	00ca      	lsls	r2, r1, #3
 80026c6:	4610      	mov	r0, r2
 80026c8:	4619      	mov	r1, r3
 80026ca:	4603      	mov	r3, r0
 80026cc:	4642      	mov	r2, r8
 80026ce:	189b      	adds	r3, r3, r2
 80026d0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80026d4:	464b      	mov	r3, r9
 80026d6:	460a      	mov	r2, r1
 80026d8:	eb42 0303 	adc.w	r3, r2, r3
 80026dc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80026e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	2200      	movs	r2, #0
 80026e8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80026ea:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80026ec:	f04f 0200 	mov.w	r2, #0
 80026f0:	f04f 0300 	mov.w	r3, #0
 80026f4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80026f8:	4649      	mov	r1, r9
 80026fa:	008b      	lsls	r3, r1, #2
 80026fc:	4641      	mov	r1, r8
 80026fe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002702:	4641      	mov	r1, r8
 8002704:	008a      	lsls	r2, r1, #2
 8002706:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800270a:	f7fd fd71 	bl	80001f0 <__aeabi_uldivmod>
 800270e:	4602      	mov	r2, r0
 8002710:	460b      	mov	r3, r1
 8002712:	4611      	mov	r1, r2
 8002714:	4b38      	ldr	r3, [pc, #224]	@ (80027f8 <UART_SetConfig+0x4e4>)
 8002716:	fba3 2301 	umull	r2, r3, r3, r1
 800271a:	095b      	lsrs	r3, r3, #5
 800271c:	2264      	movs	r2, #100	@ 0x64
 800271e:	fb02 f303 	mul.w	r3, r2, r3
 8002722:	1acb      	subs	r3, r1, r3
 8002724:	011b      	lsls	r3, r3, #4
 8002726:	3332      	adds	r3, #50	@ 0x32
 8002728:	4a33      	ldr	r2, [pc, #204]	@ (80027f8 <UART_SetConfig+0x4e4>)
 800272a:	fba2 2303 	umull	r2, r3, r2, r3
 800272e:	095b      	lsrs	r3, r3, #5
 8002730:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002734:	441c      	add	r4, r3
 8002736:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800273a:	2200      	movs	r2, #0
 800273c:	673b      	str	r3, [r7, #112]	@ 0x70
 800273e:	677a      	str	r2, [r7, #116]	@ 0x74
 8002740:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002744:	4642      	mov	r2, r8
 8002746:	464b      	mov	r3, r9
 8002748:	1891      	adds	r1, r2, r2
 800274a:	60b9      	str	r1, [r7, #8]
 800274c:	415b      	adcs	r3, r3
 800274e:	60fb      	str	r3, [r7, #12]
 8002750:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002754:	4641      	mov	r1, r8
 8002756:	1851      	adds	r1, r2, r1
 8002758:	6039      	str	r1, [r7, #0]
 800275a:	4649      	mov	r1, r9
 800275c:	414b      	adcs	r3, r1
 800275e:	607b      	str	r3, [r7, #4]
 8002760:	f04f 0200 	mov.w	r2, #0
 8002764:	f04f 0300 	mov.w	r3, #0
 8002768:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800276c:	4659      	mov	r1, fp
 800276e:	00cb      	lsls	r3, r1, #3
 8002770:	4651      	mov	r1, sl
 8002772:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002776:	4651      	mov	r1, sl
 8002778:	00ca      	lsls	r2, r1, #3
 800277a:	4610      	mov	r0, r2
 800277c:	4619      	mov	r1, r3
 800277e:	4603      	mov	r3, r0
 8002780:	4642      	mov	r2, r8
 8002782:	189b      	adds	r3, r3, r2
 8002784:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002786:	464b      	mov	r3, r9
 8002788:	460a      	mov	r2, r1
 800278a:	eb42 0303 	adc.w	r3, r2, r3
 800278e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002790:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	2200      	movs	r2, #0
 8002798:	663b      	str	r3, [r7, #96]	@ 0x60
 800279a:	667a      	str	r2, [r7, #100]	@ 0x64
 800279c:	f04f 0200 	mov.w	r2, #0
 80027a0:	f04f 0300 	mov.w	r3, #0
 80027a4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80027a8:	4649      	mov	r1, r9
 80027aa:	008b      	lsls	r3, r1, #2
 80027ac:	4641      	mov	r1, r8
 80027ae:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80027b2:	4641      	mov	r1, r8
 80027b4:	008a      	lsls	r2, r1, #2
 80027b6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80027ba:	f7fd fd19 	bl	80001f0 <__aeabi_uldivmod>
 80027be:	4602      	mov	r2, r0
 80027c0:	460b      	mov	r3, r1
 80027c2:	4b0d      	ldr	r3, [pc, #52]	@ (80027f8 <UART_SetConfig+0x4e4>)
 80027c4:	fba3 1302 	umull	r1, r3, r3, r2
 80027c8:	095b      	lsrs	r3, r3, #5
 80027ca:	2164      	movs	r1, #100	@ 0x64
 80027cc:	fb01 f303 	mul.w	r3, r1, r3
 80027d0:	1ad3      	subs	r3, r2, r3
 80027d2:	011b      	lsls	r3, r3, #4
 80027d4:	3332      	adds	r3, #50	@ 0x32
 80027d6:	4a08      	ldr	r2, [pc, #32]	@ (80027f8 <UART_SetConfig+0x4e4>)
 80027d8:	fba2 2303 	umull	r2, r3, r2, r3
 80027dc:	095b      	lsrs	r3, r3, #5
 80027de:	f003 020f 	and.w	r2, r3, #15
 80027e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4422      	add	r2, r4
 80027ea:	609a      	str	r2, [r3, #8]
}
 80027ec:	bf00      	nop
 80027ee:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80027f2:	46bd      	mov	sp, r7
 80027f4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80027f8:	51eb851f 	.word	0x51eb851f

080027fc <__NVIC_SetPriority>:
{
 80027fc:	b480      	push	{r7}
 80027fe:	b083      	sub	sp, #12
 8002800:	af00      	add	r7, sp, #0
 8002802:	4603      	mov	r3, r0
 8002804:	6039      	str	r1, [r7, #0]
 8002806:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002808:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800280c:	2b00      	cmp	r3, #0
 800280e:	db0a      	blt.n	8002826 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	b2da      	uxtb	r2, r3
 8002814:	490c      	ldr	r1, [pc, #48]	@ (8002848 <__NVIC_SetPriority+0x4c>)
 8002816:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800281a:	0112      	lsls	r2, r2, #4
 800281c:	b2d2      	uxtb	r2, r2
 800281e:	440b      	add	r3, r1
 8002820:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8002824:	e00a      	b.n	800283c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	b2da      	uxtb	r2, r3
 800282a:	4908      	ldr	r1, [pc, #32]	@ (800284c <__NVIC_SetPriority+0x50>)
 800282c:	79fb      	ldrb	r3, [r7, #7]
 800282e:	f003 030f 	and.w	r3, r3, #15
 8002832:	3b04      	subs	r3, #4
 8002834:	0112      	lsls	r2, r2, #4
 8002836:	b2d2      	uxtb	r2, r2
 8002838:	440b      	add	r3, r1
 800283a:	761a      	strb	r2, [r3, #24]
}
 800283c:	bf00      	nop
 800283e:	370c      	adds	r7, #12
 8002840:	46bd      	mov	sp, r7
 8002842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002846:	4770      	bx	lr
 8002848:	e000e100 	.word	0xe000e100
 800284c:	e000ed00 	.word	0xe000ed00

08002850 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8002850:	b580      	push	{r7, lr}
 8002852:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8002854:	4b05      	ldr	r3, [pc, #20]	@ (800286c <SysTick_Handler+0x1c>)
 8002856:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8002858:	f001 ff64 	bl	8004724 <xTaskGetSchedulerState>
 800285c:	4603      	mov	r3, r0
 800285e:	2b01      	cmp	r3, #1
 8002860:	d001      	beq.n	8002866 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8002862:	f002 fd59 	bl	8005318 <xPortSysTickHandler>
  }
}
 8002866:	bf00      	nop
 8002868:	bd80      	pop	{r7, pc}
 800286a:	bf00      	nop
 800286c:	e000e010 	.word	0xe000e010

08002870 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8002870:	b580      	push	{r7, lr}
 8002872:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8002874:	2100      	movs	r1, #0
 8002876:	f06f 0004 	mvn.w	r0, #4
 800287a:	f7ff ffbf 	bl	80027fc <__NVIC_SetPriority>
#endif
}
 800287e:	bf00      	nop
 8002880:	bd80      	pop	{r7, pc}
	...

08002884 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002884:	b480      	push	{r7}
 8002886:	b083      	sub	sp, #12
 8002888:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800288a:	f3ef 8305 	mrs	r3, IPSR
 800288e:	603b      	str	r3, [r7, #0]
  return(result);
 8002890:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002892:	2b00      	cmp	r3, #0
 8002894:	d003      	beq.n	800289e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8002896:	f06f 0305 	mvn.w	r3, #5
 800289a:	607b      	str	r3, [r7, #4]
 800289c:	e00c      	b.n	80028b8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800289e:	4b0a      	ldr	r3, [pc, #40]	@ (80028c8 <osKernelInitialize+0x44>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d105      	bne.n	80028b2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80028a6:	4b08      	ldr	r3, [pc, #32]	@ (80028c8 <osKernelInitialize+0x44>)
 80028a8:	2201      	movs	r2, #1
 80028aa:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80028ac:	2300      	movs	r3, #0
 80028ae:	607b      	str	r3, [r7, #4]
 80028b0:	e002      	b.n	80028b8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80028b2:	f04f 33ff 	mov.w	r3, #4294967295
 80028b6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80028b8:	687b      	ldr	r3, [r7, #4]
}
 80028ba:	4618      	mov	r0, r3
 80028bc:	370c      	adds	r7, #12
 80028be:	46bd      	mov	sp, r7
 80028c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c4:	4770      	bx	lr
 80028c6:	bf00      	nop
 80028c8:	200000d0 	.word	0x200000d0

080028cc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b082      	sub	sp, #8
 80028d0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80028d2:	f3ef 8305 	mrs	r3, IPSR
 80028d6:	603b      	str	r3, [r7, #0]
  return(result);
 80028d8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d003      	beq.n	80028e6 <osKernelStart+0x1a>
    stat = osErrorISR;
 80028de:	f06f 0305 	mvn.w	r3, #5
 80028e2:	607b      	str	r3, [r7, #4]
 80028e4:	e010      	b.n	8002908 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80028e6:	4b0b      	ldr	r3, [pc, #44]	@ (8002914 <osKernelStart+0x48>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	2b01      	cmp	r3, #1
 80028ec:	d109      	bne.n	8002902 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80028ee:	f7ff ffbf 	bl	8002870 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80028f2:	4b08      	ldr	r3, [pc, #32]	@ (8002914 <osKernelStart+0x48>)
 80028f4:	2202      	movs	r2, #2
 80028f6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80028f8:	f001 fac6 	bl	8003e88 <vTaskStartScheduler>
      stat = osOK;
 80028fc:	2300      	movs	r3, #0
 80028fe:	607b      	str	r3, [r7, #4]
 8002900:	e002      	b.n	8002908 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8002902:	f04f 33ff 	mov.w	r3, #4294967295
 8002906:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002908:	687b      	ldr	r3, [r7, #4]
}
 800290a:	4618      	mov	r0, r3
 800290c:	3708      	adds	r7, #8
 800290e:	46bd      	mov	sp, r7
 8002910:	bd80      	pop	{r7, pc}
 8002912:	bf00      	nop
 8002914:	200000d0 	.word	0x200000d0

08002918 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8002918:	b580      	push	{r7, lr}
 800291a:	b08e      	sub	sp, #56	@ 0x38
 800291c:	af04      	add	r7, sp, #16
 800291e:	60f8      	str	r0, [r7, #12]
 8002920:	60b9      	str	r1, [r7, #8]
 8002922:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002924:	2300      	movs	r3, #0
 8002926:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002928:	f3ef 8305 	mrs	r3, IPSR
 800292c:	617b      	str	r3, [r7, #20]
  return(result);
 800292e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8002930:	2b00      	cmp	r3, #0
 8002932:	d17e      	bne.n	8002a32 <osThreadNew+0x11a>
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	2b00      	cmp	r3, #0
 8002938:	d07b      	beq.n	8002a32 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800293a:	2380      	movs	r3, #128	@ 0x80
 800293c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800293e:	2318      	movs	r3, #24
 8002940:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8002942:	2300      	movs	r3, #0
 8002944:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8002946:	f04f 33ff 	mov.w	r3, #4294967295
 800294a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2b00      	cmp	r3, #0
 8002950:	d045      	beq.n	80029de <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	2b00      	cmp	r3, #0
 8002958:	d002      	beq.n	8002960 <osThreadNew+0x48>
        name = attr->name;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	699b      	ldr	r3, [r3, #24]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d002      	beq.n	800296e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	699b      	ldr	r3, [r3, #24]
 800296c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800296e:	69fb      	ldr	r3, [r7, #28]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d008      	beq.n	8002986 <osThreadNew+0x6e>
 8002974:	69fb      	ldr	r3, [r7, #28]
 8002976:	2b38      	cmp	r3, #56	@ 0x38
 8002978:	d805      	bhi.n	8002986 <osThreadNew+0x6e>
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	f003 0301 	and.w	r3, r3, #1
 8002982:	2b00      	cmp	r3, #0
 8002984:	d001      	beq.n	800298a <osThreadNew+0x72>
        return (NULL);
 8002986:	2300      	movs	r3, #0
 8002988:	e054      	b.n	8002a34 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	695b      	ldr	r3, [r3, #20]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d003      	beq.n	800299a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	695b      	ldr	r3, [r3, #20]
 8002996:	089b      	lsrs	r3, r3, #2
 8002998:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	689b      	ldr	r3, [r3, #8]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d00e      	beq.n	80029c0 <osThreadNew+0xa8>
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	68db      	ldr	r3, [r3, #12]
 80029a6:	2b5b      	cmp	r3, #91	@ 0x5b
 80029a8:	d90a      	bls.n	80029c0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d006      	beq.n	80029c0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	695b      	ldr	r3, [r3, #20]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d002      	beq.n	80029c0 <osThreadNew+0xa8>
        mem = 1;
 80029ba:	2301      	movs	r3, #1
 80029bc:	61bb      	str	r3, [r7, #24]
 80029be:	e010      	b.n	80029e2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	689b      	ldr	r3, [r3, #8]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d10c      	bne.n	80029e2 <osThreadNew+0xca>
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	68db      	ldr	r3, [r3, #12]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d108      	bne.n	80029e2 <osThreadNew+0xca>
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	691b      	ldr	r3, [r3, #16]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d104      	bne.n	80029e2 <osThreadNew+0xca>
          mem = 0;
 80029d8:	2300      	movs	r3, #0
 80029da:	61bb      	str	r3, [r7, #24]
 80029dc:	e001      	b.n	80029e2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80029de:	2300      	movs	r3, #0
 80029e0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80029e2:	69bb      	ldr	r3, [r7, #24]
 80029e4:	2b01      	cmp	r3, #1
 80029e6:	d110      	bne.n	8002a0a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80029ec:	687a      	ldr	r2, [r7, #4]
 80029ee:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80029f0:	9202      	str	r2, [sp, #8]
 80029f2:	9301      	str	r3, [sp, #4]
 80029f4:	69fb      	ldr	r3, [r7, #28]
 80029f6:	9300      	str	r3, [sp, #0]
 80029f8:	68bb      	ldr	r3, [r7, #8]
 80029fa:	6a3a      	ldr	r2, [r7, #32]
 80029fc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80029fe:	68f8      	ldr	r0, [r7, #12]
 8002a00:	f001 f866 	bl	8003ad0 <xTaskCreateStatic>
 8002a04:	4603      	mov	r3, r0
 8002a06:	613b      	str	r3, [r7, #16]
 8002a08:	e013      	b.n	8002a32 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8002a0a:	69bb      	ldr	r3, [r7, #24]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d110      	bne.n	8002a32 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8002a10:	6a3b      	ldr	r3, [r7, #32]
 8002a12:	b29a      	uxth	r2, r3
 8002a14:	f107 0310 	add.w	r3, r7, #16
 8002a18:	9301      	str	r3, [sp, #4]
 8002a1a:	69fb      	ldr	r3, [r7, #28]
 8002a1c:	9300      	str	r3, [sp, #0]
 8002a1e:	68bb      	ldr	r3, [r7, #8]
 8002a20:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002a22:	68f8      	ldr	r0, [r7, #12]
 8002a24:	f001 f8b4 	bl	8003b90 <xTaskCreate>
 8002a28:	4603      	mov	r3, r0
 8002a2a:	2b01      	cmp	r3, #1
 8002a2c:	d001      	beq.n	8002a32 <osThreadNew+0x11a>
            hTask = NULL;
 8002a2e:	2300      	movs	r3, #0
 8002a30:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8002a32:	693b      	ldr	r3, [r7, #16]
}
 8002a34:	4618      	mov	r0, r3
 8002a36:	3728      	adds	r7, #40	@ 0x28
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	bd80      	pop	{r7, pc}

08002a3c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b084      	sub	sp, #16
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002a44:	f3ef 8305 	mrs	r3, IPSR
 8002a48:	60bb      	str	r3, [r7, #8]
  return(result);
 8002a4a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d003      	beq.n	8002a58 <osDelay+0x1c>
    stat = osErrorISR;
 8002a50:	f06f 0305 	mvn.w	r3, #5
 8002a54:	60fb      	str	r3, [r7, #12]
 8002a56:	e007      	b.n	8002a68 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8002a58:	2300      	movs	r3, #0
 8002a5a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d002      	beq.n	8002a68 <osDelay+0x2c>
      vTaskDelay(ticks);
 8002a62:	6878      	ldr	r0, [r7, #4]
 8002a64:	f001 f9da 	bl	8003e1c <vTaskDelay>
    }
  }

  return (stat);
 8002a68:	68fb      	ldr	r3, [r7, #12]
}
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	3710      	adds	r7, #16
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bd80      	pop	{r7, pc}

08002a72 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8002a72:	b580      	push	{r7, lr}
 8002a74:	b08a      	sub	sp, #40	@ 0x28
 8002a76:	af02      	add	r7, sp, #8
 8002a78:	60f8      	str	r0, [r7, #12]
 8002a7a:	60b9      	str	r1, [r7, #8]
 8002a7c:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8002a7e:	2300      	movs	r3, #0
 8002a80:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002a82:	f3ef 8305 	mrs	r3, IPSR
 8002a86:	613b      	str	r3, [r7, #16]
  return(result);
 8002a88:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d15f      	bne.n	8002b4e <osMessageQueueNew+0xdc>
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d05c      	beq.n	8002b4e <osMessageQueueNew+0xdc>
 8002a94:	68bb      	ldr	r3, [r7, #8]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d059      	beq.n	8002b4e <osMessageQueueNew+0xdc>
    mem = -1;
 8002a9a:	f04f 33ff 	mov.w	r3, #4294967295
 8002a9e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d029      	beq.n	8002afa <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	689b      	ldr	r3, [r3, #8]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d012      	beq.n	8002ad4 <osMessageQueueNew+0x62>
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	68db      	ldr	r3, [r3, #12]
 8002ab2:	2b4f      	cmp	r3, #79	@ 0x4f
 8002ab4:	d90e      	bls.n	8002ad4 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d00a      	beq.n	8002ad4 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	695a      	ldr	r2, [r3, #20]
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	68b9      	ldr	r1, [r7, #8]
 8002ac6:	fb01 f303 	mul.w	r3, r1, r3
 8002aca:	429a      	cmp	r2, r3
 8002acc:	d302      	bcc.n	8002ad4 <osMessageQueueNew+0x62>
        mem = 1;
 8002ace:	2301      	movs	r3, #1
 8002ad0:	61bb      	str	r3, [r7, #24]
 8002ad2:	e014      	b.n	8002afe <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	689b      	ldr	r3, [r3, #8]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d110      	bne.n	8002afe <osMessageQueueNew+0x8c>
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	68db      	ldr	r3, [r3, #12]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d10c      	bne.n	8002afe <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d108      	bne.n	8002afe <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	695b      	ldr	r3, [r3, #20]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d104      	bne.n	8002afe <osMessageQueueNew+0x8c>
          mem = 0;
 8002af4:	2300      	movs	r3, #0
 8002af6:	61bb      	str	r3, [r7, #24]
 8002af8:	e001      	b.n	8002afe <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8002afa:	2300      	movs	r3, #0
 8002afc:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8002afe:	69bb      	ldr	r3, [r7, #24]
 8002b00:	2b01      	cmp	r3, #1
 8002b02:	d10b      	bne.n	8002b1c <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	691a      	ldr	r2, [r3, #16]
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	689b      	ldr	r3, [r3, #8]
 8002b0c:	2100      	movs	r1, #0
 8002b0e:	9100      	str	r1, [sp, #0]
 8002b10:	68b9      	ldr	r1, [r7, #8]
 8002b12:	68f8      	ldr	r0, [r7, #12]
 8002b14:	f000 fa50 	bl	8002fb8 <xQueueGenericCreateStatic>
 8002b18:	61f8      	str	r0, [r7, #28]
 8002b1a:	e008      	b.n	8002b2e <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8002b1c:	69bb      	ldr	r3, [r7, #24]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d105      	bne.n	8002b2e <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8002b22:	2200      	movs	r2, #0
 8002b24:	68b9      	ldr	r1, [r7, #8]
 8002b26:	68f8      	ldr	r0, [r7, #12]
 8002b28:	f000 fac3 	bl	80030b2 <xQueueGenericCreate>
 8002b2c:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8002b2e:	69fb      	ldr	r3, [r7, #28]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d00c      	beq.n	8002b4e <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d003      	beq.n	8002b42 <osMessageQueueNew+0xd0>
        name = attr->name;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	617b      	str	r3, [r7, #20]
 8002b40:	e001      	b.n	8002b46 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8002b42:	2300      	movs	r3, #0
 8002b44:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8002b46:	6979      	ldr	r1, [r7, #20]
 8002b48:	69f8      	ldr	r0, [r7, #28]
 8002b4a:	f000 ff63 	bl	8003a14 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8002b4e:	69fb      	ldr	r3, [r7, #28]
}
 8002b50:	4618      	mov	r0, r3
 8002b52:	3720      	adds	r7, #32
 8002b54:	46bd      	mov	sp, r7
 8002b56:	bd80      	pop	{r7, pc}

08002b58 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b088      	sub	sp, #32
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	60f8      	str	r0, [r7, #12]
 8002b60:	60b9      	str	r1, [r7, #8]
 8002b62:	603b      	str	r3, [r7, #0]
 8002b64:	4613      	mov	r3, r2
 8002b66:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002b70:	f3ef 8305 	mrs	r3, IPSR
 8002b74:	617b      	str	r3, [r7, #20]
  return(result);
 8002b76:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d028      	beq.n	8002bce <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8002b7c:	69bb      	ldr	r3, [r7, #24]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d005      	beq.n	8002b8e <osMessageQueuePut+0x36>
 8002b82:	68bb      	ldr	r3, [r7, #8]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d002      	beq.n	8002b8e <osMessageQueuePut+0x36>
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d003      	beq.n	8002b96 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8002b8e:	f06f 0303 	mvn.w	r3, #3
 8002b92:	61fb      	str	r3, [r7, #28]
 8002b94:	e038      	b.n	8002c08 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8002b96:	2300      	movs	r3, #0
 8002b98:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8002b9a:	f107 0210 	add.w	r2, r7, #16
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	68b9      	ldr	r1, [r7, #8]
 8002ba2:	69b8      	ldr	r0, [r7, #24]
 8002ba4:	f000 fbe6 	bl	8003374 <xQueueGenericSendFromISR>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	2b01      	cmp	r3, #1
 8002bac:	d003      	beq.n	8002bb6 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8002bae:	f06f 0302 	mvn.w	r3, #2
 8002bb2:	61fb      	str	r3, [r7, #28]
 8002bb4:	e028      	b.n	8002c08 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8002bb6:	693b      	ldr	r3, [r7, #16]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d025      	beq.n	8002c08 <osMessageQueuePut+0xb0>
 8002bbc:	4b15      	ldr	r3, [pc, #84]	@ (8002c14 <osMessageQueuePut+0xbc>)
 8002bbe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002bc2:	601a      	str	r2, [r3, #0]
 8002bc4:	f3bf 8f4f 	dsb	sy
 8002bc8:	f3bf 8f6f 	isb	sy
 8002bcc:	e01c      	b.n	8002c08 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8002bce:	69bb      	ldr	r3, [r7, #24]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d002      	beq.n	8002bda <osMessageQueuePut+0x82>
 8002bd4:	68bb      	ldr	r3, [r7, #8]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d103      	bne.n	8002be2 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8002bda:	f06f 0303 	mvn.w	r3, #3
 8002bde:	61fb      	str	r3, [r7, #28]
 8002be0:	e012      	b.n	8002c08 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8002be2:	2300      	movs	r3, #0
 8002be4:	683a      	ldr	r2, [r7, #0]
 8002be6:	68b9      	ldr	r1, [r7, #8]
 8002be8:	69b8      	ldr	r0, [r7, #24]
 8002bea:	f000 fac1 	bl	8003170 <xQueueGenericSend>
 8002bee:	4603      	mov	r3, r0
 8002bf0:	2b01      	cmp	r3, #1
 8002bf2:	d009      	beq.n	8002c08 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d003      	beq.n	8002c02 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8002bfa:	f06f 0301 	mvn.w	r3, #1
 8002bfe:	61fb      	str	r3, [r7, #28]
 8002c00:	e002      	b.n	8002c08 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8002c02:	f06f 0302 	mvn.w	r3, #2
 8002c06:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8002c08:	69fb      	ldr	r3, [r7, #28]
}
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	3720      	adds	r7, #32
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bd80      	pop	{r7, pc}
 8002c12:	bf00      	nop
 8002c14:	e000ed04 	.word	0xe000ed04

08002c18 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b088      	sub	sp, #32
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	60f8      	str	r0, [r7, #12]
 8002c20:	60b9      	str	r1, [r7, #8]
 8002c22:	607a      	str	r2, [r7, #4]
 8002c24:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002c2e:	f3ef 8305 	mrs	r3, IPSR
 8002c32:	617b      	str	r3, [r7, #20]
  return(result);
 8002c34:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d028      	beq.n	8002c8c <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8002c3a:	69bb      	ldr	r3, [r7, #24]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d005      	beq.n	8002c4c <osMessageQueueGet+0x34>
 8002c40:	68bb      	ldr	r3, [r7, #8]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d002      	beq.n	8002c4c <osMessageQueueGet+0x34>
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d003      	beq.n	8002c54 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8002c4c:	f06f 0303 	mvn.w	r3, #3
 8002c50:	61fb      	str	r3, [r7, #28]
 8002c52:	e037      	b.n	8002cc4 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8002c54:	2300      	movs	r3, #0
 8002c56:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8002c58:	f107 0310 	add.w	r3, r7, #16
 8002c5c:	461a      	mov	r2, r3
 8002c5e:	68b9      	ldr	r1, [r7, #8]
 8002c60:	69b8      	ldr	r0, [r7, #24]
 8002c62:	f000 fd07 	bl	8003674 <xQueueReceiveFromISR>
 8002c66:	4603      	mov	r3, r0
 8002c68:	2b01      	cmp	r3, #1
 8002c6a:	d003      	beq.n	8002c74 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8002c6c:	f06f 0302 	mvn.w	r3, #2
 8002c70:	61fb      	str	r3, [r7, #28]
 8002c72:	e027      	b.n	8002cc4 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8002c74:	693b      	ldr	r3, [r7, #16]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d024      	beq.n	8002cc4 <osMessageQueueGet+0xac>
 8002c7a:	4b15      	ldr	r3, [pc, #84]	@ (8002cd0 <osMessageQueueGet+0xb8>)
 8002c7c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002c80:	601a      	str	r2, [r3, #0]
 8002c82:	f3bf 8f4f 	dsb	sy
 8002c86:	f3bf 8f6f 	isb	sy
 8002c8a:	e01b      	b.n	8002cc4 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8002c8c:	69bb      	ldr	r3, [r7, #24]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d002      	beq.n	8002c98 <osMessageQueueGet+0x80>
 8002c92:	68bb      	ldr	r3, [r7, #8]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d103      	bne.n	8002ca0 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8002c98:	f06f 0303 	mvn.w	r3, #3
 8002c9c:	61fb      	str	r3, [r7, #28]
 8002c9e:	e011      	b.n	8002cc4 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8002ca0:	683a      	ldr	r2, [r7, #0]
 8002ca2:	68b9      	ldr	r1, [r7, #8]
 8002ca4:	69b8      	ldr	r0, [r7, #24]
 8002ca6:	f000 fc03 	bl	80034b0 <xQueueReceive>
 8002caa:	4603      	mov	r3, r0
 8002cac:	2b01      	cmp	r3, #1
 8002cae:	d009      	beq.n	8002cc4 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d003      	beq.n	8002cbe <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8002cb6:	f06f 0301 	mvn.w	r3, #1
 8002cba:	61fb      	str	r3, [r7, #28]
 8002cbc:	e002      	b.n	8002cc4 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8002cbe:	f06f 0302 	mvn.w	r3, #2
 8002cc2:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8002cc4:	69fb      	ldr	r3, [r7, #28]
}
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	3720      	adds	r7, #32
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bd80      	pop	{r7, pc}
 8002cce:	bf00      	nop
 8002cd0:	e000ed04 	.word	0xe000ed04

08002cd4 <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b086      	sub	sp, #24
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	613b      	str	r3, [r7, #16]
  UBaseType_t count;

  if (hQueue == NULL) {
 8002ce0:	693b      	ldr	r3, [r7, #16]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d102      	bne.n	8002cec <osMessageQueueGetCount+0x18>
    count = 0U;
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	617b      	str	r3, [r7, #20]
 8002cea:	e00e      	b.n	8002d0a <osMessageQueueGetCount+0x36>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002cec:	f3ef 8305 	mrs	r3, IPSR
 8002cf0:	60fb      	str	r3, [r7, #12]
  return(result);
 8002cf2:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d004      	beq.n	8002d02 <osMessageQueueGetCount+0x2e>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 8002cf8:	6938      	ldr	r0, [r7, #16]
 8002cfa:	f000 fd5c 	bl	80037b6 <uxQueueMessagesWaitingFromISR>
 8002cfe:	6178      	str	r0, [r7, #20]
 8002d00:	e003      	b.n	8002d0a <osMessageQueueGetCount+0x36>
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 8002d02:	6938      	ldr	r0, [r7, #16]
 8002d04:	f000 fd38 	bl	8003778 <uxQueueMessagesWaiting>
 8002d08:	6178      	str	r0, [r7, #20]
  }

  return ((uint32_t)count);
 8002d0a:	697b      	ldr	r3, [r7, #20]
}
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	3718      	adds	r7, #24
 8002d10:	46bd      	mov	sp, r7
 8002d12:	bd80      	pop	{r7, pc}

08002d14 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002d14:	b480      	push	{r7}
 8002d16:	b085      	sub	sp, #20
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	60f8      	str	r0, [r7, #12]
 8002d1c:	60b9      	str	r1, [r7, #8]
 8002d1e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	4a07      	ldr	r2, [pc, #28]	@ (8002d40 <vApplicationGetIdleTaskMemory+0x2c>)
 8002d24:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002d26:	68bb      	ldr	r3, [r7, #8]
 8002d28:	4a06      	ldr	r2, [pc, #24]	@ (8002d44 <vApplicationGetIdleTaskMemory+0x30>)
 8002d2a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2280      	movs	r2, #128	@ 0x80
 8002d30:	601a      	str	r2, [r3, #0]
}
 8002d32:	bf00      	nop
 8002d34:	3714      	adds	r7, #20
 8002d36:	46bd      	mov	sp, r7
 8002d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3c:	4770      	bx	lr
 8002d3e:	bf00      	nop
 8002d40:	200000d4 	.word	0x200000d4
 8002d44:	20000130 	.word	0x20000130

08002d48 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002d48:	b480      	push	{r7}
 8002d4a:	b085      	sub	sp, #20
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	60f8      	str	r0, [r7, #12]
 8002d50:	60b9      	str	r1, [r7, #8]
 8002d52:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	4a07      	ldr	r2, [pc, #28]	@ (8002d74 <vApplicationGetTimerTaskMemory+0x2c>)
 8002d58:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002d5a:	68bb      	ldr	r3, [r7, #8]
 8002d5c:	4a06      	ldr	r2, [pc, #24]	@ (8002d78 <vApplicationGetTimerTaskMemory+0x30>)
 8002d5e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002d66:	601a      	str	r2, [r3, #0]
}
 8002d68:	bf00      	nop
 8002d6a:	3714      	adds	r7, #20
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d72:	4770      	bx	lr
 8002d74:	20000330 	.word	0x20000330
 8002d78:	2000038c 	.word	0x2000038c

08002d7c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	b083      	sub	sp, #12
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	f103 0208 	add.w	r2, r3, #8
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	f04f 32ff 	mov.w	r2, #4294967295
 8002d94:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	f103 0208 	add.w	r2, r3, #8
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	f103 0208 	add.w	r2, r3, #8
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	2200      	movs	r2, #0
 8002dae:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002db0:	bf00      	nop
 8002db2:	370c      	adds	r7, #12
 8002db4:	46bd      	mov	sp, r7
 8002db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dba:	4770      	bx	lr

08002dbc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	b083      	sub	sp, #12
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002dca:	bf00      	nop
 8002dcc:	370c      	adds	r7, #12
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd4:	4770      	bx	lr

08002dd6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002dd6:	b480      	push	{r7}
 8002dd8:	b085      	sub	sp, #20
 8002dda:	af00      	add	r7, sp, #0
 8002ddc:	6078      	str	r0, [r7, #4]
 8002dde:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	68fa      	ldr	r2, [r7, #12]
 8002dea:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	689a      	ldr	r2, [r3, #8]
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	689b      	ldr	r3, [r3, #8]
 8002df8:	683a      	ldr	r2, [r7, #0]
 8002dfa:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	683a      	ldr	r2, [r7, #0]
 8002e00:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	687a      	ldr	r2, [r7, #4]
 8002e06:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	1c5a      	adds	r2, r3, #1
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	601a      	str	r2, [r3, #0]
}
 8002e12:	bf00      	nop
 8002e14:	3714      	adds	r7, #20
 8002e16:	46bd      	mov	sp, r7
 8002e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1c:	4770      	bx	lr

08002e1e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002e1e:	b480      	push	{r7}
 8002e20:	b085      	sub	sp, #20
 8002e22:	af00      	add	r7, sp, #0
 8002e24:	6078      	str	r0, [r7, #4]
 8002e26:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002e2e:	68bb      	ldr	r3, [r7, #8]
 8002e30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e34:	d103      	bne.n	8002e3e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	691b      	ldr	r3, [r3, #16]
 8002e3a:	60fb      	str	r3, [r7, #12]
 8002e3c:	e00c      	b.n	8002e58 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	3308      	adds	r3, #8
 8002e42:	60fb      	str	r3, [r7, #12]
 8002e44:	e002      	b.n	8002e4c <vListInsert+0x2e>
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	685b      	ldr	r3, [r3, #4]
 8002e4a:	60fb      	str	r3, [r7, #12]
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	685b      	ldr	r3, [r3, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	68ba      	ldr	r2, [r7, #8]
 8002e54:	429a      	cmp	r2, r3
 8002e56:	d2f6      	bcs.n	8002e46 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	685a      	ldr	r2, [r3, #4]
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	683a      	ldr	r2, [r7, #0]
 8002e66:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	68fa      	ldr	r2, [r7, #12]
 8002e6c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	683a      	ldr	r2, [r7, #0]
 8002e72:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	687a      	ldr	r2, [r7, #4]
 8002e78:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	1c5a      	adds	r2, r3, #1
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	601a      	str	r2, [r3, #0]
}
 8002e84:	bf00      	nop
 8002e86:	3714      	adds	r7, #20
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8e:	4770      	bx	lr

08002e90 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002e90:	b480      	push	{r7}
 8002e92:	b085      	sub	sp, #20
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	691b      	ldr	r3, [r3, #16]
 8002e9c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	687a      	ldr	r2, [r7, #4]
 8002ea4:	6892      	ldr	r2, [r2, #8]
 8002ea6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	689b      	ldr	r3, [r3, #8]
 8002eac:	687a      	ldr	r2, [r7, #4]
 8002eae:	6852      	ldr	r2, [r2, #4]
 8002eb0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	687a      	ldr	r2, [r7, #4]
 8002eb8:	429a      	cmp	r2, r3
 8002eba:	d103      	bne.n	8002ec4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	689a      	ldr	r2, [r3, #8]
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	1e5a      	subs	r2, r3, #1
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681b      	ldr	r3, [r3, #0]
}
 8002ed8:	4618      	mov	r0, r3
 8002eda:	3714      	adds	r7, #20
 8002edc:	46bd      	mov	sp, r7
 8002ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee2:	4770      	bx	lr

08002ee4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b084      	sub	sp, #16
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
 8002eec:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d10b      	bne.n	8002f10 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002ef8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002efc:	f383 8811 	msr	BASEPRI, r3
 8002f00:	f3bf 8f6f 	isb	sy
 8002f04:	f3bf 8f4f 	dsb	sy
 8002f08:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002f0a:	bf00      	nop
 8002f0c:	bf00      	nop
 8002f0e:	e7fd      	b.n	8002f0c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002f10:	f002 f972 	bl	80051f8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	681a      	ldr	r2, [r3, #0]
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f1c:	68f9      	ldr	r1, [r7, #12]
 8002f1e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002f20:	fb01 f303 	mul.w	r3, r1, r3
 8002f24:	441a      	add	r2, r3
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	681a      	ldr	r2, [r3, #0]
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681a      	ldr	r2, [r3, #0]
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f40:	3b01      	subs	r3, #1
 8002f42:	68f9      	ldr	r1, [r7, #12]
 8002f44:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002f46:	fb01 f303 	mul.w	r3, r1, r3
 8002f4a:	441a      	add	r2, r3
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	22ff      	movs	r2, #255	@ 0xff
 8002f54:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	22ff      	movs	r2, #255	@ 0xff
 8002f5c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d114      	bne.n	8002f90 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	691b      	ldr	r3, [r3, #16]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d01a      	beq.n	8002fa4 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	3310      	adds	r3, #16
 8002f72:	4618      	mov	r0, r3
 8002f74:	f001 fa16 	bl	80043a4 <xTaskRemoveFromEventList>
 8002f78:	4603      	mov	r3, r0
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d012      	beq.n	8002fa4 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002f7e:	4b0d      	ldr	r3, [pc, #52]	@ (8002fb4 <xQueueGenericReset+0xd0>)
 8002f80:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002f84:	601a      	str	r2, [r3, #0]
 8002f86:	f3bf 8f4f 	dsb	sy
 8002f8a:	f3bf 8f6f 	isb	sy
 8002f8e:	e009      	b.n	8002fa4 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	3310      	adds	r3, #16
 8002f94:	4618      	mov	r0, r3
 8002f96:	f7ff fef1 	bl	8002d7c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	3324      	adds	r3, #36	@ 0x24
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	f7ff feec 	bl	8002d7c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002fa4:	f002 f95a 	bl	800525c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002fa8:	2301      	movs	r3, #1
}
 8002faa:	4618      	mov	r0, r3
 8002fac:	3710      	adds	r7, #16
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bd80      	pop	{r7, pc}
 8002fb2:	bf00      	nop
 8002fb4:	e000ed04 	.word	0xe000ed04

08002fb8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b08e      	sub	sp, #56	@ 0x38
 8002fbc:	af02      	add	r7, sp, #8
 8002fbe:	60f8      	str	r0, [r7, #12]
 8002fc0:	60b9      	str	r1, [r7, #8]
 8002fc2:	607a      	str	r2, [r7, #4]
 8002fc4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d10b      	bne.n	8002fe4 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8002fcc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002fd0:	f383 8811 	msr	BASEPRI, r3
 8002fd4:	f3bf 8f6f 	isb	sy
 8002fd8:	f3bf 8f4f 	dsb	sy
 8002fdc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002fde:	bf00      	nop
 8002fe0:	bf00      	nop
 8002fe2:	e7fd      	b.n	8002fe0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d10b      	bne.n	8003002 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8002fea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002fee:	f383 8811 	msr	BASEPRI, r3
 8002ff2:	f3bf 8f6f 	isb	sy
 8002ff6:	f3bf 8f4f 	dsb	sy
 8002ffa:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002ffc:	bf00      	nop
 8002ffe:	bf00      	nop
 8003000:	e7fd      	b.n	8002ffe <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d002      	beq.n	800300e <xQueueGenericCreateStatic+0x56>
 8003008:	68bb      	ldr	r3, [r7, #8]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d001      	beq.n	8003012 <xQueueGenericCreateStatic+0x5a>
 800300e:	2301      	movs	r3, #1
 8003010:	e000      	b.n	8003014 <xQueueGenericCreateStatic+0x5c>
 8003012:	2300      	movs	r3, #0
 8003014:	2b00      	cmp	r3, #0
 8003016:	d10b      	bne.n	8003030 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8003018:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800301c:	f383 8811 	msr	BASEPRI, r3
 8003020:	f3bf 8f6f 	isb	sy
 8003024:	f3bf 8f4f 	dsb	sy
 8003028:	623b      	str	r3, [r7, #32]
}
 800302a:	bf00      	nop
 800302c:	bf00      	nop
 800302e:	e7fd      	b.n	800302c <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d102      	bne.n	800303c <xQueueGenericCreateStatic+0x84>
 8003036:	68bb      	ldr	r3, [r7, #8]
 8003038:	2b00      	cmp	r3, #0
 800303a:	d101      	bne.n	8003040 <xQueueGenericCreateStatic+0x88>
 800303c:	2301      	movs	r3, #1
 800303e:	e000      	b.n	8003042 <xQueueGenericCreateStatic+0x8a>
 8003040:	2300      	movs	r3, #0
 8003042:	2b00      	cmp	r3, #0
 8003044:	d10b      	bne.n	800305e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8003046:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800304a:	f383 8811 	msr	BASEPRI, r3
 800304e:	f3bf 8f6f 	isb	sy
 8003052:	f3bf 8f4f 	dsb	sy
 8003056:	61fb      	str	r3, [r7, #28]
}
 8003058:	bf00      	nop
 800305a:	bf00      	nop
 800305c:	e7fd      	b.n	800305a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800305e:	2350      	movs	r3, #80	@ 0x50
 8003060:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003062:	697b      	ldr	r3, [r7, #20]
 8003064:	2b50      	cmp	r3, #80	@ 0x50
 8003066:	d00b      	beq.n	8003080 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8003068:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800306c:	f383 8811 	msr	BASEPRI, r3
 8003070:	f3bf 8f6f 	isb	sy
 8003074:	f3bf 8f4f 	dsb	sy
 8003078:	61bb      	str	r3, [r7, #24]
}
 800307a:	bf00      	nop
 800307c:	bf00      	nop
 800307e:	e7fd      	b.n	800307c <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003080:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8003086:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003088:	2b00      	cmp	r3, #0
 800308a:	d00d      	beq.n	80030a8 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800308c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800308e:	2201      	movs	r2, #1
 8003090:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003094:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8003098:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800309a:	9300      	str	r3, [sp, #0]
 800309c:	4613      	mov	r3, r2
 800309e:	687a      	ldr	r2, [r7, #4]
 80030a0:	68b9      	ldr	r1, [r7, #8]
 80030a2:	68f8      	ldr	r0, [r7, #12]
 80030a4:	f000 f840 	bl	8003128 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80030a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80030aa:	4618      	mov	r0, r3
 80030ac:	3730      	adds	r7, #48	@ 0x30
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bd80      	pop	{r7, pc}

080030b2 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80030b2:	b580      	push	{r7, lr}
 80030b4:	b08a      	sub	sp, #40	@ 0x28
 80030b6:	af02      	add	r7, sp, #8
 80030b8:	60f8      	str	r0, [r7, #12]
 80030ba:	60b9      	str	r1, [r7, #8]
 80030bc:	4613      	mov	r3, r2
 80030be:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d10b      	bne.n	80030de <xQueueGenericCreate+0x2c>
	__asm volatile
 80030c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80030ca:	f383 8811 	msr	BASEPRI, r3
 80030ce:	f3bf 8f6f 	isb	sy
 80030d2:	f3bf 8f4f 	dsb	sy
 80030d6:	613b      	str	r3, [r7, #16]
}
 80030d8:	bf00      	nop
 80030da:	bf00      	nop
 80030dc:	e7fd      	b.n	80030da <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	68ba      	ldr	r2, [r7, #8]
 80030e2:	fb02 f303 	mul.w	r3, r2, r3
 80030e6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80030e8:	69fb      	ldr	r3, [r7, #28]
 80030ea:	3350      	adds	r3, #80	@ 0x50
 80030ec:	4618      	mov	r0, r3
 80030ee:	f002 f9a5 	bl	800543c <pvPortMalloc>
 80030f2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80030f4:	69bb      	ldr	r3, [r7, #24]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d011      	beq.n	800311e <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80030fa:	69bb      	ldr	r3, [r7, #24]
 80030fc:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80030fe:	697b      	ldr	r3, [r7, #20]
 8003100:	3350      	adds	r3, #80	@ 0x50
 8003102:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8003104:	69bb      	ldr	r3, [r7, #24]
 8003106:	2200      	movs	r2, #0
 8003108:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800310c:	79fa      	ldrb	r2, [r7, #7]
 800310e:	69bb      	ldr	r3, [r7, #24]
 8003110:	9300      	str	r3, [sp, #0]
 8003112:	4613      	mov	r3, r2
 8003114:	697a      	ldr	r2, [r7, #20]
 8003116:	68b9      	ldr	r1, [r7, #8]
 8003118:	68f8      	ldr	r0, [r7, #12]
 800311a:	f000 f805 	bl	8003128 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800311e:	69bb      	ldr	r3, [r7, #24]
	}
 8003120:	4618      	mov	r0, r3
 8003122:	3720      	adds	r7, #32
 8003124:	46bd      	mov	sp, r7
 8003126:	bd80      	pop	{r7, pc}

08003128 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b084      	sub	sp, #16
 800312c:	af00      	add	r7, sp, #0
 800312e:	60f8      	str	r0, [r7, #12]
 8003130:	60b9      	str	r1, [r7, #8]
 8003132:	607a      	str	r2, [r7, #4]
 8003134:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003136:	68bb      	ldr	r3, [r7, #8]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d103      	bne.n	8003144 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800313c:	69bb      	ldr	r3, [r7, #24]
 800313e:	69ba      	ldr	r2, [r7, #24]
 8003140:	601a      	str	r2, [r3, #0]
 8003142:	e002      	b.n	800314a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003144:	69bb      	ldr	r3, [r7, #24]
 8003146:	687a      	ldr	r2, [r7, #4]
 8003148:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800314a:	69bb      	ldr	r3, [r7, #24]
 800314c:	68fa      	ldr	r2, [r7, #12]
 800314e:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003150:	69bb      	ldr	r3, [r7, #24]
 8003152:	68ba      	ldr	r2, [r7, #8]
 8003154:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003156:	2101      	movs	r1, #1
 8003158:	69b8      	ldr	r0, [r7, #24]
 800315a:	f7ff fec3 	bl	8002ee4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800315e:	69bb      	ldr	r3, [r7, #24]
 8003160:	78fa      	ldrb	r2, [r7, #3]
 8003162:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003166:	bf00      	nop
 8003168:	3710      	adds	r7, #16
 800316a:	46bd      	mov	sp, r7
 800316c:	bd80      	pop	{r7, pc}
	...

08003170 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b08e      	sub	sp, #56	@ 0x38
 8003174:	af00      	add	r7, sp, #0
 8003176:	60f8      	str	r0, [r7, #12]
 8003178:	60b9      	str	r1, [r7, #8]
 800317a:	607a      	str	r2, [r7, #4]
 800317c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800317e:	2300      	movs	r3, #0
 8003180:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8003186:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003188:	2b00      	cmp	r3, #0
 800318a:	d10b      	bne.n	80031a4 <xQueueGenericSend+0x34>
	__asm volatile
 800318c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003190:	f383 8811 	msr	BASEPRI, r3
 8003194:	f3bf 8f6f 	isb	sy
 8003198:	f3bf 8f4f 	dsb	sy
 800319c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800319e:	bf00      	nop
 80031a0:	bf00      	nop
 80031a2:	e7fd      	b.n	80031a0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80031a4:	68bb      	ldr	r3, [r7, #8]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d103      	bne.n	80031b2 <xQueueGenericSend+0x42>
 80031aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d101      	bne.n	80031b6 <xQueueGenericSend+0x46>
 80031b2:	2301      	movs	r3, #1
 80031b4:	e000      	b.n	80031b8 <xQueueGenericSend+0x48>
 80031b6:	2300      	movs	r3, #0
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d10b      	bne.n	80031d4 <xQueueGenericSend+0x64>
	__asm volatile
 80031bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80031c0:	f383 8811 	msr	BASEPRI, r3
 80031c4:	f3bf 8f6f 	isb	sy
 80031c8:	f3bf 8f4f 	dsb	sy
 80031cc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80031ce:	bf00      	nop
 80031d0:	bf00      	nop
 80031d2:	e7fd      	b.n	80031d0 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	2b02      	cmp	r3, #2
 80031d8:	d103      	bne.n	80031e2 <xQueueGenericSend+0x72>
 80031da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031de:	2b01      	cmp	r3, #1
 80031e0:	d101      	bne.n	80031e6 <xQueueGenericSend+0x76>
 80031e2:	2301      	movs	r3, #1
 80031e4:	e000      	b.n	80031e8 <xQueueGenericSend+0x78>
 80031e6:	2300      	movs	r3, #0
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d10b      	bne.n	8003204 <xQueueGenericSend+0x94>
	__asm volatile
 80031ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80031f0:	f383 8811 	msr	BASEPRI, r3
 80031f4:	f3bf 8f6f 	isb	sy
 80031f8:	f3bf 8f4f 	dsb	sy
 80031fc:	623b      	str	r3, [r7, #32]
}
 80031fe:	bf00      	nop
 8003200:	bf00      	nop
 8003202:	e7fd      	b.n	8003200 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003204:	f001 fa8e 	bl	8004724 <xTaskGetSchedulerState>
 8003208:	4603      	mov	r3, r0
 800320a:	2b00      	cmp	r3, #0
 800320c:	d102      	bne.n	8003214 <xQueueGenericSend+0xa4>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2b00      	cmp	r3, #0
 8003212:	d101      	bne.n	8003218 <xQueueGenericSend+0xa8>
 8003214:	2301      	movs	r3, #1
 8003216:	e000      	b.n	800321a <xQueueGenericSend+0xaa>
 8003218:	2300      	movs	r3, #0
 800321a:	2b00      	cmp	r3, #0
 800321c:	d10b      	bne.n	8003236 <xQueueGenericSend+0xc6>
	__asm volatile
 800321e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003222:	f383 8811 	msr	BASEPRI, r3
 8003226:	f3bf 8f6f 	isb	sy
 800322a:	f3bf 8f4f 	dsb	sy
 800322e:	61fb      	str	r3, [r7, #28]
}
 8003230:	bf00      	nop
 8003232:	bf00      	nop
 8003234:	e7fd      	b.n	8003232 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003236:	f001 ffdf 	bl	80051f8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800323a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800323c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800323e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003240:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003242:	429a      	cmp	r2, r3
 8003244:	d302      	bcc.n	800324c <xQueueGenericSend+0xdc>
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	2b02      	cmp	r3, #2
 800324a:	d129      	bne.n	80032a0 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800324c:	683a      	ldr	r2, [r7, #0]
 800324e:	68b9      	ldr	r1, [r7, #8]
 8003250:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003252:	f000 facf 	bl	80037f4 <prvCopyDataToQueue>
 8003256:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003258:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800325a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800325c:	2b00      	cmp	r3, #0
 800325e:	d010      	beq.n	8003282 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003260:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003262:	3324      	adds	r3, #36	@ 0x24
 8003264:	4618      	mov	r0, r3
 8003266:	f001 f89d 	bl	80043a4 <xTaskRemoveFromEventList>
 800326a:	4603      	mov	r3, r0
 800326c:	2b00      	cmp	r3, #0
 800326e:	d013      	beq.n	8003298 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003270:	4b3f      	ldr	r3, [pc, #252]	@ (8003370 <xQueueGenericSend+0x200>)
 8003272:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003276:	601a      	str	r2, [r3, #0]
 8003278:	f3bf 8f4f 	dsb	sy
 800327c:	f3bf 8f6f 	isb	sy
 8003280:	e00a      	b.n	8003298 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003282:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003284:	2b00      	cmp	r3, #0
 8003286:	d007      	beq.n	8003298 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003288:	4b39      	ldr	r3, [pc, #228]	@ (8003370 <xQueueGenericSend+0x200>)
 800328a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800328e:	601a      	str	r2, [r3, #0]
 8003290:	f3bf 8f4f 	dsb	sy
 8003294:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003298:	f001 ffe0 	bl	800525c <vPortExitCritical>
				return pdPASS;
 800329c:	2301      	movs	r3, #1
 800329e:	e063      	b.n	8003368 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d103      	bne.n	80032ae <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80032a6:	f001 ffd9 	bl	800525c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80032aa:	2300      	movs	r3, #0
 80032ac:	e05c      	b.n	8003368 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80032ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d106      	bne.n	80032c2 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80032b4:	f107 0314 	add.w	r3, r7, #20
 80032b8:	4618      	mov	r0, r3
 80032ba:	f001 f8d7 	bl	800446c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80032be:	2301      	movs	r3, #1
 80032c0:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80032c2:	f001 ffcb 	bl	800525c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80032c6:	f000 fe47 	bl	8003f58 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80032ca:	f001 ff95 	bl	80051f8 <vPortEnterCritical>
 80032ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032d0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80032d4:	b25b      	sxtb	r3, r3
 80032d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032da:	d103      	bne.n	80032e4 <xQueueGenericSend+0x174>
 80032dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032de:	2200      	movs	r2, #0
 80032e0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80032e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032e6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80032ea:	b25b      	sxtb	r3, r3
 80032ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032f0:	d103      	bne.n	80032fa <xQueueGenericSend+0x18a>
 80032f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032f4:	2200      	movs	r2, #0
 80032f6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80032fa:	f001 ffaf 	bl	800525c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80032fe:	1d3a      	adds	r2, r7, #4
 8003300:	f107 0314 	add.w	r3, r7, #20
 8003304:	4611      	mov	r1, r2
 8003306:	4618      	mov	r0, r3
 8003308:	f001 f8c6 	bl	8004498 <xTaskCheckForTimeOut>
 800330c:	4603      	mov	r3, r0
 800330e:	2b00      	cmp	r3, #0
 8003310:	d124      	bne.n	800335c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003312:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003314:	f000 fb66 	bl	80039e4 <prvIsQueueFull>
 8003318:	4603      	mov	r3, r0
 800331a:	2b00      	cmp	r3, #0
 800331c:	d018      	beq.n	8003350 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800331e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003320:	3310      	adds	r3, #16
 8003322:	687a      	ldr	r2, [r7, #4]
 8003324:	4611      	mov	r1, r2
 8003326:	4618      	mov	r0, r3
 8003328:	f000 ffea 	bl	8004300 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800332c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800332e:	f000 faf1 	bl	8003914 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003332:	f000 fe1f 	bl	8003f74 <xTaskResumeAll>
 8003336:	4603      	mov	r3, r0
 8003338:	2b00      	cmp	r3, #0
 800333a:	f47f af7c 	bne.w	8003236 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800333e:	4b0c      	ldr	r3, [pc, #48]	@ (8003370 <xQueueGenericSend+0x200>)
 8003340:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003344:	601a      	str	r2, [r3, #0]
 8003346:	f3bf 8f4f 	dsb	sy
 800334a:	f3bf 8f6f 	isb	sy
 800334e:	e772      	b.n	8003236 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003350:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003352:	f000 fadf 	bl	8003914 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003356:	f000 fe0d 	bl	8003f74 <xTaskResumeAll>
 800335a:	e76c      	b.n	8003236 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800335c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800335e:	f000 fad9 	bl	8003914 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003362:	f000 fe07 	bl	8003f74 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003366:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003368:	4618      	mov	r0, r3
 800336a:	3738      	adds	r7, #56	@ 0x38
 800336c:	46bd      	mov	sp, r7
 800336e:	bd80      	pop	{r7, pc}
 8003370:	e000ed04 	.word	0xe000ed04

08003374 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b090      	sub	sp, #64	@ 0x40
 8003378:	af00      	add	r7, sp, #0
 800337a:	60f8      	str	r0, [r7, #12]
 800337c:	60b9      	str	r1, [r7, #8]
 800337e:	607a      	str	r2, [r7, #4]
 8003380:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8003386:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003388:	2b00      	cmp	r3, #0
 800338a:	d10b      	bne.n	80033a4 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800338c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003390:	f383 8811 	msr	BASEPRI, r3
 8003394:	f3bf 8f6f 	isb	sy
 8003398:	f3bf 8f4f 	dsb	sy
 800339c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800339e:	bf00      	nop
 80033a0:	bf00      	nop
 80033a2:	e7fd      	b.n	80033a0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80033a4:	68bb      	ldr	r3, [r7, #8]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d103      	bne.n	80033b2 <xQueueGenericSendFromISR+0x3e>
 80033aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80033ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d101      	bne.n	80033b6 <xQueueGenericSendFromISR+0x42>
 80033b2:	2301      	movs	r3, #1
 80033b4:	e000      	b.n	80033b8 <xQueueGenericSendFromISR+0x44>
 80033b6:	2300      	movs	r3, #0
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d10b      	bne.n	80033d4 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80033bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80033c0:	f383 8811 	msr	BASEPRI, r3
 80033c4:	f3bf 8f6f 	isb	sy
 80033c8:	f3bf 8f4f 	dsb	sy
 80033cc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80033ce:	bf00      	nop
 80033d0:	bf00      	nop
 80033d2:	e7fd      	b.n	80033d0 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	2b02      	cmp	r3, #2
 80033d8:	d103      	bne.n	80033e2 <xQueueGenericSendFromISR+0x6e>
 80033da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80033dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033de:	2b01      	cmp	r3, #1
 80033e0:	d101      	bne.n	80033e6 <xQueueGenericSendFromISR+0x72>
 80033e2:	2301      	movs	r3, #1
 80033e4:	e000      	b.n	80033e8 <xQueueGenericSendFromISR+0x74>
 80033e6:	2300      	movs	r3, #0
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d10b      	bne.n	8003404 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80033ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80033f0:	f383 8811 	msr	BASEPRI, r3
 80033f4:	f3bf 8f6f 	isb	sy
 80033f8:	f3bf 8f4f 	dsb	sy
 80033fc:	623b      	str	r3, [r7, #32]
}
 80033fe:	bf00      	nop
 8003400:	bf00      	nop
 8003402:	e7fd      	b.n	8003400 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003404:	f001 ffd8 	bl	80053b8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003408:	f3ef 8211 	mrs	r2, BASEPRI
 800340c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003410:	f383 8811 	msr	BASEPRI, r3
 8003414:	f3bf 8f6f 	isb	sy
 8003418:	f3bf 8f4f 	dsb	sy
 800341c:	61fa      	str	r2, [r7, #28]
 800341e:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003420:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003422:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003424:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003426:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003428:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800342a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800342c:	429a      	cmp	r2, r3
 800342e:	d302      	bcc.n	8003436 <xQueueGenericSendFromISR+0xc2>
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	2b02      	cmp	r3, #2
 8003434:	d12f      	bne.n	8003496 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003436:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003438:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800343c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003440:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003442:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003444:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003446:	683a      	ldr	r2, [r7, #0]
 8003448:	68b9      	ldr	r1, [r7, #8]
 800344a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800344c:	f000 f9d2 	bl	80037f4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003450:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8003454:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003458:	d112      	bne.n	8003480 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800345a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800345c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800345e:	2b00      	cmp	r3, #0
 8003460:	d016      	beq.n	8003490 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003462:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003464:	3324      	adds	r3, #36	@ 0x24
 8003466:	4618      	mov	r0, r3
 8003468:	f000 ff9c 	bl	80043a4 <xTaskRemoveFromEventList>
 800346c:	4603      	mov	r3, r0
 800346e:	2b00      	cmp	r3, #0
 8003470:	d00e      	beq.n	8003490 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d00b      	beq.n	8003490 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2201      	movs	r2, #1
 800347c:	601a      	str	r2, [r3, #0]
 800347e:	e007      	b.n	8003490 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003480:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8003484:	3301      	adds	r3, #1
 8003486:	b2db      	uxtb	r3, r3
 8003488:	b25a      	sxtb	r2, r3
 800348a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800348c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8003490:	2301      	movs	r3, #1
 8003492:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8003494:	e001      	b.n	800349a <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003496:	2300      	movs	r3, #0
 8003498:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800349a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800349c:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800349e:	697b      	ldr	r3, [r7, #20]
 80034a0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80034a4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80034a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80034a8:	4618      	mov	r0, r3
 80034aa:	3740      	adds	r7, #64	@ 0x40
 80034ac:	46bd      	mov	sp, r7
 80034ae:	bd80      	pop	{r7, pc}

080034b0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b08c      	sub	sp, #48	@ 0x30
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	60f8      	str	r0, [r7, #12]
 80034b8:	60b9      	str	r1, [r7, #8]
 80034ba:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80034bc:	2300      	movs	r3, #0
 80034be:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80034c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d10b      	bne.n	80034e2 <xQueueReceive+0x32>
	__asm volatile
 80034ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034ce:	f383 8811 	msr	BASEPRI, r3
 80034d2:	f3bf 8f6f 	isb	sy
 80034d6:	f3bf 8f4f 	dsb	sy
 80034da:	623b      	str	r3, [r7, #32]
}
 80034dc:	bf00      	nop
 80034de:	bf00      	nop
 80034e0:	e7fd      	b.n	80034de <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80034e2:	68bb      	ldr	r3, [r7, #8]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d103      	bne.n	80034f0 <xQueueReceive+0x40>
 80034e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d101      	bne.n	80034f4 <xQueueReceive+0x44>
 80034f0:	2301      	movs	r3, #1
 80034f2:	e000      	b.n	80034f6 <xQueueReceive+0x46>
 80034f4:	2300      	movs	r3, #0
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d10b      	bne.n	8003512 <xQueueReceive+0x62>
	__asm volatile
 80034fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034fe:	f383 8811 	msr	BASEPRI, r3
 8003502:	f3bf 8f6f 	isb	sy
 8003506:	f3bf 8f4f 	dsb	sy
 800350a:	61fb      	str	r3, [r7, #28]
}
 800350c:	bf00      	nop
 800350e:	bf00      	nop
 8003510:	e7fd      	b.n	800350e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003512:	f001 f907 	bl	8004724 <xTaskGetSchedulerState>
 8003516:	4603      	mov	r3, r0
 8003518:	2b00      	cmp	r3, #0
 800351a:	d102      	bne.n	8003522 <xQueueReceive+0x72>
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2b00      	cmp	r3, #0
 8003520:	d101      	bne.n	8003526 <xQueueReceive+0x76>
 8003522:	2301      	movs	r3, #1
 8003524:	e000      	b.n	8003528 <xQueueReceive+0x78>
 8003526:	2300      	movs	r3, #0
 8003528:	2b00      	cmp	r3, #0
 800352a:	d10b      	bne.n	8003544 <xQueueReceive+0x94>
	__asm volatile
 800352c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003530:	f383 8811 	msr	BASEPRI, r3
 8003534:	f3bf 8f6f 	isb	sy
 8003538:	f3bf 8f4f 	dsb	sy
 800353c:	61bb      	str	r3, [r7, #24]
}
 800353e:	bf00      	nop
 8003540:	bf00      	nop
 8003542:	e7fd      	b.n	8003540 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003544:	f001 fe58 	bl	80051f8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003548:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800354a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800354c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800354e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003550:	2b00      	cmp	r3, #0
 8003552:	d01f      	beq.n	8003594 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003554:	68b9      	ldr	r1, [r7, #8]
 8003556:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003558:	f000 f9b6 	bl	80038c8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800355c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800355e:	1e5a      	subs	r2, r3, #1
 8003560:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003562:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003564:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003566:	691b      	ldr	r3, [r3, #16]
 8003568:	2b00      	cmp	r3, #0
 800356a:	d00f      	beq.n	800358c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800356c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800356e:	3310      	adds	r3, #16
 8003570:	4618      	mov	r0, r3
 8003572:	f000 ff17 	bl	80043a4 <xTaskRemoveFromEventList>
 8003576:	4603      	mov	r3, r0
 8003578:	2b00      	cmp	r3, #0
 800357a:	d007      	beq.n	800358c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800357c:	4b3c      	ldr	r3, [pc, #240]	@ (8003670 <xQueueReceive+0x1c0>)
 800357e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003582:	601a      	str	r2, [r3, #0]
 8003584:	f3bf 8f4f 	dsb	sy
 8003588:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800358c:	f001 fe66 	bl	800525c <vPortExitCritical>
				return pdPASS;
 8003590:	2301      	movs	r3, #1
 8003592:	e069      	b.n	8003668 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d103      	bne.n	80035a2 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800359a:	f001 fe5f 	bl	800525c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800359e:	2300      	movs	r3, #0
 80035a0:	e062      	b.n	8003668 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80035a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d106      	bne.n	80035b6 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80035a8:	f107 0310 	add.w	r3, r7, #16
 80035ac:	4618      	mov	r0, r3
 80035ae:	f000 ff5d 	bl	800446c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80035b2:	2301      	movs	r3, #1
 80035b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80035b6:	f001 fe51 	bl	800525c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80035ba:	f000 fccd 	bl	8003f58 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80035be:	f001 fe1b 	bl	80051f8 <vPortEnterCritical>
 80035c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035c4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80035c8:	b25b      	sxtb	r3, r3
 80035ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035ce:	d103      	bne.n	80035d8 <xQueueReceive+0x128>
 80035d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035d2:	2200      	movs	r2, #0
 80035d4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80035d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035da:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80035de:	b25b      	sxtb	r3, r3
 80035e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035e4:	d103      	bne.n	80035ee <xQueueReceive+0x13e>
 80035e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035e8:	2200      	movs	r2, #0
 80035ea:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80035ee:	f001 fe35 	bl	800525c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80035f2:	1d3a      	adds	r2, r7, #4
 80035f4:	f107 0310 	add.w	r3, r7, #16
 80035f8:	4611      	mov	r1, r2
 80035fa:	4618      	mov	r0, r3
 80035fc:	f000 ff4c 	bl	8004498 <xTaskCheckForTimeOut>
 8003600:	4603      	mov	r3, r0
 8003602:	2b00      	cmp	r3, #0
 8003604:	d123      	bne.n	800364e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003606:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003608:	f000 f9d6 	bl	80039b8 <prvIsQueueEmpty>
 800360c:	4603      	mov	r3, r0
 800360e:	2b00      	cmp	r3, #0
 8003610:	d017      	beq.n	8003642 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003612:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003614:	3324      	adds	r3, #36	@ 0x24
 8003616:	687a      	ldr	r2, [r7, #4]
 8003618:	4611      	mov	r1, r2
 800361a:	4618      	mov	r0, r3
 800361c:	f000 fe70 	bl	8004300 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003620:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003622:	f000 f977 	bl	8003914 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003626:	f000 fca5 	bl	8003f74 <xTaskResumeAll>
 800362a:	4603      	mov	r3, r0
 800362c:	2b00      	cmp	r3, #0
 800362e:	d189      	bne.n	8003544 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8003630:	4b0f      	ldr	r3, [pc, #60]	@ (8003670 <xQueueReceive+0x1c0>)
 8003632:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003636:	601a      	str	r2, [r3, #0]
 8003638:	f3bf 8f4f 	dsb	sy
 800363c:	f3bf 8f6f 	isb	sy
 8003640:	e780      	b.n	8003544 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003642:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003644:	f000 f966 	bl	8003914 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003648:	f000 fc94 	bl	8003f74 <xTaskResumeAll>
 800364c:	e77a      	b.n	8003544 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800364e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003650:	f000 f960 	bl	8003914 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003654:	f000 fc8e 	bl	8003f74 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003658:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800365a:	f000 f9ad 	bl	80039b8 <prvIsQueueEmpty>
 800365e:	4603      	mov	r3, r0
 8003660:	2b00      	cmp	r3, #0
 8003662:	f43f af6f 	beq.w	8003544 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003666:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003668:	4618      	mov	r0, r3
 800366a:	3730      	adds	r7, #48	@ 0x30
 800366c:	46bd      	mov	sp, r7
 800366e:	bd80      	pop	{r7, pc}
 8003670:	e000ed04 	.word	0xe000ed04

08003674 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b08e      	sub	sp, #56	@ 0x38
 8003678:	af00      	add	r7, sp, #0
 800367a:	60f8      	str	r0, [r7, #12]
 800367c:	60b9      	str	r1, [r7, #8]
 800367e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8003684:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003686:	2b00      	cmp	r3, #0
 8003688:	d10b      	bne.n	80036a2 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800368a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800368e:	f383 8811 	msr	BASEPRI, r3
 8003692:	f3bf 8f6f 	isb	sy
 8003696:	f3bf 8f4f 	dsb	sy
 800369a:	623b      	str	r3, [r7, #32]
}
 800369c:	bf00      	nop
 800369e:	bf00      	nop
 80036a0:	e7fd      	b.n	800369e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80036a2:	68bb      	ldr	r3, [r7, #8]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d103      	bne.n	80036b0 <xQueueReceiveFromISR+0x3c>
 80036a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d101      	bne.n	80036b4 <xQueueReceiveFromISR+0x40>
 80036b0:	2301      	movs	r3, #1
 80036b2:	e000      	b.n	80036b6 <xQueueReceiveFromISR+0x42>
 80036b4:	2300      	movs	r3, #0
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d10b      	bne.n	80036d2 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 80036ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80036be:	f383 8811 	msr	BASEPRI, r3
 80036c2:	f3bf 8f6f 	isb	sy
 80036c6:	f3bf 8f4f 	dsb	sy
 80036ca:	61fb      	str	r3, [r7, #28]
}
 80036cc:	bf00      	nop
 80036ce:	bf00      	nop
 80036d0:	e7fd      	b.n	80036ce <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80036d2:	f001 fe71 	bl	80053b8 <vPortValidateInterruptPriority>
	__asm volatile
 80036d6:	f3ef 8211 	mrs	r2, BASEPRI
 80036da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80036de:	f383 8811 	msr	BASEPRI, r3
 80036e2:	f3bf 8f6f 	isb	sy
 80036e6:	f3bf 8f4f 	dsb	sy
 80036ea:	61ba      	str	r2, [r7, #24]
 80036ec:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80036ee:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80036f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80036f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036f6:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80036f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d02f      	beq.n	800375e <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80036fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003700:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003704:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003708:	68b9      	ldr	r1, [r7, #8]
 800370a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800370c:	f000 f8dc 	bl	80038c8 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003710:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003712:	1e5a      	subs	r2, r3, #1
 8003714:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003716:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8003718:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800371c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003720:	d112      	bne.n	8003748 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003722:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003724:	691b      	ldr	r3, [r3, #16]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d016      	beq.n	8003758 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800372a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800372c:	3310      	adds	r3, #16
 800372e:	4618      	mov	r0, r3
 8003730:	f000 fe38 	bl	80043a4 <xTaskRemoveFromEventList>
 8003734:	4603      	mov	r3, r0
 8003736:	2b00      	cmp	r3, #0
 8003738:	d00e      	beq.n	8003758 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2b00      	cmp	r3, #0
 800373e:	d00b      	beq.n	8003758 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2201      	movs	r2, #1
 8003744:	601a      	str	r2, [r3, #0]
 8003746:	e007      	b.n	8003758 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8003748:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800374c:	3301      	adds	r3, #1
 800374e:	b2db      	uxtb	r3, r3
 8003750:	b25a      	sxtb	r2, r3
 8003752:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003754:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8003758:	2301      	movs	r3, #1
 800375a:	637b      	str	r3, [r7, #52]	@ 0x34
 800375c:	e001      	b.n	8003762 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800375e:	2300      	movs	r3, #0
 8003760:	637b      	str	r3, [r7, #52]	@ 0x34
 8003762:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003764:	613b      	str	r3, [r7, #16]
	__asm volatile
 8003766:	693b      	ldr	r3, [r7, #16]
 8003768:	f383 8811 	msr	BASEPRI, r3
}
 800376c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800376e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8003770:	4618      	mov	r0, r3
 8003772:	3738      	adds	r7, #56	@ 0x38
 8003774:	46bd      	mov	sp, r7
 8003776:	bd80      	pop	{r7, pc}

08003778 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b084      	sub	sp, #16
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d10b      	bne.n	800379e <uxQueueMessagesWaiting+0x26>
	__asm volatile
 8003786:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800378a:	f383 8811 	msr	BASEPRI, r3
 800378e:	f3bf 8f6f 	isb	sy
 8003792:	f3bf 8f4f 	dsb	sy
 8003796:	60bb      	str	r3, [r7, #8]
}
 8003798:	bf00      	nop
 800379a:	bf00      	nop
 800379c:	e7fd      	b.n	800379a <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 800379e:	f001 fd2b 	bl	80051f8 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037a6:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 80037a8:	f001 fd58 	bl	800525c <vPortExitCritical>

	return uxReturn;
 80037ac:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80037ae:	4618      	mov	r0, r3
 80037b0:	3710      	adds	r7, #16
 80037b2:	46bd      	mov	sp, r7
 80037b4:	bd80      	pop	{r7, pc}

080037b6 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 80037b6:	b480      	push	{r7}
 80037b8:	b087      	sub	sp, #28
 80037ba:	af00      	add	r7, sp, #0
 80037bc:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 80037c2:	697b      	ldr	r3, [r7, #20]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d10b      	bne.n	80037e0 <uxQueueMessagesWaitingFromISR+0x2a>
	__asm volatile
 80037c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037cc:	f383 8811 	msr	BASEPRI, r3
 80037d0:	f3bf 8f6f 	isb	sy
 80037d4:	f3bf 8f4f 	dsb	sy
 80037d8:	60fb      	str	r3, [r7, #12]
}
 80037da:	bf00      	nop
 80037dc:	bf00      	nop
 80037de:	e7fd      	b.n	80037dc <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 80037e0:	697b      	ldr	r3, [r7, #20]
 80037e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037e4:	613b      	str	r3, [r7, #16]

	return uxReturn;
 80037e6:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80037e8:	4618      	mov	r0, r3
 80037ea:	371c      	adds	r7, #28
 80037ec:	46bd      	mov	sp, r7
 80037ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f2:	4770      	bx	lr

080037f4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b086      	sub	sp, #24
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	60f8      	str	r0, [r7, #12]
 80037fc:	60b9      	str	r1, [r7, #8]
 80037fe:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003800:	2300      	movs	r3, #0
 8003802:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003808:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800380e:	2b00      	cmp	r3, #0
 8003810:	d10d      	bne.n	800382e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d14d      	bne.n	80038b6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	689b      	ldr	r3, [r3, #8]
 800381e:	4618      	mov	r0, r3
 8003820:	f000 ff9e 	bl	8004760 <xTaskPriorityDisinherit>
 8003824:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	2200      	movs	r2, #0
 800382a:	609a      	str	r2, [r3, #8]
 800382c:	e043      	b.n	80038b6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	2b00      	cmp	r3, #0
 8003832:	d119      	bne.n	8003868 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	6858      	ldr	r0, [r3, #4]
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800383c:	461a      	mov	r2, r3
 800383e:	68b9      	ldr	r1, [r7, #8]
 8003840:	f002 f816 	bl	8005870 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	685a      	ldr	r2, [r3, #4]
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800384c:	441a      	add	r2, r3
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	685a      	ldr	r2, [r3, #4]
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	689b      	ldr	r3, [r3, #8]
 800385a:	429a      	cmp	r2, r3
 800385c:	d32b      	bcc.n	80038b6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681a      	ldr	r2, [r3, #0]
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	605a      	str	r2, [r3, #4]
 8003866:	e026      	b.n	80038b6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	68d8      	ldr	r0, [r3, #12]
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003870:	461a      	mov	r2, r3
 8003872:	68b9      	ldr	r1, [r7, #8]
 8003874:	f001 fffc 	bl	8005870 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	68da      	ldr	r2, [r3, #12]
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003880:	425b      	negs	r3, r3
 8003882:	441a      	add	r2, r3
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	68da      	ldr	r2, [r3, #12]
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	429a      	cmp	r2, r3
 8003892:	d207      	bcs.n	80038a4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	689a      	ldr	r2, [r3, #8]
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800389c:	425b      	negs	r3, r3
 800389e:	441a      	add	r2, r3
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2b02      	cmp	r3, #2
 80038a8:	d105      	bne.n	80038b6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80038aa:	693b      	ldr	r3, [r7, #16]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d002      	beq.n	80038b6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80038b0:	693b      	ldr	r3, [r7, #16]
 80038b2:	3b01      	subs	r3, #1
 80038b4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80038b6:	693b      	ldr	r3, [r7, #16]
 80038b8:	1c5a      	adds	r2, r3, #1
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80038be:	697b      	ldr	r3, [r7, #20]
}
 80038c0:	4618      	mov	r0, r3
 80038c2:	3718      	adds	r7, #24
 80038c4:	46bd      	mov	sp, r7
 80038c6:	bd80      	pop	{r7, pc}

080038c8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b082      	sub	sp, #8
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
 80038d0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d018      	beq.n	800390c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	68da      	ldr	r2, [r3, #12]
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038e2:	441a      	add	r2, r3
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	68da      	ldr	r2, [r3, #12]
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	689b      	ldr	r3, [r3, #8]
 80038f0:	429a      	cmp	r2, r3
 80038f2:	d303      	bcc.n	80038fc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681a      	ldr	r2, [r3, #0]
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	68d9      	ldr	r1, [r3, #12]
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003904:	461a      	mov	r2, r3
 8003906:	6838      	ldr	r0, [r7, #0]
 8003908:	f001 ffb2 	bl	8005870 <memcpy>
	}
}
 800390c:	bf00      	nop
 800390e:	3708      	adds	r7, #8
 8003910:	46bd      	mov	sp, r7
 8003912:	bd80      	pop	{r7, pc}

08003914 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b084      	sub	sp, #16
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800391c:	f001 fc6c 	bl	80051f8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003926:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003928:	e011      	b.n	800394e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800392e:	2b00      	cmp	r3, #0
 8003930:	d012      	beq.n	8003958 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	3324      	adds	r3, #36	@ 0x24
 8003936:	4618      	mov	r0, r3
 8003938:	f000 fd34 	bl	80043a4 <xTaskRemoveFromEventList>
 800393c:	4603      	mov	r3, r0
 800393e:	2b00      	cmp	r3, #0
 8003940:	d001      	beq.n	8003946 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003942:	f000 fe0d 	bl	8004560 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003946:	7bfb      	ldrb	r3, [r7, #15]
 8003948:	3b01      	subs	r3, #1
 800394a:	b2db      	uxtb	r3, r3
 800394c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800394e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003952:	2b00      	cmp	r3, #0
 8003954:	dce9      	bgt.n	800392a <prvUnlockQueue+0x16>
 8003956:	e000      	b.n	800395a <prvUnlockQueue+0x46>
					break;
 8003958:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	22ff      	movs	r2, #255	@ 0xff
 800395e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8003962:	f001 fc7b 	bl	800525c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003966:	f001 fc47 	bl	80051f8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003970:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003972:	e011      	b.n	8003998 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	691b      	ldr	r3, [r3, #16]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d012      	beq.n	80039a2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	3310      	adds	r3, #16
 8003980:	4618      	mov	r0, r3
 8003982:	f000 fd0f 	bl	80043a4 <xTaskRemoveFromEventList>
 8003986:	4603      	mov	r3, r0
 8003988:	2b00      	cmp	r3, #0
 800398a:	d001      	beq.n	8003990 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800398c:	f000 fde8 	bl	8004560 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003990:	7bbb      	ldrb	r3, [r7, #14]
 8003992:	3b01      	subs	r3, #1
 8003994:	b2db      	uxtb	r3, r3
 8003996:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003998:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800399c:	2b00      	cmp	r3, #0
 800399e:	dce9      	bgt.n	8003974 <prvUnlockQueue+0x60>
 80039a0:	e000      	b.n	80039a4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80039a2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	22ff      	movs	r2, #255	@ 0xff
 80039a8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80039ac:	f001 fc56 	bl	800525c <vPortExitCritical>
}
 80039b0:	bf00      	nop
 80039b2:	3710      	adds	r7, #16
 80039b4:	46bd      	mov	sp, r7
 80039b6:	bd80      	pop	{r7, pc}

080039b8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b084      	sub	sp, #16
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80039c0:	f001 fc1a 	bl	80051f8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d102      	bne.n	80039d2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80039cc:	2301      	movs	r3, #1
 80039ce:	60fb      	str	r3, [r7, #12]
 80039d0:	e001      	b.n	80039d6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80039d2:	2300      	movs	r3, #0
 80039d4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80039d6:	f001 fc41 	bl	800525c <vPortExitCritical>

	return xReturn;
 80039da:	68fb      	ldr	r3, [r7, #12]
}
 80039dc:	4618      	mov	r0, r3
 80039de:	3710      	adds	r7, #16
 80039e0:	46bd      	mov	sp, r7
 80039e2:	bd80      	pop	{r7, pc}

080039e4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b084      	sub	sp, #16
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80039ec:	f001 fc04 	bl	80051f8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039f8:	429a      	cmp	r2, r3
 80039fa:	d102      	bne.n	8003a02 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80039fc:	2301      	movs	r3, #1
 80039fe:	60fb      	str	r3, [r7, #12]
 8003a00:	e001      	b.n	8003a06 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003a02:	2300      	movs	r3, #0
 8003a04:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003a06:	f001 fc29 	bl	800525c <vPortExitCritical>

	return xReturn;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
}
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	3710      	adds	r7, #16
 8003a10:	46bd      	mov	sp, r7
 8003a12:	bd80      	pop	{r7, pc}

08003a14 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003a14:	b480      	push	{r7}
 8003a16:	b085      	sub	sp, #20
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
 8003a1c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003a1e:	2300      	movs	r3, #0
 8003a20:	60fb      	str	r3, [r7, #12]
 8003a22:	e014      	b.n	8003a4e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003a24:	4a0f      	ldr	r2, [pc, #60]	@ (8003a64 <vQueueAddToRegistry+0x50>)
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d10b      	bne.n	8003a48 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003a30:	490c      	ldr	r1, [pc, #48]	@ (8003a64 <vQueueAddToRegistry+0x50>)
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	683a      	ldr	r2, [r7, #0]
 8003a36:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003a3a:	4a0a      	ldr	r2, [pc, #40]	@ (8003a64 <vQueueAddToRegistry+0x50>)
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	00db      	lsls	r3, r3, #3
 8003a40:	4413      	add	r3, r2
 8003a42:	687a      	ldr	r2, [r7, #4]
 8003a44:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003a46:	e006      	b.n	8003a56 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	3301      	adds	r3, #1
 8003a4c:	60fb      	str	r3, [r7, #12]
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	2b07      	cmp	r3, #7
 8003a52:	d9e7      	bls.n	8003a24 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003a54:	bf00      	nop
 8003a56:	bf00      	nop
 8003a58:	3714      	adds	r7, #20
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a60:	4770      	bx	lr
 8003a62:	bf00      	nop
 8003a64:	2000078c 	.word	0x2000078c

08003a68 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b086      	sub	sp, #24
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	60f8      	str	r0, [r7, #12]
 8003a70:	60b9      	str	r1, [r7, #8]
 8003a72:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003a78:	f001 fbbe 	bl	80051f8 <vPortEnterCritical>
 8003a7c:	697b      	ldr	r3, [r7, #20]
 8003a7e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003a82:	b25b      	sxtb	r3, r3
 8003a84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a88:	d103      	bne.n	8003a92 <vQueueWaitForMessageRestricted+0x2a>
 8003a8a:	697b      	ldr	r3, [r7, #20]
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003a92:	697b      	ldr	r3, [r7, #20]
 8003a94:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003a98:	b25b      	sxtb	r3, r3
 8003a9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a9e:	d103      	bne.n	8003aa8 <vQueueWaitForMessageRestricted+0x40>
 8003aa0:	697b      	ldr	r3, [r7, #20]
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003aa8:	f001 fbd8 	bl	800525c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003aac:	697b      	ldr	r3, [r7, #20]
 8003aae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d106      	bne.n	8003ac2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003ab4:	697b      	ldr	r3, [r7, #20]
 8003ab6:	3324      	adds	r3, #36	@ 0x24
 8003ab8:	687a      	ldr	r2, [r7, #4]
 8003aba:	68b9      	ldr	r1, [r7, #8]
 8003abc:	4618      	mov	r0, r3
 8003abe:	f000 fc45 	bl	800434c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003ac2:	6978      	ldr	r0, [r7, #20]
 8003ac4:	f7ff ff26 	bl	8003914 <prvUnlockQueue>
	}
 8003ac8:	bf00      	nop
 8003aca:	3718      	adds	r7, #24
 8003acc:	46bd      	mov	sp, r7
 8003ace:	bd80      	pop	{r7, pc}

08003ad0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b08e      	sub	sp, #56	@ 0x38
 8003ad4:	af04      	add	r7, sp, #16
 8003ad6:	60f8      	str	r0, [r7, #12]
 8003ad8:	60b9      	str	r1, [r7, #8]
 8003ada:	607a      	str	r2, [r7, #4]
 8003adc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003ade:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d10b      	bne.n	8003afc <xTaskCreateStatic+0x2c>
	__asm volatile
 8003ae4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ae8:	f383 8811 	msr	BASEPRI, r3
 8003aec:	f3bf 8f6f 	isb	sy
 8003af0:	f3bf 8f4f 	dsb	sy
 8003af4:	623b      	str	r3, [r7, #32]
}
 8003af6:	bf00      	nop
 8003af8:	bf00      	nop
 8003afa:	e7fd      	b.n	8003af8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003afc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d10b      	bne.n	8003b1a <xTaskCreateStatic+0x4a>
	__asm volatile
 8003b02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b06:	f383 8811 	msr	BASEPRI, r3
 8003b0a:	f3bf 8f6f 	isb	sy
 8003b0e:	f3bf 8f4f 	dsb	sy
 8003b12:	61fb      	str	r3, [r7, #28]
}
 8003b14:	bf00      	nop
 8003b16:	bf00      	nop
 8003b18:	e7fd      	b.n	8003b16 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003b1a:	235c      	movs	r3, #92	@ 0x5c
 8003b1c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003b1e:	693b      	ldr	r3, [r7, #16]
 8003b20:	2b5c      	cmp	r3, #92	@ 0x5c
 8003b22:	d00b      	beq.n	8003b3c <xTaskCreateStatic+0x6c>
	__asm volatile
 8003b24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b28:	f383 8811 	msr	BASEPRI, r3
 8003b2c:	f3bf 8f6f 	isb	sy
 8003b30:	f3bf 8f4f 	dsb	sy
 8003b34:	61bb      	str	r3, [r7, #24]
}
 8003b36:	bf00      	nop
 8003b38:	bf00      	nop
 8003b3a:	e7fd      	b.n	8003b38 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003b3c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003b3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d01e      	beq.n	8003b82 <xTaskCreateStatic+0xb2>
 8003b44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d01b      	beq.n	8003b82 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003b4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b4c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003b4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b50:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003b52:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003b54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b56:	2202      	movs	r2, #2
 8003b58:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	9303      	str	r3, [sp, #12]
 8003b60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b62:	9302      	str	r3, [sp, #8]
 8003b64:	f107 0314 	add.w	r3, r7, #20
 8003b68:	9301      	str	r3, [sp, #4]
 8003b6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b6c:	9300      	str	r3, [sp, #0]
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	687a      	ldr	r2, [r7, #4]
 8003b72:	68b9      	ldr	r1, [r7, #8]
 8003b74:	68f8      	ldr	r0, [r7, #12]
 8003b76:	f000 f850 	bl	8003c1a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003b7a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003b7c:	f000 f8de 	bl	8003d3c <prvAddNewTaskToReadyList>
 8003b80:	e001      	b.n	8003b86 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8003b82:	2300      	movs	r3, #0
 8003b84:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003b86:	697b      	ldr	r3, [r7, #20]
	}
 8003b88:	4618      	mov	r0, r3
 8003b8a:	3728      	adds	r7, #40	@ 0x28
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	bd80      	pop	{r7, pc}

08003b90 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b08c      	sub	sp, #48	@ 0x30
 8003b94:	af04      	add	r7, sp, #16
 8003b96:	60f8      	str	r0, [r7, #12]
 8003b98:	60b9      	str	r1, [r7, #8]
 8003b9a:	603b      	str	r3, [r7, #0]
 8003b9c:	4613      	mov	r3, r2
 8003b9e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003ba0:	88fb      	ldrh	r3, [r7, #6]
 8003ba2:	009b      	lsls	r3, r3, #2
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	f001 fc49 	bl	800543c <pvPortMalloc>
 8003baa:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003bac:	697b      	ldr	r3, [r7, #20]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d00e      	beq.n	8003bd0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003bb2:	205c      	movs	r0, #92	@ 0x5c
 8003bb4:	f001 fc42 	bl	800543c <pvPortMalloc>
 8003bb8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003bba:	69fb      	ldr	r3, [r7, #28]
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d003      	beq.n	8003bc8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003bc0:	69fb      	ldr	r3, [r7, #28]
 8003bc2:	697a      	ldr	r2, [r7, #20]
 8003bc4:	631a      	str	r2, [r3, #48]	@ 0x30
 8003bc6:	e005      	b.n	8003bd4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003bc8:	6978      	ldr	r0, [r7, #20]
 8003bca:	f001 fd05 	bl	80055d8 <vPortFree>
 8003bce:	e001      	b.n	8003bd4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003bd4:	69fb      	ldr	r3, [r7, #28]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d017      	beq.n	8003c0a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003bda:	69fb      	ldr	r3, [r7, #28]
 8003bdc:	2200      	movs	r2, #0
 8003bde:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003be2:	88fa      	ldrh	r2, [r7, #6]
 8003be4:	2300      	movs	r3, #0
 8003be6:	9303      	str	r3, [sp, #12]
 8003be8:	69fb      	ldr	r3, [r7, #28]
 8003bea:	9302      	str	r3, [sp, #8]
 8003bec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003bee:	9301      	str	r3, [sp, #4]
 8003bf0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003bf2:	9300      	str	r3, [sp, #0]
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	68b9      	ldr	r1, [r7, #8]
 8003bf8:	68f8      	ldr	r0, [r7, #12]
 8003bfa:	f000 f80e 	bl	8003c1a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003bfe:	69f8      	ldr	r0, [r7, #28]
 8003c00:	f000 f89c 	bl	8003d3c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003c04:	2301      	movs	r3, #1
 8003c06:	61bb      	str	r3, [r7, #24]
 8003c08:	e002      	b.n	8003c10 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003c0a:	f04f 33ff 	mov.w	r3, #4294967295
 8003c0e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003c10:	69bb      	ldr	r3, [r7, #24]
	}
 8003c12:	4618      	mov	r0, r3
 8003c14:	3720      	adds	r7, #32
 8003c16:	46bd      	mov	sp, r7
 8003c18:	bd80      	pop	{r7, pc}

08003c1a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003c1a:	b580      	push	{r7, lr}
 8003c1c:	b088      	sub	sp, #32
 8003c1e:	af00      	add	r7, sp, #0
 8003c20:	60f8      	str	r0, [r7, #12]
 8003c22:	60b9      	str	r1, [r7, #8]
 8003c24:	607a      	str	r2, [r7, #4]
 8003c26:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003c28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c2a:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	009b      	lsls	r3, r3, #2
 8003c30:	461a      	mov	r2, r3
 8003c32:	21a5      	movs	r1, #165	@ 0xa5
 8003c34:	f001 fdf0 	bl	8005818 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003c38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c3a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003c42:	3b01      	subs	r3, #1
 8003c44:	009b      	lsls	r3, r3, #2
 8003c46:	4413      	add	r3, r2
 8003c48:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003c4a:	69bb      	ldr	r3, [r7, #24]
 8003c4c:	f023 0307 	bic.w	r3, r3, #7
 8003c50:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003c52:	69bb      	ldr	r3, [r7, #24]
 8003c54:	f003 0307 	and.w	r3, r3, #7
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d00b      	beq.n	8003c74 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8003c5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c60:	f383 8811 	msr	BASEPRI, r3
 8003c64:	f3bf 8f6f 	isb	sy
 8003c68:	f3bf 8f4f 	dsb	sy
 8003c6c:	617b      	str	r3, [r7, #20]
}
 8003c6e:	bf00      	nop
 8003c70:	bf00      	nop
 8003c72:	e7fd      	b.n	8003c70 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003c74:	68bb      	ldr	r3, [r7, #8]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d01f      	beq.n	8003cba <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	61fb      	str	r3, [r7, #28]
 8003c7e:	e012      	b.n	8003ca6 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003c80:	68ba      	ldr	r2, [r7, #8]
 8003c82:	69fb      	ldr	r3, [r7, #28]
 8003c84:	4413      	add	r3, r2
 8003c86:	7819      	ldrb	r1, [r3, #0]
 8003c88:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003c8a:	69fb      	ldr	r3, [r7, #28]
 8003c8c:	4413      	add	r3, r2
 8003c8e:	3334      	adds	r3, #52	@ 0x34
 8003c90:	460a      	mov	r2, r1
 8003c92:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003c94:	68ba      	ldr	r2, [r7, #8]
 8003c96:	69fb      	ldr	r3, [r7, #28]
 8003c98:	4413      	add	r3, r2
 8003c9a:	781b      	ldrb	r3, [r3, #0]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d006      	beq.n	8003cae <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003ca0:	69fb      	ldr	r3, [r7, #28]
 8003ca2:	3301      	adds	r3, #1
 8003ca4:	61fb      	str	r3, [r7, #28]
 8003ca6:	69fb      	ldr	r3, [r7, #28]
 8003ca8:	2b0f      	cmp	r3, #15
 8003caa:	d9e9      	bls.n	8003c80 <prvInitialiseNewTask+0x66>
 8003cac:	e000      	b.n	8003cb0 <prvInitialiseNewTask+0x96>
			{
				break;
 8003cae:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003cb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003cb8:	e003      	b.n	8003cc2 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003cba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003cc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cc4:	2b37      	cmp	r3, #55	@ 0x37
 8003cc6:	d901      	bls.n	8003ccc <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003cc8:	2337      	movs	r3, #55	@ 0x37
 8003cca:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003ccc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cce:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003cd0:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003cd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cd4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003cd6:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003cd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cda:	2200      	movs	r2, #0
 8003cdc:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003cde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ce0:	3304      	adds	r3, #4
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	f7ff f86a 	bl	8002dbc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003ce8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cea:	3318      	adds	r3, #24
 8003cec:	4618      	mov	r0, r3
 8003cee:	f7ff f865 	bl	8002dbc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003cf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cf4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003cf6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003cf8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cfa:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8003cfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d00:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003d02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d04:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003d06:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003d08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003d0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d10:	2200      	movs	r2, #0
 8003d12:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003d16:	683a      	ldr	r2, [r7, #0]
 8003d18:	68f9      	ldr	r1, [r7, #12]
 8003d1a:	69b8      	ldr	r0, [r7, #24]
 8003d1c:	f001 f93e 	bl	8004f9c <pxPortInitialiseStack>
 8003d20:	4602      	mov	r2, r0
 8003d22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d24:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003d26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d002      	beq.n	8003d32 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003d2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d2e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003d30:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003d32:	bf00      	nop
 8003d34:	3720      	adds	r7, #32
 8003d36:	46bd      	mov	sp, r7
 8003d38:	bd80      	pop	{r7, pc}
	...

08003d3c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b082      	sub	sp, #8
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003d44:	f001 fa58 	bl	80051f8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003d48:	4b2d      	ldr	r3, [pc, #180]	@ (8003e00 <prvAddNewTaskToReadyList+0xc4>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	3301      	adds	r3, #1
 8003d4e:	4a2c      	ldr	r2, [pc, #176]	@ (8003e00 <prvAddNewTaskToReadyList+0xc4>)
 8003d50:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003d52:	4b2c      	ldr	r3, [pc, #176]	@ (8003e04 <prvAddNewTaskToReadyList+0xc8>)
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d109      	bne.n	8003d6e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003d5a:	4a2a      	ldr	r2, [pc, #168]	@ (8003e04 <prvAddNewTaskToReadyList+0xc8>)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003d60:	4b27      	ldr	r3, [pc, #156]	@ (8003e00 <prvAddNewTaskToReadyList+0xc4>)
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	2b01      	cmp	r3, #1
 8003d66:	d110      	bne.n	8003d8a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003d68:	f000 fc1e 	bl	80045a8 <prvInitialiseTaskLists>
 8003d6c:	e00d      	b.n	8003d8a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003d6e:	4b26      	ldr	r3, [pc, #152]	@ (8003e08 <prvAddNewTaskToReadyList+0xcc>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d109      	bne.n	8003d8a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003d76:	4b23      	ldr	r3, [pc, #140]	@ (8003e04 <prvAddNewTaskToReadyList+0xc8>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d80:	429a      	cmp	r2, r3
 8003d82:	d802      	bhi.n	8003d8a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003d84:	4a1f      	ldr	r2, [pc, #124]	@ (8003e04 <prvAddNewTaskToReadyList+0xc8>)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003d8a:	4b20      	ldr	r3, [pc, #128]	@ (8003e0c <prvAddNewTaskToReadyList+0xd0>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	3301      	adds	r3, #1
 8003d90:	4a1e      	ldr	r2, [pc, #120]	@ (8003e0c <prvAddNewTaskToReadyList+0xd0>)
 8003d92:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003d94:	4b1d      	ldr	r3, [pc, #116]	@ (8003e0c <prvAddNewTaskToReadyList+0xd0>)
 8003d96:	681a      	ldr	r2, [r3, #0]
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003da0:	4b1b      	ldr	r3, [pc, #108]	@ (8003e10 <prvAddNewTaskToReadyList+0xd4>)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	429a      	cmp	r2, r3
 8003da6:	d903      	bls.n	8003db0 <prvAddNewTaskToReadyList+0x74>
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dac:	4a18      	ldr	r2, [pc, #96]	@ (8003e10 <prvAddNewTaskToReadyList+0xd4>)
 8003dae:	6013      	str	r3, [r2, #0]
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003db4:	4613      	mov	r3, r2
 8003db6:	009b      	lsls	r3, r3, #2
 8003db8:	4413      	add	r3, r2
 8003dba:	009b      	lsls	r3, r3, #2
 8003dbc:	4a15      	ldr	r2, [pc, #84]	@ (8003e14 <prvAddNewTaskToReadyList+0xd8>)
 8003dbe:	441a      	add	r2, r3
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	3304      	adds	r3, #4
 8003dc4:	4619      	mov	r1, r3
 8003dc6:	4610      	mov	r0, r2
 8003dc8:	f7ff f805 	bl	8002dd6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003dcc:	f001 fa46 	bl	800525c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003dd0:	4b0d      	ldr	r3, [pc, #52]	@ (8003e08 <prvAddNewTaskToReadyList+0xcc>)
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d00e      	beq.n	8003df6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003dd8:	4b0a      	ldr	r3, [pc, #40]	@ (8003e04 <prvAddNewTaskToReadyList+0xc8>)
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003de2:	429a      	cmp	r2, r3
 8003de4:	d207      	bcs.n	8003df6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003de6:	4b0c      	ldr	r3, [pc, #48]	@ (8003e18 <prvAddNewTaskToReadyList+0xdc>)
 8003de8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003dec:	601a      	str	r2, [r3, #0]
 8003dee:	f3bf 8f4f 	dsb	sy
 8003df2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003df6:	bf00      	nop
 8003df8:	3708      	adds	r7, #8
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	bd80      	pop	{r7, pc}
 8003dfe:	bf00      	nop
 8003e00:	20000ca0 	.word	0x20000ca0
 8003e04:	200007cc 	.word	0x200007cc
 8003e08:	20000cac 	.word	0x20000cac
 8003e0c:	20000cbc 	.word	0x20000cbc
 8003e10:	20000ca8 	.word	0x20000ca8
 8003e14:	200007d0 	.word	0x200007d0
 8003e18:	e000ed04 	.word	0xe000ed04

08003e1c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b084      	sub	sp, #16
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003e24:	2300      	movs	r3, #0
 8003e26:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d018      	beq.n	8003e60 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003e2e:	4b14      	ldr	r3, [pc, #80]	@ (8003e80 <vTaskDelay+0x64>)
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d00b      	beq.n	8003e4e <vTaskDelay+0x32>
	__asm volatile
 8003e36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e3a:	f383 8811 	msr	BASEPRI, r3
 8003e3e:	f3bf 8f6f 	isb	sy
 8003e42:	f3bf 8f4f 	dsb	sy
 8003e46:	60bb      	str	r3, [r7, #8]
}
 8003e48:	bf00      	nop
 8003e4a:	bf00      	nop
 8003e4c:	e7fd      	b.n	8003e4a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003e4e:	f000 f883 	bl	8003f58 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003e52:	2100      	movs	r1, #0
 8003e54:	6878      	ldr	r0, [r7, #4]
 8003e56:	f000 fcf3 	bl	8004840 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003e5a:	f000 f88b 	bl	8003f74 <xTaskResumeAll>
 8003e5e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d107      	bne.n	8003e76 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8003e66:	4b07      	ldr	r3, [pc, #28]	@ (8003e84 <vTaskDelay+0x68>)
 8003e68:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003e6c:	601a      	str	r2, [r3, #0]
 8003e6e:	f3bf 8f4f 	dsb	sy
 8003e72:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003e76:	bf00      	nop
 8003e78:	3710      	adds	r7, #16
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	bd80      	pop	{r7, pc}
 8003e7e:	bf00      	nop
 8003e80:	20000cc8 	.word	0x20000cc8
 8003e84:	e000ed04 	.word	0xe000ed04

08003e88 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b08a      	sub	sp, #40	@ 0x28
 8003e8c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003e8e:	2300      	movs	r3, #0
 8003e90:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003e92:	2300      	movs	r3, #0
 8003e94:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003e96:	463a      	mov	r2, r7
 8003e98:	1d39      	adds	r1, r7, #4
 8003e9a:	f107 0308 	add.w	r3, r7, #8
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	f7fe ff38 	bl	8002d14 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003ea4:	6839      	ldr	r1, [r7, #0]
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	68ba      	ldr	r2, [r7, #8]
 8003eaa:	9202      	str	r2, [sp, #8]
 8003eac:	9301      	str	r3, [sp, #4]
 8003eae:	2300      	movs	r3, #0
 8003eb0:	9300      	str	r3, [sp, #0]
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	460a      	mov	r2, r1
 8003eb6:	4922      	ldr	r1, [pc, #136]	@ (8003f40 <vTaskStartScheduler+0xb8>)
 8003eb8:	4822      	ldr	r0, [pc, #136]	@ (8003f44 <vTaskStartScheduler+0xbc>)
 8003eba:	f7ff fe09 	bl	8003ad0 <xTaskCreateStatic>
 8003ebe:	4603      	mov	r3, r0
 8003ec0:	4a21      	ldr	r2, [pc, #132]	@ (8003f48 <vTaskStartScheduler+0xc0>)
 8003ec2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003ec4:	4b20      	ldr	r3, [pc, #128]	@ (8003f48 <vTaskStartScheduler+0xc0>)
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d002      	beq.n	8003ed2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003ecc:	2301      	movs	r3, #1
 8003ece:	617b      	str	r3, [r7, #20]
 8003ed0:	e001      	b.n	8003ed6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003ed6:	697b      	ldr	r3, [r7, #20]
 8003ed8:	2b01      	cmp	r3, #1
 8003eda:	d102      	bne.n	8003ee2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003edc:	f000 fd04 	bl	80048e8 <xTimerCreateTimerTask>
 8003ee0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003ee2:	697b      	ldr	r3, [r7, #20]
 8003ee4:	2b01      	cmp	r3, #1
 8003ee6:	d116      	bne.n	8003f16 <vTaskStartScheduler+0x8e>
	__asm volatile
 8003ee8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003eec:	f383 8811 	msr	BASEPRI, r3
 8003ef0:	f3bf 8f6f 	isb	sy
 8003ef4:	f3bf 8f4f 	dsb	sy
 8003ef8:	613b      	str	r3, [r7, #16]
}
 8003efa:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003efc:	4b13      	ldr	r3, [pc, #76]	@ (8003f4c <vTaskStartScheduler+0xc4>)
 8003efe:	f04f 32ff 	mov.w	r2, #4294967295
 8003f02:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003f04:	4b12      	ldr	r3, [pc, #72]	@ (8003f50 <vTaskStartScheduler+0xc8>)
 8003f06:	2201      	movs	r2, #1
 8003f08:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003f0a:	4b12      	ldr	r3, [pc, #72]	@ (8003f54 <vTaskStartScheduler+0xcc>)
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003f10:	f001 f8ce 	bl	80050b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003f14:	e00f      	b.n	8003f36 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003f16:	697b      	ldr	r3, [r7, #20]
 8003f18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f1c:	d10b      	bne.n	8003f36 <vTaskStartScheduler+0xae>
	__asm volatile
 8003f1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f22:	f383 8811 	msr	BASEPRI, r3
 8003f26:	f3bf 8f6f 	isb	sy
 8003f2a:	f3bf 8f4f 	dsb	sy
 8003f2e:	60fb      	str	r3, [r7, #12]
}
 8003f30:	bf00      	nop
 8003f32:	bf00      	nop
 8003f34:	e7fd      	b.n	8003f32 <vTaskStartScheduler+0xaa>
}
 8003f36:	bf00      	nop
 8003f38:	3718      	adds	r7, #24
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	bd80      	pop	{r7, pc}
 8003f3e:	bf00      	nop
 8003f40:	080058e0 	.word	0x080058e0
 8003f44:	08004579 	.word	0x08004579
 8003f48:	20000cc4 	.word	0x20000cc4
 8003f4c:	20000cc0 	.word	0x20000cc0
 8003f50:	20000cac 	.word	0x20000cac
 8003f54:	20000ca4 	.word	0x20000ca4

08003f58 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003f58:	b480      	push	{r7}
 8003f5a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003f5c:	4b04      	ldr	r3, [pc, #16]	@ (8003f70 <vTaskSuspendAll+0x18>)
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	3301      	adds	r3, #1
 8003f62:	4a03      	ldr	r2, [pc, #12]	@ (8003f70 <vTaskSuspendAll+0x18>)
 8003f64:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003f66:	bf00      	nop
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6e:	4770      	bx	lr
 8003f70:	20000cc8 	.word	0x20000cc8

08003f74 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b084      	sub	sp, #16
 8003f78:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003f7e:	2300      	movs	r3, #0
 8003f80:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003f82:	4b42      	ldr	r3, [pc, #264]	@ (800408c <xTaskResumeAll+0x118>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d10b      	bne.n	8003fa2 <xTaskResumeAll+0x2e>
	__asm volatile
 8003f8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f8e:	f383 8811 	msr	BASEPRI, r3
 8003f92:	f3bf 8f6f 	isb	sy
 8003f96:	f3bf 8f4f 	dsb	sy
 8003f9a:	603b      	str	r3, [r7, #0]
}
 8003f9c:	bf00      	nop
 8003f9e:	bf00      	nop
 8003fa0:	e7fd      	b.n	8003f9e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003fa2:	f001 f929 	bl	80051f8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003fa6:	4b39      	ldr	r3, [pc, #228]	@ (800408c <xTaskResumeAll+0x118>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	3b01      	subs	r3, #1
 8003fac:	4a37      	ldr	r2, [pc, #220]	@ (800408c <xTaskResumeAll+0x118>)
 8003fae:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003fb0:	4b36      	ldr	r3, [pc, #216]	@ (800408c <xTaskResumeAll+0x118>)
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d162      	bne.n	800407e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003fb8:	4b35      	ldr	r3, [pc, #212]	@ (8004090 <xTaskResumeAll+0x11c>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d05e      	beq.n	800407e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003fc0:	e02f      	b.n	8004022 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003fc2:	4b34      	ldr	r3, [pc, #208]	@ (8004094 <xTaskResumeAll+0x120>)
 8003fc4:	68db      	ldr	r3, [r3, #12]
 8003fc6:	68db      	ldr	r3, [r3, #12]
 8003fc8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	3318      	adds	r3, #24
 8003fce:	4618      	mov	r0, r3
 8003fd0:	f7fe ff5e 	bl	8002e90 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	3304      	adds	r3, #4
 8003fd8:	4618      	mov	r0, r3
 8003fda:	f7fe ff59 	bl	8002e90 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003fe2:	4b2d      	ldr	r3, [pc, #180]	@ (8004098 <xTaskResumeAll+0x124>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	429a      	cmp	r2, r3
 8003fe8:	d903      	bls.n	8003ff2 <xTaskResumeAll+0x7e>
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fee:	4a2a      	ldr	r2, [pc, #168]	@ (8004098 <xTaskResumeAll+0x124>)
 8003ff0:	6013      	str	r3, [r2, #0]
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ff6:	4613      	mov	r3, r2
 8003ff8:	009b      	lsls	r3, r3, #2
 8003ffa:	4413      	add	r3, r2
 8003ffc:	009b      	lsls	r3, r3, #2
 8003ffe:	4a27      	ldr	r2, [pc, #156]	@ (800409c <xTaskResumeAll+0x128>)
 8004000:	441a      	add	r2, r3
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	3304      	adds	r3, #4
 8004006:	4619      	mov	r1, r3
 8004008:	4610      	mov	r0, r2
 800400a:	f7fe fee4 	bl	8002dd6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004012:	4b23      	ldr	r3, [pc, #140]	@ (80040a0 <xTaskResumeAll+0x12c>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004018:	429a      	cmp	r2, r3
 800401a:	d302      	bcc.n	8004022 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800401c:	4b21      	ldr	r3, [pc, #132]	@ (80040a4 <xTaskResumeAll+0x130>)
 800401e:	2201      	movs	r2, #1
 8004020:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004022:	4b1c      	ldr	r3, [pc, #112]	@ (8004094 <xTaskResumeAll+0x120>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	2b00      	cmp	r3, #0
 8004028:	d1cb      	bne.n	8003fc2 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	2b00      	cmp	r3, #0
 800402e:	d001      	beq.n	8004034 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004030:	f000 fb58 	bl	80046e4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004034:	4b1c      	ldr	r3, [pc, #112]	@ (80040a8 <xTaskResumeAll+0x134>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	2b00      	cmp	r3, #0
 800403e:	d010      	beq.n	8004062 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004040:	f000 f846 	bl	80040d0 <xTaskIncrementTick>
 8004044:	4603      	mov	r3, r0
 8004046:	2b00      	cmp	r3, #0
 8004048:	d002      	beq.n	8004050 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800404a:	4b16      	ldr	r3, [pc, #88]	@ (80040a4 <xTaskResumeAll+0x130>)
 800404c:	2201      	movs	r2, #1
 800404e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	3b01      	subs	r3, #1
 8004054:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	2b00      	cmp	r3, #0
 800405a:	d1f1      	bne.n	8004040 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800405c:	4b12      	ldr	r3, [pc, #72]	@ (80040a8 <xTaskResumeAll+0x134>)
 800405e:	2200      	movs	r2, #0
 8004060:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004062:	4b10      	ldr	r3, [pc, #64]	@ (80040a4 <xTaskResumeAll+0x130>)
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	2b00      	cmp	r3, #0
 8004068:	d009      	beq.n	800407e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800406a:	2301      	movs	r3, #1
 800406c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800406e:	4b0f      	ldr	r3, [pc, #60]	@ (80040ac <xTaskResumeAll+0x138>)
 8004070:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004074:	601a      	str	r2, [r3, #0]
 8004076:	f3bf 8f4f 	dsb	sy
 800407a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800407e:	f001 f8ed 	bl	800525c <vPortExitCritical>

	return xAlreadyYielded;
 8004082:	68bb      	ldr	r3, [r7, #8]
}
 8004084:	4618      	mov	r0, r3
 8004086:	3710      	adds	r7, #16
 8004088:	46bd      	mov	sp, r7
 800408a:	bd80      	pop	{r7, pc}
 800408c:	20000cc8 	.word	0x20000cc8
 8004090:	20000ca0 	.word	0x20000ca0
 8004094:	20000c60 	.word	0x20000c60
 8004098:	20000ca8 	.word	0x20000ca8
 800409c:	200007d0 	.word	0x200007d0
 80040a0:	200007cc 	.word	0x200007cc
 80040a4:	20000cb4 	.word	0x20000cb4
 80040a8:	20000cb0 	.word	0x20000cb0
 80040ac:	e000ed04 	.word	0xe000ed04

080040b0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80040b0:	b480      	push	{r7}
 80040b2:	b083      	sub	sp, #12
 80040b4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80040b6:	4b05      	ldr	r3, [pc, #20]	@ (80040cc <xTaskGetTickCount+0x1c>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80040bc:	687b      	ldr	r3, [r7, #4]
}
 80040be:	4618      	mov	r0, r3
 80040c0:	370c      	adds	r7, #12
 80040c2:	46bd      	mov	sp, r7
 80040c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c8:	4770      	bx	lr
 80040ca:	bf00      	nop
 80040cc:	20000ca4 	.word	0x20000ca4

080040d0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b086      	sub	sp, #24
 80040d4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80040d6:	2300      	movs	r3, #0
 80040d8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80040da:	4b4f      	ldr	r3, [pc, #316]	@ (8004218 <xTaskIncrementTick+0x148>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	f040 8090 	bne.w	8004204 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80040e4:	4b4d      	ldr	r3, [pc, #308]	@ (800421c <xTaskIncrementTick+0x14c>)
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	3301      	adds	r3, #1
 80040ea:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80040ec:	4a4b      	ldr	r2, [pc, #300]	@ (800421c <xTaskIncrementTick+0x14c>)
 80040ee:	693b      	ldr	r3, [r7, #16]
 80040f0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80040f2:	693b      	ldr	r3, [r7, #16]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d121      	bne.n	800413c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80040f8:	4b49      	ldr	r3, [pc, #292]	@ (8004220 <xTaskIncrementTick+0x150>)
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d00b      	beq.n	800411a <xTaskIncrementTick+0x4a>
	__asm volatile
 8004102:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004106:	f383 8811 	msr	BASEPRI, r3
 800410a:	f3bf 8f6f 	isb	sy
 800410e:	f3bf 8f4f 	dsb	sy
 8004112:	603b      	str	r3, [r7, #0]
}
 8004114:	bf00      	nop
 8004116:	bf00      	nop
 8004118:	e7fd      	b.n	8004116 <xTaskIncrementTick+0x46>
 800411a:	4b41      	ldr	r3, [pc, #260]	@ (8004220 <xTaskIncrementTick+0x150>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	60fb      	str	r3, [r7, #12]
 8004120:	4b40      	ldr	r3, [pc, #256]	@ (8004224 <xTaskIncrementTick+0x154>)
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	4a3e      	ldr	r2, [pc, #248]	@ (8004220 <xTaskIncrementTick+0x150>)
 8004126:	6013      	str	r3, [r2, #0]
 8004128:	4a3e      	ldr	r2, [pc, #248]	@ (8004224 <xTaskIncrementTick+0x154>)
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	6013      	str	r3, [r2, #0]
 800412e:	4b3e      	ldr	r3, [pc, #248]	@ (8004228 <xTaskIncrementTick+0x158>)
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	3301      	adds	r3, #1
 8004134:	4a3c      	ldr	r2, [pc, #240]	@ (8004228 <xTaskIncrementTick+0x158>)
 8004136:	6013      	str	r3, [r2, #0]
 8004138:	f000 fad4 	bl	80046e4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800413c:	4b3b      	ldr	r3, [pc, #236]	@ (800422c <xTaskIncrementTick+0x15c>)
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	693a      	ldr	r2, [r7, #16]
 8004142:	429a      	cmp	r2, r3
 8004144:	d349      	bcc.n	80041da <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004146:	4b36      	ldr	r3, [pc, #216]	@ (8004220 <xTaskIncrementTick+0x150>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	2b00      	cmp	r3, #0
 800414e:	d104      	bne.n	800415a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004150:	4b36      	ldr	r3, [pc, #216]	@ (800422c <xTaskIncrementTick+0x15c>)
 8004152:	f04f 32ff 	mov.w	r2, #4294967295
 8004156:	601a      	str	r2, [r3, #0]
					break;
 8004158:	e03f      	b.n	80041da <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800415a:	4b31      	ldr	r3, [pc, #196]	@ (8004220 <xTaskIncrementTick+0x150>)
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	68db      	ldr	r3, [r3, #12]
 8004160:	68db      	ldr	r3, [r3, #12]
 8004162:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004164:	68bb      	ldr	r3, [r7, #8]
 8004166:	685b      	ldr	r3, [r3, #4]
 8004168:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800416a:	693a      	ldr	r2, [r7, #16]
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	429a      	cmp	r2, r3
 8004170:	d203      	bcs.n	800417a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004172:	4a2e      	ldr	r2, [pc, #184]	@ (800422c <xTaskIncrementTick+0x15c>)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004178:	e02f      	b.n	80041da <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800417a:	68bb      	ldr	r3, [r7, #8]
 800417c:	3304      	adds	r3, #4
 800417e:	4618      	mov	r0, r3
 8004180:	f7fe fe86 	bl	8002e90 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004184:	68bb      	ldr	r3, [r7, #8]
 8004186:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004188:	2b00      	cmp	r3, #0
 800418a:	d004      	beq.n	8004196 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800418c:	68bb      	ldr	r3, [r7, #8]
 800418e:	3318      	adds	r3, #24
 8004190:	4618      	mov	r0, r3
 8004192:	f7fe fe7d 	bl	8002e90 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004196:	68bb      	ldr	r3, [r7, #8]
 8004198:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800419a:	4b25      	ldr	r3, [pc, #148]	@ (8004230 <xTaskIncrementTick+0x160>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	429a      	cmp	r2, r3
 80041a0:	d903      	bls.n	80041aa <xTaskIncrementTick+0xda>
 80041a2:	68bb      	ldr	r3, [r7, #8]
 80041a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041a6:	4a22      	ldr	r2, [pc, #136]	@ (8004230 <xTaskIncrementTick+0x160>)
 80041a8:	6013      	str	r3, [r2, #0]
 80041aa:	68bb      	ldr	r3, [r7, #8]
 80041ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80041ae:	4613      	mov	r3, r2
 80041b0:	009b      	lsls	r3, r3, #2
 80041b2:	4413      	add	r3, r2
 80041b4:	009b      	lsls	r3, r3, #2
 80041b6:	4a1f      	ldr	r2, [pc, #124]	@ (8004234 <xTaskIncrementTick+0x164>)
 80041b8:	441a      	add	r2, r3
 80041ba:	68bb      	ldr	r3, [r7, #8]
 80041bc:	3304      	adds	r3, #4
 80041be:	4619      	mov	r1, r3
 80041c0:	4610      	mov	r0, r2
 80041c2:	f7fe fe08 	bl	8002dd6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80041c6:	68bb      	ldr	r3, [r7, #8]
 80041c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80041ca:	4b1b      	ldr	r3, [pc, #108]	@ (8004238 <xTaskIncrementTick+0x168>)
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041d0:	429a      	cmp	r2, r3
 80041d2:	d3b8      	bcc.n	8004146 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80041d4:	2301      	movs	r3, #1
 80041d6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80041d8:	e7b5      	b.n	8004146 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80041da:	4b17      	ldr	r3, [pc, #92]	@ (8004238 <xTaskIncrementTick+0x168>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80041e0:	4914      	ldr	r1, [pc, #80]	@ (8004234 <xTaskIncrementTick+0x164>)
 80041e2:	4613      	mov	r3, r2
 80041e4:	009b      	lsls	r3, r3, #2
 80041e6:	4413      	add	r3, r2
 80041e8:	009b      	lsls	r3, r3, #2
 80041ea:	440b      	add	r3, r1
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	2b01      	cmp	r3, #1
 80041f0:	d901      	bls.n	80041f6 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80041f2:	2301      	movs	r3, #1
 80041f4:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80041f6:	4b11      	ldr	r3, [pc, #68]	@ (800423c <xTaskIncrementTick+0x16c>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d007      	beq.n	800420e <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 80041fe:	2301      	movs	r3, #1
 8004200:	617b      	str	r3, [r7, #20]
 8004202:	e004      	b.n	800420e <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004204:	4b0e      	ldr	r3, [pc, #56]	@ (8004240 <xTaskIncrementTick+0x170>)
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	3301      	adds	r3, #1
 800420a:	4a0d      	ldr	r2, [pc, #52]	@ (8004240 <xTaskIncrementTick+0x170>)
 800420c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800420e:	697b      	ldr	r3, [r7, #20]
}
 8004210:	4618      	mov	r0, r3
 8004212:	3718      	adds	r7, #24
 8004214:	46bd      	mov	sp, r7
 8004216:	bd80      	pop	{r7, pc}
 8004218:	20000cc8 	.word	0x20000cc8
 800421c:	20000ca4 	.word	0x20000ca4
 8004220:	20000c58 	.word	0x20000c58
 8004224:	20000c5c 	.word	0x20000c5c
 8004228:	20000cb8 	.word	0x20000cb8
 800422c:	20000cc0 	.word	0x20000cc0
 8004230:	20000ca8 	.word	0x20000ca8
 8004234:	200007d0 	.word	0x200007d0
 8004238:	200007cc 	.word	0x200007cc
 800423c:	20000cb4 	.word	0x20000cb4
 8004240:	20000cb0 	.word	0x20000cb0

08004244 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004244:	b480      	push	{r7}
 8004246:	b085      	sub	sp, #20
 8004248:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800424a:	4b28      	ldr	r3, [pc, #160]	@ (80042ec <vTaskSwitchContext+0xa8>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	2b00      	cmp	r3, #0
 8004250:	d003      	beq.n	800425a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004252:	4b27      	ldr	r3, [pc, #156]	@ (80042f0 <vTaskSwitchContext+0xac>)
 8004254:	2201      	movs	r2, #1
 8004256:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004258:	e042      	b.n	80042e0 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 800425a:	4b25      	ldr	r3, [pc, #148]	@ (80042f0 <vTaskSwitchContext+0xac>)
 800425c:	2200      	movs	r2, #0
 800425e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004260:	4b24      	ldr	r3, [pc, #144]	@ (80042f4 <vTaskSwitchContext+0xb0>)
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	60fb      	str	r3, [r7, #12]
 8004266:	e011      	b.n	800428c <vTaskSwitchContext+0x48>
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d10b      	bne.n	8004286 <vTaskSwitchContext+0x42>
	__asm volatile
 800426e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004272:	f383 8811 	msr	BASEPRI, r3
 8004276:	f3bf 8f6f 	isb	sy
 800427a:	f3bf 8f4f 	dsb	sy
 800427e:	607b      	str	r3, [r7, #4]
}
 8004280:	bf00      	nop
 8004282:	bf00      	nop
 8004284:	e7fd      	b.n	8004282 <vTaskSwitchContext+0x3e>
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	3b01      	subs	r3, #1
 800428a:	60fb      	str	r3, [r7, #12]
 800428c:	491a      	ldr	r1, [pc, #104]	@ (80042f8 <vTaskSwitchContext+0xb4>)
 800428e:	68fa      	ldr	r2, [r7, #12]
 8004290:	4613      	mov	r3, r2
 8004292:	009b      	lsls	r3, r3, #2
 8004294:	4413      	add	r3, r2
 8004296:	009b      	lsls	r3, r3, #2
 8004298:	440b      	add	r3, r1
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	2b00      	cmp	r3, #0
 800429e:	d0e3      	beq.n	8004268 <vTaskSwitchContext+0x24>
 80042a0:	68fa      	ldr	r2, [r7, #12]
 80042a2:	4613      	mov	r3, r2
 80042a4:	009b      	lsls	r3, r3, #2
 80042a6:	4413      	add	r3, r2
 80042a8:	009b      	lsls	r3, r3, #2
 80042aa:	4a13      	ldr	r2, [pc, #76]	@ (80042f8 <vTaskSwitchContext+0xb4>)
 80042ac:	4413      	add	r3, r2
 80042ae:	60bb      	str	r3, [r7, #8]
 80042b0:	68bb      	ldr	r3, [r7, #8]
 80042b2:	685b      	ldr	r3, [r3, #4]
 80042b4:	685a      	ldr	r2, [r3, #4]
 80042b6:	68bb      	ldr	r3, [r7, #8]
 80042b8:	605a      	str	r2, [r3, #4]
 80042ba:	68bb      	ldr	r3, [r7, #8]
 80042bc:	685a      	ldr	r2, [r3, #4]
 80042be:	68bb      	ldr	r3, [r7, #8]
 80042c0:	3308      	adds	r3, #8
 80042c2:	429a      	cmp	r2, r3
 80042c4:	d104      	bne.n	80042d0 <vTaskSwitchContext+0x8c>
 80042c6:	68bb      	ldr	r3, [r7, #8]
 80042c8:	685b      	ldr	r3, [r3, #4]
 80042ca:	685a      	ldr	r2, [r3, #4]
 80042cc:	68bb      	ldr	r3, [r7, #8]
 80042ce:	605a      	str	r2, [r3, #4]
 80042d0:	68bb      	ldr	r3, [r7, #8]
 80042d2:	685b      	ldr	r3, [r3, #4]
 80042d4:	68db      	ldr	r3, [r3, #12]
 80042d6:	4a09      	ldr	r2, [pc, #36]	@ (80042fc <vTaskSwitchContext+0xb8>)
 80042d8:	6013      	str	r3, [r2, #0]
 80042da:	4a06      	ldr	r2, [pc, #24]	@ (80042f4 <vTaskSwitchContext+0xb0>)
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	6013      	str	r3, [r2, #0]
}
 80042e0:	bf00      	nop
 80042e2:	3714      	adds	r7, #20
 80042e4:	46bd      	mov	sp, r7
 80042e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ea:	4770      	bx	lr
 80042ec:	20000cc8 	.word	0x20000cc8
 80042f0:	20000cb4 	.word	0x20000cb4
 80042f4:	20000ca8 	.word	0x20000ca8
 80042f8:	200007d0 	.word	0x200007d0
 80042fc:	200007cc 	.word	0x200007cc

08004300 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004300:	b580      	push	{r7, lr}
 8004302:	b084      	sub	sp, #16
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
 8004308:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d10b      	bne.n	8004328 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8004310:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004314:	f383 8811 	msr	BASEPRI, r3
 8004318:	f3bf 8f6f 	isb	sy
 800431c:	f3bf 8f4f 	dsb	sy
 8004320:	60fb      	str	r3, [r7, #12]
}
 8004322:	bf00      	nop
 8004324:	bf00      	nop
 8004326:	e7fd      	b.n	8004324 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004328:	4b07      	ldr	r3, [pc, #28]	@ (8004348 <vTaskPlaceOnEventList+0x48>)
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	3318      	adds	r3, #24
 800432e:	4619      	mov	r1, r3
 8004330:	6878      	ldr	r0, [r7, #4]
 8004332:	f7fe fd74 	bl	8002e1e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004336:	2101      	movs	r1, #1
 8004338:	6838      	ldr	r0, [r7, #0]
 800433a:	f000 fa81 	bl	8004840 <prvAddCurrentTaskToDelayedList>
}
 800433e:	bf00      	nop
 8004340:	3710      	adds	r7, #16
 8004342:	46bd      	mov	sp, r7
 8004344:	bd80      	pop	{r7, pc}
 8004346:	bf00      	nop
 8004348:	200007cc 	.word	0x200007cc

0800434c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800434c:	b580      	push	{r7, lr}
 800434e:	b086      	sub	sp, #24
 8004350:	af00      	add	r7, sp, #0
 8004352:	60f8      	str	r0, [r7, #12]
 8004354:	60b9      	str	r1, [r7, #8]
 8004356:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	2b00      	cmp	r3, #0
 800435c:	d10b      	bne.n	8004376 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800435e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004362:	f383 8811 	msr	BASEPRI, r3
 8004366:	f3bf 8f6f 	isb	sy
 800436a:	f3bf 8f4f 	dsb	sy
 800436e:	617b      	str	r3, [r7, #20]
}
 8004370:	bf00      	nop
 8004372:	bf00      	nop
 8004374:	e7fd      	b.n	8004372 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004376:	4b0a      	ldr	r3, [pc, #40]	@ (80043a0 <vTaskPlaceOnEventListRestricted+0x54>)
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	3318      	adds	r3, #24
 800437c:	4619      	mov	r1, r3
 800437e:	68f8      	ldr	r0, [r7, #12]
 8004380:	f7fe fd29 	bl	8002dd6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d002      	beq.n	8004390 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800438a:	f04f 33ff 	mov.w	r3, #4294967295
 800438e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004390:	6879      	ldr	r1, [r7, #4]
 8004392:	68b8      	ldr	r0, [r7, #8]
 8004394:	f000 fa54 	bl	8004840 <prvAddCurrentTaskToDelayedList>
	}
 8004398:	bf00      	nop
 800439a:	3718      	adds	r7, #24
 800439c:	46bd      	mov	sp, r7
 800439e:	bd80      	pop	{r7, pc}
 80043a0:	200007cc 	.word	0x200007cc

080043a4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b086      	sub	sp, #24
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	68db      	ldr	r3, [r3, #12]
 80043b0:	68db      	ldr	r3, [r3, #12]
 80043b2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80043b4:	693b      	ldr	r3, [r7, #16]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d10b      	bne.n	80043d2 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80043ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043be:	f383 8811 	msr	BASEPRI, r3
 80043c2:	f3bf 8f6f 	isb	sy
 80043c6:	f3bf 8f4f 	dsb	sy
 80043ca:	60fb      	str	r3, [r7, #12]
}
 80043cc:	bf00      	nop
 80043ce:	bf00      	nop
 80043d0:	e7fd      	b.n	80043ce <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80043d2:	693b      	ldr	r3, [r7, #16]
 80043d4:	3318      	adds	r3, #24
 80043d6:	4618      	mov	r0, r3
 80043d8:	f7fe fd5a 	bl	8002e90 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80043dc:	4b1d      	ldr	r3, [pc, #116]	@ (8004454 <xTaskRemoveFromEventList+0xb0>)
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d11d      	bne.n	8004420 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80043e4:	693b      	ldr	r3, [r7, #16]
 80043e6:	3304      	adds	r3, #4
 80043e8:	4618      	mov	r0, r3
 80043ea:	f7fe fd51 	bl	8002e90 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80043ee:	693b      	ldr	r3, [r7, #16]
 80043f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80043f2:	4b19      	ldr	r3, [pc, #100]	@ (8004458 <xTaskRemoveFromEventList+0xb4>)
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	429a      	cmp	r2, r3
 80043f8:	d903      	bls.n	8004402 <xTaskRemoveFromEventList+0x5e>
 80043fa:	693b      	ldr	r3, [r7, #16]
 80043fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043fe:	4a16      	ldr	r2, [pc, #88]	@ (8004458 <xTaskRemoveFromEventList+0xb4>)
 8004400:	6013      	str	r3, [r2, #0]
 8004402:	693b      	ldr	r3, [r7, #16]
 8004404:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004406:	4613      	mov	r3, r2
 8004408:	009b      	lsls	r3, r3, #2
 800440a:	4413      	add	r3, r2
 800440c:	009b      	lsls	r3, r3, #2
 800440e:	4a13      	ldr	r2, [pc, #76]	@ (800445c <xTaskRemoveFromEventList+0xb8>)
 8004410:	441a      	add	r2, r3
 8004412:	693b      	ldr	r3, [r7, #16]
 8004414:	3304      	adds	r3, #4
 8004416:	4619      	mov	r1, r3
 8004418:	4610      	mov	r0, r2
 800441a:	f7fe fcdc 	bl	8002dd6 <vListInsertEnd>
 800441e:	e005      	b.n	800442c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004420:	693b      	ldr	r3, [r7, #16]
 8004422:	3318      	adds	r3, #24
 8004424:	4619      	mov	r1, r3
 8004426:	480e      	ldr	r0, [pc, #56]	@ (8004460 <xTaskRemoveFromEventList+0xbc>)
 8004428:	f7fe fcd5 	bl	8002dd6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800442c:	693b      	ldr	r3, [r7, #16]
 800442e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004430:	4b0c      	ldr	r3, [pc, #48]	@ (8004464 <xTaskRemoveFromEventList+0xc0>)
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004436:	429a      	cmp	r2, r3
 8004438:	d905      	bls.n	8004446 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800443a:	2301      	movs	r3, #1
 800443c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800443e:	4b0a      	ldr	r3, [pc, #40]	@ (8004468 <xTaskRemoveFromEventList+0xc4>)
 8004440:	2201      	movs	r2, #1
 8004442:	601a      	str	r2, [r3, #0]
 8004444:	e001      	b.n	800444a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8004446:	2300      	movs	r3, #0
 8004448:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800444a:	697b      	ldr	r3, [r7, #20]
}
 800444c:	4618      	mov	r0, r3
 800444e:	3718      	adds	r7, #24
 8004450:	46bd      	mov	sp, r7
 8004452:	bd80      	pop	{r7, pc}
 8004454:	20000cc8 	.word	0x20000cc8
 8004458:	20000ca8 	.word	0x20000ca8
 800445c:	200007d0 	.word	0x200007d0
 8004460:	20000c60 	.word	0x20000c60
 8004464:	200007cc 	.word	0x200007cc
 8004468:	20000cb4 	.word	0x20000cb4

0800446c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800446c:	b480      	push	{r7}
 800446e:	b083      	sub	sp, #12
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004474:	4b06      	ldr	r3, [pc, #24]	@ (8004490 <vTaskInternalSetTimeOutState+0x24>)
 8004476:	681a      	ldr	r2, [r3, #0]
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800447c:	4b05      	ldr	r3, [pc, #20]	@ (8004494 <vTaskInternalSetTimeOutState+0x28>)
 800447e:	681a      	ldr	r2, [r3, #0]
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	605a      	str	r2, [r3, #4]
}
 8004484:	bf00      	nop
 8004486:	370c      	adds	r7, #12
 8004488:	46bd      	mov	sp, r7
 800448a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448e:	4770      	bx	lr
 8004490:	20000cb8 	.word	0x20000cb8
 8004494:	20000ca4 	.word	0x20000ca4

08004498 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004498:	b580      	push	{r7, lr}
 800449a:	b088      	sub	sp, #32
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
 80044a0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d10b      	bne.n	80044c0 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80044a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044ac:	f383 8811 	msr	BASEPRI, r3
 80044b0:	f3bf 8f6f 	isb	sy
 80044b4:	f3bf 8f4f 	dsb	sy
 80044b8:	613b      	str	r3, [r7, #16]
}
 80044ba:	bf00      	nop
 80044bc:	bf00      	nop
 80044be:	e7fd      	b.n	80044bc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d10b      	bne.n	80044de <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80044c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044ca:	f383 8811 	msr	BASEPRI, r3
 80044ce:	f3bf 8f6f 	isb	sy
 80044d2:	f3bf 8f4f 	dsb	sy
 80044d6:	60fb      	str	r3, [r7, #12]
}
 80044d8:	bf00      	nop
 80044da:	bf00      	nop
 80044dc:	e7fd      	b.n	80044da <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80044de:	f000 fe8b 	bl	80051f8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80044e2:	4b1d      	ldr	r3, [pc, #116]	@ (8004558 <xTaskCheckForTimeOut+0xc0>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	685b      	ldr	r3, [r3, #4]
 80044ec:	69ba      	ldr	r2, [r7, #24]
 80044ee:	1ad3      	subs	r3, r2, r3
 80044f0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044fa:	d102      	bne.n	8004502 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80044fc:	2300      	movs	r3, #0
 80044fe:	61fb      	str	r3, [r7, #28]
 8004500:	e023      	b.n	800454a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681a      	ldr	r2, [r3, #0]
 8004506:	4b15      	ldr	r3, [pc, #84]	@ (800455c <xTaskCheckForTimeOut+0xc4>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	429a      	cmp	r2, r3
 800450c:	d007      	beq.n	800451e <xTaskCheckForTimeOut+0x86>
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	685b      	ldr	r3, [r3, #4]
 8004512:	69ba      	ldr	r2, [r7, #24]
 8004514:	429a      	cmp	r2, r3
 8004516:	d302      	bcc.n	800451e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004518:	2301      	movs	r3, #1
 800451a:	61fb      	str	r3, [r7, #28]
 800451c:	e015      	b.n	800454a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	697a      	ldr	r2, [r7, #20]
 8004524:	429a      	cmp	r2, r3
 8004526:	d20b      	bcs.n	8004540 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	681a      	ldr	r2, [r3, #0]
 800452c:	697b      	ldr	r3, [r7, #20]
 800452e:	1ad2      	subs	r2, r2, r3
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004534:	6878      	ldr	r0, [r7, #4]
 8004536:	f7ff ff99 	bl	800446c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800453a:	2300      	movs	r3, #0
 800453c:	61fb      	str	r3, [r7, #28]
 800453e:	e004      	b.n	800454a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	2200      	movs	r2, #0
 8004544:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004546:	2301      	movs	r3, #1
 8004548:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800454a:	f000 fe87 	bl	800525c <vPortExitCritical>

	return xReturn;
 800454e:	69fb      	ldr	r3, [r7, #28]
}
 8004550:	4618      	mov	r0, r3
 8004552:	3720      	adds	r7, #32
 8004554:	46bd      	mov	sp, r7
 8004556:	bd80      	pop	{r7, pc}
 8004558:	20000ca4 	.word	0x20000ca4
 800455c:	20000cb8 	.word	0x20000cb8

08004560 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004560:	b480      	push	{r7}
 8004562:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004564:	4b03      	ldr	r3, [pc, #12]	@ (8004574 <vTaskMissedYield+0x14>)
 8004566:	2201      	movs	r2, #1
 8004568:	601a      	str	r2, [r3, #0]
}
 800456a:	bf00      	nop
 800456c:	46bd      	mov	sp, r7
 800456e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004572:	4770      	bx	lr
 8004574:	20000cb4 	.word	0x20000cb4

08004578 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004578:	b580      	push	{r7, lr}
 800457a:	b082      	sub	sp, #8
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004580:	f000 f852 	bl	8004628 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004584:	4b06      	ldr	r3, [pc, #24]	@ (80045a0 <prvIdleTask+0x28>)
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	2b01      	cmp	r3, #1
 800458a:	d9f9      	bls.n	8004580 <prvIdleTask+0x8>
			{
				taskYIELD();
 800458c:	4b05      	ldr	r3, [pc, #20]	@ (80045a4 <prvIdleTask+0x2c>)
 800458e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004592:	601a      	str	r2, [r3, #0]
 8004594:	f3bf 8f4f 	dsb	sy
 8004598:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800459c:	e7f0      	b.n	8004580 <prvIdleTask+0x8>
 800459e:	bf00      	nop
 80045a0:	200007d0 	.word	0x200007d0
 80045a4:	e000ed04 	.word	0xe000ed04

080045a8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b082      	sub	sp, #8
 80045ac:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80045ae:	2300      	movs	r3, #0
 80045b0:	607b      	str	r3, [r7, #4]
 80045b2:	e00c      	b.n	80045ce <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80045b4:	687a      	ldr	r2, [r7, #4]
 80045b6:	4613      	mov	r3, r2
 80045b8:	009b      	lsls	r3, r3, #2
 80045ba:	4413      	add	r3, r2
 80045bc:	009b      	lsls	r3, r3, #2
 80045be:	4a12      	ldr	r2, [pc, #72]	@ (8004608 <prvInitialiseTaskLists+0x60>)
 80045c0:	4413      	add	r3, r2
 80045c2:	4618      	mov	r0, r3
 80045c4:	f7fe fbda 	bl	8002d7c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	3301      	adds	r3, #1
 80045cc:	607b      	str	r3, [r7, #4]
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	2b37      	cmp	r3, #55	@ 0x37
 80045d2:	d9ef      	bls.n	80045b4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80045d4:	480d      	ldr	r0, [pc, #52]	@ (800460c <prvInitialiseTaskLists+0x64>)
 80045d6:	f7fe fbd1 	bl	8002d7c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80045da:	480d      	ldr	r0, [pc, #52]	@ (8004610 <prvInitialiseTaskLists+0x68>)
 80045dc:	f7fe fbce 	bl	8002d7c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80045e0:	480c      	ldr	r0, [pc, #48]	@ (8004614 <prvInitialiseTaskLists+0x6c>)
 80045e2:	f7fe fbcb 	bl	8002d7c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80045e6:	480c      	ldr	r0, [pc, #48]	@ (8004618 <prvInitialiseTaskLists+0x70>)
 80045e8:	f7fe fbc8 	bl	8002d7c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80045ec:	480b      	ldr	r0, [pc, #44]	@ (800461c <prvInitialiseTaskLists+0x74>)
 80045ee:	f7fe fbc5 	bl	8002d7c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80045f2:	4b0b      	ldr	r3, [pc, #44]	@ (8004620 <prvInitialiseTaskLists+0x78>)
 80045f4:	4a05      	ldr	r2, [pc, #20]	@ (800460c <prvInitialiseTaskLists+0x64>)
 80045f6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80045f8:	4b0a      	ldr	r3, [pc, #40]	@ (8004624 <prvInitialiseTaskLists+0x7c>)
 80045fa:	4a05      	ldr	r2, [pc, #20]	@ (8004610 <prvInitialiseTaskLists+0x68>)
 80045fc:	601a      	str	r2, [r3, #0]
}
 80045fe:	bf00      	nop
 8004600:	3708      	adds	r7, #8
 8004602:	46bd      	mov	sp, r7
 8004604:	bd80      	pop	{r7, pc}
 8004606:	bf00      	nop
 8004608:	200007d0 	.word	0x200007d0
 800460c:	20000c30 	.word	0x20000c30
 8004610:	20000c44 	.word	0x20000c44
 8004614:	20000c60 	.word	0x20000c60
 8004618:	20000c74 	.word	0x20000c74
 800461c:	20000c8c 	.word	0x20000c8c
 8004620:	20000c58 	.word	0x20000c58
 8004624:	20000c5c 	.word	0x20000c5c

08004628 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004628:	b580      	push	{r7, lr}
 800462a:	b082      	sub	sp, #8
 800462c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800462e:	e019      	b.n	8004664 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004630:	f000 fde2 	bl	80051f8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004634:	4b10      	ldr	r3, [pc, #64]	@ (8004678 <prvCheckTasksWaitingTermination+0x50>)
 8004636:	68db      	ldr	r3, [r3, #12]
 8004638:	68db      	ldr	r3, [r3, #12]
 800463a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	3304      	adds	r3, #4
 8004640:	4618      	mov	r0, r3
 8004642:	f7fe fc25 	bl	8002e90 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004646:	4b0d      	ldr	r3, [pc, #52]	@ (800467c <prvCheckTasksWaitingTermination+0x54>)
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	3b01      	subs	r3, #1
 800464c:	4a0b      	ldr	r2, [pc, #44]	@ (800467c <prvCheckTasksWaitingTermination+0x54>)
 800464e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004650:	4b0b      	ldr	r3, [pc, #44]	@ (8004680 <prvCheckTasksWaitingTermination+0x58>)
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	3b01      	subs	r3, #1
 8004656:	4a0a      	ldr	r2, [pc, #40]	@ (8004680 <prvCheckTasksWaitingTermination+0x58>)
 8004658:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800465a:	f000 fdff 	bl	800525c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800465e:	6878      	ldr	r0, [r7, #4]
 8004660:	f000 f810 	bl	8004684 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004664:	4b06      	ldr	r3, [pc, #24]	@ (8004680 <prvCheckTasksWaitingTermination+0x58>)
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	2b00      	cmp	r3, #0
 800466a:	d1e1      	bne.n	8004630 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800466c:	bf00      	nop
 800466e:	bf00      	nop
 8004670:	3708      	adds	r7, #8
 8004672:	46bd      	mov	sp, r7
 8004674:	bd80      	pop	{r7, pc}
 8004676:	bf00      	nop
 8004678:	20000c74 	.word	0x20000c74
 800467c:	20000ca0 	.word	0x20000ca0
 8004680:	20000c88 	.word	0x20000c88

08004684 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004684:	b580      	push	{r7, lr}
 8004686:	b084      	sub	sp, #16
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8004692:	2b00      	cmp	r3, #0
 8004694:	d108      	bne.n	80046a8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800469a:	4618      	mov	r0, r3
 800469c:	f000 ff9c 	bl	80055d8 <vPortFree>
				vPortFree( pxTCB );
 80046a0:	6878      	ldr	r0, [r7, #4]
 80046a2:	f000 ff99 	bl	80055d8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80046a6:	e019      	b.n	80046dc <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80046ae:	2b01      	cmp	r3, #1
 80046b0:	d103      	bne.n	80046ba <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80046b2:	6878      	ldr	r0, [r7, #4]
 80046b4:	f000 ff90 	bl	80055d8 <vPortFree>
	}
 80046b8:	e010      	b.n	80046dc <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80046c0:	2b02      	cmp	r3, #2
 80046c2:	d00b      	beq.n	80046dc <prvDeleteTCB+0x58>
	__asm volatile
 80046c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046c8:	f383 8811 	msr	BASEPRI, r3
 80046cc:	f3bf 8f6f 	isb	sy
 80046d0:	f3bf 8f4f 	dsb	sy
 80046d4:	60fb      	str	r3, [r7, #12]
}
 80046d6:	bf00      	nop
 80046d8:	bf00      	nop
 80046da:	e7fd      	b.n	80046d8 <prvDeleteTCB+0x54>
	}
 80046dc:	bf00      	nop
 80046de:	3710      	adds	r7, #16
 80046e0:	46bd      	mov	sp, r7
 80046e2:	bd80      	pop	{r7, pc}

080046e4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80046e4:	b480      	push	{r7}
 80046e6:	b083      	sub	sp, #12
 80046e8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80046ea:	4b0c      	ldr	r3, [pc, #48]	@ (800471c <prvResetNextTaskUnblockTime+0x38>)
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d104      	bne.n	80046fe <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80046f4:	4b0a      	ldr	r3, [pc, #40]	@ (8004720 <prvResetNextTaskUnblockTime+0x3c>)
 80046f6:	f04f 32ff 	mov.w	r2, #4294967295
 80046fa:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80046fc:	e008      	b.n	8004710 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80046fe:	4b07      	ldr	r3, [pc, #28]	@ (800471c <prvResetNextTaskUnblockTime+0x38>)
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	68db      	ldr	r3, [r3, #12]
 8004704:	68db      	ldr	r3, [r3, #12]
 8004706:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	685b      	ldr	r3, [r3, #4]
 800470c:	4a04      	ldr	r2, [pc, #16]	@ (8004720 <prvResetNextTaskUnblockTime+0x3c>)
 800470e:	6013      	str	r3, [r2, #0]
}
 8004710:	bf00      	nop
 8004712:	370c      	adds	r7, #12
 8004714:	46bd      	mov	sp, r7
 8004716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471a:	4770      	bx	lr
 800471c:	20000c58 	.word	0x20000c58
 8004720:	20000cc0 	.word	0x20000cc0

08004724 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004724:	b480      	push	{r7}
 8004726:	b083      	sub	sp, #12
 8004728:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800472a:	4b0b      	ldr	r3, [pc, #44]	@ (8004758 <xTaskGetSchedulerState+0x34>)
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d102      	bne.n	8004738 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004732:	2301      	movs	r3, #1
 8004734:	607b      	str	r3, [r7, #4]
 8004736:	e008      	b.n	800474a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004738:	4b08      	ldr	r3, [pc, #32]	@ (800475c <xTaskGetSchedulerState+0x38>)
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d102      	bne.n	8004746 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004740:	2302      	movs	r3, #2
 8004742:	607b      	str	r3, [r7, #4]
 8004744:	e001      	b.n	800474a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004746:	2300      	movs	r3, #0
 8004748:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800474a:	687b      	ldr	r3, [r7, #4]
	}
 800474c:	4618      	mov	r0, r3
 800474e:	370c      	adds	r7, #12
 8004750:	46bd      	mov	sp, r7
 8004752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004756:	4770      	bx	lr
 8004758:	20000cac 	.word	0x20000cac
 800475c:	20000cc8 	.word	0x20000cc8

08004760 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004760:	b580      	push	{r7, lr}
 8004762:	b086      	sub	sp, #24
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800476c:	2300      	movs	r3, #0
 800476e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2b00      	cmp	r3, #0
 8004774:	d058      	beq.n	8004828 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004776:	4b2f      	ldr	r3, [pc, #188]	@ (8004834 <xTaskPriorityDisinherit+0xd4>)
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	693a      	ldr	r2, [r7, #16]
 800477c:	429a      	cmp	r2, r3
 800477e:	d00b      	beq.n	8004798 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8004780:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004784:	f383 8811 	msr	BASEPRI, r3
 8004788:	f3bf 8f6f 	isb	sy
 800478c:	f3bf 8f4f 	dsb	sy
 8004790:	60fb      	str	r3, [r7, #12]
}
 8004792:	bf00      	nop
 8004794:	bf00      	nop
 8004796:	e7fd      	b.n	8004794 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004798:	693b      	ldr	r3, [r7, #16]
 800479a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800479c:	2b00      	cmp	r3, #0
 800479e:	d10b      	bne.n	80047b8 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80047a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047a4:	f383 8811 	msr	BASEPRI, r3
 80047a8:	f3bf 8f6f 	isb	sy
 80047ac:	f3bf 8f4f 	dsb	sy
 80047b0:	60bb      	str	r3, [r7, #8]
}
 80047b2:	bf00      	nop
 80047b4:	bf00      	nop
 80047b6:	e7fd      	b.n	80047b4 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80047b8:	693b      	ldr	r3, [r7, #16]
 80047ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80047bc:	1e5a      	subs	r2, r3, #1
 80047be:	693b      	ldr	r3, [r7, #16]
 80047c0:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80047c2:	693b      	ldr	r3, [r7, #16]
 80047c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80047c6:	693b      	ldr	r3, [r7, #16]
 80047c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80047ca:	429a      	cmp	r2, r3
 80047cc:	d02c      	beq.n	8004828 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80047ce:	693b      	ldr	r3, [r7, #16]
 80047d0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d128      	bne.n	8004828 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80047d6:	693b      	ldr	r3, [r7, #16]
 80047d8:	3304      	adds	r3, #4
 80047da:	4618      	mov	r0, r3
 80047dc:	f7fe fb58 	bl	8002e90 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80047e0:	693b      	ldr	r3, [r7, #16]
 80047e2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80047e4:	693b      	ldr	r3, [r7, #16]
 80047e6:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80047e8:	693b      	ldr	r3, [r7, #16]
 80047ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047ec:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80047f0:	693b      	ldr	r3, [r7, #16]
 80047f2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80047f4:	693b      	ldr	r3, [r7, #16]
 80047f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80047f8:	4b0f      	ldr	r3, [pc, #60]	@ (8004838 <xTaskPriorityDisinherit+0xd8>)
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	429a      	cmp	r2, r3
 80047fe:	d903      	bls.n	8004808 <xTaskPriorityDisinherit+0xa8>
 8004800:	693b      	ldr	r3, [r7, #16]
 8004802:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004804:	4a0c      	ldr	r2, [pc, #48]	@ (8004838 <xTaskPriorityDisinherit+0xd8>)
 8004806:	6013      	str	r3, [r2, #0]
 8004808:	693b      	ldr	r3, [r7, #16]
 800480a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800480c:	4613      	mov	r3, r2
 800480e:	009b      	lsls	r3, r3, #2
 8004810:	4413      	add	r3, r2
 8004812:	009b      	lsls	r3, r3, #2
 8004814:	4a09      	ldr	r2, [pc, #36]	@ (800483c <xTaskPriorityDisinherit+0xdc>)
 8004816:	441a      	add	r2, r3
 8004818:	693b      	ldr	r3, [r7, #16]
 800481a:	3304      	adds	r3, #4
 800481c:	4619      	mov	r1, r3
 800481e:	4610      	mov	r0, r2
 8004820:	f7fe fad9 	bl	8002dd6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004824:	2301      	movs	r3, #1
 8004826:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004828:	697b      	ldr	r3, [r7, #20]
	}
 800482a:	4618      	mov	r0, r3
 800482c:	3718      	adds	r7, #24
 800482e:	46bd      	mov	sp, r7
 8004830:	bd80      	pop	{r7, pc}
 8004832:	bf00      	nop
 8004834:	200007cc 	.word	0x200007cc
 8004838:	20000ca8 	.word	0x20000ca8
 800483c:	200007d0 	.word	0x200007d0

08004840 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004840:	b580      	push	{r7, lr}
 8004842:	b084      	sub	sp, #16
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
 8004848:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800484a:	4b21      	ldr	r3, [pc, #132]	@ (80048d0 <prvAddCurrentTaskToDelayedList+0x90>)
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004850:	4b20      	ldr	r3, [pc, #128]	@ (80048d4 <prvAddCurrentTaskToDelayedList+0x94>)
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	3304      	adds	r3, #4
 8004856:	4618      	mov	r0, r3
 8004858:	f7fe fb1a 	bl	8002e90 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004862:	d10a      	bne.n	800487a <prvAddCurrentTaskToDelayedList+0x3a>
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	2b00      	cmp	r3, #0
 8004868:	d007      	beq.n	800487a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800486a:	4b1a      	ldr	r3, [pc, #104]	@ (80048d4 <prvAddCurrentTaskToDelayedList+0x94>)
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	3304      	adds	r3, #4
 8004870:	4619      	mov	r1, r3
 8004872:	4819      	ldr	r0, [pc, #100]	@ (80048d8 <prvAddCurrentTaskToDelayedList+0x98>)
 8004874:	f7fe faaf 	bl	8002dd6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004878:	e026      	b.n	80048c8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800487a:	68fa      	ldr	r2, [r7, #12]
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	4413      	add	r3, r2
 8004880:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004882:	4b14      	ldr	r3, [pc, #80]	@ (80048d4 <prvAddCurrentTaskToDelayedList+0x94>)
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	68ba      	ldr	r2, [r7, #8]
 8004888:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800488a:	68ba      	ldr	r2, [r7, #8]
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	429a      	cmp	r2, r3
 8004890:	d209      	bcs.n	80048a6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004892:	4b12      	ldr	r3, [pc, #72]	@ (80048dc <prvAddCurrentTaskToDelayedList+0x9c>)
 8004894:	681a      	ldr	r2, [r3, #0]
 8004896:	4b0f      	ldr	r3, [pc, #60]	@ (80048d4 <prvAddCurrentTaskToDelayedList+0x94>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	3304      	adds	r3, #4
 800489c:	4619      	mov	r1, r3
 800489e:	4610      	mov	r0, r2
 80048a0:	f7fe fabd 	bl	8002e1e <vListInsert>
}
 80048a4:	e010      	b.n	80048c8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80048a6:	4b0e      	ldr	r3, [pc, #56]	@ (80048e0 <prvAddCurrentTaskToDelayedList+0xa0>)
 80048a8:	681a      	ldr	r2, [r3, #0]
 80048aa:	4b0a      	ldr	r3, [pc, #40]	@ (80048d4 <prvAddCurrentTaskToDelayedList+0x94>)
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	3304      	adds	r3, #4
 80048b0:	4619      	mov	r1, r3
 80048b2:	4610      	mov	r0, r2
 80048b4:	f7fe fab3 	bl	8002e1e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80048b8:	4b0a      	ldr	r3, [pc, #40]	@ (80048e4 <prvAddCurrentTaskToDelayedList+0xa4>)
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	68ba      	ldr	r2, [r7, #8]
 80048be:	429a      	cmp	r2, r3
 80048c0:	d202      	bcs.n	80048c8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80048c2:	4a08      	ldr	r2, [pc, #32]	@ (80048e4 <prvAddCurrentTaskToDelayedList+0xa4>)
 80048c4:	68bb      	ldr	r3, [r7, #8]
 80048c6:	6013      	str	r3, [r2, #0]
}
 80048c8:	bf00      	nop
 80048ca:	3710      	adds	r7, #16
 80048cc:	46bd      	mov	sp, r7
 80048ce:	bd80      	pop	{r7, pc}
 80048d0:	20000ca4 	.word	0x20000ca4
 80048d4:	200007cc 	.word	0x200007cc
 80048d8:	20000c8c 	.word	0x20000c8c
 80048dc:	20000c5c 	.word	0x20000c5c
 80048e0:	20000c58 	.word	0x20000c58
 80048e4:	20000cc0 	.word	0x20000cc0

080048e8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b08a      	sub	sp, #40	@ 0x28
 80048ec:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80048ee:	2300      	movs	r3, #0
 80048f0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80048f2:	f000 fb13 	bl	8004f1c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80048f6:	4b1d      	ldr	r3, [pc, #116]	@ (800496c <xTimerCreateTimerTask+0x84>)
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d021      	beq.n	8004942 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80048fe:	2300      	movs	r3, #0
 8004900:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004902:	2300      	movs	r3, #0
 8004904:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004906:	1d3a      	adds	r2, r7, #4
 8004908:	f107 0108 	add.w	r1, r7, #8
 800490c:	f107 030c 	add.w	r3, r7, #12
 8004910:	4618      	mov	r0, r3
 8004912:	f7fe fa19 	bl	8002d48 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004916:	6879      	ldr	r1, [r7, #4]
 8004918:	68bb      	ldr	r3, [r7, #8]
 800491a:	68fa      	ldr	r2, [r7, #12]
 800491c:	9202      	str	r2, [sp, #8]
 800491e:	9301      	str	r3, [sp, #4]
 8004920:	2302      	movs	r3, #2
 8004922:	9300      	str	r3, [sp, #0]
 8004924:	2300      	movs	r3, #0
 8004926:	460a      	mov	r2, r1
 8004928:	4911      	ldr	r1, [pc, #68]	@ (8004970 <xTimerCreateTimerTask+0x88>)
 800492a:	4812      	ldr	r0, [pc, #72]	@ (8004974 <xTimerCreateTimerTask+0x8c>)
 800492c:	f7ff f8d0 	bl	8003ad0 <xTaskCreateStatic>
 8004930:	4603      	mov	r3, r0
 8004932:	4a11      	ldr	r2, [pc, #68]	@ (8004978 <xTimerCreateTimerTask+0x90>)
 8004934:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004936:	4b10      	ldr	r3, [pc, #64]	@ (8004978 <xTimerCreateTimerTask+0x90>)
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	2b00      	cmp	r3, #0
 800493c:	d001      	beq.n	8004942 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800493e:	2301      	movs	r3, #1
 8004940:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004942:	697b      	ldr	r3, [r7, #20]
 8004944:	2b00      	cmp	r3, #0
 8004946:	d10b      	bne.n	8004960 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8004948:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800494c:	f383 8811 	msr	BASEPRI, r3
 8004950:	f3bf 8f6f 	isb	sy
 8004954:	f3bf 8f4f 	dsb	sy
 8004958:	613b      	str	r3, [r7, #16]
}
 800495a:	bf00      	nop
 800495c:	bf00      	nop
 800495e:	e7fd      	b.n	800495c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8004960:	697b      	ldr	r3, [r7, #20]
}
 8004962:	4618      	mov	r0, r3
 8004964:	3718      	adds	r7, #24
 8004966:	46bd      	mov	sp, r7
 8004968:	bd80      	pop	{r7, pc}
 800496a:	bf00      	nop
 800496c:	20000cfc 	.word	0x20000cfc
 8004970:	080058e8 	.word	0x080058e8
 8004974:	08004ab5 	.word	0x08004ab5
 8004978:	20000d00 	.word	0x20000d00

0800497c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800497c:	b580      	push	{r7, lr}
 800497e:	b08a      	sub	sp, #40	@ 0x28
 8004980:	af00      	add	r7, sp, #0
 8004982:	60f8      	str	r0, [r7, #12]
 8004984:	60b9      	str	r1, [r7, #8]
 8004986:	607a      	str	r2, [r7, #4]
 8004988:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800498a:	2300      	movs	r3, #0
 800498c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	2b00      	cmp	r3, #0
 8004992:	d10b      	bne.n	80049ac <xTimerGenericCommand+0x30>
	__asm volatile
 8004994:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004998:	f383 8811 	msr	BASEPRI, r3
 800499c:	f3bf 8f6f 	isb	sy
 80049a0:	f3bf 8f4f 	dsb	sy
 80049a4:	623b      	str	r3, [r7, #32]
}
 80049a6:	bf00      	nop
 80049a8:	bf00      	nop
 80049aa:	e7fd      	b.n	80049a8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80049ac:	4b19      	ldr	r3, [pc, #100]	@ (8004a14 <xTimerGenericCommand+0x98>)
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d02a      	beq.n	8004a0a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80049b4:	68bb      	ldr	r3, [r7, #8]
 80049b6:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80049c0:	68bb      	ldr	r3, [r7, #8]
 80049c2:	2b05      	cmp	r3, #5
 80049c4:	dc18      	bgt.n	80049f8 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80049c6:	f7ff fead 	bl	8004724 <xTaskGetSchedulerState>
 80049ca:	4603      	mov	r3, r0
 80049cc:	2b02      	cmp	r3, #2
 80049ce:	d109      	bne.n	80049e4 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80049d0:	4b10      	ldr	r3, [pc, #64]	@ (8004a14 <xTimerGenericCommand+0x98>)
 80049d2:	6818      	ldr	r0, [r3, #0]
 80049d4:	f107 0110 	add.w	r1, r7, #16
 80049d8:	2300      	movs	r3, #0
 80049da:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80049dc:	f7fe fbc8 	bl	8003170 <xQueueGenericSend>
 80049e0:	6278      	str	r0, [r7, #36]	@ 0x24
 80049e2:	e012      	b.n	8004a0a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80049e4:	4b0b      	ldr	r3, [pc, #44]	@ (8004a14 <xTimerGenericCommand+0x98>)
 80049e6:	6818      	ldr	r0, [r3, #0]
 80049e8:	f107 0110 	add.w	r1, r7, #16
 80049ec:	2300      	movs	r3, #0
 80049ee:	2200      	movs	r2, #0
 80049f0:	f7fe fbbe 	bl	8003170 <xQueueGenericSend>
 80049f4:	6278      	str	r0, [r7, #36]	@ 0x24
 80049f6:	e008      	b.n	8004a0a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80049f8:	4b06      	ldr	r3, [pc, #24]	@ (8004a14 <xTimerGenericCommand+0x98>)
 80049fa:	6818      	ldr	r0, [r3, #0]
 80049fc:	f107 0110 	add.w	r1, r7, #16
 8004a00:	2300      	movs	r3, #0
 8004a02:	683a      	ldr	r2, [r7, #0]
 8004a04:	f7fe fcb6 	bl	8003374 <xQueueGenericSendFromISR>
 8004a08:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004a0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	3728      	adds	r7, #40	@ 0x28
 8004a10:	46bd      	mov	sp, r7
 8004a12:	bd80      	pop	{r7, pc}
 8004a14:	20000cfc 	.word	0x20000cfc

08004a18 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b088      	sub	sp, #32
 8004a1c:	af02      	add	r7, sp, #8
 8004a1e:	6078      	str	r0, [r7, #4]
 8004a20:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004a22:	4b23      	ldr	r3, [pc, #140]	@ (8004ab0 <prvProcessExpiredTimer+0x98>)
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	68db      	ldr	r3, [r3, #12]
 8004a28:	68db      	ldr	r3, [r3, #12]
 8004a2a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004a2c:	697b      	ldr	r3, [r7, #20]
 8004a2e:	3304      	adds	r3, #4
 8004a30:	4618      	mov	r0, r3
 8004a32:	f7fe fa2d 	bl	8002e90 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004a36:	697b      	ldr	r3, [r7, #20]
 8004a38:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004a3c:	f003 0304 	and.w	r3, r3, #4
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d023      	beq.n	8004a8c <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004a44:	697b      	ldr	r3, [r7, #20]
 8004a46:	699a      	ldr	r2, [r3, #24]
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	18d1      	adds	r1, r2, r3
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	683a      	ldr	r2, [r7, #0]
 8004a50:	6978      	ldr	r0, [r7, #20]
 8004a52:	f000 f8d5 	bl	8004c00 <prvInsertTimerInActiveList>
 8004a56:	4603      	mov	r3, r0
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d020      	beq.n	8004a9e <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	9300      	str	r3, [sp, #0]
 8004a60:	2300      	movs	r3, #0
 8004a62:	687a      	ldr	r2, [r7, #4]
 8004a64:	2100      	movs	r1, #0
 8004a66:	6978      	ldr	r0, [r7, #20]
 8004a68:	f7ff ff88 	bl	800497c <xTimerGenericCommand>
 8004a6c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004a6e:	693b      	ldr	r3, [r7, #16]
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d114      	bne.n	8004a9e <prvProcessExpiredTimer+0x86>
	__asm volatile
 8004a74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a78:	f383 8811 	msr	BASEPRI, r3
 8004a7c:	f3bf 8f6f 	isb	sy
 8004a80:	f3bf 8f4f 	dsb	sy
 8004a84:	60fb      	str	r3, [r7, #12]
}
 8004a86:	bf00      	nop
 8004a88:	bf00      	nop
 8004a8a:	e7fd      	b.n	8004a88 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004a8c:	697b      	ldr	r3, [r7, #20]
 8004a8e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004a92:	f023 0301 	bic.w	r3, r3, #1
 8004a96:	b2da      	uxtb	r2, r3
 8004a98:	697b      	ldr	r3, [r7, #20]
 8004a9a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004a9e:	697b      	ldr	r3, [r7, #20]
 8004aa0:	6a1b      	ldr	r3, [r3, #32]
 8004aa2:	6978      	ldr	r0, [r7, #20]
 8004aa4:	4798      	blx	r3
}
 8004aa6:	bf00      	nop
 8004aa8:	3718      	adds	r7, #24
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	bd80      	pop	{r7, pc}
 8004aae:	bf00      	nop
 8004ab0:	20000cf4 	.word	0x20000cf4

08004ab4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b084      	sub	sp, #16
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004abc:	f107 0308 	add.w	r3, r7, #8
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	f000 f859 	bl	8004b78 <prvGetNextExpireTime>
 8004ac6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004ac8:	68bb      	ldr	r3, [r7, #8]
 8004aca:	4619      	mov	r1, r3
 8004acc:	68f8      	ldr	r0, [r7, #12]
 8004ace:	f000 f805 	bl	8004adc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004ad2:	f000 f8d7 	bl	8004c84 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004ad6:	bf00      	nop
 8004ad8:	e7f0      	b.n	8004abc <prvTimerTask+0x8>
	...

08004adc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004adc:	b580      	push	{r7, lr}
 8004ade:	b084      	sub	sp, #16
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
 8004ae4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004ae6:	f7ff fa37 	bl	8003f58 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004aea:	f107 0308 	add.w	r3, r7, #8
 8004aee:	4618      	mov	r0, r3
 8004af0:	f000 f866 	bl	8004bc0 <prvSampleTimeNow>
 8004af4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004af6:	68bb      	ldr	r3, [r7, #8]
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d130      	bne.n	8004b5e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004afc:	683b      	ldr	r3, [r7, #0]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d10a      	bne.n	8004b18 <prvProcessTimerOrBlockTask+0x3c>
 8004b02:	687a      	ldr	r2, [r7, #4]
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	429a      	cmp	r2, r3
 8004b08:	d806      	bhi.n	8004b18 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004b0a:	f7ff fa33 	bl	8003f74 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004b0e:	68f9      	ldr	r1, [r7, #12]
 8004b10:	6878      	ldr	r0, [r7, #4]
 8004b12:	f7ff ff81 	bl	8004a18 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004b16:	e024      	b.n	8004b62 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d008      	beq.n	8004b30 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004b1e:	4b13      	ldr	r3, [pc, #76]	@ (8004b6c <prvProcessTimerOrBlockTask+0x90>)
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d101      	bne.n	8004b2c <prvProcessTimerOrBlockTask+0x50>
 8004b28:	2301      	movs	r3, #1
 8004b2a:	e000      	b.n	8004b2e <prvProcessTimerOrBlockTask+0x52>
 8004b2c:	2300      	movs	r3, #0
 8004b2e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004b30:	4b0f      	ldr	r3, [pc, #60]	@ (8004b70 <prvProcessTimerOrBlockTask+0x94>)
 8004b32:	6818      	ldr	r0, [r3, #0]
 8004b34:	687a      	ldr	r2, [r7, #4]
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	1ad3      	subs	r3, r2, r3
 8004b3a:	683a      	ldr	r2, [r7, #0]
 8004b3c:	4619      	mov	r1, r3
 8004b3e:	f7fe ff93 	bl	8003a68 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004b42:	f7ff fa17 	bl	8003f74 <xTaskResumeAll>
 8004b46:	4603      	mov	r3, r0
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d10a      	bne.n	8004b62 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004b4c:	4b09      	ldr	r3, [pc, #36]	@ (8004b74 <prvProcessTimerOrBlockTask+0x98>)
 8004b4e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004b52:	601a      	str	r2, [r3, #0]
 8004b54:	f3bf 8f4f 	dsb	sy
 8004b58:	f3bf 8f6f 	isb	sy
}
 8004b5c:	e001      	b.n	8004b62 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004b5e:	f7ff fa09 	bl	8003f74 <xTaskResumeAll>
}
 8004b62:	bf00      	nop
 8004b64:	3710      	adds	r7, #16
 8004b66:	46bd      	mov	sp, r7
 8004b68:	bd80      	pop	{r7, pc}
 8004b6a:	bf00      	nop
 8004b6c:	20000cf8 	.word	0x20000cf8
 8004b70:	20000cfc 	.word	0x20000cfc
 8004b74:	e000ed04 	.word	0xe000ed04

08004b78 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004b78:	b480      	push	{r7}
 8004b7a:	b085      	sub	sp, #20
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004b80:	4b0e      	ldr	r3, [pc, #56]	@ (8004bbc <prvGetNextExpireTime+0x44>)
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d101      	bne.n	8004b8e <prvGetNextExpireTime+0x16>
 8004b8a:	2201      	movs	r2, #1
 8004b8c:	e000      	b.n	8004b90 <prvGetNextExpireTime+0x18>
 8004b8e:	2200      	movs	r2, #0
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d105      	bne.n	8004ba8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004b9c:	4b07      	ldr	r3, [pc, #28]	@ (8004bbc <prvGetNextExpireTime+0x44>)
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	68db      	ldr	r3, [r3, #12]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	60fb      	str	r3, [r7, #12]
 8004ba6:	e001      	b.n	8004bac <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004ba8:	2300      	movs	r3, #0
 8004baa:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004bac:	68fb      	ldr	r3, [r7, #12]
}
 8004bae:	4618      	mov	r0, r3
 8004bb0:	3714      	adds	r7, #20
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb8:	4770      	bx	lr
 8004bba:	bf00      	nop
 8004bbc:	20000cf4 	.word	0x20000cf4

08004bc0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b084      	sub	sp, #16
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004bc8:	f7ff fa72 	bl	80040b0 <xTaskGetTickCount>
 8004bcc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004bce:	4b0b      	ldr	r3, [pc, #44]	@ (8004bfc <prvSampleTimeNow+0x3c>)
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	68fa      	ldr	r2, [r7, #12]
 8004bd4:	429a      	cmp	r2, r3
 8004bd6:	d205      	bcs.n	8004be4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004bd8:	f000 f93a 	bl	8004e50 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2201      	movs	r2, #1
 8004be0:	601a      	str	r2, [r3, #0]
 8004be2:	e002      	b.n	8004bea <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2200      	movs	r2, #0
 8004be8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004bea:	4a04      	ldr	r2, [pc, #16]	@ (8004bfc <prvSampleTimeNow+0x3c>)
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
}
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	3710      	adds	r7, #16
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	bd80      	pop	{r7, pc}
 8004bfa:	bf00      	nop
 8004bfc:	20000d04 	.word	0x20000d04

08004c00 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	b086      	sub	sp, #24
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	60f8      	str	r0, [r7, #12]
 8004c08:	60b9      	str	r1, [r7, #8]
 8004c0a:	607a      	str	r2, [r7, #4]
 8004c0c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004c0e:	2300      	movs	r3, #0
 8004c10:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	68ba      	ldr	r2, [r7, #8]
 8004c16:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	68fa      	ldr	r2, [r7, #12]
 8004c1c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004c1e:	68ba      	ldr	r2, [r7, #8]
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	429a      	cmp	r2, r3
 8004c24:	d812      	bhi.n	8004c4c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004c26:	687a      	ldr	r2, [r7, #4]
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	1ad2      	subs	r2, r2, r3
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	699b      	ldr	r3, [r3, #24]
 8004c30:	429a      	cmp	r2, r3
 8004c32:	d302      	bcc.n	8004c3a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004c34:	2301      	movs	r3, #1
 8004c36:	617b      	str	r3, [r7, #20]
 8004c38:	e01b      	b.n	8004c72 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004c3a:	4b10      	ldr	r3, [pc, #64]	@ (8004c7c <prvInsertTimerInActiveList+0x7c>)
 8004c3c:	681a      	ldr	r2, [r3, #0]
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	3304      	adds	r3, #4
 8004c42:	4619      	mov	r1, r3
 8004c44:	4610      	mov	r0, r2
 8004c46:	f7fe f8ea 	bl	8002e1e <vListInsert>
 8004c4a:	e012      	b.n	8004c72 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004c4c:	687a      	ldr	r2, [r7, #4]
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	429a      	cmp	r2, r3
 8004c52:	d206      	bcs.n	8004c62 <prvInsertTimerInActiveList+0x62>
 8004c54:	68ba      	ldr	r2, [r7, #8]
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	429a      	cmp	r2, r3
 8004c5a:	d302      	bcc.n	8004c62 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004c5c:	2301      	movs	r3, #1
 8004c5e:	617b      	str	r3, [r7, #20]
 8004c60:	e007      	b.n	8004c72 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004c62:	4b07      	ldr	r3, [pc, #28]	@ (8004c80 <prvInsertTimerInActiveList+0x80>)
 8004c64:	681a      	ldr	r2, [r3, #0]
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	3304      	adds	r3, #4
 8004c6a:	4619      	mov	r1, r3
 8004c6c:	4610      	mov	r0, r2
 8004c6e:	f7fe f8d6 	bl	8002e1e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004c72:	697b      	ldr	r3, [r7, #20]
}
 8004c74:	4618      	mov	r0, r3
 8004c76:	3718      	adds	r7, #24
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	bd80      	pop	{r7, pc}
 8004c7c:	20000cf8 	.word	0x20000cf8
 8004c80:	20000cf4 	.word	0x20000cf4

08004c84 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004c84:	b580      	push	{r7, lr}
 8004c86:	b08e      	sub	sp, #56	@ 0x38
 8004c88:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004c8a:	e0ce      	b.n	8004e2a <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	da19      	bge.n	8004cc6 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004c92:	1d3b      	adds	r3, r7, #4
 8004c94:	3304      	adds	r3, #4
 8004c96:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004c98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d10b      	bne.n	8004cb6 <prvProcessReceivedCommands+0x32>
	__asm volatile
 8004c9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ca2:	f383 8811 	msr	BASEPRI, r3
 8004ca6:	f3bf 8f6f 	isb	sy
 8004caa:	f3bf 8f4f 	dsb	sy
 8004cae:	61fb      	str	r3, [r7, #28]
}
 8004cb0:	bf00      	nop
 8004cb2:	bf00      	nop
 8004cb4:	e7fd      	b.n	8004cb2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004cb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004cbc:	6850      	ldr	r0, [r2, #4]
 8004cbe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004cc0:	6892      	ldr	r2, [r2, #8]
 8004cc2:	4611      	mov	r1, r2
 8004cc4:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	f2c0 80ae 	blt.w	8004e2a <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004cd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cd4:	695b      	ldr	r3, [r3, #20]
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d004      	beq.n	8004ce4 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004cda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cdc:	3304      	adds	r3, #4
 8004cde:	4618      	mov	r0, r3
 8004ce0:	f7fe f8d6 	bl	8002e90 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004ce4:	463b      	mov	r3, r7
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	f7ff ff6a 	bl	8004bc0 <prvSampleTimeNow>
 8004cec:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	2b09      	cmp	r3, #9
 8004cf2:	f200 8097 	bhi.w	8004e24 <prvProcessReceivedCommands+0x1a0>
 8004cf6:	a201      	add	r2, pc, #4	@ (adr r2, 8004cfc <prvProcessReceivedCommands+0x78>)
 8004cf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cfc:	08004d25 	.word	0x08004d25
 8004d00:	08004d25 	.word	0x08004d25
 8004d04:	08004d25 	.word	0x08004d25
 8004d08:	08004d9b 	.word	0x08004d9b
 8004d0c:	08004daf 	.word	0x08004daf
 8004d10:	08004dfb 	.word	0x08004dfb
 8004d14:	08004d25 	.word	0x08004d25
 8004d18:	08004d25 	.word	0x08004d25
 8004d1c:	08004d9b 	.word	0x08004d9b
 8004d20:	08004daf 	.word	0x08004daf
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004d24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d26:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004d2a:	f043 0301 	orr.w	r3, r3, #1
 8004d2e:	b2da      	uxtb	r2, r3
 8004d30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d32:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004d36:	68ba      	ldr	r2, [r7, #8]
 8004d38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d3a:	699b      	ldr	r3, [r3, #24]
 8004d3c:	18d1      	adds	r1, r2, r3
 8004d3e:	68bb      	ldr	r3, [r7, #8]
 8004d40:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d42:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004d44:	f7ff ff5c 	bl	8004c00 <prvInsertTimerInActiveList>
 8004d48:	4603      	mov	r3, r0
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d06c      	beq.n	8004e28 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004d4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d50:	6a1b      	ldr	r3, [r3, #32]
 8004d52:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004d54:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004d56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d58:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004d5c:	f003 0304 	and.w	r3, r3, #4
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d061      	beq.n	8004e28 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004d64:	68ba      	ldr	r2, [r7, #8]
 8004d66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d68:	699b      	ldr	r3, [r3, #24]
 8004d6a:	441a      	add	r2, r3
 8004d6c:	2300      	movs	r3, #0
 8004d6e:	9300      	str	r3, [sp, #0]
 8004d70:	2300      	movs	r3, #0
 8004d72:	2100      	movs	r1, #0
 8004d74:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004d76:	f7ff fe01 	bl	800497c <xTimerGenericCommand>
 8004d7a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004d7c:	6a3b      	ldr	r3, [r7, #32]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d152      	bne.n	8004e28 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8004d82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d86:	f383 8811 	msr	BASEPRI, r3
 8004d8a:	f3bf 8f6f 	isb	sy
 8004d8e:	f3bf 8f4f 	dsb	sy
 8004d92:	61bb      	str	r3, [r7, #24]
}
 8004d94:	bf00      	nop
 8004d96:	bf00      	nop
 8004d98:	e7fd      	b.n	8004d96 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004d9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d9c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004da0:	f023 0301 	bic.w	r3, r3, #1
 8004da4:	b2da      	uxtb	r2, r3
 8004da6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004da8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8004dac:	e03d      	b.n	8004e2a <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004dae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004db0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004db4:	f043 0301 	orr.w	r3, r3, #1
 8004db8:	b2da      	uxtb	r2, r3
 8004dba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004dbc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004dc0:	68ba      	ldr	r2, [r7, #8]
 8004dc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004dc4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004dc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004dc8:	699b      	ldr	r3, [r3, #24]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d10b      	bne.n	8004de6 <prvProcessReceivedCommands+0x162>
	__asm volatile
 8004dce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004dd2:	f383 8811 	msr	BASEPRI, r3
 8004dd6:	f3bf 8f6f 	isb	sy
 8004dda:	f3bf 8f4f 	dsb	sy
 8004dde:	617b      	str	r3, [r7, #20]
}
 8004de0:	bf00      	nop
 8004de2:	bf00      	nop
 8004de4:	e7fd      	b.n	8004de2 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004de6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004de8:	699a      	ldr	r2, [r3, #24]
 8004dea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dec:	18d1      	adds	r1, r2, r3
 8004dee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004df0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004df2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004df4:	f7ff ff04 	bl	8004c00 <prvInsertTimerInActiveList>
					break;
 8004df8:	e017      	b.n	8004e2a <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004dfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004dfc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004e00:	f003 0302 	and.w	r3, r3, #2
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d103      	bne.n	8004e10 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8004e08:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004e0a:	f000 fbe5 	bl	80055d8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004e0e:	e00c      	b.n	8004e2a <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004e10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e12:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004e16:	f023 0301 	bic.w	r3, r3, #1
 8004e1a:	b2da      	uxtb	r2, r3
 8004e1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e1e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8004e22:	e002      	b.n	8004e2a <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8004e24:	bf00      	nop
 8004e26:	e000      	b.n	8004e2a <prvProcessReceivedCommands+0x1a6>
					break;
 8004e28:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004e2a:	4b08      	ldr	r3, [pc, #32]	@ (8004e4c <prvProcessReceivedCommands+0x1c8>)
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	1d39      	adds	r1, r7, #4
 8004e30:	2200      	movs	r2, #0
 8004e32:	4618      	mov	r0, r3
 8004e34:	f7fe fb3c 	bl	80034b0 <xQueueReceive>
 8004e38:	4603      	mov	r3, r0
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	f47f af26 	bne.w	8004c8c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8004e40:	bf00      	nop
 8004e42:	bf00      	nop
 8004e44:	3730      	adds	r7, #48	@ 0x30
 8004e46:	46bd      	mov	sp, r7
 8004e48:	bd80      	pop	{r7, pc}
 8004e4a:	bf00      	nop
 8004e4c:	20000cfc 	.word	0x20000cfc

08004e50 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004e50:	b580      	push	{r7, lr}
 8004e52:	b088      	sub	sp, #32
 8004e54:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004e56:	e049      	b.n	8004eec <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004e58:	4b2e      	ldr	r3, [pc, #184]	@ (8004f14 <prvSwitchTimerLists+0xc4>)
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	68db      	ldr	r3, [r3, #12]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004e62:	4b2c      	ldr	r3, [pc, #176]	@ (8004f14 <prvSwitchTimerLists+0xc4>)
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	68db      	ldr	r3, [r3, #12]
 8004e68:	68db      	ldr	r3, [r3, #12]
 8004e6a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	3304      	adds	r3, #4
 8004e70:	4618      	mov	r0, r3
 8004e72:	f7fe f80d 	bl	8002e90 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	6a1b      	ldr	r3, [r3, #32]
 8004e7a:	68f8      	ldr	r0, [r7, #12]
 8004e7c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004e84:	f003 0304 	and.w	r3, r3, #4
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d02f      	beq.n	8004eec <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	699b      	ldr	r3, [r3, #24]
 8004e90:	693a      	ldr	r2, [r7, #16]
 8004e92:	4413      	add	r3, r2
 8004e94:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004e96:	68ba      	ldr	r2, [r7, #8]
 8004e98:	693b      	ldr	r3, [r7, #16]
 8004e9a:	429a      	cmp	r2, r3
 8004e9c:	d90e      	bls.n	8004ebc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	68ba      	ldr	r2, [r7, #8]
 8004ea2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	68fa      	ldr	r2, [r7, #12]
 8004ea8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004eaa:	4b1a      	ldr	r3, [pc, #104]	@ (8004f14 <prvSwitchTimerLists+0xc4>)
 8004eac:	681a      	ldr	r2, [r3, #0]
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	3304      	adds	r3, #4
 8004eb2:	4619      	mov	r1, r3
 8004eb4:	4610      	mov	r0, r2
 8004eb6:	f7fd ffb2 	bl	8002e1e <vListInsert>
 8004eba:	e017      	b.n	8004eec <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004ebc:	2300      	movs	r3, #0
 8004ebe:	9300      	str	r3, [sp, #0]
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	693a      	ldr	r2, [r7, #16]
 8004ec4:	2100      	movs	r1, #0
 8004ec6:	68f8      	ldr	r0, [r7, #12]
 8004ec8:	f7ff fd58 	bl	800497c <xTimerGenericCommand>
 8004ecc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d10b      	bne.n	8004eec <prvSwitchTimerLists+0x9c>
	__asm volatile
 8004ed4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ed8:	f383 8811 	msr	BASEPRI, r3
 8004edc:	f3bf 8f6f 	isb	sy
 8004ee0:	f3bf 8f4f 	dsb	sy
 8004ee4:	603b      	str	r3, [r7, #0]
}
 8004ee6:	bf00      	nop
 8004ee8:	bf00      	nop
 8004eea:	e7fd      	b.n	8004ee8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004eec:	4b09      	ldr	r3, [pc, #36]	@ (8004f14 <prvSwitchTimerLists+0xc4>)
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d1b0      	bne.n	8004e58 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004ef6:	4b07      	ldr	r3, [pc, #28]	@ (8004f14 <prvSwitchTimerLists+0xc4>)
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004efc:	4b06      	ldr	r3, [pc, #24]	@ (8004f18 <prvSwitchTimerLists+0xc8>)
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	4a04      	ldr	r2, [pc, #16]	@ (8004f14 <prvSwitchTimerLists+0xc4>)
 8004f02:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004f04:	4a04      	ldr	r2, [pc, #16]	@ (8004f18 <prvSwitchTimerLists+0xc8>)
 8004f06:	697b      	ldr	r3, [r7, #20]
 8004f08:	6013      	str	r3, [r2, #0]
}
 8004f0a:	bf00      	nop
 8004f0c:	3718      	adds	r7, #24
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	bd80      	pop	{r7, pc}
 8004f12:	bf00      	nop
 8004f14:	20000cf4 	.word	0x20000cf4
 8004f18:	20000cf8 	.word	0x20000cf8

08004f1c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	b082      	sub	sp, #8
 8004f20:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004f22:	f000 f969 	bl	80051f8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004f26:	4b15      	ldr	r3, [pc, #84]	@ (8004f7c <prvCheckForValidListAndQueue+0x60>)
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d120      	bne.n	8004f70 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004f2e:	4814      	ldr	r0, [pc, #80]	@ (8004f80 <prvCheckForValidListAndQueue+0x64>)
 8004f30:	f7fd ff24 	bl	8002d7c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004f34:	4813      	ldr	r0, [pc, #76]	@ (8004f84 <prvCheckForValidListAndQueue+0x68>)
 8004f36:	f7fd ff21 	bl	8002d7c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004f3a:	4b13      	ldr	r3, [pc, #76]	@ (8004f88 <prvCheckForValidListAndQueue+0x6c>)
 8004f3c:	4a10      	ldr	r2, [pc, #64]	@ (8004f80 <prvCheckForValidListAndQueue+0x64>)
 8004f3e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004f40:	4b12      	ldr	r3, [pc, #72]	@ (8004f8c <prvCheckForValidListAndQueue+0x70>)
 8004f42:	4a10      	ldr	r2, [pc, #64]	@ (8004f84 <prvCheckForValidListAndQueue+0x68>)
 8004f44:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004f46:	2300      	movs	r3, #0
 8004f48:	9300      	str	r3, [sp, #0]
 8004f4a:	4b11      	ldr	r3, [pc, #68]	@ (8004f90 <prvCheckForValidListAndQueue+0x74>)
 8004f4c:	4a11      	ldr	r2, [pc, #68]	@ (8004f94 <prvCheckForValidListAndQueue+0x78>)
 8004f4e:	2110      	movs	r1, #16
 8004f50:	200a      	movs	r0, #10
 8004f52:	f7fe f831 	bl	8002fb8 <xQueueGenericCreateStatic>
 8004f56:	4603      	mov	r3, r0
 8004f58:	4a08      	ldr	r2, [pc, #32]	@ (8004f7c <prvCheckForValidListAndQueue+0x60>)
 8004f5a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004f5c:	4b07      	ldr	r3, [pc, #28]	@ (8004f7c <prvCheckForValidListAndQueue+0x60>)
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d005      	beq.n	8004f70 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004f64:	4b05      	ldr	r3, [pc, #20]	@ (8004f7c <prvCheckForValidListAndQueue+0x60>)
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	490b      	ldr	r1, [pc, #44]	@ (8004f98 <prvCheckForValidListAndQueue+0x7c>)
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	f7fe fd52 	bl	8003a14 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004f70:	f000 f974 	bl	800525c <vPortExitCritical>
}
 8004f74:	bf00      	nop
 8004f76:	46bd      	mov	sp, r7
 8004f78:	bd80      	pop	{r7, pc}
 8004f7a:	bf00      	nop
 8004f7c:	20000cfc 	.word	0x20000cfc
 8004f80:	20000ccc 	.word	0x20000ccc
 8004f84:	20000ce0 	.word	0x20000ce0
 8004f88:	20000cf4 	.word	0x20000cf4
 8004f8c:	20000cf8 	.word	0x20000cf8
 8004f90:	20000da8 	.word	0x20000da8
 8004f94:	20000d08 	.word	0x20000d08
 8004f98:	080058f0 	.word	0x080058f0

08004f9c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004f9c:	b480      	push	{r7}
 8004f9e:	b085      	sub	sp, #20
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	60f8      	str	r0, [r7, #12]
 8004fa4:	60b9      	str	r1, [r7, #8]
 8004fa6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	3b04      	subs	r3, #4
 8004fac:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004fb4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	3b04      	subs	r3, #4
 8004fba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004fbc:	68bb      	ldr	r3, [r7, #8]
 8004fbe:	f023 0201 	bic.w	r2, r3, #1
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	3b04      	subs	r3, #4
 8004fca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004fcc:	4a0c      	ldr	r2, [pc, #48]	@ (8005000 <pxPortInitialiseStack+0x64>)
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	3b14      	subs	r3, #20
 8004fd6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004fd8:	687a      	ldr	r2, [r7, #4]
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	3b04      	subs	r3, #4
 8004fe2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	f06f 0202 	mvn.w	r2, #2
 8004fea:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	3b20      	subs	r3, #32
 8004ff0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
}
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	3714      	adds	r7, #20
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffe:	4770      	bx	lr
 8005000:	08005005 	.word	0x08005005

08005004 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005004:	b480      	push	{r7}
 8005006:	b085      	sub	sp, #20
 8005008:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800500a:	2300      	movs	r3, #0
 800500c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800500e:	4b13      	ldr	r3, [pc, #76]	@ (800505c <prvTaskExitError+0x58>)
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005016:	d00b      	beq.n	8005030 <prvTaskExitError+0x2c>
	__asm volatile
 8005018:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800501c:	f383 8811 	msr	BASEPRI, r3
 8005020:	f3bf 8f6f 	isb	sy
 8005024:	f3bf 8f4f 	dsb	sy
 8005028:	60fb      	str	r3, [r7, #12]
}
 800502a:	bf00      	nop
 800502c:	bf00      	nop
 800502e:	e7fd      	b.n	800502c <prvTaskExitError+0x28>
	__asm volatile
 8005030:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005034:	f383 8811 	msr	BASEPRI, r3
 8005038:	f3bf 8f6f 	isb	sy
 800503c:	f3bf 8f4f 	dsb	sy
 8005040:	60bb      	str	r3, [r7, #8]
}
 8005042:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005044:	bf00      	nop
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	2b00      	cmp	r3, #0
 800504a:	d0fc      	beq.n	8005046 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800504c:	bf00      	nop
 800504e:	bf00      	nop
 8005050:	3714      	adds	r7, #20
 8005052:	46bd      	mov	sp, r7
 8005054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005058:	4770      	bx	lr
 800505a:	bf00      	nop
 800505c:	2000000c 	.word	0x2000000c

08005060 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005060:	4b07      	ldr	r3, [pc, #28]	@ (8005080 <pxCurrentTCBConst2>)
 8005062:	6819      	ldr	r1, [r3, #0]
 8005064:	6808      	ldr	r0, [r1, #0]
 8005066:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800506a:	f380 8809 	msr	PSP, r0
 800506e:	f3bf 8f6f 	isb	sy
 8005072:	f04f 0000 	mov.w	r0, #0
 8005076:	f380 8811 	msr	BASEPRI, r0
 800507a:	4770      	bx	lr
 800507c:	f3af 8000 	nop.w

08005080 <pxCurrentTCBConst2>:
 8005080:	200007cc 	.word	0x200007cc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005084:	bf00      	nop
 8005086:	bf00      	nop

08005088 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005088:	4808      	ldr	r0, [pc, #32]	@ (80050ac <prvPortStartFirstTask+0x24>)
 800508a:	6800      	ldr	r0, [r0, #0]
 800508c:	6800      	ldr	r0, [r0, #0]
 800508e:	f380 8808 	msr	MSP, r0
 8005092:	f04f 0000 	mov.w	r0, #0
 8005096:	f380 8814 	msr	CONTROL, r0
 800509a:	b662      	cpsie	i
 800509c:	b661      	cpsie	f
 800509e:	f3bf 8f4f 	dsb	sy
 80050a2:	f3bf 8f6f 	isb	sy
 80050a6:	df00      	svc	0
 80050a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80050aa:	bf00      	nop
 80050ac:	e000ed08 	.word	0xe000ed08

080050b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80050b0:	b580      	push	{r7, lr}
 80050b2:	b086      	sub	sp, #24
 80050b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80050b6:	4b47      	ldr	r3, [pc, #284]	@ (80051d4 <xPortStartScheduler+0x124>)
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	4a47      	ldr	r2, [pc, #284]	@ (80051d8 <xPortStartScheduler+0x128>)
 80050bc:	4293      	cmp	r3, r2
 80050be:	d10b      	bne.n	80050d8 <xPortStartScheduler+0x28>
	__asm volatile
 80050c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050c4:	f383 8811 	msr	BASEPRI, r3
 80050c8:	f3bf 8f6f 	isb	sy
 80050cc:	f3bf 8f4f 	dsb	sy
 80050d0:	613b      	str	r3, [r7, #16]
}
 80050d2:	bf00      	nop
 80050d4:	bf00      	nop
 80050d6:	e7fd      	b.n	80050d4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80050d8:	4b3e      	ldr	r3, [pc, #248]	@ (80051d4 <xPortStartScheduler+0x124>)
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	4a3f      	ldr	r2, [pc, #252]	@ (80051dc <xPortStartScheduler+0x12c>)
 80050de:	4293      	cmp	r3, r2
 80050e0:	d10b      	bne.n	80050fa <xPortStartScheduler+0x4a>
	__asm volatile
 80050e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050e6:	f383 8811 	msr	BASEPRI, r3
 80050ea:	f3bf 8f6f 	isb	sy
 80050ee:	f3bf 8f4f 	dsb	sy
 80050f2:	60fb      	str	r3, [r7, #12]
}
 80050f4:	bf00      	nop
 80050f6:	bf00      	nop
 80050f8:	e7fd      	b.n	80050f6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80050fa:	4b39      	ldr	r3, [pc, #228]	@ (80051e0 <xPortStartScheduler+0x130>)
 80050fc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80050fe:	697b      	ldr	r3, [r7, #20]
 8005100:	781b      	ldrb	r3, [r3, #0]
 8005102:	b2db      	uxtb	r3, r3
 8005104:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005106:	697b      	ldr	r3, [r7, #20]
 8005108:	22ff      	movs	r2, #255	@ 0xff
 800510a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800510c:	697b      	ldr	r3, [r7, #20]
 800510e:	781b      	ldrb	r3, [r3, #0]
 8005110:	b2db      	uxtb	r3, r3
 8005112:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005114:	78fb      	ldrb	r3, [r7, #3]
 8005116:	b2db      	uxtb	r3, r3
 8005118:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800511c:	b2da      	uxtb	r2, r3
 800511e:	4b31      	ldr	r3, [pc, #196]	@ (80051e4 <xPortStartScheduler+0x134>)
 8005120:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005122:	4b31      	ldr	r3, [pc, #196]	@ (80051e8 <xPortStartScheduler+0x138>)
 8005124:	2207      	movs	r2, #7
 8005126:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005128:	e009      	b.n	800513e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800512a:	4b2f      	ldr	r3, [pc, #188]	@ (80051e8 <xPortStartScheduler+0x138>)
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	3b01      	subs	r3, #1
 8005130:	4a2d      	ldr	r2, [pc, #180]	@ (80051e8 <xPortStartScheduler+0x138>)
 8005132:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005134:	78fb      	ldrb	r3, [r7, #3]
 8005136:	b2db      	uxtb	r3, r3
 8005138:	005b      	lsls	r3, r3, #1
 800513a:	b2db      	uxtb	r3, r3
 800513c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800513e:	78fb      	ldrb	r3, [r7, #3]
 8005140:	b2db      	uxtb	r3, r3
 8005142:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005146:	2b80      	cmp	r3, #128	@ 0x80
 8005148:	d0ef      	beq.n	800512a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800514a:	4b27      	ldr	r3, [pc, #156]	@ (80051e8 <xPortStartScheduler+0x138>)
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f1c3 0307 	rsb	r3, r3, #7
 8005152:	2b04      	cmp	r3, #4
 8005154:	d00b      	beq.n	800516e <xPortStartScheduler+0xbe>
	__asm volatile
 8005156:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800515a:	f383 8811 	msr	BASEPRI, r3
 800515e:	f3bf 8f6f 	isb	sy
 8005162:	f3bf 8f4f 	dsb	sy
 8005166:	60bb      	str	r3, [r7, #8]
}
 8005168:	bf00      	nop
 800516a:	bf00      	nop
 800516c:	e7fd      	b.n	800516a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800516e:	4b1e      	ldr	r3, [pc, #120]	@ (80051e8 <xPortStartScheduler+0x138>)
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	021b      	lsls	r3, r3, #8
 8005174:	4a1c      	ldr	r2, [pc, #112]	@ (80051e8 <xPortStartScheduler+0x138>)
 8005176:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005178:	4b1b      	ldr	r3, [pc, #108]	@ (80051e8 <xPortStartScheduler+0x138>)
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005180:	4a19      	ldr	r2, [pc, #100]	@ (80051e8 <xPortStartScheduler+0x138>)
 8005182:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	b2da      	uxtb	r2, r3
 8005188:	697b      	ldr	r3, [r7, #20]
 800518a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800518c:	4b17      	ldr	r3, [pc, #92]	@ (80051ec <xPortStartScheduler+0x13c>)
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	4a16      	ldr	r2, [pc, #88]	@ (80051ec <xPortStartScheduler+0x13c>)
 8005192:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005196:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005198:	4b14      	ldr	r3, [pc, #80]	@ (80051ec <xPortStartScheduler+0x13c>)
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	4a13      	ldr	r2, [pc, #76]	@ (80051ec <xPortStartScheduler+0x13c>)
 800519e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80051a2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80051a4:	f000 f8da 	bl	800535c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80051a8:	4b11      	ldr	r3, [pc, #68]	@ (80051f0 <xPortStartScheduler+0x140>)
 80051aa:	2200      	movs	r2, #0
 80051ac:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80051ae:	f000 f8f9 	bl	80053a4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80051b2:	4b10      	ldr	r3, [pc, #64]	@ (80051f4 <xPortStartScheduler+0x144>)
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	4a0f      	ldr	r2, [pc, #60]	@ (80051f4 <xPortStartScheduler+0x144>)
 80051b8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80051bc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80051be:	f7ff ff63 	bl	8005088 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80051c2:	f7ff f83f 	bl	8004244 <vTaskSwitchContext>
	prvTaskExitError();
 80051c6:	f7ff ff1d 	bl	8005004 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80051ca:	2300      	movs	r3, #0
}
 80051cc:	4618      	mov	r0, r3
 80051ce:	3718      	adds	r7, #24
 80051d0:	46bd      	mov	sp, r7
 80051d2:	bd80      	pop	{r7, pc}
 80051d4:	e000ed00 	.word	0xe000ed00
 80051d8:	410fc271 	.word	0x410fc271
 80051dc:	410fc270 	.word	0x410fc270
 80051e0:	e000e400 	.word	0xe000e400
 80051e4:	20000df8 	.word	0x20000df8
 80051e8:	20000dfc 	.word	0x20000dfc
 80051ec:	e000ed20 	.word	0xe000ed20
 80051f0:	2000000c 	.word	0x2000000c
 80051f4:	e000ef34 	.word	0xe000ef34

080051f8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80051f8:	b480      	push	{r7}
 80051fa:	b083      	sub	sp, #12
 80051fc:	af00      	add	r7, sp, #0
	__asm volatile
 80051fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005202:	f383 8811 	msr	BASEPRI, r3
 8005206:	f3bf 8f6f 	isb	sy
 800520a:	f3bf 8f4f 	dsb	sy
 800520e:	607b      	str	r3, [r7, #4]
}
 8005210:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005212:	4b10      	ldr	r3, [pc, #64]	@ (8005254 <vPortEnterCritical+0x5c>)
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	3301      	adds	r3, #1
 8005218:	4a0e      	ldr	r2, [pc, #56]	@ (8005254 <vPortEnterCritical+0x5c>)
 800521a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800521c:	4b0d      	ldr	r3, [pc, #52]	@ (8005254 <vPortEnterCritical+0x5c>)
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	2b01      	cmp	r3, #1
 8005222:	d110      	bne.n	8005246 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005224:	4b0c      	ldr	r3, [pc, #48]	@ (8005258 <vPortEnterCritical+0x60>)
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	b2db      	uxtb	r3, r3
 800522a:	2b00      	cmp	r3, #0
 800522c:	d00b      	beq.n	8005246 <vPortEnterCritical+0x4e>
	__asm volatile
 800522e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005232:	f383 8811 	msr	BASEPRI, r3
 8005236:	f3bf 8f6f 	isb	sy
 800523a:	f3bf 8f4f 	dsb	sy
 800523e:	603b      	str	r3, [r7, #0]
}
 8005240:	bf00      	nop
 8005242:	bf00      	nop
 8005244:	e7fd      	b.n	8005242 <vPortEnterCritical+0x4a>
	}
}
 8005246:	bf00      	nop
 8005248:	370c      	adds	r7, #12
 800524a:	46bd      	mov	sp, r7
 800524c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005250:	4770      	bx	lr
 8005252:	bf00      	nop
 8005254:	2000000c 	.word	0x2000000c
 8005258:	e000ed04 	.word	0xe000ed04

0800525c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800525c:	b480      	push	{r7}
 800525e:	b083      	sub	sp, #12
 8005260:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005262:	4b12      	ldr	r3, [pc, #72]	@ (80052ac <vPortExitCritical+0x50>)
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	2b00      	cmp	r3, #0
 8005268:	d10b      	bne.n	8005282 <vPortExitCritical+0x26>
	__asm volatile
 800526a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800526e:	f383 8811 	msr	BASEPRI, r3
 8005272:	f3bf 8f6f 	isb	sy
 8005276:	f3bf 8f4f 	dsb	sy
 800527a:	607b      	str	r3, [r7, #4]
}
 800527c:	bf00      	nop
 800527e:	bf00      	nop
 8005280:	e7fd      	b.n	800527e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005282:	4b0a      	ldr	r3, [pc, #40]	@ (80052ac <vPortExitCritical+0x50>)
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	3b01      	subs	r3, #1
 8005288:	4a08      	ldr	r2, [pc, #32]	@ (80052ac <vPortExitCritical+0x50>)
 800528a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800528c:	4b07      	ldr	r3, [pc, #28]	@ (80052ac <vPortExitCritical+0x50>)
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	2b00      	cmp	r3, #0
 8005292:	d105      	bne.n	80052a0 <vPortExitCritical+0x44>
 8005294:	2300      	movs	r3, #0
 8005296:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	f383 8811 	msr	BASEPRI, r3
}
 800529e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80052a0:	bf00      	nop
 80052a2:	370c      	adds	r7, #12
 80052a4:	46bd      	mov	sp, r7
 80052a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052aa:	4770      	bx	lr
 80052ac:	2000000c 	.word	0x2000000c

080052b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80052b0:	f3ef 8009 	mrs	r0, PSP
 80052b4:	f3bf 8f6f 	isb	sy
 80052b8:	4b15      	ldr	r3, [pc, #84]	@ (8005310 <pxCurrentTCBConst>)
 80052ba:	681a      	ldr	r2, [r3, #0]
 80052bc:	f01e 0f10 	tst.w	lr, #16
 80052c0:	bf08      	it	eq
 80052c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80052c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052ca:	6010      	str	r0, [r2, #0]
 80052cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80052d0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80052d4:	f380 8811 	msr	BASEPRI, r0
 80052d8:	f3bf 8f4f 	dsb	sy
 80052dc:	f3bf 8f6f 	isb	sy
 80052e0:	f7fe ffb0 	bl	8004244 <vTaskSwitchContext>
 80052e4:	f04f 0000 	mov.w	r0, #0
 80052e8:	f380 8811 	msr	BASEPRI, r0
 80052ec:	bc09      	pop	{r0, r3}
 80052ee:	6819      	ldr	r1, [r3, #0]
 80052f0:	6808      	ldr	r0, [r1, #0]
 80052f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052f6:	f01e 0f10 	tst.w	lr, #16
 80052fa:	bf08      	it	eq
 80052fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005300:	f380 8809 	msr	PSP, r0
 8005304:	f3bf 8f6f 	isb	sy
 8005308:	4770      	bx	lr
 800530a:	bf00      	nop
 800530c:	f3af 8000 	nop.w

08005310 <pxCurrentTCBConst>:
 8005310:	200007cc 	.word	0x200007cc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005314:	bf00      	nop
 8005316:	bf00      	nop

08005318 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005318:	b580      	push	{r7, lr}
 800531a:	b082      	sub	sp, #8
 800531c:	af00      	add	r7, sp, #0
	__asm volatile
 800531e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005322:	f383 8811 	msr	BASEPRI, r3
 8005326:	f3bf 8f6f 	isb	sy
 800532a:	f3bf 8f4f 	dsb	sy
 800532e:	607b      	str	r3, [r7, #4]
}
 8005330:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005332:	f7fe fecd 	bl	80040d0 <xTaskIncrementTick>
 8005336:	4603      	mov	r3, r0
 8005338:	2b00      	cmp	r3, #0
 800533a:	d003      	beq.n	8005344 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800533c:	4b06      	ldr	r3, [pc, #24]	@ (8005358 <xPortSysTickHandler+0x40>)
 800533e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005342:	601a      	str	r2, [r3, #0]
 8005344:	2300      	movs	r3, #0
 8005346:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005348:	683b      	ldr	r3, [r7, #0]
 800534a:	f383 8811 	msr	BASEPRI, r3
}
 800534e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005350:	bf00      	nop
 8005352:	3708      	adds	r7, #8
 8005354:	46bd      	mov	sp, r7
 8005356:	bd80      	pop	{r7, pc}
 8005358:	e000ed04 	.word	0xe000ed04

0800535c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800535c:	b480      	push	{r7}
 800535e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005360:	4b0b      	ldr	r3, [pc, #44]	@ (8005390 <vPortSetupTimerInterrupt+0x34>)
 8005362:	2200      	movs	r2, #0
 8005364:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005366:	4b0b      	ldr	r3, [pc, #44]	@ (8005394 <vPortSetupTimerInterrupt+0x38>)
 8005368:	2200      	movs	r2, #0
 800536a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800536c:	4b0a      	ldr	r3, [pc, #40]	@ (8005398 <vPortSetupTimerInterrupt+0x3c>)
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	4a0a      	ldr	r2, [pc, #40]	@ (800539c <vPortSetupTimerInterrupt+0x40>)
 8005372:	fba2 2303 	umull	r2, r3, r2, r3
 8005376:	099b      	lsrs	r3, r3, #6
 8005378:	4a09      	ldr	r2, [pc, #36]	@ (80053a0 <vPortSetupTimerInterrupt+0x44>)
 800537a:	3b01      	subs	r3, #1
 800537c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800537e:	4b04      	ldr	r3, [pc, #16]	@ (8005390 <vPortSetupTimerInterrupt+0x34>)
 8005380:	2207      	movs	r2, #7
 8005382:	601a      	str	r2, [r3, #0]
}
 8005384:	bf00      	nop
 8005386:	46bd      	mov	sp, r7
 8005388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538c:	4770      	bx	lr
 800538e:	bf00      	nop
 8005390:	e000e010 	.word	0xe000e010
 8005394:	e000e018 	.word	0xe000e018
 8005398:	20000000 	.word	0x20000000
 800539c:	10624dd3 	.word	0x10624dd3
 80053a0:	e000e014 	.word	0xe000e014

080053a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80053a4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80053b4 <vPortEnableVFP+0x10>
 80053a8:	6801      	ldr	r1, [r0, #0]
 80053aa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80053ae:	6001      	str	r1, [r0, #0]
 80053b0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80053b2:	bf00      	nop
 80053b4:	e000ed88 	.word	0xe000ed88

080053b8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80053b8:	b480      	push	{r7}
 80053ba:	b085      	sub	sp, #20
 80053bc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80053be:	f3ef 8305 	mrs	r3, IPSR
 80053c2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	2b0f      	cmp	r3, #15
 80053c8:	d915      	bls.n	80053f6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80053ca:	4a18      	ldr	r2, [pc, #96]	@ (800542c <vPortValidateInterruptPriority+0x74>)
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	4413      	add	r3, r2
 80053d0:	781b      	ldrb	r3, [r3, #0]
 80053d2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80053d4:	4b16      	ldr	r3, [pc, #88]	@ (8005430 <vPortValidateInterruptPriority+0x78>)
 80053d6:	781b      	ldrb	r3, [r3, #0]
 80053d8:	7afa      	ldrb	r2, [r7, #11]
 80053da:	429a      	cmp	r2, r3
 80053dc:	d20b      	bcs.n	80053f6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80053de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053e2:	f383 8811 	msr	BASEPRI, r3
 80053e6:	f3bf 8f6f 	isb	sy
 80053ea:	f3bf 8f4f 	dsb	sy
 80053ee:	607b      	str	r3, [r7, #4]
}
 80053f0:	bf00      	nop
 80053f2:	bf00      	nop
 80053f4:	e7fd      	b.n	80053f2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80053f6:	4b0f      	ldr	r3, [pc, #60]	@ (8005434 <vPortValidateInterruptPriority+0x7c>)
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80053fe:	4b0e      	ldr	r3, [pc, #56]	@ (8005438 <vPortValidateInterruptPriority+0x80>)
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	429a      	cmp	r2, r3
 8005404:	d90b      	bls.n	800541e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8005406:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800540a:	f383 8811 	msr	BASEPRI, r3
 800540e:	f3bf 8f6f 	isb	sy
 8005412:	f3bf 8f4f 	dsb	sy
 8005416:	603b      	str	r3, [r7, #0]
}
 8005418:	bf00      	nop
 800541a:	bf00      	nop
 800541c:	e7fd      	b.n	800541a <vPortValidateInterruptPriority+0x62>
	}
 800541e:	bf00      	nop
 8005420:	3714      	adds	r7, #20
 8005422:	46bd      	mov	sp, r7
 8005424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005428:	4770      	bx	lr
 800542a:	bf00      	nop
 800542c:	e000e3f0 	.word	0xe000e3f0
 8005430:	20000df8 	.word	0x20000df8
 8005434:	e000ed0c 	.word	0xe000ed0c
 8005438:	20000dfc 	.word	0x20000dfc

0800543c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800543c:	b580      	push	{r7, lr}
 800543e:	b08a      	sub	sp, #40	@ 0x28
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005444:	2300      	movs	r3, #0
 8005446:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005448:	f7fe fd86 	bl	8003f58 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800544c:	4b5c      	ldr	r3, [pc, #368]	@ (80055c0 <pvPortMalloc+0x184>)
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	2b00      	cmp	r3, #0
 8005452:	d101      	bne.n	8005458 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005454:	f000 f924 	bl	80056a0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005458:	4b5a      	ldr	r3, [pc, #360]	@ (80055c4 <pvPortMalloc+0x188>)
 800545a:	681a      	ldr	r2, [r3, #0]
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	4013      	ands	r3, r2
 8005460:	2b00      	cmp	r3, #0
 8005462:	f040 8095 	bne.w	8005590 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	2b00      	cmp	r3, #0
 800546a:	d01e      	beq.n	80054aa <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800546c:	2208      	movs	r2, #8
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	4413      	add	r3, r2
 8005472:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	f003 0307 	and.w	r3, r3, #7
 800547a:	2b00      	cmp	r3, #0
 800547c:	d015      	beq.n	80054aa <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	f023 0307 	bic.w	r3, r3, #7
 8005484:	3308      	adds	r3, #8
 8005486:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	f003 0307 	and.w	r3, r3, #7
 800548e:	2b00      	cmp	r3, #0
 8005490:	d00b      	beq.n	80054aa <pvPortMalloc+0x6e>
	__asm volatile
 8005492:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005496:	f383 8811 	msr	BASEPRI, r3
 800549a:	f3bf 8f6f 	isb	sy
 800549e:	f3bf 8f4f 	dsb	sy
 80054a2:	617b      	str	r3, [r7, #20]
}
 80054a4:	bf00      	nop
 80054a6:	bf00      	nop
 80054a8:	e7fd      	b.n	80054a6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d06f      	beq.n	8005590 <pvPortMalloc+0x154>
 80054b0:	4b45      	ldr	r3, [pc, #276]	@ (80055c8 <pvPortMalloc+0x18c>)
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	687a      	ldr	r2, [r7, #4]
 80054b6:	429a      	cmp	r2, r3
 80054b8:	d86a      	bhi.n	8005590 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80054ba:	4b44      	ldr	r3, [pc, #272]	@ (80055cc <pvPortMalloc+0x190>)
 80054bc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80054be:	4b43      	ldr	r3, [pc, #268]	@ (80055cc <pvPortMalloc+0x190>)
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80054c4:	e004      	b.n	80054d0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80054c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054c8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80054ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80054d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054d2:	685b      	ldr	r3, [r3, #4]
 80054d4:	687a      	ldr	r2, [r7, #4]
 80054d6:	429a      	cmp	r2, r3
 80054d8:	d903      	bls.n	80054e2 <pvPortMalloc+0xa6>
 80054da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d1f1      	bne.n	80054c6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80054e2:	4b37      	ldr	r3, [pc, #220]	@ (80055c0 <pvPortMalloc+0x184>)
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80054e8:	429a      	cmp	r2, r3
 80054ea:	d051      	beq.n	8005590 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80054ec:	6a3b      	ldr	r3, [r7, #32]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	2208      	movs	r2, #8
 80054f2:	4413      	add	r3, r2
 80054f4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80054f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054f8:	681a      	ldr	r2, [r3, #0]
 80054fa:	6a3b      	ldr	r3, [r7, #32]
 80054fc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80054fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005500:	685a      	ldr	r2, [r3, #4]
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	1ad2      	subs	r2, r2, r3
 8005506:	2308      	movs	r3, #8
 8005508:	005b      	lsls	r3, r3, #1
 800550a:	429a      	cmp	r2, r3
 800550c:	d920      	bls.n	8005550 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800550e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	4413      	add	r3, r2
 8005514:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005516:	69bb      	ldr	r3, [r7, #24]
 8005518:	f003 0307 	and.w	r3, r3, #7
 800551c:	2b00      	cmp	r3, #0
 800551e:	d00b      	beq.n	8005538 <pvPortMalloc+0xfc>
	__asm volatile
 8005520:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005524:	f383 8811 	msr	BASEPRI, r3
 8005528:	f3bf 8f6f 	isb	sy
 800552c:	f3bf 8f4f 	dsb	sy
 8005530:	613b      	str	r3, [r7, #16]
}
 8005532:	bf00      	nop
 8005534:	bf00      	nop
 8005536:	e7fd      	b.n	8005534 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005538:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800553a:	685a      	ldr	r2, [r3, #4]
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	1ad2      	subs	r2, r2, r3
 8005540:	69bb      	ldr	r3, [r7, #24]
 8005542:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005544:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005546:	687a      	ldr	r2, [r7, #4]
 8005548:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800554a:	69b8      	ldr	r0, [r7, #24]
 800554c:	f000 f90a 	bl	8005764 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005550:	4b1d      	ldr	r3, [pc, #116]	@ (80055c8 <pvPortMalloc+0x18c>)
 8005552:	681a      	ldr	r2, [r3, #0]
 8005554:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005556:	685b      	ldr	r3, [r3, #4]
 8005558:	1ad3      	subs	r3, r2, r3
 800555a:	4a1b      	ldr	r2, [pc, #108]	@ (80055c8 <pvPortMalloc+0x18c>)
 800555c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800555e:	4b1a      	ldr	r3, [pc, #104]	@ (80055c8 <pvPortMalloc+0x18c>)
 8005560:	681a      	ldr	r2, [r3, #0]
 8005562:	4b1b      	ldr	r3, [pc, #108]	@ (80055d0 <pvPortMalloc+0x194>)
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	429a      	cmp	r2, r3
 8005568:	d203      	bcs.n	8005572 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800556a:	4b17      	ldr	r3, [pc, #92]	@ (80055c8 <pvPortMalloc+0x18c>)
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	4a18      	ldr	r2, [pc, #96]	@ (80055d0 <pvPortMalloc+0x194>)
 8005570:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005572:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005574:	685a      	ldr	r2, [r3, #4]
 8005576:	4b13      	ldr	r3, [pc, #76]	@ (80055c4 <pvPortMalloc+0x188>)
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	431a      	orrs	r2, r3
 800557c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800557e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005580:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005582:	2200      	movs	r2, #0
 8005584:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005586:	4b13      	ldr	r3, [pc, #76]	@ (80055d4 <pvPortMalloc+0x198>)
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	3301      	adds	r3, #1
 800558c:	4a11      	ldr	r2, [pc, #68]	@ (80055d4 <pvPortMalloc+0x198>)
 800558e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005590:	f7fe fcf0 	bl	8003f74 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005594:	69fb      	ldr	r3, [r7, #28]
 8005596:	f003 0307 	and.w	r3, r3, #7
 800559a:	2b00      	cmp	r3, #0
 800559c:	d00b      	beq.n	80055b6 <pvPortMalloc+0x17a>
	__asm volatile
 800559e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055a2:	f383 8811 	msr	BASEPRI, r3
 80055a6:	f3bf 8f6f 	isb	sy
 80055aa:	f3bf 8f4f 	dsb	sy
 80055ae:	60fb      	str	r3, [r7, #12]
}
 80055b0:	bf00      	nop
 80055b2:	bf00      	nop
 80055b4:	e7fd      	b.n	80055b2 <pvPortMalloc+0x176>
	return pvReturn;
 80055b6:	69fb      	ldr	r3, [r7, #28]
}
 80055b8:	4618      	mov	r0, r3
 80055ba:	3728      	adds	r7, #40	@ 0x28
 80055bc:	46bd      	mov	sp, r7
 80055be:	bd80      	pop	{r7, pc}
 80055c0:	20004a08 	.word	0x20004a08
 80055c4:	20004a1c 	.word	0x20004a1c
 80055c8:	20004a0c 	.word	0x20004a0c
 80055cc:	20004a00 	.word	0x20004a00
 80055d0:	20004a10 	.word	0x20004a10
 80055d4:	20004a14 	.word	0x20004a14

080055d8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80055d8:	b580      	push	{r7, lr}
 80055da:	b086      	sub	sp, #24
 80055dc:	af00      	add	r7, sp, #0
 80055de:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d04f      	beq.n	800568a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80055ea:	2308      	movs	r3, #8
 80055ec:	425b      	negs	r3, r3
 80055ee:	697a      	ldr	r2, [r7, #20]
 80055f0:	4413      	add	r3, r2
 80055f2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80055f4:	697b      	ldr	r3, [r7, #20]
 80055f6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80055f8:	693b      	ldr	r3, [r7, #16]
 80055fa:	685a      	ldr	r2, [r3, #4]
 80055fc:	4b25      	ldr	r3, [pc, #148]	@ (8005694 <vPortFree+0xbc>)
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	4013      	ands	r3, r2
 8005602:	2b00      	cmp	r3, #0
 8005604:	d10b      	bne.n	800561e <vPortFree+0x46>
	__asm volatile
 8005606:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800560a:	f383 8811 	msr	BASEPRI, r3
 800560e:	f3bf 8f6f 	isb	sy
 8005612:	f3bf 8f4f 	dsb	sy
 8005616:	60fb      	str	r3, [r7, #12]
}
 8005618:	bf00      	nop
 800561a:	bf00      	nop
 800561c:	e7fd      	b.n	800561a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800561e:	693b      	ldr	r3, [r7, #16]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	2b00      	cmp	r3, #0
 8005624:	d00b      	beq.n	800563e <vPortFree+0x66>
	__asm volatile
 8005626:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800562a:	f383 8811 	msr	BASEPRI, r3
 800562e:	f3bf 8f6f 	isb	sy
 8005632:	f3bf 8f4f 	dsb	sy
 8005636:	60bb      	str	r3, [r7, #8]
}
 8005638:	bf00      	nop
 800563a:	bf00      	nop
 800563c:	e7fd      	b.n	800563a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800563e:	693b      	ldr	r3, [r7, #16]
 8005640:	685a      	ldr	r2, [r3, #4]
 8005642:	4b14      	ldr	r3, [pc, #80]	@ (8005694 <vPortFree+0xbc>)
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	4013      	ands	r3, r2
 8005648:	2b00      	cmp	r3, #0
 800564a:	d01e      	beq.n	800568a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800564c:	693b      	ldr	r3, [r7, #16]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	2b00      	cmp	r3, #0
 8005652:	d11a      	bne.n	800568a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005654:	693b      	ldr	r3, [r7, #16]
 8005656:	685a      	ldr	r2, [r3, #4]
 8005658:	4b0e      	ldr	r3, [pc, #56]	@ (8005694 <vPortFree+0xbc>)
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	43db      	mvns	r3, r3
 800565e:	401a      	ands	r2, r3
 8005660:	693b      	ldr	r3, [r7, #16]
 8005662:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005664:	f7fe fc78 	bl	8003f58 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005668:	693b      	ldr	r3, [r7, #16]
 800566a:	685a      	ldr	r2, [r3, #4]
 800566c:	4b0a      	ldr	r3, [pc, #40]	@ (8005698 <vPortFree+0xc0>)
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	4413      	add	r3, r2
 8005672:	4a09      	ldr	r2, [pc, #36]	@ (8005698 <vPortFree+0xc0>)
 8005674:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005676:	6938      	ldr	r0, [r7, #16]
 8005678:	f000 f874 	bl	8005764 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800567c:	4b07      	ldr	r3, [pc, #28]	@ (800569c <vPortFree+0xc4>)
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	3301      	adds	r3, #1
 8005682:	4a06      	ldr	r2, [pc, #24]	@ (800569c <vPortFree+0xc4>)
 8005684:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005686:	f7fe fc75 	bl	8003f74 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800568a:	bf00      	nop
 800568c:	3718      	adds	r7, #24
 800568e:	46bd      	mov	sp, r7
 8005690:	bd80      	pop	{r7, pc}
 8005692:	bf00      	nop
 8005694:	20004a1c 	.word	0x20004a1c
 8005698:	20004a0c 	.word	0x20004a0c
 800569c:	20004a18 	.word	0x20004a18

080056a0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80056a0:	b480      	push	{r7}
 80056a2:	b085      	sub	sp, #20
 80056a4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80056a6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 80056aa:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80056ac:	4b27      	ldr	r3, [pc, #156]	@ (800574c <prvHeapInit+0xac>)
 80056ae:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	f003 0307 	and.w	r3, r3, #7
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d00c      	beq.n	80056d4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	3307      	adds	r3, #7
 80056be:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	f023 0307 	bic.w	r3, r3, #7
 80056c6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80056c8:	68ba      	ldr	r2, [r7, #8]
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	1ad3      	subs	r3, r2, r3
 80056ce:	4a1f      	ldr	r2, [pc, #124]	@ (800574c <prvHeapInit+0xac>)
 80056d0:	4413      	add	r3, r2
 80056d2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80056d8:	4a1d      	ldr	r2, [pc, #116]	@ (8005750 <prvHeapInit+0xb0>)
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80056de:	4b1c      	ldr	r3, [pc, #112]	@ (8005750 <prvHeapInit+0xb0>)
 80056e0:	2200      	movs	r2, #0
 80056e2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	68ba      	ldr	r2, [r7, #8]
 80056e8:	4413      	add	r3, r2
 80056ea:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80056ec:	2208      	movs	r2, #8
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	1a9b      	subs	r3, r3, r2
 80056f2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	f023 0307 	bic.w	r3, r3, #7
 80056fa:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	4a15      	ldr	r2, [pc, #84]	@ (8005754 <prvHeapInit+0xb4>)
 8005700:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005702:	4b14      	ldr	r3, [pc, #80]	@ (8005754 <prvHeapInit+0xb4>)
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	2200      	movs	r2, #0
 8005708:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800570a:	4b12      	ldr	r3, [pc, #72]	@ (8005754 <prvHeapInit+0xb4>)
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	2200      	movs	r2, #0
 8005710:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005716:	683b      	ldr	r3, [r7, #0]
 8005718:	68fa      	ldr	r2, [r7, #12]
 800571a:	1ad2      	subs	r2, r2, r3
 800571c:	683b      	ldr	r3, [r7, #0]
 800571e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005720:	4b0c      	ldr	r3, [pc, #48]	@ (8005754 <prvHeapInit+0xb4>)
 8005722:	681a      	ldr	r2, [r3, #0]
 8005724:	683b      	ldr	r3, [r7, #0]
 8005726:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005728:	683b      	ldr	r3, [r7, #0]
 800572a:	685b      	ldr	r3, [r3, #4]
 800572c:	4a0a      	ldr	r2, [pc, #40]	@ (8005758 <prvHeapInit+0xb8>)
 800572e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005730:	683b      	ldr	r3, [r7, #0]
 8005732:	685b      	ldr	r3, [r3, #4]
 8005734:	4a09      	ldr	r2, [pc, #36]	@ (800575c <prvHeapInit+0xbc>)
 8005736:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005738:	4b09      	ldr	r3, [pc, #36]	@ (8005760 <prvHeapInit+0xc0>)
 800573a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800573e:	601a      	str	r2, [r3, #0]
}
 8005740:	bf00      	nop
 8005742:	3714      	adds	r7, #20
 8005744:	46bd      	mov	sp, r7
 8005746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574a:	4770      	bx	lr
 800574c:	20000e00 	.word	0x20000e00
 8005750:	20004a00 	.word	0x20004a00
 8005754:	20004a08 	.word	0x20004a08
 8005758:	20004a10 	.word	0x20004a10
 800575c:	20004a0c 	.word	0x20004a0c
 8005760:	20004a1c 	.word	0x20004a1c

08005764 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005764:	b480      	push	{r7}
 8005766:	b085      	sub	sp, #20
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800576c:	4b28      	ldr	r3, [pc, #160]	@ (8005810 <prvInsertBlockIntoFreeList+0xac>)
 800576e:	60fb      	str	r3, [r7, #12]
 8005770:	e002      	b.n	8005778 <prvInsertBlockIntoFreeList+0x14>
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	60fb      	str	r3, [r7, #12]
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	687a      	ldr	r2, [r7, #4]
 800577e:	429a      	cmp	r2, r3
 8005780:	d8f7      	bhi.n	8005772 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	685b      	ldr	r3, [r3, #4]
 800578a:	68ba      	ldr	r2, [r7, #8]
 800578c:	4413      	add	r3, r2
 800578e:	687a      	ldr	r2, [r7, #4]
 8005790:	429a      	cmp	r2, r3
 8005792:	d108      	bne.n	80057a6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	685a      	ldr	r2, [r3, #4]
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	685b      	ldr	r3, [r3, #4]
 800579c:	441a      	add	r2, r3
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	685b      	ldr	r3, [r3, #4]
 80057ae:	68ba      	ldr	r2, [r7, #8]
 80057b0:	441a      	add	r2, r3
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	429a      	cmp	r2, r3
 80057b8:	d118      	bne.n	80057ec <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	681a      	ldr	r2, [r3, #0]
 80057be:	4b15      	ldr	r3, [pc, #84]	@ (8005814 <prvInsertBlockIntoFreeList+0xb0>)
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	429a      	cmp	r2, r3
 80057c4:	d00d      	beq.n	80057e2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	685a      	ldr	r2, [r3, #4]
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	685b      	ldr	r3, [r3, #4]
 80057d0:	441a      	add	r2, r3
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	681a      	ldr	r2, [r3, #0]
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	601a      	str	r2, [r3, #0]
 80057e0:	e008      	b.n	80057f4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80057e2:	4b0c      	ldr	r3, [pc, #48]	@ (8005814 <prvInsertBlockIntoFreeList+0xb0>)
 80057e4:	681a      	ldr	r2, [r3, #0]
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	601a      	str	r2, [r3, #0]
 80057ea:	e003      	b.n	80057f4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	681a      	ldr	r2, [r3, #0]
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80057f4:	68fa      	ldr	r2, [r7, #12]
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	429a      	cmp	r2, r3
 80057fa:	d002      	beq.n	8005802 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	687a      	ldr	r2, [r7, #4]
 8005800:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005802:	bf00      	nop
 8005804:	3714      	adds	r7, #20
 8005806:	46bd      	mov	sp, r7
 8005808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580c:	4770      	bx	lr
 800580e:	bf00      	nop
 8005810:	20004a00 	.word	0x20004a00
 8005814:	20004a08 	.word	0x20004a08

08005818 <memset>:
 8005818:	4402      	add	r2, r0
 800581a:	4603      	mov	r3, r0
 800581c:	4293      	cmp	r3, r2
 800581e:	d100      	bne.n	8005822 <memset+0xa>
 8005820:	4770      	bx	lr
 8005822:	f803 1b01 	strb.w	r1, [r3], #1
 8005826:	e7f9      	b.n	800581c <memset+0x4>

08005828 <__libc_init_array>:
 8005828:	b570      	push	{r4, r5, r6, lr}
 800582a:	4d0d      	ldr	r5, [pc, #52]	@ (8005860 <__libc_init_array+0x38>)
 800582c:	4c0d      	ldr	r4, [pc, #52]	@ (8005864 <__libc_init_array+0x3c>)
 800582e:	1b64      	subs	r4, r4, r5
 8005830:	10a4      	asrs	r4, r4, #2
 8005832:	2600      	movs	r6, #0
 8005834:	42a6      	cmp	r6, r4
 8005836:	d109      	bne.n	800584c <__libc_init_array+0x24>
 8005838:	4d0b      	ldr	r5, [pc, #44]	@ (8005868 <__libc_init_array+0x40>)
 800583a:	4c0c      	ldr	r4, [pc, #48]	@ (800586c <__libc_init_array+0x44>)
 800583c:	f000 f826 	bl	800588c <_init>
 8005840:	1b64      	subs	r4, r4, r5
 8005842:	10a4      	asrs	r4, r4, #2
 8005844:	2600      	movs	r6, #0
 8005846:	42a6      	cmp	r6, r4
 8005848:	d105      	bne.n	8005856 <__libc_init_array+0x2e>
 800584a:	bd70      	pop	{r4, r5, r6, pc}
 800584c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005850:	4798      	blx	r3
 8005852:	3601      	adds	r6, #1
 8005854:	e7ee      	b.n	8005834 <__libc_init_array+0xc>
 8005856:	f855 3b04 	ldr.w	r3, [r5], #4
 800585a:	4798      	blx	r3
 800585c:	3601      	adds	r6, #1
 800585e:	e7f2      	b.n	8005846 <__libc_init_array+0x1e>
 8005860:	0800599c 	.word	0x0800599c
 8005864:	0800599c 	.word	0x0800599c
 8005868:	0800599c 	.word	0x0800599c
 800586c:	080059a0 	.word	0x080059a0

08005870 <memcpy>:
 8005870:	440a      	add	r2, r1
 8005872:	4291      	cmp	r1, r2
 8005874:	f100 33ff 	add.w	r3, r0, #4294967295
 8005878:	d100      	bne.n	800587c <memcpy+0xc>
 800587a:	4770      	bx	lr
 800587c:	b510      	push	{r4, lr}
 800587e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005882:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005886:	4291      	cmp	r1, r2
 8005888:	d1f9      	bne.n	800587e <memcpy+0xe>
 800588a:	bd10      	pop	{r4, pc}

0800588c <_init>:
 800588c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800588e:	bf00      	nop
 8005890:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005892:	bc08      	pop	{r3}
 8005894:	469e      	mov	lr, r3
 8005896:	4770      	bx	lr

08005898 <_fini>:
 8005898:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800589a:	bf00      	nop
 800589c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800589e:	bc08      	pop	{r3}
 80058a0:	469e      	mov	lr, r3
 80058a2:	4770      	bx	lr
